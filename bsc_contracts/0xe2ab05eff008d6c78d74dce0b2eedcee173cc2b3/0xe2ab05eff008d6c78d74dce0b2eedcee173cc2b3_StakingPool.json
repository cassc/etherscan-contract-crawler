{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BtcitrumLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./StakingPool.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./StakingPool.sol\\\";\\r\\n\\r\\ncontract BtcitrumLens {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Txhash {\\r\\n        uint256 totalHash;\\r\\n        uint256 totalStake;\\r\\n        uint256 userHash;\\r\\n        uint256 userStake;\\r\\n    }\\r\\n\\r\\n    function getUser(StakingPool stakingPool,address user) public view returns(Txhash memory){\\r\\n        uint256 totalHash = stakingPool.totalHash();\\r\\n        (,,,,uint256 tokenAmount) = stakingPool.poolInfo(1);\\r\\n        uint256 totalStaking = tokenAmount;\\r\\n        uint256 userTotalHash = stakingPool.userTotalHash(user);\\r\\n        (uint256 userAmount,,) = stakingPool.userInfo(1,user);\\r\\n        uint256 userStakeing = userAmount;\\r\\n        return Txhash({\\r\\n            totalHash:totalHash,\\r\\n            totalStake:totalStaking,\\r\\n            userHash:userTotalHash,\\r\\n            userStake: userStakeing\\r\\n        });\\r\\n    }\\r\\n\\r\\n\\r\\n    struct Rewards{\\r\\n        uint256 pendingAllRewards;\\r\\n        uint256 allRewards;\\r\\n    }\\r\\n\\r\\n    function rewards(StakingPool stakingPool,address user) public view returns (Rewards memory) {\\r\\n        uint256 pendingAllRewards = 0;\\r\\n        uint256 allReceivedRewards = 0;\\r\\n        uint256 userAllDebt = 0;\\r\\n        for(uint256 i=0;i< 2;i++){\\r\\n            (uint256 pendingBtcAmount, ) = stakingPool.pending(i,user);\\r\\n            pendingAllRewards = pendingAllRewards.add(pendingBtcAmount);\\r\\n\\r\\n            (,,uint256 receivedRewards) = stakingPool.userInfo(i,user);\\r\\n            allReceivedRewards = allReceivedRewards.add(receivedRewards);\\r\\n        }\\r\\n        uint256 allRewards = pendingAllRewards.add(allReceivedRewards);\\r\\n        return Rewards({\\r\\n            pendingAllRewards: pendingAllRewards,\\r\\n            allRewards: allRewards\\r\\n        });\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IBtc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport {IERC20 as SIERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IBtc is SIERC20 {\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPancakePair.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interface/IBtc.sol\\\";\\r\\nimport \\\"./interface/IPancakePair.sol\\\";\\r\\n\\r\\ninterface IStakingPool {\\r\\n    function deposit(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount) external;\\r\\n}\\r\\n\\r\\ncontract StakingPool is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bytes32 public constant HashEIP712Domain = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    bytes32 public constant HashOrderStruct = keccak256(\\r\\n        \\\"WithdrawRequest(address user,uint256 nonce,uint256 amount,uint256 expirationTime,address verifyingContract)\\\"\\r\\n    );\\r\\n\\r\\n\\r\\n    bytes32 public HashEIP712Version;\\r\\n    bytes32 public HashEIP712Name;\\r\\n\\r\\n    string public name = \\\"StakingPool\\\";\\r\\n    string public version = \\\"1.0.0\\\";\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;     // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt.\\r\\n        uint256 receivedRewards;\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 token;           // Address of LP token contract.\\r\\n        uint256 hashRate;       // How many allocation points assigned to this pool. BTCs to distribute per block.\\r\\n        uint256 lastRewardBlock;  // Last block number that BTCs distribution occurs.\\r\\n        uint256 accBtcPerShare; // Accumulated BTCs per share, times 1e12.\\r\\n        uint256 totalAmount;    // Total amount of current pool deposit.\\r\\n    }\\r\\n\\r\\n    struct Sig {\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    struct WithdrawRequest {\\r\\n        address user;\\r\\n        uint256 nonce;\\r\\n        uint256 amount;\\r\\n        uint256 expirationTime;\\r\\n        address verifyingContract;\\r\\n    }\\r\\n\\r\\n    mapping(address => address) public inviteMapping;\\r\\n    mapping(address => bool) public inviteList;\\r\\n\\r\\n    // The BTC Token!\\r\\n    IBtc public btc;\\r\\n    IERC20 public usdt;\\r\\n\\r\\n    IPancakePair public pair;\\r\\n\\r\\n    address public admin;\\r\\n\\r\\n    address public operator;\\r\\n\\r\\n    address public dynamicRewards;\\r\\n\\r\\n    address public fundRewards;\\r\\n\\r\\n    address public manager;\\r\\n\\r\\n    // BTC tokens created per block.\\r\\n    uint256 public btcPerBlock;\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    // pid corresponding address\\r\\n    mapping(address => uint256) public LpOfPid;\\r\\n\\r\\n    mapping(address => uint256) public userNonceMapping;\\r\\n    // Control mining\\r\\n    bool public paused = true;\\r\\n    // The block number when BTC mining starts.\\r\\n    uint256 public startBlock;\\r\\n    // How many blocks are halved\\r\\n    uint256 public halvingPeriod = 210000 * 200;\\r\\n\\r\\n    event Invite(address indexed inviter,address indexed invitee);\\r\\n    event Mintblock(uint256 blockNumber,uint256 rewards);\\r\\n    event ExsitBtc(uint256 blockNumber,uint256 btcTotalSupply);\\r\\n    event DepositInvalid(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event ForceRedem(address indexed user, uint256 amount,uint256 blockNumber);\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event WithdrawApply(address indexed user, uint256 indexed pid, uint256 amount,uint256 startBlockNumber);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount,uint256 nonce);\\r\\n    event Claim(address indexed user,uint256 amount,uint256 blockNumber);\\r\\n\\r\\n    constructor(\\r\\n        IBtc _btc,\\r\\n        IERC20 _usdt,\\r\\n        uint256 _btcPerBlock,\\r\\n        address _operator,\\r\\n        address _dynamicRewards,\\r\\n        address _fundRewards,\\r\\n        address _manager\\r\\n    ) public {\\r\\n        btc = _btc;\\r\\n        usdt = _usdt;\\r\\n        btcPerBlock = _btcPerBlock;\\r\\n        operator = _operator;\\r\\n        dynamicRewards = _dynamicRewards;\\r\\n        fundRewards = _fundRewards;\\r\\n        manager = _manager;\\r\\n        admin = msg.sender;\\r\\n\\r\\n        HashEIP712Name = keccak256(bytes(name));\\r\\n        HashEIP712Version = keccak256(bytes(version));\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin ,\\\"user is not admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setHalvingPeriod(uint256 _block) public onlyAdmin {\\r\\n        halvingPeriod = _block;\\r\\n    }\\r\\n\\r\\n    function setPair(IPancakePair _pair) public onlyAdmin {\\r\\n        pair = _pair;\\r\\n    }\\r\\n\\r\\n    function setStartBlock(uint256 blockNumber) public onlyAdmin{\\r\\n        startBlock = blockNumber;\\r\\n    }\\r\\n\\r\\n\\r\\n    function poolLength() public view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setPause() public onlyAdmin {\\r\\n        paused = !paused;\\r\\n        if(paused == false){\\r\\n            startBlock = block.number;\\r\\n            for (uint256 pid = 0; pid < poolLength(); pid++) {\\r\\n                PoolInfo storage pool = poolInfo[pid];\\r\\n                pool.lastRewardBlock = startBlock;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function invite(address inviter) public {\\r\\n        require(inviteList[msg.sender]== false,\\\"inviter is exist\\\");\\r\\n\\r\\n        require((inviter == dynamicRewards && !inviteList[msg.sender]) || (inviteList[inviter] && !inviteList[msg.sender]),\\\"inviter is invalid\\\");\\r\\n        inviteMapping[msg.sender]=inviter;\\r\\n\\r\\n        inviteList[msg.sender]=true;\\r\\n        emit Invite(inviter,msg.sender);\\r\\n    }\\r\\n\\r\\n    // pid = 1need USDT,\\r\\n    // pid = 2 need BTC\\r\\n    function add(IERC20 _token,uint256 _hashRate, bool _withUpdate) public onlyAdmin {\\r\\n        require(address(_token) != address(0), \\\"_token is the zero address\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        poolInfo.push(PoolInfo({\\r\\n            token : _token,\\r\\n            hashRate : _hashRate,\\r\\n            lastRewardBlock : lastRewardBlock,\\r\\n            accBtcPerShare : 0,\\r\\n            totalAmount : 0\\r\\n            }));\\r\\n        LpOfPid[address(_token)] = poolLength() - 1;\\r\\n    }\\r\\n\\r\\n    function mintblock(uint256 blockNumber,uint256 rewards) public onlyAdmin{\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n        uint256 btcTotalSupply = btc.totalSupply();\\r\\n        emit ExsitBtc(block.number,btcTotalSupply);\\r\\n        emit Mintblock(blockNumber,rewards);\\r\\n    }\\r\\n\\r\\n    function phase(uint256 blockNumber) public view returns (uint256) {\\r\\n        if (halvingPeriod == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (blockNumber > startBlock) {\\r\\n            return (blockNumber.sub(startBlock).sub(1)).div(halvingPeriod);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function reward(uint256 blockNumber) public view returns (uint256) {\\r\\n        uint256 _phase = phase(blockNumber);\\r\\n        return btcPerBlock.div(2 ** _phase);\\r\\n    }\\r\\n\\r\\n    function getBtcBlockReward(uint256 _lastRewardBlock) public view returns (uint256) {\\r\\n        if(paused) return 0;\\r\\n        uint256 blockReward = 0;\\r\\n        uint256 n = phase(_lastRewardBlock);\\r\\n        uint256 m = phase(block.number);\\r\\n        while (n < m) {\\r\\n            n++;\\r\\n            uint256 r = n.mul(halvingPeriod).add(startBlock);\\r\\n            blockReward = blockReward.add((r.sub(_lastRewardBlock)).mul(reward(r)));\\r\\n            _lastRewardBlock = r;\\r\\n        }\\r\\n        blockReward = blockReward.add((block.number.sub(_lastRewardBlock)).mul(reward(block.number)));\\r\\n        return blockReward;\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; pid++) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n        uint256 btcTotalSupply = btc.totalSupply();\\r\\n        emit ExsitBtc(block.number,btcTotalSupply);\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        if(paused){\\r\\n            return;\\r\\n        }\\r\\n        //uint256 lpSupply = pool.token.balanceOf(address(this));\\r\\n        uint256 lpSupply = pool.totalAmount;\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 blockReward = getBtcBlockReward(pool.lastRewardBlock);\\r\\n        if (blockReward <= 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 btcReward = blockReward.mul(pidOfHash(_pid)).div(totalHash());\\r\\n        bool minRet = btc.mint(address(this), btcReward);\\r\\n        if (minRet) {\\r\\n            pool.accBtcPerShare = pool.accBtcPerShare.add(btcReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns(uint256){\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = pair.getReserves();\\r\\n        if(pair.token0() == address(btc)){\\r\\n            return uint256(reserve1).mul(100).div(uint256(reserve0));\\r\\n        }else{\\r\\n            return uint256(reserve0).mul(100).div(uint256(reserve1));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pidOfHash(uint256 _pid) public view returns(uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if(_pid == 0){\\r\\n            return pool.totalAmount.mul(pool.hashRate).div(1e17);\\r\\n        }else if(_pid == 1){\\r\\n            uint256 btcPrice = 0;\\r\\n            if(address(pair) != address(0)){\\r\\n                btcPrice = getPrice();\\r\\n            }\\r\\n            return pool.totalAmount.mul(btcPrice).mul(pool.hashRate).div(1e19);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function userTotalHash(address user) public view returns(uint256){\\r\\n        uint256 totalHashs = 0;\\r\\n        for(uint256 i = 0;i <= poolLength()-1;i++){\\r\\n            UserInfo storage userInfo = userInfo[i][user];\\r\\n            PoolInfo storage poolId = poolInfo[i];\\r\\n            if(userInfo.amount>0){\\r\\n                if(i == 0){\\r\\n                    totalHashs = totalHashs.add(userInfo.amount.mul(poolId.hashRate).div(1e17));\\r\\n                }else if(i == 1){\\r\\n                    uint256 btcPrice = 0;\\r\\n                    if(address(pair) != address(0)){\\r\\n                        btcPrice = getPrice();\\r\\n                    }\\r\\n                    totalHashs = totalHashs.add(userInfo.amount.mul(btcPrice).mul(poolId.hashRate).div(1e19));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return totalHashs;\\r\\n    }\\r\\n\\r\\n    function totalHash() public view returns(uint256){\\r\\n        uint256 totalHashs = 0;\\r\\n        for(uint256 i = 0;i <= poolLength()-1;i++){\\r\\n            PoolInfo storage poolId = poolInfo[i];\\r\\n            if(i == 0){\\r\\n                totalHashs = totalHashs.add(poolId.totalAmount.mul(poolId.hashRate).div(1e17));\\r\\n            }else if(i == 1){\\r\\n                uint256 btcPrice = 0;\\r\\n                if(address(pair) != address(0)){\\r\\n                    btcPrice = getPrice();\\r\\n                }\\r\\n                totalHashs = totalHashs.add(poolId.totalAmount.mul(btcPrice).mul(poolId.hashRate).div(1e19));\\r\\n            }\\r\\n\\r\\n        }\\r\\n        return totalHashs;\\r\\n    }\\r\\n\\r\\n    function pendingRewards(address _user) external view returns (uint256, uint256){\\r\\n        uint256 totalAmount = 0;\\r\\n        for(uint256 i=0;i<2;i++){\\r\\n            uint256 userAmount = pendingBtc(i, _user);\\r\\n            totalAmount+=userAmount;\\r\\n        }\\r\\n        return (totalAmount, 0);\\r\\n    }\\r\\n\\r\\n    function claim() public notPause{\\r\\n        massUpdatePools();\\r\\n        uint256 allRewards = 0;\\r\\n        for(uint256 i = 0;i < poolLength();i++){\\r\\n            UserInfo storage user = userInfo[i][msg.sender];\\r\\n            PoolInfo storage pool = poolInfo[i];\\r\\n            if (user.amount > 0) {\\r\\n                uint256 pendingAmount = user.amount.mul(pool.accBtcPerShare).div(1e12).sub(user.rewardDebt);\\r\\n                if (pendingAmount > 0) {\\r\\n                    user.receivedRewards = user.receivedRewards.add(pendingAmount);\\r\\n                    allRewards=allRewards.add(pendingAmount);\\r\\n                    safeBtcTransfer(msg.sender, pendingAmount);\\r\\n                }\\r\\n            }\\r\\n            user.rewardDebt = user.amount.mul(pool.accBtcPerShare).div(1e12);\\r\\n        }\\r\\n        emit Claim(msg.sender,allRewards,block.number);\\r\\n    }\\r\\n\\r\\n\\r\\n    // View function to see pending BTCs on frontend.\\r\\n    function pending(uint256 _pid, address _user) external view returns (uint256, uint256){\\r\\n        uint256 btcAmount = pendingBtc(_pid, _user);\\r\\n        return (btcAmount, 0);\\r\\n    }\\r\\n\\r\\n    function pendingBtc(uint256 _pid, address _user) private view returns (uint256){\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accBtcPerShare = pool.accBtcPerShare;\\r\\n        uint256 lpSupply = pool.totalAmount;\\r\\n        if (!paused && user.amount > 0) {\\r\\n            if (block.number > pool.lastRewardBlock) {\\r\\n                uint256 blockReward = getBtcBlockReward(pool.lastRewardBlock);\\r\\n                uint256 btcReward = blockReward.mul(pidOfHash(_pid)).div(totalHash());\\r\\n                accBtcPerShare = accBtcPerShare.add(btcReward.mul(1e12).div(lpSupply));\\r\\n                return user.amount.mul(accBtcPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            }\\r\\n            if (block.number == pool.lastRewardBlock) {\\r\\n                return user.amount.mul(accBtcPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function depositInvalid(uint256 _pid,address _user,uint256 _amount) public onlyAdmin {\\r\\n        massUpdatePools();\\r\\n        UserInfo storage userInfo = userInfo[_pid][_user];\\r\\n        require(userInfo.amount>=_amount,\\\"user amount is too low\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        uint256 pendingAmount = userInfo.amount.mul(pool.accBtcPerShare).div(1e12).sub(userInfo.rewardDebt);\\r\\n        if (pendingAmount > 0) {\\r\\n            userInfo.receivedRewards = userInfo.receivedRewards.add(pendingAmount);\\r\\n            safeBtcTransfer(_user, pendingAmount);\\r\\n            emit Claim(_user,pendingAmount,block.number);\\r\\n        }\\r\\n\\r\\n        userInfo.amount = userInfo.amount.sub(_amount);\\r\\n        require(pool.totalAmount>=_amount,\\\"pool amount is too low\\\");\\r\\n        pool.totalAmount = pool.totalAmount.sub(_amount);\\r\\n\\r\\n        userInfo.rewardDebt = userInfo.amount.mul(pool.accBtcPerShare).div(1e12);\\r\\n        emit DepositInvalid(_user,_pid,_amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Deposit LP tokens to HecoPool for BTC allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(inviteMapping[msg.sender]!= address(0),\\\"The user is not invited\\\");\\r\\n        depositToken(_pid, _amount, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    function allowBtc(address user) public view returns(uint256){\\r\\n        UserInfo storage usdtUser = userInfo[0][user];\\r\\n        UserInfo storage btcUser = userInfo[1][user];\\r\\n        uint256 allowBtcAmount = usdtUser.amount.mul(30).div(100);\\r\\n        if(allowBtcAmount < btcUser.amount){\\r\\n            return 0;\\r\\n        }\\r\\n        return allowBtcAmount.sub(btcUser.amount);\\r\\n    }\\r\\n\\r\\n    function depositToken(uint256 _pid, uint256 _amount, address _user) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        massUpdatePools();\\r\\n        if(_pid == 0){\\r\\n            require(_amount>=1e20 && _amount%1e20==0 ,\\\"deposit usdt amount is invalid\\\");\\r\\n        }\\r\\n        if(_pid == 1){\\r\\n            require(_amount>=1e15 ,\\\"deposit btc amount is invalid\\\");\\r\\n            uint256 btcPrice = getPrice();\\r\\n            UserInfo storage usdtUser = userInfo[0][_user];\\r\\n            uint256 allowBalance = allowBtc(_user);\\r\\n            require(allowBalance>=_amount,\\\"deposit USDT is too low\\\");\\r\\n        }\\r\\n\\r\\n        if (user.amount > 0 && !paused) {\\r\\n            uint256 pendingAmount = user.amount.mul(pool.accBtcPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if (pendingAmount > 0) {\\r\\n                user.receivedRewards = user.receivedRewards.add(pendingAmount);\\r\\n                safeBtcTransfer(_user, pendingAmount);\\r\\n                emit Claim(_user,pendingAmount,block.number);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            if(_pid == 0){\\r\\n                pool.token.safeTransferFrom(_user, operator, _amount.mul(10).div(100));\\r\\n                pool.token.safeTransferFrom(_user, dynamicRewards, _amount.mul(20).div(100));\\r\\n                pool.token.safeTransferFrom(_user,fundRewards, _amount.mul(50).div(100));\\r\\n                pool.token.safeTransferFrom(_user,manager, _amount.mul(20).div(100));\\r\\n            }else{\\r\\n                pool.token.safeTransferFrom(_user, address(this), _amount);\\r\\n            }\\r\\n            user.amount = user.amount.add(_amount);\\r\\n            pool.totalAmount = pool.totalAmount.add(_amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accBtcPerShare).div(1e12);\\r\\n        emit Deposit(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function checkWithdrawReuest(address user,WithdrawRequest memory withdrawRequest,Sig memory withdrawSig) public view returns(bool){\\r\\n        require(user == withdrawRequest.user, \\\"WithdrawRequest user is not correct user\\\");\\r\\n\\r\\n        require(withdrawRequest.expirationTime == 0 || withdrawRequest.expirationTime >= block.timestamp,\\\"WithdrawRequest is expiration\\\");\\r\\n\\r\\n        uint256 currentUserNonce = userNonceMapping[user];\\r\\n        require(currentUserNonce.add(1) == withdrawRequest.nonce,\\\"User nonce is invalid\\\");\\r\\n\\r\\n        require(withdrawRequest.verifyingContract == address(this),\\\"withdraw request is invalid\\\");\\r\\n\\r\\n        bytes memory withdrawRequestBytes = matchWithdrawEIP1155Encode(withdrawRequest);\\r\\n\\r\\n        bytes32 withdrawRequestDigest = _hashTypedDataV4(keccak256(withdrawRequestBytes));\\r\\n\\r\\n        require(admin == ecrecover(withdrawRequestDigest,withdrawSig.v,withdrawSig.r,withdrawSig.s),\\\"Signer is invalid\\\");\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdraw(WithdrawRequest memory withdrawRequest,Sig memory sig) public notPause {\\r\\n        uint256 _pid = 1;\\r\\n        address _user = msg.sender;\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n\\r\\n        bool result = checkWithdrawReuest(msg.sender,withdrawRequest,sig);\\r\\n        uint256 _amount = withdrawRequest.amount;\\r\\n        massUpdatePools();\\r\\n\\r\\n        uint256 pendingAmount = user.amount.mul(pool.accBtcPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (pendingAmount > 0) {\\r\\n            user.receivedRewards = user.receivedRewards.add(pendingAmount);\\r\\n            safeBtcTransfer(_user, pendingAmount);\\r\\n            emit Claim(_user,pendingAmount,block.number);\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            pool.token.safeTransfer(_user, _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accBtcPerShare).div(1e12);\\r\\n        userNonceMapping[_user] = userNonceMapping[_user].add(1);\\r\\n        emit Withdraw(_user, _pid, _amount,withdrawRequest.nonce);\\r\\n    }\\r\\n\\r\\n    //\u540e\u9762\u505a\u5230\u8fd9\u91cc\u589e\u52a0\u9a8c\u7b7e\\r\\n    function withdrawApply(uint256 amount) public notPause{\\r\\n        massUpdatePools();\\r\\n        UserInfo storage userInfo = userInfo[1][msg.sender];\\r\\n        require(userInfo.amount >= amount,\\\"user amount is lower than amount\\\");\\r\\n        PoolInfo storage poolInfo = poolInfo[1];\\r\\n        if (userInfo.amount > 0) {\\r\\n            uint256 pendingAmount = userInfo.amount.mul(poolInfo.accBtcPerShare).div(1e12).sub(userInfo.rewardDebt);\\r\\n            if (pendingAmount > 0) {\\r\\n                userInfo.receivedRewards = userInfo.receivedRewards.add(pendingAmount);\\r\\n                safeBtcTransfer(msg.sender, pendingAmount);\\r\\n                emit Claim(msg.sender,pendingAmount,block.number);\\r\\n            }\\r\\n        }\\r\\n        if (amount > 0) {\\r\\n            userInfo.amount = userInfo.amount.sub(amount);\\r\\n            poolInfo.totalAmount = poolInfo.totalAmount.sub(amount);\\r\\n        }\\r\\n        userInfo.rewardDebt = userInfo.amount.mul(poolInfo.accBtcPerShare).div(1e12);\\r\\n        emit WithdrawApply(msg.sender,1,amount,block.number);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Safe BTC transfer function, just in case if rounding error causes pool to not have enough BTCs.\\r\\n    function safeBtcTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 btcBal = btc.balanceOf(address(this));\\r\\n        if (_amount > btcBal) {\\r\\n            btc.transfer(_to, btcBal);\\r\\n        } else {\\r\\n            btc.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier notPause() {\\r\\n        require(paused == false, \\\"Mining has been suspended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function matchWithdrawEIP1155Encode(WithdrawRequest memory withdrawRequest) internal pure returns(bytes memory) {\\r\\n        bytes memory withdrawRequestBytes = abi.encode(\\r\\n            HashOrderStruct,\\r\\n                withdrawRequest.user,\\r\\n                withdrawRequest.nonce,\\r\\n                withdrawRequest.amount,\\r\\n                withdrawRequest.expirationTime,\\r\\n                withdrawRequest.verifyingContract\\r\\n        );\\r\\n        return withdrawRequestBytes;\\r\\n    }\\r\\n\\r\\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\r\\n        // return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\r\\n        return _toTypedDataHash(_domainSeparatorV4(), structHash);\\r\\n    }\\r\\n\\r\\n    function _toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n    }\\r\\n\\r\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\r\\n        return keccak256(abi.encode(HashEIP712Domain, HashEIP712Name, HashEIP712Version, block.chainid, address(this)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBtc\",\"name\":\"_btc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_btcPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dynamicRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositInvalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"btcTotalSupply\",\"type\":\"uint256\"}],\"name\":\"ExsitBtc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ForceRedem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"invitee\",\"type\":\"address\"}],\"name\":\"Invite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"Mintblock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlockNumber\",\"type\":\"uint256\"}],\"name\":\"WithdrawApply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HashEIP712Domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HashEIP712Name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HashEIP712Version\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HashOrderStruct\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LpOfPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hashRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowBtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btc\",\"outputs\":[{\"internalType\":\"contract IBtc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"internalType\":\"struct StakingPool.WithdrawRequest\",\"name\":\"withdrawRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct StakingPool.Sig\",\"name\":\"withdrawSig\",\"type\":\"tuple\"}],\"name\":\"checkWithdrawReuest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositInvalid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getBtcBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"invite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"mintblock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pidOfHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hashRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBtcPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setHalvingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNonceMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTotalHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"internalType\":\"struct StakingPool.WithdrawRequest\",\"name\":\"withdrawRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct StakingPool.Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawApply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c78387c37950bd508b2277cbb17d16f06ae10cb20000000000000000000000006f7610a6c00216f9e8ff1d228cc17eb7fedc5abe00000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000a5355abd333e0c56528b8df7c8078d4984d4b836000000000000000000000000fef885150d37c944f06b382722898be7ca6444a300000000000000000000000048b918416a525742a8281cccd600b7b7e32b974d000000000000000000000000afc0c321307b75be8ebf00c46e6f36e86596dd7e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6927a9633d86c2f1e6be363d3d3c0ebf120d5075b6c5ad8776981fbaaec6a33"}