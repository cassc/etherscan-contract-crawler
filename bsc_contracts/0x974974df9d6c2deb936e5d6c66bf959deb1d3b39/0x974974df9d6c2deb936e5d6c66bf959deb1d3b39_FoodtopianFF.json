{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: FF Drip.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\ncontract FoodtopianFF {\r\n    uint256 public devFeePercentage;\r\n    uint256 public devFeeBalance;\r\n    address public owner;\r\n    IERC20 public token;\r\n\r\n    struct Game {\r\n        address player1;\r\n        address player2;\r\n        uint256 betAmount;\r\n        bool isActive;\r\n        address winner;\r\n        address lastWinner;\r\n        uint256 gameStartTime;\r\n    }\r\n\r\n    Game[4] public games;\r\n\r\n    event GameCreated(uint256 indexed gameId, address indexed player1, uint256 betAmount);\r\n    event GameJoined(uint256 indexed gameId, address indexed player2);\r\n    event GameCancelled(uint256 indexed gameId);\r\n    event WinnerDecided(uint256 indexed gameId, address indexed winner);\r\n    event DevFeeWithdrawn(address indexed owner, uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _devFeePercentage, address _tokenAddress) {\r\n        owner = msg.sender;\r\n        devFeePercentage = _devFeePercentage;\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n\r\n    function createGame(uint256 gameId, uint256 betAmount) external {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(!games[gameId].isActive, \"Game is already active.\");\r\n        require(betAmount > 0, \"Bet amount must be greater than 0.\");\r\n        require(token.transferFrom(msg.sender, address(this), betAmount), \"Transfer failed\");\r\n\r\n        games[gameId] = Game({\r\n            player1: msg.sender,\r\n            player2: address(0),\r\n            betAmount: betAmount,\r\n            isActive: true,\r\n            winner: address(0),\r\n            lastWinner: games[gameId].lastWinner, // Keep the last winner\r\n            gameStartTime: 0 // Initialized to 0; will be set when the second player joins\r\n        });\r\n\r\n        emit GameCreated(gameId, msg.sender, betAmount);\r\n    }\r\n\r\n    function joinGame(uint256 gameId, uint256 betAmount) external {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(games[gameId].isActive, \"Game is not active.\");\r\n        require(games[gameId].player2 == address(0), \"Game already has a second player.\");\r\n        require(betAmount == games[gameId].betAmount, \"Bet amount does not match.\");\r\n        require(token.transferFrom(msg.sender, address(this), betAmount), \"Transfer failed\");\r\n\r\n        games[gameId].player2 = msg.sender;\r\n        games[gameId].gameStartTime = block.timestamp;\r\n\r\n        emit GameJoined(gameId, msg.sender);\r\n    }\r\n\r\n    function cancelGame(uint256 gameId) external {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(games[gameId].isActive, \"Game is not active.\");\r\n        require(\r\n            games[gameId].player1 == msg.sender || msg.sender == owner,\r\n            \"Only the creator or owner can cancel the game.\"\r\n        );\r\n\r\n        require(token.transfer(games[gameId].player1, games[gameId].betAmount), \"Transfer failed\");\r\n        delete games[gameId];\r\n\r\n        emit GameCancelled(gameId);\r\n    }\r\n\r\n    function setDevFeePercentage(uint256 _devFeePercentage) external onlyOwner {\r\n        require(_devFeePercentage <= 100, \"Dev fee percentage cannot be more than 100.\");\r\n        devFeePercentage = _devFeePercentage;\r\n    }\r\n\r\n    function withdrawDevFee() external onlyOwner {\r\n        uint256 amount = devFeeBalance;\r\n        require(amount > 0, \"No dev fees available for withdrawal\");\r\n\r\n        devFeeBalance = 0;\r\n        require(token.transfer(owner, amount), \"Transfer failed\");\r\n\r\n        emit DevFeeWithdrawn(owner, amount);\r\n    }\r\n\r\n    function decideWinner(uint256 gameId) external {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        require(games[gameId].isActive, \"Game is not active.\");\r\n        require(games[gameId].player2 != address(0), \"Game does not have a second player.\");\r\n        require(block.timestamp >= games[gameId].gameStartTime + 5, \"Cannot decide winner yet.\");\r\n\r\n        uint256 randomResult = (block.timestamp + block.prevrandao + gameId) % 2;\r\n        games[gameId].winner = randomResult == 0 ? games[gameId].player1 : games[gameId].player2;\r\n\r\n        // Calculate and transfer the developer's fee\r\n        uint256 devFee = (games[gameId].betAmount * 2 * devFeePercentage) / 100;\r\n        uint256 payout = (games[gameId].betAmount * 2) - devFee;\r\n        devFeeBalance += devFee;\r\n        require(token.transfer(games[gameId].winner, payout), \"Transfer failed\");\r\n\r\n        // Emit the event for the decided winner\r\n        emit WinnerDecided(gameId, games[gameId].winner);\r\n\r\n        // Keep the last winner before resetting the game\r\n        address lastWinner = games[gameId].winner;\r\n\r\n        // Reset the game\r\n        games[gameId] = Game({\r\n            player1: address(0),\r\n            player2: address(0),\r\n            betAmount: 0,\r\n            isActive: false,\r\n            winner: address(0),\r\n            lastWinner: lastWinner, // Set the last winner\r\n            gameStartTime: 0\r\n        });\r\n    }\r\n\r\n    // Read function to get the last winner of a game\r\n    function getLastWinner(uint256 gameId) public view returns (address) {\r\n        require(gameId >= 0 && gameId < 4, \"Invalid game ID.\");\r\n        return games[gameId].lastWinner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerDecided\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"decideWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FoodtopianFF", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000001400000000000000000000000020f663cea80face82acdfa3aae6862d246ce0333", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e45b76564cd8ee0f58c29d4e306d3a12ef621e19f7300abfac9ca7d5b90ef3be"}