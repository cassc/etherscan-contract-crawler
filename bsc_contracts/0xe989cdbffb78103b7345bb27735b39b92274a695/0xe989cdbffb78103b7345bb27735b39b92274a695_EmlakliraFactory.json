{"SourceCode": "// Sources flattened with hardhat v2.11.2 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.7.3\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.3\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.7.3\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.7.3\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/access/Guarded.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/// @title Guard contract extending Access Control\r\n/// @notice Current implementation differs from the original\r\n/// guard contract for the use case. Be cautious using\r\n/// this contract for different purposes\r\n/// @dev More roles could be added as needed\r\ncontract Guarded is AccessControl {\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n    bytes32 public constant BLACKLISTER_ROLE = keccak256(\"BLACKLISTER_ROLE\");\r\n    bytes32 public constant WHITELISTER_ROLE = keccak256(\"WHITELISTER_ROLE\");\r\n    bytes32 public constant EXPIRER_ROLE = keccak256(\"EXPIRER_ROLE\");\r\n    bytes32 public constant COLLECTOR_ROLE = keccak256(\"COLLECTOR_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\r\n\r\n    /**\r\n     * @notice state variables for checking whether a MBEP20 contract\r\n     * is paused or any address is blacklisted or a contract is expired\r\n     */\r\n    mapping(address => bool) internal _paused;\r\n    mapping(address => bool) internal _blacklist;\r\n    mapping(address => bool) internal _whitelist;\r\n    mapping(address => bool) internal _expired;\r\n\r\n    /**\r\n     * @notice state variables that would be effecting all the contracts\r\n     */\r\n    bool internal _allPaused;\r\n    bool internal _blacklistEnabled;\r\n    bool internal _whitelistEnabled;\r\n    bool internal _allExpired;\r\n\r\n    /**\r\n     * @notice initially we should be setting up all the roles\r\n     * necessary for our operation\r\n     */\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n        _setupRole(BLACKLISTER_ROLE, _msgSender());\r\n        _setupRole(EXPIRER_ROLE, _msgSender());\r\n        _setupRole(COLLECTOR_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(OWNER_ROLE, _msgSender());\r\n    }\r\n\r\n    /** PAUSE RELATED FUNCTIONS */\r\n\r\n    /**\r\n     * @dev public view function that returns whether all contracts are\r\n     * paused or not\r\n     *\r\n     * @param tokenAddress address of the token to query\r\n     *\r\n     * @return bool\r\n     */\r\n    function isPaused(address tokenAddress) public view returns (bool) {\r\n        return _paused[tokenAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev public view function that returns the status\r\n     * of `_allPaused` variable\r\n     *\r\n     * @return bool\r\n     */\r\n    function isAllPaused() public view returns (bool) {\r\n        return _allPaused;\r\n    }\r\n\r\n    /**\r\n     * @dev pauses a specific token by address\r\n     * @notice requires caller to have `PAUSER_ROLE`\r\n     *\r\n     * @param tokenAddress address of the token to pause\r\n     *\r\n     * @return bool\r\n     */\r\n    function pause(address tokenAddress)\r\n        public\r\n        onlyRole(PAUSER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _paused[tokenAddress] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unpauses a specific token by address\r\n     * @notice this function requires caller to have `PAUSER_ROLE`\r\n     *\r\n     * @param tokenAddress address of the token to unpause\r\n     *\r\n     * @return bool\r\n     */\r\n    function unpause(address tokenAddress)\r\n        public\r\n        onlyRole(PAUSER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _paused[tokenAddress] = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev pauses all of the contracts\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function pauseAll() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _allPaused = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unpause all of the contracts\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function unpauseAll() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _allPaused = false;\r\n        return true;\r\n    }\r\n\r\n    /** BLACKLIST RELATED FUNCTIONS */\r\n\r\n    /**\r\n     * @dev check if blacklisting module is enabled\r\n     *\r\n     * @return bool\r\n     */\r\n    function isBlacklistEnabled() public view returns (bool) {\r\n        return _blacklistEnabled;\r\n    }\r\n\r\n    /**\r\n     * @dev enables black list module\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function enableBlacklist() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _blacklistEnabled = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev disables blacklist module\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function disableBlacklist() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _blacklistEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev checks if an address is blacklisted\r\n     *\r\n     * @param user address of the user\r\n     *\r\n     * @return bool\r\n     */\r\n    function isBlacklisted(address user) public view returns (bool) {\r\n        return _blacklist[user];\r\n    }\r\n\r\n    /**\r\n     * @dev blacklists an address\r\n     * @notice requires caller to have `BLACKLISTER_ROLE`\r\n     *\r\n     * @param user address of the user\r\n     *\r\n     * @return bool\r\n     */\r\n    function blacklist(address user)\r\n        public\r\n        onlyRole(BLACKLISTER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _blacklist[user] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev removes an address from the blacklist\r\n     * @notice requires caller to have `BLACKLISTER_ROLE`\r\n     *\r\n     * @param user address of the user\r\n     *\r\n     * @return bool\r\n     */\r\n    function removeFromBlacklist(address user)\r\n        public\r\n        onlyRole(BLACKLISTER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _blacklist[user] = false;\r\n        return true;\r\n    }\r\n\r\n    /** WHITELIST RELATED FUNCTIONS */\r\n\r\n    /**\r\n     * @dev checks if whitelist enabled\r\n     *\r\n     * @return bool\r\n     */\r\n    function isWhitelistEnabled() public view returns (bool) {\r\n        return _whitelistEnabled;\r\n    }\r\n\r\n    /**\r\n     * @dev enables whitelist\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function enableWhitelist() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _whitelistEnabled = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev disables whitelist\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function disableWhitelist() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _whitelistEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev checks if an address is whitelisted\r\n     *\r\n     * @param user address of the user\r\n     *\r\n     * @return bool\r\n     */\r\n    function isWhitelisted(address user) public view returns (bool) {\r\n        return _whitelist[user];\r\n    }\r\n\r\n    /**\r\n     * @dev whitelists an address\r\n     * @notice requires caller to have `WHITELISTER_ROLE`\r\n     *\r\n     * @param user address of the user\r\n     *\r\n     * @return bool\r\n     */\r\n    function whitelist(address user)\r\n        public\r\n        onlyRole(WHITELISTER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _whitelist[user] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev removes an address from whitelist\r\n     * @notice requires caller to have `WHITELISTER_ROLE`\r\n     *\r\n     * @param user address of the user\r\n     *\r\n     * @return bool\r\n     */\r\n    function removeFromWhitelist(address user)\r\n        public\r\n        onlyRole(WHITELISTER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _whitelist[user] = false;\r\n        return true;\r\n    }\r\n\r\n    /** EXPIRATION RELATED FUNCTIONS */\r\n\r\n    /**\r\n     * @dev checks if all tokens are expired\r\n     *\r\n     * @return bool\r\n     */\r\n    function isAllExpired() public view returns (bool) {\r\n        return _allExpired;\r\n    }\r\n\r\n    /**\r\n     * @dev expires all contracts\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function expireAll() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _allExpired = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unexpires all contracts\r\n     * @notice requires caller to have `OWNER_ROLE`\r\n     *\r\n     * @return bool\r\n     */\r\n    function unexpireAll() public onlyRole(OWNER_ROLE) returns (bool) {\r\n        _allExpired = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev checks if a token contract is expired\r\n     *\r\n     * @param tokenAddress address of the token to query\r\n     *\r\n     * @return bool\r\n     */\r\n    function isExpired(address tokenAddress) public view returns (bool) {\r\n        return _expired[tokenAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev expires a contract\r\n     * @notice requires caller to have `EXPIRER_ROLE`\r\n     *\r\n     * @param tokenAddress address of the token\r\n     *\r\n     * @return bool\r\n     */\r\n    function expire(address tokenAddress)\r\n        public\r\n        onlyRole(EXPIRER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _expired[tokenAddress] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unexpires a contract\r\n     * @notice requires caller to have `EXPIRER_ROLE`\r\n     *\r\n     * @param tokenAddress address of the token\r\n     *\r\n     * @return bool\r\n     */\r\n    function unexpire(address tokenAddress)\r\n        public\r\n        onlyRole(EXPIRER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _expired[tokenAddress] = false;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IGuarded.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/// @title Interface for the {Guard} contract\r\n/// @notice only the view functions are implemented on the interface\r\n/// as they are enough for functionality we require\r\ninterface IGuarded {\r\n    /**\r\n     * @dev Returns whether all contracts are paused or not\r\n     */\r\n    function isAllPaused() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether contract at address `tokenAddress` is paused or not\r\n     */\r\n    function isPaused(address tokenAddress) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether blacklist module is enabled or not\r\n     */\r\n    function isBlacklistEnabled() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether an `user` is blacklisted or not\r\n     */\r\n    function isBlacklisted(address user) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether whitelist is enabled or not\r\n     */\r\n    function isWhitelistEnabled() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether an `user` is whitelisted or not\r\n     */\r\n    function isWhitelisted(address user) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether all contracts are expired or not\r\n     */\r\n    function isAllExpired() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether contract at address `tokenAddress` is expired or not\r\n     */\r\n    function isExpired(address tokenAddress) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IEmlakliraFactory.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IEmlakliraFactory is IGuarded {\r\n    /** \r\n     * @dev returns the `_garbage`\r\n     */\r\n    function getGarbageAddress() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBEP20.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMBEP20.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IMBEP20 is IBEP20 {\r\n    /** \r\n     * @dev Mints `amount` tokens to `recipient`\r\n     *\r\n     * Emits a {Mint} event.\r\n     */\r\n    function mint(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    /**\r\n     * @dev Burns `amount` tokens `from` \r\n     *\r\n     * Emits a {Burn} event.\r\n     */\r\n    function burn(address from, uint256 amount) external returns (bool);\r\n\r\n    /** \r\n     * @dev Emitted when `amount` of tokens are minted to the `recipient`\r\n     */\r\n    event Mint(address indexed recipient, uint256 amount);\r\n    \r\n    /**\r\n     * @dev Emitted when `amount` of tokens are burned `from`\r\n     */\r\n    event Burn(address indexed from, uint256 amount);\r\n}\r\n\r\n\r\n// File contracts/token/MBEP20.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/// @title MBEP20 contract\r\n/// @notice MBEP20 standart is dependent on a factory\r\n/// @notice the Context was inherited based on the client's request for msg.sender\r\ncontract MBEP20 is Context, IMBEP20 {\r\n    // @dev interface object that forwards calls to the {EmlakliraFactory} contract\r\n    IEmlakliraFactory private _factory;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev modifier that checks if the `_msgSender()` is the factory contract\r\n     *\r\n     * Whenever a smart contract calls another smart contract, the `_msgSender()`\r\n     * value becomes the address of the caller smart contract. This way\r\n     * if a user calls a function from the factory contract that calls\r\n     * a function from MBEP20 contract, _msgSender() becomes the factory contract\r\n     *\r\n     * Our design allows regular calls from users, or factory only calls\r\n     * and access is managed at the factory contract.\r\n     */\r\n    modifier onlyFactory() {\r\n        require(\r\n            _isFactory(_msgSender()),\r\n            \"MBEP20: you must call this from factory\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address factory,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 supply_\r\n    ) {\r\n        _factory = IEmlakliraFactory(factory);\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        mint(_msgSender(), supply_);\r\n    }\r\n\r\n    /**\r\n     * @dev returns factory address\r\n     *\r\n     * @return address\r\n     */\r\n    function getFactory() public view returns (address) {\r\n        return address(_factory);\r\n    }\r\n\r\n    /**\r\n     * @dev returns `_totalSupply`\r\n     *\r\n     * @return uint256\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `_decimals`\r\n     *\r\n     * @return uint8\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `_symbol`\r\n     *\r\n     * @return string memory\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `_name`\r\n     *\r\n     * @return string memory\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the owner of the contract\r\n     *\r\n     * Unlike BEP20, MBEP20 contract doesnt have a owner variable\r\n     * instead it is designed to return the factory address as its\r\n     * owner\r\n     *\r\n     * @return address\r\n     */\r\n    function getOwner() public view returns (address) {\r\n        return address(_factory);\r\n    }\r\n\r\n    /**\r\n     * @dev queries balance of the `account`\r\n     *\r\n     * This function first checks whether all contracts are expired or not\r\n     * and later checks if this contract is expired or not from the\r\n     * `_factory` contract. If the contract is expired, it returns\r\n     * zero balance for all the accounts except garbage account.\r\n     *\r\n     * If the contracts are not expired, then it returns the usual balance\r\n     * from the internal {_balance} function.\r\n     *\r\n     * @param account the account to query\r\n     *\r\n     * @return uint256\r\n     *  */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (_factory.isAllExpired() || _factory.isExpired(address(this))) {\r\n            return _factory.getGarbageAddress() == account ? _totalSupply : 0;\r\n        }\r\n        return _balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the amount of tokens `spender` can spend on behalf of `owner`\r\n     *\r\n     * This function first checks if the spender is the factory address\r\n     * if it is the factory address, it returns the `_totalSupply` as allowance\r\n     * so that factory can call {transferFrom} function on behalf of any\r\n     * token holder.\r\n     *\r\n     * If the caller is not the factory contract, it calls {_allowance} function\r\n     * that returns the real allowance `spender` has for `owner`\r\n     *\r\n     * @param owner address of the owner whose tokens will be spent\r\n     * @param spender address of the spender\r\n     *\r\n     * @return uint256 amount of tokens that could be spent\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            spender == address(_factory)\r\n                ? _totalSupply\r\n                : _allowance(owner, spender);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers `amount` to `recipient` from `_msgSender()`\r\n     *\r\n     * This function first calls {_beforeTokenTransfer} and later\r\n     * calls {_transfer} function.\r\n     *\r\n     * @param recipient the receiver of the tokens\r\n     * @param amount the amount of tokens to be transferred\r\n     *\r\n     * @return bool\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _beforeTokenTransfer(_msgSender(), recipient, amount);\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev mints `amount` of tokens to `recipient`\r\n     *\r\n     * Emits {Mint} and {Transfer} events. The transfer event is emitted\r\n     * as if the transfer happened from zero address\r\n     *\r\n     * @notice requires `_msgSender()` to be the factory address\r\n     *\r\n     * @param recipient the address of the receiver\r\n     * @param amount the amount of tokens to be minted\r\n     *\r\n     * @return bool\r\n     */\r\n    function mint(address recipient, uint256 amount)\r\n        public\r\n        onlyFactory\r\n        returns (bool)\r\n    {\r\n        _totalSupply += amount;\r\n        _balances[recipient] += amount;\r\n        emit Mint(recipient, amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn `amount` of tokens `from`\r\n     *\r\n     * Emits {Burn} and {Transfer} events. The transfer event is emitted\r\n     * as if tokens are transferred to zero address\r\n     *\r\n     * If balance of the `from` is less than the `amount` the\r\n     * _balances[from] -= amount operation will cause a revert\r\n     * reason\r\n     *\r\n     * @notice requires `_msgSender()` to be the factory address\r\n     *\r\n     * @param from the address tokens will be burned from\r\n     * @param amount the amount of tokens to be burned\r\n     *\r\n     * @return bool\r\n     */\r\n    function burn(address from, uint256 amount)\r\n        public\r\n        onlyFactory\r\n        returns (bool)\r\n    {\r\n        _totalSupply -= amount;\r\n        _balances[from] -= amount;\r\n        emit Burn(from, amount);\r\n        emit Transfer(from, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev approves `amount` to be spent on behalf of the `_msgSender()`\r\n     * by the `spender`\r\n     *\r\n     * Emits {Approval} event\r\n     *\r\n     * @param spender address of the spender who is authorized to spend `amount`\r\n     * @param amount tokens that could be spent by the `spender`\r\n     *\r\n     * @return bool\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers `amount` to `recipient `on behalf of `sender` by `_msgSender()`\r\n     *\r\n     * Be aware that this function first calls {_beforeTokenTransfer}\r\n     * then {_decreaseAllowance} and {_transfer} functions and returns boolean\r\n     *\r\n     * @param sender `amount` to be deduced from `sender`\r\n     * @param recipient receiver of the `amount`\r\n     * @param amount to be transferred\r\n     *\r\n     * @return bool\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _decreaseAllowance(sender, _msgSender(), amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev checks if `user` is factory address\r\n     *\r\n     * This is used for checking whether calls are originated\r\n     * from the factory contract\r\n     *\r\n     * @param user address to be queried\r\n     *\r\n     * @return boolean - true if it is factory, false if not\r\n     */\r\n    function _isFactory(address user) internal view returns (bool) {\r\n        return user == address(_factory) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * @dev internal balance query function returning balance\r\n     * of the `account` from `_balances` mapping\r\n     *\r\n     * @param account address to be queried\r\n     *\r\n     * @return balance in uint256\r\n     */\r\n    function _balanceOf(address account) internal view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev internal allowance function that returns the amount of\r\n     * tokens that could be spent by `spender` on behalf of `owner`\r\n     *\r\n     * @param owner whose tokens will be spent\r\n     * @param spender address who will be spending\r\n     *\r\n     * @return amount allowed to spend\r\n     */\r\n    function _allowance(address owner, address spender)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev function that is called before the token transfer\r\n     * for required checks on the contract for `sender` and `recipient`\r\n     *\r\n     * It first checks if the `_msgSender()` is the factory contract, if it is,\r\n     * it passes all the checks and execution continues\r\n     *\r\n     * If it is not, then it requires the contract(s) to be unpaused\r\n     *\r\n     * It then checks if the blacklist module is enabled, if it is enabled\r\n     * it checks both the `sender` and `recipient` are not blacklisted\r\n     *\r\n     * It then checks if the whitelist module is enabled, if it is enabled\r\n     * it requires at least one of the `sender` and `recipient` to be whitelisted\r\n     *\r\n     * All the checks are redirected to the factory contract to\r\n     * make sure everything could be operated from the factory contract\r\n     *\r\n     * These checks are there in case if MBEP20 contracts will be opened to\r\n     * be publicly traded / transferred\r\n     *\r\n     * @param sender address of the sender\r\n     * @param recipient address of the receiver\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        if (!_isFactory(_msgSender())) {\r\n            require(balanceOf(sender) >= amount, \"MBEP20: not enough balance\");\r\n            require(\r\n                !(_factory.isAllPaused() || _factory.isPaused(address(this))),\r\n                \"MBEP20: contract paused\"\r\n            );\r\n            if (_factory.isBlacklistEnabled()) {\r\n                require(\r\n                    !(_factory.isBlacklisted(sender) ||\r\n                        _factory.isBlacklisted(recipient)),\r\n                    \"MBEP20: receiver or sender is blacklisted\"\r\n                );\r\n            }\r\n            if (_factory.isWhitelistEnabled()) {\r\n                require(\r\n                    _factory.isWhitelisted(sender) ||\r\n                        _factory.isWhitelisted(recipient),\r\n                    \"MBEP20: you are not whitelisted\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev internal transfer function that checks `from` or `to`\r\n     * is not the zero address and the `from` has enough balance\r\n     * to transfer tokens.\r\n     *\r\n     * This is also called by `transferFrom` function\r\n     *\r\n     * Emits {Transfer} event\r\n     *\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount to be transferred\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"MBEP20: Transfer from zero address\");\r\n        require(to != address(0), \"MBEP20: Transfer to zero address\");\r\n        require(_balances[from] >= amount, \"MBEP20: not enough balance\");\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev function that decreases allowance of the `spender`\r\n     * for the `sender`\r\n     *\r\n     * It makes a call to the {allowance} function, if this is queried\r\n     * for the factory contract, allowance returns total supply\r\n     * which is then queried by an if call and effectively doesn't change\r\n     * any value\r\n     *\r\n     * If this function is called for any other contract than factory,\r\n     * it checks allowance as usual, and decreases the `amount` from the\r\n     * `spender`'s allowance\r\n     *\r\n     * @param sender the sending party\r\n     * @param spender the address who is spending on behalf of sender\r\n     * @param amount tokens to be transferred\r\n     */\r\n    function _decreaseAllowance(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(\r\n            allowance(sender, spender) >= amount,\r\n            \"MBEP20: not enough allowance\"\r\n        );\r\n        if (spender != address(_factory)) {\r\n            _allowances[sender][spender] -= amount;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.7.3\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/EmlakliraFactory.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/// @title Emlaklira Factory contract\r\n//TODO: implement token recover on MBEP20 tokens too\r\n//TODO: add events to all calls\r\n//TODO: add role admin update function\r\n\r\ncontract EmlakliraFactory is Guarded {\r\n    /// @dev used in case of token recovery as some BEP20 tokens are not fully ERC20/BEP20 compliant\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @dev array of the Emlaklira Tokens registered in the contract\r\n    /// @notice mapping is used for checking whether an address is a factory produced contract or not\r\n    address[] private _tokens;\r\n    mapping(address => bool) private _isEmlakliraToken;\r\n\r\n    /// @dev garbage address\r\n    address private _garbage;\r\n\r\n    event DeployNewToken(\r\n        address indexed tokenAddress,\r\n        string name,\r\n        string symbol,\r\n        uint8 decimals,\r\n        uint256 supply\r\n    );\r\n    event TransferContract(\r\n        address indexed tokenAddress,\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        uint256 amount\r\n    );\r\n    event TokenBurnedContract(\r\n        address indexed tokenAddress,\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n    event TokenMintedContract(\r\n        address indexed tokenAddress,\r\n        address indexed recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier onlyEmlakliraToken(address tokenAddress) {\r\n        require(isEmlakliraToken(tokenAddress), \"Not a Emlaklira Token\");\r\n        _;\r\n    }\r\n\r\n    constructor() Guarded() {\r\n        enableBlacklist();\r\n        enableWhitelist();\r\n    }\r\n\r\n    /**\r\n     * @dev deploys a new Emlaklira token and pushes the\r\n     * address to the `_tokens` array and updates `_isEmlakliraToken` mapping\r\n     * for the address to be true\r\n     *\r\n     * Emits {DeployNewToken} event\r\n     *\r\n     * @notice requires `msg.sender` to have `OWNER_ROLE`\r\n     *\r\n     * @param name_ name of the new token to be deployed\r\n     * @param symbol_ symbol of the new token to be deployed\r\n     * @param decimals_ decimals of the new token to be deployed in uint8\r\n     * @param supply_ the initial supply of the token\r\n     *\r\n     * @return bool\r\n     */\r\n    function deployNewToken(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 supply_\r\n    ) public onlyRole(OWNER_ROLE) returns (bool) {\r\n        MBEP20 newToken = new MBEP20(\r\n            address(this),\r\n            name_,\r\n            symbol_,\r\n            decimals_,\r\n            supply_\r\n        );\r\n        _tokens.push(address(newToken));\r\n        _isEmlakliraToken[address(newToken)] = true;\r\n        emit DeployNewToken(\r\n            address(newToken),\r\n            name_,\r\n            symbol_,\r\n            decimals_,\r\n            supply_\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /** GARBAGE ADDRESS FUNCTIONS */\r\n\r\n    /**\r\n     * @dev sets the garbage address as `garbage`\r\n     *\r\n     * @notice requires `msg.sender` to have the `ONLY_OWNER` role\r\n     *\r\n     * @param garbage new garbage address\r\n     *\r\n     * @return bool\r\n     */\r\n    function setGarbageAddress(address garbage)\r\n        public\r\n        onlyRole(OWNER_ROLE)\r\n        returns (bool)\r\n    {\r\n        _garbage = garbage;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev returs the garbage address\r\n     *\r\n     * This is used at the MBEP20 contracts for querying balance if\r\n     * the MBEP20 token is expired\r\n     *\r\n     * @return garbage address\r\n     */\r\n    function getGarbageAddress() public view returns (address) {\r\n        return _garbage;\r\n    }\r\n\r\n    /** VIEW FUNCTIONS FOR MBEP FACTORY PATTERN */\r\n\r\n    /**\r\n     * @dev checks if `tokenAddress` is a factory issued token\r\n     *\r\n     * @param tokenAddress address to be queried\r\n     *\r\n     * @return true if it is a factory issued token, false if not\r\n     */\r\n    function isEmlakliraToken(address tokenAddress) public view returns (bool) {\r\n        return _isEmlakliraToken[tokenAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev returns the balance of a user given a contract address\r\n     *\r\n     * @param tokenAddress address of the token\r\n     * @param user address of the user\r\n     *\r\n     * @return balance of the user uint256\r\n     */\r\n    function balanceOf(address tokenAddress, address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return MBEP20(tokenAddress).balanceOf(user);\r\n    }\r\n\r\n    /**\r\n     * @dev mints `amount` to the `recipient` at the `tokenAddress`\r\n     *\r\n     * @notice this function requires `msg.sender` to have `MINTER_ROLE`\r\n     *\r\n     * emits {TokenMintedContract}\r\n     *\r\n     * @param tokenAddress address of the token\r\n     * @param recipient address of the receiver\r\n     * @param amount tokens to be minted\r\n     *\r\n     * @return true if mint successful else it fails\r\n     */\r\n    function mint(\r\n        address tokenAddress,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyRole(MINTER_ROLE)\r\n        onlyEmlakliraToken(tokenAddress)\r\n        returns (bool)\r\n    {\r\n        emit TokenMintedContract(tokenAddress, recipient, amount);\r\n        return MBEP20(tokenAddress).mint(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev burns `amount` from the `from` at the `tokenAddress`\r\n     *\r\n     * @notice this function requires `msg.sender` to have `MINTER_ROLE`\r\n     *\r\n     * emits {TokenBurnedContract}\r\n     *\r\n     * @param tokenAddress address of the token\r\n     * @param from address `amount` will be burned from\r\n     * @param amount tokens to be burned\r\n     *\r\n     * @return true if burn is successful else it fails\r\n     */\r\n    function burn(\r\n        address tokenAddress,\r\n        address from,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyRole(MINTER_ROLE)\r\n        onlyEmlakliraToken(tokenAddress)\r\n        returns (bool)\r\n    {\r\n        emit TokenBurnedContract(tokenAddress, from, amount);\r\n        return MBEP20(tokenAddress).burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers `amount` to the `recipient` at the `tokenAddress`\r\n     *\r\n     * Since when a new token is deployed, all the supply is minted\r\n     * and credited to the factory contract, in order to distribute\r\n     * tokens to the user, this function should be called\r\n     *\r\n     * Emits {TransferContract} event\r\n     *\r\n     *\r\n     * @notice requires `msg.sender` to have the `COLLECTOR_ROLE`\r\n     *\r\n     * New role could be added if we want tokens to be distributed\r\n     * by the distributor role\r\n     *\r\n     * @param tokenAddress address of the token transfer will be made at\r\n     * @param recipient address of the recipient\r\n     * @param amount tokens to be transferred\r\n     *\r\n     * @return true if transfer succeeds, else transaction fails\r\n     */\r\n    function transfer(\r\n        address tokenAddress,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyRole(COLLECTOR_ROLE)\r\n        onlyEmlakliraToken(tokenAddress)\r\n        returns (bool)\r\n    {\r\n        emit TransferContract(tokenAddress, msg.sender, recipient, amount);\r\n        return MBEP20(tokenAddress).transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers `amount` to the `recipient` at the `tokenAddress` on\r\n     * behalf of the `sender`\r\n     *\r\n     * Due to the design of the MBEP20 contract, factory contract can\r\n     * call {transferFrom} function at any Emlaklira Token contract. This function\r\n     * is used for force transfer between accounts\r\n     *\r\n     * emits {TransferContract}\r\n     *\r\n     * Also checks call is only made to a Emlaklira Token\r\n     *\r\n     * @notice requires `msg.sender` to have the `COLLECTOR_ROLE`\r\n     *\r\n     * New role could be added if we want tokens to be distributed\r\n     * by the distributor role.\r\n     *\r\n     * @param tokenAddress address of the token transfer will be made at\r\n     * @param sender `amount` to be deduced from\r\n     * @param recipient address of the recipient\r\n     * @param amount tokens to be transferred\r\n     *\r\n     * @return true if transfer succeeds, else transaction fails\r\n     */\r\n    function transferFrom(\r\n        address tokenAddress,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyRole(COLLECTOR_ROLE)\r\n        onlyEmlakliraToken(tokenAddress)\r\n        returns (bool)\r\n    {\r\n        emit TransferContract(tokenAddress, sender, recipient, amount);\r\n        return MBEP20(tokenAddress).transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    /** TOKEN RECOVER */\r\n    function recoverERC20(\r\n        address contractAddress,\r\n        address receiver,\r\n        uint256 amount\r\n    ) public onlyRole(OWNER_ROLE) returns (bool) {\r\n        IERC20 tokenInstance_ = IERC20(contractAddress);\r\n        tokenInstance_.transfer(receiver, amount);\r\n        return true;\r\n    }\r\n\r\n    function recoverNative(address receiver, uint256 amount)\r\n        public\r\n        onlyRole(OWNER_ROLE)\r\n        returns (bool)\r\n    {\r\n        address payable receiver_ = payable(receiver);\r\n        receiver_.transfer(amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"DeployNewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBurnedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenMintedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLACKLISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPIRER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"}],\"name\":\"deployNewToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGarbageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlacklistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isEmlakliraToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"garbage\",\"type\":\"address\"}],\"name\":\"setGarbageAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"unexpire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unexpireAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmlakliraFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1714a455b054a084cb1918631ce62b9d104318f5d621ba2299af6c62098f773e"}