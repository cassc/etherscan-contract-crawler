{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * VladimirGav\r\n * GitHub Website: https://vladimirgav.github.io/\r\n * GitHub: https://github.com/VladimirGav\r\n */\r\n\r\n/**\r\n * It is example of a AirdropTokens of Contract from VladimirGav\r\n */\r\n\r\npragma solidity >=0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// @dev Wrappers over Solidity's arithmetic operations with added overflow * checks.\r\nlibrary SafeMath {\r\n    // Counterpart to Solidity's `+` operator.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    // Counterpart to Solidity's `-` operator.\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    // Counterpart to Solidity's `-` operator.\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    // Counterpart to Solidity's `*` operator.\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    // Counterpart to Solidity's `/` operator.\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    // Counterpart to Solidity's `/` operator.\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    // Counterpart to Solidity's `%` operator.\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    // Counterpart to Solidity's `%` operator.\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Wallet is Ownable {\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    // Transfer Eth\r\n    function transferEth(address _to, uint256 _amount) public onlyOwner {\r\n        (bool sent, ) = _to.call{value: _amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    // Transfer Tokens\r\n    function transferTokens(address addressToken, address _to, uint256 _amount) public onlyOwner {\r\n        IERC20 contractToken = IERC20(addressToken);\r\n        contractToken.transfer(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AirdropTokens is Ownable, Wallet {\r\n    using SafeMath for uint256;\r\n\r\n    function getOwnerToken(address addressToken) public view returns (\r\n        address addressOwnerToken\r\n    ) {\r\n        return IERC20(addressToken).owner();\r\n    }\r\n\r\n    // Creating and deleting a Airdrop. Available only to the owner of the tokens.\r\n\r\n    // Airdrop data\r\n    struct AirdropData {\r\n        bool contractIsHolder; // true - This contract is the holder, false - Owner is the holder\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 finishTime;\r\n        bool refund;\r\n        uint256 totalBalance;\r\n        uint256 totalRecipients;\r\n        uint256 totalReceived;\r\n    }\r\n    \r\n    // Airdrop array\r\n    mapping(address => AirdropData) public mappingAirdropData;\r\n\r\n    // Recipients Data array\r\n    mapping(address => mapping(address => uint256)) public mappingRecipientsData;\r\n\r\n    // add Airdrop data\r\n    function addAirdropData(\r\n        address addressToken,\r\n        bool contractIsHolder,\r\n        uint256 startTime,\r\n        uint256 finishTime,\r\n        bool refund,\r\n        address[] memory  _addressesArray, \r\n        uint256[] memory  _amountsArray\r\n    ) internal {\r\n        require(getOwnerToken(addressToken) == msg.sender, \"Airdrop can only be created by the owner of the token.\");\r\n        require(mappingAirdropData[addressToken].amount == 0, \"Airdrop already exists.\");\r\n        require(_addressesArray.length == _amountsArray.length, \"_addressesArray.length != _amountsArray.length\");\r\n\r\n        uint256 amount;\r\n        for (uint i; i < _amountsArray.length; i++) {\r\n            //require(_amountsArray[i] > 0, \"amountsArray key = 0\");\r\n            mappingRecipientsData[_addressesArray[i]][addressToken] = _amountsArray[i];\r\n            amount = amount.add(_amountsArray[i]);\r\n        }\r\n        \r\n        require(amount > 0, \"amount < 0\");\r\n\r\n        if(startTime == 0){\r\n            startTime = block.timestamp; // now\r\n        }\r\n        if(finishTime == 0){\r\n            finishTime = startTime + 2419200; // + 28 days\r\n        }\r\n        \r\n        require(startTime >= block.timestamp, \"startTime < now\");\r\n        require(finishTime > startTime, \"finishTime <= startTime\");\r\n\r\n        if(contractIsHolder){\r\n            require(IERC20(addressToken).transferFrom(msg.sender, address(this), amount), \"TransferFrom failed. Approval required.\");\r\n        } else {\r\n            require(IERC20(addressToken).allowance(msg.sender, address(this)) >= amount, \"allowance < amount\");\r\n            require(IERC20(addressToken).balanceOf(msg.sender) >= amount, \"balance < amount\");\r\n        }\r\n\r\n        mappingAirdropData[addressToken].contractIsHolder = contractIsHolder;\r\n        mappingAirdropData[addressToken].amount = amount;\r\n        mappingAirdropData[addressToken].startTime = startTime;\r\n        mappingAirdropData[addressToken].finishTime = finishTime;\r\n        mappingAirdropData[addressToken].refund = refund;\r\n        mappingAirdropData[addressToken].totalBalance = amount;\r\n        if(contractIsHolder && IERC20(addressToken).balanceOf(address(this)) < amount){\r\n            mappingAirdropData[addressToken].totalBalance = IERC20(addressToken).balanceOf(address(this));\r\n        }\r\n        mappingAirdropData[addressToken].totalRecipients = _amountsArray.length;\r\n        mappingAirdropData[addressToken].totalReceived = 0;\r\n    }\r\n\r\n    // Show static Airdrop data\r\n    function getAirdropData(address addressToken) public view returns (\r\n        bool contractIsHolder,\r\n        uint256 amount,\r\n        uint256 startTime,\r\n        uint256 finishTime,\r\n        bool refund\r\n    ) {\r\n        return (\r\n        mappingAirdropData[addressToken].contractIsHolder,\r\n        mappingAirdropData[addressToken].amount,\r\n        mappingAirdropData[addressToken].startTime,\r\n        mappingAirdropData[addressToken].finishTime,\r\n        mappingAirdropData[addressToken].refund\r\n        );\r\n    }\r\n\r\n    // Show variable Airdrop data\r\n    function getAirdropDataTotal(address addressToken) public view returns (\r\n        uint256 totalBalance,\r\n        uint256 totalRecipients,\r\n        uint256 totalReceived\r\n    ) {\r\n        return (\r\n        mappingAirdropData[addressToken].totalBalance,\r\n        mappingAirdropData[addressToken].totalRecipients,\r\n        mappingAirdropData[addressToken].totalReceived\r\n        );\r\n    }\r\n\r\n    // delete Airdrop data\r\n    function removeAirdropData(\r\n        address addressToken,\r\n        address[] memory  _addressesArray\r\n    ) internal {\r\n        require(getOwnerToken(addressToken) == msg.sender, \"Airdrop can only be created by the owner of the token.\");\r\n        require(mappingAirdropData[addressToken].amount > 0, \"Airdrop tokens not found\");\r\n\r\n        require(_addressesArray.length == mappingAirdropData[addressToken].totalRecipients, \"_addressesArray.length != totalRecipients\");\r\n        for (uint i; i < _addressesArray.length; i++) {\r\n            mappingRecipientsData[_addressesArray[i]][addressToken] = 0;\r\n        }\r\n\r\n        if(mappingAirdropData[addressToken].totalBalance > 0){\r\n            require(block.timestamp > mappingAirdropData[addressToken].finishTime, \"Now < finishTime. Removal available after completion.\");\r\n            if(mappingAirdropData[addressToken].contractIsHolder){\r\n                if(mappingAirdropData[addressToken].refund){\r\n                    IERC20(addressToken).transfer(msg.sender, mappingAirdropData[addressToken].totalBalance);\r\n                } else {\r\n                    IERC20(addressToken).transfer(address(0x000000000000000000000000000000000000dEaD), mappingAirdropData[addressToken].totalBalance);\r\n                }\r\n            } else {\r\n                if(!mappingAirdropData[addressToken].refund){\r\n                    IERC20(addressToken).transferFrom(getOwnerToken(addressToken), address(0x000000000000000000000000000000000000dEaD), mappingAirdropData[addressToken].totalBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        mappingAirdropData[addressToken].amount = 0;\r\n        mappingAirdropData[addressToken].startTime = 0;\r\n        mappingAirdropData[addressToken].finishTime = 0;\r\n        mappingAirdropData[addressToken].refund = false;\r\n        mappingAirdropData[addressToken].totalBalance = 0;\r\n        mappingAirdropData[addressToken].totalRecipients = 0;\r\n        mappingAirdropData[addressToken].totalReceived = 0;\r\n    }\r\n\r\n    /**\r\n     * Create Airdrop, available only to the owner of the tokens\r\n     * addressToken - token address\r\n     * contractIsHolder - true - This contract is the holder, false - Owner is the holder\r\n     * startTime - start time in seconds\r\n     * finishTime - finish time in seconds\r\n     * refund - true - return the unspent balance to the owner; false - Burn\r\n     * _addressesArray - Address Array\r\n     * _amountsArray - Amounts Array\r\n     */\r\n    function createAirdrop(\r\n        address addressToken,\r\n        bool contractIsHolder,\r\n        uint256 startTime,\r\n        uint256 finishTime,\r\n        bool refund,\r\n        address[] memory  _addressesArray, \r\n        uint256[] memory  _amountsArray\r\n    ) public returns (bool) {\r\n        addAirdropData(addressToken, contractIsHolder, startTime, finishTime, refund, _addressesArray, _amountsArray);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove Airdrop, available only to the owner of the tokens\r\n     * addressToken - token address\r\n     * _addressesArray - Address Array\r\n     */\r\n    function removeAirdrop(\r\n        address addressToken,\r\n        address[] memory  _addressesArray\r\n    ) public returns (bool) {\r\n        removeAirdropData(addressToken, _addressesArray);\r\n        return true;\r\n    }\r\n\r\n    // check Airdrop\r\n    function checkAirdrop(address addressAccount, address addressToken) public view returns (uint256 amount) {\r\n        return mappingRecipientsData[addressAccount][addressToken];\r\n    }\r\n\r\n    // Send sendAirdrop\r\n    function sendAirdrop(address addressAccount, address addressToken) internal {\r\n        require(mappingAirdropData[addressToken].amount > 0, \"Airdrop tokens not found\");\r\n        require(mappingAirdropData[addressToken].totalBalance > 0, \"Airdrop totalBalance = 0\");\r\n        require(mappingRecipientsData[addressAccount][addressToken] > 0, \"Your airdrop = 0\");\r\n\r\n        if(mappingAirdropData[addressToken].contractIsHolder){\r\n            IERC20(addressToken).transfer(addressAccount, mappingRecipientsData[addressAccount][addressToken]);\r\n        } else {\r\n            IERC20(addressToken).transferFrom(getOwnerToken(addressToken), addressAccount, mappingRecipientsData[addressAccount][addressToken]);\r\n        }\r\n\r\n        mappingAirdropData[addressToken].totalBalance = mappingAirdropData[addressToken].totalBalance.sub(mappingRecipientsData[addressAccount][addressToken]);\r\n        mappingAirdropData[addressToken].totalReceived += 1;\r\n        \r\n        mappingRecipientsData[addressAccount][addressToken] = 0;\r\n    }\r\n\r\n    /**\r\n     * Claim Airdrop.\r\n     */\r\n    function claimAirdrop(address addressToken) public returns (bool) {\r\n        sendAirdrop(msg.sender, addressToken);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"}],\"name\":\"checkAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"contractIsHolder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_addressesArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsArray\",\"type\":\"uint256[]\"}],\"name\":\"createAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"}],\"name\":\"getAirdropData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"contractIsHolder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"}],\"name\":\"getAirdropDataTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRecipients\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"}],\"name\":\"getOwnerToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addressOwnerToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingAirdropData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"contractIsHolder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRecipients\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingRecipientsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addressesArray\",\"type\":\"address[]\"}],\"name\":\"removeAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AirdropTokens", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2cff6520056a33baee0d9c77bc80242ad0f42a9825ce6132cfc037db8ab13b00"}