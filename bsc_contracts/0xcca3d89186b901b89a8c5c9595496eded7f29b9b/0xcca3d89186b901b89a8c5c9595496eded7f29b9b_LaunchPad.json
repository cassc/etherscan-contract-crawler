{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LaunchPad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IStake {\\n    function getInvestorsDatas(\\n        address _user,\\n        uint256 _snapNb\\n    ) external view returns (uint256 tiersNb, uint256 amountStaked);\\n\\n    function snapShotPool()\\n        external\\n        returns (\\n            uint256[6] memory tiersStaked,\\n            uint256 snapShotNb\\n        );\\n}\\n\\ncontract LaunchPad is Ownable {\\n    IERC20 public immutable STABLE;\\n    IStake public immutable STAKINGCONTRACT;\\n    uint256 public immutable PRECISION = 100_000_000_000_000;\\n\\n    uint256[] public tiersAllocs = [0, 10, 15, 15, 20, 40];\\n    uint256 public firstRoundDuration = 3600;\\n\\n    uint256 public maxFcfsAmount = 500 * 1E18;\\n\\n    uint256 public currentPoolId;\\n\\n    struct PoolData {\\n        uint256 amountTarget;\\n        uint256 amountRaised;\\n        uint256[6] allocByTokenForTiers;\\n        uint256 startingDate;\\n        uint256 snapShotNb;\\n        bool isFinished;\\n        bool fundWithdrawn;\\n        string poolName;\\n    }\\n\\n    mapping(uint256 => PoolData) private _poolDatas;\\n    mapping(address => mapping(uint256 => uint256)) private _userAllocRound1;\\n    mapping(address => mapping(uint256 => uint256)) private _userAllocFcfs;\\n    mapping(address => mapping(uint256 => uint256)) private _userInvest;\\n\\n\\n    event PoolCreated(\\n        string indexed poolName,\\n        uint256 indexed poolId,\\n        uint256 amountTarget,\\n        uint256 startingDate\\n    );\\n    event PoolFinished(\\n        string indexed poolName,\\n        uint256 amountTarget,\\n        uint256 amountRaised\\n    );\\n    event UserInvest(address investor, uint256 indexed poolId, uint256 amount);\\n    event TiersAllocSet(uint256[6] allocsPercentage);\\n    event RoundDurationUpdated(uint256 roundDuration);\\n    event MaxFcfsAmountUpdated(uint256 maxFcfsAmount);\\n\\n    constructor(IERC20 _stable, IStake _stakingContract) {\\n        STABLE = _stable;\\n        STAKINGCONTRACT = _stakingContract;\\n    }\\n\\n    function setTiersAllocs(uint256[6] calldata _allocs) external onlyOwner {\\n        require(_allocs[0] == 0, \\\"_allocs[0] is used for no tiers and must be 0\\\");\\n        require(_allocs[1] + _allocs[2]+ _allocs[3]+ _allocs[4]+ _allocs[5] == 100, \\\"Maths not good\\\");\\n        emit TiersAllocSet(_allocs);\\n        tiersAllocs = _allocs;\\n    }\\n\\n    function setRoundDuration(uint256 _firstRoundDuration) external onlyOwner {\\n        firstRoundDuration = _firstRoundDuration;\\n        emit RoundDurationUpdated(_firstRoundDuration);\\n    }\\n\\n    function setMaxFcfsAmount(uint256 _maxFcfsAmount) external onlyOwner {\\n        maxFcfsAmount = _maxFcfsAmount;\\n        emit MaxFcfsAmountUpdated(_maxFcfsAmount);\\n    }\\n\\n    function closePool(uint256 _poolId) external onlyOwner {\\n        PoolData storage p = _poolDatas[_poolId];\\n        require(p.startingDate != 0, \\\"Pool doesn't exist\\\");\\n        p.isFinished = true;\\n        emit PoolFinished(p.poolName, p.amountTarget, p.amountRaised);\\n    }\\n\\n    function getPoolDatas(uint256 _poolId) external view returns(PoolData memory){\\n        return _poolDatas[_poolId];\\n    }\\n\\n    function getUserInvestForPool(\\n        address _user,\\n        uint256 _pool\\n    ) external view returns (uint256) {\\n        return _userInvest[_user][_pool];\\n    }\\n\\n    function createPool(\\n        string memory _poolName,\\n        uint256 _amountTarget,\\n        uint256 _startingDate\\n    ) external onlyOwner {\\n        require(_startingDate > block.timestamp, \\\"Can't retro create pool\\\");\\n        require(_amountTarget > 1 * 1E18, \\\"Decimals error\\\");\\n        currentPoolId++;\\n        _poolDatas[currentPoolId].amountTarget = _amountTarget;\\n        _poolDatas[currentPoolId].startingDate = _startingDate;\\n        _poolDatas[currentPoolId].poolName = _poolName;\\n        emit PoolCreated(_poolName, currentPoolId, _amountTarget, _startingDate);\\n    }\\n\\n    function snapShotPool(\\n        uint256 _poolId\\n    ) external onlyOwner {\\n        PoolData storage pool = _poolDatas[_poolId];\\n        require(pool.snapShotNb == 0, \\\"Only 1 snapshot by pool\\\");\\n\\n        (\\n            uint256[6] memory tiersStaked,\\n            uint256 snapShotNb\\n        ) = STAKINGCONTRACT.snapShotPool();\\n\\n\\n        pool.snapShotNb = snapShotNb;\\n\\n        uint256 allocForPool = _poolDatas[_poolId].amountTarget * PRECISION;\\n\\n\\n        pool.allocByTokenForTiers[1] = tiersStaked[1] != 0 ? ((allocForPool*tiersAllocs[1]/100) / tiersStaked[1]) : 0; \\n        pool.allocByTokenForTiers[2] = tiersStaked[2] != 0 ? ((allocForPool*tiersAllocs[2]/100) / tiersStaked[2]) : 0;\\n        pool.allocByTokenForTiers[3] = tiersStaked[3] != 0 ? ((allocForPool*tiersAllocs[3]/100) / tiersStaked[3]) : 0; \\n        pool.allocByTokenForTiers[4] = tiersStaked[4] != 0 ? ((allocForPool*tiersAllocs[4]/100) / tiersStaked[4]) : 0; \\n        pool.allocByTokenForTiers[5] = tiersStaked[5] != 0 ? ((allocForPool*tiersAllocs[5]/100) / tiersStaked[5]) : 0; \\n\\n\\n    }\\n\\n    function getUserAllocForPool(address _user, uint256 _poolId) external view returns(uint256){\\n        PoolData memory p = _poolDatas[_poolId];\\n        return _getUserAllocForPool(_user,p,_poolId);\\n    }\\n\\n    function _getUserAllocForPool(address _user, PoolData memory p, uint256 _poolId) internal view returns(uint256){\\n        // calculate user's allocation for pool\\n        uint256 _allocCalculated = _calculateUserAlloc(_user,p);\\n\\n        if(_allocCalculated == 0){\\n            // user is not whitelisted for this pool, \\n            return 0;\\n        }else {\\n            if(block.timestamp >= p.startingDate + firstRoundDuration){\\n                // We are in round 2 FCFS\\n                if(_userInvest[_user][_poolId] != 0){\\n                    return _userAllocFcfs[_user][_poolId];\\n                }else {\\n                    return maxFcfsAmount;\\n                }\\n            }else{\\n                // We are on round 1 or pool didn't began\\n                if(_userInvest[_user][_poolId] != 0){\\n                    return _userAllocRound1[_user][_poolId];\\n                }else {\\n                    return _allocCalculated;\\n                }\\n\\n            }\\n        }\\n    }\\n\\n    function _calculateUserAlloc(address _user, PoolData memory p) internal view returns(uint256 alloc){\\n        if(p.snapShotNb == 0){\\n            alloc = 0;\\n        }else{\\n            (uint256 tiersNb, uint256 amountStaked) = STAKINGCONTRACT.getInvestorsDatas(_user,p.snapShotNb);\\n            alloc = amountStaked * p.allocByTokenForTiers[tiersNb] / PRECISION;\\n        }\\n\\n    }\\n\\n    function investInPool(uint256 _poolId, uint256 _amount) external {\\n        require(_amount != 0, \\\"Amount can't be Zero\\\");\\n        PoolData memory p = _poolDatas[_poolId];\\n        uint256 _now = block.timestamp;\\n        // check if pool has began\\n        require(_now >= p.startingDate, \\\"Pool isn't opened\\\");\\n        // check if pool is finished\\n        require(!p.isFinished, \\\"Pool already finished\\\");\\n        address _sender = _msgSender();\\n\\n        // calculate allocation\\n        uint256 _userAlloc = _getUserAllocForPool(_sender,p,_poolId);\\n        // check if alloc is > 0 and if amount <= to alloc\\n        require(_userAlloc != 0, \\\"You are not WL for this pool or you already used your Alloc\\\");\\n        require(_userAlloc >= _amount, \\\"You don't have enough allocation for this amount\\\");\\n        // check if pool target reached\\n        require(p.amountRaised + _amount <= p.amountTarget, \\\"too much, reduce the amount\\\");\\n\\n        if(_now >= p.startingDate + firstRoundDuration){\\n            // this is FCFS round\\n            if(_userInvest[_sender][_poolId] == 0){\\n                // set alloc\\n                _userAllocFcfs[_sender][_poolId] = _userAlloc;\\n            }\\n            // decrease amount to alloc\\n            _userAllocFcfs[_sender][_poolId] -= _amount;\\n        }else{\\n            if(_userInvest[_sender][_poolId] == 0){\\n                // set alloc for Round 1 and FCFS\\n                _userAllocRound1[_sender][_poolId] = _userAlloc;\\n                _userAllocFcfs[_sender][_poolId] = maxFcfsAmount;\\n\\n            }\\n            // decrease amount to alloc\\n            _userAllocRound1[_sender][_poolId] -= _amount;\\n        }\\n\\n        // increase user investment in the pool\\n        _userInvest[_sender][_poolId] += _amount;\\n        //increase amount raised in the pool\\n        _poolDatas[_poolId].amountRaised += _amount;\\n\\n        if(p.amountRaised + _amount == p.amountTarget){\\n            // if amount target is reached close the pool \\n            _poolDatas[_poolId].isFinished = true;\\n            emit PoolFinished(p.poolName, p.amountTarget, p.amountRaised);\\n        }\\n        emit UserInvest(_sender,_poolId, _amount);\\n        require(STABLE.transferFrom(_sender, address(this), _amount),\\\"Transfer failed\\\");\\n\\n    }\\n\\n    function withdrawPoolFund(uint256 _poolId) external onlyOwner {\\n        PoolData storage p = _poolDatas[_poolId];\\n        require(!p.fundWithdrawn, \\\"funds already withdrawn\\\");\\n        require(p.isFinished, \\\"pool isn't finished yet\\\");\\n        p.fundWithdrawn = true;\\n\\n        STABLE.transfer(\\n            _msgSender(),\\n            p.amountRaised\\n        );\\n    }\\n\\n    function emergencyWithdraw(IERC20 _token, uint256 _amount) external onlyOwner {\\n        require(_token != STABLE, \\\"Stable can only be withdrawn by calling withdrawPoolFund()\\\");\\n        _token.transfer(\\n            _msgSender(),\\n            _amount != 0 ? _amount : _token.balanceOf(address(this))\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stable\",\"type\":\"address\"},{\"internalType\":\"contract IStake\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFcfsAmount\",\"type\":\"uint256\"}],\"name\":\"MaxFcfsAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"PoolFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundDuration\",\"type\":\"uint256\"}],\"name\":\"RoundDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[6]\",\"name\":\"allocsPercentage\",\"type\":\"uint256[6]\"}],\"name\":\"TiersAllocSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserInvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKINGCONTRACT\",\"outputs\":[{\"internalType\":\"contract IStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amountTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingDate\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstRoundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolDatas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"allocByTokenForTiers\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapShotNb\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fundWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"}],\"internalType\":\"struct LaunchPad.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getUserAllocForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getUserInvestForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFcfsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFcfsAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxFcfsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstRoundDuration\",\"type\":\"uint256\"}],\"name\":\"setRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_allocs\",\"type\":\"uint256[6]\"}],\"name\":\"setTiersAllocs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"snapShotPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiersAllocs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"withdrawPoolFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaunchPad", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000005e56d2302de03034794330f96f003a7f50f8efb6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}