{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**FORUM WEBSITE - https://www.bitcoin2009.capital/forum/\r\nTELEGRAM - https://t.me/btc2009coin\r\nX - https://twitter.com/btc2009coin\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(ZERO);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != ZERO, \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract BITCOIN2009 is IERC20, Ownable {\r\n\r\n    address private WETH;\r\n\r\n    string private constant _name = \"BITCOIN2009\";\r\n    string private constant _symbol = \"BTC2009\";\r\n    uint8 private constant _decimals = 18;\r\n    \r\n    uint256 public _totalSupply = 21 * 10**7 * (10 ** _decimals);\r\n    uint256 public swapThreshold = _totalSupply / 1000; // Starting at 0.1%\r\n    uint256 public maxWallet = _totalSupply / 50; // Starting at 2%\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isWalletExempt;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint[2] taxesCollected = [0, 0];\r\n\r\n    uint256 public launchedAt;\r\n    address public liquidityPool = 0x4dD97E73337FE5c8DE3277797A39E1b4859B246a;\r\n\r\n    // All fees are in basis points (100 = 1%)\r\n    uint256 private buyMkt = 200;\r\n    uint256 private buyLP = 300;\r\n    uint256 private sellMkt = 2000;\r\n    uint256 private sellLP = 1000;\r\n\r\n    uint256 _baseBuyFee = buyMkt + buyLP;\r\n    uint256 _baseSellFee = sellMkt + sellLP;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address public factory;\r\n    address public marketingWallet = payable(0x0BB04ec742985B3A96afA9EEe6B0a9Dbd9f98B1e);\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingOpen = false;\r\n\r\n    //Event Logs\r\n    event LiquidityPoolUpdated(address indexed _newPool);\r\n    event MarketingWalletUpdated(address indexed _newWallet);\r\n    event RouterUpdated(IDEXRouter indexed _newRouter);\r\n    event BuyFeesUpdated(uint256 _newMkt, uint256 _newLp);\r\n    event SellFeesUpdated(uint256 _neMkt, uint256 _newLp);\r\n    event FeeExemptionChanged(address indexed _exemptAddress, bool _exempt);\r\n    event SwapbackSettingsChanged(bool _enabled, uint256 _newSwapbackAmount);\r\n    event MaxWalletUpdated(uint256 _newMaxWallet);\r\n    event WalletExemptionChanged(address indexed _exemptAddress, bool _exempt);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[marketingWallet] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        isWalletExempt[owner()] = true;\r\n        isWalletExempt[marketingWallet] = true;\r\n        isWalletExempt[DEAD] = true;\r\n        isWalletExempt[pair] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function launchSequence() external onlyOwner {\r\n\t    require(launchedAt == 0, \"Already launched\");\r\n        launchedAt = block.number;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function baseBuyFee() external view returns (uint256) {return _baseBuyFee; }\r\n    function baseSellFee() external view returns (uint256) {return _baseSellFee; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n//Transfer Functions\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]) { require(tradingOpen, \"Trading not active\"); }\r\n        if(!isWalletExempt[recipient]) {\r\n            require(_balances[recipient] + amount <= maxWallet || isFeeExempt[sender], \"Exceeds Max Wallet\");\r\n        }\r\n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\r\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        \r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient] + finalAmount;\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }  \r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }  \r\n\r\n//Tax Functions\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 mktTaxB = amount * buyMkt / 10000;\r\n\t    uint256 mktTaxS = amount * sellMkt / 10000;\r\n        uint256 lpTaxB = amount * buyLP / 10000;\r\n\t    uint256 lpTaxS = amount * sellLP / 10000;\r\n        uint256 taxToGet;\r\n\r\n\t    if(sender == pair && recipient != address(pair) && !isFeeExempt[recipient]) {\r\n            taxToGet = mktTaxB + lpTaxB;\r\n\t        addTaxCollected(mktTaxB, lpTaxB);\r\n\t    }\r\n\r\n\t    if(!inSwapAndLiquify && sender != pair && tradingOpen) {\r\n\t        taxToGet = mktTaxS + lpTaxS;\r\n\t        addTaxCollected(mktTaxS, lpTaxS);\r\n\t    }\r\n\r\n        _balances[address(this)] = _balances[address(this)] + taxToGet;\r\n        emit Transfer(sender, address(this), taxToGet);\r\n\r\n        return amount - taxToGet;\r\n    }\r\n\r\n    function addTaxCollected(uint mkt, uint lp) internal {\r\n        taxesCollected[0] += mkt;\r\n        taxesCollected[1] += lp;\r\n    }\r\n\r\n//LP and Swapback Functions\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        approve(address(this), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n    \r\n        uint256 tokenBalance = _balances[address(this)];\r\n        uint256 _totalCollected = taxesCollected[0] + taxesCollected[1];\r\n        uint256 mktShare = taxesCollected[0];\r\n        uint256 lpShare = taxesCollected[1];\r\n        uint256 tokensForLiquidity = lpShare / 2;  \r\n        uint256 amountToSwap = tokenBalance - tokensForLiquidity;\r\n\r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 totalETHBalance = address(this).balance;\r\n        uint256 ETHForMkt = totalETHBalance * mktShare / _totalCollected;\r\n        uint256 ETHForLiquidity = totalETHBalance * lpShare / _totalCollected / 2;\r\n      \r\n        if (totalETHBalance > 0) {\r\n            payable(marketingWallet).transfer(ETHForMkt);\r\n        }\r\n  \r\n        if (tokensForLiquidity > 0) {\r\n            addLiquidity(tokensForLiquidity, ETHForLiquidity);\r\n        }\r\n\r\n\t    delete taxesCollected;\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n// Update/Change Functions\r\n\r\n    function changeFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        emit FeeExemptionChanged(holder, exempt);\r\n    }\r\n\r\n    function changeWalletExempt(address holder, bool exempt) external onlyOwner {\r\n        isWalletExempt[holder] = exempt;\r\n        emit WalletExemptionChanged(holder, exempt);\r\n    }\r\n\r\n    function setMarketingWallet(address payable newMarketingWallet) external onlyOwner {\r\n        require(newMarketingWallet != address(0), \"Cannot be set to zero address\");\r\n        marketingWallet = payable(newMarketingWallet);\r\n        isFeeExempt[marketingWallet] = true;\r\n        isWalletExempt[marketingWallet] = true;\r\n        emit MarketingWalletUpdated(newMarketingWallet);\r\n    }\r\n\r\n    function setLiquidityPool(address newLiquidityPool) external onlyOwner {\r\n        require(newLiquidityPool != address(0), \"Cannot be set to zero address\");\r\n        liquidityPool = newLiquidityPool;\r\n        emit LiquidityPoolUpdated(newLiquidityPool);\r\n    }\r\n\r\n    function changeSwapBackSettings(bool enableSwapback, uint256 newSwapbackLimit) external onlyOwner {\r\n        swapAndLiquifyEnabled  = enableSwapback;\r\n        swapThreshold = newSwapbackLimit;\r\n        emit SwapbackSettingsChanged(enableSwapback, newSwapbackLimit);\r\n    }\r\n\r\n    function updateMaxWallet(uint256 newMaxWallet) public onlyOwner {\r\n\t    require(newMaxWallet >= (_totalSupply / 200), \"Max should be greater than 0.5%\");\r\n\t    maxWallet = newMaxWallet;\r\n        emit MaxWalletUpdated(newMaxWallet);\r\n    }\r\n\r\n    function updateBuyFees(uint256 newBuyMktFee, uint256 newBuyLpFee) public onlyOwner {\r\n\t    require(newBuyMktFee + newBuyLpFee <= 1000, \"Fees Too High\");\r\n\t    buyMkt = newBuyMktFee;\r\n\t    buyLP = newBuyLpFee;\r\n        emit BuyFeesUpdated(newBuyMktFee, newBuyLpFee);\r\n    }\r\n    \r\n    function updateSellFees(uint256 newSellMktFee,uint256 newSellLpFee) public onlyOwner {\r\n\t    require(newSellMktFee + newSellLpFee <= 1000, \"Fees Too High\");\r\n\t    sellMkt = newSellMktFee;\r\n\t    sellLP = newSellLpFee;\r\n        emit SellFeesUpdated(newSellMktFee, newSellLpFee);\r\n    }\r\n\r\n    function updateRouter(IDEXRouter _newRouter) external onlyOwner {\r\n        require(_newRouter != IDEXRouter(ZERO), \"Cannot be set to zero address\");\r\n        require(_newRouter != IDEXRouter(DEAD), \"Cannot be set to zero address\");\r\n        router = _newRouter;\r\n        emit RouterUpdated(_newRouter);\r\n    }\r\n\r\n    function clearStuckETH() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if(contractETHBalance > 0) { \r\n            payable(marketingWallet).transfer(contractETHBalance);\r\n    \t}\r\n    }\r\n\r\n    function clearStuckTokens(address contractAddress) external onlyOwner {\r\n        IERC20 erc20Token = IERC20(contractAddress);\r\n        uint256 balance = erc20Token.balanceOf(address(this));\r\n        if(contractAddress == address(this)) { _basicTransfer(address(this), marketingWallet, balance);\r\n            delete taxesCollected; \r\n            } else {\r\n                erc20Token.transfer(marketingWallet, balance);\r\n            }\r\n    }\r\n\r\n    function massDistributeTokens(address[] calldata _airdropAddresses, uint _amtPerAddress) external onlyOwner {\r\n        uint amtPerAddress = _amtPerAddress * (10 ** _decimals);\r\n\t    for (uint i = 0; i < _airdropAddresses.length; i++) {\r\n\t        IERC20(address(this)).transfer(_airdropAddresses[i], amtPerAddress);\r\n        }\r\n    }\r\n\r\n    function distributeTokensByAmount(address[] calldata _airdropAddresses, uint[] calldata _airdropAmounts) external onlyOwner {\r\n\t    for (uint i = 0; i < _airdropAddresses.length; i++) {\r\n            uint airdropAmount = _airdropAmounts[i] * (10 ** _decimals);\r\n\t        IERC20(address(this)).transfer(_airdropAddresses[i], airdropAmount);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMkt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLp\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exemptAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"MaxWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDEXRouter\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_neMkt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLp\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSwapbackAmount\",\"type\":\"uint256\"}],\"name\":\"SwapbackSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exemptAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"WalletExemptionChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapbackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_airdropAmounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokensByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amtPerAddress\",\"type\":\"uint256\"}],\"name\":\"massDistributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyLpFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLpFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BITCOIN2009", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5c23e2f39aadd40ec1e6efb0b8554dccb186392f5c6d9d09913773dd318272d2"}