{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DecubateStaking.sol\": {\r\n      \"content\": \"//** Decubate Staking Contract */\\n//** Author Aceson */\\n\\npragma solidity ^0.8.10;\\n\\n//SPDX-License-Identifier: UNLICENSED\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./libraries/InterestHelper.sol\\\";\\nimport \\\"./interfaces/IDecubateStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\ncontract DecubateStaking is Ownable, InterestHelper, IDecubateStaking {\\n  using SafeMath for uint256;\\n  using SafeMath for uint16;\\n\\n  struct User {\\n    uint256 totalInvested;\\n    uint256 totalWithdrawn;\\n    uint256 lastPayout;\\n    uint256 depositTime;\\n    uint256 totalClaimed;\\n  }\\n\\n  address private feeAddress; //Address which receives fee\\n  uint8 private feePercent; //Percentage of fee deducted (/1000)\\n  uint32 private timeGap; //Time interval between price update\\n\\n  mapping(uint256 => mapping(address => User)) public users;\\n  mapping(uint256 => uint256[2]) public priceBuffer;\\n  mapping(address => uint256) public maxTransferAmount;\\n\\n  // /**\\n  //  *\\n  //  * @dev PoolInfo reflects the info of each pools\\n  //  *\\n  //  * If APY is 12%, we provide 12 as input. lockPeriodInDays\\n  //  * would be the number of days which the claim is locked.\\n  //  * So if we want to lock claim for 1 month, lockPeriodInDays would be 30.\\n  //  *\\n  //  * @param {apy} Percentage of yield produced by the pool\\n  //  * @param {nftMultiplier} Multiplier for apy if user holds nft\\n  //  * @param {lockPeriodInDays} Amount of time claim will be locked\\n  //  * @param {totalDeposit} Total deposit in the pool\\n  //  * @param {hardCap} hardCap of the pool\\n  //  * @param {endDate} ending time of pool in unix timestamp\\n  //  * @param {inputToken} Token deposited onto the pool\\n  //  * @param {rewardToken} Token received as reward\\n  //  * @param {ratio} Price difference between input and output token\\n  //  * @param {isRewardAboveInput} Price difference between input and output token\\n  //  *\\n  //  */\\n  Pool[] public poolInfo;\\n  NFTMultiplier[] public nftInfo;\\n\\n  event Stake(address indexed addr, uint256 amount, uint256 time);\\n  event Claim(address indexed addr, uint256 amount, uint256 time);\\n  event Reinvest(address indexed addr, uint256 amount, uint256 time);\\n  event Unstake(address indexed addr, uint256 amount, uint256 time);\\n  event RatioUpdated(uint256 _pid, uint256 newRatio);\\n\\n  constructor() {\\n    feeAddress = msg.sender;\\n    feePercent = 5;\\n    timeGap = 24 hours;\\n  }\\n\\n  receive() external payable {\\n    revert(\\\"BNB deposit not supported\\\");\\n  }\\n\\n  /**\\n   *\\n   * @dev add new period to the pool, only available for owner\\n   *\\n   */\\n  function add(\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    address _tradesAgainst,\\n    PoolToken memory _inputToken,\\n    PoolToken memory _rewardToken,\\n    uint256 _hardCap\\n  ) external override onlyOwner {\\n    poolInfo.push(\\n      Pool({\\n        apy: _apy,\\n        lockPeriodInDays: _lockPeriodInDays,\\n        hardCap: _hardCap,\\n        totalDeposit: 0,\\n        endDate: _endDate,\\n        inputToken: _inputToken,\\n        rewardToken: _rewardToken,\\n        ratio: 1,\\n        tradesAgainst: _tradesAgainst,\\n        lastUpdatedTime: 0,\\n        isRewardAboveInput: false\\n      })\\n    );\\n\\n    //Init nft struct with dummy data\\n    nftInfo.push(\\n      NFTMultiplier({\\n        active: false,\\n        name: \\\"\\\",\\n        contractAdd: address(0),\\n        startIdx: 0,\\n        endIdx: 0,\\n        multiplier: 10\\n      })\\n    );\\n\\n    maxTransferAmount[_inputToken.addr] = ~uint256(0);\\n    maxTransferAmount[_rewardToken.addr] = ~uint256(0);\\n    uint256 poolIndex = poolLength() - 1;\\n\\n    updateRatio(poolIndex);\\n  }\\n\\n  /**\\n   *\\n   * @dev update the given pool's Info\\n   *\\n   */\\n  function set(\\n    uint256 _pid,\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    address _tradesAgainst,\\n    uint256 _hardCap\\n  ) external override onlyOwner {\\n    require(_pid < poolLength(), \\\"Invalid pool Id\\\");\\n\\n    Pool storage pool = poolInfo[_pid];\\n\\n    pool.apy = _apy;\\n    pool.lockPeriodInDays = _lockPeriodInDays;\\n    pool.endDate = _endDate;\\n    pool.tradesAgainst = _tradesAgainst;\\n    pool.hardCap = _hardCap;\\n  }\\n\\n  /**\\n   *\\n   * @dev update the given pool's tokens\\n   *\\n   */\\n  function setTokens(\\n    uint256 _pid,\\n    PoolToken memory _inputToken,\\n    PoolToken memory _rewardToken,\\n    uint256 _maxTransferInput,\\n    uint256 _maxTransferReward\\n  ) external override onlyOwner {\\n    require(_pid < poolLength(), \\\"Invalid pool Id\\\");\\n\\n    poolInfo[_pid].inputToken = _inputToken;\\n    poolInfo[_pid].rewardToken = _rewardToken;\\n\\n    maxTransferAmount[_inputToken.addr] = _maxTransferInput;\\n    maxTransferAmount[_rewardToken.addr] = _maxTransferReward;\\n  }\\n\\n  /**\\n   *\\n   * @dev update the given pool's nft info\\n   *\\n   */\\n  function setNFT(\\n    uint256 _pid,\\n    string calldata _name,\\n    address _contractAdd,\\n    bool _isUsed,\\n    uint16 _multiplier,\\n    uint16 _startIdx,\\n    uint16 _endIdx\\n  ) external override onlyOwner {\\n    NFTMultiplier storage nft = nftInfo[_pid];\\n\\n    nft.name = _name;\\n    nft.contractAdd = _contractAdd;\\n    nft.active = _isUsed;\\n    nft.multiplier = _multiplier;\\n    nft.startIdx = _startIdx;\\n    nft.endIdx = _endIdx;\\n  }\\n\\n  /**\\n   *\\n   * @dev Allow owner to transfer token from contract\\n   *\\n   * @param {address} contract address of corresponding token\\n   * @param {uint256} amount of token to be transferred\\n   *\\n   * This is a generalized function which can be used to transfer any accidentally\\n   * sent (including DCB) out of the contract to wowner\\n   *\\n   */\\n  function transferToken(address _addr, uint256 _amount) external onlyOwner returns (bool) {\\n    IERC20 token = IERC20(_addr);\\n    bool success = token.transfer(address(owner()), _amount);\\n    return success;\\n  }\\n\\n  /**\\n   *\\n   * @dev depsoit tokens to staking for reward allocation\\n   *\\n   * @param {_pid} Id of the pool\\n   * @param {_amount} Amount to be staked\\n   *\\n   * @return {bool} Status of stake\\n   *\\n   */\\n  function stake(uint256 _pid, uint256 _amount) external override returns (bool) {\\n    Pool memory pool = poolInfo[_pid];\\n    IERC20 token = IERC20(pool.inputToken.addr);\\n\\n    require(\\n      token.allowance(msg.sender, address(this)) >= _amount,\\n      \\\"Decubate : Set allowance first!\\\"\\n    );\\n\\n    bool success = token.transferFrom(msg.sender, address(this), _amount);\\n    require(success, \\\"Decubate : Transfer failed\\\");\\n\\n    _claim(_pid, msg.sender);\\n\\n    _stake(_pid, msg.sender, _amount);\\n\\n    return success;\\n  }\\n\\n  /**\\n   *\\n   * @dev withdraw tokens from Staking\\n   *\\n   * @param {_pid} id of the pool\\n   * @param {_amount} amount to be unstaked\\n   *\\n   * @return {bool} Status of stake\\n   *\\n   */\\n  function unStake(uint256 _pid, uint256 _amount) external override returns (bool) {\\n    User storage user = users[_pid][msg.sender];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    require(user.totalInvested >= _amount, \\\"You don't have enough funds\\\");\\n\\n    require(canUnstake(_pid, msg.sender), \\\"Stake still in locked state\\\");\\n\\n    _claim(_pid, msg.sender);\\n\\n    pool.totalDeposit = pool.totalDeposit.sub(_amount);\\n    user.totalInvested = user.totalInvested.sub(_amount);\\n\\n    safeTOKENTransfer(pool.inputToken.addr, msg.sender, _amount);\\n\\n    emit Unstake(msg.sender, _amount, block.timestamp);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev update fee values\\n   *\\n   */\\n  function updateFeeValues(uint8 _feePercent, address _feeWallet) external onlyOwner {\\n    feePercent = _feePercent;\\n    feeAddress = _feeWallet;\\n  }\\n\\n  /**\\n   *\\n   * @dev update time gap\\n   *\\n   */\\n  function updateTimeGap(uint32 newValue) external onlyOwner {\\n    timeGap = newValue;\\n  }\\n\\n  /**\\n   *\\n   * @dev claim accumulated reward reward for a single pool\\n   *\\n   * @param {_pid} pool identifier\\n   *\\n   * @return {bool} status of claim\\n   */\\n\\n  function claim(uint256 _pid) public override returns (bool) {\\n    _claim(_pid, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev claim accumulated  reward from all pools\\n   *\\n   * Beware of gas fee!\\n   *\\n   */\\n  function claimAll() public override returns (bool) {\\n    uint256 len = poolInfo.length;\\n\\n    for (uint256 pid = 0; pid < len; ++pid) {\\n      _claim(pid, msg.sender);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Update ratio of a given pool\\n   *\\n   * @param {_pid} pool identifier\\n   *\\n   * @return {bool} Status of update\\n   */\\n  function updateRatio(uint256 _pid) public returns (bool) {\\n    _updateRatio(_pid);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Update ratio of all pools\\n   *\\n   * Beware of gas fee!\\n   *\\n   */\\n  function updateRatioAll() public returns (bool) {\\n    uint256 len = poolInfo.length;\\n\\n    for (uint256 pid = 0; pid < len; ++pid) {\\n      _updateRatio(pid);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev check whether user can Unstake or not\\n   *\\n   * @param {_pid}  id of the pool\\n   * @param {_addr} address of the user\\n   *\\n   * @return {bool} Status of Unstake\\n   *\\n   */\\n\\n  function canUnstake(uint256 _pid, address _addr) public view override returns (bool) {\\n    User storage user = users[_pid][_addr];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    return (block.timestamp >= user.depositTime.add(pool.lockPeriodInDays.mul(1 days)));\\n  }\\n\\n  /**\\n   *\\n   * @dev check whether user have NFT multiplier\\n   *\\n   * @param _pid  id of the pool\\n   * @param _addr address of the user\\n   *\\n   * @return multi Value of multiplier\\n   *\\n   */\\n\\n  function calcMultiplier(uint256 _pid, address _addr) public view override returns (uint16 multi) {\\n    NFTMultiplier memory nft = nftInfo[_pid];\\n\\n    if (nft.active && ownsCorrectNFT(_addr, _pid)) {\\n      multi = nft.multiplier;\\n    } else {\\n      multi = 10;\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev get length of the pools\\n   *\\n   * @return {uint256} length of the pools\\n   *\\n   */\\n  function poolLength() public view override returns (uint256) {\\n    return poolInfo.length;\\n  }\\n\\n  /**\\n   *\\n   * @dev get info of all pools\\n   *\\n   * @return {PoolInfo[]} Pool info struct\\n   *\\n   */\\n  function getPools() public view returns (Pool[] memory) {\\n    return poolInfo;\\n  }\\n\\n  function payout(uint256 _pid, address _addr) public view override returns (uint256 value) {\\n    User memory user = users[_pid][_addr];\\n    Pool memory pool = poolInfo[_pid];\\n\\n    uint256 from = user.lastPayout > user.depositTime ? user.lastPayout : user.depositTime;\\n    uint256 to = block.timestamp > pool.endDate ? pool.endDate : block.timestamp;\\n\\n    uint256 multiplier = calcMultiplier(_pid, _addr);\\n\\n    if (from < to) {\\n      uint256 rayValue = yearlyRateToRay((pool.apy * 10**18) / 1000);\\n      value = (accrueInterest(user.totalInvested, rayValue, to.sub(from))).sub(user.totalInvested);\\n    }\\n\\n    if (pool.isRewardAboveInput) {\\n      value = value.div(pool.ratio).mul(multiplier).div(10);\\n    } else {\\n      value = value.mul(pool.ratio).mul(multiplier).div(10);\\n    }\\n\\n    uint8 iToken = IERC20Metadata(pool.inputToken.addr).decimals();\\n    uint8 rToken = IERC20Metadata(pool.rewardToken.addr).decimals();\\n\\n    if (iToken > rToken) {\\n      value = value.div(10**(iToken - rToken));\\n    } else if (rToken > iToken) {\\n      value = value.mul(10**(rToken - iToken));\\n    }\\n\\n    return value;\\n  }\\n\\n  function ownsCorrectNFT(address _addr, uint256 _pid) public view returns (bool) {\\n    NFTMultiplier memory nft = nftInfo[_pid];\\n\\n    uint256[] memory ids = walletOfOwner(nft.contractAdd, _addr);\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      if (ids[i] >= nft.startIdx && ids[i] <= nft.endIdx) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function _claim(uint256 _pid, address _addr) internal {\\n    User storage user = users[_pid][_addr];\\n    Pool memory pool = poolInfo[_pid];\\n\\n    _updateRatio(_pid);\\n\\n    uint256 amount = payout(_pid, _addr);\\n\\n    if (amount > 0) {\\n      if (feePercent > 0) {\\n        uint256 feeAmount = amount.mul(feePercent).div(1000);\\n        safeTOKENTransfer(pool.rewardToken.addr, feeAddress, feeAmount);\\n        amount = amount.sub(feeAmount);\\n      }\\n\\n      safeTOKENTransfer(pool.rewardToken.addr, _addr, amount);\\n\\n      user.lastPayout = block.timestamp;\\n      user.totalWithdrawn = user.totalWithdrawn.add(amount);\\n      user.totalClaimed = user.totalClaimed.add(amount);\\n    }\\n\\n    emit Claim(_addr, amount, block.timestamp);\\n  }\\n\\n  function _stake(\\n    uint256 _pid,\\n    address _sender,\\n    uint256 _amount\\n  ) internal {\\n    User storage user = users[_pid][_sender];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    uint256 stopDepo = pool.endDate.sub(pool.lockPeriodInDays.mul(1 days));\\n\\n    require(block.timestamp <= stopDepo, \\\"Staking is disabled for this pool\\\");\\n    require(pool.totalDeposit + _amount <= pool.hardCap, \\\"Pool is full\\\");\\n\\n    user.totalInvested = user.totalInvested.add(_amount);\\n    pool.totalDeposit = pool.totalDeposit.add(_amount);\\n    user.lastPayout = block.timestamp;\\n    user.depositTime = block.timestamp;\\n\\n    emit Stake(_sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   *\\n   * @dev safe  transfer function, require to have enough reward to transfer\\n   *\\n   */\\n  function safeTOKENTransfer(\\n    address _token,\\n    address _to,\\n    uint256 _amount\\n  ) internal {\\n    IERC20 token = IERC20(_token);\\n    uint256 bal = token.balanceOf(address(this));\\n\\n    require(bal >= _amount, \\\"Not enough funds in treasury\\\");\\n\\n    uint256 maxTx = maxTransferAmount[_token];\\n    uint256 amount = _amount;\\n\\n    while (amount > maxTx) {\\n      token.transfer(_to, maxTx);\\n      amount = amount - maxTx;\\n    }\\n\\n    if (amount > 0) {\\n      token.transfer(_to, amount);\\n    }\\n  }\\n\\n  function _updateRatio(uint256 _pid) internal {\\n    Pool storage pool = poolInfo[_pid];\\n\\n    if (pool.endDate > block.timestamp && pool.lastUpdatedTime + timeGap <= block.timestamp) {\\n      //skipping expired pools\\n\\n      (uint256 input, uint256 reward) = getPrices(_pid);\\n      uint32 timeElapsed = uint32(block.timestamp) - pool.lastUpdatedTime;\\n\\n      uint256 priceInputAverage = (input - priceBuffer[_pid][0]) / timeElapsed;\\n      uint256 priceRewardAverage = (reward - priceBuffer[_pid][1]) / timeElapsed;\\n\\n      IERC20Metadata iToken = IERC20Metadata(pool.inputToken.addr);\\n      IERC20Metadata rToken = IERC20Metadata(pool.rewardToken.addr);\\n\\n      // Price of 1 input token in BNB\\n      uint256 priceOfInput = priceInputAverage.mul(10**(iToken.decimals()));\\n      // Price of 1 reward token in BNB\\n      uint256 priceOfReward = priceRewardAverage.mul(10**(rToken.decimals()));\\n\\n      if (priceOfInput > priceOfReward) {\\n        pool.ratio = priceOfInput / priceOfReward;\\n        pool.isRewardAboveInput = false;\\n      } else {\\n        pool.ratio = priceOfReward / priceOfInput;\\n        pool.isRewardAboveInput = true;\\n      }\\n\\n      priceBuffer[_pid][0] = input;\\n      priceBuffer[_pid][1] = reward;\\n\\n      pool.lastUpdatedTime = uint32(block.timestamp);\\n\\n      emit RatioUpdated(_pid, pool.ratio);\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev Fetching price from AMM for calculating ratio\\n   *\\n   */\\n  function getPrices(uint256 _pid) internal view returns (uint256 priceInput, uint256 priceReward) {\\n    Pool memory pool = poolInfo[_pid];\\n\\n    priceInput = getTokenPrice(pool.inputToken, pool.tradesAgainst);\\n    priceReward = getTokenPrice(pool.rewardToken, pool.tradesAgainst);\\n  }\\n\\n  /**\\n   *\\n   *\\n   * @dev Fetching nfts owned by a user\\n   *\\n   */\\n  function walletOfOwner(address _contract, address _owner)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    IERC721Enumerable nft = IERC721Enumerable(_contract);\\n    uint256 tokenCount = nft.balanceOf(_owner);\\n\\n    uint256[] memory tokensId = new uint256[](tokenCount);\\n    for (uint256 i; i < tokenCount; i++) {\\n      tokensId[i] = nft.tokenOfOwnerByIndex(_owner, i);\\n    }\\n    return tokensId;\\n  }\\n\\n  /**\\n   *\\n   * @dev Fetching cumulative price of token\\n   *\\n   */\\n  function getTokenPrice(PoolToken memory _token, address against) internal view returns (uint256) {\\n    IUniswapV2Router02 router = IUniswapV2Router02(_token.router);\\n    IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\\n\\n    address _pair = factory.getPair(_token.addr, against);\\n    IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\n\\n    bool tokenIsToken0 = _token.addr == pair.token0();\\n\\n    (uint256 price0, uint256 price1, ) = UniswapV2OracleLibrary.currentCumulativePrices(_pair);\\n\\n    return tokenIsToken0 ? price0 : price1;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/InterestHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ncontract DSMath {\\n  uint256 internal constant WAD = 10**18;\\n  uint256 internal constant RAY = 10**27;\\n\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //    x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //    floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\\n// Using DSMath from DappHub https://github.com/dapphub/ds-math\\n// More info on DSMath and fixed point arithmetic in Solidity:\\n// https://medium.com/dapphub/introducing-ds-math-an-innovative-safe-math-library-d58bc88313da\\n\\n/**\\n * @title Interest\\n * @author Nick Ward\\n * @dev Uses DSMath's wad and ray math to implement (approximately)\\n * continuously compounding interest by calculating discretely compounded\\n * interest compounded every second.\\n */\\ncontract InterestHelper is DSMath {\\n  /**\\n   * @dev Uses an approximation of continuously compounded interest\\n   * (discretely compounded every second)\\n   * @param _principal The principal to calculate the interest on.\\n   *   Accepted in wei.\\n   * @param _rate The interest rate. Accepted as a ray representing\\n   *   1 + the effective interest rate per second, compounded every\\n   *   second. As an example:\\n   *   I want to accrue interest at a nominal rate (i) of 5.0% per year\\n   *   compounded continuously. (Effective Annual Rate of 5.127%).\\n   *   This is approximately equal to 5.0% per year compounded every\\n   *   second (to 8 decimal places, if max precision is essential,\\n   *   calculate nominal interest per year compounded every second from\\n   *   your desired effective annual rate). Effective Rate Per Second =\\n   *   Nominal Rate Per Second compounded every second = Nominal Rate\\n   *   Per Year compounded every second * conversion factor from years\\n   *   to seconds\\n   *   Effective Rate Per Second = 0.05 / (365 days/yr * 86400 sec/day)\\n   *                             = 1.5854895991882 * 10 ** -9\\n   *   The value we want to send this function is\\n   *   1 * 10 ** 27 + Effective Rate Per Second * 10 ** 27\\n   *   = 1000000001585489599188229325\\n   *   This will return 5.1271096334354555 Dai on a 100 Dai principal\\n   *   over the course of one year (31536000 seconds)\\n   * @param _age The time period over which to accrue interest. Accepted\\n   *   in seconds.\\n   * @return The new principal as a wad. Equal to original principal +\\n   *   interest accrued\\n   */\\n  function accrueInterest(\\n    uint256 _principal,\\n    uint256 _rate,\\n    uint256 _age\\n  ) public pure returns (uint256) {\\n    return rmul(_principal, rpow(_rate, _age));\\n  }\\n\\n  /**\\n   * @dev Takes in the desired nominal interest rate per year, compounded\\n   *   every second (this is approximately equal to nominal interest rate\\n   *   per year compounded continuously). Returns the ray value expected\\n   *   by the accrueInterest function\\n   * @param _rateWad A wad of the desired nominal interest rate per year,\\n   *   compounded continuously. Converting from ether to wei will effectively\\n   *   convert from a decimal value to a wad. So 5% rate = 0.05\\n   *   should be input as yearlyRateToRay( 0.05 ether )\\n   * @return 1 * 10 ** 27 + Effective Interest Rate Per Second * 10 ** 27\\n   */\\n  function yearlyRateToRay(uint256 _rateWad) public pure returns (uint256) {\\n    return add(wadToRay(1 ether), rdiv(wadToRay(_rateWad), weiToRay(365 * 86400)));\\n  }\\n\\n  //// Fixed point scale factors\\n  // wei -> the base unit\\n  // wad -> wei * 10 ** 18. 1 ether = 1 wad, so 0.5 ether can be used\\n  //      to represent a decimal wad of 0.5\\n  // ray -> wei * 10 ** 27\\n\\n  // Go from wad (10**18) to ray (10**27)\\n  function wadToRay(uint256 _wad) internal pure returns (uint256) {\\n    return mul(_wad, 10**9);\\n  }\\n\\n  // Go from wei to ray (10**27)\\n  function weiToRay(uint256 _wei) internal pure returns (uint256) {\\n    return mul(_wei, 10**27);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IDecubateStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IDecubateStaking {\\n  struct NFTMultiplier {\\n    bool active;\\n    string name;\\n    address contractAdd;\\n    uint16 multiplier;\\n    uint16 startIdx;\\n    uint16 endIdx;\\n  }\\n\\n  struct PoolToken {\\n    address addr;\\n    address router;\\n  }\\n\\n  struct Pool {\\n    uint256 apy;\\n    uint256 lockPeriodInDays;\\n    uint256 totalDeposit;\\n    uint256 hardCap;\\n    uint256 endDate;\\n    PoolToken inputToken;\\n    PoolToken rewardToken;\\n    uint256 ratio;\\n    address tradesAgainst;\\n    uint32 lastUpdatedTime;\\n    bool isRewardAboveInput;\\n  }\\n\\n  function add(\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    address _tradesAgainst,\\n    PoolToken memory _inputToken,\\n    PoolToken memory _rewardToken,\\n    uint256 _hardCap\\n  ) external;\\n\\n  function set(\\n    uint256 _pid,\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    address _tradesAgainst,\\n    uint256 _hardCap\\n  ) external;\\n\\n  function setTokens(\\n    uint256 _pid,\\n    PoolToken memory _inputToken,\\n    PoolToken memory _rewardToken,\\n    uint256 _maxTransferInput,\\n    uint256 _maxTransferReward\\n  ) external;\\n\\n  function setNFT(\\n    uint256 _pid,\\n    string calldata _name,\\n    address _contractAdd,\\n    bool _isUsed,\\n    uint16 _multiplier,\\n    uint16 _startIdx,\\n    uint16 _endIdx\\n  ) external;\\n\\n  function stake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n  function unStake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n  function updateFeeValues(uint8 _feePercent, address _feeWallet) external;\\n\\n  function updateTimeGap(uint32 newValue) external;\\n\\n  function claim(uint256 _pid) external returns (bool);\\n\\n  function claimAll() external returns (bool);\\n\\n  function updateRatio(uint256 _pid) external returns (bool);\\n\\n  function updateRatioAll() external returns (bool);\\n\\n  function poolInfo(uint256)\\n    external\\n    view\\n    returns (\\n      uint256 apy,\\n      uint256 lockPeriodInDays,\\n      uint256 totalDeposit,\\n      uint256 hardCap,\\n      uint256 endDate,\\n      PoolToken memory inputToken,\\n      PoolToken memory rewardToken,\\n      uint256 ratio,\\n      address tradesAgainst,\\n      uint32 lastUpdatedTime,\\n      bool isRewardAboveInput\\n    );\\n\\n  function users(uint256, address)\\n    external\\n    view\\n    returns (\\n      uint256 totalInvested,\\n      uint256 totalWithdrawn,\\n      uint256 lastPayout,\\n      uint256 depositTime,\\n      uint256 totalClaimed\\n    );\\n\\n  function canUnstake(uint256 _pid, address _addr) external view returns (bool);\\n\\n  function calcMultiplier(uint256 _pid, address _addr) external view returns (uint16 multi);\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function payout(uint256 _pid, address _addr) external view returns (uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/FixedPoint.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"RatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tradesAgainst\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"_inputToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"_rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calcMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"multi\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"inputToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tradesAgainst\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdatedTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isRewardAboveInput\",\"type\":\"bool\"}],\"internalType\":\"struct IDecubateStaking.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAdd\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endIdx\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"ownsCorrectNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"inputToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tradesAgainst\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdatedTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isRewardAboveInput\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tradesAgainst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAdd\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isUsed\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_endIdx\",\"type\":\"uint16\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"_inputToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"internalType\":\"struct IDecubateStaking.PoolToken\",\"name\":\"_rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransferInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransferReward\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"updateFeeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updateRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRatioAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"updateTimeGap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateWad\",\"type\":\"uint256\"}],\"name\":\"yearlyRateToRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DecubateStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}