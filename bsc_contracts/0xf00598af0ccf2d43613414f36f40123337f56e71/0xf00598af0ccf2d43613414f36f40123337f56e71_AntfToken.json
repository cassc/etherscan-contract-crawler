{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/*\r\n    GMEB\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\ncontract Tax {\r\n\r\n    event SetBurnRatio(uint _newBurnRatio);\r\n    event SetLiquidRatio(uint _newLiquidRatio);\r\n    event SetCharityRatio(uint _newCharityRatio);\r\n    event SetCharityAddress(address _newCharityAddress);\r\n\r\n    event SetMinAutoLiquid(uint _newMinAutoLiquid);\r\n\r\n    uint private _burnRatio;\r\n    uint private _liquidRatio;\r\n    uint private _charityRatio;\r\n\r\n    uint constant denominator = 10000;\r\n\r\n    uint private _minAutoLiquid;\r\n\r\n    address private _charityAddress;\r\n\r\n    uint internal _totalTax;\r\n\r\n    function _setBurnRatio(\r\n        uint _newBurnRatio\r\n    )\r\n        internal\r\n    {\r\n        _burnRatio = _newBurnRatio;\r\n        emit SetBurnRatio(_newBurnRatio);\r\n    }\r\n\r\n    function _setLiquidRatio(\r\n        uint _newLiquidRatio\r\n    )\r\n        internal\r\n    {\r\n        _liquidRatio = _newLiquidRatio;\r\n        emit SetLiquidRatio(_newLiquidRatio);\r\n    }\r\n\r\n    function _setCharityRatio(\r\n        uint _newCharityRatio\r\n    )\r\n        internal\r\n    {\r\n        _charityRatio = _newCharityRatio;\r\n        emit SetCharityRatio(_newCharityRatio);\r\n    }\r\n\r\n    function _setCharityAddress(\r\n        address _newCharityAddress\r\n    )\r\n        internal\r\n    {\r\n        _charityAddress = _newCharityAddress;\r\n        emit SetCharityAddress(_newCharityAddress);\r\n    }\r\n\r\n    function _setMinAutoLiquid(\r\n        uint _newMinAutoLiquid\r\n    )\r\n        internal\r\n    {\r\n        _minAutoLiquid = _newMinAutoLiquid;\r\n        emit SetMinAutoLiquid(_newMinAutoLiquid);\r\n    }\r\n\r\n    function burnRatio()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _burnRatio;\r\n    }\r\n\r\n    function liquidRatio()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _liquidRatio;\r\n    }\r\n\r\n    function charityRatio()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _charityRatio;\r\n    }\r\n\r\n    function charityAddress()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return _charityAddress;\r\n    }\r\n\r\n    function minAutoLiquid()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _minAutoLiquid;\r\n    }\r\n\r\n    function getFeeAmounts(\r\n        uint _amount\r\n    )\r\n        public\r\n        view\r\n        returns(uint burnA, uint taxA)\r\n    {\r\n        uint tmp = _amount / denominator;\r\n        burnA = tmp * _burnRatio;\r\n        taxA = tmp * (_liquidRatio + _charityRatio);\r\n    }\r\n\r\n    function _splitLiquidCharityFromTax(\r\n        uint _maxAmount\r\n    )\r\n        internal\r\n        returns(uint liquidA, uint charityA)\r\n    {\r\n        uint _amount = _maxAmount > _totalTax ? _totalTax : _maxAmount;\r\n        uint tmp = _amount / (_liquidRatio + _charityRatio);\r\n        liquidA = tmp * _liquidRatio;\r\n        charityA = _amount - liquidA;\r\n        // reset\r\n        _totalTax -= _amount;\r\n    }\r\n}\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Sale {\r\n    using SafeMath for uint;\r\n\r\n    event SetPrice(uint _newPrice);\r\n    event SetSaleAmount(uint _oldSaleAmount, uint _newSaleAmount);\r\n    event SetSaleOwner(address payable _newSaleOwner);\r\n\r\n    event Buy(uint _tokenAmount);\r\n\r\n    uint private _price;\r\n    uint private _saleAmount;\r\n\r\n    address payable private _saleOwner;\r\n\r\n    function _setPrice(\r\n        uint _newPrice\r\n    )\r\n        internal\r\n    {\r\n        _price = _newPrice;\r\n        emit SetPrice(_newPrice);\r\n    }\r\n\r\n    function _setSaleAmount(\r\n        uint _newSaleAmount\r\n    )\r\n        internal\r\n    {\r\n        emit SetSaleAmount(_saleAmount, _newSaleAmount);\r\n        _saleAmount = _newSaleAmount;\r\n    }\r\n\r\n    function _setSaleOwner(\r\n        address payable _newSaleOwner\r\n    )\r\n        internal\r\n    {\r\n        _saleOwner = _newSaleOwner;\r\n        emit SetSaleOwner(_newSaleOwner);\r\n    }\r\n\r\n    function _saleStop()\r\n        internal\r\n    {\r\n        _setSaleAmount(0);\r\n    }\r\n\r\n    function _buy(\r\n        uint value\r\n    )\r\n        internal\r\n        returns(uint)\r\n    {\r\n        uint tokenAmount = value.mul(1 ether).div(_price);\r\n        _saleAmount = _saleAmount.sub(tokenAmount);\r\n        emit Buy(tokenAmount);\r\n        _saleOwner.transfer(value);\r\n        return tokenAmount;\r\n    }\r\n\r\n    function saleOwner()\r\n        public\r\n        view\r\n        returns(address payable)\r\n    {\r\n        return _saleOwner;\r\n    }\r\n\r\n    function price()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _price;\r\n    }\r\n\r\n    function saleAmount()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _saleAmount;\r\n    }\r\n}\r\n\r\n\r\ncontract Referral {\r\n    event AddRef(address _address, address _ref);\r\n    event SetRefPercents(uint _newF1Percent, uint _newF2Percent, uint _newF3Percent);\r\n\r\n    mapping(address => address) private _refOf;\r\n\r\n    uint private _f1Percent;\r\n    uint private _f2Percent;\r\n    uint private _f3Percent;\r\n\r\n    function _setRefPercents(\r\n        uint _newF1Percent,\r\n        uint _newF2Percent,\r\n        uint _newF3Percent\r\n    )\r\n        internal\r\n    {\r\n        _f1Percent = _newF1Percent;\r\n        _f2Percent = _newF2Percent;\r\n        _f3Percent = _newF3Percent;\r\n        emit SetRefPercents(_newF1Percent, _newF2Percent, _newF3Percent);\r\n    }\r\n\r\n    function _addRef(\r\n        address _address,\r\n        address _ref\r\n    )\r\n        internal\r\n    {\r\n        if (_refOf[_address] == address(0x0) && _address != _ref) {\r\n            _refOf[_address] = _ref;\r\n            emit AddRef(_address, _ref);\r\n        }\r\n    }\r\n\r\n    function refOf(\r\n        address _address\r\n    )\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return _refOf[_address];\r\n    }\r\n\r\n    function f1Percent()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _f1Percent;\r\n    }\r\n\r\n    function f2Percent()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _f2Percent;\r\n    }\r\n\r\n    function f3Percent()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _f3Percent;\r\n    }\r\n}\r\n\r\n\r\ncontract Claim {\r\n    modifier onlyNotClaimed(address _claimer) {\r\n        require(!_isClaimed[_claimer], \"already claimed!\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) private _isClaimed;\r\n\r\n    uint private _claimCost;\r\n    uint private _claimAmount;\r\n    uint private _refClaimAmount;\r\n\r\n    bool private _isClaimStopped;\r\n\r\n    function _stopClaim()\r\n        internal\r\n    {\r\n        _isClaimStopped = true;\r\n    }\r\n\r\n    function _startClaim()\r\n        internal\r\n    {\r\n        _isClaimStopped = false;\r\n    }\r\n\r\n    function _setClaimCost(\r\n        uint _newClaimCost\r\n    )\r\n        internal\r\n    {\r\n        _claimCost = _newClaimCost;\r\n    }\r\n\r\n    function _setClaimAmount(\r\n        uint _newClaimAmount\r\n    )\r\n        internal\r\n    {\r\n        _claimAmount = _newClaimAmount;\r\n    }\r\n\r\n    function _setRefClaimAmount(\r\n        uint _newRefClaimAmount\r\n    )\r\n        internal\r\n    {\r\n        _refClaimAmount = _newRefClaimAmount;\r\n    }\r\n\r\n    function _claim(\r\n        address _claimer\r\n    )\r\n        internal\r\n        onlyNotClaimed(_claimer)\r\n        returns(uint, uint)\r\n    {\r\n        require(!_isClaimStopped, \"Claimming programm has been stopped!\");\r\n        _isClaimed[_claimer] = true;\r\n        if (_claimCost > 0) {\r\n            require(msg.value >= _claimCost, \"claim cost a bit bnb!\");\r\n        }\r\n        return (_claimAmount, _refClaimAmount);\r\n    }\r\n\r\n    function isClaimed(\r\n        address _claimer\r\n    )\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return _isClaimed[_claimer];\r\n    }\r\n\r\n    function isClaimStopped()\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return _isClaimStopped;\r\n    }\r\n\r\n    function claimCost()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _claimCost;\r\n    }\r\n\r\n    function claimAmount()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _claimAmount;\r\n    }\r\n\r\n    function refClaimAmount()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return _refClaimAmount;\r\n    }\r\n}\r\n\r\n\r\ncontract Admin {\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"is not admin!\");\r\n        _;\r\n    }\r\n\r\n    address private _admin;\r\n\r\n    constructor (\r\n        address _initAdmin\r\n    )\r\n    {\r\n        _admin = _initAdmin;\r\n    }\r\n\r\n    function setAdmin(\r\n        address _newAdmin\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _admin = _newAdmin;\r\n    }\r\n\r\n    function admin()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return _admin;\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelist {\r\n    event AddToWhitelist(address _address);\r\n    event RemoveFromWhitelist(address _address);\r\n\r\n    mapping(address => bool) private _isWhitelisted;\r\n\r\n    function _addToWhitelist(\r\n        address _address\r\n    )\r\n        internal\r\n    {\r\n        if (_isWhitelisted[_address]) {\r\n            return;\r\n        }\r\n        _isWhitelisted[_address] = true;\r\n        emit AddToWhitelist(_address);\r\n    }\r\n\r\n    function _removeFromWhitelist(\r\n        address _address\r\n    )\r\n        internal\r\n    {\r\n        if (!_isWhitelisted[_address]) {\r\n            return;\r\n        }\r\n        _isWhitelisted[_address] = false;\r\n        emit RemoveFromWhitelist(_address);\r\n    }\r\n\r\n    function isWhitelisted(\r\n        address _address\r\n    )\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return _isWhitelisted[_address];\r\n    }\r\n}\r\n\r\n\r\ncontract Settings is Admin, Tax, Sale, Referral, Claim, Whitelist {\r\n    constructor (\r\n        address _initAdmin\r\n    )\r\n        Admin(_initAdmin)\r\n    {\r\n    }\r\n\r\n    /*\r\n        REFERRAL\r\n    */\r\n\r\n    function setRefPercents(\r\n        uint _newF1Percent,\r\n        uint _newF2Percent,\r\n        uint _newF3Percent\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setRefPercents(_newF1Percent, _newF2Percent, _newF3Percent);\r\n    }\r\n\r\n    /*\r\n        SALE\r\n    */\r\n\r\n    function setPrice(\r\n        uint _newPrice\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setPrice(_newPrice);\r\n    }\r\n\r\n    function setSaleAmount(\r\n        uint _newSaleAmount\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setSaleAmount(_newSaleAmount);\r\n    }\r\n\r\n    function setSaleOwner(\r\n        address payable _newSaleOwner\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setSaleOwner(_newSaleOwner);\r\n    }\r\n\r\n    function saleStop()\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _saleStop();\r\n    }\r\n\r\n    /*\r\n        TAX\r\n    */\r\n\r\n    function setBurnRatio(\r\n        uint _newBurnRatio\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setBurnRatio(_newBurnRatio);\r\n    }\r\n\r\n    function setLiquidRatio(\r\n        uint _newLiquidRatio\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setLiquidRatio(_newLiquidRatio);\r\n    }\r\n\r\n    function setCharityRatio(\r\n        uint _newCharityRatio\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setCharityRatio(_newCharityRatio);\r\n    }\r\n\r\n    function setCharityAddress(\r\n        address _newCharityAddress\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setCharityAddress(_newCharityAddress);\r\n    }\r\n\r\n    function setMinAutoLiquid(\r\n        uint _newMinAutoLiquid\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setMinAutoLiquid(_newMinAutoLiquid);\r\n    }\r\n\r\n    /*\r\n        WHITELIST\r\n    */\r\n\r\n    function addToWhitelist(\r\n        address _address\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _addToWhitelist(_address);\r\n    }\r\n\r\n    function removeFromWhitelist(\r\n        address _address\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _removeFromWhitelist(_address);\r\n    }\r\n\r\n    /*\r\n        CLAIM\r\n    */\r\n    function setClaimCost(\r\n        uint _newClaimCost\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setClaimCost(_newClaimCost);\r\n    }\r\n\r\n    function setClaimAmount(\r\n        uint _newClaimAmount\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setClaimAmount(_newClaimAmount);\r\n    }\r\n\r\n    function setRefClaimAmount(\r\n        uint _newRefClaimAmount\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _setRefClaimAmount(_newRefClaimAmount);\r\n    }\r\n\r\n    function stopClaim()\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _stopClaim();\r\n    }\r\n\r\n    function startClaim()\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _startClaim();\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract AntfToken is ERC20, Settings {\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    address constant public uniswapV2FactoryAddr = address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n    address constant public uniswapV2RouterAddr = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address constant public WBNBAddr = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address constant private ZERO_ADDRESS = address(0x0);\r\n\r\n    uint private _lastAutoSwapLiquidBlock;\r\n\r\n    constructor (string memory name, string memory symbol, address _initAdmin)\r\n        ERC20(name, symbol)\r\n        Settings(_initAdmin)\r\n    {\r\n        uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddr);\r\n         // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2FactoryAddr)\r\n            .createPair(address(this), WBNBAddr);\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _addToWhitelist(address(this));\r\n\r\n        uint initTotal = 1e6 * 1e9 ether;\r\n        uint initContractBalance = 275000 * 1e9 ether;\r\n        _mint(address(this), initContractBalance);\r\n        _mint(_initAdmin, initTotal - initContractBalance);\r\n        // Init\r\n        _setSaleAmount(initTotal);\r\n        _setMinAutoLiquid(totalSupply() * 5 / 10000);\r\n\r\n        _setSaleOwner(payable(0x5eD06B57A82dDdf9A5328e5035253EDb247d65ff));\r\n        _setCharityAddress(payable(0xDf2dF79841a1cc0eddA5fd20C5a2fd67406d6cBf));\r\n\r\n        // denominator = 10000\r\n        _setBurnRatio(200);\r\n        _setLiquidRatio(300);\r\n        _setCharityRatio(300);\r\n\r\n        _setClaimAmount(100 * 1e6 ether);\r\n        _setRefClaimAmount(50 * 1e6 ether);\r\n\r\n        // 1 bnb = 300 bil tokens\r\n        uint oneBnb = 320 * 1e9;\r\n        _setPrice(1 ether / oneBnb);\r\n\r\n        _setRefPercents(30, 15, 5);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _autoSwapAndLiquify(address _from) internal {\r\n        if (_totalTax >= minAutoLiquid() && _from != uniswapV2Pair) {\r\n            if (block.number != _lastAutoSwapLiquidBlock) {\r\n                _lastAutoSwapLiquidBlock = block.number;\r\n                swapAndLiquify();\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify() public {\r\n        (uint liquidA, uint charityA) = _splitLiquidCharityFromTax(minAutoLiquid());\r\n        swapTokensForEth(charityA, charityAddress());\r\n        // split the contract balance into halves\r\n        uint256 half = liquidA / 2;\r\n        uint256 otherHalf = liquidA - half;\r\n        // swap tokens for ETH\r\n        uint initCoinBalance = address(this).balance;\r\n        swapTokensForEth(half, address(this)); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 addedCoinBalance = address(this).balance - initCoinBalance;\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, addedCoinBalance, charityAddress());\r\n        \r\n        emit SwapAndLiquify(half, addedCoinBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount, address to) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount, address lpOwner) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            lpOwner,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tax(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    )\r\n        internal\r\n        returns(uint)\r\n    {\r\n        if (isWhitelisted(sender) || isWhitelisted(recipient)) {\r\n            return amount;\r\n        }\r\n        (uint burnA, uint taxA) = getFeeAmounts(amount);\r\n        _burn(sender, burnA);\r\n        _transfer(sender, address(this), taxA);\r\n        _totalTax += taxA;\r\n\r\n        require(taxA + burnA < amount, \"invalid tax amount\");\r\n        return amount - taxA - burnA;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _autoSwapAndLiquify(_msgSender());\r\n        uint afterTaxAmount = _tax(_msgSender(), recipient, amount);\r\n        _transfer(_msgSender(), recipient, afterTaxAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _autoSwapAndLiquify(sender);\r\n        uint afterTaxAmount = _tax(sender, recipient, amount);\r\n        _transfer(sender, recipient, afterTaxAmount);\r\n\r\n        uint256 currentAllowance = allowance(sender, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        Sale\r\n    */\r\n\r\n    function buy(\r\n        address _ref\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        uint tokenAmount = _buy(msg.value);\r\n        _transfer(address(this), _msgSender(), tokenAmount);\r\n        _addRef(_msgSender(), _ref);\r\n\r\n        address f1 = refOf(_msgSender());\r\n        // stop if F1 not found\r\n        if (f1 == ZERO_ADDRESS) {\r\n            return;\r\n        }\r\n        uint onePercent = tokenAmount / 100;\r\n        _transfer(address(this), f1, onePercent * f1Percent());\r\n\r\n        address f2 = refOf(f1);\r\n        // stop if F2 not found\r\n        if (f2 == ZERO_ADDRESS) {\r\n            return;\r\n        }\r\n        _transfer(address(this), f2, onePercent * f2Percent());\r\n\r\n        address f3 = refOf(f2);\r\n        // stop if F3 not found\r\n        if (f3 == ZERO_ADDRESS) {\r\n            return;\r\n        }\r\n        _transfer(address(this), f3, onePercent * f3Percent());\r\n    }\r\n\r\n    /*\r\n        CLAIM\r\n    */\r\n\r\n    function claim(\r\n        address _ref\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        require(tx.origin == msg.sender, \"spammer go away!\");\r\n        (uint claimAmount, uint refClaimAmount) = _claim(msg.sender);\r\n        _transfer(address(this), _msgSender(), claimAmount);\r\n        _transfer(address(this), _ref, refClaimAmount);\r\n    }\r\n\r\n    /*\r\n        SaleOwner\r\n    */\r\n\r\n    function withdraw(\r\n        uint _amount\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        _transfer(address(this), saleOwner(), _amount);\r\n        require(balanceOf(address(this)) >= _totalTax, \"withdraw too much!\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_initAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"AddRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBurnRatio\",\"type\":\"uint256\"}],\"name\":\"SetBurnRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCharityAddress\",\"type\":\"address\"}],\"name\":\"SetCharityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCharityRatio\",\"type\":\"uint256\"}],\"name\":\"SetCharityRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLiquidRatio\",\"type\":\"uint256\"}],\"name\":\"SetLiquidRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinAutoLiquid\",\"type\":\"uint256\"}],\"name\":\"SetMinAutoLiquid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newF1Percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newF2Percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newF3Percent\",\"type\":\"uint256\"}],\"name\":\"SetRefPercents\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldSaleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSaleAmount\",\"type\":\"uint256\"}],\"name\":\"SetSaleAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_newSaleOwner\",\"type\":\"address\"}],\"name\":\"SetSaleOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNBAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f1Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f2Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f3Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAutoLiquid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"refOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBurnRatio\",\"type\":\"uint256\"}],\"name\":\"setBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCharityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCharityRatio\",\"type\":\"uint256\"}],\"name\":\"setCharityRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newClaimAmount\",\"type\":\"uint256\"}],\"name\":\"setClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newClaimCost\",\"type\":\"uint256\"}],\"name\":\"setClaimCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinAutoLiquid\",\"type\":\"uint256\"}],\"name\":\"setMinAutoLiquid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRefClaimAmount\",\"type\":\"uint256\"}],\"name\":\"setRefClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newF1Percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newF2Percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newF3Percent\",\"type\":\"uint256\"}],\"name\":\"setRefPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleAmount\",\"type\":\"uint256\"}],\"name\":\"setSaleAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newSaleOwner\",\"type\":\"address\"}],\"name\":\"setSaleOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2FactoryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2RouterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AntfToken", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b8ab670d6f527dd70785320292142d85fa7e0da7000000000000000000000000000000000000000000000000000000000000000c616e74732e66696e616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004414e544600000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f5c1bde7e1b6f46e87a68bea4e907c191b30de116efa334fdb6eac6b96c6704a"}