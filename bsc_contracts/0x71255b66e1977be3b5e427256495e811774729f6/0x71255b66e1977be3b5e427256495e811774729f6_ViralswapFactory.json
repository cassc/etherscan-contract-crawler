{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/viralswap/ViralswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './interfaces/IViralswapFactory.sol';\\r\\nimport './libraries/UniswapV2LiquidityMathLibrary.sol';\\r\\nimport './ViralswapPair.sol';\\r\\nimport './ViralswapVault.sol';\\r\\n\\r\\ncontract ViralswapFactory is IViralswapFactory {\\r\\n    address public override feeTo;\\r\\n    address public override feeToSetter;\\r\\n    address public override migrator;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getPair;\\r\\n    address[] public override allPairs;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getVault;\\r\\n    address[] public override allVaults;\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n    event VaultCreated(address indexed tokenIn, address indexed tokenOut, address vault, uint);\\r\\n\\r\\n    constructor(address _feeToSetter) public {\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external override view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function allVaultsLength() external override view returns (uint) {\\r\\n        return allVaults.length;\\r\\n    }\\r\\n\\r\\n    function pairCodeHash() external pure override returns (bytes32) {\\r\\n        return keccak256(type(ViralswapPair).creationCode);\\r\\n    }\\r\\n\\r\\n    function vaultCodeHash() external pure override returns (bytes32) {\\r\\n        return keccak256(type(ViralswapVault).creationCode);\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\r\\n        require(tokenA != tokenB, 'Viralswap: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'Viralswap: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'Viralswap: PAIR_EXISTS'); // single check is sufficient\\r\\n        bytes memory bytecode = type(ViralswapPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        ViralswapPair(pair).initialize(token0, token1);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to create a VIRAL Vault for the specified tokens.\\r\\n     *\\r\\n     * @param tokenOutPerInflatedTokenIn : number of tokenOut to distribute per 1e18 tokenIn\\r\\n     * @param tokenIn : the input token address\\r\\n     * @param tokenOut : the output token address\\r\\n     * @param router : address of the ViralSwap router\\r\\n    **/\\r\\n    function createVault(uint tokenOutPerInflatedTokenIn, address tokenIn, address tokenOut, address router, uint feeOnTokenOutTransferBIPS) external override returns (address vault) {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        require(tokenIn != tokenOut, 'Viralswap: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenIn < tokenOut ? (tokenIn, tokenOut) : (tokenOut, tokenIn);\\r\\n        require(token0 != address(0), 'Viralswap: ZERO_ADDRESS');\\r\\n        require(getVault[token0][token1] == address(0), 'Viralswap: VAULT_EXISTS'); // single check is sufficient\\r\\n        bytes memory bytecode = type(ViralswapVault).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            vault := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        ViralswapVault(vault).initialize(tokenOutPerInflatedTokenIn, tokenIn, tokenOut, router, feeOnTokenOutTransferBIPS);\\r\\n        getVault[token0][token1] = vault;\\r\\n        getVault[token1][token0] = vault; // populate mapping in the reverse direction\\r\\n        allVaults.push(vault);\\r\\n        emit VaultCreated(tokenIn, tokenOut, vault, allVaults.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to increase the minting quota for the VIRAL Vault for the specified tokens.\\r\\n     *\\r\\n     * @param tokenA : the first token address\\r\\n     * @param tokenB : the second token address\\r\\n     * @param quota : the minting quota to add\\r\\n    **/\\r\\n    function addQuota(address tokenA, address tokenB, uint quota) external override {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        address vault = getVault[tokenA][tokenB];\\r\\n        require(vault != address(0), 'Viralswap: VAULT_DOES_NOT_EXIST');\\r\\n        ViralswapVault(vault).addQuota(quota);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to update the router address for the VIRAL Vault for the specified tokens.\\r\\n     *\\r\\n     * @param tokenA : the first token address\\r\\n     * @param tokenB : the second token address\\r\\n     * @param _viralswapRouter02 : the new router address\\r\\n    **/\\r\\n    function updateRouterInVault(address tokenA, address tokenB, address _viralswapRouter02) external override {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        address vault = getVault[tokenA][tokenB];\\r\\n        require(vault != address(0), 'Viralswap: VAULT_DOES_NOT_EXIST');\\r\\n        ViralswapVault(vault).updateRouter(_viralswapRouter02);\\r\\n    }\\r\\n\\r\\n    function withdrawERC20FromVault(address tokenA, address tokenB, address tokenToWithdraw, address to) external override {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        address vault = getVault[tokenA][tokenB];\\r\\n        require(vault != address(0), 'Viralswap: VAULT_DOES_NOT_EXIST');\\r\\n        ViralswapVault(vault).withdrawERC20(tokenToWithdraw, to);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external override {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setMigrator(address _migrator) external override {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        migrator = _migrator;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external override {\\r\\n        require(msg.sender == feeToSetter, 'Viralswap: FORBIDDEN');\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function computeProfitMaximizingTrade(\\r\\n        uint256 truePriceTokenA,\\r\\n        uint256 truePriceTokenB,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure override returns (bool, uint256) {\\r\\n        return UniswapV2LiquidityMathLibrary.computeProfitMaximizingTrade(\\r\\n            truePriceTokenA,\\r\\n            truePriceTokenB,\\r\\n            reserveA,\\r\\n            reserveB\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IViralswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IViralswapFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function migrator() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function getVault(address tokenA, address tokenB) external view returns (address vault);\\r\\n    function allVaults(uint) external view returns (address vault);\\r\\n    function allVaultsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function createVault(uint tokenOutPerTokenIn, address tokenIn, address tokenOut, address router, uint feeOnTokenOutTransferBIPS) external returns (address vault);\\r\\n\\r\\n    function addQuota(address tokenA, address tokenB, uint quota) external;\\r\\n    function updateRouterInVault(address tokenA, address tokenB, address _viralswapRouter02) external;\\r\\n    function withdrawERC20FromVault(address tokenA, address tokenB, address tokenToWithdraw, address to) external;\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n    function setMigrator(address) external;\\r\\n\\r\\n    function pairCodeHash() external pure returns (bytes32);\\r\\n    function vaultCodeHash() external pure returns (bytes32);\\r\\n\\r\\n    function computeProfitMaximizingTrade(\\r\\n        uint256 truePriceTokenA,\\r\\n        uint256 truePriceTokenB,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (bool, uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/libraries/UniswapV2LiquidityMathLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './Babylonian.sol';\\r\\nimport './FullMath.sol';\\r\\nimport './SafeMath.sol';\\r\\n\\r\\nlibrary UniswapV2LiquidityMathLibrary {\\r\\n    using SafeMathViralswap for uint256;\\r\\n\\r\\n    // computes the direction and magnitude of the profit-maximizing trade\\r\\n    function computeProfitMaximizingTrade(\\r\\n        uint256 truePriceTokenA,\\r\\n        uint256 truePriceTokenB,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) pure internal returns (bool aToB, uint256 amountIn) {\\r\\n        aToB = FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\\r\\n\\r\\n        uint256 invariant = reserveA.mul(reserveB);\\r\\n\\r\\n        uint256 leftSide = Babylonian.sqrt(\\r\\n            FullMath.mulDiv(\\r\\n                invariant.mul(1000),\\r\\n                aToB ? truePriceTokenA : truePriceTokenB,\\r\\n                (aToB ? truePriceTokenB : truePriceTokenA).mul(997)\\r\\n            )\\r\\n        );\\r\\n        uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\\r\\n\\r\\n        if (leftSide < rightSide) return (false, 0);\\r\\n\\r\\n        // compute the amount that must be sent to move the price to the profit-maximizing price\\r\\n        amountIn = leftSide.sub(rightSide);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/viralswap/ViralswapPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './ViralswapERC20.sol';\\r\\nimport './libraries/Math.sol';\\r\\nimport './libraries/UQ112x112.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IViralswapFactory.sol';\\r\\nimport './interfaces/IViralswapCallee.sol';\\r\\n\\r\\ninterface IMigrator {\\r\\n    // Return the desired amount of liquidity token that the migrator wants.\\r\\n    function desiredLiquidity() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract ViralswapPair is ViralswapERC20 {\\r\\n    using SafeMathViralswap  for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public factory;\\r\\n    address public token0;\\r\\n    address public token1;\\r\\n\\r\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint public price0CumulativeLast;\\r\\n    uint public price1CumulativeLast;\\r\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'Viralswap: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Viralswap: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    constructor() public {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) external {\\r\\n        require(msg.sender == factory, 'Viralswap: FORBIDDEN'); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Viralswap: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            // * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = IViralswapFactory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast; // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\r\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\r\\n                    uint liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) external lock returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        uint balance0 = IERC20Viralswap(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20Viralswap(token1).balanceOf(address(this));\\r\\n        uint amount0 = balance0.sub(_reserve0);\\r\\n        uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            address migrator = IViralswapFactory(factory).migrator();\\r\\n            if (msg.sender == migrator) {\\r\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\r\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"Bad desired liquidity\\\");\\r\\n            } else {\\r\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\r\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n            }\\r\\n        } else {\\r\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'Viralswap: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(msg.sender, amount0, amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        address _token0 = token0;                                // gas savings\\r\\n        address _token1 = token1;                                // gas savings\\r\\n        uint balance0 = IERC20Viralswap(_token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20Viralswap(_token1).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'Viralswap: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20Viralswap(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20Viralswap(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'Viralswap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Viralswap: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        { // scope for _token{0,1}, avoids stack too deep errors\\r\\n        address _token0 = token0;\\r\\n        address _token1 = token1;\\r\\n        require(to != _token0 && to != _token1, 'Viralswap: INVALID_TO');\\r\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\r\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\r\\n        if (data.length > 0) IViralswapCallee(to).viralswapCall(msg.sender, amount0Out, amount1Out, data);\\r\\n        balance0 = IERC20Viralswap(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20Viralswap(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'Viralswap: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\r\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\r\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Viralswap: K');\\r\\n        }\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) external lock {\\r\\n        address _token0 = token0; // gas savings\\r\\n        address _token1 = token1; // gas savings\\r\\n        _safeTransfer(_token0, to, IERC20Viralswap(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20Viralswap(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external lock {\\r\\n        _update(IERC20Viralswap(token0).balanceOf(address(this)), IERC20Viralswap(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/ViralswapVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/*\\r\\nBEGIN KEYBASE SALTPACK SIGNED MESSAGE. kXR7VktZdyH7rvq v5weRa0zkYfegFM 5cM6gB7cyPatQvp 6KyygX8PsvQVo4n Ugo6Il5bm6R9KJH KEkg77qc0o0lY6W yvqrtLgZxgKJVAH FTy5ayHJfkisnFM Shi7gaWAfQezYkC M1U9mZfY9OhthMn VhuwjWDrIqu8IaO mBL830YhemOeyZ9 0sNJhblIzLSskfq ii978jFlUJwCtMI 3dKs4NZuJkhW86Q F0ZdHRWO9lUnhvJ Uge2AAymBbtvrmx Z6QE88Wuj10K5wV 96BePfhF27S. END KEYBASE SALTPACK SIGNED MESSAGE.\\r\\n*/\\r\\n\\r\\nimport './libraries/Math.sol';\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './interfaces/IViralswapPair.sol';\\r\\nimport './interfaces/IViralswapFactory.sol';\\r\\nimport './interfaces/IViralswapRouter02.sol';\\r\\nimport './interfaces/IERC20Mintable.sol';\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the VIRAL Vault.\\r\\n *\\r\\n * ViralSwap Vault supports a fixed price buying of tokenOut when sent tokenIn.\\r\\n *\\r\\n * The tokenIn recieved are then used to add liquidity to the corresponding ViralSwap Pair.\\r\\n * The Vault does not hold tokenOut, they're minted each time a buy is made (the Vault MUST have the ability to mint tokens).\\r\\n */\\r\\ncontract ViralswapVault {\\r\\n    using SafeMathViralswap for uint256;\\r\\n\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public factory;\\r\\n    address public tokenIn;\\r\\n    address public tokenOut;\\r\\n    address public pair;\\r\\n    address public viralswapRouter02;\\r\\n\\r\\n    uint256 public availableQuota;\\r\\n    uint256 public feeOnTokenOutTransferBIPS;\\r\\n    uint256 public tokenOutPerInflatedTokenIn; // inflated by 1e18\\r\\n\\r\\n    uint112 private reserveIn;           // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserveOut;          // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint256 private unlocked = 1;\\r\\n\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'Viralswap: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint112 _reserveIn, uint112 _reserveOut, uint32 _blockTimestampLast) {\\r\\n        _reserveIn = reserveIn;\\r\\n        _reserveOut = reserveOut;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function getQuoteOut(address _tokenIn, uint256 _amountIn) external view returns (uint256 amountOut) {\\r\\n        if(_tokenIn != tokenIn) {\\r\\n            return 0;\\r\\n        }\\r\\n        amountOut = _amountIn.mul(tokenOutPerInflatedTokenIn) / 1e18;\\r\\n        if(amountOut > availableQuota) {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getQuoteIn(address _tokenOut, uint256 _amountOut) external view returns (uint256 amountIn) {\\r\\n        if(_tokenOut != tokenOut) {\\r\\n            return 0;\\r\\n        }\\r\\n        if(_amountOut > availableQuota) {\\r\\n            return 0;\\r\\n        }\\r\\n        amountIn = _amountOut.mul(1e18) / tokenOutPerInflatedTokenIn;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint256 value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Viralswap: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    event Buy(address indexed sender, uint256 amountOut, address indexed to);\\r\\n    event Sync(uint112 reserveIn, uint112 reserveOut);\\r\\n    event AddQuota(uint256 quota);\\r\\n\\r\\n    constructor() public {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at the time of deployment\\r\\n    function initialize(uint256 _tokenOutPerInflatedTokenIn, address _tokenIn, address _tokenOut, address _viralswapRouter02, uint256 _feeOnTokenOutTransferBIPS) external {\\r\\n        require(msg.sender == factory, 'Viralswap: FORBIDDEN'); // sufficient check\\r\\n        require(_tokenOutPerInflatedTokenIn != 0, \\\"Viralswap: INVALID_TOKENOUT_QUANTITY\\\");\\r\\n        require(feeOnTokenOutTransferBIPS < 10000, \\\"Viralswap: INVALID_FEE_ON_TOKENOUT\\\");\\r\\n        tokenOutPerInflatedTokenIn = _tokenOutPerInflatedTokenIn;\\r\\n        tokenIn = _tokenIn;\\r\\n        tokenOut = _tokenOut;\\r\\n        viralswapRouter02 = _viralswapRouter02;\\r\\n        feeOnTokenOutTransferBIPS = _feeOnTokenOutTransferBIPS;\\r\\n\\r\\n        pair = IViralswapFactory(factory).getPair(_tokenIn, _tokenOut);\\r\\n        require(pair != address(0), \\\"Viralswap: PAIR_DOES_NOT_EXIST\\\");\\r\\n        (uint256 swapReserveIn, uint256 swapReserveOut) = _getSwapReserves(_tokenIn, _tokenOut);\\r\\n        require(swapReserveIn > 0 && swapReserveOut > 0, \\\"Viralswap: NO_LIQUIDITY_IN_POOL\\\");\\r\\n    }\\r\\n\\r\\n    // called by factory to update the ViralRouter address\\r\\n    function updateRouter(address _viralswapRouter02) external {\\r\\n        require(msg.sender == factory, 'Viralswap: FORBIDDEN'); // sufficient check\\r\\n        viralswapRouter02 = _viralswapRouter02;\\r\\n    }\\r\\n\\r\\n    // called by factory to add minting quota for tokenOut\\r\\n    function addQuota(uint256 quota) external {\\r\\n        require(msg.sender == factory, 'Viralswap: FORBIDDEN'); // sufficient check\\r\\n        availableQuota = availableQuota.add(quota);\\r\\n        emit AddQuota(quota);\\r\\n    }\\r\\n\\r\\n    function withdrawERC20(address _token, address _to) external {\\r\\n        require(msg.sender == factory, 'Viralswap: FORBIDDEN'); // sufficient check\\r\\n        uint256 balance = IERC20Viralswap(_token).balanceOf(address(this));\\r\\n        IERC20Viralswap(_token).transfer(_to, balance);\\r\\n        _update();\\r\\n    }\\r\\n\\r\\n    // called by self to mint tokenOut\\r\\n    function _mint(address _account, uint256 _amount) private {\\r\\n        require(availableQuota >= _amount, 'Viralswap: INSUFFICIENT_QUOTA');\\r\\n        availableQuota = availableQuota.sub(_amount);\\r\\n        IERC20ViralswapMintable(tokenOut).mint(_account, _amount);\\r\\n    }\\r\\n\\r\\n    // update reserves to match current balances\\r\\n    function _update() private {\\r\\n        uint256 balanceIn = IERC20Viralswap(tokenIn).balanceOf(address(this));\\r\\n        uint256 balanceOut = IERC20Viralswap(tokenOut).balanceOf(address(this));\\r\\n        require(balanceIn <= uint112(-1) && balanceOut <= uint112(-1), 'Viralswap: OVERFLOW');\\r\\n        reserveIn = uint112(balanceIn);\\r\\n        reserveOut = uint112(balanceOut);\\r\\n        blockTimestampLast = uint32(block.timestamp % 2**32);\\r\\n        emit Sync(reserveIn, reserveOut);\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(uint256 _amountInDesired, uint256 _amountOutDesired) private {\\r\\n\\r\\n        IERC20Viralswap(tokenIn).transfer(pair, _amountInDesired);\\r\\n        IERC20Viralswap(tokenOut).transfer(pair, _amountOutDesired);\\r\\n\\r\\n        IViralswapPair(pair).mint(address(this));\\r\\n    }\\r\\n\\r\\n    function _getSwapReserves(address _tokenIn, address _tokenOut) internal view returns (uint256 _reserveIn, uint256 _reserveOut){\\r\\n\\r\\n        (uint256 reserve0, uint256 reserve1,) = IViralswapPair(pair).getReserves();\\r\\n        (_reserveIn, _reserveOut) = _tokenIn < _tokenOut ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    function _quotePair(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    // What actually is happening in the function:\\r\\n    //  - calculate amount of tokenIn sent to the vault, check if it is atleast the expected amount, refund excess\\r\\n    //  - calculate the tokenOut needed to add to liquidity\\r\\n    //  - mint the required amount of tokenOut (buy + liquidity)\\r\\n    //  - transfer tokenOut to the `to` address\\r\\n    //  - add liquidity to the corresponding pair\\r\\n    //  - update reserves\\r\\n    function buy(uint256 amountOut, address to) external lock {\\r\\n        require(msg.sender == viralswapRouter02, \\\"Viralswap: FORBIDDEN\\\");\\r\\n        require(amountOut > 0, 'Viralswap: INSUFFICIENT_OUT_AMT');\\r\\n\\r\\n        address _tokenIn = tokenIn;\\r\\n        (uint112 _reserveIn,,) = getReserves();\\r\\n\\r\\n        uint256 balanceIn = IERC20Viralswap(_tokenIn).balanceOf(address(this));\\r\\n        uint256 amountIn = balanceIn.sub(_reserveIn);\\r\\n        uint256 amountInExpected = amountOut.mul(1e18) / tokenOutPerInflatedTokenIn;\\r\\n        require(amountIn >= amountInExpected, 'Viralswap: INSUFFICIENT_IN_AMT');\\r\\n\\r\\n        _mint(address(this), amountOut); // important to have this before _tryBalancePool, as availableQuota changes\\r\\n        IERC20Viralswap(tokenOut).transfer(to, amountOut);\\r\\n\\r\\n        _tryBalancePool(_reserveIn, amountIn, availableQuota);\\r\\n\\r\\n        emit Buy(msg.sender, amountOut, to);\\r\\n    }\\r\\n\\r\\n    function _tryBalancePool(uint256 _reserveIn, uint256 _maxSpendTokenIn, uint256 _maxSpendTokenOut) internal {\\r\\n        require(_maxSpendTokenIn != 0 || _maxSpendTokenOut != 0, \\\"Viralswap: ZERO_SPEND\\\");\\r\\n\\r\\n        address _tokenIn = tokenIn;\\r\\n        address _tokenOut = tokenOut;\\r\\n        bool buyTokenOut;\\r\\n        uint256 swapAmountIn;\\r\\n        {\\r\\n            (uint256 swapReserveIn, uint256 swapReserveOut) = _getSwapReserves(_tokenIn, _tokenOut);\\r\\n            (buyTokenOut, swapAmountIn) = IViralswapFactory(factory).computeProfitMaximizingTrade(\\r\\n                1e18, tokenOutPerInflatedTokenIn, swapReserveIn, swapReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 maxSpend = buyTokenOut ? _maxSpendTokenIn : _maxSpendTokenOut;\\r\\n        if (swapAmountIn > maxSpend) {\\r\\n            swapAmountIn = maxSpend;\\r\\n        }\\r\\n\\r\\n        if(swapAmountIn != 0) {\\r\\n             if(buyTokenOut) {\\r\\n                // spend swapAmountIn worth of _tokenIn\\r\\n                _swap(BURN_ADDRESS, _tokenIn, _tokenOut, swapAmountIn);\\r\\n\\r\\n            } else {\\r\\n                // mint and spend swapAmountIn worth of _tokenOut\\r\\n                _mint(address(this), swapAmountIn);\\r\\n                _swap(address(this), _tokenOut, _tokenIn, swapAmountIn);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 tokenInForLiquidity = IERC20Viralswap(_tokenIn).balanceOf(address(this)).sub(_reserveIn);\\r\\n\\r\\n        if(tokenInForLiquidity > 0) {\\r\\n            // the pool is balanced or quota insufficient\\r\\n            uint256 tokenInForLiquidityFeeAdjusted = tokenInForLiquidity.sub(tokenInForLiquidity.mul(feeOnTokenOutTransferBIPS) / 10000 );\\r\\n            uint256 tokenOutForLiquidity = tokenInForLiquidity.mul(tokenOutPerInflatedTokenIn) / 1e18;\\r\\n\\r\\n            _mint(address(this), tokenOutForLiquidity);\\r\\n            _addLiquidity(tokenInForLiquidityFeeAdjusted, tokenOutForLiquidity);\\r\\n        }\\r\\n        _update();\\r\\n    }\\r\\n\\r\\n    function _swap(address _to, address _tokenToSell, address _tokenToBuy, uint256 _amountIn) private {\\r\\n        IERC20Viralswap(_tokenToSell).approve(viralswapRouter02, _amountIn);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _tokenToSell;\\r\\n        path[1] = _tokenToBuy;\\r\\n\\r\\n        IViralswapRouter02(viralswapRouter02).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            _amountIn,\\r\\n            0, // we can skip computing this number because the math is tested\\r\\n            path,\\r\\n            _to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external lock {\\r\\n        _update();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/libraries/Babylonian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n// computes square roots using the babylonian method\\r\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\r\\nlibrary Babylonian {\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/viralswap/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-4.0\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\r\\n// license is CC-BY-4.0\\r\\nlibrary FullMath {\\r\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm < l) h -= 1;\\r\\n    }\\r\\n\\r\\n    function fullDiv(\\r\\n        uint256 l,\\r\\n        uint256 h,\\r\\n        uint256 d\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 pow2 = d & -d;\\r\\n        d /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 d\\r\\n    ) internal pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n\\r\\n        uint256 mm = mulmod(x, y, d);\\r\\n        if (mm > l) h -= 1;\\r\\n        l -= mm;\\r\\n\\r\\n        if (h == 0) return l / d;\\r\\n\\r\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\r\\n        return fullDiv(l, h, d);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/viralswap/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMathViralswap {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/ViralswapERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\n\\r\\ncontract ViralswapERC20 {\\r\\n    using SafeMathViralswap for uint;\\r\\n\\r\\n    string public constant name = 'ViralSwap LP Token';\\r\\n    string public constant symbol = 'VLP';\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint  public totalSupply;\\r\\n    mapping(address => uint) public balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public allowance;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public nonces;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    constructor() public {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(-1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\r\\n        require(deadline >= block.timestamp, 'Viralswap: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Viralswap: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/libraries/UQ112x112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20Viralswap {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IViralswapCallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IViralswapCallee {\\r\\n    function viralswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IViralswapPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IViralswapPair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IViralswapRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapRouter02.sol';\\r\\n\\r\\ninterface IViralswapRouter02 is IUniswapV2Router02 {\\r\\n\\r\\n    function swapExactViralForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactViralForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactTokensForViralSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function buyTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function buyViralForExactTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function buyViralForExactETHSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function getVaultAmountOut(address tokenIn, address tokenOut, uint amountIn) external view returns (uint amountOut);\\r\\n    function getVaultAmountIn(address tokenIn, address tokenOut, uint amountOut) external view returns (uint amountIn);\\r\\n}\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './IERC20.sol';\\r\\n\\r\\ninterface IERC20ViralswapMintable is IERC20Viralswap {\\r\\n    function mint(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IUniswapRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapRouter01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/viralswap/interfaces/IUniswapRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function VIRAL() external pure returns (address);\\r\\n    function altRouter() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"}],\"name\":\"addQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaultsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"truePriceTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"computeProfitMaximizingTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutPerInflatedTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeOnTokenOutTransferBIPS\",\"type\":\"uint256\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_viralswapRouter02\",\"type\":\"address\"}],\"name\":\"updateRouterInVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToWithdraw\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20FromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ViralswapFactory", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000b6f297fcc9026c3130dfc48f6be4b4235db08bab", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}