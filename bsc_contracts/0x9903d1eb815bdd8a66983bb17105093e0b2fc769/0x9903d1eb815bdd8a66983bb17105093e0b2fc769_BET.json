{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"TOKEN.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\r\\n\\r\\n    pragma solidity ^0.6.12;\\r\\n\\r\\n    import \\\"./IERC20.sol\\\";\\r\\n    import \\\"./SafeMath.sol\\\";\\r\\n    import \\\"./Address.sol\\\";\\r\\n    import \\\"./Context.sol\\\";\\r\\n    import \\\"./Ownable.sol\\\";\\r\\n\\r\\n    contract BET is Context, IERC20, Ownable {\\r\\n\\r\\n        using SafeMath for uint256;\\r\\n        using Address for address;\\r\\n\\r\\n        mapping (address =\\u003e uint256) private _rOwned;\\r\\n        mapping (address =\\u003e uint256) private _tOwned;\\r\\n        mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n        mapping (address =\\u003e bool) private _isExcluded;\\r\\n        address[] private _excluded;\\r\\n\\r\\n        mapping (address =\\u003e bool) public whiteList;\\r\\n    \\r\\n        uint256 private constant MAX = ~uint256(0);\\r\\n        uint256 private  _tTotal = 1000000000 * 10**18;\\r\\n        uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n        uint256 private _tFeeTotal;\\r\\n        \\r\\n        uint256 private _tBurnTotal;\\r\\n\\r\\n        string private _name = \\u0027BET\\u0027;\\r\\n        string private _symbol = \\u0027BET\\u0027; \\r\\n        uint8 private _decimals = 18;\\r\\n        \\r\\n        \\r\\n        address public _holdAddress = 0x000000006f75f9aece7784B0EDA949463797D83E;\\r\\n\\r\\n        address public _burnAddress = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n\\r\\n        mapping(address =\\u003e bool) private _isExcludedFromFee;\\r\\n        \\r\\n        \\r\\n        uint256 public _taxFee = 0;\\r\\n        uint256 public _buildFee = 0;\\r\\n        uint256 public _liqFee = 0;\\r\\n        uint256 public _holdFee = 0;\\r\\n        uint256 public _burnFee = 0;\\r\\n\\r\\n        constructor () public {\\r\\n            _rOwned[_msgSender()] = _rTotal;\\r\\n            \\r\\n            _isExcludedFromFee[owner()] = true;\\r\\n            _isExcludedFromFee[address(this)] = true;\\r\\n            \\r\\n            emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n        }\\r\\n\\r\\n        function name() public view returns (string memory) {\\r\\n            return _name;\\r\\n        }\\r\\n\\r\\n        function symbol() public view returns (string memory) {\\r\\n            return _symbol;\\r\\n        }\\r\\n\\r\\n        function decimals() public view returns (uint8) {\\r\\n            return _decimals;\\r\\n        }\\r\\n\\r\\n        function totalSupply() public view override returns (uint256) {\\r\\n            return _tTotal;\\r\\n        }\\r\\n\\r\\n        function balanceOf(address account) public view override returns (uint256) {\\r\\n            if (_isExcluded[account]) return _tOwned[account];\\r\\n            return tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n\\r\\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n            _transfer(_msgSender(), recipient, amount);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n            return _allowances[owner][spender];\\r\\n        }\\r\\n\\r\\n        function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n            _approve(_msgSender(), spender, amount);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n            _transfer(sender, recipient, amount);\\r\\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        function isExcluded(address account) public view returns (bool) {\\r\\n            return _isExcluded[account];\\r\\n        }\\r\\n\\r\\n        function totalFees() public view returns (uint256) {\\r\\n            return _tFeeTotal;\\r\\n        }\\r\\n        \\r\\n        function totalBurn() public view returns (uint256) {\\r\\n            return _tBurnTotal;\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n            require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n            uint256 currentRate =  _getRate();\\r\\n            return rAmount.div(currentRate);\\r\\n        }\\r\\n\\r\\n        function excludeAccount(address account) external onlyOwner() {\\r\\n            require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n            if(_rOwned[account] \\u003e 0) {\\r\\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n            }\\r\\n            _isExcluded[account] = true;\\r\\n            _excluded.push(account);\\r\\n        }\\r\\n\\r\\n        function includeAccount(address account) external onlyOwner() {\\r\\n            require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n            for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n                if (_excluded[i] == account) {\\r\\n                    _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                    _tOwned[account] = 0;\\r\\n                    _isExcluded[account] = false;\\r\\n                    _excluded.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        function setWhiteList(address[] memory list) public onlyOwner {\\r\\n            for(uint8 i=0;i\\u003clist.length;i++){\\r\\n                whiteList[list[i]] = true;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n\\r\\n        function _approve(address owner, address spender, uint256 amount) private {\\r\\n            require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n            require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n            _allowances[owner][spender] = amount;\\r\\n            emit Approval(owner, spender, amount);\\r\\n        }\\r\\n\\r\\n        function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n            require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n            require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n            require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n            \\r\\n            _transferStandard(sender, recipient, amount);\\r\\n            \\r\\n        }\\r\\n\\r\\n        struct CalculateRes {\\r\\n            uint256 rAmount;\\r\\n            uint256 rTransferAmount;\\r\\n            uint256 rFee;\\r\\n            uint256 tTransferAmount;\\r\\n            uint256 tFee;\\r\\n            uint256 tBuild;\\r\\n            uint256 tLiq;\\r\\n            uint256 tHold;\\r\\n        }\\r\\n\\r\\n        function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n            uint256 currentRate =  _getRate();\\r\\n            uint256 rAmount = tAmount.mul(currentRate);\\r\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);  \\r\\n            emit Transfer(sender, recipient, tAmount);\\r\\n        }\\r\\n\\r\\n        function addTotalSupply(uint256 tAmount) public onlyOwner {\\r\\n            // uint256 currentRate =  _getRate();\\r\\n            // uint256 rAmount = tAmount.mul(currentRate);\\r\\n            _tTotal = _tTotal.add(tAmount);\\r\\n            // _tTotal = _tTotal.add(tAmount);\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n        function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n            return _amount.mul(_taxFee).div(\\r\\n                10 ** 2\\r\\n            );\\r\\n        }\\r\\n\\r\\n        function calculateBuildFee(address sender,uint256 _amount) private view returns (uint256) {\\r\\n            uint256  fee = _buildFee;\\r\\n            if(whiteList[sender]){\\r\\n                fee = 0;\\r\\n            }\\r\\n            return _amount.mul(fee).div(\\r\\n                10**2\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        function calculateLiqFee(address sender,uint256 _amount) private view returns (uint256) {\\r\\n            uint256  fee = _liqFee;\\r\\n            if(whiteList[sender]){\\r\\n                fee = 0;\\r\\n            }\\r\\n            return _amount.mul(fee).div(\\r\\n                10 ** 2\\r\\n            );\\r\\n        }\\r\\n\\r\\n        function calculateHoldFee(address sender,uint256 _amount) private view returns (uint256) {\\r\\n            uint256  fee = _holdFee.div(2);\\r\\n            if(whiteList[sender]){\\r\\n                fee = 0;\\r\\n            }\\r\\n            return _amount.mul(fee).div(\\r\\n                10 ** 2\\r\\n            );\\r\\n        }\\r\\n\\r\\n        function calculateBurnFee(address sender,uint256 _amount) private view returns (uint256) {\\r\\n            uint256  fee = _burnFee;\\r\\n            if(whiteList[sender]){\\r\\n                fee = 0;\\r\\n            }\\r\\n            return _amount.mul(fee).div(\\r\\n                10 ** 2\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        \\r\\n        function excludeFromFee(address account) public onlyOwner {\\r\\n            _isExcludedFromFee[account] = true;\\r\\n        }\\r\\n\\r\\n        function includeInFee(address account) public onlyOwner {\\r\\n            _isExcludedFromFee[account] = false;\\r\\n        }\\r\\n        \\r\\n\\r\\n        function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {\\r\\n            _rTotal = _rTotal.sub(rFee).sub(rBurn);\\r\\n            _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n            _tBurnTotal = _tBurnTotal.add(tBurn);\\r\\n            \\r\\n            _tTotal = _tTotal.sub(tBurn);\\r\\n        }\\r\\n        \\r\\n        \\r\\n\\r\\n        function _getValues(address sender,uint256 tAmount) private view returns (CalculateRes memory){\\r\\n            (uint256 tTransferAmount, uint256 tFee, uint256 tBuild, uint256 tLiq, uint256 tHold) = _getTValues(sender,tAmount);\\r\\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBuild, tLiq);\\r\\n            CalculateRes memory calu = CalculateRes(rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBuild,  tLiq,tHold);\\r\\n            return calu;\\r\\n        }\\r\\n\\r\\n        function _getTValues(address sender,uint256 tAmount) private view returns (uint256, uint256,uint256, uint256,uint256) {\\r\\n            uint256 tFee = calculateTaxFee(tAmount);\\r\\n            uint256 tBuild = calculateBuildFee(sender,tAmount);\\r\\n            uint256 tLiq = calculateLiqFee(sender,tAmount);\\r\\n            uint256 tHold = calculateHoldFee(sender,tAmount);\\r\\n            \\r\\n            uint256 tTransferAmount = tAmount.sub(tFee).sub(tBuild);\\r\\n            tTransferAmount = tTransferAmount.sub(0).sub(tLiq);\\r\\n            return (tTransferAmount, tFee, tBuild, tLiq,tHold);\\r\\n        }\\r\\n\\r\\n        function _getRValues(uint256 tAmount, uint256 tFee, uint256 tBuild, uint256 tFund) private view returns (uint256, uint256, uint256) {\\r\\n            \\r\\n            uint256 currentRate =  _getRate();\\r\\n            \\r\\n            uint256 rAmount = tAmount.mul(currentRate);\\r\\n            uint256 rFee = tFee.mul(currentRate);\\r\\n            uint256 rBurn = tBuild.mul(currentRate);\\r\\n            uint256 rFund = tFund.mul(currentRate);\\r\\n            uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rFund);\\r\\n            return (rAmount, rTransferAmount, rFee);\\r\\n        }\\r\\n\\r\\n        function _getRate() private view returns(uint256) {\\r\\n            (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n            return rSupply.div(tSupply);\\r\\n        }\\r\\n\\r\\n        function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n            uint256 rSupply = _rTotal;\\r\\n            uint256 tSupply = _tTotal;      \\r\\n            for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n                if (_rOwned[_excluded[i]] \\u003e rSupply || _tOwned[_excluded[i]] \\u003e tSupply) return (_rTotal, _tTotal);\\r\\n                rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n                tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n            }\\r\\n            if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n            return (rSupply, tSupply);\\r\\n        }\\r\\n    }\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buildFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_holdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_holdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"addTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BET", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4fbba80b142f79cf06693a06788d180d795ae60aaa079121dfe16a39da2cc40a"}