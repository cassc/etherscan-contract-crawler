{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function getSupNodes() external view returns (address[] memory);\r\n    function getNodes() external view returns (address[] memory);\r\n    // function getMappingCount() external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function sync() external;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                set._indexes[lastvalue] = valueIndex;\r\n            }\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\ncontract Pool {\r\n    constructor(address _father, address reToken){\r\n        IERC20(reToken).approve(_father, 2**256 - 1);\r\n    }\r\n}\r\ncontract old{\r\n    mapping(address => address) public invite;\r\n    mapping(address => uint256) public invitecounts;\r\n    mapping(address => bool) public _nodefirst;\r\n}\r\n\r\ncontract GDCTOKEN is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n    uint256 private _tTotal;\r\n    address public _uniswapV2Pair;\r\n    address public _token;\r\n    uint256 public _startTimeForSwap;\r\n    uint256 public _intervalSecondsForSwap;\r\n    uint256 public _currentIndex;\r\n    mapping(address => bool) public _isDividendExempt;\r\n    mapping(address => bool) public _nodefirst;\r\n    uint256 public _minPeriod;\r\n    mapping(address => uint256) public addLPTime;\r\n    mapping(address => uint256) public addLPAmount;\r\n    mapping(address => address) public invite;\r\n    mapping(address => uint256) public invitecounts;\r\n    mapping(address => mapping(address => uint256)) private invitefirst;\r\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) public  userpool;\r\n    uint256 public _tokenpool;\r\n    uint256 public _outpool;\r\n    mapping(uint256 => uint256) public _price;\r\n    mapping(uint256 => uint256) public _shareRate;\r\n    mapping(uint256 => uint256) public _supnodepool;\r\n    bool public _swapenable;\r\n    uint256 public _lastburntime;\r\n    uint256 public _swapoutpool;\r\n    uint256 public _swapuserpool;\r\n    uint256 public _swapinamount;\r\n    address public _operator;\r\n    address public router;\r\n    address public _middlepool;\r\n    address public _remainpool;\r\n    uint256 public ddd = 300000e18;\r\n    uint256 public recieveTime = 3;\r\n    address admin = 0x12c5446ad3330b253BE60A97274425507503b8C4;\r\n    \r\n    EnumerableSet.AddressSet _shareholders;\r\n    EnumerableSet.AddressSet _suppernodes;\r\n    EnumerableSet.AddressSet _nodes;\r\n    EnumerableSet.AddressSet _deletelist;\r\n\r\n    constructor() {\r\n        router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        _token = 0x55d398326f99059fF775485246999027B3197955;\r\n        _operator = 0xB8db8bD54c21b0a1E75C8c82aDda1151348A9508;\r\n        transferOwnership(admin);\r\n        setShareRate();\r\n        _name = \"GDC\";\r\n        _symbol = \"GDC\";\r\n        _decimals = uint8(18);\r\n        _tTotal = 210000000 * (10**uint256(_decimals));\r\n        _intervalSecondsForSwap = 60 * 24 * 3600;\r\n        _minPeriod = 24 * 3600;\r\n        _tOwned[admin] = 20000000 * (10**uint256(_decimals));\r\n        _tOwned[address(this)] = 190000000 * (10**uint256(_decimals));\r\n        _swapoutpool = 800 * (10**uint256(_decimals));\r\n        _swapinamount = 300 * (10**uint256(_decimals));\r\n        emit Transfer(address(0), admin, _tTotal);\r\n        Pool son = new Pool(address(this), _token);\r\n        Pool som = new Pool(address(this),_token);\r\n        _middlepool = address(son);\r\n        _remainpool = address(som);\r\n        \r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[_middlepool] = true;\r\n        _isDividendExempt[_remainpool] = true;\r\n        _isDividendExempt[_operator] = true;\r\n        _isDividendExempt[admin] = true;\r\n        _isDividendExempt[address(0)] = true;\r\n        _isDividendExempt[address(0xdead)] = true;\r\n        _isDividendExempt[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        if(msg.value >= 4 *10**18){\r\n            _suppernodes.add(msg.sender);\r\n        }\r\n        if(msg.value >= 8 *10**17){\r\n            _nodes.add(msg.sender);\r\n        }\r\n        uint256 usdtBalance = IERC20(_token).balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = _token;\r\n        IUniswapV2Pair(router).swapExactETHForTokens{value:msg.value}( 1, path, address(this), block.timestamp + 100 );\r\n        if(invite[msg.sender] != address(0) && (_suppernodes.contains(invite[msg.sender]) || _nodes.contains(invite[msg.sender]))){\r\n            IERC20(_token).transfer(invite[msg.sender], (IERC20(_token).balanceOf(address(this)).sub(usdtBalance)).mul(20).div(100));\r\n        }\r\n    }\r\n    function getusdt()external onlyOwner {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner(), amount);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (_startTimeForSwap == 0 && msg.sender == router){\r\n            _startTimeForSwap = block.timestamp;\r\n            _uniswapV2Pair = recipient;\r\n            _isDividendExempt[_uniswapV2Pair] = true;\r\n            IERC20(address(this)).approve(router, _tTotal);\r\n            _basicTransfer(sender, recipient, amount);\r\n        }else{\r\n            _transfer(sender, recipient, amount);\r\n        }\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 txamount = 0;\r\n            if (from == _uniswapV2Pair && !_isDividendExempt[to]) {\r\n                if (isRemoveLiquidity()){\r\n                    if(_nodefirst[to] && getprice( address(this), _token, 1e18) < 1e18){\r\n                        txamount = amount.mul(9999).div(10000);\r\n                        _basicTransfer(from, address(0xdead), txamount);\r\n                    }\r\n                    removenode(to);\r\n                } else {\r\n                    require(_enMint);\r\n                    txamount = amount.mul(5).div(100);\r\n                    _setmintdata(to, txamount, 1,from);\r\n                }\r\n            }else if (to == _uniswapV2Pair && !_isDividendExempt[from]) {\r\n                if (isAddLiquidity()) {\r\n                    if(!_enMint){\r\n                        _nodefirst[from] = true;\r\n                    }\r\n                    uint256 amountU = getlpforu();\r\n                    uint256 amountlp = getaddlp(amountU,amount);  \r\n                    if(amountlp > 50*10**18){\r\n                        _shareholders.add(from);\r\n                        addLPTime[from] = block.timestamp;\r\n                        addLPAmount[from] = addLPAmount[from].add(amountlp);\r\n                    }\r\n                } else {\r\n                    require(_enMint);\r\n                    txamount = amount.mul(5).div(100);\r\n                    _setmintdata(from, txamount, 2,from);\r\n                }\r\n            }\r\n        if (_enMint) {\r\n            shareinfo(from,to);\r\n        }\r\n        if(to == _remainpool){\r\n            _swapmint(from);\r\n        }\r\n        if (!_isDividendExempt[from] && !_isDividendExempt[to]) {\r\n            if (invite[to] == address(0) && from != to){\r\n                invitefirst[from][to] = amount;\r\n            }\r\n        }\r\n        if ( invite[from] == address(0) && invitefirst[to][from] > 0 && invitecounts[from] == 0 ) {\r\n            invite[from] = to;\r\n            invitecounts[to] = invitecounts[to].add(1);\r\n        }\r\n        _basicTransfer(from, to, amount.sub(txamount));\r\n    }\r\n\r\n    uint256 public lastClaimTime;\r\n    uint256 public totalMint;\r\n    mapping(uint256 => uint256) public theDayMint;\r\n    bool public _enMint = false;\r\n\r\n    function setEnMint(bool val) external onlyOwner {\r\n        _enMint = val;\r\n        _lastburntime = block.timestamp;\r\n    }\r\n    function setShareRate() private  {\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            if( i == 0 ){\r\n                _shareRate[i] = 40;\r\n            }else if( i == 1 ){\r\n                _shareRate[i] = 30;\r\n            }else if( i == 2 ){\r\n                _shareRate[i] = 15;\r\n            }else{\r\n                _shareRate[i] = 3;\r\n            }\r\n        }\r\n    }\r\n    function setMinTime(uint256 val) external onlyOwner {\r\n        _startTimeForSwap = val;\r\n    }\r\n    function setRecieveTime(uint256 val) external onlyOwner {\r\n        recieveTime = val;\r\n    }\r\n    function setMappingVal(address[] memory Holder,address oldToken) external onlyOwner {\r\n        address user;\r\n        uint256 amount;\r\n        old p;\r\n        p = old(oldToken);\r\n        for (uint256 i = 0; i < Holder.length; i++) {\r\n            user = Holder[i];\r\n            amount = IERC20(oldToken).balanceOf(user);\r\n            if( p.invite(user) != address(0)){\r\n                invite[user] = p.invite(user);\r\n            }\r\n            if(p.invitecounts(user) > 0){\r\n                invitecounts[user] = p.invitecounts(user);\r\n            }\r\n            if(p._nodefirst(user)){\r\n                _nodefirst[user] = true;\r\n            }\r\n            if( amount > 0 ){\r\n                _basicTransfer(admin, user, amount);\r\n            }\r\n        }\r\n    }\r\n    function setMappingNodes(address oldToken) external onlyOwner {\r\n        address[] memory supNode = IERC20(oldToken).getSupNodes();\r\n        for (uint256 i = 0; i < supNode.length; i++) {\r\n            _suppernodes.add(supNode[i]);\r\n        }\r\n        address[] memory Nodes = IERC20(oldToken).getNodes();\r\n        for (uint256 i = 0; i < Nodes.length; i++) {\r\n            _nodes.add(Nodes[i]);\r\n        }\r\n    }\r\n    function setMappingLP(address[] memory Holder,address LPaddress, uint256 amount) external onlyOwner {\r\n        address user;\r\n        for (uint256 i = 0; i < Holder.length; i++) {\r\n            user = Holder[i];\r\n            if(amount > 50e18){\r\n                _shareholders.add(user);\r\n                addLPTime[user] = block.timestamp;\r\n                addLPAmount[user] = addLPAmount[user].add(amount);\r\n            }\r\n            IERC20(LPaddress).transferFrom(msg.sender,user,amount);\r\n        }\r\n    }\r\n\r\n    function getC() public view returns (uint256) {\r\n        return (block.timestamp - _startTimeForSwap) / _minPeriod;\r\n    }\r\n    function isMinner(address user) private  view returns (bool) {\r\n        uint256 num = 100e18;\r\n        if ( (block.timestamp - _startTimeForSwap) / _intervalSecondsForSwap > 0 ) {\r\n            num = num / (((block.timestamp - _startTimeForSwap) / _intervalSecondsForSwap) * 2);\r\n        }\r\n        if (num < 25e18) {\r\n            num = 25e18;\r\n        }\r\n        if(balanceOf(user) >= 1e18 && IERC20(_uniswapV2Pair).balanceOf(user) >= num){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    uint256 public everyDivi = 30;\r\n\r\n    function setEveryDivi(uint256 val) external onlyOwner {\r\n        everyDivi = val;\r\n    }\r\n\r\n    function getHolder() public view returns (address[] memory) {\r\n        return _shareholders.values();\r\n    }\r\n    function getSupNodes() public view override returns (address[] memory) {\r\n        return _suppernodes.values();\r\n    }\r\n    function getNodes() public view override returns (address[] memory) {\r\n        return _nodes.values();\r\n    }\r\n    function getHolder(uint256 i) public view returns (address) {\r\n        return _shareholders.at(i);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount, \"Insufficient Balance\");\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setIsDividendExempt(address addr, bool value) external onlyOwner {\r\n        _isDividendExempt[addr] = value;\r\n    }\r\n    function getaddlp(\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) private  view returns (uint256) {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 totallp = IERC20(_uniswapV2Pair).totalSupply();\r\n        uint256 liquidity;\r\n        if (_token < address(this)) {\r\n            liquidity = Math.min(\r\n                amount0.mul(totallp) / r0,\r\n                amount1.mul(totallp) / r1\r\n            );\r\n        } else {\r\n            liquidity = Math.min(\r\n                amount1.mul(totallp) / r0,\r\n                amount0.mul(totallp) / r1\r\n            );\r\n        }\r\n        return liquidity;\r\n    }\r\n    function getlpforu()\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 r;\r\n        if (_token < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint256 bal = IERC20(_token).balanceOf(_uniswapV2Pair);\r\n        if (bal > r) {\r\n            return bal.sub(r);\r\n        }\r\n        if (r > bal) {\r\n            return r.sub(bal);\r\n        }\r\n        return 0;\r\n    }\r\n    function _swap(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amount,\r\n        address to\r\n    ) private {\r\n        if (tokenA != address(this)) {\r\n            IERC20(tokenA).approve(router, amount);\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        IUniswapV2Pair(router).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path,\r\n            to,\r\n            block.timestamp + 20\r\n        );\r\n    }\r\n\r\n    function outputtoken() private {\r\n        _swap(address(this), _token, _outpool, _middlepool);\r\n        uint256 amount = IERC20(_token).balanceOf(_middlepool);\r\n        if (IERC20(_token).allowance(_middlepool, address(this)) > amount) {\r\n            IERC20(_token).transferFrom(_middlepool, address(this), amount);\r\n        }\r\n        _tokenpool = _tokenpool.sub(_outpool);\r\n    }\r\n\r\n    function removenode(address to) private {\r\n        addLPTime[to] = 0;\r\n        addLPAmount[to] = 0;\r\n        if (_shareholders.contains(to)) _shareholders.remove(to);\r\n    }\r\n\r\n    function isRemoveLiquidity()\r\n        private\r\n        view\r\n        returns (bool isRemove)\r\n    {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 r;\r\n        if (_token < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint256 bal = IERC20(_token).balanceOf(_uniswapV2Pair);\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function isAddLiquidity()\r\n        private\r\n        view\r\n        returns (bool isAdd)\r\n    {\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(_uniswapV2Pair).getReserves();\r\n        uint256 r;\r\n        if (_token < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint256 bal = IERC20(_token).balanceOf(_uniswapV2Pair);\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function getLpTotal() public view returns (uint256) {\r\n        return\r\n            IERC20(_uniswapV2Pair).totalSupply() -\r\n            IERC20(_uniswapV2Pair).balanceOf(\r\n                0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE\r\n            ) -\r\n            IERC20(_uniswapV2Pair).balanceOf(address(0xdead));\r\n    }\r\n\r\n    function getprice( address tokenA, address tokenB, uint256 amount ) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        uint256[] memory pice = IUniswapV2Pair(router).getAmountsOut(\r\n            amount,\r\n            path\r\n        );\r\n        return pice[1];\r\n    }\r\n\r\n    function getMintNum() public view returns (uint256 num) {\r\n        if (_startTimeForSwap == 0 || balanceOf(address(this)) == 0) return 0;\r\n        if ( (block.timestamp - _startTimeForSwap) / _intervalSecondsForSwap == 0 ) {\r\n            num = ddd;\r\n        } else {\r\n            num = ddd / (((block.timestamp - _startTimeForSwap) / _intervalSecondsForSwap) * 2);\r\n        }\r\n        if (num < 75000e18) {\r\n            num = 75000e18;\r\n        }\r\n    }\r\n    function process(uint256 tokenBal) private  {\r\n        uint256 today = getC();\r\n        uint256 amountlp = tokenBal.div(2);        \r\n        if( today == 0 || block.timestamp < (today * 24 * 3600 + _startTimeForSwap + 12 * 3600 )){\r\n            return;\r\n        }\r\n        if (today < lastClaimTime || theDayMint[today] >= amountlp || balanceOf(address(this)) < tokenBal ) {\r\n            return;\r\n        }\r\n        uint256 shareholderCount = _shareholders.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 ss = everyDivi > shareholderCount\r\n            ? shareholderCount\r\n            : everyDivi;\r\n        address user;\r\n\r\n        for (uint256 i; i <= ss; i++) {\r\n            if (today < lastClaimTime) {\r\n                break;\r\n            }\r\n            if (_currentIndex >= shareholderCount) {\r\n                _currentIndex = 0;\r\n                lastClaimTime = today+1;\r\n                totalMint = totalMint.add(tokenBal);\r\n                break;\r\n            }\r\n            user = _shareholders.at(_currentIndex);\r\n\r\n            if(addLPAmount[user] == 0 || IERC20(_uniswapV2Pair).balanceOf(user).mul(100) < addLPAmount[user].mul(99)){\r\n                _currentIndex++;\r\n                continue;\r\n            }\r\n\r\n            uint256 amount = amountlp.mul(addLPAmount[user]).div(getLpTotal());\r\n            if (theDayMint[today] + amount > amountlp) {\r\n                amount = amountlp > theDayMint[today] ? (amountlp - theDayMint[today]) : 0;\r\n            }\r\n\r\n            if ( amount < 1e13 || _isDividendExempt[user] || addLPTime[user] + (26 * 3600) > block.timestamp) {\r\n                _currentIndex++;\r\n                continue;\r\n            }\r\n            _basicTransfer(address(this), user, amount);\r\n\r\n            _takeInviterFee(user, amount);\r\n            \r\n            theDayMint[today] += amount;\r\n            _currentIndex++;\r\n        }\r\n    }\r\n\r\n    function _takeInviterFee( address to, uint256 amount) private {\r\n        address recieveD;\r\n        address recieve = to;\r\n        uint256 feeamount = 0;\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            recieve = invite[recieve];\r\n            if ( recieve != address(0) && isMinner(recieve)) {\r\n                recieveD = recieve;\r\n                feeamount = amount.mul(_shareRate[i]).div(100);\r\n            } else {\r\n                feeamount = 0;\r\n                _tokenpool = _tokenpool.add(amount.mul(_shareRate[i]).div(100));\r\n            }\r\n            if (feeamount > 0) {\r\n                _basicTransfer(address(this), recieveD, feeamount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function tokenpoolout() private {\r\n        uint256 tokenpoolU = getprice(address(this), _token, _tokenpool);\r\n\r\n        if(!_swapenable && tokenpoolU > _swapoutpool && balanceOf(address(this)) > _tokenpool){\r\n            _outpool = _tokenpool.div(8);\r\n            _swapenable = true;\r\n        }\r\n        if(_swapenable && (balanceOf(address(this)) < _outpool || _tokenpool < _outpool)){\r\n            _swapenable = false;\r\n        }\r\n        if(_swapenable){\r\n            outputtoken();\r\n        }\r\n    }\r\n\r\n    function tokenpoolin() private {\r\n        uint256 myamount = IERC20(_token).balanceOf(address(this));\r\n        if(myamount > _swapinamount){\r\n            _swap( _token, address(this), _swapinamount, address(0xdead) );\r\n        }\r\n    }\r\n\r\n    function tokenpoolenter(uint256 cnow,uint256 pricenow) private {\r\n        if (pricenow > _price[cnow].mul(108).div(100)) {\r\n            tokenpoolout();\r\n        } else if (pricenow < _price[cnow].mul(97).div(100) && pricenow > _price[cnow].mul(90).div(100)) {\r\n            tokenpoolin();\r\n        } else {\r\n            _swapenable = false;\r\n        }\r\n    }\r\n\r\n    function shareinfo(address from, address to) private {\r\n        uint256 cnow = getC();\r\n        uint256 pricenow = getprice( address(this), _token, 1 * (10**uint256(_decimals)));        \r\n        if (_price[cnow] == 0) {\r\n            _price[cnow] = pricenow;\r\n            _swapenable = false;\r\n            address user;\r\n            for (uint256 i = 0; i < _shareholders.length(); i++) {\r\n                user = _shareholders.at(i);\r\n                if(IERC20(_uniswapV2Pair).balanceOf(user).mul(100) < addLPAmount[user].mul(99)){\r\n                    removenode(user);\r\n                }\r\n            }\r\n            if(_supnodepool[cnow -1 ] > 1e18 && balanceOf(_remainpool) > _supnodepool[cnow -1 ]){\r\n                for (uint256 i = 0; i < _suppernodes.length(); i++) {\r\n                    _basicTransfer(_remainpool, _suppernodes.at(i), _supnodepool[cnow -1 ].div(_suppernodes.length()));\r\n                }\r\n            }\r\n        }\r\n        if (!_isDividendExempt[from] && !_isDividendExempt[to]) {\r\n            uint256 uniswapamount = balanceOf(_uniswapV2Pair);\r\n            if( (block.timestamp - _lastburntime) > recieveTime * 3600 && _tokenpool < (uniswapamount.mul(3).div(100))){\r\n                _basicTransfer(_uniswapV2Pair, _operator, uniswapamount.mul(3).div(1000));\r\n                _basicTransfer(_uniswapV2Pair, address(this), uniswapamount.mul(7).div(1000));\r\n                _tokenpool = _tokenpool.add(uniswapamount.mul(7).div(1000));\r\n                IUniswapV2Pair(_uniswapV2Pair).sync();\r\n                _lastburntime = block.timestamp;\r\n            }\r\n            tokenpoolenter(cnow,pricenow);\r\n        }\r\n\r\n        uint256 lpBal = getMintNum();\r\n        if (lpBal > 0 && from != address(this) && totalMint.add(lpBal) < 190000000e18 && pricenow > _price[cnow].mul(103).div(100)) {\r\n            process(lpBal);\r\n        }\r\n    }\r\n\r\n    function _setmintdata( address owner, uint256 amount, uint256 freetype,address from) private  {\r\n        uint256 usamount = getprice( address(this), _token, amount);\r\n        userpool[owner][getC()][freetype] = userpool[owner][getC()][freetype].add(usamount);\r\n        userpool[owner][getC()][freetype.add(2)] = userpool[owner][getC()][freetype.add(2)].add(amount);\r\n        (address nodeown, uint256 level) = _getpuser(owner,1);\r\n        uint256 amounted = 0;\r\n        if(nodeown != address(0)){\r\n            if(level == 2){\r\n                amounted = amounted + amount.mul(60).div(100);\r\n                _basicTransfer(from, nodeown, amount.mul(60).div(100));\r\n            }else{\r\n                (address supnodeown,) = _getpuser(nodeown,2);\r\n                if(supnodeown != address(0)){\r\n                    amounted = amounted + amount.mul(40).div(100);\r\n                    _basicTransfer(from, supnodeown, amount.mul(40).div(100));\r\n                }\r\n                amounted = amounted + amount.mul(20).div(100);\r\n                _basicTransfer(from, nodeown, amount.mul(20).div(100));\r\n            }\r\n        }\r\n        if(amount.mul(60).div(100) > amounted){\r\n            _supnodepool[getC()] = _supnodepool[getC()].add(amount.mul(60).div(100).sub(amounted));\r\n        }\r\n        _basicTransfer(from, _remainpool, amount.sub(amounted));\r\n    }\r\n\r\n    function _getpuser( address owner, uint256 freetype ) private view returns (address,uint256) {\r\n        address puser = address(0);\r\n        address nuser = owner;\r\n        uint256 level = 0;\r\n        while (puser == address(0) && nuser != address(0)){\r\n            nuser = invite[nuser];\r\n            if (_nodes.contains(nuser) && freetype == 1){\r\n                puser = nuser;\r\n                level = 1;\r\n            }\r\n            if (_suppernodes.contains(nuser)){\r\n                puser = nuser;\r\n                level = 2;\r\n            }\r\n        }\r\n        return (puser,level);\r\n    }\r\n    \r\n    function _swapmint(address owner) private {\r\n        uint256 amount = 0;\r\n        uint256 add =0;\r\n        uint256 usadd =0;\r\n        uint256 usnow =0;\r\n        uint256 toknow =0;\r\n        for (uint256 i = 0; i < getC().sub(8); i++) {\r\n            usadd = userpool[owner][i][1];\r\n            add = userpool[owner][i][3];\r\n            if( usadd > 0 ){\r\n                usnow = getprice( address(this), _token, add);\r\n                if(usnow > usadd.mul(3)){\r\n                    usadd = usadd.mul(3);\r\n                }else if(usnow > usadd.mul(2)){\r\n                    usadd = usadd.mul(2);\r\n                }\r\n                toknow = getprice( _token, address(this), usadd);\r\n                if(balanceOf(_remainpool) > amount.add(toknow)){\r\n                    amount = amount.add(toknow);\r\n                    userpool[owner][i][1] = 0;\r\n                }\r\n            }\r\n        }\r\n        for (uint256 i = 0; i < getC().sub(16); i++) {\r\n            usadd = userpool[owner][i][2];\r\n            add = userpool[owner][i][4];\r\n            if( usadd > 0 ){\r\n                usnow = getprice( address(this), _token, add);\r\n                if(usnow > usadd.mul(3)){\r\n                    usadd = usadd.mul(3);\r\n                }else if(usnow > usadd.mul(2)){\r\n                    usadd = usadd.mul(2);\r\n                }\r\n                toknow = getprice( _token, address(this), usadd);\r\n                if(balanceOf(_remainpool) > amount.add(toknow)){\r\n                    amount = amount.add(toknow);\r\n                    userpool[owner][i][2] = 0;\r\n                }\r\n            }\r\n        }\r\n        if(amount > 0){\r\n            _basicTransfer(_remainpool, owner, amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastburntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_middlepool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nodefirst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_outpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_remainpool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_shareRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_supnodepool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapenable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapinamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapoutpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapuserpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everyDivi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invitecounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setEnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setEveryDivi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Holder\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"LPaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMappingLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"}],\"name\":\"setMappingNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Holder\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"}],\"name\":\"setMappingVal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMinTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setRecieveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theDayMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GDCTOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://99bd6f4552dc334dbfa32ee6c41ee6329598c605bc016dd422048fe936d456a6"}