{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ninterface ISwapPair {\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\ninterface ISwapFactory {\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\ncontract ERC20 is IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalCirculation;\r\n    uint256 private _minTotalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function totalCirculation() public view virtual returns (uint256) {\r\n        return _totalCirculation;\r\n    }\r\n    function minTotalSupply() public view virtual returns (uint256) {\r\n        return _minTotalSupply;\r\n    }\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        address to = recipient;\r\n        if (address(1) == recipient) to = address(0);\r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _totalCirculation += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burnSafe(\r\n        address account,\r\n        uint256 amount\r\n    ) internal virtual returns (bool) {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        if (_totalCirculation > _minTotalSupply + amount) {\r\n            _beforeTokenTransfer(account, address(0), amount);\r\n            uint256 accountBalance = _balances[account];\r\n            require(\r\n                accountBalance >= amount,\r\n                \"ERC20: burn amount exceeds balance\"\r\n            );\r\n            unchecked {\r\n                _balances[account] = accountBalance - amount;\r\n                _balances[address(0)] += amount;\r\n            }\r\n            emit Transfer(account, address(0), amount);\r\n            _afterTokenTransfer(account, address(0), amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _balances[address(0)] += amount;\r\n        }\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (to == address(0) && _totalCirculation >= amount) {\r\n            _totalCirculation -= amount;\r\n        }\r\n    }\r\n    function _setMinTotalSupply(uint256 amount) internal {\r\n        _minTotalSupply = amount;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract Distributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\ncontract Dividend is Ownable {\r\n    using Address for address;\r\n    IERC20 private _TOKEN;\r\n    constructor(address token) {\r\n        _TOKEN = IERC20(token);\r\n        _TOKEN.approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n    struct UserInfo {\r\n        bool isExist;\r\n        uint256 amount;\r\n        uint256 dept;\r\n        uint256 balance;\r\n        uint256 rewardTotal;\r\n    }\r\n    struct Statistics {\r\n        uint totalReward;\r\n        uint totalAmount;\r\n        uint rewardPer;\r\n        uint lastRewardBlock;\r\n        uint lastBalance;\r\n        uint userTotal;\r\n        uint lastUser;\r\n    }\r\n    Statistics public statistics;\r\n    mapping(address => UserInfo) public users;\r\n    mapping(uint => address) public userAdds;\r\n    function getUser(\r\n        address account\r\n    ) public view returns (UserInfo memory user, uint256 userBalance) {\r\n        user = users[account];\r\n        if (user.amount > 0) {\r\n            uint256 pending = ((user.amount * statistics.rewardPer) / 1e12) -\r\n                user.dept;\r\n            if (pending > 0) {\r\n                userBalance += pending;\r\n                user.balance += pending;\r\n                user.rewardTotal += pending;\r\n            }\r\n            user.dept = (user.amount * statistics.rewardPer) / 1e12;\r\n        }\r\n    }\r\n    function addAmount(address account, uint256 amount) public onlyOwner {\r\n        if (account.isContract()) return;\r\n        _handleUser(account);\r\n        updateUser(account);\r\n        UserInfo storage user = users[account];\r\n        user.amount += amount;\r\n        user.dept = (user.amount * statistics.rewardPer) / 1e12;\r\n        statistics.totalAmount += amount;\r\n    }\r\n    function subAmount(address account, uint256 amount) public onlyOwner {\r\n        if (account.isContract()) return;\r\n        _handleUser(account);\r\n        updateUser(account);\r\n        UserInfo storage user = users[account];\r\n        if (user.amount > amount) user.amount -= amount;\r\n        else user.amount = 0;\r\n        user.dept = (user.amount * statistics.rewardPer) / 1e12;\r\n        if (statistics.totalAmount >= amount) statistics.totalAmount -= amount;\r\n        else statistics.totalAmount = 0;\r\n    }\r\n    function clearAmount(address account) public onlyOwner {\r\n        if (account.isContract()) return;\r\n        _handleUser(account);\r\n        updateUser(account);\r\n        UserInfo storage user = users[account];\r\n        if (statistics.totalAmount >= user.amount)\r\n            statistics.totalAmount -= user.amount;\r\n        else statistics.totalAmount = 0;\r\n        user.amount = 0;\r\n        user.dept = (user.amount * statistics.rewardPer) / 1e12;\r\n    }\r\n    function updatePool(uint256 reward) public onlyOwner {\r\n        statistics.totalReward += reward;\r\n        if (statistics.totalAmount == 0) statistics.rewardPer += reward * 1e12;\r\n        else statistics.rewardPer += ((reward * 1e12) / statistics.totalAmount);\r\n        statistics.lastRewardBlock = block.number;\r\n    }\r\n    function sendReward(uint times) public {\r\n        for (uint256 i = 0; i < times; i++) {\r\n            if (_TOKEN.balanceOf(address(this)) == 0) break;\r\n            address account = userAdds[statistics.lastUser];\r\n            sendUserReward(account);\r\n            statistics.lastUser++;\r\n            if (statistics.lastUser >= statistics.userTotal) {\r\n                statistics.lastUser = 0;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function sendUserReward(address account) public {\r\n        if (account.isContract()) return;\r\n        updateUser(account);\r\n        if (users[account].balance == 0) return;\r\n        if (_TOKEN.balanceOf(address(this)) >= users[account].balance) {\r\n            _TOKEN.transfer(account, users[account].balance);\r\n            users[account].balance = 0;\r\n        } else {\r\n            users[account].balance -= _TOKEN.balanceOf(address(this));\r\n            _TOKEN.transfer(account, _TOKEN.balanceOf(address(this)));\r\n        }\r\n        statistics.lastBalance = _TOKEN.balanceOf(address(this));\r\n    }\r\n    function updateUser(address account) public {\r\n        if (account.isContract()) return;\r\n        if (users[account].amount > 0) {\r\n            UserInfo storage user = users[account];\r\n            uint256 pending = ((user.amount * statistics.rewardPer) / 1e12) -\r\n                user.dept;\r\n            if (pending > 0) {\r\n                user.balance += pending;\r\n                user.rewardTotal += pending;\r\n            }\r\n            user.dept = (user.amount * statistics.rewardPer) / 1e12;\r\n        }\r\n    }\r\n    function _handleUser(address account) private {\r\n        if (!users[account].isExist) {\r\n            UserInfo storage user = users[account];\r\n            user.isExist = true;\r\n            userAdds[statistics.userTotal] = account;\r\n            statistics.userTotal++;\r\n        }\r\n    }\r\n}\r\ncontract BTCC is ERC20, Ownable {\r\n    using Address for address;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isDividedExempt;\r\n    mapping(address => bool) public isSwapExempt;\r\n    uint public lpSurplus;\r\n    uint public lpTotal;\r\n    uint public holdSurplus;\r\n    uint public holdTotal;\r\n    uint public dividendTimes = 10;\r\n    address public manager;\r\n    address public market;\r\n    address public team;\r\n    address public swapPair;\r\n    ISwapRouter public swapRouter;\r\n    IERC20 private _USDT;\r\n    IERC20 private _SHIB;\r\n    Distributor internal _distributor;\r\n    Dividend internal _dividend;\r\n    bool _inSwapAndLiquify;\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n    event CreateContract(uint category, address add);\r\n    constructor() ERC20(\"BTCC\", \"BTCC\") {\r\n        address recieve = 0xD2924f5F9543C7DC8CD2dDE7B9103dd9B213E91f;\r\n        manager = 0x7322453C5EdE99581B32c3bAB60E5799143260be;\r\n        market = 0x6b5fd01585bD455ab74c79d8110839d99D330936;\r\n        team = 0xB4B4682f0085DF098dE27373ca57D1A57a82E7B7;\r\n        _USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        _SHIB = IERC20(0x2859e4544C4bB03966803b044A93563Bd2D0DD4D);\r\n        swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        swapPair = pairFor(swapRouter.factory(), address(this), address(_USDT));\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[market] = true;\r\n        isFeeExempt[team] = true;\r\n        isFeeExempt[recieve] = true;\r\n        isDividedExempt[address(0)] = true;\r\n        isDividedExempt[address(1)] = true;\r\n        isDividedExempt[swapPair] = true;\r\n        isDividedExempt[recieve] = true;\r\n        _distributor = new Distributor(address(_USDT));\r\n        emit CreateContract(0, address(_distributor));\r\n        _dividend = new Dividend(address(_SHIB));\r\n        emit CreateContract(1, address(_dividend));\r\n        _mint(recieve, 1000_0000_0000_0000 * 10 ** decimals());\r\n        renounceOwnership();\r\n    }\r\n    function withdrawToken(IERC20 token, uint256 amount) public {\r\n        if (manager == _msgSender()) {\r\n            token.transfer(msg.sender, amount);\r\n        }\r\n    }\r\n    function setMinTotalSupply(uint256 amount) public {\r\n        if (manager == _msgSender()) {\r\n            _setMinTotalSupply(amount);\r\n        }\r\n    }\r\n    function setManager(address account) public {\r\n        if (manager == _msgSender()) {\r\n            manager = account;\r\n        }\r\n    }\r\n    function setMarket(address _market, address _team, uint times) public {\r\n        if (manager == _msgSender()) {\r\n            market = _market;\r\n            team = _team;\r\n            dividendTimes = times;\r\n        }\r\n    }\r\n    function setSwapPair(address data) public {\r\n        if (manager == _msgSender()) {\r\n            swapPair = data;\r\n        }\r\n    }\r\n    function setSwapRouter(address router) public {\r\n        if (manager == _msgSender()) {\r\n            swapRouter = ISwapRouter(router);\r\n        }\r\n    }\r\n    function setIsFeeExempt(address account, bool newValue) public {\r\n        if (manager == _msgSender()) {\r\n            isFeeExempt[account] = newValue;\r\n        }\r\n    }\r\n    function setIsSwapExempt(address account, bool newValue) public {\r\n        if (manager == _msgSender()) {\r\n            isSwapExempt[account] = newValue;\r\n        }\r\n    }\r\n    function setIsDividedExempt(address account, bool newValue) public {\r\n        if (manager == _msgSender()) {\r\n            isDividedExempt[account] = newValue;\r\n            if (newValue) {\r\n                _dividend.clearAmount(account);\r\n            } else {\r\n                _dividend.addAmount(account, balanceOf(account));\r\n            }\r\n        }\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if (_inSwapAndLiquify || isFeeExempt[from] || isFeeExempt[to]) {\r\n            super._transfer(from, to, amount);\r\n            if (!isDividedExempt[to]) _dividend.addAmount(to, amount);\r\n        } else if (from == swapPair || to == swapPair) {\r\n            if (!isSwapExempt[from]) {\r\n                require(\r\n                    amount <= (balanceOf(address(from)) * 99) / 100,\r\n                    \"sale limit 99%\"\r\n                );\r\n            }\r\n            uint swapAutoMin = getAutoSwapMin();\r\n            if (\r\n                swapPair != address(0) &&\r\n                to == swapPair &&\r\n                !_inSwapAndLiquify &&\r\n                balanceOf(address(this)) > swapAutoMin * 2\r\n            ) {\r\n                if (holdSurplus > swapAutoMin) _swapToDevidend();\r\n                else _swapAndLiquify();\r\n            }\r\n            if (\r\n                swapPair != address(0) && to == swapPair && !_inSwapAndLiquify\r\n            ) {\r\n                _swapToLP();\r\n            }\r\n            uint256 every = amount / 100;\r\n            super._transfer(from, address(this), every * 12);\r\n            holdSurplus += every * 7;\r\n            holdTotal += every * 7;\r\n            lpSurplus += every * 3;\r\n            lpTotal += every * 3;\r\n            super._burn(from, every);\r\n            super._transfer(from, to, amount - every * 13);\r\n            if (!isDividedExempt[to]) {\r\n                _dividend.addAmount(to, amount - every * 13);\r\n            }\r\n        } else {\r\n            if (!isSwapExempt[from]) {\r\n                require(\r\n                    amount <= (balanceOf(address(from)) * 99) / 100,\r\n                    \"trans limit 99%\"\r\n                );\r\n            }\r\n            super._transfer(from, to, amount);\r\n            if (!isDividedExempt[to]) _dividend.addAmount(to, amount);\r\n            if (swapPair != address(0) && !_inSwapAndLiquify) {\r\n                _swapToLP();\r\n            }\r\n        }\r\n        _dividend.subAmount(from, amount);\r\n        if (dividendTimes > 0) _dividend.sendReward(dividendTimes);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function getPrice() public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(_USDT);\r\n        if (swapPair == address(0)) return 0;\r\n        (uint256 reserve1, uint256 reserve2, ) = ISwapPair(swapPair)\r\n            .getReserves();\r\n        if (reserve1 == 0 || reserve2 == 0) {\r\n            return 0;\r\n        } else {\r\n            return swapRouter.getAmountsOut(1 * 10 ** decimals(), path)[1];\r\n        }\r\n    }\r\n    function swapAndTrans() public {\r\n        if (!_inSwapAndLiquify) {\r\n            _swapToDevidend();\r\n            _swapToLP();\r\n            _swapAndLiquify();\r\n        }\r\n    }\r\n    function getAutoSwapMin() public view returns (uint256) {\r\n        uint256 price = getPrice();\r\n        if (price == 0) {\r\n            return totalSupply();\r\n        } else {\r\n            return (10 * 1e18 * 1e18) / price;\r\n        }\r\n    }\r\n    function getAddLiquidityAmount(uint usdt) public view returns (uint) {\r\n        if (swapPair == address(0)) return 0;\r\n        address token0 = ISwapPair(swapPair).token0();\r\n        (uint256 reserve1, uint256 reserve2, ) = ISwapPair(swapPair)\r\n            .getReserves();\r\n        if (reserve1 == 0 || reserve2 == 0) {\r\n            return 0;\r\n        } else if (token0 == address(this)) {\r\n            return (usdt * reserve1) / reserve2;\r\n        } else if (token0 == address(_USDT)) {\r\n            return (usdt * reserve2) / reserve1;\r\n        } else return 0;\r\n    }\r\n    function _swapToDevidend() private lockTheSwap returns (bool) {\r\n        uint256 amount = balanceOf(address(this));\r\n        if (amount >= holdSurplus && holdSurplus > 0) {\r\n            _swapTokensForSHIB(holdSurplus);\r\n            holdSurplus = 0;\r\n            uint amountSHIB = _SHIB.balanceOf(address(this));\r\n            _dividend.updatePool(amountSHIB);\r\n            _SHIB.transfer(team, amountSHIB);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _swapToLP() private lockTheSwap returns (bool) {\r\n        uint256 amount = balanceOf(address(this));\r\n        if (amount >= lpSurplus && lpSurplus > 0) {\r\n            super._transfer(address(this), swapPair, lpSurplus);\r\n            ISwapPair(swapPair).sync();\r\n            lpSurplus = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _swapAndLiquify() private lockTheSwap returns (bool) {\r\n        uint256 amount = balanceOf(address(this));\r\n        if (_USDT.balanceOf(address(this)) > 1e18 && amount > 0) {\r\n            uint256 amountU = _USDT.balanceOf(address(this));\r\n            _addLiquidityUSDT(amount, amountU);\r\n            return true;\r\n        }\r\n        if (amount > lpSurplus) amount -= lpSurplus;\r\n        else amount = 0;\r\n        if (amount > holdSurplus) amount -= holdSurplus;\r\n        else amount = 0;\r\n        if (amount > 0) {\r\n            uint swapAmount = (amount * 3) / 4;\r\n            address token0 = ISwapPair(swapPair).token0();\r\n            (uint256 reserve0, uint256 reserve1, ) = ISwapPair(swapPair)\r\n                .getReserves();\r\n            uint256 tokenPool = reserve0;\r\n            if (token0 != address(this)) tokenPool = reserve1;\r\n            if (swapAmount > tokenPool / 100) {\r\n                swapAmount = tokenPool / 100;\r\n            }\r\n            _swapTokensForUSDT(swapAmount);\r\n            uint256 amountU = _USDT.balanceOf(address(_distributor));\r\n            _USDT.transferFrom(address(_distributor), address(this), amountU);\r\n            _USDT.transfer(market, (amountU * 2) / 3);\r\n            _addLiquidityUSDT(amount / 4, amountU / 3);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _swapTokensForUSDT(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(_USDT);\r\n        _approve(address(this), address(swapRouter), tokenAmount);\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_distributor),\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n    function _swapTokensForSHIB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = address(_USDT);\r\n        path[2] = address(_SHIB);\r\n        _approve(address(this), address(swapRouter), tokenAmount);\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n    event SwapTokensForTokens(uint256 amountIn, address[] path);\r\n    function _addLiquidityUSDT(\r\n        uint256 tokenAmount,\r\n        uint256 usdtAmount\r\n    ) private {\r\n        super._approve(address(this), address(swapRouter), tokenAmount);\r\n        _USDT.approve(address(swapRouter), usdtAmount);\r\n        swapRouter.addLiquidity(\r\n            address(this),\r\n            address(_USDT),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0,\r\n            0,\r\n            team,\r\n            block.timestamp\r\n        );\r\n        emit AddLiquidity(tokenAmount, usdtAmount);\r\n    }\r\n    event AddLiquidity(uint256 tokenAmount, uint256 ethAmount);\r\n    function sortTokens(\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex\"ff\",\r\n                            factory,\r\n                            keccak256(abi.encodePacked(token0, token1)),\r\n                            hex\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\"\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"CreateContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"name\":\"getAddLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoSwapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividedExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwapExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsDividedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"setSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndTrans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BTCC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1bb4e85a8dd62af7f68a1237391aba6092b855ac5d5d325a5b01ceff782498a9"}