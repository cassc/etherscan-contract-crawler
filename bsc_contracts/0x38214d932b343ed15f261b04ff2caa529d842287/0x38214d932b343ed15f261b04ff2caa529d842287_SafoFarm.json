{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/SafoFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ncontract SafoFarm is ReentrancyGuard {\\n    address payable public OWNER;\\n    address payable public teamWallet;\\n    IERC20 public stakedToken;\\n    IERC20 public rewardToken;\\n\\n    address public APE_ROUTER;\\n    address public TOKEN_WBNB_LP;\\n    address public TOKEN;\\n    address public WETH;\\n\\n    uint public acceptableSlippage = 500;\\n    uint public tokenPerBnb;\\n    bool public tokenBondBonusActive = false;\\n    uint public tokenBondBonus = 1000;\\n    uint public tokensForBondsSupply;\\n    uint public beansFromSoldToken;\\n\\n    struct UserInfo {\\n        uint tokenBalance;\\n        uint bnbBalance;\\n        uint tokenBonds;\\n    }\\n    mapping(address => UserInfo) public addressToUserInfo;\\n    mapping(address => uint) public userStakedBalance;\\n    mapping(address => uint) public userPaidRewards;\\n    mapping(address => uint) public userRewardPerTokenPaid;\\n    mapping(address => uint) public userRewards;\\n    mapping(address => bool) public userStakeAgain;\\n    mapping(address => bool) public userStakeIsReferred;\\n    mapping(address => address) public userReferred;\\n    mapping(address => uint) public referralRewardCount;\\n    mapping(address => uint) public referralIncome;\\n\\n    uint public earlyUnstakeFee = 2000;\\n    uint public poolDuration = 180 days;\\n    uint public poolStartTime;\\n    uint public poolEndTime;\\n    uint public updatedAt;\\n    uint public rewardRate;\\n    uint public rewardPerTokenStored;\\n    uint private _totalStaked;\\n    uint public totalBeansOwed;\\n    uint public totalTokenOwed;\\n    uint public totalLPTokensOwed;\\n    uint public liquidityPercentage = 3000;\\n\\n    uint public referralLimit = 5;\\n    uint public referralPercentage = 2000; // referral percentage is 20%\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        updatedAt = lastTimeRewardApplicable();\\n        if (_account != address(0)) {\\n            userRewards[_account] = earned(_account);\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == OWNER, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Reward(address indexed user, uint256 amount);\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 amount);\\n    event TokenBondsPurchased(\\n        address indexed user,\\n        uint tokenAmount,\\n        uint wbnbAmount,\\n        uint lpAmount\\n    );\\n    event TokenBondSold(\\n        address indexed user,\\n        uint tokenAmount,\\n        uint wbnbAmount\\n    );\\n\\n    receive() external payable {}\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _teamWallet,\\n        address _stakedToken,\\n        address _rewardToken,\\n        address _apeRouter,\\n        address _token,\\n        address _weth,\\n        address _tokenWbnbLp\\n    ) {\\n        OWNER = payable(0x58490A6eD97F8820D8c120dC102F50c638B3C81E);\\n        teamWallet = payable(_teamWallet);\\n        stakedToken = IERC20(_stakedToken);\\n        rewardToken = IERC20(_rewardToken);\\n        APE_ROUTER = _apeRouter;\\n        TOKEN = _token;\\n        WETH = _weth;\\n        TOKEN_WBNB_LP = _tokenWbnbLp;\\n    }\\n\\n    /* ========== Token BOND FUNCTIONS ========== */\\n\\n    function purchaseTokenBond(\\n        address _referralUserAddress\\n    ) external payable nonReentrant {\\n        require(block.timestamp <= poolEndTime, \\\"Pool Ended\\\");\\n        if (userStakeAgain[msg.sender] == false) {\\n            userStakeAgain[msg.sender] = true;\\n            if (\\n                _referralUserAddress != address(0) &&\\n                _referralUserAddress != msg.sender\\n            ) {\\n                userReferred[msg.sender] = _referralUserAddress;\\n                userStakeIsReferred[msg.sender] = true;\\n            }\\n        }\\n\\n        uint256 totalBeans = msg.value;\\n        require(totalBeans > 0, \\\"Purchase amount must be greater than 0\\\");\\n\\n        uint256 beanForLiqudity = (totalBeans * liquidityPercentage) / 10000;\\n        uint256 beanForToken = totalBeans - beanForLiqudity;\\n\\n        uint256 tokensForLiquidity = _beanToToken(beanForLiqudity);\\n        uint256 tokensForUser = _beanToToken(beanForToken);\\n\\n        (bool success, ) = payable(OWNER).call{value: beanForToken}(\\\"\\\");\\n        require(success, \\\"Failed to send BNB\\\");\\n\\n        uint256 tokenMin = _calSlippage(tokensForLiquidity);\\n        uint256 beanMin = _calSlippage(beanForLiqudity);\\n\\n        IERC20(TOKEN).approve(APE_ROUTER, tokensForLiquidity);\\n        (\\n            uint256 _amountA,\\n            uint256 _amountB,\\n            uint256 _liquidity\\n        ) = IUniswapV2Router01(APE_ROUTER).addLiquidityETH{\\n                value: beanForLiqudity\\n            }(\\n                TOKEN,\\n                tokensForLiquidity,\\n                tokenMin,\\n                beanMin,\\n                address(this),\\n                block.timestamp + 500\\n            );\\n\\n        tokensForBondsSupply -= _amountA;\\n\\n        UserInfo memory userInfo = addressToUserInfo[msg.sender];\\n        userInfo.tokenBalance += tokensForUser;\\n        userInfo.bnbBalance += beanForToken;\\n        userInfo.tokenBonds += _liquidity;\\n\\n        totalTokenOwed += tokensForUser;\\n        totalBeansOwed += beanForToken;\\n        totalLPTokensOwed += _liquidity;\\n\\n        addressToUserInfo[msg.sender] = userInfo;\\n        emit TokenBondsPurchased(msg.sender, _amountA, _amountB, _liquidity);\\n        _stake(_liquidity);\\n    }\\n\\n    function redeemTokenBond(uint percentage) external nonReentrant {\\n        require(percentage <= 10000, \\\"Invalid percentage\\\");\\n        require(block.timestamp >= poolEndTime, \\\"Pool is not ended yet\\\");\\n\\n        UserInfo storage userInfo = addressToUserInfo[msg.sender];\\n        uint bnbOwed = (userInfo.bnbBalance * percentage) / 10000;\\n        uint tokenOwed = (userInfo.tokenBalance * percentage) / 10000;\\n        uint tokenBonds = (userInfo.tokenBonds * percentage) / 10000;\\n        require(tokenBonds > 0, \\\"No Tokens to unstake\\\");\\n\\n        userInfo.bnbBalance -= bnbOwed;\\n        userInfo.tokenBalance -= tokenOwed;\\n        userInfo.tokenBonds -= tokenBonds;\\n        addressToUserInfo[msg.sender] = userInfo;\\n\\n        _unstake(tokenBonds);\\n\\n        IERC20(TOKEN_WBNB_LP).approve(APE_ROUTER, tokenBonds);\\n\\n        (uint _amountA, uint _amountB) = IUniswapV2Router01(APE_ROUTER)\\n            .removeLiquidity(\\n                TOKEN,\\n                WETH,\\n                tokenBonds,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 500\\n            );\\n\\n        totalBeansOwed -= bnbOwed;\\n        totalTokenOwed -= tokenOwed;\\n        totalLPTokensOwed -= tokenBonds;\\n\\n        // sending wbnb to the user which recieved from pancakeswap router\\n        IERC20(WETH).transfer(msg.sender, _amountB);\\n        IERC20(TOKEN).transfer(msg.sender, tokenOwed);\\n        tokensForBondsSupply += _amountA;\\n        emit TokenBondSold(msg.sender, _amountA, _amountB);\\n    }\\n\\n    function _calSlippage(uint _amount) private view returns (uint) {\\n        return (_amount * acceptableSlippage) / 10000;\\n    }\\n\\n    function _beanToToken(uint _amount) private returns (uint) {\\n        uint tokenJuice;\\n        uint tokenJuiceBonus;\\n\\n        //confirm token0 & token1 in LP contract\\n        IPancakePair lpContract = IPancakePair(TOKEN_WBNB_LP);\\n\\n        (uint tokenReserves, uint bnbReserves, ) = IPancakePair(lpContract)\\n            .getReserves();\\n\\n        tokenPerBnb = (tokenReserves * 10 ** 18) / bnbReserves;\\n\\n        if (tokenBondBonusActive) {\\n            tokenJuiceBonus = (tokenPerBnb * tokenBondBonus) / 10000;\\n            uint tokenPerBnbDiscounted = tokenPerBnb + tokenJuiceBonus;\\n            tokenJuice = (_amount * tokenPerBnbDiscounted) / 10 ** 18;\\n        } else tokenJuice = (_amount * tokenPerBnb) / 10 ** 18;\\n\\n        require(tokenJuice <= tokensForBondsSupply, \\\"Not Enough Tokens Supply\\\");\\n\\n        tokensForBondsSupply -= tokenJuice;\\n\\n        return tokenJuice;\\n    }\\n\\n    function fundTokenBonds(uint _amount) external onlyOwner {\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\n\\n        tokensForBondsSupply += _amount;\\n        IERC20(TOKEN).transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function defundTokenBonds(uint _amount) external onlyOwner {\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\n        require(_amount <= tokensForBondsSupply, \\\"Not Enough Tokens Supply\\\");\\n        tokensForBondsSupply -= _amount;\\n        IERC20(TOKEN).transfer(msg.sender, _amount);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function _stake(uint _amount) private updateReward(msg.sender) {\\n        require(block.timestamp <= poolEndTime, \\\"Pool Ended\\\");\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\n        userStakedBalance[msg.sender] += _amount;\\n        _totalStaked += _amount;\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function _unstake(uint _amount) private updateReward(msg.sender) {\\n        require(block.timestamp >= poolEndTime, \\\"Tokens Locked\\\");\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\n        require(\\n            _amount <= userStakedBalance[msg.sender],\\n            \\\"Not Enough Lp Tokens To Unstake\\\"\\n        );\\n\\n        userStakedBalance[msg.sender] -= _amount;\\n        _totalStaked -= _amount;\\n        emit Unstaked(msg.sender, _amount);\\n    }\\n\\n    function emergencyUnstake(\\n        uint percentage\\n    ) external nonReentrant updateReward(msg.sender) {\\n        require(block.timestamp <= poolEndTime, \\\"Pool Ended\\\");\\n        require(percentage <= 10000, \\\"Invalid percentage\\\");\\n\\n        UserInfo storage userInfo = addressToUserInfo[msg.sender];\\n\\n        uint bnbOwed = (userInfo.bnbBalance * percentage) / 10000;\\n        uint tokenOwed = (userInfo.tokenBalance * percentage) / 10000;\\n        uint tokenBonds = (userInfo.tokenBonds * percentage) / 10000;\\n        require(tokenBonds > 0, \\\"No Tokens to unstake\\\");\\n\\n        userInfo.bnbBalance -= bnbOwed;\\n        userInfo.tokenBalance -= tokenOwed;\\n        userInfo.tokenBonds -= tokenBonds;\\n        addressToUserInfo[msg.sender] = userInfo;\\n\\n        uint amount = (userStakedBalance[msg.sender] * percentage) / 10000;\\n        require(amount > 0, \\\"No LP Tokens to unstake\\\");\\n\\n        userStakedBalance[msg.sender] -= amount;\\n        _totalStaked -= amount;\\n\\n        IERC20(TOKEN_WBNB_LP).approve(APE_ROUTER, amount);\\n        (uint _amountA, uint _amountB) = IUniswapV2Router01(APE_ROUTER)\\n            .removeLiquidity(\\n                TOKEN,\\n                WETH,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 500\\n            );\\n\\n        totalBeansOwed -= bnbOwed;\\n        totalTokenOwed -= tokenOwed;\\n        totalLPTokensOwed -= tokenBonds;\\n\\n        uint wbnbFee = (_amountB * earlyUnstakeFee) / 10000;\\n        uint bnbOwedAfterFee = _amountB - wbnbFee;\\n        uint tokenFee = (tokenOwed * earlyUnstakeFee) / 10000;\\n        uint tokenOwedAfterFee = tokenOwed - tokenFee;\\n        tokensForBondsSupply += _amountA;\\n\\n        IERC20(WETH).transfer(msg.sender, bnbOwedAfterFee);\\n        IERC20(TOKEN).transfer(msg.sender, tokenOwedAfterFee);\\n        IERC20(WETH).transfer(teamWallet, wbnbFee);\\n        IERC20(TOKEN).transfer(teamWallet, tokenFee);\\n\\n        emit Unstaked(msg.sender, amount);\\n        emit TokenBondSold(msg.sender, _amountA, _amountB);\\n    }\\n\\n    function claimRewards() public nonReentrant updateReward(msg.sender) {\\n        uint rewards = userRewards[msg.sender];\\n        require(rewards > 0, \\\"No Claim Rewards Yet!\\\");\\n        require(\\n            rewards <= tokensForBondsSupply,\\n            \\\"Not Enough Tokens To Distribute Rewards\\\"\\n        );\\n\\n        userRewards[msg.sender] = 0;\\n        userPaidRewards[msg.sender] += rewards;\\n        tokensForBondsSupply -= rewards;\\n        if (userStakeIsReferred[msg.sender] == true) {\\n            if (referralRewardCount[msg.sender] < referralLimit) {\\n                uint referalReward = (rewards * referralPercentage) / 10000;\\n                referralRewardCount[msg.sender] =\\n                    referralRewardCount[msg.sender] +\\n                    1;\\n                referralIncome[userReferred[msg.sender]] += referalReward;\\n                rewardToken.transfer(userReferred[msg.sender], referalReward);\\n                rewardToken.transfer(msg.sender, rewards - referalReward);\\n                emit RewardPaid(userReferred[msg.sender], referalReward);\\n                emit RewardPaid(msg.sender, rewards - referalReward);\\n            } else {\\n                rewardToken.transfer(msg.sender, rewards);\\n                emit RewardPaid(msg.sender, rewards);\\n            }\\n        } else {\\n            rewardToken.transfer(msg.sender, rewards);\\n            emit RewardPaid(msg.sender, rewards);\\n        }\\n    }\\n\\n    /* ========== OWNER RESTRICTED FUNCTIONS ========== */\\n\\n    function setAcceptableSlippage(uint _amount) external onlyOwner {\\n        require(_amount <= 30, \\\"Can't set above 30%\\\");\\n\\n        acceptableSlippage = _amount * 100;\\n    }\\n\\n    function setTokenBondBonus(uint _amount) external onlyOwner {\\n        require(_amount <= 30, \\\"Can't set above 30%\\\");\\n\\n        tokenBondBonus = _amount * 100;\\n    }\\n\\n    function setTokenBondBonusActive(bool _status) external onlyOwner {\\n        tokenBondBonusActive = _status;\\n    }\\n\\n    function setPoolDuration(uint _duration) external onlyOwner {\\n        require(poolEndTime < block.timestamp, \\\"Pool still live\\\");\\n        poolDuration = _duration;\\n    }\\n\\n    function setPoolRewards(\\n        uint _amount\\n    ) external onlyOwner updateReward(address(0)) {\\n        require(_amount > 0, \\\"Invalid Reward Amount\\\");\\n\\n        if (block.timestamp >= poolEndTime) {\\n            rewardRate = (_amount) / poolDuration;\\n        } else {\\n            uint remainingRewards = (poolEndTime - block.timestamp) *\\n                rewardRate;\\n            rewardRate = (_amount + remainingRewards) / poolDuration;\\n        }\\n        require(rewardRate > 0, \\\"Invalid Reward Rate\\\");\\n\\n        poolStartTime = block.timestamp;\\n        poolEndTime = block.timestamp + poolDuration;\\n        updatedAt = block.timestamp;\\n    }\\n\\n    function topUpPoolRewards(\\n        uint _amount\\n    ) external onlyOwner updateReward(address(0)) {\\n        uint remainingRewards = (poolEndTime - block.timestamp) * rewardRate;\\n        rewardRate = (_amount + remainingRewards) / poolDuration;\\n        require(rewardRate > 0, \\\"reward rate = 0\\\");\\n        updatedAt = block.timestamp;\\n    }\\n\\n    function updateTeamWallet(address payable _teamWallet) external onlyOwner {\\n        require(_teamWallet != address(0), \\\"Invalid Address\\\");\\n        teamWallet = _teamWallet;\\n    }\\n\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Invalid Address\\\");\\n        OWNER = payable(_newOwner);\\n    }\\n\\n    function setEarlyUnstakeFee(uint _earlyUnstakeFee) external onlyOwner {\\n        require(_earlyUnstakeFee <= 25, \\\"the amount of fee is too damn high\\\");\\n        earlyUnstakeFee = _earlyUnstakeFee * 100;\\n    }\\n\\n    function setLiquidityPercentage(\\n        uint256 _newLiquidityPercentage\\n    ) external onlyOwner {\\n        require(_newLiquidityPercentage >= 0, \\\"Invalid Liquidity Percentage\\\");\\n        liquidityPercentage = _newLiquidityPercentage * 100;\\n    }\\n\\n    function setReferralPercentage(\\n        uint _newReferralPercentage\\n    ) external onlyOwner {\\n        require(_newReferralPercentage >= 0, \\\"Invalid Referral Percentage\\\");\\n        referralPercentage = _newReferralPercentage * 100;\\n    }\\n\\n    function setReferralLimit(uint _newReferralLimit) external onlyOwner {\\n        require(_newReferralLimit >= 0, \\\"Invalid Referral Limit\\\");\\n        referralLimit = _newReferralLimit;\\n    }\\n\\n    function emergencyRecoverBeans() public onlyOwner {\\n        uint balance = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function emergencyRecoverTokens(\\n        address tokenAddress,\\n        uint _amount\\n    ) external onlyOwner {\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\n        IERC20(tokenAddress).transfer(msg.sender, _amount);\\n    }\\n\\n    /* ========== VIEW & GETTER FUNCTIONS ========== */\\n\\n    function viewUserInfo(address _user) public view returns (UserInfo memory) {\\n        return addressToUserInfo[_user];\\n    }\\n\\n    function earned(address _account) public view returns (uint) {\\n        return\\n            (userStakedBalance[_account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) /\\n            1e18 +\\n            userRewards[_account];\\n    }\\n\\n    function lastTimeRewardApplicable() private view returns (uint) {\\n        return _min(block.timestamp, poolEndTime);\\n    }\\n\\n    function rewardPerToken() private view returns (uint) {\\n        if (_totalStaked == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\\n            _totalStaked;\\n    }\\n\\n    function _min(uint x, uint y) private pure returns (uint) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function tokenForStakingRewards() public view returns (uint) {\\n        return tokensForBondsSupply;\\n    }\\n\\n    function balanceOf(address _account) external view returns (uint) {\\n        return userStakedBalance[_account];\\n    }\\n\\n    function totalStaked() external view returns (uint) {\\n        return _totalStaked;\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenWbnbLp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wbnbAmount\",\"type\":\"uint256\"}],\"name\":\"TokenBondSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wbnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"TokenBondsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APE_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_WBNB_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beansFromSoldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"defundTokenBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRecoverBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRecoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundTokenBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralUserAddress\",\"type\":\"address\"}],\"name\":\"purchaseTokenBond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"redeemTokenBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAcceptableSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyUnstakeFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyUnstakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidityPercentage\",\"type\":\"uint256\"}],\"name\":\"setLiquidityPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setPoolDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReferralLimit\",\"type\":\"uint256\"}],\"name\":\"setReferralLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReferralPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferralPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenBondBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTokenBondBonusActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBondBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBondBonusActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenForStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForBondsSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUpPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBeansOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPTokensOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPaidRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferred\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeAgain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeIsReferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBonds\",\"type\":\"uint256\"}],\"internalType\":\"struct SafoFarm.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafoFarm", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000058490a6ed97f8820d8c120dc102f50c638b3c81e0000000000000000000000009d23335e552cdd44c80f18ebd98c06e47a96d7b50000000000000000000000009320bdb3c8f3d0b1313726efbb0f0061ebf149ad00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000009320bdb3c8f3d0b1313726efbb0f0061ebf149ad000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000009d23335e552cdd44c80f18ebd98c06e47a96d7b5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}