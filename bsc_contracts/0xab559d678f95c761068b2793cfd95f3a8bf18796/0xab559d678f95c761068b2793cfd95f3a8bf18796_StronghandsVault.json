{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract StronghandsVault {\r\n    struct UserData {\r\n        uint256 deposited;\r\n        uint256 withdrawn;\r\n        uint256 compounded;\r\n        uint256 harvested;\r\n        \r\n        uint256 xDeposited;\r\n        uint256 xWithdrawn;\r\n        uint256 xCompounded;\r\n        uint256 xHarvested;\r\n    }\r\n    \r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyHolders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    \r\n    // Normal Events\r\n    event onTokenPurchase(address indexed customerAddress, uint256 incomingBase, uint256 tokensMinted, address indexed referredBy);\r\n    event onTokenSell(address indexed customerAddress, uint256 tokensBurned, uint256 baseEarned);\r\n    event onReinvestment(address indexed customerAddress, uint256 baseReinvested, uint256 tokensMinted);\r\n    event onWithdraw(address indexed customerAddress, uint256 baseWithdrawn);\r\n    \r\n    // ERC20 Events\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    \r\n    string public name = \"Stronghands BNB3D\";\r\n    string public symbol = \"BNB3D\";\r\n    \r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 10;\r\n    \r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    \r\n    mapping(address => address) internal referrerOf;\r\n    mapping(address => uint256) internal referralsOf_;\r\n    mapping(address => uint256) internal referralEarningsOf_;\r\n    \r\n    mapping(address => UserData) internal userData_;\r\n    \r\n    uint256 internal players;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    \r\n    uint256 internal totalDeposited_;\r\n    uint256 internal totalWithdrawn_;\r\n    uint256 internal totalCompounded_;\r\n    uint256 internal totalHarvested_;\r\n    \r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS           =\r\n    =======================================*/\r\n\r\n    constructor() public {\r\n\r\n    }\r\n    \r\n    // Fallback function\r\n    receive() payable external {\r\n        deposit(address(0));\r\n    }\r\n     \r\n    // Converts all incoming base to tokens for the caller, and passes down the referral addy (if any)\r\n    function deposit(address _referredBy) public payable returns (uint256) {\r\n\r\n        // If the deposits of msgSender = 0, this is their first deposit.\r\n        if (userData_[msg.sender].deposited == 0) {\r\n            players += 1;\r\n        }\r\n        \r\n        // Deposit Base to the contract, create the tokens.\r\n        purchaseTokens(msg.value, _referredBy);\r\n        \r\n        // Count the referral\r\n        referralsOf_[_referredBy] += 1;\r\n        \r\n        userData_[msg.sender].deposited += msg.value;\r\n        userData_[msg.sender].xDeposited += 1;\r\n        \r\n        totalDeposited_ += msg.value;\r\n        referrerOf[msg.sender] = _referredBy;\r\n    }\r\n    \r\n    // Liquifies tokens to Base.\r\n    function withdraw(uint256 _amountOfTokens) onlyHolders() public {\r\n        \r\n        address _customerAddress = msg.sender;\r\n        \r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _base = tokensToBase_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_base, dividendFee_);\r\n        uint256 _taxedBase = SafeMath.sub(_base, _dividends);\r\n        \r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedBase * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n        \r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        \r\n        // Update Stats\r\n        userData_[msg.sender].withdrawn += _dividends;\r\n        userData_[msg.sender].xWithdrawn += 1;\r\n        \r\n        totalWithdrawn_ += _dividends;\r\n        \r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedBase);\r\n    }\r\n    \r\n    // Converts all of caller's dividends to tokens.\r\n    function compound() onlyStronghands() public {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, referrerOf[_customerAddress]);\r\n        \r\n        // Update stats...\r\n        userData_[msg.sender].deposited += _dividends;\r\n        userData_[msg.sender].compounded += _dividends;\r\n        userData_[msg.sender].xCompounded += 1;\r\n        \r\n        totalCompounded_ += _dividends;\r\n        \r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    // Withdraws all of the callers earnings.\r\n    function harvest() onlyStronghands() public {\r\n        // setup data\r\n        address payable _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n        \r\n        // \r\n        userData_[msg.sender].harvested += _dividends;\r\n        userData_[msg.sender].xHarvested += 1;\r\n        \r\n        totalHarvested_ += _dividends;\r\n        \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    // Transfer token to a different address. No fees.\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyHolders() public returns (bool) {\r\n        // cant send to 0 address\r\n        require(_toAddress != address(0));\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) harvest();\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n        \r\n    // Alias of sell() and withdraw()\r\n    function exit() public {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) withdraw(_tokens);\r\n        \r\n        // lambo delivery service\r\n        harvest();\r\n    }\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    \r\n    function myReferrals() public view returns (uint256) {\r\n        return referralsOf(msg.sender);\r\n    }\r\n\r\n    function referralsOf(address _user) public view returns (uint256) {\r\n        return referralsOf_[_user];\r\n    }\r\n    \r\n    function myTotalRefEarnings() public view returns (uint256) {\r\n        return totalRefEarningsOf(msg.sender);\r\n    }\r\n\r\n    function totalRefEarningsOf(address _user) public view returns (uint256) {\r\n        return referralEarningsOf_[_user];\r\n    }\r\n    \r\n    function contractStats() public view returns (uint256 _totalDeposited, uint256 _totalWithdrawn, uint256 _totalCompounded, uint256 _totalHarvested) {\r\n        return (totalDeposited_, totalWithdrawn_, totalCompounded_, totalHarvested_);\r\n    }\r\n    \r\n    function getAmountStatsOf(address _user) public view returns (uint256 _deposited, uint256 _withdrawn, uint256 _compounded, uint256 _harvested) {\r\n        return (\r\n            userData_[_user].deposited,\r\n            userData_[_user].withdrawn,\r\n            userData_[_user].compounded,\r\n            userData_[_user].harvested\r\n        );\r\n    }\r\n    \r\n    function getRepeatStatsOf(address _user) public view returns (uint256 _xDeposited, uint256 _xWithdrawn, uint256 _xCompounded, uint256 _xHarvested) {\r\n        return (\r\n            userData_[_user].xDeposited,\r\n            userData_[_user].xWithdrawn,\r\n            userData_[_user].xCompounded,\r\n            userData_[_user].xHarvested\r\n        );\r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    // View the current Base stored in the contract\r\n    function totalBaseBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    // Retrieve the total token supply.\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    // Retrieve the tokens owned by the caller.\r\n    function myTokens() public view returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return dividendsOf(_customerAddress,_includeReferralBonus);\r\n    }\r\n    \r\n    // Retrieve the token balance of any single address.\r\n    function balanceOf(address _customerAddress) view public returns(uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    // Retrieve the dividend balance of any single address.\r\n    function dividendsOf(address _customerAddress,bool _includeReferralBonus) view public returns(uint256) {\r\n        uint256 regularDividends = (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n        if (_includeReferralBonus){\r\n            return regularDividends + referralBalance_[_customerAddress];\r\n        } else {\r\n            return regularDividends;\r\n        }\r\n    }\r\n    \r\n    \r\n    // Return the buy price of 1 individual token.\r\n    function sellPrice() public view returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _base = tokensToBase_(1e18);\r\n            uint256 _dividends = SafeMath.div(_base, dividendFee_  );\r\n            uint256 _taxedBase = SafeMath.sub(_base, _dividends);\r\n            return _taxedBase;\r\n        }\r\n    }\r\n    \r\n    // Return the sell price of 1 individual token.\r\n    function buyPrice() public view returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _base = tokensToBase_(1e18);\r\n            uint256 _dividends = SafeMath.div(_base, dividendFee_  );\r\n            uint256 _taxedBase = SafeMath.add(_base, _dividends);\r\n            return _taxedBase;\r\n        }\r\n    }\r\n    \r\n    // Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n    function calculateTokensReceived(uint256 _baseToSpend) public view returns(uint256) {\r\n        uint256 _dividends = SafeMath.div(_baseToSpend, dividendFee_);\r\n        uint256 _taxedBase = SafeMath.sub(_baseToSpend, _dividends);\r\n        uint256 _amountOfTokens = baseToTokens_(_taxedBase);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    // Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n    function calculateBaseReceived(uint256 _tokensToSell) public view returns(uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _base = tokensToBase_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_base, dividendFee_);\r\n        uint256 _taxedBase = SafeMath.sub(_base, _dividends);\r\n        return _taxedBase;\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    \r\n    // Deposit tokens into the contract and issue the correct amount of tokens to the depositor\r\n    function purchaseTokens(uint256 _incomingBase, address _referredBy) internal returns(uint256) {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingBase, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedBase = SafeMath.sub(_incomingBase, _undividedDividends);\r\n        uint256 _amountOfTokens = baseToTokens_(_taxedBase);\r\n        uint256 _fee = _dividends * magnitude;\r\n \r\n        // prevents overflow\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        \r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite Base\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each participant\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        \r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        // really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        referralEarningsOf_[_referredBy] += (_referralBonus);\r\n        \r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingBase, _amountOfTokens, _referredBy);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    // Calculate Token price based on an amount of incoming Base | Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n    function baseToTokens_(uint256 _base) internal view returns(uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +(2*(tokenPriceIncremental_ * 1e18)*(_base * 1e18))\r\n                            +(((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +(2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    // Calculate token sell value | Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n    function tokensToBase_(uint256 _tokens) internal view returns(uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _baseReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _baseReceived;\r\n    }\r\n    \r\n    // SQUARE ROOT!\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateBaseReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalHarvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAmountStatsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRepeatStatsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xCompounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xHarvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTotalRefEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"referralsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBaseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalRefEarningsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StronghandsVault", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3ee3ef8814ba22bde744a0c2c55a0c997c844497b16b375b3a9282c8fef4135"}