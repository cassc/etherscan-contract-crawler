{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n    Contrato e stake CFarm.\r\n\r\n    Your money farm!\r\n\r\n    https://coinfarm.com.br/\r\n    https://coinfarm.com.br/en\r\n    https://t.me/coinfarmoficial\r\n    \r\n    dev @gamer_noob_blockchain\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n//Declara\u00e7\u00e3o do codificador experimental ABIEncoderV2 para retornar tipos din\u00e2micos\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n */\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Pausable is Context {\r\n\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (uint256);    \r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router {\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CFarmStake is Pausable, Ownable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 liquidityFundToStake = 42600000 * 10 ** 8;\r\n\r\n    uint256 public amountTokensDeposited;\r\n    uint256 public amountTokensInStake;\r\n    uint256 public amountTokensInStake30days;\r\n    uint256 public amountTokensInStake90days;\r\n    uint256 public amountTokensInStake180days;\r\n    uint256 public amountTokensInStake360days;\r\n    \r\n    uint256 public amountTokensClaimedRewards30days;\r\n    uint256 public amountTokensClaimedRewards90days;\r\n    uint256 public amountTokensClaimedRewards180days;\r\n    uint256 public amountTokensClaimedRewards360days;\r\n\r\n    uint256 sumTokensDepositedLast24hrs;\r\n    uint256 lastTimeForSumTokensDepositedLast24hrs;\r\n\r\n    uint256 public totalStakersOn;\r\n    uint256 public quantosStakesForamFeitos;\r\n\r\n    uint256 public timeDeployContractThis;\r\n    uint256 public timeOpenPoolsStake;\r\n    uint256 public timeLimitToEmergencyWhithDrawlTokens;\r\n\r\n    uint256 time30daysStake = 30 days;\r\n    uint256 time90daysStake = 90 days;\r\n    uint256 time180daysStake = 180 days;\r\n    uint256 time360daysStake = 360 days;\r\n\r\n    address public   addressCFarm;\r\n    address internal addressBUSD =    0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address internal addressPCVS2 =   0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address internal addressWBNB =    0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    struct stakeInfo1 {\r\n        uint256 startStake;\r\n        uint256 amountTokens;\r\n    }\r\n\r\n    struct stakeInfo2 {\r\n        uint256 startStake;\r\n        uint256 amountTokens;\r\n    }\r\n\r\n    struct stakeInfo3 {\r\n       uint256 startStake;\r\n        uint256 amountTokens;\r\n    }\r\n\r\n    struct stakeInfo4 {   \r\n        uint256 startStake;\r\n        uint256 amountTokens;\r\n    }\r\n\r\n    mapping(address => uint256) public totalAmountTokensClaimed;\r\n    mapping(address => uint256) public totalAmountRewardsClaimed;\r\n\r\n    mapping(address => stakeInfo1) public mappingStakeInfo1;\r\n    mapping(address => stakeInfo2) public mappingStakeInfo2;\r\n    mapping(address => stakeInfo3) public mappingStakeInfo3;\r\n    mapping(address => stakeInfo4) public mappingStakeInfo4;\r\n\r\n    event ApostouStaked(address indexed addressStaker, uint256 amountTokens, uint256 whatsNumberStake);\r\n    event Retirado(address indexed addressStaker, uint256 amountTokens, uint256 amountClaimed, uint256 whatsNumberStake);\r\n\r\n    receive() external payable {}\r\n\r\n    constructor() {\r\n        timeDeployContractThis = block.timestamp;\r\n    }\r\n\r\n    function getDaysPassed() public view returns (uint256){\r\n        return (block.timestamp - timeOpenPoolsStake).div(1 days); \r\n    }\r\n\r\n    function amountTokensUnlockedPerMinutes() public view returns (uint256) {\r\n        uint256 factorMinutesPassed = (block.timestamp - timeOpenPoolsStake).div(1 minutes); \r\n        uint256 amountUnlockPerMinutes = (liquidityFundToStake).mul(10 ** 6).div(12).div(12).div(30).div(24).div(60);\r\n        uint256 amountUnlocked = factorMinutesPassed.mul(amountUnlockPerMinutes);\r\n\r\n        return amountUnlocked;\r\n    }\r\n\r\n    function amountTokensUnlockedPerDays() public view returns (uint256) {\r\n        uint256 factorMinutesPassed = (block.timestamp - timeOpenPoolsStake).div(1 days); \r\n        uint256 amountUnlockPerDays = (liquidityFundToStake).mul(10 ** 6).div(12).div(12).div(30).div(24);\r\n        uint256 amountUnlocked = factorMinutesPassed.mul(amountUnlockPerDays);\r\n\r\n        return amountUnlocked;\r\n    }\r\n\r\n    //Obt\u00e9m informa\u00e7\u00f5es espec\u00edficas de stakers e informa\u00e7\u00f5e gerais\r\n    function getInfos(address staker, uint256 whatsNumberStake) public view returns \r\n    (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        \r\n        uint256 startStake;\r\n        uint256 amountTokens;\r\n        uint256 limitStake;\r\n        uint256 amountTokensStaked;\r\n        uint256 amountTokensClaimedRewards;\r\n        uint256 timePassed;\r\n\r\n        if (whatsNumberStake == 1) {\r\n            startStake = mappingStakeInfo1[staker].startStake;\r\n            amountTokens =  mappingStakeInfo1[staker].amountTokens;\r\n            timePassed = 30 * 24 * 60 * 60;\r\n            amountTokensStaked = amountTokensInStake30days;\r\n            amountTokensClaimedRewards = amountTokensClaimedRewards30days;\r\n            limitStake = time30daysStake;\r\n        } else if (whatsNumberStake == 2) {\r\n            startStake = mappingStakeInfo2[staker].startStake;\r\n            amountTokens =  mappingStakeInfo2[staker].amountTokens;\r\n            timePassed = 90 * 24 * 60 * 60;\r\n            amountTokensStaked = amountTokensInStake90days;\r\n            amountTokensClaimedRewards = amountTokensClaimedRewards90days;\r\n            limitStake = time90daysStake;\r\n        } else if (whatsNumberStake == 3) {\r\n            startStake = mappingStakeInfo3[staker].startStake;\r\n            amountTokens =  mappingStakeInfo3[staker].amountTokens;\r\n            timePassed = 180 * 24 * 60 * 60;\r\n            amountTokensStaked = amountTokensInStake180days;\r\n            amountTokensClaimedRewards = amountTokensClaimedRewards90days;\r\n            limitStake = time180daysStake;\r\n        } else if (whatsNumberStake == 4) {\r\n            startStake = mappingStakeInfo4[staker].startStake;\r\n            amountTokens =  mappingStakeInfo4[staker].amountTokens;\r\n            timePassed = 360 * 24 * 60 * 60;\r\n            amountTokensStaked = amountTokensInStake360days;\r\n            amountTokensClaimedRewards = amountTokensClaimedRewards180days;\r\n            limitStake = time360daysStake;\r\n        }\r\n        return (startStake,amountTokens,timePassed,amountTokensStaked,amountTokensClaimedRewards,limitStake);\r\n    }\r\n\r\n\r\n    function getTimeForEndMyStake(address staker, uint256 whatsNumberStake) external view returns (uint256) {\r\n        uint256 getPrazoParaExpirarStakeReturn;\r\n        uint256 startStake;\r\n        uint256 limitStake;\r\n\r\n        (startStake,,,,,limitStake) = getInfos(staker, whatsNumberStake);\r\n        \r\n        if (startStake > 0) {\r\n           if (startStake + limitStake > block.timestamp) {\r\n                //retorno est\u00e1 em segundo; banckend tem que converter para horas ou dias\r\n                return getPrazoParaExpirarStakeReturn = startStake + limitStake - block.timestamp;\r\n            } else {\r\n               return getPrazoParaExpirarStakeReturn = 0;\r\n            }\r\n        } else {\r\n            return getPrazoParaExpirarStakeReturn = 0;\r\n        }\r\n    }\r\n\r\n    function getTotalTokensCFarmInStake(address staker) external view returns (uint256) {\r\n        return (mappingStakeInfo1[staker].amountTokens + \r\n                mappingStakeInfo2[staker].amountTokens +\r\n                mappingStakeInfo3[staker].amountTokens +\r\n                mappingStakeInfo4[staker].amountTokens);\r\n    }\r\n\r\n    function getRewardsWasClaimed(address staker) external view returns (uint256) {\r\n        return totalAmountRewardsClaimed[staker];\r\n    }\r\n\r\n    function getTotalAmountTokensClaimed(address staker) external view returns (uint256) {\r\n        return totalAmountTokensClaimed[staker];\r\n    }\r\n\r\n    //Retorna o saldo a ser clamado do stake \r\n    function getEarningTokens (address staker, uint256 whatsNumberStake) public view returns (uint256){\r\n\r\n        uint256 amountRewardClaim;\r\n\r\n        uint256 startStake;\r\n        uint256 amountTokens;\r\n        uint256 timePassed;\r\n        uint256 amountTokensStaked;\r\n        uint256 limitStake;\r\n\r\n        (startStake,amountTokens,timePassed,amountTokensStaked,,limitStake) = getInfos(staker, whatsNumberStake);\r\n\r\n        if (amountTokensStaked == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 amountUnlockPerMinutes = (liquidityFundToStake).mul(10 ** 6).div(12).div(12).div(30).div(24).div(60);\r\n        uint256 percentAmountTokens = amountTokens.mul(10 ** 6).div(amountTokensStaked);\r\n\r\n        if (block.timestamp < startStake + limitStake) {\r\n            timePassed = (block.timestamp - startStake).div(60);\r\n        } else {\r\n            timePassed = timePassed.div(60);\r\n        }\r\n\r\n        amountRewardClaim = percentAmountTokens.mul(amountUnlockPerMinutes).mul(timePassed).mul(25).div(100)\r\n                            .div(10 ** 6).div(10 ** 6);  \r\n\r\n        return amountRewardClaim;  \r\n    } \r\n\r\n\r\n    //retorna a atualiza\u00e7\u00e3o atual para o saldo de tokens depositados convertendo\r\n    //para BUSD para o calculo do APR e TVL\r\n    function getConvertCFarmToBUSD(uint256 amount) public view returns (uint256) {\r\n        uint256 retorno;\r\n        if (amount != 0) {\r\n            // generate the uniswap pair path of CFarm to WBNB/BNB\r\n            address[] memory path = new address[](3);\r\n            path[0] = addressCFarm;\r\n            path[1] = addressWBNB;\r\n            path[2] = addressBUSD;\r\n\r\n            uint256[] memory amountOutMins = IUniswapV2Router(addressPCVS2)\r\n            .getAmountsOut(amount, path);\r\n            retorno = amountOutMins[path.length -1];\r\n        }\r\n        return retorno;\r\n    } \r\n\r\n\r\n    //valor total bloqueado nas POOLS de stakes da CFarm. Retorno em d\u00f3lars\r\n    //Total Value Locked\r\n    function TVL (uint256 whatsNumberStake) public view returns (uint256,uint256) {\r\n\r\n        uint256 liquidityTokensLocked;\r\n        uint256 liquidityForPay;\r\n        uint256 percentPerPoolStake;\r\n        uint256 amountTokensClaimedRewards;\r\n        uint256 amountTokensStaked;\r\n\r\n\r\n        if (whatsNumberStake == 0) {\r\n            amountTokensStaked = amountTokensInStake;\r\n            amountTokensClaimedRewards = amountTokensClaimedRewards30days + amountTokensClaimedRewards90days +\r\n                                         amountTokensClaimedRewards180days + amountTokensClaimedRewards360days;\r\n            percentPerPoolStake = 100;\r\n\r\n        } else {\r\n            (,,,amountTokensStaked,\r\n            amountTokensClaimedRewards,) = getInfos(address(0x0), whatsNumberStake);\r\n            percentPerPoolStake = 25;\r\n\r\n        }\r\n\r\n        //uint256 timePassed = (block.timestamp - timeOpenPoolsStake).div(1 days);\r\n\r\n        //amountUnlockByDays\r\n        //disponibilidades da liquidez para pagamentos para a referida pool de stake\r\n        uint256 liquidityForPayCalc = (liquidityFundToStake)\r\n        .mul(10 ** 6).div(12).div(12).div(30).mul(percentPerPoolStake).div(100) - amountTokensClaimedRewards;\r\n\r\n        liquidityForPay = getConvertCFarmToBUSD(liquidityForPayCalc);\r\n\r\n        if (amountTokensStaked == 0) {\r\n            return (0,liquidityForPay);\r\n        }\r\n\r\n        liquidityTokensLocked = getConvertCFarmToBUSD(amountTokensStaked);\r\n\r\n        //backend deve dividir o valor por 10 ** 6\r\n        return (liquidityTokensLocked,liquidityForPay);\r\n    }\r\n\r\n\r\n    //based https://docs.pancakeswap.finance/products/yield-farming\r\n    function APR (uint256 whatsNumberStake) public view returns (uint256) {\r\n        uint256 amountTokensStaked;\r\n        uint256 percentPerPoolStake;\r\n        \r\n        if (whatsNumberStake == 0) {\r\n            amountTokensStaked = amountTokensInStake;\r\n            percentPerPoolStake = 100;\r\n        } else {\r\n            (,,,amountTokensStaked,,) = getInfos(address(0x0), whatsNumberStake);\r\n            percentPerPoolStake = 25;\r\n        }\r\n\r\n        if (amountTokensStaked == 0) {\r\n            return 0;\r\n        }\r\n\r\n        //amountUnlockByDays\r\n        //disponibilidades da liquidez para pagamentos para a referida pool de stake\r\n        uint256 liqudityUnlockForPayPerDays = (liquidityFundToStake).mul(10**6).div(12)\r\n                        .mul(percentPerPoolStake).div(100);\r\n\r\n        uint256 rewardsAPR = liqudityUnlockForPayPerDays\r\n                             .div(amountTokensStaked).mul(100).div(10**6);\r\n        //retorno em percentual, multiplicado por 100.\r\n        return rewardsAPR;\r\n\r\n    }\r\n\r\n    //based https://docs.pancakeswap.finance/products/yield-farming\r\n    function APR2 (uint256 whatsNumberStake) public view returns (uint256) {\r\n        uint256 amountTokensStaked;\r\n        uint256 percentPerPoolStake;\r\n        \r\n        if (whatsNumberStake == 0) {\r\n            amountTokensStaked = amountTokensInStake;\r\n            percentPerPoolStake = 100;\r\n        } else {\r\n            (,,,amountTokensStaked,,) = getInfos(address(0x0), whatsNumberStake);\r\n            percentPerPoolStake = 25;\r\n        }\r\n\r\n        if (amountTokensStaked == 0) {\r\n            return 0;\r\n        }\r\n\r\n        //amountUnlockByDays\r\n        //disponibilidades da liquidez para pagamentos para a referida pool de stake\r\n        uint256 liqudityUnlockForPayPerDays = (liquidityFundToStake)\r\n                            .mul(10 ** 6).div(12).div(12).div(30).mul(percentPerPoolStake).div(100);\r\n\r\n        uint256 liqudityUnlockForPayPerDaysProjetedForYearly = liqudityUnlockForPayPerDays.mul(365);\r\n        uint256 rewardsAPR = liqudityUnlockForPayPerDaysProjetedForYearly\r\n                             .div(amountTokensStaked).mul(100).div(10 ** 6);\r\n\r\n        //retorno em percentual, multiplicado por 100.\r\n        return rewardsAPR;\r\n\r\n    }\r\n\r\n    function stake(address staker, uint256 stakeAmount, uint256 whatsNumberStake) external whenNotPaused nonReentrant {\r\n        require(staker == _msgSender(), \"Somente a conta detentora que pode apostar\");\r\n        require(stakeAmount > 0, \"Por favor, aposte um valor de tokens maior que ZERO\");\r\n        require(IERC20(addressCFarm).balanceOf(staker) >= stakeAmount, \"Voce nao possui tokens suficientes\");\r\n        require(whatsNumberStake <= 4 && whatsNumberStake != 0, \"Stake fornecido invalido\");\r\n        require(timeOpenPoolsStake != 0, \"As pools de stake ainda nao estao abertas\");\r\n\r\n        IERC20(addressCFarm).transferFrom(staker, address(this), stakeAmount);\r\n\r\n        if (whatsNumberStake == 1) {\r\n            require(mappingStakeInfo1[staker].amountTokens == 0, \"Voce ja fez stake de 30 dias\");\r\n            mappingStakeInfo1[staker].startStake = block.timestamp;\r\n            mappingStakeInfo1[staker].amountTokens = stakeAmount;\r\n            amountTokensInStake30days += stakeAmount;\r\n\r\n        } else if (whatsNumberStake == 2) {\r\n            require(mappingStakeInfo2[staker].amountTokens == 0, \"Voce ja fez stake de 90 dias\");\r\n            mappingStakeInfo2[staker].startStake = block.timestamp;\r\n            mappingStakeInfo2[staker].amountTokens = stakeAmount;\r\n            amountTokensInStake90days += stakeAmount;\r\n\r\n        } else if (whatsNumberStake == 3) {\r\n            require(mappingStakeInfo3[staker].amountTokens == 0, \"Voce ja fez stake de 180 dias\");\r\n            mappingStakeInfo3[staker].startStake = block.timestamp;\r\n            mappingStakeInfo3[staker].amountTokens = stakeAmount;\r\n            amountTokensInStake180days += stakeAmount;\r\n\r\n        } else if (whatsNumberStake == 4) {\r\n            require(mappingStakeInfo4[staker].amountTokens == 0, \"Voce ja fez stake de 360 dias\");\r\n            mappingStakeInfo4[staker].startStake = block.timestamp;\r\n            mappingStakeInfo4[staker].amountTokens = stakeAmount;\r\n            amountTokensInStake360days += stakeAmount;\r\n\r\n        } \r\n\r\n        quantosStakesForamFeitos++;\r\n        totalStakersOn++;\r\n        amountTokensDeposited += stakeAmount;\r\n        amountTokensInStake += stakeAmount;\r\n\r\n        emit ApostouStaked(staker, stakeAmount, whatsNumberStake);\r\n\r\n    }    \r\n\r\n\r\n    function claim(address staker, uint256 whatsNumberStake) public whenNotPaused nonReentrant returns (bool){\r\n        require(staker == _msgSender(), \"Somente a conta detentora que pode clamar\");\r\n        require(whatsNumberStake <= 4 && whatsNumberStake != 0, \"Stake fornecido invalido\");\r\n\r\n        uint256 startStake;\r\n        uint256 amountTokens;\r\n        uint256 limitStake;\r\n        uint256 timePassed;\r\n\r\n        uint256 amountUnlockPerMinutes = (liquidityFundToStake).mul(10 ** 6).div(12).div(12).div(30).div(24).div(60);\r\n        uint256 amountTokensStaked;\r\n\r\n        //contrato j\u00e1 possi v\u00e1rias prote\u00e7\u00f5es contra ataques hacker\r\n        //as altera\u00e7\u00f5es de saldos s\u00e3o feitas corretamente para evitar que um hacker drene os saldos do contrato\r\n\r\n        if (whatsNumberStake == 1) {\r\n            startStake =    mappingStakeInfo1[staker].startStake;\r\n            limitStake =    time30daysStake;\r\n            require(startStake + limitStake < block.timestamp, \"Prazo de 30 dias de bloqueio\");\r\n            amountTokens =  mappingStakeInfo1[staker].amountTokens;\r\n            require(amountTokens > 0, \"Nao ha stake de 30 dias apostado\");\r\n            mappingStakeInfo1[staker].amountTokens = 0;\r\n            timePassed = 30 * 24 * 60; //em minutos\r\n            amountTokensStaked = amountTokensInStake30days;\r\n            amountTokensInStake30days -= amountTokens;\r\n            \r\n        } else if (whatsNumberStake == 2) {\r\n            startStake =    mappingStakeInfo2[staker].startStake;\r\n            limitStake =    time90daysStake;\r\n            require(startStake + limitStake < block.timestamp, \"Prazo de 3 meses dias de bloqueio\");\r\n            amountTokens =  mappingStakeInfo2[staker].amountTokens;\r\n            require(amountTokens > 0, \"Nao ha stake de 3 meses apostado\");\r\n            mappingStakeInfo2[staker].amountTokens = 0;\r\n            timePassed = 90 * 24 * 60; //em minutos\r\n            amountTokensStaked = amountTokensInStake90days;\r\n            amountTokensInStake90days -= amountTokens;\r\n\r\n        } else if (whatsNumberStake == 3) {\r\n            startStake =    mappingStakeInfo3[staker].startStake;\r\n            limitStake =    time180daysStake;\r\n            require(startStake + limitStake < block.timestamp, \"Prazo de 6 meses  de bloqueio\");\r\n            amountTokens =  mappingStakeInfo3[staker].amountTokens;\r\n            require(amountTokens > 0, \"Nao ha stake de 6 meses apostado\");\r\n            mappingStakeInfo3[staker].amountTokens = 0;\r\n            timePassed = 180 * 24 * 60; //em minutos\r\n            amountTokensStaked = amountTokensInStake180days;\r\n            amountTokensInStake180days -= amountTokens;\r\n\r\n        } else if (whatsNumberStake == 4) {\r\n            startStake =    mappingStakeInfo4[staker].startStake;\r\n            limitStake =    time360daysStake;\r\n            require(startStake + limitStake < block.timestamp, \"Prazo de 1 ano de bloqueio\");\r\n            amountTokens =  mappingStakeInfo4[staker].amountTokens;\r\n            require(amountTokens > 0, \"Nao ha stake de 1 ano apostado\");\r\n            mappingStakeInfo4[staker].amountTokens = 0;\r\n            timePassed = 360 * 24 * 60; //em minutos\r\n            amountTokensStaked = amountTokensInStake360days;\r\n            amountTokensInStake360days -= amountTokens;\r\n\r\n        }\r\n        \r\n        uint256 percentAmountTokens = amountTokens.mul(10 ** 6).div(amountTokensStaked);\r\n        uint256 amountRewardClaim = \r\n        percentAmountTokens.mul(amountUnlockPerMinutes).mul(timePassed).mul(25).div(100)\r\n        .div(10 ** 6).div(10 ** 6);  \r\n\r\n        IERC20(addressCFarm).transfer(staker, amountTokens);\r\n        IERC20(addressCFarm).transfer(staker, amountRewardClaim);\r\n\r\n        if (whatsNumberStake == 1) {\r\n            amountTokensClaimedRewards30days += amountRewardClaim;\r\n        } else if (whatsNumberStake == 2) {\r\n            amountTokensClaimedRewards90days += amountRewardClaim;\r\n        } else if (whatsNumberStake == 3) {\r\n            amountTokensClaimedRewards180days += amountRewardClaim;\r\n        } else if (whatsNumberStake == 4) {\r\n            amountTokensClaimedRewards360days += amountRewardClaim;\r\n        }\r\n\r\n        amountTokensInStake -= amountTokens;\r\n        totalStakersOn--;\r\n        totalAmountTokensClaimed[staker] += amountTokens;\r\n        totalAmountRewardsClaimed[staker] += amountRewardClaim;\r\n\r\n        emit Retirado(staker, amountTokens, amountRewardClaim, whatsNumberStake);\r\n\r\n        return true;\r\n    }\r\n\r\n    //Fun\u00e7\u00e3o chamada para abrir as 4 pools de liquidez e setar a emerg\u00eancia\r\n    function setOpenPoolStake(uint256 _timeLimitToEmergencyWhithDrawlTokens) external onlyOwner {\r\n        timeLimitToEmergencyWhithDrawlTokens = _timeLimitToEmergencyWhithDrawlTokens;\r\n        timeOpenPoolsStake = block.timestamp;\r\n    }\r\n\r\n    //fun\u00e7\u00e3o de emerg\u00eancia para devolver os tokens para o propriet\u00e1rio\r\n    //pode ser usada nos primeiros dias do lan\u00e7amento do stake somente\r\n    //ap\u00f3s isso nunca pode ser chamada\r\n    function emergencyWhithDrawlTokens () public onlyOwner {\r\n        require(\r\n            timeOpenPoolsStake + timeLimitToEmergencyWhithDrawlTokens >= block.timestamp,\r\n           \"Tempo limite para retirada de emergencia passou\"\r\n        );\r\n\r\n        IERC20(addressCFarm).transfer(owner(), IERC20(addressCFarm).balanceOf(address(this)));\r\n    }\r\n\r\n    function setCFarmAddressContract (address _addressCFarm) external onlyOwner {\r\n        addressCFarm = _addressCFarm;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function removeBNB () public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    //tokens do contrato da CFarm nunca podem ser removidos desse contrato\r\n    //fun\u00e7\u00e3o usada para recupera\u00e7\u00e3o tokens diversos depositados no contrato\r\n    /*fundo inicial de 71 milh\u00f5es SOMENTE poder\u00e3o ser retirados pelos apostadores do stake conforme\r\n      o prazo de desbloqueio de at\u00e9 12 anos */\r\n    function removeAnotherERC20 (address anotherERC20address) public onlyOwner {\r\n        require(\r\n            anotherERC20address != address(addressCFarm)\r\n        );\r\n\r\n        IERC20(anotherERC20address).transfer(msg.sender, IERC20(anotherERC20address).balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressStaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"ApostouStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressStaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"Retirado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"APR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"APR2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"TVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressCFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensClaimedRewards180days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensClaimedRewards30days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensClaimedRewards360days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensClaimedRewards90days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensInStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensInStake180days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensInStake30days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensInStake360days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensInStake90days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensUnlockedPerDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokensUnlockedPerMinutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWhithDrawlTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getConvertCFarmToBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaysPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"getEarningTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"getInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRewardsWasClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"getTimeForEndMyStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalAmountTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalTokensCFarmInStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingStakeInfo1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingStakeInfo2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingStakeInfo3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingStakeInfo4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantosStakesForamFeitos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anotherERC20address\",\"type\":\"address\"}],\"name\":\"removeAnotherERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressCFarm\",\"type\":\"address\"}],\"name\":\"setCFarmAddressContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeLimitToEmergencyWhithDrawlTokens\",\"type\":\"uint256\"}],\"name\":\"setOpenPoolStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whatsNumberStake\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDeployContractThis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLimitToEmergencyWhithDrawlTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOpenPoolsStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmountRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmountTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakersOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CFarmStake", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8fc9f1c47b9d4a312b8ddad6a81df3d113ab505cc7d55077b7d06b3f720aadb"}