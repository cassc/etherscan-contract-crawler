{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-22\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```solidity\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```solidity\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\r\n * to enforce additional security measures for this role.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/DateTime.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n \r\nabstract contract DateTime {\r\n    /*\r\n     *  Date and Time utilities for ethereum contracts\r\n     *\r\n     */\r\n    struct _DateTime {\r\n        uint16 year;\r\n        uint8 month;\r\n        uint8 day;\r\n        uint8 hour;\r\n        uint8 minute;\r\n        uint8 second;\r\n        uint8 weekday;\r\n    }\r\n \r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant YEAR_IN_SECONDS = 31536000;\r\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n \r\n    uint constant HOUR_IN_SECONDS = 3600;\r\n    uint constant MINUTE_IN_SECONDS = 60;\r\n \r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n \r\n    //\u5224\u65ad\u8f93\u5165\u7684\u5e74\u4efd\u662f\u4e0d\u662f\u95f0\u5e74\r\n    function isLeapYear(uint16 year) internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n \r\n    //\u5224\u65ad\u8f93\u5165\u7684\u5e74\u4efd \u7684\u95f0\u5e74\u524d\r\n    function leapYearsBefore(uint year) internal pure returns (uint) {\r\n        year -= 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }\r\n \r\n    //\u8f93\u5165\u5e74year   \u6708month  \u5f97\u5230\u5f53\u6708\u7684\u5929\u6570\r\n    function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            return 31;\r\n        }\r\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n            return 30;\r\n        }\r\n        else if (isLeapYear(year)) {\r\n            return 29;\r\n        }\r\n        else {\r\n            return 28;\r\n        }\r\n    }\r\n \r\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\r\n        uint secondsAccountedFor = 0;\r\n        uint buf;\r\n        uint8 i;\r\n \r\n        // Year\r\n        dt.year = getYear(timestamp);\r\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n \r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n \r\n        // Month\r\n        uint secondsInMonth;\r\n        for (i = 1; i <= 12; i++) {\r\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                dt.month = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor += secondsInMonth;\r\n        }\r\n \r\n        // Day\r\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                dt.day = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor += DAY_IN_SECONDS;\r\n        }\r\n \r\n        // Hour\r\n        dt.hour = getHour(timestamp);\r\n \r\n        // Minute\r\n        dt.minute = getMinute(timestamp);\r\n \r\n        // Second\r\n        dt.second = getSecond(timestamp);\r\n \r\n        // Day of week.\r\n        dt.weekday = getWeekday(timestamp);\r\n    }\r\n \r\n    //\u6839\u636e\u65f6\u95f4\u6233\u83b7\u53d6\u5e74\u4efd\r\n    function getYear(uint timestamp) internal pure returns (uint16) {\r\n        uint secondsAccountedFor = 0;\r\n        uint16 year;\r\n        uint numLeapYears;\r\n \r\n        // Year\r\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n \r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n \r\n        while (secondsAccountedFor > timestamp) {\r\n            if (isLeapYear(uint16(year - 1))) {\r\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n            }\r\n            else {\r\n                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n            }\r\n            year -= 1;\r\n        }\r\n        return year;\r\n    }\r\n\r\n \r\n    //\u6839\u636e\u65f6\u95f4\u6233\u83b7\u53d6\u6708\u4efd\r\n    function getMonth(uint timestamp) internal pure returns (uint8) {\r\n        return parseTimestamp(timestamp).month;\r\n    }\r\n \r\n    //\u6839\u636e\u65f6\u95f4\u6233\u83b7\u53d6\u5f53\u524d\u5929\u6570\r\n    function getDay(uint timestamp) internal pure returns (uint8) {\r\n        return parseTimestamp(timestamp).day;\r\n    }\r\n \r\n    function getHour(uint timestamp) internal pure returns (uint8) {\r\n        return uint8((timestamp / 60 / 60) % 24);\r\n    }\r\n \r\n    //\u83b7\u53d6\u5206\u949f\r\n    function getMinute(uint timestamp) internal pure returns (uint8) {\r\n        return uint8((timestamp / 60) % 60);\r\n    }\r\n \r\n    function getSecond(uint timestamp) internal pure returns (uint8) {\r\n        return uint8(timestamp % 60);\r\n    }\r\n \r\n    //\u83b7\u53d6\u661f\u671f\u51e0\r\n    function getWeekday(uint timestamp) internal pure returns (uint8) {\r\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n    }\r\n \r\n    //\u6839\u636e\u5e74\u6708\u65e5\u83b7\u53d6\u65f6\u95f4\u6233\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\r\n        return toTimestamp(year, month, day, 0, 0, 0);\r\n    }\r\n \r\n    //\u6839\u636e\u5e74\u6708\u65e5\u65f6\u83b7\u53d6\u65f6\u95f4\u6233\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\r\n        return toTimestamp(year, month, day, hour, 0, 0);\r\n    }\r\n \r\n    //\u6839\u636e\u5e74\u6708\u65e5\u65f6\u5206\u83b7\u53d6\u65f6\u95f4\u6233\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\r\n        return toTimestamp(year, month, day, hour, minute, 0);\r\n    }\r\n \r\n    //\u6839\u636e\u5e74\u6708\u65e5\u65f6\u5206\u79d2\u83b7\u53d6\u65f6\u95f4\u6233\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\r\n        uint16 i;\r\n \r\n        // Year\r\n        for (i = ORIGIN_YEAR; i < year; i++) {\r\n            if (isLeapYear(i)) {\r\n                timestamp += LEAP_YEAR_IN_SECONDS;\r\n            }\r\n            else {\r\n                timestamp += YEAR_IN_SECONDS;\r\n            }\r\n        }\r\n \r\n        // Month\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(year)) {\r\n            monthDayCounts[1] = 29;\r\n        }\r\n        else {\r\n            monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n \r\n        for (i = 1; i < month; i++) {\r\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n        }\r\n \r\n        // Day\r\n        timestamp += DAY_IN_SECONDS * (day - 1);\r\n \r\n        // Hour\r\n        timestamp += HOUR_IN_SECONDS * (hour);\r\n \r\n        // Minute\r\n        timestamp += MINUTE_IN_SECONDS * (minute);\r\n \r\n        // Second\r\n        timestamp += second;\r\n \r\n        return timestamp;\r\n    }\r\n}\r\n// File: contracts/MinPitKyushu.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MinpitKyushu is DateTime,Ownable,AccessControl{\r\n\r\n    IUniswapV2Router02 uniswap;\r\n\r\n    //\u77ff\u4ea7\u8bc1\u5355\u4ef7\r\n    uint256 public _price_usdt;\r\n\r\n    //token\u53d1\u653e\u6bd4\u7387\r\n    uint256 public _token_re;\r\n\r\n    //tokenA\r\n    address public _token;\r\n\r\n    //usdt token\r\n    address public _usdt;\r\n\r\n    //\u6536\u6b3e\u5730\u5740\r\n    address public _collect;\r\n\r\n    //\u9ed8\u8ba4\u9080\u8bf7\u7801\r\n    address public _initial;\r\n\r\n    //\u989d\u5ea6\u500d\u6570\r\n    uint256 public _multiple;\r\n\r\n    //\u9759\u6001\u6536\u76ca\r\n    uint256 public _statics;\r\n\r\n    //\u52a8\u6001\u6536\u76ca\r\n    uint256 public _dynamic;\r\n\r\n    //\u6269\u5c55\u52a0\u901f\r\n    uint256 public _expand;\r\n\r\n    //\u6269\u5c55\u52a0\u901f\u56e2\u961f\u4eba\u6570\r\n    uint256 public _expand_condition;\r\n\r\n    //\u6253\u5361\u8d77\u59cb\u65f6\u95f4\uff08\u65f6\uff09\r\n    uint256 public _checkinStart;\r\n\r\n    //\u6253\u5361\u622a\u6b62\u65f6\u95f4\uff08\u65f6\uff09\r\n    uint256 public _checkinStop;\r\n\r\n    //\u5355\u6570\u9650\u5236\r\n    uint256 public _oddNumber;\r\n\r\n    //\u5151\u6362\u6bd4\u7387\uff0c\u5343\u5206\u4f4d\r\n    uint256 public _exchange_rate;\r\n\r\n    //\u5e02\u957f\r\n    address public _mayorAddr;\r\n\r\n    //\u5dde\u957f\r\n    address public _governorAddr;\r\n\r\n    //\u8fd0\u8425\r\n    address public _operateAddr;\r\n\r\n    //\u7ec8\u7aef\r\n    address public _terminalAddr;\r\n\r\n    //\u5e02\u957f\u5206\u4f63-\u5343\u5206\u4f4d\r\n    uint256 public _mayorDivide;\r\n\r\n    //\u5dde\u957f\u5206\u4f63-\u5343\u5206\u4f4d\r\n    uint256 public _governorDivide;\r\n\r\n    //\u8fd0\u8425\u5206\u4f63-\u5343\u5206\u4f4d\r\n    uint256 public _operateDivide;\r\n\r\n    //\u7ec8\u7aef\u5206\u4f63-\u5343\u5206\u4f4d\r\n    uint256 public _terminalDivide;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => [\u4e0a\u7ea7\u5730\u5740]\r\n    mapping(address => address) public _info;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u53ef\u9886\u53d6\u989d\u5ea6(USDT)\r\n    mapping(address => uint256) public _canQuota;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u5956\u52b1\u989d\u5ea6(USDT)\u3002\u65e5\u5408\u8ba1\uff0c\u65e5\u5de5\u8d44\uff0c\u65e5\u5956\u91d1\uff0c\u65e5\u8865\u8d34\r\n    mapping(address => uint256[4]) public _check;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u9080\u8bf7\u5355\u6570\r\n    mapping(address => uint256) public _userDirect;\r\n\r\n    // BSC-MainNet\r\n    address private constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    constructor() Ownable(){\r\n        _token = 0x43f5b64b3D1a9275b460480430A027424aa17F8C;\r\n        _usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n        _initial = 0xaaE10EAB95eeD48d5E2559aDCa6D0C94e87E360c;\r\n        _collect = 0xf72C9fA44311A5C391D86aE36f2855018E36ea5C;\r\n\r\n        _price_usdt = 1000000000000000000000;\r\n        _token_re = 750;\r\n        _multiple = 2;\r\n        _expand_condition = 10;\r\n        _checkinStart = 0;\r\n        _checkinStop = 24;\r\n        _oddNumber = 2;\r\n\r\n        _statics = 20000000000000000000;\r\n        _dynamic = 5000000000000000000;\r\n        _expand = 10000000000000000000;\r\n\r\n        _mayorAddr = 0xa507EDaD7db6Dca8E9E5d2dA9C0637AA07556666;\r\n        _governorAddr = 0xdE5E2E13A0eE6db4Cc59923932fB21bf0DC274B7;\r\n        _operateAddr = 0x9eBa136e999DCCDeaac450b822c1E3c7cAd8521c;\r\n        _terminalAddr = 0xd32D6388357c3051511fA22022B6FB3852792bc0;\r\n\r\n        _mayorDivide = 400;\r\n        _governorDivide = 300;\r\n        _operateDivide = 150;\r\n        _terminalDivide = 150;\r\n        _exchange_rate = 500;\r\n\r\n        uniswap = IUniswapV2Router02(ROUTER);\r\n\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    struct Bis{\r\n        uint256 price_usdt;\r\n        uint256 _token_re;\r\n        address token;\r\n        address usdt;\r\n        address collect;\r\n        address initial;\r\n        uint256 multiple;\r\n        uint256 statics;\r\n        uint256 dynamic;\r\n        uint256 expand;\r\n        uint256 expand_condition;\r\n        uint256 checkinStart;\r\n        uint256 checkinStop;\r\n        uint256 oddNumber;\r\n        uint256 exchangeRate;\r\n    }\r\n\r\n    struct UserInfo{\r\n        address parentAddr;\r\n        uint256 canQuota;\r\n        uint256 checkTotal;\r\n        uint256 checkSalary;\r\n        uint256 checkAward;\r\n        uint256 checkSubsidy;\r\n        uint256 userDirect;\r\n    }\r\n\r\n    /**\r\n    * type_,1\uff1a\u63a8\u8350\u5173\u7cfb\u7ed1\u5b9a\uff0c2\uff1a\u8d2d\u4e70\u77ff\u4ea7\uff0c3\uff1a\u5956\u52b1\u989d\u5ea6\u53d8\u66f4\uff0c4\uff1a\u53d1\u653e\u6536\u76ca\uff0c5\uff1a\u6253\u5361\r\n    */\r\n\r\n    //\u63a8\u8350\u5173\u7cfb\u7ed1\u5b9a\r\n    event Blind(uint256 type_,address userAddr,address parentAddr,uint256 time);\r\n\r\n    //\u8d2d\u4e70\u77ff\u4ea7\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff1bcanQuota\uff1a\u53ef\u9886\u53d6\u989d\u5ea6(USDT)\uff1btime\uff1a\u65f6\u95f4\u6233\r\n    event Minerals(uint256 type_,address userAddr,uint256 canQuota,uint256 time);\r\n\r\n    //\u5956\u52b1\u989d\u5ea6\u53d8\u66f4\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff1bstatus\uff1a\u7c7b\u578b\uff0c1\uff1a\u9759\u6001\uff0c2\uff1a\u52a8\u6001\uff0c3\uff1a\u6269\u5c55\uff1bcheckOld\uff1a\u53d8\u66f4\u524d\u989d\u5ea6\uff1bcheckChange\uff1a\u53d8\u66f4\u989d\u5ea6\uff1bcheckNew\uff1a\u53d8\u66f4\u540e\u989d\u5ea6\uff1btime\uff1a\u65f6\u95f4\u6233\r\n    event Check(uint256 type_,address userAddr,uint256 status,uint256 checkOld,uint256 checkChange,uint256 checkNew,uint256 time);\r\n\r\n    //\u53d1\u653e\u6536\u76ca\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff1breceivequota\uff1a\u9886\u53d6\u6570\u91cf(TOKEN)\uff1breceivequota_usdt\uff1a\u9886\u53d6\u4ef7\u503c(USDT)\uff0ctime\uff1a\u65f6\u95f4\u6233\r\n    event ReceiveBenefits(uint256 type_,address userAddr,uint256 receivequota,uint256 receivequota_usdt,uint256 time);\r\n\r\n    //\u6253\u5361\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff1bcanQuota\uff1a\u53ef\u9886\u53d6\u989d\u5ea6(USDT)\uff1bquota\uff1a\u5f85\u9886\u53d6\u989d\u5ea6(TOKEN)\uff0ctime\uff1a\u65f6\u95f4\u6233\r\n    event Checkin(uint256 type_,address userAddr,uint256 canQuota,uint256 quota,uint256 time);\r\n\r\n    function getTokenPrice() public view returns (uint256 tokenPrice){\r\n        address[] memory path = new address[](2);\r\n        path[0] = _token;\r\n        path[1] = _usdt;\r\n        return uniswap.getAmountsOut(1000000000000000000,path)[1];\r\n    }\r\n\r\n    function swapExactTokensForTokens(uint amountIn) public {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _usdt;\r\n        path[1] = _token;\r\n        IERC20(_usdt).approve(ROUTER, amountIn);\r\n        uint deadline = block.timestamp + 300;\r\n        uniswap.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn, \r\n            0, \r\n            path, \r\n            address(this), \r\n            deadline\r\n        );\r\n    }\r\n\r\n    function distributionToken(uint256 tokenAmount) internal{\r\n        if(_mayorDivide > 0){\r\n            IERC20(_token).transfer(_mayorAddr,tryDiv(tokenAmount * _mayorDivide,1000));\r\n        }\r\n        if(_governorDivide > 0){\r\n            IERC20(_token).transfer(_governorAddr,tryDiv(tokenAmount * _governorDivide,1000));\r\n        }\r\n        if(_operateDivide > 0){\r\n            IERC20(_token).transfer(_operateAddr,tryDiv(tokenAmount * _operateDivide,1000));\r\n        }\r\n        if(_terminalDivide > 0){\r\n            IERC20(_token).transfer(_terminalAddr,tryDiv(tokenAmount * _terminalDivide,1000));\r\n        }\r\n    }\r\n\r\n\r\n    function purchaseMineralsInter(\r\n        address userAddr,\r\n        address prAddr,\r\n        uint256 tokenAmount\r\n    ) internal {\r\n        require(prAddr != address(0) && _canQuota[userAddr] <= _price_usdt * _multiple * trySub(_oddNumber,1));\r\n        address user = userAddr;\r\n        if(_info[user] == address(0)){\r\n            blind(user,prAddr);\r\n        }\r\n\r\n        \r\n        distributionToken(tryDiv(tokenAmount * _token_re, 1000));\r\n        if(_exchange_rate > 0){\r\n            uint256 a = tryDiv(_price_usdt * trySub(1000,_exchange_rate), 1000);\r\n            IERC20(_usdt).transfer(_collect,a);\r\n\r\n            uint256 usdtAmount = trySub(_price_usdt, a);\r\n            swapExactTokensForTokens(usdtAmount);\r\n            \r\n        }else {\r\n            IERC20(_usdt).transfer(_collect,_price_usdt);\r\n        }\r\n        \r\n        for(uint256 i = 0;i < 10;i++){\r\n            user = _info[user];\r\n            if(user != address(0)){    \r\n                _userDirect[user] += 1;\r\n                \r\n                //\u8ba1\u7b9710\u4ee3\u4e0a\u7ea7\u6269\u5c55\u6536\u76ca\u52a0\u6210\r\n                if(_userDirect[user] == _expand_condition){\r\n                    _check[user][0] += _expand;\r\n                    _check[user][3] += _expand;\r\n                    emit Check(3,user,3,trySub(_check[user][0],_expand),_expand,_check[user][0],block.timestamp);\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n        address prAddr2 = _info[userAddr];\r\n        //\u8ba1\u7b97\u76f4\u63a8\u4e0a\u7ea7\u52a8\u6001\u6536\u76ca\u52a0\u6210\r\n        _check[prAddr2][0] += _dynamic;\r\n        _check[prAddr2][2] += _dynamic;\r\n        emit Check(3,prAddr2,2,trySub(_check[prAddr2][0],_dynamic),_dynamic,_check[prAddr2][0],block.timestamp);\r\n        _check[userAddr][0] += _statics;\r\n        _check[userAddr][1] += _statics;\r\n        _canQuota[userAddr] += _price_usdt * _multiple;\r\n        emit Check(3,user,1,trySub(_check[userAddr][0],_statics),_statics,_check[userAddr][0],block.timestamp);\r\n        emit Minerals(2,userAddr,_canQuota[userAddr],block.timestamp);\r\n    }\r\n\r\n    //\u8d2d\u4e70\uff08\u670d\u52a1\u7aef\uff09\r\n    function purchaseMinerals(\r\n        address userAddr,\r\n        address prAddr,\r\n        uint256 tokenAmount\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        purchaseMineralsInter(userAddr,prAddr,tokenAmount);\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (b > a) return 0;\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (b == 0 || b > a) return 0;\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n\r\n    //\u6253\u5361\r\n    function checkinV2(\r\n        address userAddr,\r\n        uint256 tokenPrice\r\n    ) internal {\r\n        require(_canQuota[userAddr] > 0,\"Insufficient quota\");\r\n        uint256 a = _price_usdt * _multiple;\r\n        uint256 s = tryDiv(_canQuota[userAddr],a);\r\n        uint256 n = trySub(_canQuota[userAddr],_check[userAddr][0]);\r\n        uint256 checkTotal = _check[userAddr][0];\r\n        if(_canQuota[userAddr] <= checkTotal){\r\n            checkTotal = _canQuota[userAddr];\r\n        }\r\n        if(_canQuota[userAddr] > a * s && n <= a * s){\r\n            _check[userAddr][0] = trySub(_check[userAddr][0],_statics);\r\n            _check[userAddr][1] = trySub(_check[userAddr][1],_statics);\r\n            emit Check(3,userAddr,1,_check[userAddr][0] + _statics,_statics,_check[userAddr][0],block.timestamp);\r\n            //\u8ba1\u7b97\u76f4\u63a8\u4e0a\u7ea7\u52a8\u6001\u6536\u76ca\u52a0\u6210\r\n            address prAddr = _info[userAddr];\r\n            _check[prAddr][0] = trySub(_check[prAddr][0],_dynamic);\r\n            _check[prAddr][2] = trySub(_check[prAddr][2],_dynamic);\r\n            emit Check(3,prAddr,2,_check[prAddr][0] + _dynamic,_dynamic,_check[prAddr][0],block.timestamp);\r\n            address user = userAddr;\r\n            for(uint256 i = 0;i < 10;i++){\r\n                user = _info[user];\r\n                if(user != address(0)){\r\n\r\n                    _userDirect[user] = trySub(_userDirect[user],1);\r\n                    \r\n                    //\u8ba1\u7b9710\u4ee3\u4e0a\u7ea7\u6269\u5c55\u6536\u76ca\u52a0\u6210\r\n                    if(_userDirect[user] == _expand_condition - 1){\r\n                        _check[user][0] = trySub(_check[user][0],_expand);\r\n                        _check[user][3] = trySub(_check[user][3],_expand);\r\n                        emit Check(3,user,3,_check[user][0] + _expand,_expand,_check[user][0],block.timestamp);\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n        uint256 tokenAmount = tryDiv(checkTotal * 10**18,tokenPrice);\r\n        _canQuota[userAddr] = trySub(_canQuota[userAddr],checkTotal);\r\n        emit Checkin(5,userAddr,_canQuota[userAddr],tokenAmount,block.timestamp);\r\n\r\n        receiveBenefits(userAddr,tokenAmount,checkTotal);\r\n    }\r\n\r\n    //\u53d1\u5956\uff08\u670d\u52a1\u7aef\uff09\r\n    function checkin(\r\n        address userAddr\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        checkinV2(userAddr,getTokenPrice());\r\n    }\r\n\r\n    //\u6279\u91cf\u53d1\u5956\uff08\u670d\u52a1\u7aef\uff09\r\n    function batchCheckin(\r\n        address[] memory userAddrs\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        //\u83b7\u53d6token\u4ef7\u683c\r\n        uint256 tokenPrice = getTokenPrice();\r\n        for(uint256 i = 0;i < userAddrs.length;i++){\r\n            checkinV2(userAddrs[i],tokenPrice);\r\n        }\r\n    }\r\n\r\n    function getTime24(uint256 time)public pure returns (uint256 time24){\r\n        _DateTime memory dt = parseTimestamp(time);\r\n        time24 = toTimestamp(dt.year,dt.month,dt.day,24);\r\n        return time24;\r\n    }\r\n\r\n    \r\n\r\n    //\u9886\u53d6\u6536\u76ca\r\n    function receiveBenefits(address userAddr,uint256 receivequota,uint256 receivequota_usdt) internal {\r\n        IERC20(_token).transfer(userAddr,receivequota);\r\n        emit ReceiveBenefits(4,userAddr,receivequota,receivequota_usdt,block.timestamp);\r\n    }\r\n\r\n\r\n    \r\n\r\n    //\u7ed1\u5b9a\u9080\u8bf7\r\n    function blind(address userAddr,address parentAddr) internal {\r\n        require(parentAddr != address(0), \"1\"); // \u4e0d\u5141\u8bb8\u4e0a\u7ea7\u5730\u5740\u4e3a0\u5730\u5740\r\n        require(parentAddr != userAddr, \"2\");// \u4e0d\u5141\u8bb8\u81ea\u5df1\u7684\u4e0a\u7ea7\u662f\u81ea\u5df1\r\n        // \u9a8c\u8bc1\u8981\u7ed1\u5b9a\u7684\u4e0a\u7ea7\u662f\u5426\u6709\u4e0a\u7ea7\uff0c\u53ea\u6709\u6709\u4e0a\u7ea7\u7684\u7528\u6237\uff0c\u624d\u80fd\u88ab\u7ed1\u5b9a\u4e3a\u4e0a\u7ea7\uff08firstAddress\u9664\u5916\uff09\u3002\u5982\u679c\u6ca1\u6709\u6b64\u9a8c\u8bc1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u968f\u610f\u62ff\u4e00\u4e2a\u5730\u5740\u7ed1\u5b9a\u6210\u4e0a\u7ea7\u4e86\r\n        require(_info[parentAddr] != address(0) || parentAddr == _initial, \"3\");\r\n        require(_info[userAddr] == address(0), \"4\");\r\n        _info[userAddr] = parentAddr;\r\n        emit Blind(1,userAddr,parentAddr,block.timestamp);\r\n    }\r\n\r\n    function getBis() public view returns (Bis memory bis){\r\n        return Bis(_price_usdt,_token_re,_token,_usdt,_collect,_initial,_multiple,_statics,_dynamic,_expand,_expand_condition,_checkinStart,_checkinStop,_oddNumber,_exchange_rate);\r\n    }\r\n\r\n    function getUserInfo(address userAddr) public view returns (UserInfo memory userInfo){\r\n        return UserInfo(_info[userAddr],_canQuota[userAddr],_check[userAddr][0],_check[userAddr][1],_check[userAddr][2],_check[userAddr][3],_userDirect[userAddr]);\r\n    }\r\n\r\n    function setBis(Bis memory bis) public onlyOwner{\r\n        _token = bis.token;\r\n        _usdt = bis.usdt;\r\n        _initial = bis.initial;\r\n        _collect = bis.collect;\r\n\r\n        _price_usdt = bis.price_usdt;\r\n        _multiple = bis.multiple;\r\n        _expand_condition = bis.expand_condition;\r\n\r\n        _statics = bis.statics;\r\n        _dynamic = bis.dynamic;\r\n        _expand = bis.expand;\r\n        _checkinStart = bis.checkinStart;\r\n        _checkinStop = bis.checkinStop;\r\n        _oddNumber = bis.oddNumber;\r\n        _exchange_rate = bis.exchangeRate;\r\n    }\r\n\r\n    function extractToken(uint256 tokenAmount) public onlyOwner{\r\n        IERC20(_token).transfer(_collect,tokenAmount);\r\n    }\r\n\r\n    function extractUsdt(uint256 usdtAmount) public onlyOwner{\r\n        IERC20(_usdt).transfer(_collect,usdtAmount);\r\n    }\r\n\r\n    function updateTokenRe(uint256 token_re) public onlyOwner{\r\n        _token_re = token_re;\r\n    }\r\n\r\n     function updatePriceUsdt(uint256 price_usdt) public onlyOwner{\r\n        _price_usdt = price_usdt;\r\n    }\r\n\r\n    function updateToken(address token) public onlyOwner{\r\n        _token = token;\r\n    }\r\n\r\n    function updateUsdt(address usdt) public onlyOwner{\r\n        _usdt = usdt;\r\n    }\r\n\r\n    function updateCollect(address collect) public onlyOwner{\r\n        _collect = collect;\r\n    }\r\n\r\n    function updateInitial(address initial) public onlyOwner{\r\n        _initial = initial;\r\n    }\r\n\r\n    function updateMultiple(uint256 multiple) public onlyOwner{\r\n        _multiple = multiple;\r\n    }\r\n\r\n    function updateStatic(uint256 statics) public onlyOwner{\r\n        _statics = statics;\r\n    }\r\n\r\n    function updateDynamic(uint256 dynamic) public onlyOwner{\r\n        _dynamic = dynamic;\r\n    }\r\n\r\n    function updateExpand(uint256 expand) public onlyOwner{\r\n        _expand = expand;\r\n    }\r\n\r\n    function updateExpandCondition(uint256 expand_condition) public onlyOwner{\r\n        _expand_condition = expand_condition;\r\n    }\r\n\r\n    function updateCheckinStart(uint256 checkinStart) public onlyOwner{\r\n        _checkinStart = checkinStart;\r\n    }\r\n\r\n    function updateCheckinStop(uint256 checkinStop) public onlyOwner{\r\n        _checkinStop = checkinStop;\r\n    }\r\n\r\n    function updateOddNumber(uint256 oddNumber) public onlyOwner{\r\n        _oddNumber = oddNumber;\r\n    }\r\n\r\n    function updateInfo(address userAddr,address parentAddr) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _info[userAddr] = parentAddr;\r\n    }\r\n\r\n    function updateCanQuota(address userAddr,uint256 canQuota) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _canQuota[userAddr] = canQuota;\r\n    }\r\n\r\n    function updateCheck(\r\n        address userAddr,\r\n        uint256 checkTotal,\r\n        uint256 checkSalary,\r\n        uint256 checkAward,\r\n        uint256 checkSubsidy) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _check[userAddr][0] = checkTotal;\r\n        _check[userAddr][1] = checkSalary;\r\n        _check[userAddr][2] = checkAward;\r\n        _check[userAddr][3] = checkSubsidy;\r\n    }\r\n\r\n    function updateUserDirect(address userAddr,uint256 userDirect) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _userDirect[userAddr] = userDirect;\r\n    }\r\n\r\n    function setMayor(address addr,uint256 val) public onlyOwner{\r\n        _mayorAddr = addr;\r\n        _mayorDivide = val;\r\n    }\r\n\r\n    function setGovernor(address addr,uint256 val) public onlyOwner{\r\n        _governorAddr = addr;\r\n        _governorDivide = val;\r\n    }\r\n\r\n    function setOperate(address addr,uint256 val) public onlyOwner{\r\n        _operateAddr = addr;\r\n        _operateDivide = val;\r\n    }\r\n\r\n    function setTerminal(address addr,uint256 val) public onlyOwner{\r\n        _terminalAddr = addr;\r\n        _terminalDivide = val;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Blind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkOld\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkChange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Check\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Checkin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Minerals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivequota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivequota_usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReceiveBenefits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_canQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_checkinStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_checkinStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collect\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dynamic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_exchange_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expand_condition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_governorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_governorDivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initial\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mayorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mayorDivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_multiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oddNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operateAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operateDivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_price_usdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_statics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_terminalAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_terminalDivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token_re\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddrs\",\"type\":\"address[]\"}],\"name\":\"batchCheckin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"checkin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"extractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"extractUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBis\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price_usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_re\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collect\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statics\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expand_condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkinStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkinStop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oddNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushu.Bis\",\"name\":\"bis\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getTime24\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time24\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSubsidy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDirect\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushu.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseMinerals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price_usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_re\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collect\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statics\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expand_condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkinStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkinStop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oddNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushu.Bis\",\"name\":\"bis\",\"type\":\"tuple\"}],\"name\":\"setBis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMayor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setOperate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"}],\"name\":\"updateCanQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSubsidy\",\"type\":\"uint256\"}],\"name\":\"updateCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"checkinStart\",\"type\":\"uint256\"}],\"name\":\"updateCheckinStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"checkinStop\",\"type\":\"uint256\"}],\"name\":\"updateCheckinStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collect\",\"type\":\"address\"}],\"name\":\"updateCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamic\",\"type\":\"uint256\"}],\"name\":\"updateDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expand\",\"type\":\"uint256\"}],\"name\":\"updateExpand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expand_condition\",\"type\":\"uint256\"}],\"name\":\"updateExpandCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"}],\"name\":\"updateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"}],\"name\":\"updateInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"}],\"name\":\"updateMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oddNumber\",\"type\":\"uint256\"}],\"name\":\"updateOddNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_usdt\",\"type\":\"uint256\"}],\"name\":\"updatePriceUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"statics\",\"type\":\"uint256\"}],\"name\":\"updateStatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_re\",\"type\":\"uint256\"}],\"name\":\"updateTokenRe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"name\":\"updateUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userDirect\",\"type\":\"uint256\"}],\"name\":\"updateUserDirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MinpitKyushu", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://554a762e54229e584ff857e9a4f85f426a5431c847c391d8965d7a465d0197e5"}