{"SourceCode": "/*\r\n    SPDX-License-Identifier: MIT\r\n    A Bankteller Production\r\n    Elephant Money\r\n    Copyright 2023\r\n*/\r\n\r\n/*\r\n    Elephant Money Futures\r\n\r\n    - A high yield cashhflow engine that earns 0.5% daily on cash \r\n    - Immutable contract and yield generation, 100% on-chain\r\n    - Scalable and always open for business\r\n    - Core yield generation is provided by the unstoppable and proven ELEPHANT Treasury buyback program\r\n    - Deposit BNB and earn BNB rewards; no stable coin risk\r\n    - Paid out at 0.5% daily of your remaining balance\r\n    - Auto compound rewards on ever deposit \r\n    - Claim at any time down to the second\r\n    - No fees or taxes of any kind\r\n    - Yield is paid by a growing Elephant Treasury\r\n    - 90% of funds market buy ELEPHANT\r\n    - 10% of funds are held in a BNB Reserve for yield repayment\r\n    - 200 USD deposit minimum, 1M USD max balance, 2.5M USD max payouts, and 50K USD max daily claim \r\n\r\n    Only at https://elephant.money\r\n\r\n*/\r\n\r\npragma solidity 0.8.18;\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context is ReentrancyGuard {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    bool private _paused;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event RunStatusUpdated(bool indexed paused);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _paused = false;\r\n        emit RunStatusUpdated(_paused);\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if paused status\r\n     */\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called when contract is paused\r\n     */\r\n    modifier isRunning() {\r\n        require(\r\n            _paused == false,\r\n            \"Function unavailable because contract is paused\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Pause the contract for functions that check run status\r\n     * Can only be called by the current owner.\r\n     */\r\n    function updateRunStatus(bool paused) public virtual onlyOwner {\r\n        emit RunStatusUpdated(paused);\r\n        _paused = paused;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n\r\n    /**\r\n     * @dev Throws if called by any account that's not whitelisted.\r\n     */\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender], \"not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    function addAddressToWhitelist(address addr)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        if (!whitelist[addr]) {\r\n            whitelist[addr] = true;\r\n            emit WhitelistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function addAddressesToWhitelist(address[] memory addrs)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (addAddressToWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeAddressFromWhitelist(address addr)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        if (whitelist[addr]) {\r\n            whitelist[addr] = false;\r\n            emit WhitelistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function removeAddressesFromWhitelist(address[] memory addrs)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (removeAddressFromWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Burns the amount of tokens owned by `msg.sender`.\r\n     */\r\n    function burn(uint256 _value) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IElephantYieldEngine {\r\n\r\n    function yield(address _user, uint256 _amount)\r\n        external\r\n        returns (uint256  yieldAmount);\r\n\r\n    function estimateCollateralToCore(uint256 collateralAmount)\r\n        external\r\n        view\r\n        returns (uint256 wethAmount, uint256 coreAmount);\r\n}\r\n\r\ninterface ITreasury {\r\n    function withdraw(uint256 tokenAmount) external;\r\n\r\n    function withdrawTo(address _to, uint256 _amount) external;\r\n}\r\n\r\ninterface ITreasuryV2 {\r\n    function withdraw(address _to, uint256 _amount, bool _force) external;\r\n\r\n    function withdrawToken(address _to, address _tokenAddress, uint256 _amount, bool _force) external;\r\n}\r\n\r\ninterface ISponsorData {\r\n    \r\n    function add(address _user, uint256 _amount) external;\r\n\r\n    function settle(address _user) external;\r\n}\r\n\r\n//@dev Callback function called by FarmEngine.yield upon completion\r\ninterface IReferralReport {\r\n    function reward_distribution(address _referrer, address _user, uint _referrer_reward, uint _user_reward) external;\r\n\r\n}\r\n\r\ninterface IEACAggregatorProxy {\r\n\r\n    function latestRoundData() external view returns (uint80 roundId , int256 answer , uint256 startedAt , uint256 updatedAt , uint80 answeredInRound);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\ninterface IPcsPeriodicTwapOracle {\r\n\r\n    // performs chained update calculations on any number of pairs\r\n    //whitelisted to avoid DDOS attacks since new pairs will be registered\r\n    function updatePath(address[] memory path) external;\r\n\r\n    //updates all pairs registered \r\n    function updateAll() external returns (uint updatedPairs) ;\r\n    \r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function consultAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n\r\n    // returns the amount out corresponding to the amount in for a given token using the moving average over the time\r\n    // range [now - [windowSize, windowSize - periodSize * 2], now]\r\n    // update must have been called for the bucket corresponding to timestamp `now - windowSize`\r\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\r\n\r\n}\r\n\r\n///@dev Simple onchain referral storage\r\ninterface IReferralData {\r\n    \r\n    function updateReferral(address referrer) external ;\r\n\r\n    ///@dev Return the referral of the sender\r\n    function myReferrer() external view returns (address);\r\n\r\n    //@dev Return true if referrer of user is sender\r\n    function isMyReferral(address _user) external view returns (bool);\r\n\r\n    //@dev Return true if user has a referrer\r\n    function hasReferrer(address _user) external view returns (bool);\r\n\r\n    ///@dev Return the referral of a participant\r\n    function referrerOf(address participant) external view returns (address) ;\r\n\r\n    ///@dev Return the referral count of a participant\r\n    function referralCountOf(address _user) external view returns (uint256) ;\r\n}\r\n\r\n//@dev Tracks summary information for users across all farms\r\nstruct FuturesUser {\r\n    bool exists; //has the user joined\r\n    uint deposits; //total inbound deposits\r\n    uint compound_deposits; //compound deposit; not fresh capital \r\n    uint current_balance; //current balance\r\n    uint payouts;  //total yield payouts across all farms\r\n    uint rewards; //partner rewards\r\n    uint last_time; //last interaction\r\n}\r\n\r\nstruct FuturesGlobals {\r\n    uint256  total_users;\r\n    uint256  total_deposited;\r\n    uint256  total_compound_deposited;\r\n    uint256  total_claimed;\r\n    uint256  total_rewards;\r\n    uint256  total_txs;\r\n    uint256  current_balance;\r\n}\r\n\r\n//@dev Immutable Vault that stores ledger for Elephant Money Futures\r\ncontract FuturesVault is Whitelist {\r\n    mapping(address => FuturesUser) private users; //Asset -> User\r\n\r\n    FuturesGlobals private globals;\r\n\r\n    constructor() Ownable() {}\r\n\r\n\r\n    //@dev Get User info\r\n    function getUser(address _user) external view returns (FuturesUser memory) {\r\n        return users[_user];\r\n    }\r\n\r\n    //@dev Get FuturesGlobal info\r\n    function getGlobals() external view returns (FuturesGlobals memory) {\r\n        return globals;\r\n    }\r\n\r\n    //@dev commit User Info\r\n    function commitUser(address _user, FuturesUser memory _user_data)  onlyWhitelisted isRunning external {\r\n\r\n        //update user\r\n        users[_user].exists = _user_data.exists; \r\n        users[_user].deposits = _user_data.deposits; \r\n        users[_user].compound_deposits = _user_data.compound_deposits;  \r\n        users[_user].current_balance = _user_data.current_balance; \r\n        users[_user].payouts = _user_data.payouts;  \r\n        users[_user].rewards = _user_data.rewards; \r\n        users[_user].last_time = _user_data.last_time;\r\n\r\n    }\r\n\r\n    //@dev commit Globals Info\r\n    function commitGlobals(FuturesGlobals memory _globals) onlyWhitelisted isRunning external {\r\n\r\n        //update globals\r\n        globals.total_users = _globals.total_users;\r\n        globals.total_deposited = _globals.total_deposited;\r\n        globals.total_compound_deposited = _globals.total_compound_deposited;\r\n        globals.total_claimed = _globals.total_claimed;\r\n        globals.total_rewards = _globals.total_rewards;\r\n        globals.total_txs = _globals.total_txs;\r\n        globals.current_balance = _globals.current_balance ;\r\n        \r\n    }\r\n\r\n}\r\n\r\n//@dev  Business logic for Elephan Money Futures\r\n//Engine can be swapped out if upgrades are needed\r\n//Only yield infrastructure and vault can be updated\r\ncontract FuturesEngine is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    AddressRegistry private registry;\r\n\r\n    //Financial Model\r\n    uint256 public constant referenceApr = 182.5e18; //0.5% daily\r\n    uint256 public constant maxBalance = 1000000e18; //1M\r\n    uint256 public constant minimumDeposit = 200e18; //200+ deposits; will compound available rewards\r\n    uint256 public constant maxAvailable = 50000e18; //50K max claim daily, 10 days missed claims \r\n    uint256 public constant maxPayouts = (maxBalance * 5e18) / 2e18; //2.5M\r\n\r\n    bool public forceLiquidity = true;\r\n    uint256 public slippage = 995;\r\n\r\n    \r\n    //Immutable long term network contracts\r\n    ITreasuryV2 public  immutable wethTreasury;\r\n    IEACAggregatorProxy public immutable chainlinkProxy;\r\n    ITreasury public immutable coreTreasury;\r\n    IERC20 public immutable coreToken;\r\n    IUniswapV2Router02 public  immutable collateralRouter;\r\n    IPcsPeriodicTwapOracle public immutable oracle;\r\n    \r\n    //Updatable components\r\n    FuturesVault public vault; \r\n   \r\n\r\n    //events\r\n    event Deposit(address indexed user, uint256 amount, uint256 wethAmount);\r\n    event CompoundDeposit(address indexed user, uint256 amount);\r\n    event Claim(address indexed user, uint256 amount, uint256 wethAmount);\r\n    event Transfer(address indexed user, address indexed new_user, uint256 current_balance);\r\n    event UpdateVault(address prev_vault, address vault);\r\n    event UpdateSlippage(uint oldSlippage, uint newSlippage);\r\n    event UpdateForceLiquidity(bool value, bool new_value);\r\n\r\n    //@dev Creates a FuturesEngine that contains upgradeable business logic for Futures Vault\r\n    constructor() Ownable() {\r\n\r\n         //init reg\r\n        registry = new AddressRegistry();\r\n\r\n        /* mythx-disable SWC-113 */\r\n\r\n        //treasury setup\r\n        wethTreasury = ITreasuryV2(registry.wethTreasuryAddress()); \r\n\r\n          //setup the core tokens\r\n        coreToken = IERC20(registry.coreAddress());\r\n\r\n        //the collateral router can be upgraded in the future\r\n        collateralRouter = IUniswapV2Router02(registry.routerAddress());\r\n\r\n        //treasury setup\r\n        coreTreasury = ITreasury(registry.coreTreasuryAddress());\r\n\r\n        chainlinkProxy = IEACAggregatorProxy(registry.chainlinkBNBAddress());\r\n\r\n        oracle = IPcsPeriodicTwapOracle(registry.oracleAddress());\r\n       \r\n\r\n    }\r\n\r\n    //Administrative//\r\n\r\n    //@dev Update the FuturesVault\r\n    function updateFuturesVault(address _vault) external onlyOwner {\r\n        require(_vault != address(0), \"vault must be non-zero\");\r\n\r\n        emit UpdateVault(address(vault), _vault);\r\n\r\n        vault = FuturesVault(_vault);\r\n    }\r\n\r\n    function updatesSlippage(uint _slippage) onlyOwner external {\r\n        require(_slippage >= 850 && _slippage < 1000, \"slippage must be 850 <= slippage < 1000\");\r\n\r\n        slippage = _slippage;\r\n\r\n        emit UpdateSlippage(slippage, _slippage);\r\n    } \r\n\r\n\r\n    ///  Views  ///\r\n\r\n    //@dev Get User info\r\n    function getUser(address _user)\r\n        external\r\n        view\r\n        returns (FuturesUser memory)\r\n    {\r\n        return vault.getUser(_user);\r\n    }\r\n\r\n    //@dev Get contract snapshot\r\n    function getInfo()\r\n        external\r\n        view\r\n        returns (\r\n            FuturesGlobals memory\r\n        )\r\n    {\r\n        return vault.getGlobals();\r\n    }\r\n\r\n    //@dev Forces the yield engine to topoff liquidity in the collateral buffer on every tx\r\n    //a test harness\r\n    function updateForceLiquidity(bool _force) external onlyOwner {\r\n        \r\n        emit UpdateForceLiquidity(forceLiquidity, _force);\r\n        forceLiquidity = _force;\r\n    }\r\n\r\n    ////  User Functions ////\r\n\r\n    //@dev Deposit BNB and get credit with dollar amount\r\n    //Is not available if the system is paused\r\n    function deposit() isRunning nonReentrant external payable {\r\n\r\n        //optimistically update price\r\n        updatePaths();\r\n        \r\n        uint _wethAmount = msg.value;\r\n        uint _amount =  estimateCollateralAmount(_wethAmount);\r\n        \r\n        //Only the key holder can invest their funds\r\n        address _user = msg.sender; \r\n\r\n        FuturesUser memory userData = vault.getUser(_user);\r\n        FuturesGlobals memory globalsData = vault.getGlobals();\r\n        \r\n        require(_amount >= minimumDeposit, \"amount less than minimum deposit\");\r\n        require(userData.current_balance + _amount <= maxBalance, \"max balance exceeded\" );\r\n        require(userData.payouts <= maxPayouts, \"max payouts exceeded\");\r\n\r\n        //90% goes directly to the treasury; START WETH ACCOUNTING\r\n        uint _treasuryAmount = _wethAmount * 90 / 100; \r\n        uint _wethTreasuryAmount = _wethAmount - _treasuryAmount;\r\n\r\n        //Buy ELEPHANT\r\n        buyForTreasury(_treasuryAmount);\r\n\r\n        //Send 10% to WETHTreasury\r\n        payable(registry.wethTreasuryAddress()).transfer(_wethTreasuryAmount);\r\n        \r\n        //END WETH ACCOUNTING \r\n\r\n        //update user stats\r\n        if (userData.exists == false) {\r\n            //attempt to migrate user\r\n            userData.exists = true;\r\n            globalsData.total_users += 1;  \r\n\r\n            //commit updates\r\n            vault.commitUser(_user, userData);\r\n            vault.commitGlobals(globalsData);\r\n\r\n        } \r\n\r\n        //if user has an existing balance see if we have to claim yield before proceeding\r\n        //optimistically claim yield before reset\r\n        //if there is a balance we potentially have yield\r\n        if (userData.current_balance > 0){\r\n            compoundYield(_user);\r\n\r\n            //reload user data after a mutable function\r\n            userData = vault.getUser(_user); \r\n            globalsData = vault.getGlobals();\r\n        }\r\n\r\n        //update user\r\n        userData.deposits += _amount;\r\n        userData.last_time = block.timestamp;\r\n        userData.current_balance += _amount;\r\n\r\n        globalsData.total_deposited += _amount; \r\n        globalsData.current_balance += _amount;\r\n        globalsData.total_txs += 1;\r\n\r\n        //commit updates\r\n        vault.commitUser(_user, userData);\r\n        vault.commitGlobals(globalsData);\r\n\r\n        //events\r\n        emit Deposit(_user, _amount, msg.value);\r\n    }\r\n\r\n\r\n    //@dev Claims earned interest for the caller\r\n    function claim() nonReentrant external returns (bool success){\r\n\r\n        //optimistically update price\r\n        updatePaths();\r\n        \r\n        //Only the owner of funds can claim funds\r\n        address _user = msg.sender;\r\n\r\n        FuturesUser memory userData = vault.getUser(_user);\r\n\r\n        //checks\r\n        require(\r\n            userData.exists,\r\n            \"User is not registered\"\r\n        );\r\n        require(\r\n            userData.current_balance > 0 ,\r\n            \"balance is required to earn yield\"\r\n        );\r\n\r\n        success = distributeYield(_user);\r\n      \r\n    }\r\n\r\n\r\n    //@dev Returns tax bracket and adjusted amount based on the bracket \r\n    function available(address _user) public view returns (uint256 _limiterRate, uint256 _adjustedAmount) {\r\n\r\n        //Load data\r\n        FuturesUser memory userData = vault.getUser(_user);\r\n\r\n        //calculate gross available\r\n        uint256 share;\r\n\r\n        if(userData.current_balance > 0) {\r\n            //Using 1e18 we capture all significant digits when calculating available divs\r\n            share = userData.current_balance //payout is asymptotic and uses the current balance\r\n                    * referenceApr //convert to daily apr\r\n                    / (365 * 100e18)\r\n                    / 24 hours; //divide the profit by payout rate and seconds in the day;\r\n            _adjustedAmount = share * block.timestamp.safeSub(userData.last_time); \r\n\r\n            _adjustedAmount = maxAvailable.min(_adjustedAmount); //minimize red candles\r\n\r\n        }\r\n\r\n        //apply compound rate limiter\r\n        uint256 _comp_surplus = userData.compound_deposits.safeSub(userData.deposits);\r\n\r\n        if (_comp_surplus < 50000e18){\r\n            _limiterRate = 0;\r\n        } else if ( 50000e18 <= _comp_surplus && _comp_surplus < 250000e18 ){\r\n            _limiterRate = 10;\r\n        } else if ( 250000e18 <= _comp_surplus && _comp_surplus < 500000e18 ){\r\n            _limiterRate = 15;\r\n        } else if ( 500000e18 <= _comp_surplus && _comp_surplus < 750000e18 ){\r\n            _limiterRate = 25;\r\n        } else if ( 750000e18 <= _comp_surplus && _comp_surplus < 1000000e18 ){\r\n            _limiterRate = 35;\r\n        } else if (_comp_surplus >= 1000000e18 ){\r\n            _limiterRate = 50;\r\n        }\r\n\r\n        _adjustedAmount = _adjustedAmount * (100 - _limiterRate) / 100;\r\n\r\n\r\n        // payout greater than the balance just pay the balance\r\n        if(_adjustedAmount > userData.current_balance) {\r\n            _adjustedAmount = userData.current_balance;\r\n        }\r\n\r\n        _adjustedAmount = scaleByPeg(_adjustedAmount);\r\n\r\n    }\r\n\r\n    //   Internal Functions  //\r\n\r\n    //@dev Checks if yield is available and distributes before performing additional operations\r\n    //distributes only when yield is positive\r\n    //inputs are validated by external facing functions \r\n    function distributeYield(address _user) private returns (bool success) {\r\n\r\n        FuturesUser memory userData = vault.getUser(_user);\r\n        FuturesGlobals memory globalsData = vault.getGlobals();\r\n        \r\n        //get available\r\n        (, uint256 _amount) = available(_user);\r\n\r\n        // payout remaining allowable divs if exceeds\r\n        if(userData.payouts + _amount > maxPayouts) {\r\n            _amount = maxPayouts.safeSub(userData.payouts);\r\n            _amount = _amount.min(userData.current_balance);  //withdraw up to the current balance\r\n        }\r\n\r\n        //attempt to payout yield and update stats;\r\n        if (_amount > 0) {\r\n\r\n            //transfer amount to user; mutable\r\n            uint _wethAmount = yield(_user, _amount);\r\n\r\n            //reload data after a mutable function\r\n            userData = vault.getUser(_user);\r\n            globalsData = vault.getGlobals();\r\n        \r\n            if (_amount > 0) { //second check with delivered yield\r\n                //user stats\r\n                userData.payouts += _amount;\r\n                userData.current_balance = userData.current_balance.safeSub(_amount);\r\n                userData.last_time = block.timestamp;\r\n\r\n                //total stats\r\n                globalsData.total_claimed += _amount;\r\n                globalsData.total_txs += 1;\r\n                globalsData.current_balance = globalsData.current_balance.safeSub(_amount);\r\n\r\n                //commit updates\r\n                vault.commitUser(_user, userData);\r\n                vault.commitGlobals(globalsData);\r\n\r\n                //log events\r\n                emit Claim(_user, _amount, _wethAmount);\r\n\r\n                return true;\r\n            }\r\n\r\n        } \r\n\r\n        //default\r\n        return false;\r\n    } \r\n\r\n    //@dev Checks if yield is available and compound before performing additional operations\r\n    //compound only when yield is positive\r\n    function compoundYield(address _user) private returns (bool success) {\r\n\r\n        FuturesUser memory userData = vault.getUser(_user);\r\n        FuturesGlobals memory globalsData = vault.getGlobals();\r\n        \r\n        //get available\r\n        ( , uint256 _amount) = available(_user);\r\n\r\n        // payout remaining allowable divs if exceeds\r\n        if(userData.payouts + _amount > maxPayouts) {\r\n            _amount = maxPayouts.safeSub(userData.payouts);\r\n        }\r\n\r\n        //attempt to compound yield and update stats;\r\n        if (_amount > 0) {\r\n\r\n            //user stats\r\n            userData.deposits += 0; //compounding is not a deposit; here for clarity\r\n            userData.compound_deposits += _amount;\r\n            userData.payouts += _amount;\r\n            userData.current_balance += _amount; \r\n            userData.last_time = block.timestamp;\r\n\r\n            //total stats\r\n            globalsData.total_deposited += 0; //compounding  doesn't move the needle; here for clarity\r\n            globalsData.total_compound_deposited += _amount;\r\n            globalsData.total_claimed += _amount;\r\n            globalsData.current_balance += _amount;\r\n            globalsData.total_txs += 1;\r\n            \r\n            //commit updates\r\n            vault.commitUser(_user, userData);\r\n            vault.commitGlobals(globalsData);\r\n\r\n            //log events\r\n            emit Claim(_user, _amount, 0);\r\n            emit CompoundDeposit(_user, _amount);\r\n\r\n            return true;\r\n\r\n        } else {\r\n            //do nothing upon failure\r\n            return false;\r\n        }\r\n    } \r\n\r\n    //@dev Transfer account to another wallet address\r\n    function transfer(address _newUser) nonReentrant external  {\r\n\r\n        address _user = msg.sender;\r\n\r\n        FuturesUser memory userData = vault.getUser(_user);\r\n        FuturesUser memory newData =  vault.getUser(_newUser);\r\n        FuturesGlobals memory globalsData = vault.getGlobals();\r\n\r\n        //Only the owner can transfer\r\n        require(userData.exists, \"user must exists\");\r\n        require(newData.exists == false && _newUser != address(0), \"new address must not exist\");\r\n\r\n        //Transfer\r\n        newData.exists = true;\r\n        newData.deposits = userData.deposits;\r\n        newData.current_balance = userData.current_balance;\r\n        newData.payouts = userData.payouts;\r\n        newData.compound_deposits = userData.compound_deposits;\r\n        newData.rewards = userData.rewards;\r\n        newData.last_time = userData.last_time; \r\n\r\n        //Zero out old account\r\n        userData.exists = true; //once an account is created source streams are only counted once\r\n        userData.deposits = 0;\r\n        userData.current_balance = 0;\r\n        userData.compound_deposits = 0;\r\n        userData.payouts = 0;\r\n        userData.rewards = 0;\r\n        userData.last_time = 0;\r\n\r\n        //house keeping\r\n        globalsData.total_txs += 1;\r\n\r\n        //commit\r\n        vault.commitUser(_user, userData);\r\n        vault.commitUser(_newUser, newData);\r\n        vault.commitGlobals(globalsData);\r\n\r\n        //log\r\n        emit Transfer(_user, _newUser, newData.current_balance);\r\n\r\n    }\r\n\r\n    /// Internal Functions ////\r\n\r\n    //@dev Claim and payout using the reserve\r\n    //Sender must implement IReferralReport to succeed\r\n    function yield(address _user, uint256 _amount)\r\n        private\r\n        \r\n        returns (uint wethAmount)\r\n    {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        wethAmount = estimateWethAmount(_amount);\r\n\r\n        uint coreAmount = estimateCoreAmount(wethAmount);\r\n\r\n        //if yield is greater than 1%\r\n        if (forceLiquidity && wethAmount > registry.wethTreasuryAddress().balance / 100){\r\n            liquidateCore(registry.wethTreasuryAddress(), coreAmount * 110 / 100);\r\n        }\r\n\r\n        wethTreasury.withdraw(_user, wethAmount, false);  //will fail if funds aren't available\r\n            \r\n        return wethAmount;\r\n    }\r\n\r\n    function buyForTreasury(uint _amount)  private {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = collateralRouter.WETH();\r\n        path[1] = registry.coreAddress();\r\n\r\n        uint[] memory output =  oracle.consultAmountsOut(_amount, path);\r\n\r\n        uint minimum =  output[1] * slippage / 1000;\r\n\r\n\r\n        //buy immediately and send to the treasury\r\n        collateralRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _amount}(minimum, path, registry.coreTreasuryAddress(), block.timestamp);\r\n\r\n    }\r\n\r\n    //@dev liquidate core tokens from the treasury to the destination\r\n    function liquidateCore(address destination, uint256 _amount) private returns (uint wethAmount) {\r\n   \r\n        //Convert from collateral to backed\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(coreToken);\r\n        path[1] = collateralRouter.WETH();\r\n\r\n        //withdraw from treasury\r\n        coreTreasury.withdraw(_amount);\r\n        \r\n        //approve & swap\r\n        TransferHelper.safeApprove(address(coreToken), address(collateralRouter), _amount, 'FuturesEngine: liquidateCore, approve');\r\n\r\n        uint[] memory output =  oracle.consultAmountsOut(_amount, path);\r\n\r\n        uint minimumOut = output[1] * slippage / 1000;\r\n\r\n        uint initialBalance = destination.balance;\r\n\r\n        collateralRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            minimumOut, \r\n            path,\r\n            destination, \r\n            block.timestamp \r\n        );\r\n    \r\n        wethAmount = destination.balance - initialBalance;\r\n\r\n  }\r\n\r\n    function updatePaths() private {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = collateralRouter.WETH();\r\n        path[1] = registry.coreAddress();\r\n\r\n        // BNB -> ELEPHANT\r\n        oracle.updatePath(path);\r\n\r\n        path[1] = registry.backedAddress();\r\n\r\n        // BNB -> TRUNK \r\n        oracle.updatePath(path);\r\n\r\n        path[0] = registry.coreAddress();\r\n        path[1] = collateralRouter.WETH();\r\n\r\n        // ELEPHANT -> BNB \r\n        oracle.updatePath(path);\r\n\r\n        path = new address[](3);\r\n\r\n        path[0] = registry.coreAddress();\r\n        path[1] = collateralRouter.WETH();\r\n        path[2] = registry.backedAddress();\r\n\r\n        // ELEPHANT -> TRUNK\r\n        oracle.updatePath(path);\r\n\r\n    }\r\n\r\n\r\n    function estimateWethAmount(uint collateralAmount) public view returns (uint wethAmount){\r\n        (, int256 answer , , , ) = chainlinkProxy.latestRoundData();\r\n        uint8 decimals  = chainlinkProxy.decimals();\r\n\r\n        wethAmount = collateralAmount * (10 ** decimals) / uint(answer); \r\n    }\r\n\r\n    function estimateCollateralAmount(uint wethAmount) public view returns (uint collateralAmount){\r\n        (, int256 answer , , , ) = chainlinkProxy.latestRoundData();\r\n        uint8 decimals  = chainlinkProxy.decimals();\r\n\r\n        collateralAmount = wethAmount * uint(answer) / (10 ** decimals);\r\n    }\r\n\r\n    function estimateCoreAmount(uint wethAmount) public view returns (uint coreAmount) {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = collateralRouter.WETH();\r\n        path[1] = registry.coreAddress();\r\n\r\n        uint[] memory output =  oracle.consultAmountsOut(wethAmount, path);\r\n\r\n        coreAmount = output[1];\r\n\r\n    }\r\n\r\n    //@dev Scales an amount by how close backed token is to peg\r\n    function scaleByPeg(uint amount) public view returns (uint scaledAmount) {\r\n\r\n        FuturesGlobals memory globalsData = vault.getGlobals();\r\n\r\n        uint dailyLiability = globalsData.current_balance * 5 / 1000; //0.5% (0.005) per day\r\n\r\n        uint wethTreasuryInCollateral = estimateCollateralAmount(registry.wethTreasuryAddress().balance);\r\n\r\n        scaledAmount = amount * wethTreasuryInCollateral / dailyLiability;\r\n\r\n        scaledAmount = scaledAmount.min(amount);\r\n\r\n    }\r\n}\r\n\r\n//@dev Simple onchain oracle for important Elephant Money smart contracts\r\ncontract AddressRegistry {\r\n    address public constant coreAddress =\r\n        address(0xE283D0e3B8c102BAdF5E8166B73E02D96d92F688); //ELEPHANT\r\n    address public constant coreTreasuryAddress =\r\n        address(0xAF0980A0f52954777C491166E7F40DB2B6fBb4Fc); //ELEPHANT Treasury\r\n    address public constant wethTreasuryAddress = \r\n        address(0x98F6c7c953Cf4cef0fd632b2509c9e349687FC92); //WETH Treasury\r\n    address public constant collateralAddress =\r\n        address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); //BUSD\r\n    address public constant collateralTreasuryAddress =\r\n        address(0xCb5a02BB3a38e92E591d323d6824586608cE8cE4); //BUSD Treasury\r\n    address public constant collateralRedemptionAddress =\r\n        address(0xD3B4fB63e249a727b9976864B28184b85aBc6fDf); //BUSD Redemption Pool\r\n    address public constant collateralBufferAddress =\r\n        address(0xd9dE89efB084FfF7900Eac23F2A991894500Ec3E); //BUSD Buffer Pool\r\n    address public constant backedAddress =\r\n        address(0xdd325C38b12903B727D16961e61333f4871A70E0); //TRUNK Stable coin\r\n    address public constant backedTreasuryAddress =\r\n        address(0xaCEf13009D7E5701798a0D2c7cc7E07f6937bfDd); //TRUNK Treasury\r\n    address public constant backedLPAddress =\r\n        address(0xf15A72B15fC4CAeD6FaDB1ba7347f6CCD1E0Aede); //TRUNK/BUSD LP\r\n    address public constant routerAddress =\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public constant chainlinkBNBAddress = \r\n        address(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); //BNB/USD Price\r\n    address public constant oracleAddress = address(0x5606ee12d741716c260fDA2f6C89EfDf60326D3C); //TWAPOracle\r\n    //PCS Factory - 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /* @dev Subtracts two numbers, else returns zero */\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b > a) {\r\n            return 0;\r\n        } else {\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory notes\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string.concat('STF', notes));\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value,\r\n        string memory notes\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string.concat('ST', notes));\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value,\r\n        string memory notes\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string.concat('SA', notes));\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address to, uint256 value, string memory notes) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, string.concat('STE', notes));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompoundDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"RunStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current_balance\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"new_value\",\"type\":\"bool\"}],\"name\":\"UpdateForceLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdateSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prev_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"UpdateVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_limiterRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adjustedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkProxy\",\"outputs\":[{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreTreasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"estimateCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"estimateCoreAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coreAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"estimateWethAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_compound_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_txs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_balance\",\"type\":\"uint256\"}],\"internalType\":\"struct FuturesGlobals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compound_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_time\",\"type\":\"uint256\"}],\"internalType\":\"struct FuturesUser\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPcsPeriodicTwapOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"scaleByPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_force\",\"type\":\"bool\"}],\"name\":\"updateForceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"updateFuturesVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"updateRunStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"updatesSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract FuturesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethTreasury\",\"outputs\":[{\"internalType\":\"contract ITreasuryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FuturesEngine", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1db04723c2832341bdaef913217dbb5d0dbf5aece64da8e267316573b571d5d6"}