{"SourceCode": "// Sources flattened with hardhat v2.6.5 https://hardhat.org\r\n \r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n \r\n// SPDX-License-Identifier: MIT\r\n \r\npragma solidity ^0.8.0;\r\n \r\n/**\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\n   function _msgSender() internal view virtual returns (address) {\r\n       return msg.sender;\r\n   }\r\n \r\n   function _msgData() internal view virtual returns (bytes calldata) {\r\n       return msg.data;\r\n   }\r\n}\r\n \r\n \r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n \r\npragma solidity ^0.8.0;\r\n \r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* By default, the owner account will be the one that deploys the contract. This\r\n* can later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\n   address private _owner;\r\n \r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n   /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n   constructor() {\r\n       _setOwner(_msgSender());\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n   function owner() public view virtual returns (address) {\r\n       return _owner;\r\n   }\r\n \r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n   modifier onlyOwner() {\r\n       require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n       _;\r\n   }\r\n \r\n   /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n   function renounceOwnership() public virtual onlyOwner {\r\n       _setOwner(address(0));\r\n   }\r\n \r\n   /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n   function transferOwnership(address newOwner) public virtual onlyOwner {\r\n       require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n       _setOwner(newOwner);\r\n   }\r\n \r\n   function _setOwner(address newOwner) private {\r\n       address oldOwner = _owner;\r\n       _owner = newOwner;\r\n       emit OwnershipTransferred(oldOwner, newOwner);\r\n   }\r\n}\r\n \r\n \r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n \r\npragma solidity ^0.8.0;\r\n \r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n   /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n   function totalSupply() external view returns (uint256);\r\n \r\n   /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n   function balanceOf(address account) external view returns (uint256);\r\n \r\n   /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n   /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n   function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n   /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n   /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transferFrom(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n   ) external returns (bool);\r\n \r\n   /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n   /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n \r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n \r\n/**\r\n* @dev Interface for the optional metadata functions from the ERC20 standard.\r\n*\r\n* _Available since v4.1._\r\n*/\r\ninterface IERC20Metadata is IERC20 {\r\n   /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() external view returns (string memory);\r\n \r\n   /**\r\n    * @dev Returns the symbol of the token.\r\n    */\r\n   function symbol() external view returns (string memory);\r\n \r\n   /**\r\n    * @dev Returns the decimals places of the token.\r\n    */\r\n   function decimals() external view returns (uint8);\r\n}\r\n \r\n \r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n \r\n \r\n \r\n/**\r\n* @dev Implementation of the {IERC20} interface.\r\n*\r\n* This implementation is agnostic to the way tokens are created. This means\r\n* that a supply mechanism has to be added in a derived contract using {_mint}.\r\n* For a generic mechanism see {ERC20PresetMinterPauser}.\r\n*\r\n* TIP: For a detailed writeup see our guide\r\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n* to implement supply mechanisms].\r\n*\r\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n* instead returning `false` on failure. This behavior is nonetheless\r\n* conventional and does not conflict with the expectations of ERC20\r\n* applications.\r\n*\r\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n* This allows applications to reconstruct the allowance for all accounts just\r\n* by listening to said events. Other implementations of the EIP may not emit\r\n* these events, as it isn't required by the specification.\r\n*\r\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n* functions have been added to mitigate the well-known issues around setting\r\n* allowances. See {IERC20-approve}.\r\n*/\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n   mapping(address => uint256) private _balances;\r\n \r\n   mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n   uint256 private _totalSupply;\r\n \r\n   string private _name;\r\n   string private _symbol;\r\n \r\n   /**\r\n    * @dev Sets the values for {name} and {symbol}.\r\n    *\r\n    * The default value of {decimals} is 18. To select a different value for\r\n    * {decimals} you should overload it.\r\n    *\r\n    * All two of these values are immutable: they can only be set once during\r\n    * construction.\r\n    */\r\n   constructor(string memory name_, string memory symbol_) {\r\n       _name = name_;\r\n       _symbol = symbol_;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() public view virtual override returns (string memory) {\r\n       return _name;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n   function symbol() public view virtual override returns (string memory) {\r\n       return _symbol;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n    * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n    *\r\n    * Tokens usually opt for a value of 18, imitating the relationship between\r\n    * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n    * overridden;\r\n    *\r\n    * NOTE: This information is only used for _display_ purposes: it in\r\n    * no way affects any of the arithmetic of the contract, including\r\n    * {IERC20-balanceOf} and {IERC20-transfer}.\r\n    */\r\n   function decimals() public view virtual override returns (uint8) {\r\n       return 18;\r\n   }\r\n \r\n   /**\r\n    * @dev See {IERC20-totalSupply}.\r\n    */\r\n   function totalSupply() public view virtual override returns (uint256) {\r\n       return _totalSupply;\r\n   }\r\n \r\n   /**\r\n    * @dev See {IERC20-balanceOf}.\r\n    */\r\n   function balanceOf(address account) public view virtual override returns (uint256) {\r\n       return _balances[account];\r\n   }\r\n \r\n   /**\r\n    * @dev See {IERC20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n   function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n       _transfer(_msgSender(), recipient, amount);\r\n       return true;\r\n   }\r\n \r\n   /**\r\n    * @dev See {IERC20-allowance}.\r\n    */\r\n   function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n       return _allowances[owner][spender];\r\n   }\r\n \r\n   /**\r\n    * @dev See {IERC20-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n       _approve(_msgSender(), spender, amount);\r\n       return true;\r\n   }\r\n \r\n   /**\r\n    * @dev See {IERC20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {ERC20}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` and `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    * - the caller must have allowance for ``sender``'s tokens of at least\r\n    * `amount`.\r\n    */\r\n   function transferFrom(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n   ) public virtual override returns (bool) {\r\n       _transfer(sender, recipient, amount);\r\n \r\n       uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n       require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n       unchecked {\r\n           _approve(sender, _msgSender(), currentAllowance - amount);\r\n       }\r\n \r\n       return true;\r\n   }\r\n \r\n   /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n       _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n       return true;\r\n   }\r\n \r\n   /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IERC20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n   function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n       uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n       require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n       unchecked {\r\n           _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n       }\r\n \r\n       return true;\r\n   }\r\n \r\n   /**\r\n    * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n    *\r\n    * This internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    */\r\n   function _transfer(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n   ) internal virtual {\r\n       require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n       require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n       _beforeTokenTransfer(sender, recipient, amount);\r\n \r\n       uint256 senderBalance = _balances[sender];\r\n       require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n       unchecked {\r\n           _balances[sender] = senderBalance - amount;\r\n       }\r\n       _balances[recipient] += amount;\r\n \r\n       emit Transfer(sender, recipient, amount);\r\n \r\n       _afterTokenTransfer(sender, recipient, amount);\r\n   }\r\n \r\n   /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n    * the total supply.\r\n    *\r\n    * Emits a {Transfer} event with `from` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    */\r\n   function _mint(address account, uint256 amount) internal virtual {\r\n       require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n       _beforeTokenTransfer(address(0), account, amount);\r\n \r\n       _totalSupply += amount;\r\n       _balances[account] += amount;\r\n       emit Transfer(address(0), account, amount);\r\n \r\n       _afterTokenTransfer(address(0), account, amount);\r\n   }\r\n \r\n   /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n   function _burn(address account, uint256 amount) internal virtual {\r\n       require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n       _beforeTokenTransfer(account, address(0), amount);\r\n \r\n       uint256 accountBalance = _balances[account];\r\n       require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n       unchecked {\r\n           _balances[account] = accountBalance - amount;\r\n       }\r\n       _totalSupply -= amount;\r\n \r\n       emit Transfer(account, address(0), amount);\r\n \r\n       _afterTokenTransfer(account, address(0), amount);\r\n   }\r\n \r\n   /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n    *\r\n    * This internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function _approve(\r\n       address owner,\r\n       address spender,\r\n       uint256 amount\r\n   ) internal virtual {\r\n       require(owner != address(0), \"ERC20: approve from the zero address\");\r\n       require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n       _allowances[owner][spender] = amount;\r\n       emit Approval(owner, spender, amount);\r\n   }\r\n \r\n   /**\r\n    * @dev Hook that is called before any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * will be transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n   function _beforeTokenTransfer(\r\n       address from,\r\n       address to,\r\n       uint256 amount\r\n   ) internal virtual {}\r\n \r\n   /**\r\n    * @dev Hook that is called after any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * has been transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n   function _afterTokenTransfer(\r\n       address from,\r\n       address to,\r\n       uint256 amount\r\n   ) internal virtual {}\r\n}\r\n \r\n \r\n// File contracts/BetToken.sol\r\npragma solidity 0.8.9;\r\n \r\n/**\r\n* @title BetToken\r\n*/\r\ncontract BetToken is ERC20 {\r\n   uint256 public totalHolders;\r\n   address public predictionMarket;\r\n \r\n   event Mint(address indexed _to, uint256 _value);\r\n   event Burn(address indexed _to, uint256 _value);\r\n \r\n   /**\r\n    * @dev The PositionToken constructor sets initial values.\r\n    * @param _name string The name of the Position Token.\r\n    * @param _symbol string The symbol of the Position Token.\r\n    */\r\n   constructor(string memory _name, string memory _symbol)\r\n       ERC20(_name, _symbol)\r\n   {\r\n       predictionMarket = msg.sender;\r\n   }\r\n \r\n   /**\r\n    * @dev Throws if called by any account other than PredictionMarket.\r\n    */\r\n   modifier onlyPredictionMarket() {\r\n       require(msg.sender == predictionMarket, \"PREDICTION_MARKET_ONLY\");\r\n       _;\r\n   }\r\n \r\n   /**\r\n    * @dev Mints position tokens for a user.\r\n    * @param _to address The address of beneficiary.\r\n    * @param _value uint256 The amount of tokens to be minted.\r\n    */\r\n   function mint(address _to, uint256 _value) public onlyPredictionMarket {\r\n       _mint(_to, _value);\r\n       if (balanceOf(_to) == _value) totalHolders++;\r\n       emit Mint(_to, _value);\r\n   }\r\n \r\n   /**\r\n    * @dev Burns position tokens of a user.\r\n    * @param _from address The address of beneficent.\r\n    * @param _value uint256 The amount of tokens to be burned.\r\n    */\r\n   function burn(address _from, uint256 _value) public onlyPredictionMarket {\r\n       _burn(_from, _value);\r\n       if (balanceOf(_from) == 0) totalHolders--;\r\n       emit Burn(_from, _value);\r\n   }\r\n \r\n   function burnAll(address _from) public onlyPredictionMarket {\r\n       uint256 _value = balanceOf(_from);\r\n       if (_value == 0) return;\r\n       totalHolders--;\r\n       _burn(_from, _value);\r\n       emit Burn(_from, _value);\r\n   }\r\n \r\n   function transfer(address recipient, uint256 amount)\r\n       public\r\n       override\r\n       returns (bool success)\r\n   {\r\n       if (balanceOf(recipient) == 0) totalHolders++;\r\n       if (balanceOf(msg.sender) == amount) totalHolders--;\r\n       success = super.transfer(recipient, amount);\r\n       require(success, \"ERR_TRANSFER_FAILED\");\r\n   }\r\n \r\n   function transferFrom(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n   ) public override returns (bool success) {\r\n       if (balanceOf(recipient) == 0) totalHolders++;\r\n       if (balanceOf(sender) == amount) totalHolders--;\r\n \r\n       success = super.transferFrom(sender, recipient, amount);\r\n       require(success, \"ERR_TRANSFER_FROM_FAILED\");\r\n   }\r\n}\r\n \r\n \r\n// File contracts/AggregatorV3Interface.sol\r\n \r\npragma solidity 0.8.9;\r\n \r\ninterface IAggregatorV3Interface {\r\n   function decimals() external view returns (uint8);\r\n \r\n   function description() external view returns (string memory);\r\n \r\n   function version() external view returns (uint256);\r\n \r\n   // getRoundData and latestRoundData should both raise \"No data present\"\r\n   // if they do not have data to report, instead of returning unset values\r\n   // which could be misinterpreted as actual reported values.\r\n   function getRoundData(uint80 _roundId)\r\n       external\r\n       view\r\n       returns (\r\n           uint80 roundId,\r\n           int256 answer,\r\n           uint256 startedAt,\r\n           uint256 updatedAt,\r\n           uint80 answeredInRound\r\n       );\r\n \r\n   function latestRoundData()\r\n       external\r\n       view\r\n       returns (\r\n           uint80 roundId,\r\n           int256 answer,\r\n           uint256 startedAt,\r\n           uint256 updatedAt,\r\n           uint80 answeredInRound\r\n       );\r\n}\r\n \r\n \r\n// File contracts/PredictionMarket.sol\r\npragma solidity 0.8.9;\r\n \r\n \r\ncontract PredictionMarket is Ownable {\r\n   uint256 public latestConditionIndex;\r\n   uint256 public adminFeeRate;\r\n   uint256 public ownerFeeRate;\r\n   uint256 public marketCreationFee;\r\n \r\n   address public operatorAddress;\r\n   address public ethUsdOracleAddress;\r\n \r\n   uint256 private _status;\r\n \r\n   mapping(uint256 => ConditionInfo) public conditions;\r\n \r\n   //owner/marketOwner => conditionIndex => feeClaimed\r\n   mapping(address => mapping(uint256 => uint256)) public feeClaimed;\r\n \r\n   //oracle address -> interval -> index\r\n   mapping(address => mapping(uint256 => uint256)) public autoGeneratedMarkets;\r\n   bool private _paused;\r\n \r\n   struct ConditionInfo {\r\n       string market;\r\n       address oracle;\r\n       int256 triggerPrice;\r\n       uint256 settlementTime;\r\n       bool isSettled;\r\n       int256 settledPrice;\r\n       address lowBetToken;\r\n       address highBetToken;\r\n       uint256 totalStakedAbove;\r\n       uint256 totalStakedBelow;\r\n       uint256 totalEthClaimable;\r\n       address conditionOwner;\r\n   }\r\n \r\n   //conditionIndex\r\n   mapping(uint256 => uint256) public betEndTime;\r\n \r\n   event ConditionPrepared(\r\n       address conditionOwner,\r\n       uint256 indexed conditionIndex,\r\n       address indexed oracle,\r\n       uint256 indexed settlementTime,\r\n       int256 triggerPrice,\r\n       address lowBetTokenAddress,\r\n       address highBetTokenAddress\r\n   );\r\n   event UserPrediction(\r\n       uint256 indexed conditionIndex,\r\n       address indexed userAddress,\r\n       uint256 indexed etHStaked,\r\n       uint8 prediction,\r\n       uint256 timestamp\r\n   );\r\n   event UserClaimed(\r\n       uint256 indexed conditionIndex,\r\n       address indexed userAddress,\r\n       uint256 indexed winningAmount\r\n   );\r\n   event ConditionSettled(\r\n       uint256 indexed conditionIndex,\r\n       int256 indexed settledPrice,\r\n       uint256 timestamp\r\n   );\r\n   event NewMarketGenerated(\r\n       uint256 indexed conditionIndex,\r\n       address indexed oracle\r\n   );\r\n   event SetOperator(address operatorAddress);\r\n   event SetMarketExpirationFee(uint256 adminFeeRate, uint256 ownerFeeRate);\r\n   event SetMarketCreationFee(uint256 feeRate);\r\n   event UpdateEthUsdOracleAddress(address oracle);\r\n   event Paused(address account);\r\n   event Unpaused(address account);\r\n \r\n   modifier onlyOperator() {\r\n       require(msg.sender == operatorAddress, \"ERR_INVALID_OPERATOR\");\r\n       _;\r\n   }\r\n \r\n   modifier whenNotPaused() {\r\n       require(!paused(), \"PAUSED\");\r\n       _;\r\n   }\r\n \r\n   modifier whenPaused() {\r\n       require(paused(), \"NOT_PAUSED\");\r\n       _;\r\n   }\r\n \r\n   modifier whenMarketActive(uint256 _conditionIndex) {\r\n       require(\r\n           block.timestamp <= betEndTime[_conditionIndex],\r\n           \"ERR_INVALID_SETTLEMENT_TIME\"\r\n       );\r\n \r\n       _;\r\n   }\r\n \r\n   modifier nonReentrant() {\r\n       // On the first call to nonReentrant, _notEntered will be true\r\n       require(_status != 2, \"REENTRANT_CALL\");\r\n       _status = 2;\r\n       _;\r\n       _status = 1;\r\n   }\r\n \r\n   /**\r\n    * @notice Construct a new Prediction Market contract\r\n    * @param _ethUsdOracleAddress The address of ETH-USD oracle.\r\n    */\r\n   // solhint-disable-next-line\r\n   constructor(address _ethUsdOracleAddress, address _operator) {\r\n       require(\r\n           _ethUsdOracleAddress != address(0),\r\n           \"ERR_ZERO_ADDRESS_FOR_ORACLE\"\r\n       );\r\n       require(_operator != address(0), \"ERR_ZERO_ADDRESS_FOR_OPERATOR\");\r\n \r\n       ethUsdOracleAddress = _ethUsdOracleAddress;\r\n \r\n       adminFeeRate = 80;\r\n       ownerFeeRate = 20;\r\n       marketCreationFee = 5; //in dollars\r\n \r\n       operatorAddress = _operator;\r\n       _paused = false;\r\n       _status = 1;\r\n   }\r\n \r\n   function setOperator(address _operatorAddress) external onlyOwner {\r\n       require(_operatorAddress != address(0), \"ERR_INVALID_OPERATOR_ADDRESS\");\r\n       operatorAddress = _operatorAddress;\r\n       emit SetOperator(operatorAddress);\r\n   }\r\n \r\n   function setEthUsdOracleAddress(address _ethUsdOracleAddress)\r\n       external\r\n       onlyOwner\r\n   {\r\n       require(_ethUsdOracleAddress != address(0), \"ERR_INVALID_ADDRESS\");\r\n       ethUsdOracleAddress = _ethUsdOracleAddress;\r\n       emit UpdateEthUsdOracleAddress(ethUsdOracleAddress);\r\n   }\r\n \r\n   function setMarketExpirationFee(\r\n       uint256 _adminFeeRate,\r\n       uint256 _ownerFeeRate\r\n   ) external onlyOwner {\r\n       require(_adminFeeRate > 0 && _ownerFeeRate > 0, \"ERR_FEE_TOO_LOW\");\r\n       require(\r\n           _adminFeeRate <= 1000 && _ownerFeeRate <= 1000,\r\n           \"ERR_FEE_TOO_HIGH\"\r\n       );\r\n \r\n       adminFeeRate = _adminFeeRate;\r\n       ownerFeeRate = _ownerFeeRate;\r\n       emit SetMarketExpirationFee(adminFeeRate, ownerFeeRate);\r\n   }\r\n \r\n   function setMarketCreationFee(uint256 _fee) external onlyOwner {\r\n       require(_fee > 0 && _fee <= 1000, \"ERR_INVALID_FEE\");\r\n       marketCreationFee = _fee;\r\n       emit SetMarketCreationFee(marketCreationFee);\r\n   }\r\n \r\n   function execute(address oracle, uint256 interval) external onlyOperator {\r\n       require(oracle != address(0), \"ERR_INVALID_CONDITION_INDEX\");\r\n \r\n       uint256 index = autoGeneratedMarkets[oracle][interval];\r\n \r\n       //settle and claim for previous index\r\n       claimFor(payable(msg.sender), index);\r\n \r\n       //prepare new condition\r\n       int256 triggerPrice = getPrice(oracle);\r\n       uint256 newIndex = _prepareCondition(\r\n           oracle,\r\n           interval,\r\n           triggerPrice,\r\n           false\r\n       );\r\n \r\n       autoGeneratedMarkets[oracle][interval] = newIndex;\r\n       emit NewMarketGenerated(newIndex, oracle);\r\n   }\r\n \r\n   function paused() public view returns (bool) {\r\n       return _paused;\r\n   }\r\n \r\n   function _pause() internal whenNotPaused {\r\n       _paused = true;\r\n       emit Paused(_msgSender());\r\n   }\r\n \r\n   function _unpause() internal whenPaused {\r\n       _paused = false;\r\n       emit Unpaused(_msgSender());\r\n   }\r\n \r\n   function togglePause(bool pause) external {\r\n       require(\r\n           msg.sender == operatorAddress || msg.sender == owner(),\r\n           \"ERR_INVALID_ADDRESS_ACCESS\"\r\n       );\r\n       if (pause) _pause();\r\n       else _unpause();\r\n   }\r\n \r\n   function safeTransferETH(address to, uint256 value) internal {\r\n       // solhint-disable-next-line\r\n       (bool success, ) = payable(to).call{value: value}(new bytes(0));\r\n \r\n       // solhint-disable-next-line\r\n       require(success, \"ETH_TRANSFER_FAILED\");\r\n   }\r\n \r\n   function getMarketCreationFee() public view returns (uint256 toDeduct) {\r\n       int256 latestPrice = getPrice(ethUsdOracleAddress);\r\n       toDeduct = (marketCreationFee * 1 ether) / uint256(latestPrice);\r\n   }\r\n \r\n   function _deductMarketCreationFee() internal returns (uint256 toDeduct) {\r\n       toDeduct = getMarketCreationFee();\r\n       require(msg.value >= toDeduct, \"ERR_PROVIDE_FEE\");\r\n       safeTransferETH(owner(), toDeduct);\r\n   }\r\n \r\n   function prepareCondition(\r\n       address _oracle,\r\n       uint256 _settlementTimePeriod,\r\n       int256 _triggerPrice,\r\n       bool _initialize\r\n   ) public payable whenNotPaused returns (uint256) {\r\n       _deductMarketCreationFee();\r\n       return\r\n           _prepareCondition(\r\n               _oracle,\r\n               _settlementTimePeriod,\r\n               _triggerPrice,\r\n               _initialize\r\n           );\r\n   }\r\n \r\n   function _prepareCondition(\r\n       address _oracle,\r\n       uint256 _settlementTimePeriod,\r\n       int256 _triggerPrice,\r\n       bool _initialize\r\n   ) internal nonReentrant returns (uint256) {\r\n       require(_oracle != address(0), \"ERR_INVALID_ORACLE_ADDRESS\");\r\n       require(_settlementTimePeriod >= 300, \"ERR_INVALID_SETTLEMENT_TIME\");\r\n \r\n       latestConditionIndex = latestConditionIndex + 1;\r\n       ConditionInfo storage conditionInfo = conditions[latestConditionIndex];\r\n \r\n       conditionInfo.market = IAggregatorV3Interface(_oracle).description();\r\n       conditionInfo.oracle = _oracle;\r\n       conditionInfo.settlementTime = _settlementTimePeriod + block.timestamp;\r\n       conditionInfo.triggerPrice = _triggerPrice;\r\n       conditionInfo.isSettled = false;\r\n       conditionInfo.lowBetToken = address(\r\n           new BetToken(\r\n               \"Low Bet Token\",\r\n               string(abi.encodePacked(\"LBT-\", conditionInfo.market))\r\n           )\r\n       );\r\n       conditionInfo.highBetToken = address(\r\n           new BetToken(\r\n               \"High Bet Token\",\r\n               string(abi.encodePacked(\"HBT-\", conditionInfo.market))\r\n           )\r\n       );\r\n       conditionInfo.conditionOwner = msg.sender;\r\n \r\n       //to prevent double initialisation of auto generated markets\r\n       if (\r\n           _initialize &&\r\n           autoGeneratedMarkets[_oracle][_settlementTimePeriod] == 0\r\n       ) {\r\n           autoGeneratedMarkets[_oracle][\r\n               _settlementTimePeriod\r\n           ] = latestConditionIndex;\r\n       }\r\n \r\n       betEndTime[latestConditionIndex] =\r\n           ((_settlementTimePeriod * 90) / 100) +\r\n           block.timestamp;\r\n \r\n       emit ConditionPrepared(\r\n           msg.sender,\r\n           latestConditionIndex,\r\n           _oracle,\r\n           conditionInfo.settlementTime,\r\n           _triggerPrice,\r\n           conditionInfo.lowBetToken,\r\n           conditionInfo.highBetToken\r\n       );\r\n \r\n       return latestConditionIndex;\r\n   }\r\n \r\n   function probabilityRatio(uint256 _conditionIndex)\r\n       external\r\n       view\r\n       returns (uint256 aboveProbabilityRatio, uint256 belowProbabilityRatio)\r\n   {\r\n       ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n       if (conditionInfo.isSettled) {\r\n           return (0, 0);\r\n       }\r\n       uint256 ethStakedForAbove = BetToken(conditionInfo.highBetToken)\r\n           .totalSupply();\r\n       uint256 ethStakedForBelow = BetToken(conditionInfo.lowBetToken)\r\n           .totalSupply();\r\n \r\n       uint256 totalEthStaked = ethStakedForAbove + ethStakedForBelow;\r\n \r\n       aboveProbabilityRatio = totalEthStaked > 0\r\n           ? (ethStakedForAbove * (1e18)) / (totalEthStaked)\r\n           : 0;\r\n       belowProbabilityRatio = totalEthStaked > 0\r\n           ? (ethStakedForBelow * (1e18)) / (totalEthStaked)\r\n           : 0;\r\n   }\r\n \r\n   function userTotalETHStaked(uint256 _conditionIndex, address userAddress)\r\n       external\r\n       view\r\n       returns (uint256 totalEthStaked)\r\n   {\r\n       ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n       uint256 ethStakedForAbove = BetToken(conditionInfo.highBetToken)\r\n           .balanceOf(userAddress);\r\n       uint256 ethStakedForBelow = BetToken(conditionInfo.lowBetToken)\r\n           .balanceOf(userAddress);\r\n \r\n       totalEthStaked = ethStakedForAbove + ethStakedForBelow;\r\n   }\r\n \r\n   function betOnCondition(uint256 _conditionIndex, uint8 _prediction)\r\n       external\r\n       payable\r\n   {\r\n       //call betOncondition\r\n       betOnConditionFor(msg.sender, _conditionIndex, _prediction, msg.value);\r\n   }\r\n \r\n   function betOnConditionFor(\r\n       address _user,\r\n       uint256 _conditionIndex,\r\n       uint8 _prediction,\r\n       uint256 _amount\r\n   )\r\n       public\r\n       payable\r\n       whenNotPaused\r\n       nonReentrant\r\n       whenMarketActive(_conditionIndex)\r\n   {\r\n       ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n \r\n       require(_user != address(0), \"ERR_INVALID_ADDRESS\");\r\n \r\n       require(\r\n           conditionInfo.oracle != address(0),\r\n           \"ERR_INVALID_ORACLE_ADDRESS\"\r\n       );\r\n \r\n       require(msg.value >= _amount && _amount != 0, \"ERR_INVALID_AMOUNT\");\r\n       require(\r\n           (_prediction == 0) || (_prediction == 1),\r\n           \"ERR_INVALID_PREDICTION\"\r\n       ); //prediction = 0 (price will be below), if 1 (price will be above)\r\n \r\n       uint256 userETHStaked = _amount;\r\n       if (_prediction == 0) {\r\n           BetToken(conditionInfo.lowBetToken).mint(_user, userETHStaked);\r\n       } else {\r\n           BetToken(conditionInfo.highBetToken).mint(_user, userETHStaked);\r\n       }\r\n       emit UserPrediction(\r\n           _conditionIndex,\r\n           _user,\r\n           userETHStaked,\r\n           _prediction,\r\n           block.timestamp\r\n       );\r\n   }\r\n \r\n   function getPrice(address oracle)\r\n       internal\r\n       view\r\n       returns (int256 latestPrice)\r\n   {\r\n       (, latestPrice, , , ) = IAggregatorV3Interface(oracle)\r\n           .latestRoundData();\r\n   }\r\n \r\n   function settleCondition(uint256 _conditionIndex) public whenNotPaused {\r\n       ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n       require(\r\n           conditionInfo.oracle != address(0),\r\n           \"ERR_INVALID_ORACLE_ADDRESS\"\r\n       );\r\n       require(\r\n           block.timestamp >= conditionInfo.settlementTime,\r\n           \"ERR_INVALID_SETTLEMENT_TIME\"\r\n       );\r\n       require(!conditionInfo.isSettled, \"ERR_CONDITION_ALREADY_SETTLED\");\r\n \r\n       conditionInfo.isSettled = true;\r\n       conditionInfo.totalStakedAbove = BetToken(conditionInfo.highBetToken)\r\n           .totalSupply();\r\n       conditionInfo.totalStakedBelow = BetToken(conditionInfo.lowBetToken)\r\n           .totalSupply();\r\n \r\n       uint256 total = conditionInfo.totalStakedAbove +\r\n           conditionInfo.totalStakedBelow;\r\n \r\n       conditionInfo.totalEthClaimable = _transferFees(\r\n           total,\r\n           _conditionIndex,\r\n           conditionInfo.conditionOwner\r\n       );\r\n \r\n       conditionInfo.settledPrice = getPrice(conditionInfo.oracle);\r\n \r\n       emit ConditionSettled(\r\n           _conditionIndex,\r\n           conditionInfo.settledPrice,\r\n           block.timestamp\r\n       );\r\n   }\r\n \r\n   function _transferFees(\r\n       uint256 totalAmount,\r\n       uint256 _conditionIndex,\r\n       address conditionOwner\r\n   ) internal returns (uint256 afterFeeAmount) {\r\n       uint256 _fees = (totalAmount * (adminFeeRate + ownerFeeRate)) / (1000);\r\n       afterFeeAmount = totalAmount - (_fees);\r\n \r\n       uint256 ownerFees = (_fees * (ownerFeeRate)) / 1000;\r\n       feeClaimed[conditionOwner][_conditionIndex] = ownerFees;\r\n       feeClaimed[owner()][_conditionIndex] = _fees - (ownerFees);\r\n \r\n       safeTransferETH(owner(), _fees - (ownerFees));\r\n       safeTransferETH(conditionOwner, ownerFees);\r\n   }\r\n \r\n   function claim(uint256 _conditionIndex) public {\r\n       //call claim with msg.sender as _for\r\n       claimFor(payable(msg.sender), _conditionIndex);\r\n   }\r\n \r\n   function claimFor(address payable _userAddress, uint256 _conditionIndex)\r\n       public\r\n       whenNotPaused\r\n       nonReentrant\r\n   {\r\n       require(_userAddress != address(0), \"ERR_INVALID_USER_ADDRESS\");\r\n       ConditionInfo storage conditionInfo = conditions[_conditionIndex];\r\n \r\n       BetToken lowBetToken = BetToken(conditionInfo.lowBetToken);\r\n       BetToken highBetToken = BetToken(conditionInfo.highBetToken);\r\n       if (!conditionInfo.isSettled) {\r\n           settleCondition(_conditionIndex);\r\n       }\r\n \r\n       uint256 totalWinnerRedeemable;\r\n       //Amount Redeemable including winnerRedeemable & user initial Stake\r\n       if (conditionInfo.settledPrice > conditionInfo.triggerPrice) {\r\n           //Users who predicted above price wins\r\n           uint256 userStake = highBetToken.balanceOf(_userAddress);\r\n \r\n           if (userStake == 0) {\r\n               return;\r\n           }\r\n           totalWinnerRedeemable = getClaimAmount(\r\n               conditionInfo.totalEthClaimable,\r\n               conditionInfo.totalStakedAbove,\r\n               userStake\r\n           );\r\n       } else if (conditionInfo.settledPrice < conditionInfo.triggerPrice) {\r\n           //Users who predicted below price wins\r\n           uint256 userStake = lowBetToken.balanceOf(_userAddress);\r\n \r\n           if (userStake == 0) {\r\n               return;\r\n           }\r\n           totalWinnerRedeemable = getClaimAmount(\r\n               conditionInfo.totalEthClaimable,\r\n               conditionInfo.totalStakedBelow,\r\n               userStake\r\n           );\r\n       } else {\r\n           safeTransferETH(owner(), conditionInfo.totalEthClaimable);\r\n           totalWinnerRedeemable = 0;\r\n           conditionInfo.totalEthClaimable = 0;\r\n       }\r\n \r\n       highBetToken.burnAll(_userAddress);\r\n       lowBetToken.burnAll(_userAddress);\r\n \r\n       if (totalWinnerRedeemable > 0) {\r\n           _userAddress.transfer(totalWinnerRedeemable);\r\n           conditionInfo.totalEthClaimable =\r\n               conditionInfo.totalEthClaimable -\r\n               (totalWinnerRedeemable);\r\n       }\r\n \r\n       emit UserClaimed(_conditionIndex, _userAddress, totalWinnerRedeemable);\r\n   }\r\n \r\n   function getClaimAmount(\r\n       uint256 totalPayout,\r\n       uint256 winnersTotalETHStaked,\r\n       uint256 userStake\r\n   ) internal pure returns (uint256 totalWinnerRedeemable) {\r\n       totalWinnerRedeemable =\r\n           (totalPayout * userStake) /\r\n           winnersTotalETHStaked;\r\n   }\r\n \r\n   function getBalance(uint256 _conditionIndex, address _user)\r\n       external\r\n       view\r\n       returns (uint256 lbtBalance, uint256 hbtBalance)\r\n   {\r\n       ConditionInfo storage condition = conditions[_conditionIndex];\r\n       lbtBalance = BetToken(condition.lowBetToken).balanceOf(_user);\r\n       hbtBalance = BetToken(condition.highBetToken).balanceOf(_user);\r\n   }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethUsdOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"conditionOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"triggerPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lowBetTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highBetTokenAddress\",\"type\":\"address\"}],\"name\":\"ConditionPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"settledPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ConditionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewMarketGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"SetMarketCreationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerFeeRate\",\"type\":\"uint256\"}],\"name\":\"SetMarketExpirationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"UpdateEthUsdOracleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winningAmount\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"etHStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserPrediction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoGeneratedMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_prediction\",\"type\":\"uint8\"}],\"name\":\"betOnCondition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_prediction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betOnConditionFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"market\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"triggerPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"settlementTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"settledPrice\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"lowBetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highBetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthClaimable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"conditionOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lbtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hbtBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toDeduct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConditionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_settlementTimePeriod\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_triggerPrice\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_initialize\",\"type\":\"bool\"}],\"name\":\"prepareCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"probabilityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aboveProbabilityRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"belowProbabilityRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethUsdOracleAddress\",\"type\":\"address\"}],\"name\":\"setEthUsdOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMarketCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFeeRate\",\"type\":\"uint256\"}],\"name\":\"setMarketExpirationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"}],\"name\":\"settleCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userTotalETHStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEthStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PredictionMarket", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000024d3242650d6c7b0ee6de408e33e803dbfb00ea", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://69fdedfb82175eee4073346ea8a880d8ecfca2be1bfe64f43d6bf953fb023b46"}