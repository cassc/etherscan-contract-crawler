{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnAddressStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ILnAddressStorage {\\r\\n    function updateAll(bytes32[] calldata names, address[] calldata destinations) external;\\r\\n\\r\\n    function update(bytes32 name, address dest) external;\\r\\n\\r\\n    function getAddress(bytes32 name) external view returns (address);\\r\\n\\r\\n    function getAddressWithRequire(bytes32 name, string calldata reason) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ILnAsset is IERC20 {\\r\\n    function keyName() external view returns (bytes32);\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n    function move(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnPerpetual.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnPerpetual {\\r\\n    function underlyingTokenSymbol() external view returns (bytes32);\\r\\n\\r\\n    function totalUsdDebt() external view returns (uint256);\\r\\n\\r\\n    function totalUnderlyingDebt() external view returns (uint256);\\r\\n\\r\\n    function openPosition(\\r\\n        address user,\\r\\n        bool isLong,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    ) external returns (uint256 positionId, uint256 underlyingPrice);\\r\\n\\r\\n    function increasePosition(\\r\\n        address user,\\r\\n        uint256 positionId,\\r\\n        uint256 size,\\r\\n        uint256 collateral\\r\\n    ) external returns (uint256 underlyingPrice);\\r\\n\\r\\n    function closePositionByAmount(\\r\\n        address user,\\r\\n        uint256 positionId,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256 underlyingPrice);\\r\\n\\r\\n    function closePosition(\\r\\n        address user,\\r\\n        uint256 positionId,\\r\\n        address to\\r\\n    ) external returns (uint256 underlyingPrice);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnPrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.24;\\r\\n\\r\\ninterface ILnPrices {\\r\\n    function getPrice(bytes32 currencyKey) external view returns (uint);\\r\\n\\r\\n    function exchange(\\r\\n        bytes32 sourceKey,\\r\\n        uint sourceAmount,\\r\\n        bytes32 destKey\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function LUSD() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/LnAddressStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/ILnAddressStorage.sol\\\";\\r\\nimport \\\"./upgradeable/LnAdminUpgradeable.sol\\\";\\r\\n\\r\\ncontract LnAddressStorage is LnAdminUpgradeable, ILnAddressStorage {\\r\\n    mapping(bytes32 => address) public mAddrs;\\r\\n\\r\\n    function __LnAddressStorage_init(address _admin) public initializer {\\r\\n        __LnAdminUpgradeable_init(_admin);\\r\\n    }\\r\\n\\r\\n    function updateAll(bytes32[] calldata names, address[] calldata destinations) external override onlyAdmin {\\r\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\r\\n\\r\\n        for (uint i = 0; i < names.length; i++) {\\r\\n            mAddrs[names[i]] = destinations[i];\\r\\n            emit StorageAddressUpdated(names[i], destinations[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function update(bytes32 name, address dest) external override onlyAdmin {\\r\\n        require(name != \\\"\\\", \\\"name can not be empty\\\");\\r\\n        require(dest != address(0), \\\"address cannot be 0\\\");\\r\\n        mAddrs[name] = dest;\\r\\n        emit StorageAddressUpdated(name, dest);\\r\\n    }\\r\\n\\r\\n    function getAddress(bytes32 name) external view override returns (address) {\\r\\n        return mAddrs[name];\\r\\n    }\\r\\n\\r\\n    function getAddressWithRequire(bytes32 name, string calldata reason) external view override returns (address) {\\r\\n        address _foundAddress = mAddrs[name];\\r\\n        require(_foundAddress != address(0), reason);\\r\\n        return _foundAddress;\\r\\n    }\\r\\n\\r\\n    event StorageAddressUpdated(bytes32 name, address addr);\\r\\n\\r\\n    // Reserved storage space to allow for layout changes in the future.\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/LnAssetSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./interfaces/ILnAsset.sol\\\";\\r\\nimport \\\"./interfaces/ILnPerpetual.sol\\\";\\r\\nimport \\\"./interfaces/ILnPrices.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./SafeDecimalMath.sol\\\";\\r\\nimport \\\"./LnAddressStorage.sol\\\";\\r\\n\\r\\ncontract LnAssetSystem is LnAddressStorage {\\r\\n    using SafeMath for uint;\\r\\n    using SafeDecimalMath for uint;\\r\\n\\r\\n    ILnAsset[] public mAssetList; // \u5408\u7ea6\u5730\u5740\u6570\u7ec4\\r\\n    mapping(address => bytes32) public mAddress2Names; // \u5730\u5740\u5230\u540d\u79f0\u7684\u6620\u5c04\\r\\n\\r\\n    mapping(bytes32 => address) public perpAddresses;\\r\\n    mapping(address => bytes32) public perpSymbols;\\r\\n\\r\\n    function __LnAssetSystem_init(address _admin) public initializer {\\r\\n        __LnAddressStorage_init(_admin);\\r\\n    }\\r\\n\\r\\n    function addAsset(ILnAsset asset) external onlyAdmin {\\r\\n        bytes32 name = asset.keyName();\\r\\n\\r\\n        require(mAddrs[name] == address(0), \\\"Asset already exists\\\");\\r\\n        require(mAddress2Names[address(asset)] == bytes32(0), \\\"Asset address already exists\\\");\\r\\n\\r\\n        mAssetList.push(asset);\\r\\n        mAddrs[name] = address(asset);\\r\\n        mAddress2Names[address(asset)] = name;\\r\\n\\r\\n        emit AssetAdded(name, address(asset));\\r\\n    }\\r\\n\\r\\n    function removeAsset(bytes32 name) external onlyAdmin {\\r\\n        address assetToRemove = address(mAddrs[name]);\\r\\n\\r\\n        require(assetToRemove != address(0), \\\"asset does not exist\\\");\\r\\n\\r\\n        // Remove from list\\r\\n        for (uint i = 0; i < mAssetList.length; i++) \\r\\n        {\\r\\n            if (address(mAssetList[i]) == assetToRemove) {\\r\\n                delete mAssetList[i];\\r\\n                mAssetList[i] = mAssetList[mAssetList.length - 1];\\r\\n                mAssetList.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // And remove it from the assets mapping\\r\\n        delete mAddress2Names[assetToRemove];\\r\\n        delete mAddrs[name];\\r\\n\\r\\n        emit AssetRemoved(name, assetToRemove);\\r\\n    }\\r\\n\\r\\n    function addPerp(ILnPerpetual perp) external onlyAdmin {\\r\\n        require(address(perp) != address(0), \\\"LnAssetSystem: zero address\\\");\\r\\n\\r\\n        bytes32 symbol = perp.underlyingTokenSymbol();\\r\\n        require(perpAddresses[symbol] == address(0), \\\"LnAssetSystem: perp already exists\\\");\\r\\n\\r\\n        perpAddresses[symbol] = address(perp);\\r\\n        perpSymbols[address(perp)] = symbol;\\r\\n\\r\\n        emit PerpAdded(symbol, address(perp));\\r\\n    }\\r\\n\\r\\n    function removePerp(ILnPerpetual perp) external onlyAdmin {\\r\\n        require(address(perp) != address(0), \\\"LnAssetSystem: zero address\\\");\\r\\n        bytes32 symbolToRemove = perp.underlyingTokenSymbol();\\r\\n        require(perpAddresses[symbolToRemove] != address(0), \\\"LnAssetSystem: perp doens't exist\\\");    \\r\\n        perpAddresses[symbolToRemove] = address(0);\\r\\n        perpSymbols[address(perp)] = bytes32(0);\\r\\n        emit PerpRemoved(symbolToRemove, address(perp));\\r\\n    }\\r\\n\\r\\n    function assetNumber() external view returns (uint) {\\r\\n        return mAssetList.length;\\r\\n    }\\r\\n\\r\\n    function totalAssetsInUsd() public view returns (uint256 rTotal) {\\r\\n        address lnPricesAddress = mAddrs[\\\"LnPrices\\\"];\\r\\n        require(lnPricesAddress != address(0), \\\"LnAssetSystem: LnPrices not set\\\");\\r\\n\\r\\n        uint256 totalSupplyValue = 0;\\r\\n        uint256 totalPerpDebtValue = 0;\\r\\n\\r\\n        for (uint256 ind = 0; ind < mAssetList.length; ind++) {\\r\\n            ILnAsset asset = mAssetList[ind];\\r\\n            bytes32 assetSymbol = asset.keyName();\\r\\n\\r\\n            uint256 exchangeRate = ILnPrices(lnPricesAddress).getPrice(assetSymbol);\\r\\n            address perpAddress = perpAddresses[assetSymbol];\\r\\n\\r\\n            totalSupplyValue = totalSupplyValue.add(asset.totalSupply().multiplyDecimal(exchangeRate));\\r\\n\\r\\n            if (perpAddress != address(0)) {\\r\\n                totalPerpDebtValue = totalPerpDebtValue.add(ILnPerpetual(perpAddress).totalUsdDebt()).add(\\r\\n                    ILnPerpetual(perpAddress).totalUnderlyingDebt().multiplyDecimal(exchangeRate)\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        rTotal = totalSupplyValue.sub(totalPerpDebtValue);\\r\\n    }\\r\\n\\r\\n    function getAssetAddresses() external view returns (address[] memory) {\\r\\n        address[] memory addr = new address[](mAssetList.length);\\r\\n        for (uint256 i = 0; i < mAssetList.length; i++) {\\r\\n            addr[i] = address(mAssetList[i]);\\r\\n        }\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    function isPerpAddressRegistered(address perpAddress) external view returns (bool) \\r\\n    {\\r\\n        return perpSymbols[perpAddress] != bytes32(0);\\r\\n    }\\r\\n\\r\\n    event AssetAdded(bytes32 name, address asset);\\r\\n    event AssetRemoved(bytes32 name, address asset);\\r\\n    event PerpAdded(bytes32 underlying, address perp);\\r\\n    event PerpRemoved(bytes32 underlying, address perp);\\r\\n\\r\\n    // Reserved storage space to allow for layout changes in the future.\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary SafeDecimalMath {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint8 public constant highPrecisionDecimals = 27;\\r\\n\\r\\n    uint public constant UNIT = 10**uint(decimals);\\r\\n\\r\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\r\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\r\\n\\r\\n    function unit() external pure returns (uint) {\\r\\n        return UNIT;\\r\\n    }\\r\\n\\r\\n    function preciseUnit() external pure returns (uint) {\\r\\n        return PRECISE_UNIT;\\r\\n    }\\r\\n\\r\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\r\\n        return x.mul(y) / UNIT;\\r\\n    }\\r\\n\\r\\n    function _multiplyDecimalRound(\\r\\n        uint x,\\r\\n        uint y,\\r\\n        uint precisionUnit\\r\\n    ) private pure returns (uint) {\\r\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\r\\n\\r\\n        if (quotientTimesTen % 10 >= 5) {\\r\\n            quotientTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return quotientTimesTen / 10;\\r\\n    }\\r\\n\\r\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\r\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\r\\n    }\\r\\n\\r\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\r\\n        return _multiplyDecimalRound(x, y, UNIT);\\r\\n    }\\r\\n\\r\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\r\\n        return x.mul(UNIT).div(y);\\r\\n    }\\r\\n\\r\\n    function _divideDecimalRound(\\r\\n        uint x,\\r\\n        uint y,\\r\\n        uint precisionUnit\\r\\n    ) private pure returns (uint) {\\r\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\r\\n\\r\\n        if (resultTimesTen % 10 >= 5) {\\r\\n            resultTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return resultTimesTen / 10;\\r\\n    }\\r\\n\\r\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\r\\n        return _divideDecimalRound(x, y, UNIT);\\r\\n    }\\r\\n\\r\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\r\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\r\\n    }\\r\\n\\r\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\r\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\r\\n    }\\r\\n\\r\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\r\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\r\\n\\r\\n        if (quotientTimesTen % 10 >= 5) {\\r\\n            quotientTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return quotientTimesTen / 10;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/upgradeable/LnAdminUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LnAdminUpgradeable\\r\\n *\\r\\n * @dev This is an upgradeable version of `LnAdmin` by replacing the constructor with\\r\\n * an initializer and reserving storage slots.\\r\\n */\\r\\ncontract LnAdminUpgradeable is Initializable {\\r\\n    event CandidateChanged(address oldCandidate, address newCandidate);\\r\\n    event AdminChanged(address oldAdmin, address newAdmin);\\r\\n\\r\\n    address public admin;\\r\\n    address public candidate;\\r\\n\\r\\n    function __LnAdminUpgradeable_init(address _admin) public initializer {\\r\\n        require(_admin != address(0), \\\"LnAdminUpgradeable: zero address\\\");\\r\\n        admin = _admin;\\r\\n        emit AdminChanged(address(0), _admin);\\r\\n    }\\r\\n\\r\\n    function setCandidate(address _candidate) external onlyAdmin {\\r\\n        address old = candidate;\\r\\n        candidate = _candidate;\\r\\n        emit CandidateChanged(old, candidate);\\r\\n    }\\r\\n\\r\\n    function becomeAdmin() external {\\r\\n        require(msg.sender == candidate, \\\"LnAdminUpgradeable: only candidate can become admin\\\");\\r\\n        address old = admin;\\r\\n        admin = candidate;\\r\\n        emit AdminChanged(old, admin);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin {\\r\\n        require((msg.sender == admin), \\\"LnAdminUpgradeable: only the contract admin can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Reserved storage space to allow for layout changes in the future.\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"CandidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"perp\",\"type\":\"address\"}],\"name\":\"PerpAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"perp\",\"type\":\"address\"}],\"name\":\"PerpRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"StorageAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAddressStorage_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAdminUpgradeable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAssetSystem_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILnAsset\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILnPerpetual\",\"name\":\"perp\",\"type\":\"address\"}],\"name\":\"addPerp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"getAddressWithRequire\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"perpAddress\",\"type\":\"address\"}],\"name\":\"isPerpAddressRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mAddress2Names\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mAssetList\",\"outputs\":[{\"internalType\":\"contract ILnAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"perpAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perpSymbols\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILnPerpetual\",\"name\":\"perp\",\"type\":\"address\"}],\"name\":\"removePerp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssetsInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LnAssetSystem", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}