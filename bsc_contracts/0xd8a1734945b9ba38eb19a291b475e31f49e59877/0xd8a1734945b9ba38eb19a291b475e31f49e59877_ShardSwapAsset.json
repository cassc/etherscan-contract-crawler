{"SourceCode": "pragma solidity ^0.6.7;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        require((c = a + b) >= a, 'Shard::add: addition overflow');\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint c) {\r\n        require((c = a - b) <= a, errorMessage);\r\n    }\r\n}\r\n\r\ncontract ShardERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Shard\";\r\n    string public constant symbol = \"SHARD\";\r\n    uint8 public constant decimals = 18;\r\n    uint public constant maxSupply = 210_000_000e18; // 210 million Shard\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant TRANSFER_TYPEHASH = keccak256(\"Transfer(address to,uint256 value,uint256 nonce,uint256 expiry)\");\r\n    bytes32 public constant TRANSFER_WITH_FEE_TYPEHASH = keccak256(\"TransferWithFee(address to,uint256 value,uint256 fee,uint256 nonce,uint256 expiry)\");\r\n    mapping(address => uint) public nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function _mint(address to, uint value) internal {\r\n        require(to != address(0), \"Shard::_mint: mint to the zero address\");\r\n        uint newSupply = totalSupply.add(value);\r\n        require(newSupply <= maxSupply, \"Shard::_mint: totalSupply exceeds maxSupply\");\r\n        totalSupply = newSupply;\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        require(from != address(0), \"Shard::_burn: burn from the zero address\");\r\n        balanceOf[from] = balanceOf[from].sub(value, \"Shard::_burn: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(value, \"Shard::_burn: burn amount exceeds totalSupply\");\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(from != address(0), \"Shard::_transfer: transfer from the zero address\");\r\n        require(to != address(0), \"Shard::_transfer: transfer to the zero address\");\r\n        balanceOf[from] = balanceOf[from].sub(value, \"Shard::_transfer: transfer amount exceeds balance\");\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \"Shard::decreaseAllowance: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(block.timestamp <= deadline, \"Shard::permit: signature expired\");\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\r\n        address signatory = ecrecover(getDigest(structHash), v, r, s);\r\n        require(signatory != address(0), \"Shard::permit: invalid signature\");\r\n        require(signatory == owner, \"Shard::permit: unauthorized\");\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowance[from][spender];\r\n        if (spender != from && spenderAllowance != uint(-1)) {\r\n            _approve(from, spender, spenderAllowance.sub(value, \"Shard::transferFrom: transfer amount exceeds allowance\"));\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferBatch(address[] calldata to, uint[] calldata value) external returns (bool) {\r\n        uint length = to.length;\r\n        require(length == value.length, \"Shard::transferBatch: calldata arrays must have the same length\");\r\n        for (uint i = 0; i < length; i++) {\r\n            _transfer(msg.sender, to[i], value[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferBySig(address to, uint value, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(block.timestamp <= expiry, \"Shard::transferBySig: signature expired\");\r\n        bytes32 structHash = keccak256(abi.encode(TRANSFER_TYPEHASH, to, value, nonce, expiry));\r\n        address signatory = ecrecover(getDigest(structHash), v, r, s);\r\n        require(signatory != address(0), \"Shard::transferBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"Shard::transferBySig: invalid nonce\");\r\n        _transfer(signatory, to, value);\r\n    }\r\n\r\n    function transferWithFeeBySig(address to, uint value, uint fee, uint nonce, uint expiry, address feeTo, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(block.timestamp <= expiry, \"Shard::transferWithFeeBySig: signature expired\");\r\n        bytes32 structHash = keccak256(abi.encode(TRANSFER_WITH_FEE_TYPEHASH, to, value, fee, nonce, expiry));\r\n        address signatory = ecrecover(getDigest(structHash), v, r, s);\r\n        require(signatory != address(0), \"Shard::transferWithFeeBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"Shard::transferWithFeeBySig: invalid nonce\");\r\n        _transfer(signatory, feeTo, fee);\r\n        _transfer(signatory, to, value);\r\n    }\r\n\r\n    function getDigest(bytes32 structHash) internal view returns (bytes32) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        bytes32 domainSeparator =  keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), chainId, address(this)));\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\ncontract ShardSwapAsset is ShardERC20 {\r\n    address private _oldOwner;\r\n    address private _newOwner;\r\n    uint256 private _newOwnerEffectiveHeight;\r\n    \r\n    event LogChangeDCRMOwner(address indexed oldOwner, address indexed newOwner, uint indexed effectiveHeight);\r\n    event LogSwapin(bytes32 indexed txhash, address indexed account, uint amount);\r\n    event LogSwapout(address indexed account, address indexed bindaddr, uint amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner(), \"only owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _newOwner = msg.sender;\r\n        _newOwnerEffectiveHeight = block.number;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        if (block.number >= _newOwnerEffectiveHeight) {\r\n            return _newOwner;\r\n        }\r\n        return _oldOwner;\r\n    }\r\n\r\n    function changeDCRMOwner(address newOwner) external onlyOwner returns (bool) {\r\n        require(newOwner != address(0), \"new owner is the zero address\");\r\n        _oldOwner = owner();\r\n        _newOwner = newOwner;\r\n        _newOwnerEffectiveHeight = block.number + 13300;\r\n        emit LogChangeDCRMOwner(_oldOwner, _newOwner, _newOwnerEffectiveHeight);\r\n        return true;\r\n    }\r\n\r\n    function Swapin(bytes32 txhash, address account, uint256 amount) external onlyOwner returns (bool) {\r\n        _mint(account, amount);\r\n        emit LogSwapin(txhash, account, amount);\r\n        return true;\r\n    }\r\n\r\n    function Swapout(uint256 amount, address bindaddr) external returns (bool) {\r\n        require(bindaddr != address(0), \"bind address is the zero address\");\r\n        _burn(msg.sender, amount);\r\n        emit LogSwapout(msg.sender, bindaddr, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"effectiveHeight\",\"type\":\"uint256\"}],\"name\":\"LogChangeDCRMOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSwapin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bindaddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSwapout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swapin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bindaddr\",\"type\":\"address\"}],\"name\":\"Swapout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_FEE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeDCRMOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithFeeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShardSwapAsset", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://12dea760b9a3d0e8fd7f89fa7276b104ca53270ea8de7284093ed52328063e18"}