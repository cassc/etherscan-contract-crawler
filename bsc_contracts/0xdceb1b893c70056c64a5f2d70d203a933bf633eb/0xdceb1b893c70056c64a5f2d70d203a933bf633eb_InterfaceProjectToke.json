{"SourceCode": "{\"AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\n\\n/**\\n * Set implementation for storing and removing addresses with fixed gas lookups.\\n */\\nlibrary AddressSet {\\n  struct Data {\\n    address[] values; // contains unique addresses\\n    mapping (address =\\u003e uint128) index; // address position in the list, values[0] has index 1, values[1] index 2 and so on\\n    uint128 count; // number of occupied slots, might be less than the values array length\\n  }\\n\\n  /**\\n   * Adds an address if not already in the set.\\n   */\\n  function store (Data storage self, address value) public {\\n    // zero index means the address is not in the set\\n    if (self.index[value] == 0) {\\n      if (self.count \\u003c self.values.length)\\n        self.values[self.count] = value;\\n      else\\n        self.values.push(value); // extend the array if needed\\n      self.count++;\\n      // index is set to the position in the array + 1\\n      self.index[value] = self.count;\\n    }\\n  }\\n\\n  /**\\n   * Utility function to move an address in the array and update its index.\\n   */\\n  function moveTo (Data storage self, address value, uint128 toIndex) private {\\n    self.index[value] = toIndex;\\n    self.values[toIndex-1] = value;\\n  }\\n\\n  /**\\n   * Removes an address from the set.\\n   */\\n  function remove (Data storage self, address value) public {\\n    uint128 index = self.index[value];\\n    if (index \\u003e 0) {\\n        // in order to optimize space usage, the empty slot is replaced with the last one in the array\\n        uint128 lastIndex = uint128(self.count);\\n        address lastValue = self.values[lastIndex-1];\\n        moveTo(self, lastValue, index);\\n        // effective removal\\n        delete self.values[lastIndex-1];\\n        delete self.index[value];\\n        self.count--;\\n    }\\n  }\\n\\n  /**\\n   * Fixed gas lookup for values in the set.\\n   */\\n  function contains (Data storage self, address value) public view returns (bool) {\\n    return self.index[value] \\u003e 0;\\n  }\\n\\n  /**\\n   * Fixed gas lookup of positions of addresses in the set (position equals index).\\n   * Returns 0 if the address is not in the set.\\n   */\\n  function indexOf (Data storage self, address value) public view returns (uint128) {\\n    return self.index[value];\\n  }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ContractsDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"AddressSet.sol\\\";\\nimport \\\"StringSet.sol\\\";\\nimport \\\"LiquidityToken.sol\\\";\\n\\ncontract ContractsDirectory is Ownable {\\n    using AddressSet for AddressSet.Data;\\n    using StringSet for StringSet.Data;\\n\\n    AddressSet.Data private directory;\\n    AddressSet.Data private whitelistedProjectOwners;\\n    StringSet.Data private projects;\\n    mapping(address =\\u003e string) public projectRelatedToLT;\\n    mapping(address =\\u003e string) public whitelist;\\n    bool public areUserFunctionsDisabled;\\n\\n    /// Events ///////////////////////////////////////////////////////////////////\\n    event UserFunctionsAreDisabled(bool _areUserFunctionsDisabled);\\n    event ProjectOwnerWhitelisted(address _projectOwner, string _project);\\n    event AddedLTContract(address _contract);\\n    event RemovedLTContract(address _contract);\\n    event RemovedProjectByAdmin(address _projectOwner);\\n    event ChangedProjectOwnerAccount(address _projectOwnerOld, address _projectOwnerNew);\\n    event ChangedProjectName(string _oldProjectName, string _newProjectName);\\n    event AllocatedLTToProject(address _contract, string _project);\\n    event AllocatedProjectOwnerToProject(address _projectOwner, string _project);\\n    //////////////////////////////////////////////////////////////////////////////\\n\\n    modifier onlyWhitelistedProjectOwner(address _contract) {\\n        ensureOnlyWhitelistedProjectOwner(_contract);\\n        _;\\n    }\\n\\n    function ensureOnlyWhitelistedProjectOwner(address _contract) private view {\\n\\n        require(\\n            keccak256(bytes(whitelist[msg.sender])) != keccak256(bytes(\\\"\\\"))\\n            \\u0026\\u0026 LiquidityToken(_contract).owner() == msg.sender,\\n            \\\"Only whitelisted Owner of the contract\\\"\\n        );\\n    }\\n\\n    function enableOrDisableUserFunctions() public onlyOwner {\\n        bool _areUserFunctionsDisabled = !areUserFunctionsDisabled;\\n        areUserFunctionsDisabled = _areUserFunctionsDisabled;\\n        emit UserFunctionsAreDisabled(_areUserFunctionsDisabled);\\n    }\\n\\n    function ensureUserFunctionsAreNotDisabled() public view {\\n        require(\\n            areUserFunctionsDisabled == false,\\n            \\\"Transactions are currently disabled\\\"\\n        );\\n    }\\n\\n    // 2 projects can not have the same name\\n    // 1 project owner for 1 project (for a second project, the project owner will need another account)\\n    function whitelistProjectOwner(address _projectOwner, string memory _project) public onlyOwner {\\n\\n        require(\\n            keccak256(bytes(_project)) != keccak256(bytes(\\\"\\\")),\\n            \\\"Project name can not be blank\\\"\\n        );\\n        \\n        require(\\n            !projects.contains(_project),\\n            \\\"Project name already taken\\\"\\n        );\\n\\n        require(\\n            keccak256(bytes(whitelist[_projectOwner])) == keccak256(bytes(\\\"\\\")),\\n            \\\"This account is already registered for a project\\\"\\n        );\\n\\n        projects.store(_project);\\n        whitelist[_projectOwner] = _project;\\n        whitelistedProjectOwners.store(_projectOwner);\\n        emit ProjectOwnerWhitelisted(_projectOwner, _project);\\n    }\\n\\n    // several LT contracts can be added for a single project\\n    function addLTContract(address _contract) public onlyWhitelistedProjectOwner(_contract) {\\n        ensureUserFunctionsAreNotDisabled();\\n        directory.store(_contract);\\n        projectRelatedToLT[_contract] = whitelist[msg.sender];\\n        emit AddedLTContract(_contract);\\n    }\\n\\n    function removeLTContractByProjectOwner(address _contract) public onlyWhitelistedProjectOwner(_contract) {\\n        ensureUserFunctionsAreNotDisabled();\\n        directory.remove(_contract);\\n        delete projectRelatedToLT[_contract];\\n        emit RemovedLTContract(_contract);\\n    }\\n\\n    function removeLTContractByAdmin(address _contract) public onlyOwner {\\n        directory.remove(_contract);\\n        delete projectRelatedToLT[_contract];\\n        emit RemovedLTContract(_contract);\\n    }\\n\\n    function removeProjectByAdmin(address _projectOwner) public onlyOwner {\\n        projects.remove(whitelist[_projectOwner]);\\n        whitelistedProjectOwners.remove(_projectOwner);\\n        delete whitelist[_projectOwner];\\n        emit RemovedProjectByAdmin(_projectOwner);\\n    }\\n\\n// Manage changes ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    // Change the account of the Project owner, this is done within a single transaction\\n\\n    function changeProjectOwnerAccount(address _projectOwnerOld, address _projectOwnerNew) public onlyOwner {\\n\\n        require(\\n            keccak256(bytes(whitelist[_projectOwnerOld])) != keccak256(bytes(\\\"\\\")),\\n            \\\"The account to be replaced is not whitelisted\\\"\\n        );\\n\\n        require(\\n            keccak256(bytes(whitelist[_projectOwnerNew])) == keccak256(bytes(\\\"\\\")),\\n            \\\"The new account is already used\\\"\\n        );\\n    \\n        whitelistedProjectOwners.remove(_projectOwnerOld);\\n        whitelistedProjectOwners.store(_projectOwnerNew);\\n        whitelist[_projectOwnerNew] = whitelist[_projectOwnerOld];\\n        delete whitelist[_projectOwnerOld];\\n        emit ChangedProjectOwnerAccount(_projectOwnerOld, _projectOwnerNew);\\n    }\\n\\n    // Change Project Name, this requires several transactions\\n    // =\\u003e First disable user interactions with all LT contracts related to the Project subject to changes \\n\\n    function changeProjectName(string memory _oldProjectName, string memory _newProjectName) public onlyOwner {\\n        projects.remove(_oldProjectName);\\n        projects.store(_newProjectName);\\n        emit ChangedProjectName(_oldProjectName, _newProjectName);\\n    }\\n\\n    // after changing the name of a Project, all related LT must be manually associated to the new Project name\\n    function allocateLTToProject(address _contract, string memory _project) public onlyOwner {\\n        projectRelatedToLT[_contract] = _project;\\n        emit AllocatedLTToProject(_contract, _project);\\n    }\\n\\n    // after changing the name of a Project, its owner must be associated to the new Project name\\n    function allocateProjectOwnerToProject(address _projectOwner, string memory _project) public onlyOwner {\\n        whitelist[_projectOwner] = _project;\\n        emit AllocatedProjectOwnerToProject(_projectOwner, _project);\\n    }\\n\\n// View functions ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    function getLTContract(uint256 index) public view returns (address) {\\n        return directory.values[index];\\n    }\\n\\n    function countLTContracts() public view returns (uint256) {\\n        return directory.count;\\n    }\\n\\n    function getWhitelistedProjectName(uint256 index) public view returns (string memory) {\\n        return projects.values[index];\\n    }\\n\\n    function countWhitelistedProjectNames() public view returns (uint256) {\\n        return projects.count;\\n    }\\n\\n    function getWhitelistedProjectOwner(uint256 index) public view returns (address) {\\n        return whitelistedProjectOwners.values[index];\\n    }\\n\\n    function countWhitelistedProjectOwners() public view returns (uint256) {\\n        return whitelistedProjectOwners.count;\\n    }\\n\\n}\\n\"},\"DelegableToLT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"ERC20.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"AddressSet.sol\\\";\\n\\nabstract contract DelegableToLT is ERC20, Ownable {\\n  using AddressSet for AddressSet.Data;\\n\\n  AddressSet.Data private validatedInterfaceProjectToken;\\n  AddressSet.Data private allTimeValidatedInterfaceProjectToken;\\n  bool public isListOfInterfaceProjectTokenComplete;\\n\\n  /// Events ///////////////////////////////////////////////////////////////////\\n  event AddedAllTimeValidatedInterfaceProjectToken(address _interfaceProjectToken);\\n  event AddedInterfaceProjectToken(address _interfaceProjectToken);\\n  event ListOfValidatedInterfaceProjectTokenIsFinalized();\\n  event InterfaceProjectTokenRemoved(address _interfaceProjectToken);\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function getValidatedInterfaceProjectToken(uint index) public view returns (address) {\\n      return validatedInterfaceProjectToken.values[index];\\n  }\\n\\n  function countValidatedInterfaceProjectToken() public view returns (uint) {\\n      return validatedInterfaceProjectToken.count;\\n  }\\n\\n  modifier onlyInterfaceProjectToken() {\\n    ensureOnlyInterfaceProjectToken();\\n    _;\\n  }\\n\\n  function ensureOnlyInterfaceProjectToken() private view {\\n    require(\\n      validatedInterfaceProjectToken.contains(msg.sender),\\n      \\\"Only validated InterfaceProjectToken\\\"\\n      );\\n  }\\n\\n  function addInterfaceProjectToken(address _interfaceProjectToken)\\n    public onlyOwner() {\\n    \\n    if (isListOfInterfaceProjectTokenComplete == false) {\\n      allTimeValidatedInterfaceProjectToken.store(_interfaceProjectToken);\\n      emit AddedAllTimeValidatedInterfaceProjectToken(_interfaceProjectToken);\\n    }     \\n    else \\n      require(\\n        allTimeValidatedInterfaceProjectToken.contains(_interfaceProjectToken),\\n        \\\"Provided InterfaceProjectToken is not a valid one\\\"\\n        );\\n\\n    validatedInterfaceProjectToken.store(_interfaceProjectToken);\\n    emit AddedInterfaceProjectToken(_interfaceProjectToken);\\n  }\\n\\n  function finalizeListOfValidatedInterfaceProjectToken() public onlyOwner() {\\n    isListOfInterfaceProjectTokenComplete = true;\\n    emit ListOfValidatedInterfaceProjectTokenIsFinalized();\\n  }\\n\\n  function removeInterfaceProjectToken(address _interfaceProjectToken)\\n    public onlyOwner() {\\n\\n    validatedInterfaceProjectToken.remove(_interfaceProjectToken);\\n    emit InterfaceProjectTokenRemoved(_interfaceProjectToken);\\n  }\\n\\n  function burnByInterfaceProjectToken(address _user, uint _value)\\n    public onlyInterfaceProjectToken() {\\n\\n    _burn(_user, _value);\\n  }\\n\\n  function mintByInterfaceProjectToken(address _user, uint _value)\\n    public onlyInterfaceProjectToken() {\\n\\n    _mint(_user, _value);\\n  }\\n\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"Context.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"InterfaceProjectToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"LiquidityToken.sol\\\";\\nimport \\\"ProjectToken.sol\\\";\\n\\n\\ncontract InterfaceProjectToken is Ownable {\\n  using SafeMath for uint;\\n\\n  LiquidityToken public liquidityToken;\\n  ProjectToken public projectToken;\\n\\n  uint public constant multiplier1K = 1000;\\n  uint public dateLaunch;\\n  uint public dateEndCliff;\\n  uint public claimFeesPerThousandForPT;\\n  mapping (address =\\u003e uint) public valueProjectTokenToFullRecharge;\\n\\n  /// Events ///////////////////////////////////////////////////////////////////\\n  event StartSet(uint _dateLaunch, uint _dateEndCliff);\\n  event ProjectTokenReceived(address _user, uint _value, uint _fees, uint _hodlRewards);\\n  event IncreasedValueProjectTokenToFullRecharge(address _user, uint _valueIncreased);\\n  event LTRecharged(address _user, uint _value, uint _valueProjectToken, uint _hodlRewards);\\n  // liquidity token recharged (_value) in exchange of project token (_valueProjectToken)\\n  event ClaimFeesUpdated(uint _valuePerThousand); \\n  //////////////////////////////////////////////////////////////////////////////\\n \\n  constructor(LiquidityToken _liquidityToken, ProjectToken _projectToken) {\\n    require(\\n      address(_liquidityToken) != address(0x0),\\n      \\\"Set a valid address for LiquidityToken Contract\\\");\\n    require(\\n      address(_projectToken) != address(0x0),\\n      \\\"Set a valid address for ProjectToken Contract\\\");\\n    liquidityToken = _liquidityToken;\\n    projectToken = _projectToken;\\n  }\\n\\n  function ensureUserFunctionsAreNotDisabled() private view {\\n    liquidityToken.ensureUserFunctionsAreNotDisabled();\\n  }\\n\\n  /// Transaction by Owner to set up variables of the contract /////////////////\\n\\n  function setStart(uint _dateLaunch) public onlyOwner() {\\n    uint _dateLaunchStored = dateLaunch;\\n    \\n    if (_dateLaunchStored \\u003e 0) {\\n      require(\\n        block.timestamp \\u003c _dateLaunchStored,\\n        \\\"Launch date has already passed\\\");\\n    }\\n    require(\\n      block.timestamp \\u003c _dateLaunch,\\n      \\\"Provided launch date has already passed\\\");\\n\\n    dateLaunch = _dateLaunch;\\n    uint _dateEndCliff = _dateLaunch.add(\\n      liquidityToken.durationCliff()\\n      );\\n    dateEndCliff = _dateEndCliff;\\n    emit StartSet(_dateLaunch, _dateEndCliff);\\n  }\\n\\n  // Token Management //////////////////////////////////////////////////////////\\n\\n  function claimProjectToken() public {\\n\\n    ensureUserFunctionsAreNotDisabled();\\n\\n    uint _blockTime = block.timestamp;\\n    uint _dateLaunch = dateLaunch;\\n    \\n    require(\\n      _dateLaunch \\u003e 0\\n      \\u0026\\u0026 _dateLaunch \\u003c= _blockTime,\\n      \\\"No token to claim yet\\\");\\n    \\n    uint _hodlRewards = liquidityToken.updateStakingAndGetHodlRewardsByInterfacePT(msg.sender); \\n    uint _valueProjectTokenVested = getValueProjectTokenVestedAndUpdateLTBalances(msg.sender, _blockTime);\\n    uint _fees;\\n    \\n    if (liquidityToken.stakedLT() \\u003e 0) _fees = _valueProjectTokenVested.mul(claimFeesPerThousandForPT).div(multiplier1K);\\n\\n    uint _valueProjectTokenToGet = _valueProjectTokenVested.add(_hodlRewards).sub(_fees);\\n      \\n    projectToken.mintByInterfaceProjectToken(msg.sender, _valueProjectTokenToGet);\\n    liquidityToken.burnByInterfaceProjectToken(_valueProjectTokenToGet);\\n     \\n    if (_fees \\u003e 0) liquidityToken.updateRewardsAfterFeesPaymentByInterface(_fees);\\n    \\n    emit ProjectTokenReceived(msg.sender, _valueProjectTokenToGet, _fees, _hodlRewards);\\n  }\\n\\n  function getValueProjectTokenVestedAndUpdateLTBalances(address _user, uint _blockTime) \\n    private returns(uint _valueProjectToken) {\\n    \\n    uint _dateEndCliff = dateEndCliff;\\n\\n    uint _balanceFullyCharged =\\n      liquidityToken.getUserFullyChargedBalanceLiquiToken(_user);\\n\\n    uint _balancePartiallyCharged =\\n      liquidityToken.getUserPartiallyChargedBalanceLiquiToken(_user);\\n\\n    uint _dateEndVesting =\\n      _dateEndCliff.add(liquidityToken.durationLinearVesting());\\n\\n    uint _valueProjectTokenToFullRecharge = valueProjectTokenToFullRecharge[_user];\\n\\n    if (_blockTime \\u003e= _dateEndVesting) \\n      _valueProjectToken = _balanceFullyCharged.add(_balancePartiallyCharged).sub(_valueProjectTokenToFullRecharge);\\n    \\n    else {\\n\\n      if (_balancePartiallyCharged \\u003e 0) {\\n      uint _vestingDateUser = liquidityToken.getUserDateOfPartiallyChargedToken(_user);\\n\\n      if (_vestingDateUser \\u003c _dateEndCliff)\\n        _vestingDateUser = _dateEndCliff;\\n\\n      _valueProjectToken = getValueProjectTokenPerVestingSchedule(\\n        _balancePartiallyCharged, _blockTime, _vestingDateUser, false);\\n      }\\n\\n      if (_balanceFullyCharged \\u003e 0) \\n        _valueProjectToken = _valueProjectToken.add(\\n          getValueProjectTokenPerVestingSchedule(\\n          _balanceFullyCharged, _blockTime, _dateEndCliff, true)\\n          );\\n    }\\n    valueProjectTokenToFullRecharge[_user] = _valueProjectTokenToFullRecharge.add(_valueProjectToken);\\n    emit IncreasedValueProjectTokenToFullRecharge(_user, _valueProjectToken);\\n    \\n    if (_valueProjectToken \\u003e 0)\\n      liquidityToken.dischargeUserTokens(_user, _valueProjectToken);\\n  }\\n\\n  // function below should be used only with _dateStart \\u003e= _dateEndCliff and _blockTime \\u003c _dateEndVesting \\n  function getValueProjectTokenPerVestingSchedule(uint _balance, uint _blockTime, uint _dateStart, bool _addInitialUnlock)\\n    public view returns (uint _valueProjectToken) {\\n\\n    uint _fractionInitialUnlockPerThousand =\\n      liquidityToken.fractionInitialUnlockPerThousand();\\n    \\n    uint _durationLinearVesting = liquidityToken.durationLinearVesting();\\n\\n    if (_addInitialUnlock)\\n      _valueProjectToken = _balance.mul(_fractionInitialUnlockPerThousand).div(multiplier1K);\\n\\n    if (_blockTime \\u003e _dateStart \\u0026\\u0026 _durationLinearVesting \\u003e 0) {\\n      _valueProjectToken = _valueProjectToken\\n        .add(\\n          _balance\\n          .mul(multiplier1K.sub(_fractionInitialUnlockPerThousand))\\n          .mul(_blockTime.sub(_dateStart))\\n          .div(_durationLinearVesting.mul(multiplier1K))\\n        );\\n    }\\n  }\\n\\n  function rechargeLT(uint _valueProjectToken) public {\\n\\n    ensureUserFunctionsAreNotDisabled();\\n\\n    require(\\n      _valueProjectToken \\u003c= projectToken.balanceOf(msg.sender),\\n      \\\"Amount exceeds available balance\\\");\\n\\n    uint _valueProjectTokenToFullRecharge = valueProjectTokenToFullRecharge[msg.sender];\\n\\n    require(\\n      _valueProjectToken \\u003c= _valueProjectTokenToFullRecharge,\\n      \\\"Amount provided exceeds value for full recharge\\\");\\n    \\n    require(\\n      _valueProjectTokenToFullRecharge \\u003e 0,\\n      \\\"There are no Tokens to recharge\\\");\\n    \\n    uint _hodlRewards = liquidityToken.updateStakingAndGetHodlRewardsByInterfacePT(msg.sender);\\n    \\n    uint _valueLiquidityToken = _valueProjectToken.mul(\\n      liquidityToken.getUserPartiallyChargedBalanceLiquiToken(msg.sender)\\n      )\\n      .div(_valueProjectTokenToFullRecharge);\\n\\n    projectToken.burnByInterfaceProjectToken(msg.sender, _valueProjectToken);\\n    liquidityToken.mintByInterfaceProjectToken(_valueProjectToken);\\n\\n    liquidityToken.rechargeUserTokens(\\n      msg.sender, _valueLiquidityToken.add(_hodlRewards), _valueLiquidityToken, _valueProjectToken.add(_hodlRewards)\\n      );\\n    valueProjectTokenToFullRecharge[msg.sender] = valueProjectTokenToFullRecharge[msg.sender].sub(_valueProjectToken);\\n    \\n    emit LTRecharged(msg.sender, _valueLiquidityToken, _valueProjectToken, _hodlRewards);\\n  }\\n\\n  function updateClaimFeesForPT(uint _valuePerThousand) public onlyOwner() {\\n    require(_valuePerThousand \\u003c= liquidityToken.maxClaimFeesPerThousandForPT(), \\\"Invalid value\\\");\\n    claimFeesPerThousandForPT = _valuePerThousand;\\n    emit ClaimFeesUpdated(_valuePerThousand);   \\n  }\\n\\n}\"},\"LiquidityToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"ERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"InterfaceProjectToken.sol\\\";\\n\\ncontract LiquidityToken is ERC20, Ownable {\\n  using SafeMath for uint;\\n\\n  InterfaceProjectToken public interfaceProjectToken;\\n\\n  uint public constant multiplier1K = 1000;\\n  uint public stakingStartDate;\\n  uint public stakingDuration;\\n  uint public stakingDateLastCheckpoint;\\n  uint public campaignStakingRewards;\\n  uint public totalStakingRewards;\\n  uint public ratioFeesToRewardHodlersPerThousand = 1000;\\n  uint public currentRewardPerShare1e18;\\n  uint public stakedLT;\\n  uint public totalTokenAllocated;\\n  uint public withdrawFeesPerThousandForLT;\\n \\n  bool public areUserFunctionsDisabled;\\n  bool public isInterfaceProjectTokenLocked;\\n  bool public areAllocationsTerminated;\\n\\n  uint public immutable fractionInitialUnlockPerThousand;\\n  uint public immutable durationCliff;\\n  uint public immutable durationLinearVesting;\\n  uint public immutable maxInitialTokenAllocation;\\n  uint public immutable maxWithdrawFeesPerThousandForLT;\\n  uint public immutable maxClaimFeesPerThousandForPT;\\n  uint public immutable maxStakingAPR;\\n  uint public immutable maxStakingTokenAmount;\\n\\n  mapping (address =\\u003e uint) public claimedRewardPerShare1e18;\\n\\n  struct LiquiToken {\\n    uint fullyChargedBalance;\\n    uint partiallyChargedBalance;\\n    uint dateOfPartiallyCharged;\\n  }\\n\\n  mapping (address =\\u003e LiquiToken) public userLiquiToken;\\n\\n  /// Events ///////////////////////////////////////////////////////////////////\\n  event UserFunctionsAreDisabled(bool _areUserFunctionsDisabled);\\n  event InterfaceProjectTokenSet(InterfaceProjectToken _interfaceProjectToken);\\n  event InterfaceProjectTokenIsLocked();\\n  event IncreasedFullyChargedBalance(address _user, uint _value);\\n  event LTAllocatedByOwner(address _user, uint _value, uint _hodlRewards, bool _isAllocationStaked);\\n  event IncreasedTotalTokenAllocated(uint _value);\\n  event IncreasedStakedLT(uint _value);\\n  event AllocationsAreTerminated();\\n  event DecreasedFullyChargedBalanceAndStakedLT(address _user, uint _value);\\n  event LTReceived(address _user, uint _value, uint _totalFees, uint _feesToRewardHodlers, uint _hodlRewards);\\n  event ClaimedRewardPerShareUpdated(address _user, uint _value); \\n  event CurrentRewardPerShareAndStakingCheckpointUpdated(uint _rewardPerShare1e18, uint _blockTime);\\n  event IncreasedCurrentRewardPerShare(uint _value);\\n  event LTDeposited(address _user, uint _value, uint _hodlRewards);\\n  event StakingCampaignCreated(uint _startDate, uint _duration, uint _rewards);\\n  event WithdrawalFeesUpdated(uint _value);\\n  event RatioFeesToRewardHodlersUpdated(uint _value);\\n  event DecreasedPartiallyChargedBalance(address _user, uint _value);\\n  event UpdatedDateOfPartiallyChargedAndDecreasedStakedLT(uint _blockTime, uint _value);\\n  event TokensDischarged(address _user, uint _partiallyChargedBalance);\\n////////////////////////////////////////////////////////////////////////////////\\n\\n  constructor(string memory _name, string memory _symbol, uint _fractionInitialUnlockPerThousand, uint _durationCliff, \\n    uint _durationLinearVesting, uint _maxWithdrawFeesPerThousandForLT, uint _maxClaimFeesPerThousandForPT, uint _maxStakingAPR,\\n    uint _maxStakingTokenAmount, uint _maxInitialTokenAllocation) ERC20(_name, _symbol) {\\n    \\n    if (_durationLinearVesting == 0)\\n      require(\\n      _fractionInitialUnlockPerThousand == multiplier1K,\\n      \\\"If no vesting, all tokens must be released at launch\\\");\\n    else \\n      require(\\n      _fractionInitialUnlockPerThousand \\u003c multiplier1K,\\n      \\\"Initial unlock must be lower than 100%\\\");\\n    \\n    require(\\n      _maxWithdrawFeesPerThousandForLT \\u003c multiplier1K,\\n      \\\"Maximum withdrawal fee must be lower than 100%\\\");\\n\\n    require(\\n      _maxClaimFeesPerThousandForPT \\u003c multiplier1K,\\n      \\\"Maximum claim fee must be lower than 100%\\\");\\n\\n    durationCliff = _durationCliff;\\n    durationLinearVesting = _durationLinearVesting;\\n    fractionInitialUnlockPerThousand = _fractionInitialUnlockPerThousand;\\n    maxWithdrawFeesPerThousandForLT = _maxWithdrawFeesPerThousandForLT;\\n    maxClaimFeesPerThousandForPT = _maxClaimFeesPerThousandForPT;\\n    maxStakingAPR = _maxStakingAPR;\\n    maxStakingTokenAmount = _maxStakingTokenAmount;\\n    maxInitialTokenAllocation = _maxInitialTokenAllocation;\\n  }\\n\\n  function enableOrDisableUserFunctions() public onlyOwner() {\\n    bool _areUserFunctionsDisabled = !areUserFunctionsDisabled;\\n    areUserFunctionsDisabled = _areUserFunctionsDisabled;\\n    emit UserFunctionsAreDisabled(_areUserFunctionsDisabled);\\n  }\\n\\n  function ensureUserFunctionsAreNotDisabled() public view {\\n    require(\\n      areUserFunctionsDisabled == false,\\n      \\\"Transactions are currently disabled\\\"\\n      );\\n  }\\n\\n  function setInterfaceProjectToken(InterfaceProjectToken _interfaceProjectToken)\\n    public onlyOwner() {\\n\\n    require(\\n      address(_interfaceProjectToken) != address(0x0),\\n      \\\"Set a valid address\\\");\\n   \\n    require(\\n      isInterfaceProjectTokenLocked == false,\\n      \\\"interfaceProjectToken is locked\\\");\\n\\n    interfaceProjectToken = _interfaceProjectToken;\\n    emit InterfaceProjectTokenSet(_interfaceProjectToken);\\n  }\\n\\n  function lockInterfaceProjectToken() public onlyOwner() {\\n    isInterfaceProjectTokenLocked = true;\\n    emit InterfaceProjectTokenIsLocked();\\n  }\\n\\n  // Liquidity Token (LT) allocation ////////////////////////////////////////////////\\n \\n  function allocateLTByOwner(address[] memory _users, uint[] memory _values, bool _areAllocationsToBeStaked)\\n    public onlyOwner() {\\n    \\n    require(\\n      areAllocationsTerminated == false,\\n      \\\"allocations are terminated\\\");\\n\\n    checkProjectNotYetLaunched();\\n\\n    uint _allocatedTokenSupply;\\n    uint _usersListLength = _users.length;\\n    address _user;\\n    uint _value;\\n    uint _hodlRewards;\\n    uint _totalRewards;\\n  \\n    require(\\n      _usersListLength == _values.length,\\n      \\\"Provide same amount of values as users\\\");\\n\\n    for (uint _id = 0 ; _id \\u003c _usersListLength ; _id++) {\\n      _user = _users[_id];\\n      _value = _values[_id];\\n\\n      if (_areAllocationsToBeStaked) {\\n        _hodlRewards = updateStakingAndGetHodlRewards(_user);\\n        uint _fullyChargedBalanceIncreased = _value.add(_hodlRewards);\\n        userLiquiToken[_user].fullyChargedBalance = \\n          userLiquiToken[_user].fullyChargedBalance.add(_fullyChargedBalanceIncreased);\\n        emit IncreasedFullyChargedBalance(_user, _fullyChargedBalanceIncreased);\\n        _totalRewards = _totalRewards.add(_hodlRewards);\\n      }\\n      else \\n        _mint(_user, _value);\\n      \\n      _allocatedTokenSupply = _allocatedTokenSupply.add(_value);\\n      emit LTAllocatedByOwner(_user, _value, _hodlRewards, _areAllocationsToBeStaked);\\n    }\\n\\n    totalTokenAllocated = totalTokenAllocated.add(_allocatedTokenSupply);\\n    emit IncreasedTotalTokenAllocated(_allocatedTokenSupply);\\n\\n    require(\\n      totalTokenAllocated.sub(totalStakingRewards) \\u003c= maxInitialTokenAllocation,\\n      \\\"Maximum initial token allocation exceeded\\\");\\n\\n    if (_areAllocationsToBeStaked) {\\n      _mint(address(this), _allocatedTokenSupply);\\n      uint _increasedStakedLT = _allocatedTokenSupply.add(_totalRewards);\\n      stakedLT = stakedLT.add(_increasedStakedLT);\\n      emit IncreasedStakedLT(_increasedStakedLT);\\n    }\\n  }\\n\\n  function terminateAllocations() public onlyOwner() {\\n    areAllocationsTerminated = true;\\n    emit AllocationsAreTerminated();\\n  }\\n\\n  function checkProjectNotYetLaunched() private view {\\n    if (address(interfaceProjectToken) != address(0x0)) {\\n\\n      uint _dateLaunch = interfaceProjectToken.dateLaunch();\\n\\n      if (_dateLaunch \\u003e 0) {\\n        require(\\n          block.timestamp \\u003c _dateLaunch,\\n          \\\"Project already launched\\\");\\n      }\\n    }\\n  }\\n\\n  // LT Management /////////////////////////////////////////////////////////////\\n\\n  function withdrawLT(uint _value) public {\\n    \\n    ensureUserFunctionsAreNotDisabled();\\n    \\n    require(\\n      _value \\u003c= userLiquiToken[msg.sender].fullyChargedBalance,\\n      \\\"Amount exceeds available balance\\\");\\n\\n    uint _hodlRewards = updateStakingAndGetHodlRewards(msg.sender);\\n    uint _fees;\\n\\n    userLiquiToken[msg.sender].fullyChargedBalance = userLiquiToken[msg.sender].fullyChargedBalance.sub(_value);\\n    stakedLT = stakedLT.sub(_value);\\n    emit DecreasedFullyChargedBalanceAndStakedLT(msg.sender, _value);\\n    \\n    if (stakedLT \\u003e 0) _fees = _value.mul(withdrawFeesPerThousandForLT).div(multiplier1K);\\n\\n    uint _valueToGet = _value.add(_hodlRewards).sub(_fees);\\n    _transfer(address(this), msg.sender, _valueToGet);\\n    \\n    uint _feesToRewardHodlers = _fees.mul(ratioFeesToRewardHodlersPerThousand).div(multiplier1K);      \\n    _transfer(\\n      address(this), this.owner(), _fees.sub(_feesToRewardHodlers)\\n      );\\n \\n    if (_feesToRewardHodlers \\u003e 0) updateRewardsAfterFeesPayment(_feesToRewardHodlers);\\n    \\n    emit LTReceived(msg.sender, _valueToGet, _fees, _feesToRewardHodlers, _hodlRewards);\\n  }\\n\\n  function updateStakingAndGetHodlRewards(address _user) private returns (uint _hodlRewards) {\\n    updateStakingParameters(block.timestamp);\\n\\n    uint _currentRewardPerShare1e18 = currentRewardPerShare1e18;\\n    _hodlRewards = getHodlRewards(_user, _currentRewardPerShare1e18);\\n    claimedRewardPerShare1e18[_user] = _currentRewardPerShare1e18;\\n    emit ClaimedRewardPerShareUpdated(_user, _currentRewardPerShare1e18); \\n  }\\n  \\n  function updateStakingParameters(uint _blockTime) private {\\n    uint _updatedRewardPerShare1e18 = getUpdatedRewardPerShare1e18(_blockTime);\\n    if (_updatedRewardPerShare1e18 \\u003e currentRewardPerShare1e18) {\\n      currentRewardPerShare1e18 = _updatedRewardPerShare1e18;\\n      stakingDateLastCheckpoint = _blockTime;\\n      emit CurrentRewardPerShareAndStakingCheckpointUpdated(_updatedRewardPerShare1e18, _blockTime);\\n    }\\n  }  \\n\\n  function getUpdatedRewardPerShare1e18(uint _blockTime) public view returns(uint _updatedRewardPerShare1e18) {  \\n  \\n    uint _stakingEndDate = stakingStartDate.add(stakingDuration);\\n    _updatedRewardPerShare1e18 = currentRewardPerShare1e18;\\n  \\n    if (\\n      _blockTime \\u003e stakingDateLastCheckpoint \\n      \\u0026\\u0026 stakingDateLastCheckpoint \\u003c _stakingEndDate \\n      \\u0026\\u0026 stakedLT \\u003e 0\\n      ) {\\n        if (_blockTime \\u003e _stakingEndDate) _blockTime = _stakingEndDate;\\n        _updatedRewardPerShare1e18 = _updatedRewardPerShare1e18.add(\\n          (_blockTime.sub(stakingDateLastCheckpoint)).mul(campaignStakingRewards).mul(1e18)\\n          .div(stakingDuration.mul(stakedLT))\\n          );    \\n    } \\n  }\\n\\n  function getHodlRewards(address _user, uint _currentRewardPerShare1e18) public view returns(uint _hodlRewards) {\\n\\n    uint _totalTokenOwned = userLiquiToken[_user].fullyChargedBalance.add(userLiquiToken[_user].partiallyChargedBalance);\\n    if (address(interfaceProjectToken) != address(0x0)) \\n      _totalTokenOwned = _totalTokenOwned.sub(interfaceProjectToken.valueProjectTokenToFullRecharge(_user));\\n    \\n    _hodlRewards = _totalTokenOwned\\n      .mul(\\n      _currentRewardPerShare1e18.sub(claimedRewardPerShare1e18[_user])\\n      )\\n      .div(1e18);\\n  }\\n\\n  function updateRewardsAfterFeesPayment(uint _fees) private {\\n    uint _increasedCurrentRewardPerShare1e18 = _fees.mul(1e18).div(stakedLT);\\n    // this function is called only when _fees \\u003e 0 which occurs only when stakedLT \\u003e 0, ensuring there will be no division by 0\\n    currentRewardPerShare1e18 = currentRewardPerShare1e18.add(_increasedCurrentRewardPerShare1e18); \\n    emit IncreasedCurrentRewardPerShare(_increasedCurrentRewardPerShare1e18);\\n  }\\n\\n  function depositLT(uint _value) public {\\n   \\n    ensureUserFunctionsAreNotDisabled();\\n\\n    require(\\n      _value \\u003c= balanceOf(msg.sender),\\n      \\\"Value exceeds available balance\\\"\\n      );\\n    \\n    uint _hodlRewards = updateStakingAndGetHodlRewards(msg.sender);\\n    uint _valueWithRewards = _value.add(_hodlRewards);\\n\\n    userLiquiToken[msg.sender].fullyChargedBalance = userLiquiToken[msg.sender].fullyChargedBalance.add(_valueWithRewards);\\n    emit IncreasedFullyChargedBalance(msg.sender, _valueWithRewards);\\n    stakedLT = stakedLT.add(_valueWithRewards);\\n    emit IncreasedStakedLT(_valueWithRewards);\\n    \\n    _transfer(msg.sender, address(this), _value);\\n    \\n    emit LTDeposited(msg.sender, _value, _hodlRewards);\\n  }\\n\\n  function setStakingRewards(uint _stakingStartDate, uint _stakingDuration, uint _campaignStakingRewards) \\n    public onlyOwner() {\\n\\n    uint _blockTime = block.timestamp;\\n\\n    require(\\n      _stakingStartDate \\u003e _blockTime \\u0026\\u0026 _stakingDuration \\u003e 0,\\n      \\\"Starting date must be after current date and staking duration must be greater than 0\\\"\\n      );\\n    \\n    if (stakingStartDate \\u003e 0)\\n      require(\\n        _blockTime \\u003e stakingStartDate.add(stakingDuration), \\\"Current staking campaign is not over yet\\\"\\n        ); \\n\\n    require(\\n      _campaignStakingRewards \\u003c= maxStakingTokenAmount,\\n      \\\"Max allowed token amount exceeded\\\"\\n      );\\n    \\n    if (stakedLT \\u003e 0)\\n      require(\\n        _campaignStakingRewards.mul(100).mul(86400*365).div(_stakingDuration).div(stakedLT) \\u003c= maxStakingAPR,\\n        \\\"Max allowed APR exceeded\\\"\\n        );\\n    \\n    updateStakingParameters(_blockTime); // to finalize previous staking campaign if not yet triggered by a user\\n    \\n    stakingStartDate = _stakingStartDate;\\n    stakingDateLastCheckpoint = _stakingStartDate;\\n    stakingDuration = _stakingDuration;\\n    campaignStakingRewards = _campaignStakingRewards;\\n    totalStakingRewards = totalStakingRewards.add(_campaignStakingRewards);\\n    totalTokenAllocated = totalTokenAllocated.add(_campaignStakingRewards);\\n    emit StakingCampaignCreated(_stakingStartDate, _stakingDuration, _campaignStakingRewards);\\n    _mint(address(this), _campaignStakingRewards);\\n  }  \\n\\n  function updateWithdrawalFeesForLT(uint _valuePerThousand) public onlyOwner() {\\n    require(_valuePerThousand \\u003c= maxWithdrawFeesPerThousandForLT, \\\"Invalid value\\\");\\n    withdrawFeesPerThousandForLT = _valuePerThousand;\\n    emit WithdrawalFeesUpdated(_valuePerThousand);    \\n  }\\n\\n  function updateRatioFeesToRewardHodlers(uint _valuePerThousand) public onlyOwner() {\\n    require(_valuePerThousand \\u003c= multiplier1K, \\\"Invalid value\\\");\\n    ratioFeesToRewardHodlersPerThousand = _valuePerThousand;\\n    emit RatioFeesToRewardHodlersUpdated(_valuePerThousand);\\n  }\\n\\n  // transactions performed by InterfaceProjectToken Contract /////////////////\\n\\n  modifier onlyInterfaceProjectToken() {\\n    ensureOnlyInterfaceProjectToken();\\n    _;\\n  }\\n\\n  function ensureOnlyInterfaceProjectToken() private view {\\n    require(\\n      msg.sender == address(interfaceProjectToken),\\n      \\\"Only validated InterfaceProjectToken Contract\\\"\\n      );\\n  }\\n\\n  function updateStakingAndGetHodlRewardsByInterfacePT(address _user) public onlyInterfaceProjectToken() returns (uint) {\\n    return(\\n      updateStakingAndGetHodlRewards(_user)\\n      );  \\n  }\\n\\n  function rechargeUserTokens(address _user, uint _valueFullyChargedToIncrease, uint _valuePartiallyChargedToDecrease, \\n    uint _valueProjectTokenWithRewards) public onlyInterfaceProjectToken() {\\n\\n    userLiquiToken[_user].fullyChargedBalance =\\n      userLiquiToken[_user].fullyChargedBalance.add(_valueFullyChargedToIncrease);\\n    emit IncreasedFullyChargedBalance(_user, _valueFullyChargedToIncrease);\\n    userLiquiToken[_user].partiallyChargedBalance =\\n      userLiquiToken[_user].partiallyChargedBalance.sub(_valuePartiallyChargedToDecrease);\\n    emit DecreasedPartiallyChargedBalance(_user, _valuePartiallyChargedToDecrease);\\n    stakedLT = stakedLT.add(_valueProjectTokenWithRewards);\\n    emit IncreasedStakedLT(_valueProjectTokenWithRewards);\\n  }\\n\\n  function dischargeUserTokens(address _user, uint _valueProjectToken) public onlyInterfaceProjectToken() {\\n    \\n    stakedLT = stakedLT.sub(_valueProjectToken);\\n    userLiquiToken[_user].dateOfPartiallyCharged = block.timestamp;\\n    emit UpdatedDateOfPartiallyChargedAndDecreasedStakedLT(block.timestamp, _valueProjectToken);\\n    \\n    if (userLiquiToken[_user].fullyChargedBalance \\u003e 0) {\\n      uint _partiallyChargedBalance = \\n        userLiquiToken[_user].partiallyChargedBalance.add(userLiquiToken[_user].fullyChargedBalance);\\n      userLiquiToken[_user].partiallyChargedBalance = _partiallyChargedBalance;\\n      userLiquiToken[_user].fullyChargedBalance = 0;\\n      emit TokensDischarged(_user, _partiallyChargedBalance);\\n    }             \\n  }\\n\\n  function mintByInterfaceProjectToken(uint _value) public onlyInterfaceProjectToken() {\\n    _mint(address(this), _value);\\n  }\\n\\n  function burnByInterfaceProjectToken(uint _value) public onlyInterfaceProjectToken() {\\n    _burn(address(this), _value);   \\n  }\\n\\n  function updateRewardsAfterFeesPaymentByInterface(uint _fees) public onlyInterfaceProjectToken() {\\n    updateRewardsAfterFeesPayment(_fees);\\n  }\\n\\n  // functions to access to userLiquiToken from other contracts (userLiquiToken is a mapping of a struct which can not directly be accessed by another contract)\\n\\n  function getUserFullyChargedBalanceLiquiToken(address _user) public view\\n    returns(uint _fullyChargedBalance) {\\n\\n    _fullyChargedBalance = userLiquiToken[_user].fullyChargedBalance;\\n  }\\n\\n  function getUserPartiallyChargedBalanceLiquiToken(address _user) public view\\n    returns(uint _partiallyChargedBalance) {\\n\\n    _partiallyChargedBalance = userLiquiToken[_user].partiallyChargedBalance;\\n  }\\n\\n  function getUserDateOfPartiallyChargedToken(address _user) public view\\n    returns(uint _dateOfPartiallyCharged) {\\n\\n    _dateOfPartiallyCharged = userLiquiToken[_user].dateOfPartiallyCharged;\\n  }\\n\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"ProjectToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"DelegableToLT.sol\\\";\\n\\ncontract ProjectToken is DelegableToLT {\\n  // ERC20 and Ownable standard functions are already included in DelegableToLT (but not SafeMath)\\n  constructor (string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"StringSet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.6;\\n\\n\\n/**\\n * Set implementation for storing and removing strings with fixed gas lookups.\\n */\\nlibrary StringSet {\\n  struct Data {\\n    string[] values; // contains unique strings\\n    mapping (string =\\u003e uint128) index; // string position in the list, values[0] has index 1, values[1] index 2 and so on\\n    uint128 count; // number of occupied slots, might be less than the values array length\\n  }\\n\\n  /**\\n   * Adds an string if not already in the set.\\n   */\\n  function store (Data storage self, string memory value) public {\\n    // zero index means the string is not in the set\\n    if (self.index[value] == 0) {\\n      if (self.count \\u003c self.values.length)\\n        self.values[self.count] = value;\\n      else\\n        self.values.push(value); // extend the array if needed\\n      self.count++;\\n      // index is set to the position in the array + 1\\n      self.index[value] = self.count;\\n    }\\n  }\\n\\n  /**\\n   * Utility function to move an string in the array and update its index.\\n   */\\n  function moveTo (Data storage self, string memory value, uint128 toIndex) private {\\n    self.index[value] = toIndex;\\n    self.values[toIndex-1] = value;\\n  }\\n\\n  /**\\n   * Removes an string from the set.\\n   */\\n  function remove (Data storage self, string memory value) public {\\n    uint128 index = self.index[value];\\n    if (index \\u003e 0) {\\n        // in order to optimize space usage, the empty slot is replaced with the last one in the array\\n        uint128 lastIndex = uint128(self.count);\\n        string memory lastValue = self.values[lastIndex-1];\\n        moveTo(self, lastValue, index);\\n        // effective removal\\n        delete self.values[lastIndex-1];\\n        delete self.index[value];\\n        self.count--;\\n    }\\n  }\\n\\n  /**\\n   * Fixed gas lookup for values in the set.\\n   */\\n  function contains (Data storage self, string memory value) public view returns (bool) {\\n    return self.index[value] \\u003e 0;\\n  }\\n\\n  /**\\n   * Fixed gas lookup of positions of strings in the set (position equals index).\\n   * Returns 0 if the string is not in the set.\\n   */\\n  function indexOf (Data storage self, string memory value) public view returns (uint128) {\\n    return self.index[value];\\n  }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract LiquidityToken\",\"name\":\"_liquidityToken\",\"type\":\"address\"},{\"internalType\":\"contract ProjectToken\",\"name\":\"_projectToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valuePerThousand\",\"type\":\"uint256\"}],\"name\":\"ClaimFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueIncreased\",\"type\":\"uint256\"}],\"name\":\"IncreasedValueProjectTokenToFullRecharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueProjectToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hodlRewards\",\"type\":\"uint256\"}],\"name\":\"LTRecharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hodlRewards\",\"type\":\"uint256\"}],\"name\":\"ProjectTokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dateLaunch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dateEndCliff\",\"type\":\"uint256\"}],\"name\":\"StartSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimFeesPerThousandForPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateEndCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dateStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addInitialUnlock\",\"type\":\"bool\"}],\"name\":\"getValueProjectTokenPerVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueProjectToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"contract LiquidityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier1K\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectToken\",\"outputs\":[{\"internalType\":\"contract ProjectToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueProjectToken\",\"type\":\"uint256\"}],\"name\":\"rechargeLT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dateLaunch\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valuePerThousand\",\"type\":\"uint256\"}],\"name\":\"updateClaimFeesForPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valueProjectTokenToFullRecharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterfaceProjectToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b51c8be5cc61da9d3604060d7e22255799be0c00000000000000000000000004c61d70c0089d708040919aac7bdd600da72bc81", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://528df39d1a06bbd129921c6c08aaf9a6c942430d027a0b1cc699c887ea0a226f"}