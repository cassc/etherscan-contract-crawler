{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n/**\r\n * @title NANOBET-GAMES Smart Contract - A product of NanoBet Token.  (Decentralied Lottery Sysstem)\r\n * @author https://t.me/original_beast   https://t.me/nanobetportal https://t.me/nanobetgames\r\n **/\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract NanoBetGames {\r\n    address public owner;\r\n    address public winner;\r\n    uint256 public startBlock;\r\n    uint256 public gameNumber;\r\n    address public lotteryCroupier;\r\n\r\n    // Checking if participant holds NanoBet Token\r\n    address public tokenAdddress;\r\n\r\n    address public houseFeeReceiver;\r\n    uint public houseFeePercent = 5;\r\n    uint public croupierFeePercent = 5;\r\n\r\n    //\\\\...\r\n    //    |\r\n    //\\\\...\r\n    enum CampaignStatus {\r\n        Inactive,\r\n        Active\r\n    }\r\n    CampaignStatus public campaignStatus = CampaignStatus.Inactive;\r\n\r\n    struct LotterySettings {\r\n        uint256 entryAmount;\r\n        uint queueSize;\r\n        bool isActive;\r\n    }\r\n\r\n    struct LotteryInstance {\r\n        address[] players;\r\n        uint256[] uniqueKeys; //\\\\....\r\n        uint256 poolAmount;\r\n        address gameWinner;\r\n        bool isQueued;\r\n        mapping(address => bool) hasEntered;\r\n    }\r\n\r\n    event LotteryEntry(address player, uint256 entryAmount, uint256 lotteryId);\r\n\r\n    event QueueFull(uint256 queuedLotteryId, bool isFull);\r\n\r\n    event LotteryStarted(\r\n        address[] players,\r\n        address winner,\r\n        uint256 prize,\r\n        uint outcome,\r\n        uint256 gameNumber,\r\n        uint256 random\r\n    );\r\n\r\n    mapping(uint256 => LotterySettings) public lotterySettings;\r\n    mapping(uint256 => LotteryInstance) public lotteryInstances;\r\n    uint256 public currentLotteryId;\r\n\r\n    constructor(\r\n        address _tokenAddress, // ERC20 contract call address\r\n        address _lotteryCroupier, // caller of winner\r\n        address _houseFeeReceiver // contract maintenanceFee\r\n    ) {\r\n        owner = msg.sender;\r\n        currentLotteryId = 1;\r\n        lotteryCroupier = _lotteryCroupier;\r\n        houseFeeReceiver = _houseFeeReceiver;\r\n\r\n        tokenAdddress = _tokenAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCroupier() {\r\n        require(\r\n            msg.sender == lotteryCroupier,\r\n            \"Only the croupier can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function createLottery(\r\n        uint256 entryFee,\r\n        uint256 maxPlayers\r\n    ) external onlyOwner {\r\n        require(entryFee > 0 && maxPlayers > 0, \"Invalid lottery settings\");\r\n        lotterySettings[currentLotteryId] = LotterySettings(\r\n            entryFee,\r\n            maxPlayers,\r\n            true\r\n        );\r\n        currentLotteryId++;\r\n        //\\\\..\r\n        campaignStatus = CampaignStatus.Active;\r\n    }\r\n\r\n    //\\\\.. Implemented automatic fee distribution\r\n\r\n    function enterLottery(uint8 lotteryId) public payable {\r\n        LotterySettings storage currentLotterySettings = lotterySettings[\r\n            lotteryId\r\n        ];\r\n        LotteryInstance storage currentLotteryInstance = lotteryInstances[\r\n            lotteryId\r\n        ];\r\n\r\n        require(currentLotterySettings.entryAmount > 0, \"Lottery not found\");\r\n        require(currentLotterySettings.isActive == true, \"Lottery is not live\");\r\n\r\n        // Ensure the sent amount is at least the required entry amount\r\n        require(\r\n            msg.value >= currentLotterySettings.entryAmount,\r\n            \"You must send at least the entry amount to enter\"\r\n        );\r\n\r\n        // Check if the sender holds the specified ERC20 token\r\n        require(\r\n            IERC20(tokenAdddress).balanceOf(msg.sender) > 0,\r\n            \"You must hold nanobet before you can participate\"\r\n        );\r\n\r\n        require(\r\n            currentLotteryInstance.players.length <\r\n                currentLotterySettings.queueSize,\r\n            \"Queue is full, wait for the next round.\"\r\n        );\r\n\r\n        require(\r\n            currentLotteryInstance.hasEntered[msg.sender] == false,\r\n            \"You have already entered this lottery\"\r\n        );\r\n\r\n        uint houseFee = (msg.value * houseFeePercent) / 100; //\\\\..\r\n        uint croupierFee = (msg.value * croupierFeePercent) / 100; //\\\\..\r\n        uint playerAmount = msg.value - houseFee - croupierFee; //\\\\..\r\n\r\n        // Transfer the fees to the respective addresses\r\n        payable(houseFeeReceiver).transfer(houseFee);\r\n        payable(lotteryCroupier).transfer(croupierFee);\r\n\r\n        currentLotteryInstance.players.push(msg.sender);\r\n        currentLotteryInstance.poolAmount += playerAmount;\r\n\r\n        uint256 uniqueKey = generateUniqueKey(msg.sender);\r\n        currentLotteryInstance.uniqueKeys.push(uniqueKey);\r\n        currentLotteryInstance.hasEntered[msg.sender] = true;\r\n\r\n        // If the queue is now full, mark it as queued\r\n        if (\r\n            currentLotteryInstance.players.length ==\r\n            currentLotterySettings.queueSize\r\n        ) {\r\n            emit QueueFull(lotteryId, true);\r\n            currentLotteryInstance.isQueued = true;\r\n        }\r\n\r\n        emit LotteryEntry(msg.sender, msg.value, lotteryId);\r\n    }\r\n\r\n    //\\\\.. Implemented logics for distribution lottery to 3 participants.\r\n    function selectWinner(uint8 lotteryId) external onlyCroupier {\r\n        //\\\\..\r\n        // require(campaignStatus == CampaignStatus.Active, \"No active campaign.\");\r\n        require(\r\n            lotterySettings[lotteryId].isActive == true,\r\n            \"No active campaign.\"\r\n        );\r\n\r\n        LotteryInstance storage currentLotteryInstance = lotteryInstances[\r\n            lotteryId\r\n        ];\r\n        require(\r\n            currentLotteryInstance.isQueued == true,\r\n            \"The queue is not full.\"\r\n        );\r\n\r\n        uint256 combinedKeys = 0;\r\n        for (uint i = 0; i < currentLotteryInstance.uniqueKeys.length; i++) {\r\n            combinedKeys ^= currentLotteryInstance.uniqueKeys[i];\r\n        }\r\n\r\n        uint256 randNumber = rand(combinedKeys); //\\\\..\r\n        address[] memory winners = new address[](3);\r\n        uint256 playersLength = currentLotteryInstance.players.length;\r\n\r\n        winners[0] = currentLotteryInstance.players[randNumber % playersLength];\r\n        winners[1] = currentLotteryInstance.players[\r\n            (randNumber + 1) % playersLength\r\n        ];\r\n        winners[2] = currentLotteryInstance.players[\r\n            (randNumber + 2) % playersLength\r\n        ];\r\n\r\n        ///\\\\..\r\n        // Ensure all winners are unique\r\n        while (winners[1] == winners[0]) {\r\n            winners[1] = currentLotteryInstance.players[\r\n                (randNumber + 3) % playersLength\r\n            ];\r\n        }\r\n\r\n        while (winners[2] == winners[0] || winners[2] == winners[1]) {\r\n            winners[2] = currentLotteryInstance.players[\r\n                (randNumber + 4) % playersLength\r\n            ];\r\n        }\r\n\r\n        //\\\\..\r\n        uint totalWinnings = currentLotteryInstance.poolAmount;\r\n        uint[] memory winnings = new uint[](3);\r\n        winnings[0] = (totalWinnings * 60) / 100; // 60%\r\n        winnings[1] = (totalWinnings * 25) / 100; // 25%\r\n        winnings[2] = (totalWinnings * 15) / 100; // 15%\r\n\r\n        for (uint i = 0; i < winners.length; i++) {\r\n            payable(winners[i]).transfer(winnings[i]);\r\n        }\r\n\r\n        emit LotteryStarted(\r\n            currentLotteryInstance.players,\r\n            winners[0],\r\n            winnings[0],\r\n            randNumber % currentLotteryInstance.players.length,\r\n            gameNumber,\r\n            randNumber\r\n        );\r\n\r\n        // Set the specific lottery to inactive after winner selection\r\n        lotterySettings[lotteryId].isActive = false;\r\n        reset(lotteryId);\r\n        if (hasActiveLotteries()) {\r\n            campaignStatus = CampaignStatus.Active;\r\n        } else {\r\n            campaignStatus = CampaignStatus.Inactive;\r\n        }\r\n    }\r\n\r\n    function reset(uint8 lotteryId) private {\r\n        LotteryInstance storage currentLotteryInstance = lotteryInstances[\r\n            lotteryId\r\n        ];\r\n        delete currentLotteryInstance.players;\r\n        delete currentLotteryInstance.uniqueKeys; //\\\\..\r\n        currentLotteryInstance.poolAmount = 0;\r\n        currentLotteryInstance.isQueued = false;\r\n        winner = address(0);\r\n    }\r\n\r\n    //\\\\.. Checking if there are other lotteries running before\r\n    //\\\\.. setting campaign inactive\r\n    function hasActiveLotteries() private view returns (bool) {\r\n        for (uint8 i = 0; i < currentLotteryId; i++) {\r\n            if (lotterySettings[i].isActive == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //\\\\..\r\n    function rand(uint256 combinedKeys) private view returns (uint256) {\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp +\r\n                        block.basefee +\r\n                        combinedKeys +\r\n                        ((\r\n                            uint256(keccak256(abi.encodePacked(block.coinbase)))\r\n                        ) / (block.timestamp)) +\r\n                        block.gaslimit +\r\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\r\n                            (block.timestamp)) +\r\n                        block.number\r\n                )\r\n            )\r\n        );\r\n        return seed;\r\n    }\r\n\r\n    //\\\\..\r\n    function generateUniqueKey(\r\n        address participant\r\n    ) private view returns (uint256) {\r\n        uint256 uniqueKey = uint256(\r\n            keccak256(abi.encodePacked(participant, block.timestamp))\r\n        );\r\n        return uniqueKey;\r\n    }\r\n\r\n    //\\\\..\r\n    function getParticipantUniqueKey(\r\n        uint256 lotteryId,\r\n        address user\r\n    ) public view returns (uint256) {\r\n        LotteryInstance storage lotteryInstance = lotteryInstances[lotteryId];\r\n        for (uint i = 0; i < lotteryInstance.players.length; i++) {\r\n            if (lotteryInstance.players[i] == user) {\r\n                return lotteryInstance.uniqueKeys[i];\r\n            }\r\n        }\r\n        revert(\"User not found in this lottery\");\r\n    }\r\n\r\n    // Rest Of Lottery Logics Implementation\r\n    //\\\\.. Allow excess amount to be withdrawn if lottery is inactive\r\n    function withdrawExcess() public onlyOwner {\r\n        require(\r\n            campaignStatus == CampaignStatus.Inactive,\r\n            \"Campaign must be inactive to withdraw excess funds.\"\r\n        );\r\n        uint256 excessFunds = address(this).balance;\r\n        payable(owner).transfer(excessFunds);\r\n    }\r\n\r\n    // Get tupple list of participants in a pots\r\n    function getPlayers(\r\n        uint8 lotteryId\r\n    ) public view returns (address[] memory) {\r\n        LotteryInstance storage currentLotteryInstance = lotteryInstances[\r\n            lotteryId\r\n        ];\r\n        return currentLotteryInstance.players;\r\n    }\r\n\r\n    // Retrieve available contracts (ETH) balace\r\n    function getContractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    //\\\\... Other logics\r\n    // Set new fee mechanism for houseFee\r\n    function updateHouseFee(uint8 newPercent) external onlyOwner {\r\n        require(\r\n            newPercent != houseFeePercent,\r\n            \"This is already the house fee percent\"\r\n        );\r\n        require(\r\n            newPercent <= 30,\r\n            \"Cannot set house fee percentage higher than 30 percent\"\r\n        );\r\n\r\n        houseFeePercent = newPercent;\r\n    }\r\n\r\n    // Set new fee mechanism for croupierFee\r\n    function updateCroupierFee(uint8 newPercent) external onlyOwner {\r\n        require(\r\n            newPercent != croupierFeePercent,\r\n            \"This is already the croupier fee percent\"\r\n        );\r\n        require(\r\n            newPercent <= 10,\r\n            \"Cannot set croupier fee percentage higher than 10 percent\"\r\n        );\r\n\r\n        croupierFeePercent = newPercent;\r\n    }\r\n\r\n    function setQueueSize(uint8 newSize, uint8 lotteryId) external onlyOwner {\r\n        LotterySettings storage currentLotterySettings = lotterySettings[\r\n            lotteryId\r\n        ];\r\n        require(\r\n            newSize != currentLotterySettings.queueSize,\r\n            \"This is already the queue size!\"\r\n        );\r\n        require(newSize > 0, \"Cannot set queue size to 0!\");\r\n\r\n        currentLotterySettings.queueSize = newSize;\r\n    }\r\n\r\n    function setEntryAmount(\r\n        uint256 newAmount,\r\n        uint8 lotteryId\r\n    ) external onlyOwner {\r\n        LotterySettings storage currentLotterySettings = lotterySettings[\r\n            lotteryId\r\n        ];\r\n        require(\r\n            newAmount != currentLotterySettings.entryAmount,\r\n            \"This is already the entry amount!\"\r\n        );\r\n        require(newAmount > 0, \"Cannot set entry amount to 0!\");\r\n\r\n        currentLotterySettings.entryAmount = newAmount;\r\n    }\r\n\r\n    function setCroupier(address newCroupier) external onlyOwner {\r\n        require(\r\n            newCroupier != lotteryCroupier,\r\n            \"This is already the Croupier Address!\"\r\n        );\r\n        lotteryCroupier = newCroupier;\r\n    }\r\n\r\n    function getLotteryDetails(\r\n        uint8 lotteryId\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 entryAmount,\r\n            uint256 queueSize,\r\n            address[] memory players,\r\n            uint256 poolAmount,\r\n            address gameWinner\r\n        )\r\n    {\r\n        // Access the lottery settings for the specified lotteryId\r\n        LotterySettings storage currentLotterySettings = lotterySettings[\r\n            lotteryId\r\n        ];\r\n        // Access the current lottery instance\r\n        LotteryInstance storage currentLotteryInstance = lotteryInstances[\r\n            lotteryId\r\n        ];\r\n\r\n        // Retrieve the relevant details from the settings\r\n        entryAmount = currentLotterySettings.entryAmount;\r\n        queueSize = currentLotterySettings.queueSize;\r\n        players = currentLotteryInstance.players;\r\n        poolAmount = currentLotteryInstance.poolAmount;\r\n        gameWinner = currentLotteryInstance.gameWinner;\r\n    }\r\n\r\n    // Update contract caller address\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid new owner address\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    receive() external payable {\r\n        for (uint8 lotteryId = 0; lotteryId < currentLotteryId; lotteryId++) {\r\n            LotterySettings storage currentLotterySettings = lotterySettings[\r\n                lotteryId\r\n            ];\r\n\r\n            if (msg.value == currentLotterySettings.entryAmount) {\r\n                enterLottery(lotteryId);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryCroupier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_houseFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"LotteryEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"LotteryStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queuedLotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFull\",\"type\":\"bool\"}],\"name\":\"QueueFull\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignStatus\",\"outputs\":[{\"internalType\":\"enum NanoBetGames.CampaignStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"croupierFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lotteryId\",\"type\":\"uint8\"}],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lotteryId\",\"type\":\"uint8\"}],\"name\":\"getLotteryDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueSize\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameWinner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParticipantUniqueKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lotteryId\",\"type\":\"uint8\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryCroupier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryInstances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameWinner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isQueued\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotterySettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lotteryId\",\"type\":\"uint8\"}],\"name\":\"selectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCroupier\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lotteryId\",\"type\":\"uint8\"}],\"name\":\"setEntryAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lotteryId\",\"type\":\"uint8\"}],\"name\":\"setQueueSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAdddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newPercent\",\"type\":\"uint8\"}],\"name\":\"updateCroupierFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newPercent\",\"type\":\"uint8\"}],\"name\":\"updateHouseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NanoBetGames", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "15000", "ConstructorArguments": "00000000000000000000000024f43726163694bf93c0d866af057fb490f31951000000000000000000000000e7c2145ec82b9c0a506aff4464dc29f4701515be000000000000000000000000813959bb36c2887c17963a048c661e07a68b888c", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc5ee3da8c9b94d7a31a00199e3eb07c047403b4fc59b64cd53a3103fe64c9cd"}