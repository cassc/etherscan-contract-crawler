{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: openzeppelin-solidity/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/5_BEP20POC.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ncontract BEP20POC is ERC20 {\r\n  uint256 constant INIT_SUPPLY_POC = 1000000000;  // 1,000,000,000\r\n    \r\n  address _owner;\r\n  uint256 _unlocked_POC_total;\r\n  uint256 _fee_rate;\r\n  uint256 _fee_income;\r\n  uint256 _submit_daily_limit_total;\r\n  uint256 _submit_daily_limit_personal;\r\n    \r\n  struct bridge_staff {\r\n    address user;\r\n    uint256 quota;\r\n  }\r\n  bridge_staff[] private arr_staff;\r\n    \r\n  enum Submit_state {submit, cancel, complete}\r\n  struct pegout_data {\r\n    uint256 reg_date;\r\n    bytes32 id;\r\n    address user;\r\n    uint256 amount;\r\n    uint256 fee;\r\n    Submit_state state;\r\n  }\r\n  mapping (bytes32 => pegout_data)  private arr_pegout_submit;\r\n  mapping (uint256 => bytes32) private arr_pegout_submit_key;\r\n  uint256 arr_pegout_submit_key_start = 1;\r\n  uint256 arr_pegout_submit_key_last = 0;\r\n  \r\n  enum Reserve_state {reserve, cancel, complete}\r\n  struct pegin_data {\r\n    uint256 reg_date;\r\n    bytes32 id;\r\n    address user;\r\n    uint256 amount;\r\n    uint256 fee;\r\n    address staff;\r\n    Reserve_state state;\r\n  }\r\n  mapping (bytes32 => pegin_data) private arr_pegin_reserve;\r\n  mapping (uint256 => bytes32) private arr_pegin_reserve_key;\r\n  uint256 arr_pegin_reserve_key_start = 1;\r\n  uint256 arr_pegin_reserve_key_last = 0;\r\n\r\n  constructor(uint256 fee_rate, uint256 unlocking_POC, address new_staff, uint256 new_staff_unlocked_POC,\r\n                uint256 new_submit_daily_limit_total, uint256 new_submit_daily_limit_personal) ERC20(\"PocketArena\", \"POC\") {\r\n    _owner = msg.sender;\r\n    _mint(_owner, (INIT_SUPPLY_POC * (10 ** uint256(decimals()))));\r\n    _unlocked_POC_total = unlocking_POC;\r\n    _fee_income = 0;\r\n    staff_add(new_staff, new_staff_unlocked_POC);\r\n    _fee_rate_set(fee_rate);\r\n    _submit_daily_limit_total = new_submit_daily_limit_total;\r\n    _submit_daily_limit_personal = new_submit_daily_limit_personal;\r\n  }\r\n  \r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner, \"only owner is possible\");\r\n    _;\r\n  }\r\n  modifier onlyStaff() {\r\n    (bool is_staff, uint256 quota) = staff_check(msg.sender);\r\n    require(is_staff, \"only staff is possible\");\r\n    _;\r\n  }\r\n  \r\n  \r\n  \r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    if (msg.sender == _owner) {\r\n      require(balanceOf(_owner) - (_unlocked_POC_total - staff_quota_total()) >= amount, \"sendable POC is not enough\");\r\n    }\r\n    else {\r\n      (bool is_staff, ) = staff_check(msg.sender);\r\n      if (is_staff) {\r\n        require(recipient == _owner, \"staff can transfer POC to the owner only\");\r\n      }\r\n      else {\r\n        (is_staff, ) = staff_check(recipient);\r\n        require(!is_staff, \"you can't transfer POC to the staff\");\r\n      }\r\n    }\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n  \r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    if (sender == _owner) {\r\n      require(balanceOf(_owner) - (_unlocked_POC_total - staff_quota_total()) >= amount, \"sendable POC is not enough\");\r\n    }\r\n    else {\r\n      (bool is_staff, uint256 quota) = staff_check(msg.sender);\r\n      if (is_staff) {\r\n        require(quota >= amount, \"staff can transferFrom POC within quota\");\r\n      }\r\n    }\r\n    _transfer(sender, recipient, amount);\r\n    uint256 currentAllowance = allowance(sender, _msgSender());\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n      _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n\r\n\r\n  function staff_list() onlyOwner external view returns (bridge_staff[] memory) {\r\n    return arr_staff;\r\n  }\r\n  \r\n  function staff_add(address new_staff, uint256 new_staff_unlocked_POC) onlyOwner public returns (bool) {\r\n    require(arr_staff.length < 5, \"it allows max 5 staffs only\");\r\n    require(new_staff != _owner, \"owner can't be staff\");\r\n    (bool is_staff, ) = staff_check(new_staff);\r\n    require(!is_staff, \"it's already added as staff\");\r\n    transfer(new_staff, new_staff_unlocked_POC);\r\n    arr_staff.push(bridge_staff(new_staff, new_staff_unlocked_POC));\r\n    return true;\r\n  }\r\n    \r\n  event evt_staff_del(bool result);\r\n  function staff_del() onlyStaff external {\r\n    uint256 del_index = arr_staff.length + 1;\r\n    for (uint256 i=0; i<arr_staff.length; i++) {\r\n      if (arr_staff[i].user == msg.sender) {\r\n        transfer(_owner, balanceOf(msg.sender));\r\n        delete arr_staff[i];\r\n        del_index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (del_index >= (arr_staff.length + 1)) {\r\n      emit evt_staff_del(false);\r\n    }\r\n    else {\r\n      for (uint256 i=del_index; i<arr_staff.length-1; i++){\r\n        arr_staff[i] = arr_staff[i+1];\r\n      }\r\n      arr_staff.pop();\r\n      emit evt_staff_del(true);\r\n    }\r\n  }\r\n  \r\n  function staff_check(address user) public view returns (bool, uint256) {\r\n    bool is_staff = false;\r\n    uint256 quota = 0;\r\n    for (uint256 i=0; i<arr_staff.length; i++) {\r\n      if (arr_staff[i].user == user) {\r\n          is_staff = true;\r\n          quota = arr_staff[i].quota;\r\n          break;\r\n      }\r\n    }\r\n    return (is_staff, quota);\r\n  }\r\n  \r\n  event evt_staff_quota_add(bool result);\r\n  function staff_quota_add(address staff, uint256 increased) onlyOwner external {\r\n    (bool is_staff, ) = staff_check(staff);\r\n    require(is_staff, \"you can add quota for existed staff only\");\r\n    require(_unlocked_POC_total - staff_quota_total() > increased, \"you can add within your unlocked_POC\");\r\n    for (uint256 i=0; i<arr_staff.length; i++) {\r\n      if (arr_staff[i].user == staff) {\r\n        _transfer(msg.sender, staff, increased);\r\n        arr_staff[i].quota += increased;\r\n        break;\r\n      }\r\n    }\r\n    emit evt_staff_quota_add(true);\r\n  }\r\n  \r\n  event evt_staff_quota_minus(bool result);\r\n  function staff_quota_minus(uint256 decreased) onlyStaff external {\r\n    (, uint256 quota) = staff_check(msg.sender);\r\n    require(quota >= decreased, \"you can minus within your unlocked_POC\");\r\n    for (uint256 i=0; i<arr_staff.length; i++) {\r\n      if (arr_staff[i].user == msg.sender) {\r\n        transfer(_owner, decreased);\r\n        arr_staff[i].quota -= decreased;\r\n        break;\r\n      }\r\n    }\r\n    emit evt_staff_quota_minus(true);\r\n  }\r\n  \r\n  function staff_quota_total() onlyOwner public view returns (uint256) {\r\n    uint256 total = 0;\r\n    for (uint256 i=0; i<arr_staff.length; i++) {\r\n      total += arr_staff[i].quota;  \r\n    }\r\n    return total;\r\n  }\r\n\r\n  \r\n  \r\n  function _fee_rate_get() onlyOwner external view returns (uint256) {\r\n    return _fee_rate;\r\n  }\r\n  \r\n  event evt_fee_rate_set(uint256 _fee_rate);\r\n  function _fee_rate_set(uint256 new_fee_rate) onlyOwner public {\r\n    require(new_fee_rate <= 10000 * 100, \"rate should be 1000000 or less\");\r\n    _fee_rate = new_fee_rate;\r\n    emit evt_fee_rate_set(_fee_rate);\r\n  }\r\n  \r\n  function fee_get(uint256 amount) public view returns (uint256) {\r\n    return amount * _fee_rate / 10000 / 100;\r\n  }\r\n  \r\n  function fee_income() external view returns (uint256) {\r\n    return _fee_income;\r\n  }\r\n  \r\n  \r\n  \r\n  function unlocked_POC_total() external view returns (uint256) {\r\n    return _unlocked_POC_total;\r\n  }\r\n  \r\n  event evt_unlocked_POC_total_add(uint256 _unlocked_POC_total);\r\n  function unlocked_POC_total_add(uint256 amount) onlyOwner external {\r\n    require((balanceOf(_owner) - _unlocked_POC_total) >= amount, \"unlockable POC is not enough\");\r\n    _unlocked_POC_total += amount;\r\n    emit evt_unlocked_POC_total_add(_unlocked_POC_total);\r\n  }\r\n  \r\n  event evt_unlocked_POC_total_minus(uint256 _unlocked_POC_total);\r\n  function unlocked_POC_total_minus(uint256 amount) onlyOwner external  {\r\n    require((_unlocked_POC_total - staff_quota_total()) >= amount, \"unlockable POC is not enough\");\r\n    _unlocked_POC_total -= amount;\r\n    emit evt_unlocked_POC_total_add(_unlocked_POC_total);\r\n  }\r\n  \r\n  \r\n  \r\n  function _submit_daily_limit_total_get() onlyOwner external view returns (uint256) {\r\n    return _submit_daily_limit_total;\r\n  }\r\n  \r\n  event evt_submit_daily_limit_total_set(uint256 _submit_daily_limit_total);\r\n  function _submit_daily_limit_total_set(uint256 new_submit_daily_limit_total) onlyOwner external {\r\n    _submit_daily_limit_total = new_submit_daily_limit_total;\r\n    emit evt_submit_daily_limit_total_set(_submit_daily_limit_total);\r\n  }\r\n  \r\n  function _submit_daily_limit_personal_get() onlyOwner external view returns (uint256) {\r\n    return _submit_daily_limit_personal;\r\n  }\r\n  \r\n  event evt_submit_daily_limit_personal_set(uint256 _submit_daily_limit_personal);\r\n  function _submit_daily_limit_personal_set(uint256 new_submit_daily_limit_personal) onlyOwner external {\r\n    _submit_daily_limit_personal = new_submit_daily_limit_personal;\r\n    emit evt_submit_daily_limit_personal_set(_submit_daily_limit_personal);\r\n  }\r\n  \r\n  \r\n  \r\n  function arr_pegout_submit_key_last_get() onlyOwner external view returns (uint256) {\r\n    return arr_pegout_submit_key_last;\r\n  }\r\n  \r\n  function arr_pegout_submit_key_start_get() onlyOwner external view returns (uint256) {\r\n    return arr_pegout_submit_key_start;\r\n  }\r\n  \r\n  event evt_arr_pegout_submit_key_start_set(uint256 arr_pegout_submit_key_start);\r\n  function arr_pegout_submit_key_start_set(uint256 new_arr_pegout_submit_key_start) onlyOwner external {\r\n    arr_pegout_submit_key_start = new_arr_pegout_submit_key_start;\r\n    emit evt_arr_pegout_submit_key_start_set(arr_pegout_submit_key_start);\r\n  }\r\n  \r\n  function arr_pegin_reserve_key_last_get() onlyOwner external view returns (uint256) {\r\n    return arr_pegin_reserve_key_last;\r\n  }\r\n  \r\n  function arr_pegin_reserve_key_start_get() onlyOwner external view returns (uint256) {\r\n    return arr_pegin_reserve_key_start;\r\n  }\r\n  \r\n  event evt_arr_pegin_reserve_key_start_set(uint256 arr_pegin_reserve_ey_start);\r\n  function arr_pegin_reserve_key_start_set(uint256 new_arr_pegin_reserve_key_start) onlyOwner external {\r\n    arr_pegin_reserve_key_start = new_arr_pegin_reserve_key_start;\r\n    emit evt_arr_pegin_reserve_key_start_set(arr_pegin_reserve_key_start);\r\n  }\r\n  \r\n  \r\n  \r\n  event evt_pegout_submit(pegout_data temp);\r\n  function pegout_submit(uint256 amount) external {\r\n    uint256 calc_fee = fee_get(amount);\r\n    require(balanceOf(msg.sender) >= (amount + calc_fee), \"your balance is not enough\");\r\n    uint256 daily_total = 0;\r\n    uint256 daily_personal = 0;\r\n    for (uint256 i=arr_pegout_submit_key_last; i>=arr_pegout_submit_key_start; i--) {\r\n      if ((block.timestamp - arr_pegout_submit[arr_pegout_submit_key[i]].reg_date) < 86400) {\r\n        daily_total += 1;\r\n        require(daily_total < _submit_daily_limit_total, \"we dont't get the submit anymore today\");\r\n        if (arr_pegout_submit[arr_pegout_submit_key[i]].user == msg.sender) {\r\n          daily_personal += 1;\r\n          require(daily_personal < _submit_daily_limit_personal, \"you can't submit anymore today\");\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    transfer(_owner, (amount + calc_fee));\r\n    _unlocked_POC_total -= amount;\r\n    _fee_income += calc_fee;\r\n    bytes32 temp_key = keccak256(abi.encodePacked(block.timestamp, msg.sender));\r\n    pegout_data memory temp = pegout_data(block.timestamp, temp_key, msg.sender, amount, calc_fee, Submit_state.submit);\r\n    arr_pegout_submit[temp_key] = temp;\r\n    arr_pegout_submit_key_last += 1;\r\n    arr_pegout_submit_key[arr_pegout_submit_key_last] = temp_key;\r\n    emit evt_pegout_submit(temp);\r\n  }\r\n  \r\n  function pegout_submit_list(bytes32 id) external view returns (pegout_data memory) {\r\n      return arr_pegout_submit[id];\r\n  }  \r\n  \r\n  function pegout_submit_list(uint256 count_per_page, uint256 current_page) external view returns (pegout_data[] memory) {\r\n    uint256 new_arr_pegout_submit_key_last;\r\n    uint256 new_arr_pegout_submit_key_start;\r\n    if (current_page == 0) { \r\n      current_page = 1;\r\n    }\r\n    if (current_page == 1) {\r\n      new_arr_pegout_submit_key_last = arr_pegout_submit_key_last;\r\n    }\r\n    else\r\n    {\r\n      uint256 key_position = count_per_page * (current_page - 1);\r\n      if (arr_pegout_submit_key_last <= key_position) {\r\n        new_arr_pegout_submit_key_last = 0;\r\n      }\r\n      else {\r\n        new_arr_pegout_submit_key_last = arr_pegout_submit_key_last - key_position;\r\n      }\r\n    }\r\n    if (new_arr_pegout_submit_key_last < count_per_page) {\r\n      new_arr_pegout_submit_key_start = arr_pegout_submit_key_start;\r\n    }\r\n    else {\r\n      if ( new_arr_pegout_submit_key_last < (arr_pegout_submit_key_start + count_per_page) ) {\r\n        new_arr_pegout_submit_key_start = arr_pegout_submit_key_start;\r\n      }\r\n      else {\r\n        new_arr_pegout_submit_key_start = new_arr_pegout_submit_key_last - count_per_page + 1;\r\n      }\r\n    }\r\n    uint256 temp_size = 0;\r\n    if (new_arr_pegout_submit_key_start < (new_arr_pegout_submit_key_last + 1) ) {\r\n      temp_size = new_arr_pegout_submit_key_last - new_arr_pegout_submit_key_start + 1;\r\n    }\r\n    pegout_data[] memory arr_temp = new pegout_data[](temp_size);\r\n    uint256 index = 0;\r\n    for (uint256 i=new_arr_pegout_submit_key_last; i>=new_arr_pegout_submit_key_start; i--) {\r\n      arr_temp[index] = arr_pegout_submit[arr_pegout_submit_key[i]];\r\n      index += 1;\r\n    }\r\n    return arr_temp;\r\n  }\r\n  \r\n  event evt_pegout_submit_complete(bool result);\r\n  function pegout_submit_complete(bytes32[] memory complete_id) onlyStaff external {\r\n    uint256 len = complete_id.length;\r\n    for (uint256 i=0; i<len; i++) {\r\n      if (arr_pegout_submit[complete_id[i]].reg_date > 0) {\r\n        arr_pegout_submit[complete_id[i]].state = Submit_state.complete;\r\n      }\r\n    }\r\n    emit evt_pegout_submit_complete(true);\r\n  }\r\n  \r\n  event evt_pegout_submit_cancel(bool result);\r\n  function pegout_submit_cancel(bytes32[] memory del_id) onlyStaff external {\r\n    uint256 len = del_id.length;\r\n    for (uint256 i=0; i<len; i++) {\r\n      if (arr_pegout_submit[del_id[i]].reg_date > 0) {\r\n        if (arr_pegout_submit[del_id[i]].state == Submit_state.submit) {\r\n          transfer(arr_pegout_submit[del_id[i]].user, (arr_pegout_submit[del_id[i]].amount + arr_pegout_submit[del_id[i]].fee));\r\n          _unlocked_POC_total -= arr_pegout_submit[del_id[i]].amount;\r\n          _fee_income -= arr_pegout_submit[del_id[i]].fee;\r\n          arr_pegout_submit[del_id[i]].state = Submit_state.cancel;\r\n        }\r\n      }\r\n    }\r\n    emit evt_pegout_submit_cancel(false);\r\n  }\r\n\r\n  \r\n  \r\n  event evt_pegin_reserve(bool result);\r\n  function pegin_reserve(uint256[] memory reg_date, bytes32[] memory id, address[] memory user, uint256[] memory amount, uint256[] memory fee) onlyStaff external {\r\n    uint256 len = reg_date.length;\r\n    require(len == id.length, \"2nd parameter is missed\");\r\n    require(len == user.length, \"3rd parameter is missed\");\r\n    require(len == amount.length, \"4th parameter is missed\");\r\n    require(len == fee.length, \"5th parameter is missed\");\r\n    (, uint256 quota) = staff_check(msg.sender);\r\n    uint256 total_amount = 0;\r\n    for (uint256 i=0; i<len; i++) {\r\n      require(arr_pegin_reserve[id[i]].reg_date == 0, \"there is an already reserved data\");\r\n      total_amount += amount[i];\r\n    }\r\n    require(quota >= total_amount, \"your unlocked_POC balance is not enough\");\r\n    for (uint256 i=0; i<len; i++) {\r\n      increaseAllowance(user[i], amount[i]);\r\n      arr_pegin_reserve[id[i]] = pegin_data(reg_date[i], id[i], user[i], amount[i], fee[i], msg.sender, Reserve_state.reserve);\r\n      arr_pegin_reserve_key_last += 1;\r\n      arr_pegin_reserve_key[arr_pegin_reserve_key_last] = id[i];\r\n    }\r\n    emit evt_pegin_reserve(true);\r\n  }\r\n  \r\n  function pegin_reserve_list(bytes32 id) external view returns (pegin_data memory) {\r\n      return arr_pegin_reserve[id];\r\n  }\r\n  \r\n  function pegin_reserve_list(uint256 count_per_page, uint256 current_page) external view returns (pegin_data[] memory) {\r\n    uint256 new_arr_pegin_reserve_key_last;\r\n    uint256 new_arr_pegin_reserve_key_start;\r\n    if (current_page == 0) { \r\n      current_page = 1;\r\n    }\r\n    if (current_page == 1) {\r\n      new_arr_pegin_reserve_key_last = arr_pegin_reserve_key_last;\r\n    }\r\n    else\r\n    {\r\n      uint256 key_position = count_per_page * (current_page - 1);\r\n      if (arr_pegin_reserve_key_last <= key_position) {\r\n        new_arr_pegin_reserve_key_last = 0;\r\n      }\r\n      else {\r\n        new_arr_pegin_reserve_key_last = arr_pegin_reserve_key_last - key_position;\r\n      }\r\n    }\r\n    if (new_arr_pegin_reserve_key_last < count_per_page) {\r\n      new_arr_pegin_reserve_key_start = arr_pegin_reserve_key_start;\r\n    }\r\n    else {\r\n      if ( new_arr_pegin_reserve_key_last < (arr_pegin_reserve_key_start + count_per_page) ) {\r\n        new_arr_pegin_reserve_key_start = arr_pegin_reserve_key_start;\r\n      }\r\n      else {\r\n        new_arr_pegin_reserve_key_start = new_arr_pegin_reserve_key_last - count_per_page + 1;\r\n      }\r\n    }\r\n    uint256 temp_size = 0;\r\n    if (new_arr_pegin_reserve_key_start < (new_arr_pegin_reserve_key_last + 1) ) {\r\n      temp_size = new_arr_pegin_reserve_key_last - new_arr_pegin_reserve_key_start + 1;\r\n    }\r\n    pegin_data[] memory arr_temp = new pegin_data[](temp_size);\r\n    uint256 index = 0;\r\n    for (uint256 i=new_arr_pegin_reserve_key_last; i>=new_arr_pegin_reserve_key_start; i--) {\r\n      arr_temp[index] = arr_pegin_reserve[arr_pegin_reserve_key[i]];\r\n      index += 1;\r\n    }\r\n    return arr_temp;\r\n  }\r\n  \r\n  event evt_pegin_run(bytes32[] arr_temp);\r\n  function pegin_run(bytes32[] memory id) external {\r\n    uint256 len = id.length;\r\n    bytes32[] memory arr_temp = new bytes32[](len);\r\n    uint256 temp_index = 0;\r\n    for (uint256 i=0; i<len; i++) {\r\n      if (arr_pegin_reserve[id[i]].reg_date > 0) {\r\n        if ( (arr_pegin_reserve[id[i]].user == msg.sender) && (arr_pegin_reserve[id[i]].state == Reserve_state.reserve) ) {\r\n          bool result = transferFrom(arr_pegin_reserve[id[i]].staff, msg.sender, arr_pegin_reserve[id[i]].amount);\r\n          if (result) {\r\n            arr_pegin_reserve[id[i]].state = Reserve_state.complete;\r\n            _unlocked_POC_total += (arr_pegin_reserve[id[i]].amount + arr_pegin_reserve[id[i]].fee);\r\n            _fee_income += arr_pegin_reserve[id[i]].fee;\r\n\t\t\tarr_temp[temp_index] = id[i];\r\n\t\t\ttemp_index += 1;\r\n          }\r\n        \r\n        }\r\n      }\r\n    }\r\n    emit evt_pegin_run(arr_temp);\r\n  }\r\n  \r\n  event evt_pegin_reserve_cancel(bool result);\r\n  function pegin_reserve_cancel(bytes32[] memory del_id) onlyStaff external {\r\n    uint256 len = del_id.length;\r\n    for (uint256 i=0; i<len; i++) {\r\n      if (arr_pegin_reserve[del_id[i]].reg_date > 0) {\r\n        if (arr_pegin_reserve[del_id[i]].staff == msg.sender) {\r\n          decreaseAllowance(arr_pegin_reserve[del_id[i]].user, arr_pegin_reserve[del_id[i]].amount);\r\n          arr_pegin_reserve[del_id[i]].state = Reserve_state.cancel;\r\n        }\r\n      }\r\n    }\r\n    emit evt_pegin_reserve_cancel(true);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocking_POC\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"new_staff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_staff_unlocked_POC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_submit_daily_limit_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_submit_daily_limit_personal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arr_pegin_reserve_ey_start\",\"type\":\"uint256\"}],\"name\":\"evt_arr_pegin_reserve_key_start_set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arr_pegout_submit_key_start\",\"type\":\"uint256\"}],\"name\":\"evt_arr_pegout_submit_key_start_set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee_rate\",\"type\":\"uint256\"}],\"name\":\"evt_fee_rate_set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_pegin_reserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_pegin_reserve_cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"arr_temp\",\"type\":\"bytes32[]\"}],\"name\":\"evt_pegin_run\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reg_date\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum BEP20POC.Submit_state\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct BEP20POC.pegout_data\",\"name\":\"temp\",\"type\":\"tuple\"}],\"name\":\"evt_pegout_submit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_pegout_submit_cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_pegout_submit_complete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_staff_del\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_staff_quota_add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"evt_staff_quota_minus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_submit_daily_limit_personal\",\"type\":\"uint256\"}],\"name\":\"evt_submit_daily_limit_personal_set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_submit_daily_limit_total\",\"type\":\"uint256\"}],\"name\":\"evt_submit_daily_limit_total_set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlocked_POC_total\",\"type\":\"uint256\"}],\"name\":\"evt_unlocked_POC_total_add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlocked_POC_total\",\"type\":\"uint256\"}],\"name\":\"evt_unlocked_POC_total_minus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fee_rate_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_fee_rate\",\"type\":\"uint256\"}],\"name\":\"_fee_rate_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_submit_daily_limit_personal_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_submit_daily_limit_personal\",\"type\":\"uint256\"}],\"name\":\"_submit_daily_limit_personal_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_submit_daily_limit_total_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_submit_daily_limit_total\",\"type\":\"uint256\"}],\"name\":\"_submit_daily_limit_total_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arr_pegin_reserve_key_last_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arr_pegin_reserve_key_start_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_arr_pegin_reserve_key_start\",\"type\":\"uint256\"}],\"name\":\"arr_pegin_reserve_key_start_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arr_pegout_submit_key_last_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arr_pegout_submit_key_start_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_arr_pegout_submit_key_start\",\"type\":\"uint256\"}],\"name\":\"arr_pegout_submit_key_start_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fee_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_income\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"reg_date\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"id\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fee\",\"type\":\"uint256[]\"}],\"name\":\"pegin_reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"del_id\",\"type\":\"bytes32[]\"}],\"name\":\"pegin_reserve_cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count_per_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_page\",\"type\":\"uint256\"}],\"name\":\"pegin_reserve_list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reg_date\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staff\",\"type\":\"address\"},{\"internalType\":\"enum BEP20POC.Reserve_state\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct BEP20POC.pegin_data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"pegin_reserve_list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reg_date\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staff\",\"type\":\"address\"},{\"internalType\":\"enum BEP20POC.Reserve_state\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct BEP20POC.pegin_data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"id\",\"type\":\"bytes32[]\"}],\"name\":\"pegin_run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pegout_submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"del_id\",\"type\":\"bytes32[]\"}],\"name\":\"pegout_submit_cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"complete_id\",\"type\":\"bytes32[]\"}],\"name\":\"pegout_submit_complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count_per_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_page\",\"type\":\"uint256\"}],\"name\":\"pegout_submit_list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reg_date\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum BEP20POC.Submit_state\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct BEP20POC.pegout_data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"pegout_submit_list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reg_date\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum BEP20POC.Submit_state\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct BEP20POC.pegout_data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_staff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_staff_unlocked_POC\",\"type\":\"uint256\"}],\"name\":\"staff_add\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"staff_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staff_del\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staff_list\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"}],\"internalType\":\"struct BEP20POC.bridge_staff[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increased\",\"type\":\"uint256\"}],\"name\":\"staff_quota_add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decreased\",\"type\":\"uint256\"}],\"name\":\"staff_quota_minus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staff_quota_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked_POC_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlocked_POC_total_add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlocked_POC_total_minus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20POC", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000002919bcc5b3665f2fb000000000000000000000000000000e9deafd0bef9832950ae1b06d7490b1fb70c34780000000000000000000000000000000000000000000069e10de76676d080000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://08ec469faf16b02e50c74ac5cabd9f78d1e0c32da0faf1f910b8448914517d1a"}