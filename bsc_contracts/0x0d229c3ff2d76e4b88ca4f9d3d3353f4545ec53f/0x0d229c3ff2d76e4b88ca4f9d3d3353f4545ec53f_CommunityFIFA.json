{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\n    library SafeMath {\r\n   function tryAdd(uint256 a, uint256 b)\r\n       internal\r\n       pure\r\n       returns (bool, uint256)\r\n   {\r\n       unchecked {\r\n           uint256 c = a + b;\r\n           if (c < a) return (false, 0);\r\n           return (true, c);\r\n       }\r\n   }\r\n\r\n   function trySub(uint256 a, uint256 b)\r\n       internal\r\n       pure\r\n       returns (bool, uint256)\r\n   {\r\n       unchecked {\r\n           if (b > a) return (false, 0);\r\n           return (true, a - b);\r\n       }\r\n   }\r\n\r\n   function tryMul(uint256 a, uint256 b)\r\n       internal\r\n       pure\r\n       returns (bool, uint256)\r\n   {\r\n       unchecked {\r\n           // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n           // benefit is lost if 'b' is also tested.\r\n           // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n           if (a == 0) return (true, 0);\r\n           uint256 c = a * b;\r\n           if (c / a != b) return (false, 0);\r\n           return (true, c);\r\n       }\r\n   }\r\n\r\n   function tryDiv(uint256 a, uint256 b)\r\n       internal\r\n       pure\r\n       returns (bool, uint256)\r\n   {\r\n       unchecked {\r\n           if (b == 0) return (false, 0);\r\n           return (true, a / b);\r\n       }\r\n   }\r\n\r\n   function tryMod(uint256 a, uint256 b)\r\n       internal\r\n       pure\r\n       returns (bool, uint256)\r\n   {\r\n       unchecked {\r\n           if (b == 0) return (false, 0);\r\n           return (true, a % b);\r\n       }\r\n   }\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a + b;\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a - b;\r\n   }\r\n\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a * b;\r\n   }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a / b;\r\n   }\r\n\r\n   function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a % b;\r\n   }\r\n\r\n   function sub(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n   ) internal pure returns (uint256) {\r\n       unchecked {\r\n           require(b <= a, errorMessage);\r\n           return a - b;\r\n       }\r\n   }\r\n\r\n   function div(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n   ) internal pure returns (uint256) {\r\n       unchecked {\r\n           require(b > 0, errorMessage);\r\n           return a / b;\r\n       }\r\n   }\r\n\r\n   function mod(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n   ) internal pure returns (uint256) {\r\n       unchecked {\r\n           require(b > 0, errorMessage);\r\n           return a % b;\r\n       }\r\n   }\r\n    }\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function name() external view returns (string memory);\r\n    \r\n    function getOwner() external view returns (address);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    \r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n}\r\n\r\nabstract contract Admin{\r\n    address internal owner;\r\n    mapping(address => bool) internal Administration;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        Administration[_owner] = true;\r\n    }\r\n    \r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Function modifier to require caller to be admin\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"!ADMIN\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * addAdmin address. Owner only\r\n     */\r\n    function SetAdmin(address adr) public onlyOwner() {\r\n        Administration[adr] = true;\r\n    }\r\n    \r\n    /**\r\n     * Remove address' administration. Owner only\r\n     */\r\n    function removeAdmin(address adr) public onlyOwner() {\r\n        Administration[adr] = false;\r\n    }\r\n    \r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    \r\n    /**\r\n     * Return address' administration status\r\n     */\r\n    function isAdmin(address adr) public view returns (bool) {\r\n        return Administration[adr];\r\n    }\r\n    \r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner admin\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner() {\r\n        owner = adr;\r\n        Administration[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n    \r\n    event OwnershipTransferred(address owner);\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external payable returns (uint256 amountToken,uint256 amountETH,uint256 liquidity);\r\n    \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\ncontract CommunityFIFA is IBEP20, Admin{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MASK = type(uint128).max;\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address DEAD_NON_CHECKSUM = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    string constant _name = \"CommunityFIFA\";\r\n    string constant _symbol = \"cFIFA\";\r\n    uint8 constant _decimals = 4;\r\n    \r\n    uint256 _totalSupply = 100000000 * (10**_decimals);\r\n    uint256 public _maxTxAmount = _totalSupply.div(100); //1%;\r\n    uint256 public _maxWallet = _totalSupply.div(100); //1%;\r\n    \r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(address => bool) isMaxWalletExempt;\r\n    mapping(address => bool) isFeeExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n    mapping(address => bool) public _isFree;\r\n    mapping(address => bool) public bots;\r\n    \r\n    //BUY FEES\r\n    uint256 private liquidityFee = 1;\r\n    uint256 private marketingFee = 2;\r\n    \r\n    //SELL FEES\r\n    uint256 private sellliquidityFee = 1;\r\n    uint256 private sellMarketingFee = 2;\r\n   \r\n    uint256 public totalFee = marketingFee + liquidityFee;\r\n    uint256 public feeDenominator = 100;\r\n    \r\n    address private autoLiquidityReceiver =(msg.sender); // auto-liq address \r\n    address private marketingFeeReceiver = (0xC6DCb4b163774598D13e08D46763032Ad371af04); // marketing address\r\n   \r\n    IUniswapV2Router public router;\r\n    address public pair;\r\n    \r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTimestamp;\r\n    \r\n  event BuyTaxesUpdated(uint256 buyTaxes);\r\n  event SellTaxesUpdated(uint256 sellTaxes);\r\n\r\n    IPinkAntiBot private pinkAntiBot;\r\n    bool public antiBotEnabled;\r\n    uint256 private _firstBlock;\r\n    uint256 private _botBlocks;\r\n    \r\n    bool public tradingOpen = false;\r\n    bool public botsMode = true;\r\n    bool public swapEnabled = true;\r\n    uint256 public TokenToSwap = _totalSupply / 1000; // 0.1%\r\n    \r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor(address pinkAntiBot_) Admin(msg.sender) {\r\n       address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap Router\r\n        router = IUniswapV2Router(_router);\r\n        \r\n       pair = IUniswapV2Factory(router.factory()).createPair(address(this),router.WETH());\r\n       _allowances[address(this)][address(router)] = _totalSupply;\r\n\r\n        pinkAntiBot = IPinkAntiBot(pinkAntiBot_);\r\n        pinkAntiBot.setTokenOwner(msg.sender);\r\n        antiBotEnabled = true;\r\n        \r\n        isMaxWalletExempt[msg.sender] = true;\r\n        isMaxWalletExempt[address(this)] = true;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[0x0000000000000000000000000000000000000000] = true;\r\n        isFeeExempt[0x000000000000000000000000000000000000dEaD] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        \r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[0x0000000000000000000000000000000000000000] = true;\r\n        isTxLimitExempt[0x000000000000000000000000000000000000dEaD] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        \r\n        approve(_router, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n    \r\n    function transferFrom(address sender,address recipient,uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n    \r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    \r\n    function _transferFrom(address sender,address recipient,uint256 amount) internal returns (bool) {\r\n        if (inSwap) { return _basicTransfer(sender, recipient, amount); }\r\n          \r\n            if (antiBotEnabled) {pinkAntiBot.onPreTransferCheck(sender, recipient, amount); }\r\n             \r\n    if (block.timestamp <= _firstBlock.add(_botBlocks)) {\r\n                    bots[recipient] = true;\r\n                }      \r\n                \r\n                 if(botsMode){\r\n           require(!bots[sender] && !bots[recipient], \"blacklisted\");    \r\n        }\r\n                \r\n                if(!Administration[sender] && !Administration[recipient]){\r\n                          require(tradingOpen,\"Trading is not active\");\r\n         }\r\n       \r\n    if (!Administration[sender] && !isMaxWalletExempt[sender] && !isMaxWalletExempt[recipient] && recipient != pair) {\r\n            require((_balances[recipient] + amount) <= _maxWallet,\"Max wallet has been triggered\");\r\n        }\r\n        \r\n     require((amount <= _maxTxAmount) || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"Max TX Limit has been triggered\");\r\n\r\n         if (shouldPayOut()) {PayOutFee(); }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount,\"Insufficient Balance\");\r\n    \r\n        uint256 amountReceived = shouldTakeFee(sender)? takeFee(sender, recipient, amount): amount;\r\n    \r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n    \r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n      \r\n   function _basicTransfer(address sender,address recipient,uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount,\"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n       emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n   function getTotalFee(bool selling) internal returns (uint256) {\r\n        if (selling) {\r\n            totalFee = sellMarketingFee + sellliquidityFee;\r\n            return totalFee;\r\n        }\r\n        if (!selling) {\r\n            totalFee = marketingFee + liquidityFee;\r\n            return totalFee;\r\n        }\r\n        return totalFee;\r\n    }\r\n\r\n     function takeFee(address sender,address receiver,uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\r\n    \r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n    \r\n        return amount.sub(feeAmount);\r\n    }\r\n    \r\n    function shouldPayOut() internal view returns (bool) {return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= TokenToSwap;\r\n    }\r\n    \r\n    function PayOutFee() internal swapping {\r\n        uint256 amountToLiquify = TokenToSwap.mul(liquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = TokenToSwap.sub(amountToLiquify);\r\n    \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 amountBNB = address(this).balance;\r\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\r\n        uint256 amountBNBLiquidity = amountBNB.mul(liquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalETHFee);\r\n    \r\n        payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n    \r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n    \r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n    \r\n    function launch() public onlyAdmin() {\r\n        require(launchedAt == 0, \"Already launched boi\");\r\n        launchedAt = block.number;\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n    \r\n    function openToken(uint256 botBlocks) external onlyOwner() {\r\n        _firstBlock = block.timestamp;\r\n        _botBlocks = botBlocks;\r\n        tradingOpen = true;\r\n    }\r\n\r\n   function disableToken() external onlyOwner() {\r\n        tradingOpen = false;\r\n    }\r\n\r\n    function EnableAntiBot(bool _enable) external onlyOwner() {\r\n      antiBotEnabled = _enable;\r\n    }\r\n\r\n    function ClearBNBBalance() external onlyOwner() {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function clearBEP20(address tokenAddress, uint256 tokens) external onlyOwner() returns (bool success) {\r\n        if(tokens == 0){tokens = IBEP20(tokenAddress).balanceOf(address(this));}\r\n        return IBEP20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 amount) external onlyOwner() {\r\n        require(amount >= _totalSupply /100, \" MaxWallet connot be set to less than 1%\");\r\n        require(amount <= _totalSupply, \"Amount must be less than or equal to totalSupply\");\r\n        _maxWallet = amount;\r\n    }\r\n    \r\n    function setTxLimitAmount(uint256 amount) external onlyOwner() {\r\n        require(amount >= _totalSupply / 100, \"Cannot set max transaction less than 1%\");\r\n        require(amount <= _totalSupply, \"Amount must be less than or equal to totalSupply\");\r\n        _maxTxAmount = amount;\r\n    }\r\n\r\n    function Enable_BotMode(bool _status) public onlyOwner() {\r\n        botsMode = _status;\r\n    }  \r\n\r\n    function addBot(address account) external onlyOwner() {\r\n        bots[account] = true;\r\n    }\r\n\r\n    function removeBot(address account) external onlyOwner() {\r\n        bots[account] = false;\r\n    }\r\n\r\n    function IsFreeFromMaxWallet(address holder, bool exempt) external onlyAdmin() {\r\n        isMaxWalletExempt[holder] = exempt; //No Maxwallet limit for this\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyAdmin() {\r\n        isFeeExempt[holder] = exempt; //0 Tax For The Holder\r\n    }\r\n    \r\n    function IsFreeFromTxLimit(address holder, bool exempt) external onlyAdmin() {\r\n        isTxLimitExempt[holder] = exempt; //No Tx Limit For This\r\n    }\r\n    \r\n    function setFree(address holder) public onlyOwner() {\r\n        _isFree[holder] = true;  //Holder is free from all \r\n    }\r\n    \r\n    function unSetFree(address holder) public onlyOwner() {\r\n        _isFree[holder] = false; //Tax will resume to holder\r\n    }\r\n    \r\n    function checkFree(address holder) public view onlyOwner returns (bool) {return _isFree[holder];\r\n    }\r\n    \r\n    function setBuyTaxes(uint256 _BuymarketingFee, uint256 _BuyliquidityFee, uint256 _feeDenominator) external onlyOwner() {\r\n        marketingFee = _BuymarketingFee;\r\n          liquidityFee = _BuyliquidityFee;\r\n        totalFee =_BuymarketingFee.add(_BuyliquidityFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee <= 3, \"BUY Taxes cannot be more than 3%\");\r\n        emit BuyTaxesUpdated(totalFee);\r\n        }\r\n    \r\n    function setSellTaxes(uint256 _SellmarketingFee, uint256 _SellliquidityFee, uint256 _feeDenominator) external onlyOwner() {\r\n        sellMarketingFee = _SellmarketingFee;\r\n          sellliquidityFee = _SellliquidityFee;\r\n        totalFee =_SellmarketingFee.add(_SellliquidityFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee <= 3, \"SELL Taxes cannot be more than 3%\");\r\n        emit SellTaxesUpdated(totalFee);\r\n        }\r\n   \r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external onlyAdmin() {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n       marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n    \r\n    function PayOutFeeSetter(bool _enabled, uint256 _amount)external onlyOwner() {\r\n        swapEnabled = _enabled;\r\n        TokenToSwap = _amount;\r\n    require(_amount < (_totalSupply/40), \"Amount too high\");\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    \r\n    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pinkAntiBot_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTaxes\",\"type\":\"uint256\"}],\"name\":\"BuyTaxesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTaxes\",\"type\":\"uint256\"}],\"name\":\"SellTaxesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClearBNBBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"EnableAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Enable_BotMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"IsFreeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"IsFreeFromTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PayOutFeeSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearBEP20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"}],\"name\":\"openToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BuymarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BuyliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"setFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SellmarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SellliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"unSetFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CommunityFIFA", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008efdb3b642eb2a20607ffe0a56cfeff6a95df002", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fbb851db265502838811a82f331defbbc92053b1d974d6804325d63a1d69e73f"}