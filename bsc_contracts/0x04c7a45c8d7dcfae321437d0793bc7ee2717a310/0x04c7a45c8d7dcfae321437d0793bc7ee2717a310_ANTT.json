{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ANTT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ISwapPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n}\\n\\ninterface ISwapRouter {\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface INonfungiblePositionManager is IERC721 {\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    function collect(CollectParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n}\\n\\ninterface IV3CALC {\\n    function principal(\\n        address pool,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        uint128 liquidity\\n    ) external view returns (uint256 amount0, uint256 amount1);\\n}\\n\\ncontract SwapIntermediateWallet {\\n    address owner;\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    function withdraw(IERC20 token, address to, uint256 amount) external {\\n        require(msg.sender == owner, \\\"Only owner can withdraw tokens\\\");\\n        token.transfer(to, amount);\\n    }\\n}\\n\\ninterface IWBNB is IERC20 {\\n}\\n\\ninterface IANTNFT is IERC721Enumerable {\\n    function receiveBuildingTax() external payable;\\n    function receiveNodeReward() external payable;\\n}\\n\\ninterface IANTREWARD {\\n    function receiveVanguardReward() external payable;\\n    function receiveHolderReward(uint256 amount) external;\\n}\\n\\ncontract ANTT is ERC20, ERC721Holder, Ownable {\\n\\n    struct UserData {\\n        address referrer;\\n        uint256 investAmount;\\n        uint256 marketReserve;\\n        uint256 remainingEarningsCap;\\n        uint256 totalInvestAmount;\\n        uint256 teamInvestAmount;\\n        uint256 activeReferralsCount;\\n        uint256 referralNodeHighestInvestAmount;\\n        uint256 nftDeduction;\\n        uint256 acceleration;\\n        uint256 lastActionBlock;\\n    }\\n\\n    struct ExchangeRateRecord {\\n        uint256 exchangeRate;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 public constant BLOCKS_PER_DAY = 28800;\\n    uint256 public constant MAX_TIER = 50;\\n    uint256 public constant MIN_REFERRAL_REWARD = 5 ether / 1000;\\n    uint256 public constant MIN_ACCELERATION = 5 ether / 1000;\\n\\n    address public nftContract = 0x4DEb791f39a8c98bD6A166A7CB6842FE7b74A300;\\n    address public rewardContract = 0x2D5Df9dD81dF801Bcd57769cf5512a3F6BEb702f;\\n    address public deflationOverflowWallet = 0x362F218eE7B404c2EB4ff588d21741bBe2C4c8e8;\\n    address public contractMaintenanceWallet = 0xA1f1bD33Cf15871cA6FB469f59Ce34e42aE5e8A9;\\n    address public genesisAnt = 0xeDD355e55E065e42d68Ba541Ed4D8c7acd34F86c;\\n    address public pairCreator = 0xf668D1B03474dD6c0eE3aE9803Dd001292B59FB4;\\n\\n    uint256 public priceSupport;\\n    uint256 public priceSupportMin = 1 ether;\\n    uint256 public priceSupportMax = 20 ether;\\n\\n    address public v3PositionCalc = 0x4e2dD79517f62A2a1d2ac046e6b6EB0129655e53;\\n    address public v3Manage = 0x46A15B0b27311cedF172AB29E4f4766fbE7F4364;\\n    address public factory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\\n    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    address public wbnbusdt = 0x36696169C63e42cd08ce11f5deeBbCeBae652050;\\n    address public wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\\n    address public wbnbPair;\\n    address public usdtPair;\\n    uint256 public positionTokenId = 364324;\\n\\n    SwapIntermediateWallet public swapIntermediateWallet;\\n    SwapIntermediateWallet public swapIntermediateFund;\\n    address public deadAddr = 0x000000000000000000000000000000000000dEaD;\\n\\n    mapping(address=>bool) public automatedMarketMakerPairs;\\n    mapping(address=>mapping(address=>bool)) public invitationSentStatus;\\n    mapping(address => UserData) public userData;\\n    mapping(uint256 => ExchangeRateRecord) public exchangeRateRecord;\\n\\n    uint256 public constant NFT_BATCH_SIZE = 10;\\n    uint256 public nftAllocatedCount;\\n\\n    bool public isStarted;\\n\\n    bool inSwap;\\n    modifier swapping() {\\n        inSwap=true;\\n        _;\\n        inSwap=false;\\n    }\\n\\n    event Started();\\n    event ReferrerAssigned(address indexed referral, address indexed referrer);\\n    event NFTClaimed(address indexed addr, uint256 batch, uint256 tokenId);\\n    event InvestmentStarted(address indexed addr, uint256 value);\\n    event InvestmentFinalized(address indexed addr);\\n    event ReferralRewarded(address indexed from, address indexed to, uint256 amount);\\n    event Accelerated(address indexed from, address indexed to, uint256 amount);\\n    event EarningsClaimed(address indexed addr, uint256 earnings, uint256 transferTokenAmount);\\n\\n    constructor() ERC20(\\\"AntDAO Token\\\", \\\"ANTT\\\") {\\n        _mint(address(this), 1889999990 * 10**18);\\n        _mint(pairCreator, 210000000 * 10**18);\\n        _mint(0x41061b8bCa768972C83ACbc1c1b2cCEf4D77D7d7, 10 * 10**18);\\n\\n        (address token0, address token1) = sortTokens(usdt, address(this));\\n        usdtPair = address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\\n        )))));\\n        (address token3, address token4) = sortTokens(wbnb, address(this));\\n        wbnbPair = address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encodePacked(token3, token4)),\\n            hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\\n        )))));\\n        automatedMarketMakerPairs[usdtPair]=true;\\n        automatedMarketMakerPairs[wbnbPair]=true;\\n\\n        swapIntermediateWallet = new SwapIntermediateWallet(address(this));\\n        swapIntermediateFund = new SwapIntermediateWallet(address(this));\\n\\n        userData[0x41061b8bCa768972C83ACbc1c1b2cCEf4D77D7d7].referrer = genesisAnt;\\n    }\\n\\n    receive() external payable {\\n        address sender = msg.sender;\\n        uint256 receivedBNB = msg.value;\\n        processInvestment(sender, receivedBNB);\\n    }\\n\\n    function processInvestment(address sender, uint256 receivedBNB) private {\\n        if (isContract(sender) || (tx.origin != sender)) {\\n            return;\\n        }\\n        require(isStarted, \\\"Contract not yet started\\\");\\n        require(receivedBNB >= 1 ether, \\\"Minimum investment is 1 BNB\\\");\\n        UserData storage senderData = userData[sender];\\n        require(senderData.investAmount == 0, \\\"You have already invested\\\");\\n\\n        uint256 marketReserve = receivedBNB * 60 / 100;\\n        uint256 releaseNow = receivedBNB * 12 / 1000;\\n        senderData.investAmount = receivedBNB;\\n        senderData.totalInvestAmount += receivedBNB;\\n        senderData.remainingEarningsCap = receivedBNB * 2;\\n        senderData.marketReserve = marketReserve - releaseNow;\\n        senderData.lastActionBlock = block.number;\\n        \\n        emit InvestmentStarted(sender, receivedBNB);\\n\\n        purchaseTokens(releaseNow);\\n\\n        uint256 totalReferralReward = receivedBNB * 20 / 100;\\n        uint256 transferredReferralReward = 0;\\n        address referrer = senderData.referrer;\\n        if (referrer != address(0)) {\\n            userData[referrer].activeReferralsCount += 1;\\n\\n            uint256 referralNodeInvestAmount = senderData.teamInvestAmount + senderData.totalInvestAmount;\\n            uint256 referralReward = receivedBNB * 10 / 100;\\n            for (uint256 i = 0; i < MAX_TIER && referrer != address(0); i++) {\\n                UserData storage referrerData = userData[referrer];\\n                referrerData.teamInvestAmount += receivedBNB;\\n\\n                if(referralNodeInvestAmount > referrerData.referralNodeHighestInvestAmount) {\\n                    referrerData.referralNodeHighestInvestAmount = referralNodeInvestAmount;\\n                }\\n\\n                uint256 requiredActiveReferrals = i + 1;\\n                if(requiredActiveReferrals > 10) {\\n                    requiredActiveReferrals = 10;\\n                }\\n                if(referralReward >= MIN_REFERRAL_REWARD && referrerData.remainingEarningsCap != 0 && requiredActiveReferrals <= referrerData.activeReferralsCount) {\\n                    if(referralReward >= referrerData.remainingEarningsCap) {\\n                        uint256 actualTransfer = referrerData.remainingEarningsCap;\\n                        payable(referrer).transfer(actualTransfer);\\n                        transferredReferralReward += actualTransfer;\\n                        emit ReferralRewarded(sender, referrer, actualTransfer);\\n                        finalizeInvestment(referrer);\\n                    } else {\\n                        payable(referrer).transfer(referralReward);\\n                        referrerData.remainingEarningsCap -= referralReward;\\n                        transferredReferralReward += referralReward;\\n                        emit ReferralRewarded(sender, referrer, referralReward);\\n                    }\\n                }\\n\\n                referrer = referrerData.referrer;\\n                referralNodeInvestAmount = referrerData.teamInvestAmount + referrerData.totalInvestAmount;\\n                referralReward /= 2;\\n            }\\n        }\\n        uint256 remainingReferralReward = totalReferralReward - transferredReferralReward;\\n        if(remainingReferralReward != 0) {\\n            if(contractMaintenanceWallet.balance < 1 ether) {\\n                uint256 shortfall = 1 ether - contractMaintenanceWallet.balance;\\n                uint256 amountToSend = shortfall > remainingReferralReward ? remainingReferralReward : shortfall;\\n                payable(contractMaintenanceWallet).transfer(amountToSend);\\n                remainingReferralReward -= amountToSend;\\n            }\\n            priceSupport += remainingReferralReward;\\n        }\\n\\n        IANTNFT(nftContract).receiveBuildingTax{value:receivedBNB * 10 / 100}();\\n        IANTNFT(nftContract).receiveNodeReward{value:receivedBNB * 8 / 100}();\\n        IANTREWARD(rewardContract).receiveVanguardReward{value:receivedBNB * 2 / 100}();\\n\\n        increaseMarketReserve();\\n\\n        if(balanceOf(address(this)) >= 1e13) {\\n            super._transfer(address(this), sender, 1e13);\\n        }\\n    }\\n\\n    function finalizeInvestment(address addr) private {\\n        UserData storage addrData = userData[addr];\\n        uint256 marketReserve = addrData.marketReserve;\\n        addrData.marketReserve = 0;\\n        addrData.investAmount = 0;\\n        addrData.remainingEarningsCap = 0;\\n        addrData.acceleration = 0;\\n\\n        address referrer = addrData.referrer;\\n        if (referrer != address(0)) {\\n            UserData storage referrerData = userData[referrer];\\n            if(referrerData.activeReferralsCount > 0) {\\n                referrerData.activeReferralsCount -= 1;\\n            }\\n        }\\n\\n        if(marketReserve != 0) {\\n            purchaseTokensFromReserve(marketReserve);\\n        }\\n\\n        emit InvestmentFinalized(addr);\\n    }\\n\\n    function receivePriceSupport() external payable {\\n        priceSupport += msg.value;\\n        increaseMarketReserve();\\n    }\\n\\n    function currentNFTBatch() public view returns(uint256) {\\n        return nftAllocatedCount / NFT_BATCH_SIZE + 1;\\n    }\\n\\n    function currentNFTPerformanceThreshold() public view returns(uint256) { \\n        return currentNFTPerformanceThreshold(nftAllocatedCount);\\n    }\\n\\n    function currentNFTPerformanceThreshold(uint256 _nftAllocatedCount) private pure returns (uint256){\\n        uint256 nftPerformanceLevel = _nftAllocatedCount / NFT_BATCH_SIZE;\\n        if(nftPerformanceLevel > 14) {\\n            nftPerformanceLevel = 14;\\n        }\\n        return 100 ether * (12 ** nftPerformanceLevel) / (10 ** nftPerformanceLevel);\\n    }\\n\\n    function checkNftEligibility(address addr) external view returns(bool) {\\n        UserData memory addrData = userData[addr];\\n        return addrData.teamInvestAmount - addrData.referralNodeHighestInvestAmount - addrData.nftDeduction >= currentNFTPerformanceThreshold();\\n    }\\n\\n    function claimNFT() external returns (bool, uint256){\\n        address addr = msg.sender;\\n        UserData storage addrData = userData[addr];\\n        uint256 performanceThreshold = currentNFTPerformanceThreshold();\\n        require(addrData.teamInvestAmount - addrData.referralNodeHighestInvestAmount - addrData.nftDeduction >= performanceThreshold, \\\"Rejected\\\");\\n        \\n        IANTNFT contractInterface = IANTNFT(nftContract);\\n        uint256 nftCount = contractInterface.balanceOf(address(this));\\n        if(nftCount != 0) {\\n            uint256 batch = currentNFTBatch();\\n            uint256 nftTokenId = contractInterface.tokenOfOwnerByIndex(address(this), 0);\\n            contractInterface.safeTransferFrom(address(this), addr, nftTokenId);\\n\\n            nftAllocatedCount += 1;\\n            addrData.nftDeduction += performanceThreshold;\\n\\n            emit NFTClaimed(addr, batch, nftTokenId);\\n\\n            return (true, nftTokenId);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != to, \\\"Transfer to the same address is not allowed\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if (inSwap || ((from == pairCreator || to == pairCreator) && owner() != address(0))) {\\n            super._transfer(from, to, amount);\\n            return;\\n        }\\n\\n        if(automatedMarketMakerPairs[from]) {\\n            revert(\\\"Buying Not Allowed\\\");\\n        } else if(automatedMarketMakerPairs[to]) {\\n            sellTokens(from, to, amount);\\n            checkPrice();\\n        } else if (to == address(this)) {\\n            claimEarnings(from, amount);\\n        } else {\\n            super._transfer(from, to, amount);\\n            if (from != genesisAnt && to != genesisAnt && !isContract(from) && !isContract(to)) {\\n                transferBetweenUsers(from, to);\\n            }\\n        }\\n    }\\n\\n    function sellTokens(address from, address to, uint256 amount) private swapping {\\n        uint256 liquidityCapitalAmount = amount * 20 / 100;\\n        uint256 holderRewardAmount = amount * 2 / 100;\\n        uint256 tradingTaxAmount = amount * 3 / 100;\\n        uint256 tokenBurningAmount = amount * 5 / 100;\\n        uint256 slippage = liquidityCapitalAmount + holderRewardAmount + tradingTaxAmount + tokenBurningAmount;\\n        super._transfer(from, address(swapIntermediateFund), slippage);\\n        super._transfer(address(swapIntermediateFund), address(this), balanceOf(address(swapIntermediateFund)));\\n\\n        super._transfer(address(this), rewardContract, holderRewardAmount);\\n        IANTREWARD(rewardContract).receiveHolderReward(holderRewardAmount);\\n\\n        super._transfer(address(this), nftContract, tradingTaxAmount);\\n\\n        burnTokens(tokenBurningAmount);\\n\\n        _approve(address(this), router, liquidityCapitalAmount/2);\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = wbnb;\\n        ISwapRouter(router).swapExactTokensForTokens(liquidityCapitalAmount/2, 0, path, address(swapIntermediateWallet), block.timestamp + 1000);\\n        uint256 addWBNBLiquidity = IWBNB(wbnb).balanceOf(address(swapIntermediateWallet));\\n        swapIntermediateWallet.withdraw(IWBNB(wbnb), address(this), addWBNBLiquidity);\\n\\n        uint256 addTokenLiquidity = liquidityCapitalAmount - liquidityCapitalAmount/2;\\n\\n        IWBNB(wbnb).transfer(wbnbPair, addWBNBLiquidity);\\n        super._transfer(address(this), wbnbPair, addTokenLiquidity);\\n        ISwapPair(wbnbPair).mint(contractMaintenanceWallet);\\n\\n        super._transfer(from, to, amount - slippage);\\n    }\\n\\n    function claimEarnings(address from, uint256 amount) private {\\n        address sender = msg.sender;\\n        require(sender == from && sender == tx.origin, \\\"Only direct token owner operations allowed\\\");\\n\\n        UserData storage fromUser = userData[from];\\n        uint256 investAmount = fromUser.investAmount;\\n        uint256 lastActionBlock = fromUser.lastActionBlock;\\n        require(investAmount > 0, \\\"Investment amount must be greater than zero\\\");\\n        require(lastActionBlock != 0 && lastActionBlock + BLOCKS_PER_DAY <= block.number, \\\"Cannot claim earnings yet\\\");\\n\\n        super._transfer(from, address(this), amount);\\n        burnTokens(amount);\\n\\n        uint256 daysElapsed = (block.number - lastActionBlock) / BLOCKS_PER_DAY;\\n\\n        if(fromUser.marketReserve != 0) {\\n            uint256 releaseNow = investAmount * 12 / 1000 * daysElapsed;\\n            if(releaseNow > fromUser.marketReserve){\\n                releaseNow = fromUser.marketReserve;\\n            }\\n            purchaseTokensFromReserve(releaseNow);\\n            fromUser.marketReserve -= releaseNow;\\n        }\\n\\n        uint256 earnings = investAmount / 100 * daysElapsed;\\n        address referrer = fromUser.referrer;\\n        if (referrer != address(0)) {\\n            uint256 acceleration = earnings * 20 / 100;\\n            for (uint256 i = 0; i < MAX_TIER && acceleration >= MIN_ACCELERATION && referrer != address(0); i++) {\\n                UserData storage referrerData = userData[referrer];\\n                if(referrerData.investAmount != 0) {\\n                    referrerData.acceleration += acceleration;\\n                    emit Accelerated(from, referrer, acceleration);\\n                }\\n\\n                referrer = referrerData.referrer;\\n                acceleration = acceleration*2/3;\\n            }\\n        }\\n\\n        if(fromUser.acceleration != 0) {\\n            earnings += fromUser.acceleration;\\n            fromUser.acceleration = 0;\\n        }\\n        \\n        if(earnings > fromUser.remainingEarningsCap) {\\n            earnings = fromUser.remainingEarningsCap;\\n        }\\n        uint256 transferTokenAmount = getAmountsOut(earnings);\\n        super._transfer(address(this), from, transferTokenAmount);\\n        emit EarningsClaimed(from, earnings, transferTokenAmount);\\n        fromUser.lastActionBlock = block.number;\\n        if(earnings < fromUser.remainingEarningsCap) {\\n            fromUser.remainingEarningsCap -= earnings;\\n        } else {\\n            finalizeInvestment(from);\\n        }\\n    }\\n\\n    function transferBetweenUsers(address from, address to) private {\\n        UserData memory fromUser = userData[from];\\n        UserData memory toUser = userData[to];\\n        if(fromUser.referrer != address(0) && toUser.referrer == address(0)) {\\n            invitationSentStatus[from][to] = true;\\n        } else if(fromUser.referrer == address(0) && toUser.referrer != address(0) && invitationSentStatus[to][from]) {\\n            userData[from].referrer = to;\\n            if(fromUser.investAmount != 0) {\\n                userData[to].activeReferralsCount += 1;\\n            }\\n            invitationSentStatus[to][from] = false;\\n            emit ReferrerAssigned(from, to);\\n        }\\n    }\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function burnTokens(uint256 amount) private {\\n        uint256 _totalSupply = totalSupply();\\n        uint256 _burned = balanceOf(deadAddr);\\n        if(_totalSupply - _burned - amount >= _totalSupply / 100) {\\n            super._transfer(address(this), deadAddr, amount);\\n        } else if(_totalSupply - _burned <= _totalSupply / 100) {\\n            super._transfer(address(this), deflationOverflowWallet, amount);\\n        } else {\\n            uint256 shortfall = _totalSupply - _burned - _totalSupply / 100;\\n            super._transfer(address(this), deadAddr, shortfall);\\n            super._transfer(address(this), deflationOverflowWallet, amount - shortfall);\\n        }\\n    }\\n\\n    function increaseMarketReserve() private {\\n        uint256 balanceOfContract = address(this).balance;\\n        if(balanceOfContract > 0) {\\n            (uint128 lpAmount,,uint256 amount1) = INonfungiblePositionManager(v3Manage).increaseLiquidity{value: balanceOfContract}(INonfungiblePositionManager.IncreaseLiquidityParams({\\n                tokenId:positionTokenId,\\n                amount0Desired:0,\\n                amount1Desired:balanceOfContract,\\n                amount0Min:0,\\n                amount1Min:balanceOfContract,\\n                deadline:block.timestamp+1000\\n            }));\\n            require(lpAmount > 0 && amount1 == balanceOfContract, \\\"DepositV3 Error\\\");\\n        }\\n    }\\n\\n    function purchaseTokens(uint256 bnbAmount) private swapping {\\n        address[] memory path = new address[](2);\\n        path[0] = wbnb;\\n        path[1] = address(this);\\n\\n        ISwapRouter(router).swapExactETHForTokens{value: bnbAmount}(0, path, address(swapIntermediateWallet), block.timestamp + 1000);\\n        uint256 tokenAmount = balanceOf(address(swapIntermediateWallet));\\n        super._transfer(address(swapIntermediateWallet), address(this), tokenAmount);\\n    }\\n\\n    function purchaseTokensFromReserve(uint256 bnbAmount) private swapping {\\n        (,,,,,int24 tickLower,int24 tickUpper,uint128 liquidity,,,,) = INonfungiblePositionManager(v3Manage).positions(positionTokenId);\\n        require(liquidity > 0, \\\"Zero liquidity\\\");\\n\\n        (,uint256 balanceOfWBNB) = IV3CALC(v3PositionCalc).principal(wbnbusdt, tickLower, tickUpper, liquidity);\\n        require(balanceOfWBNB >= bnbAmount, \\\"Insufficient BNB balance\\\");\\n\\n        uint256 calcRes = (bnbAmount * liquidity) / balanceOfWBNB;\\n        uint128 deLpAmunt = uint128(calcRes) + 1;\\n        if (deLpAmunt > liquidity) {\\n            deLpAmunt = liquidity;\\n        }\\n        (, uint256 wbnbAmount) = INonfungiblePositionManager(v3Manage)\\n            .decreaseLiquidity(\\n                INonfungiblePositionManager.DecreaseLiquidityParams({\\n                    tokenId: positionTokenId,\\n                    liquidity: deLpAmunt,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: block.timestamp + 1000\\n                })\\n            );\\n        require(wbnbAmount > 0, \\\"No tokens returned from liquidity decrease\\\");\\n        INonfungiblePositionManager(v3Manage).collect(\\n            INonfungiblePositionManager.CollectParams({\\n                tokenId: positionTokenId,\\n                recipient: address(this),\\n                amount0Max: 340282366920938463463374607431768211455,\\n                amount1Max: 340282366920938463463374607431768211455\\n            })\\n        );\\n\\n        IERC20(wbnb).approve(router, wbnbAmount);\\n        address[] memory path = new address[](2);\\n        path[0] = wbnb;\\n        path[1] = address(this);\\n        ISwapRouter(router).swapExactTokensForTokens(wbnbAmount, 0, path, address(swapIntermediateWallet), block.timestamp + 1000);\\n        uint256 tokenAmount = balanceOf(address(swapIntermediateWallet));\\n        super._transfer(address(swapIntermediateWallet), address(this), tokenAmount);\\n    }\\n\\n    function checkPrice() private {\\n        uint256 midnight = block.timestamp / 1 days * 1 days;\\n        uint256 currentHour = (block.timestamp - midnight) / 1 hours;\\n        uint256 currentHourStartTimestamp = midnight + currentHour * 1 hours;\\n        ExchangeRateRecord storage record = exchangeRateRecord[currentHour];\\n        if(record.timestamp != currentHourStartTimestamp) {\\n            uint256 historicalExchangeRate = 0;\\n            if(record.timestamp == currentHourStartTimestamp - 1 days) {\\n                historicalExchangeRate = record.exchangeRate;\\n            } else {\\n                for(uint8 i = 1; i <= 4; ++i) {\\n                    uint256 h = (currentHour + i) % 24;\\n                    ExchangeRateRecord memory r = exchangeRateRecord[h];\\n                    if(r.timestamp == currentHourStartTimestamp - 1 days + (1 hours * i)) {\\n                        historicalExchangeRate = r.exchangeRate;\\n                        break;\\n                    }\\n                }\\n            }\\n            if(historicalExchangeRate != 0) {\\n                record.exchangeRate = comparePrice(historicalExchangeRate);\\n            } else {\\n                record.exchangeRate = getAmountsOut(1 ether);\\n            }\\n            record.timestamp = currentHourStartTimestamp;\\n        }\\n    }\\n\\n    function comparePrice(uint256 historicalExchangeRate) private returns(uint256) {\\n        uint256 currentExchangeRate = getAmountsOut(1 ether);\\n        if(currentExchangeRate > historicalExchangeRate) {\\n            if(100 - historicalExchangeRate*100/currentExchangeRate >= 20) {\\n                if(stabilizePrice()) {\\n                    currentExchangeRate = getAmountsOut(1 ether);\\n                }\\n            }\\n        }\\n        return currentExchangeRate;\\n    }\\n\\n    function stabilizePrice() private returns(bool) {\\n        uint256 _priceSupport = priceSupport;\\n        uint256 _priceSupportMin = priceSupportMin;\\n        uint256 _priceSupportMax = priceSupportMax;\\n        if(_priceSupport != 0) {\\n            uint256 amount = 0;\\n            if(_priceSupport <= _priceSupportMin) {\\n                amount = _priceSupport;\\n            } else {\\n                amount = _priceSupport / 5;\\n                if(amount < _priceSupportMin) {\\n                    amount = _priceSupportMin;\\n                } else if(amount > _priceSupportMax && _priceSupportMax > _priceSupportMin) {\\n                    amount = _priceSupportMax;\\n                }\\n            }\\n            purchaseTokensFromReserve(amount);\\n            priceSupport -= amount;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getAmountsOut(uint256 bnbAmount) private view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = wbnb;\\n        path[1] = address(this);\\n        uint256[] memory amounts = ISwapRouter(router).getAmountsOut(bnbAmount, path);\\n        return amounts[1];\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    function start() external onlyOwner {\\n        require(!isStarted, \\\"Contract has already been started\\\");\\n        isStarted = true;\\n        emit Started();\\n    }\\n\\n    function transferPositionToken(address to) external onlyOwner {\\n        INonfungiblePositionManager(v3Manage).transferFrom(address(this), to, positionTokenId);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Accelerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTokenAmount\",\"type\":\"uint256\"}],\"name\":\"EarningsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvestmentFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvestmentStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ACCELERATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REFERRAL_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkNftEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractMaintenanceWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTPerformanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deflationOverflowWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeRateRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAnt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invitationSentStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAllocatedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSupport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSupportMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSupportMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivePriceSupport\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIntermediateFund\",\"outputs\":[{\"internalType\":\"contract SwapIntermediateWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIntermediateWallet\",\"outputs\":[{\"internalType\":\"contract SwapIntermediateWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferPositionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingEarningsCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamInvestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeReferralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralNodeHighestInvestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftDeduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceleration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3Manage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3PositionCalc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbusdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ANTT", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}