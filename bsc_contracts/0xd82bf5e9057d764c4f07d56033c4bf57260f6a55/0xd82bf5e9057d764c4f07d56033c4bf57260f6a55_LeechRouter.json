{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/BanList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBanList.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BanList is Ownable, IBanList {\\n    mapping(address => bool) public admins;\\n\\n    mapping(address => bool) private _list;\\n\\n    modifier restricted() {\\n        if (!admins[_msgSender()]) revert Unauthorized();\\n        _;\\n    }\\n\\n    function ban(address user) external restricted {\\n        if (_list[user]) revert AlreadyBanned();\\n        _list[user] = true;\\n        emit UserBanned(user);\\n    }\\n\\n    function unban(address user) external restricted {\\n        if (!_list[user]) revert NotBanned();\\n        _list[user] = false;\\n        emit UserUnbanned(user);\\n    }\\n\\n    function setAdmin(address admin, bool isAdmin) external onlyOwner {\\n        if (admin == address(0)) revert ZeroAddress();\\n        _list[admin] = isAdmin;\\n        emit AdminSet(admin, isAdmin);\\n    }\\n\\n    function isBanned(address user) external view returns (bool) {\\n        return _list[user];\\n    }\\n\\n    function isNotBanned(address user) external view returns (bool) {\\n        return !_list[user];\\n    }\\n\\n    function check(address user) external view {\\n        if (_list[user]) revert UserIsBanned();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/IBanList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\ninterface IBanList {\\n    event UserBanned(address indexed user);\\n    event UserUnbanned(address indexed user);\\n    event AdminSet(address indexed admin, bool indexed isAdmin);\\n\\n    error AlreadyBanned();\\n    error ZeroAddress();\\n    error NotBanned();\\n    error Unauthorized();\\n    error UserIsBanned();\\n\\n    function isBanned(address user) external view returns (bool);\\n\\n    function isNotBanned(address user) external view returns (bool);\\n\\n    function check(address user) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/core/ILeechRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//        __                   __\\n//       / /   ___  ___  _____/ /_\\n//      / /   / _ \\\\/ _ \\\\/ ___/ __ \\\\  Leech\\n//     / /___/  __/  __/ /__/ / / / Protocol\\n//    /_____/\\\\___/\\\\___/\\\\___/_/ /_/ Router    __\\n//    / __ \\\\_________  / /_____  _________  / /\\n//   / /_/ / ___/ __ \\\\/ __/ __ \\\\/ ___/ __ \\\\/ /\\n//  / ____/ /  / /_/ / /_/ /_/ / /__/ /_/ / /\\n// /_/   /_/   \\\\____/\\\\__/\\\\____/\\\\___/\\\\____/_/\\n\\n/**\\n * @title Leech Protocol router interface.\\n * @notice The Router is the main protocol contract, for user interactions and protocol automatizations.\\n * @author Leech Protocol (https://app.leechprotocol.com/).\\n * @custom:version 1.0.\\n * @custom:security Found vulnerability? Contact us and get reward!\\n */\\ninterface ILeechRouter {\\n    /**\\n     * @dev For crosschainWithdraw() to prevent \\\"stack too deep\\\" error.\\n     * @param poolId Selected pool ID.\\n     * @param token Withdrwalas token address. Filtering on the BE side.\\n     * @param shares Amount of withdrawal token.\\n     */\\n    struct XChain {\\n        uint16 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n        uint256 maxBlockNumber;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @dev Deposit into multi-pool params.\\n     * @param user User address.\\n     * @param poolId Selected pool ID.\\n     * @param depositToken Deposited token address.\\n     * @param amount Amount of deposited token.\\n     * @param data Additional pool data.\\n     */\\n    struct DepositMultiPool {\\n        address user;\\n        uint16 poolId;\\n        IERC20 depositToken;\\n        uint256 amount;\\n        uint256[] minAmounts;\\n        uint16 slippage;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice Finalize withdrawal params.\\n     * @param poolId Pool Id.\\n     * @param shares Amount in \\\"want\\\" token on strategy: LP or single token.\\n     * @param user User address.\\n     * @param tokenOut Withdrwalas token address. Filtering on the BE side.\\n     * @param targetChainId Chain ID of the network where the withdrawal requests was created.\\n     * @param data Additional parameters.\\n     */\\n    struct FinalizeWithdrawal {\\n        uint16 poolId;\\n        uint256 shares;\\n        address user;\\n        uint96 targetChainId;\\n        IERC20 tokenOut;\\n        uint256 minAmount;\\n        uint16 slippage;\\n        bytes data;\\n    }\\n\\n    /// @dev Emit in cross-chain deposits.\\n    event BaseBridged(\\n        address user,\\n        uint256 amountOfBase,\\n        uint256 poolId,\\n        uint256 destinationChainId,\\n        uint256 fromChainId,\\n        address depositedToken\\n    );\\n\\n    /// @dev Emit after deposit to the single pool.\\n    event DepositedSinglePool(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 allocation,\\n        uint256 chainId,\\n        uint256 amount,\\n        address token\\n    );\\n\\n    /// @dev Emit after deposit to the multi-pool.\\n    event DepositedMultiPool(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 chainId,\\n        uint256 amount,\\n        address token\\n    );\\n\\n    /// @dev Emit in request withdraw function to notify back-end.\\n    event WithdrawalRequested(\\n        address user,\\n        uint256 poolId,\\n        uint256 amount,\\n        uint256 chainId,\\n        address tokenOut\\n    );\\n\\n    /// @dev Emit after completeing withdrawal requests.\\n    event WithdrawCompleted(\\n        address user,\\n        uint256 poolId,\\n        uint256 targetChainId,\\n        uint256 shares,\\n        uint256 wantAmount\\n    );\\n\\n    /// @dev Emit after completeing cross-chain withdrawal requests.\\n    event CrosschainWithdrawCompleted(\\n        address user,\\n        uint256 poolId,\\n        uint256 targetChainId,\\n        uint256 shares,\\n        uint256 wantAmount\\n    );\\n\\n    /// @dev Emit after cross-chain migration is completed.\\n    event FinalizedCrosschainMigration(\\n        uint256 poolId,\\n        uint256 strategyId,\\n        uint256 chainId\\n    );\\n\\n    /// @dev Start migration. If migration is not cross-chain this event is complete.\\n    event Migration(uint256 poolId, uint256 strategyId, uint256 chainId);\\n\\n    /// @dev Signature validator updated event.\\n    event ValidatorUpdated(address previous, address current);\\n    /// @dev Finalizer service address changed.\\n    event FinalizerUpdated(address previous, address current);\\n    /// @dev Router updated.\\n    event RouterUpdated(\\n        uint96 indexed chainId,\\n        address previous,\\n        address current\\n    );\\n    /// @dev Crosschain requests enebled or disabled.\\n    event CrosschainStatusChanged(bool isPaused);\\n    /// @dev When transporter updated.\\n    event TransporterUpdated(address previous, address current);\\n    /// @dev Rewarder contract changed.\\n    event RewarderUpdated(address previous, address current);\\n    /// @dev Withdraw delay changed.\\n    event WithdrawDelayChanged(uint16 previous, uint16 current);\\n    /// @dev Deposit token updated.\\n    event DepositTokenUpdated(\\n        address indexed token,\\n        uint256 previous,\\n        uint256 current\\n    );\\n    /// @dev When treasury updated.\\n    event TreasuryUpdated(address previous, address current);\\n\\n    error ZeroAddress();\\n    error ZeroValue();\\n    error Banned();\\n    error NotBanned();\\n    error StrategyDisabled();\\n    error AmountTooLow();\\n    error AmountTooBig();\\n    error CrosschainError();\\n    error TransferFailed();\\n    error BadToken();\\n    error BadArray();\\n    error BadSignature();\\n    error BadAmount();\\n    error WithdrawDelay();\\n    error BadSlippage();\\n    error StoreUndefined();\\n    error Outdated();\\n    error WrongBlockchain();\\n    error WrongBridgeFees();\\n    error Unauthorized();\\n    error StoreAlreadyInitialized();\\n    error CrosschainPaused();\\n    error CrosschainUnpaused();\\n    error RewarderUndefined();\\n\\n    // /**\\n    //  * @notice User deposit method.\\n    //  * @param poolId Selected pool ID.\\n    //  * @param depositToken Deposited token address.\\n    //  * @param amount Amount of deposited token.\\n    //  * @param data Additional pool data.\\n    //  */\\n    // function deposit(\\n    //     uint16 poolId,\\n    //     IERC20 depositToken,\\n    //     uint256 amount,\\n    //     bytes memory data\\n    // ) external;\\n\\n    // /**\\n    //  * @notice User crosschain deposit method.\\n    //  * @param poolId Selected pool ID.\\n    //  * @param depositToken Deposited token address.\\n    //  * @param bridgedToken Token for the crosschain bridging.\\n    //  * @param amount Amount of deposited token.\\n    //  * @param isMultiPool Is deposit to multi-pool.\\n    //  */\\n    // function crosschainDeposit(\\n    //     uint16 poolId,\\n    //     IERC20 depositToken,\\n    //     IERC20 bridgedToken,\\n    //     uint256 amount,\\n    //     bool isMultiPool\\n    // ) external payable;\\n\\n    // /**\\n    //  * @notice Withdraw from the pool.\\n    //  * @notice Due to the cross-chain architecture of the protocol, share prices are stored on the BE side.\\n    //  * @param poolId Selected pool ID.\\n    //  * @param tokenOut Withdrwalas token address. Filtering on the BE side.\\n    //  * @param shares Amount of withdrawal token.\\n    //  * @param data Additional data.\\n    //  */\\n    // function withdraw(\\n    //     uint16 poolId,\\n    //     IERC20 tokenOut,\\n    //     uint256 shares,\\n    //     bytes memory data\\n    // ) external;\\n\\n    // /**\\n    //  * @notice After bridging completed we need to place tokens to farm.\\n    //  * @dev Used only to finalize cross-chain deposits.\\n    //  * @param user User address who performed a cross-chain deposit.\\n    //  * @param amount Amount of base token.\\n    //  * @param poolId Pool Id.\\n    //  * @param data Additional data.\\n    //  */\\n    // function finalizeDeposit(\\n    //     address user,\\n    //     uint256 amount,\\n    //     uint16 poolId,\\n    //     bytes memory data\\n    // ) external;\\n\\n    // /**\\n    //  * @notice User creates crosschain withdrawal request.\\n    //  * @notice Due to the cross-chain architecture of the protocol, share prices are stored on the BE side.\\n    //  * @param poolId Selected pool ID.\\n    //  * @param tokenOut Withdrwalas token address. Filtering on the BE side.\\n    //  * @param shares Amount of withdrawal token.\\n    //  */\\n    // function crosschainWithdraw(\\n    //     uint16 poolId,\\n    //     IERC20 tokenOut,\\n    //     uint256 shares\\n    // ) external payable;\\n\\n    // /**\\n    //  * @notice BE calls after WithdrawalRequested event was catched.\\n    //  * @notice Should be called on chain with active strategy\\n    //  * @param poolId Pool Id.\\n    //  * @param shares Amount in \\\"want\\\" token on strategy: LP or single token.\\n    //  * @param user User address.\\n    //  * @param tokenOut Withdrwalas token address. Filtering on the BE side.\\n    //  * @param targetChainId Chain ID of the network where the withdrawal requests was created.\\n    //  * @param data Additional parameters.\\n    //  */\\n    // function finalizeWithdrawal(\\n    //     uint16 poolId,\\n    //     uint256 shares,\\n    //     address user,\\n    //     IERC20 tokenOut,\\n    //     uint96 targetChainId,\\n    //     bytes memory data\\n    // ) external payable;\\n\\n    // /**\\n    //  * @notice Calc potential withdraw amount from pool.\\n    //  * @param poolId ID of the pool.\\n    //  * @param shares Pool shares amount to withdraw.\\n    //  * @param token0toTokenOut May be used in some strategies.\\n    //  * @param token1toTokenOut May be used in some strategies.\\n    //  * @param data Additional params.\\n    //  * @return amountOut Amount converted from shares value to base token amount.\\n    //  */\\n    // function quotePotentialWithdraw(\\n    //     uint16 poolId,\\n    //     uint256 shares,\\n    //     address[] calldata token0toTokenOut,\\n    //     address[] calldata token1toTokenOut,\\n    //     bytes calldata data\\n    // ) external view returns (uint256 amountOut);\\n\\n    // /**\\n    //  * @notice Base token of current router.\\n    //  * @return Address of the base token.\\n    //  */\\n    // function base() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/core/ILeechTransporter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ILeechTransporter {\\n    /**\\n     * @notice This function requires that `leechSwapper` is properly initialized\\n     * @param _destinationToken Address of the asset to be bridged\\n     * @param _bridgedAmount The amount of asset to send The ID of the destination chain to send to\\n     * @param _destinationChainId The ID of the destination chain to send to The address of the router on the destination chain\\n     * @param _destAddress The address on the destination chain\\n     */\\n    function bridgeOut(\\n        address _tokenIn,\\n        address _destinationToken,\\n        uint256 _bridgedAmount,\\n        uint256 _minAmount,\\n        uint256 _destinationChainId,\\n        address _destAddress\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/core/IMultiPoolsStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\ninterface IMultiPoolsStore {\\n    /// @dev Struct for the strategy instance.\\n    struct Strategy {\\n        address addr;\\n        uint256 withdrawalFee;\\n        uint16 poolShare;\\n        bool enabled;\\n    }\\n\\n    /// @dev Struct for the pool instance.\\n    struct Pool {\\n        uint256 chainId; // 0 = disabled\\n        uint256 totalAllocation;\\n        Strategy[] strategies;\\n        mapping(address => User) user;\\n    }\\n\\n    /// @dev Struct for the pool user.\\n    struct User {\\n        uint256 allocation;\\n        uint96 delayToBlock;\\n    }\\n\\n    event RouterChanged(address oldRouter, address newRouter);\\n\\n    error ZeroAddress();\\n    error Unauthorized();\\n    error PoolDisabled();\\n    error AmountTooBig();\\n    error HasNoRouter();\\n    error BadPoolShares(uint16 actualValue);\\n\\n    function setPool(uint16 poolId, uint256 chainId, Strategy[] calldata strategies) external;\\n\\n    function checkPoolShares(uint16 poolId) external view returns (bool);\\n\\n    function isCrosschain(uint16 poolId) external view returns (bool);\\n\\n    function getStrategies(\\n        uint16 poolId\\n    ) external view returns (Strategy[] memory);\\n\\n    function getStrategyAddress(\\n        uint16 poolId,\\n        uint256 index\\n    ) external view returns (address);\\n\\n    function getTotalAllocation(uint16 poolId) external view returns (uint256);\\n\\n    function getBalance(\\n        uint16 poolId,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    function increaseAllocation(\\n        uint16 poolId,\\n        uint256 amount,\\n        address user,\\n        uint96 withdrawDelay\\n    ) external;\\n\\n    function decreaseAllocation(\\n        uint16 poolId,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    function getStrategyShare(\\n        uint16 poolId,\\n        uint256 index\\n    ) external view returns (uint16);\\n\\n    function countStrategies(uint16 poolId) external view returns (uint256);\\n\\n    function getChainId(uint16 poolId) external view returns (uint256);\\n\\n    function getUserAllocation(\\n        uint16 poolId,\\n        address user\\n    ) external view returns (uint256);\\n\\n    function isAbleForWithdraw(\\n        uint16 poolId,\\n        address user,\\n        uint256 shares\\n    ) external view returns (bool);\\n\\n    function getWithdrawalFees(\\n        uint16 poolId,\\n        uint256 index\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/ISinglePoolsStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\ninterface ISinglePoolsStore {\\n    /// @dev Struct for the pool instance.\\n    struct Pool {\\n        uint256 chainId; // 0 - disabled\\n        uint256 totalAllocation;\\n        uint256 withdrawalFee;\\n        address strategy;\\n        mapping(address => User) user;\\n    }\\n\\n    /// @dev Struct for the pool user.\\n    struct User {\\n        uint256 allocation;\\n        uint96 delayToBlock;\\n    }\\n\\n    event RouterChanged(address oldRouter, address newRouter);\\n\\n    error ZeroAddress();\\n    error Unauthorized();\\n    error PoolDisabled();\\n    error AmountTooBig();\\n    error HasNoRouter();\\n\\n    function isCrosschain(uint16 poolId) external view returns (bool);\\n\\n    function getStrategyAddress(uint16 poolId) external view returns (address);\\n\\n    function getTotalAllocation(uint16 poolId) external view returns (uint256);\\n\\n    function getBalance(uint16 poolId) external view returns (uint256);\\n\\n    function increaseAllocation(\\n        uint16 poolId,\\n        uint256 amount,\\n        address user,\\n        uint96 withdrawDelay\\n    ) external;\\n\\n    function decreaseAllocation(\\n        uint16 poolId,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    function getChainId(uint16 poolId) external view returns (uint256);\\n\\n    function isAbleForWithdraw(\\n        uint16 poolId,\\n        address user\\n    ) external view returns (bool);\\n\\n    function isEnoughtShares(\\n        uint16 poolId,\\n        address user,\\n        uint256 shares\\n    ) external view returns (bool);\\n\\n    function getWithdrawalFees(uint16 poolId) external view returns (uint256);\\n\\n    function getUserAllocation(\\n        uint16 poolId,\\n        address user\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/LeechRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./ILeechTransporter.sol\\\";\\nimport \\\"../strategies/IBaseStrategy.sol\\\";\\nimport \\\"./ILeechRouter.sol\\\";\\nimport \\\"./ISinglePoolsStore.sol\\\";\\nimport \\\"./IMultiPoolsStore.sol\\\";\\nimport \\\"./BanList.sol\\\";\\nimport \\\"./rewarder/IRewarder.sol\\\";\\n\\n//        __                   __\\n//       / /   ___  ___  _____/ /_\\n//      / /   / _ \\\\/ _ \\\\/ ___/ __ \\\\  Leech\\n//     / /___/  __/  __/ /__/ / / / Protocol\\n//    /_____/\\\\___/\\\\___/\\\\___/_/ /_/ Router    __\\n//    / __ \\\\_________  / /_____  _________  / /\\n//   / /_/ / ___/ __ \\\\/ __/ __ \\\\/ ___/ __ \\\\/ /\\n//  / ____/ /  / /_/ / /_/ /_/ / /__/ /_/ / /\\n// /_/   /_/   \\\\____/\\\\__/\\\\____/\\\\___/\\\\____/_/\\n\\n/**\\n * @title Leech Protocol router contract.\\n * @notice The Router is the main protocol contract, for user interactions and protocol automatizations.\\n * @author Leech Protocol (https://app.leechprotocol.com/).\\n * @custom:role DEFAULT_ADMIN_ROLE - Hihgly secured core team multisig for setting roles.\\n * @custom:role ADMIN_ROLE - Core multisig for the protocol adjustments.\\n * @custom:role PAUSER_ROLE - Security monitoring services.\\n * @custom:role FINALIZER_ROLE - Crosschain finalizer service.\\n * @custom:version 1.0.\\n * @custom:security Found vulnerability? Contact us and get reward!\\n */\\ncontract LeechRouter is AccessControl, Pausable, ReentrancyGuard, ILeechRouter {\\n    /// @dev SafeERC20 library from OpenZeppelin.\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev OpenZeppelin's ECDSA library.\\n    using ECDSA for bytes32;\\n\\n    /// @notice Admins multi-sig for protocol adjustments.\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    /// @notice Malicious actions observers.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @notice Crosschain finalizer service.\\n    bytes32 public constant FINALIZER_ROLE = keccak256(\\\"FINALIZER_ROLE\\\");\\n\\n    /// @notice Single strategy pools storage.\\n    ISinglePoolsStore public immutable singlePools;\\n\\n    /// @notice Multi-strategy pools storage.\\n    IMultiPoolsStore public immutable multiPools;\\n\\n    /// @notice Banned users storage.\\n    IBanList public immutable banList;\\n\\n    /// @notice Rewarder contract\\n    IRewarder public rewarder;\\n\\n    /// @notice Protocol fee receiver.\\n    address public treasury;\\n\\n    /// @notice Signature validator.\\n    address public validator;\\n\\n    /// @notice Crosschain finalizer receives bridge fees.\\n    address payable public finalizer;\\n\\n    /// @notice Withdraw delay in blocks for security reasons.\\n    uint16 public withdrawDelay = 1000;\\n\\n    /// @notice Pause crosschain requests from user.\\n    /// @dev For the protocol maintenace and upgrade.\\n    bool public crosschainPaused;\\n\\n    /// @notice Bridge interface abstraction.\\n    ILeechTransporter public transporter;\\n\\n    /// @notice base protocol stablecoin.\\n    IERC20 internal _baseToken;\\n\\n    /// @notice Token minimal deposit amount.\\n    mapping(address => uint256) public depositMinAmount;\\n\\n    /// @notice Mapping will return active router struct for the specific chain id.\\n    /// @dev chainId => LeechRouter.\\n    mapping(uint96 => address) public routers;\\n\\n    /// @notice Modifier allows exlude banned addresses from execution, even if the valid signature exists.\\n    modifier enabled(address user) {\\n        _requireNotPaused();\\n        banList.check(user);\\n        if (address(singlePools) == address(0)) revert StoreUndefined();\\n        if (address(multiPools) == address(0)) revert StoreUndefined();\\n        if (address(rewarder) == address(0)) revert RewarderUndefined();\\n        _;\\n    }\\n\\n    modifier allowCrosschain() {\\n        if (crosschainPaused) revert CrosschainPaused();\\n        _;\\n    }\\n\\n    modifier crosschainIsPaused() {\\n        if (!crosschainPaused) revert CrosschainUnpaused();\\n        _;\\n    }\\n\\n    /// @notice Grand access for two roles.\\n    modifier onlyRoles(bytes32 role1, bytes32 role2) {\\n        if (!hasRole(role1, msg.sender) && !hasRole(role2, msg.sender))\\n            revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @notice Prohibit zero address.\\n    /// @param checkAddr Address to check.\\n    modifier zeroAddr(address checkAddr) {\\n        if (checkAddr == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n\\n    /// @notice Prohibit zero amount.\\n    /// @param checkVal Value to check.\\n    modifier zeroVal(uint256 checkVal) {\\n        if (checkVal == 0) revert ZeroValue();\\n        _;\\n    }\\n\\n    /// @notice Check deposit token for requirments.\\n    modifier checkDepositAmount(IERC20 depositToken, uint256 amount) {\\n        if (depositMinAmount[address(depositToken)] == 0) revert BadToken();\\n        if (amount < depositMinAmount[address(depositToken)])\\n            revert AmountTooLow();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check msg.value for crosschain bridge fees.\\n     * @dev We are using TTL mechanism instead of storing bytes32 hashes. It's ok if user will use one signature\\n     * several times for the similar transactions until maxBlockNumber is reached.\\n     */\\n    modifier checkCrosschainMsgValue(XChain calldata data) {\\n        if (block.number > data.maxBlockNumber) revert Outdated();\\n        bytes32 msgHash = keccak256(\\n            abi.encode(\\n                msg.sender,\\n                address(data.token),\\n                data.amount,\\n                msg.value,\\n                data.maxBlockNumber,\\n                data.poolId,\\n                block.chainid\\n            )\\n        );\\n        if (\\n            msgHash.toEthSignedMessageHash().recover(data.signature) !=\\n            validator\\n        ) revert BadSignature();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Contract deployment params\\n     * @param __baseToken Base stablecoin.\\n     * @param _treasury Fees receiver.\\n     * @param _finalizer Crosschain finalizer service.\\n     * @param _validator Bridge fees validator.\\n     * @param _admin Admins team multisig.\\n     * @param _singlePools Single pools storage address.\\n     * @param _multiPools Multi-pools storage address.\\n     * @param _banList Banned users storage address.\\n     */\\n    constructor(\\n        IERC20 __baseToken,\\n        address _treasury,\\n        address _finalizer,\\n        address _validator,\\n        address _admin,\\n        ISinglePoolsStore _singlePools,\\n        IMultiPoolsStore _multiPools,\\n        IBanList _banList\\n    ) {\\n        // Check addresses\\n        if (\\n            _admin == address(0) ||\\n            _finalizer == address(0) ||\\n            _treasury == address(0) ||\\n            _validator == address(0) ||\\n            address(_singlePools) == address(0) ||\\n            address(_multiPools) == address(0) ||\\n            address(_banList) == address(0) ||\\n            address(__baseToken) == address(0)\\n        ) revert ZeroAddress();\\n        // Set roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, _admin);\\n        _grantRole(FINALIZER_ROLE, _finalizer);\\n        // Set crosschain bridge service\\n        finalizer = payable(_finalizer);\\n        // Set the rest of params\\n        (_baseToken, treasury, validator, singlePools, multiPools, banList) = (\\n            __baseToken,\\n            _treasury,\\n            _validator,\\n            _singlePools,\\n            _multiPools,\\n            _banList\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //                              USERS  AREA                              //\\n    // ===================================================================== //\\n    //                                                                       //\\n    // Users can deposit and withdraw with functions below. This functions   //\\n    // can be unavailable in this cases:                                     //\\n    //  - Protocol on pause.                                                 //\\n    //  - Crosschain requests unavailable if crosschain on pause.            //\\n    //  - User is banned.                                                    //\\n    //  - This contract is depricated.                                       //\\n    //                                                                       //\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Deposit into single strategy pool.\\n     * @param poolId Selected pool ID.\\n     * @param depositToken Deposited token address.\\n     * @param amount Amount of deposited token.\\n     * @param data Additional pool data.\\n     */\\n    function deposit(\\n        uint16 poolId,\\n        IERC20 depositToken,\\n        uint256 amount,\\n        uint256 minAmount,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external nonReentrant enabled(_msgSender()) {\\n        _deposit(_msgSender(), poolId, depositToken, amount, minAmount, slippage, data);\\n    }\\n\\n    /**\\n     * @notice Deposit to the multi-pool.\\n     * @param poolId Selected pool ID.\\n     * @param depositToken Deposited token address.\\n     * @param amount Amount of deposited token.\\n     * @param data Additional pool data.\\n     */\\n    function depositMultiPool(\\n        uint16 poolId,\\n        IERC20 depositToken,\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external nonReentrant enabled(_msgSender()) {\\n        DepositMultiPool memory depositData = DepositMultiPool(\\n            _msgSender(),\\n            poolId,\\n            depositToken,\\n            amount, \\n            minAmounts,\\n            slippage,\\n            data\\n        );\\n        _depositMultiPool(depositData);\\n    }\\n\\n    /**\\n     * @notice User crosschain deposit method.\\n     * @dev Function is payable to pay for the bridge.\\n     */\\n    function crosschainDeposit(\\n        XChain calldata data,\\n        IERC20 bridgedToken,\\n        bool isMultiPool,\\n        uint256 minAmount\\n    )\\n        external\\n        payable\\n        allowCrosschain\\n        nonReentrant\\n        enabled(msg.sender)\\n        checkDepositAmount(data.token, data.amount)\\n        checkCrosschainMsgValue(data)\\n    {\\n        // Check crosschain\\n        if (!isMultiPool && !singlePools.isCrosschain(data.poolId))\\n            revert CrosschainError();\\n        if (isMultiPool && !multiPools.isCrosschain(data.poolId))\\n            revert CrosschainError();\\n        // Get pool blockchain id\\n        uint256 chainId = isMultiPool\\n            ? multiPools.getChainId(data.poolId)\\n            : singlePools.getChainId(data.poolId);\\n        // Send tokens to the LeechTransporter\\n        data.token.safeTransferFrom(\\n            msg.sender,\\n            address(transporter),\\n            data.amount\\n        );\\n        // Bridge token (msg.value check on the bridge side)\\n        transporter.bridgeOut{value: msg.value}(\\n            address(data.token),\\n            address(bridgedToken),\\n            data.amount,\\n            minAmount,\\n            chainId,\\n            routers[uint96(chainId)]\\n        );\\n        // Notify watchers\\n        emit BaseBridged(\\n            msg.sender,\\n            data.amount,\\n            data.poolId,\\n            chainId,\\n            block.chainid,\\n            address(data.token)\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw from the single pool.\\n     * @param poolId Selected pool ID.\\n     * @param tokenOut Withdrwalas token address. Filtering on the BE side.\\n     * @param shares Amount of withdrawal token.\\n     * @param data Additional data.\\n     */\\n    function withdraw(\\n        uint16 poolId,\\n        IERC20 tokenOut,\\n        uint256 shares,\\n        uint256 minAmount,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external nonReentrant {\\n        // Only in this blockchain\\n        if (singlePools.isCrosschain(poolId)) revert CrosschainError();\\n        // Check withdraw delay\\n        if (!singlePools.isAbleForWithdraw(poolId, msg.sender))\\n            revert WithdrawDelay();\\n        // Check shares amount\\n        if (!singlePools.isEnoughtShares(poolId, msg.sender, shares))\\n            revert AmountTooBig();\\n        // Get strategy\\n        IBaseStrategy strategy = IBaseStrategy(\\n            singlePools.getStrategyAddress(poolId)\\n        );\\n        // Withdraw from strategy\\n        uint256 amount = strategy.withdraw(\\n            poolId,\\n            (shares * strategy.allocationOf(poolId)) /\\n                singlePools.getTotalAllocation(poolId),\\n            tokenOut,\\n            minAmount,\\n            slippage,\\n            data\\n        );\\n        // Calc withdrawal fee\\n        amount -= _getFeesAndWithdraw(poolId, amount, msg.sender, shares);\\n        // Send token amount to the user\\n        tokenOut.safeTransfer(msg.sender, amount);\\n        // Notify services\\n        emit WithdrawCompleted(\\n            msg.sender,\\n            poolId,\\n            block.chainid,\\n            shares,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw from the multi-pool.\\n     * @param poolId Selected pool ID.\\n     * @param tokenOut Withdrwalas token address. Filtering on the BE side.\\n     * @param shares Amount of withdrawal token.\\n     * @param minAmounts Minimal amounts for withdraw from strategies.\\n     * @param data Additional data.\\n     */\\n    function withdrawMultiPool(\\n        uint16 poolId,\\n        IERC20 tokenOut,\\n        uint256 shares,\\n        uint256[] calldata minAmounts,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external nonReentrant {\\n        // Only in this blockchain\\n        if (multiPools.isCrosschain(poolId)) revert CrosschainError();\\n        // Check withdraw delay and shares amount\\n        if (!multiPools.isAbleForWithdraw(poolId, _msgSender(), shares))\\n            revert WithdrawDelay();\\n        // Withdraw from strategies\\n        (uint256 totalAmount, uint256 totalFees) = _withdrawFromMulti(\\n            poolId,\\n            tokenOut,\\n            shares,\\n            minAmounts,\\n            slippage,\\n            data\\n        );\\n        // Send fees to the protocol treasure\\n        tokenOut.safeTransfer(treasury, totalFees);\\n        // Send token amount to the user\\n        tokenOut.safeTransfer(_msgSender(), totalAmount);\\n        // Notify services\\n        emit WithdrawCompleted(\\n            _msgSender(),\\n            poolId,\\n            block.chainid,\\n            shares,\\n            totalAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice User creates crosschain withdrawal request.\\n     * @notice Due to the cross-chain architecture of the protocol, share prices are stored on the BE side.\\n     */\\n    function crosschainWithdraw(\\n        XChain calldata data\\n    )\\n        external\\n        payable\\n        allowCrosschain\\n        enabled(_msgSender())\\n        whenNotPaused\\n        zeroVal(data.amount)\\n        zeroAddr(address(data.token))\\n        checkCrosschainMsgValue(data)\\n    {\\n        // Transfer bridge fees to finalizer\\n        finalizer.transfer(msg.value);\\n        // Notify services\\n        emit WithdrawalRequested(\\n            _msgSender(),\\n            data.poolId,\\n            data.amount, // in shares\\n            block.chainid,\\n            address(data.token) // token out\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //                           FINALIZER SERVICE                           //\\n    // ===================================================================== //\\n    //                                                                       //\\n    // Only for crosschain finalizer services.                               //\\n    //                                                                       //\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice After bridging completed we need to place tokens to farm.\\n     * @dev Used only to finalize cross-chain deposits.\\n     * @param user User address who performed a cross-chain deposit.\\n     * @param amount Amount of base token.\\n     * @param poolId Pool Id.\\n     * @param data Additional data.\\n     */\\n    function finalizeDeposit(\\n        address user,\\n        uint256 amount,\\n        uint16 poolId,\\n        uint256 minAmount,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external nonReentrant onlyRole(FINALIZER_ROLE) zeroAddr(user) {\\n        _deposit(user, poolId, _baseToken, amount, minAmount, slippage, data);\\n    }\\n\\n    /**\\n     * @notice After bridging completed we need to place tokens to farm.\\n     * @dev Used only to finalize cross-chain deposits.\\n     * @param user User address who performed a cross-chain deposit.\\n     * @param amount Amount of base token.\\n     * @param poolId Pool Id.\\n     * @param data Additional data.\\n     */\\n    function finalizeMultiPoolDeposit(\\n        address user,\\n        uint256 amount,\\n        uint16 poolId,\\n        uint256[] calldata minAmounts,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external nonReentrant onlyRole(FINALIZER_ROLE) zeroAddr(user) {\\n        DepositMultiPool memory depositData = DepositMultiPool(\\n            user,\\n            poolId,\\n            _baseToken,\\n            amount,\\n            minAmounts,\\n            slippage,\\n            data\\n        );\\n        _depositMultiPool(depositData);\\n    }\\n\\n    /**\\n     * @notice BE calls after WithdrawalRequested event was catched.\\n     * Should be called on chain with active strategy\\n     */\\n    function finalizeWithdrawal(\\n        FinalizeWithdrawal calldata data\\n    ) external nonReentrant onlyRole(FINALIZER_ROLE) {\\n        // Only current chain\\n        if (data.targetChainId != block.chainid) revert WrongBlockchain();\\n        // Get amount and fees\\n        uint256 amount = _finalizeWithdrawal(data);\\n        // Send token amount to the user\\n        _baseToken.safeTransfer(data.user, amount);\\n        // Notify services\\n        emit WithdrawCompleted(\\n            data.user,\\n            data.poolId,\\n            data.targetChainId,\\n            data.shares,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Called by finalizer service after WithdrawalRequested event was catched and validated.\\n     * @dev Should be called on chain with active strategy.\\n     */\\n    function finalizeCrosschainWithdrawal(\\n        FinalizeWithdrawal calldata data\\n    ) external payable {\\n        // Only crosschain\\n        if (data.targetChainId == block.chainid) revert WrongBlockchain();\\n        // Get amount and fees\\n        uint256 amount = _finalizeWithdrawal(data);\\n        // If requested on another chain, use bridge\\n        _baseToken.safeTransfer(address(transporter), amount);\\n        // Send to transporter and bridge\\n        transporter.bridgeOut{value: msg.value}(\\n            base(),\\n            base(),\\n            amount,\\n            amount,\\n            data.targetChainId,\\n            data.user\\n        );\\n        // Notify services\\n        emit CrosschainWithdrawCompleted(\\n            data.user,\\n            data.poolId,\\n            data.targetChainId,\\n            data.shares,\\n            amount\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //                              PAUSE MODE                               //\\n    // ===================================================================== //\\n    //                                                                       //\\n    // This protocol has security observers. In case if malicious actions    //\\n    // happens, observers and admin team can pause deposits and withdrawals. //\\n    //                                                                       //\\n    // Also, admin team can put protocol on pause when doing maintenance or  //\\n    // contracts upgrade. Or current contract can be outdated and disabled.  //\\n    //                                                                       //\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Disable pause. Only admin team.\\n     * @dev Only admins multi-sig.\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Pause mode ON.\\n     * @dev Only security observers and admin team can call this function.\\n     */\\n    function pause() external onlyRoles(ADMIN_ROLE, PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Enable or disable crosschain requests from users.\\n     * @dev Services still can finalize existed requests.\\n     * We need this for router updates.\\n     * @param isCrosschainPaused True is pauseed, false unpaused.\\n     */\\n    function setCrosschainPaused(\\n        bool isCrosschainPaused\\n    ) external onlyRole(ADMIN_ROLE) {\\n        crosschainPaused = isCrosschainPaused;\\n        emit CrosschainStatusChanged(isCrosschainPaused);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //                                SETTERS                                //\\n    // ===================================================================== //\\n    //                                                                       //\\n    // Core team area. ADMIN_ROLE is the admins multi-sig.                   //\\n    //                                                                       //\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Finalizer setter.\\n     * @param newFinalizer New finalizer. Can't be zero address.\\n     */\\n    function setFinalizer(\\n        address payable newFinalizer\\n    ) external onlyRole(ADMIN_ROLE) whenPaused zeroAddr(newFinalizer) {\\n        emit FinalizerUpdated(finalizer, newFinalizer);\\n        finalizer = newFinalizer;\\n    }\\n\\n    /**\\n     * @notice Update validator address.\\n     * @param newValidator New bridge fees amount validator.\\n     */\\n    function setValidator(\\n        address newValidator\\n    ) external onlyRole(ADMIN_ROLE) whenPaused zeroAddr(newValidator) {\\n        emit ValidatorUpdated(validator, newValidator);\\n        validator = newValidator;\\n    }\\n\\n    /**\\n     * @notice Router setter.\\n     * @dev Crosschain requests should be on pause when updating or disabling routers,\\n     * because some crosschain transactions may be lost.\\n     * To disable blockchain set router to zero address.\\n     * Throws CrosschainPaused() custom error if crosschain requests is NOT on pause.\\n     * Check is all crosschain transactions are finalised before update routers.\\n     * @param chainId Chain Id.\\n     * @param router Address of the router.\\n     */\\n    function setRouter(\\n        uint96 chainId,\\n        address router\\n    ) external onlyRole(ADMIN_ROLE) crosschainIsPaused {\\n        emit RouterUpdated(chainId, routers[chainId], router);\\n        routers[chainId] = router;\\n    }\\n\\n    /**\\n     * @notice Transporter setter.\\n     * @dev Should be invoked with special caution to prevent blocking cross-chain operations.\\n     * Throws CrosschainPaused() custom error if crosschain requests is NOT on pause.\\n     * Check is all crosschain transactions are finalised before update transporter.\\n     * @param newTransporter New transporter.\\n     */\\n    function setTransporter(\\n        address newTransporter\\n    )\\n        external\\n        onlyRole(ADMIN_ROLE)\\n        zeroAddr(newTransporter)\\n        crosschainIsPaused\\n    {\\n        emit TransporterUpdated(address(transporter), newTransporter);\\n        transporter = ILeechTransporter(newTransporter);\\n    }\\n\\n    /**\\n     * @notice Function for disable and enable specific user.\\n     * @dev Throws CrosschainPaused() custom error if crosschain requests is NOT on pause.\\n     * Check is all crosschain transactions are finalised before update deposit token.\\n     * @param token Token address\\n     * @param minAmount Min amount of token with decimals. 0 to disable token.\\n     */\\n    function setDepositToken(\\n        address token,\\n        uint256 minAmount\\n    ) external onlyRole(ADMIN_ROLE) zeroAddr(token) crosschainIsPaused {\\n        emit DepositTokenUpdated(token, depositMinAmount[token], minAmount);\\n        depositMinAmount[token] = minAmount;\\n    }\\n\\n    /**\\n     * @notice Set withdraw delay.\\n     * @dev Limit delay with 10000 blocks.\\n     * @param newDelay New delay in blocks.\\n     */\\n    function setWithdrawDelay(uint16 newDelay) external onlyRole(ADMIN_ROLE) {\\n        if (newDelay > 10000) revert BadAmount();\\n        emit WithdrawDelayChanged(withdrawDelay, newDelay);\\n        withdrawDelay = newDelay;\\n    }\\n\\n    /**\\n     * @notice Change fees collector.\\n     * @dev Can't be zero address.\\n     * @param newTreasury New treasury address.\\n     */\\n    function setTreasury(\\n        address newTreasury\\n    ) external onlyRole(ADMIN_ROLE) zeroAddr(newTreasury) {\\n        emit TreasuryUpdated(treasury, newTreasury);\\n        treasury = newTreasury;\\n    }\\n\\n    /**\\n     * @notice Change rewarder contract.\\n     * @dev Can't be zero address.\\n     * @param newRewarder New rewarder address.\\n     */\\n    function setRewarder(\\n        IRewarder newRewarder\\n    ) external onlyRole(ADMIN_ROLE) zeroAddr(address(newRewarder)) {\\n        emit RewarderUpdated(address(rewarder), address(newRewarder));\\n        rewarder = newRewarder;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //                                 VIEWS                                 //\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Calc potential withdraw amount from single pool.\\n     * @param poolId ID of the pool.\\n     * @param shares Pool shares amount to withdraw.\\n     * @param data Additional params.\\n     * @return amountOut Amount converted from shares value to base token amount.\\n     */\\n    function shareToAmountSP(\\n        uint16 poolId,\\n        uint256 shares,\\n        bytes calldata data\\n    ) external view returns (uint256 amountOut) {\\n        // Get strategy\\n        IBaseStrategy strategy = IBaseStrategy(\\n            singlePools.getStrategyAddress(poolId)\\n        );\\n        // Convert to the strategy shares\\n        uint256 withdrawAmount = (shares * strategy.allocationOf(poolId)) /\\n            singlePools.getTotalAllocation(poolId);\\n        // Get and return potential withdraw amount\\n        amountOut = strategy.shareToAmount(withdrawAmount, data);\\n    }\\n\\n    /**\\n     * @notice Calc potential withdraw amount from multi-pool.\\n     * @param poolId ID of the pool.\\n     * @param shares Pool shares amount to withdraw.\\n     * @param data Additional params.\\n     * @return amountOut Amount converted from shares value to base token amount.\\n     */\\n    function shareToAmountMP(\\n        uint16 poolId,\\n        uint256 shares,\\n        bytes calldata data\\n    ) external view returns (uint256 amountOut) {\\n        // Get strategy\\n        for (uint256 i = 0; i < multiPools.countStrategies(poolId); i++) {\\n            IBaseStrategy strategy = IBaseStrategy(\\n                multiPools.getStrategyAddress(poolId, i)\\n            );\\n            // Get and return potential withdraw amount\\n            amountOut += strategy.shareToAmount(\\n                _calcShare(poolId, shares, strategy),\\n                data\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Base token of current router.\\n     * @return Address of the base token.\\n     */\\n    function base() public view returns (address) {\\n        return address(_baseToken);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //                           INTERNAL  KITCHEN                           //\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Deposit into single pool.\\n     * @dev User should be not banned. Protocol should be unpaused. Single and multiple\\n     * pools storages must be setted.\\n     * Acceptable tokens amd min amounts should be setted by the core team.\\n     * @param user Address of the user.\\n     * @param poolId Selected pool ID.\\n     * @param token Deposited token address.\\n     * @param amount Amount of deposited token.\\n     * @param data Additional pool data.\\n     */\\n    function _deposit(\\n        address user,\\n        uint16 poolId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 minAmount,\\n        uint16 slippage,\\n        bytes memory data\\n    ) internal checkDepositAmount(token, amount) {\\n        // Check crosschain\\n        if (singlePools.isCrosschain(poolId)) revert CrosschainError();\\n        // If current chain is active, deposit to strategy\\n        token.safeTransferFrom(\\n            user,\\n            singlePools.getStrategyAddress(poolId),\\n            amount\\n        );\\n        // Process deposit\\n        uint256 deposited = IBaseStrategy(\\n            singlePools.getStrategyAddress(poolId)\\n        ).deposit(poolId, token, minAmount, slippage, data);\\n        // Balance of LP before deposit\\n        uint256 initialBalance = singlePools.getBalance(poolId) - deposited;\\n        // Calc allocation points and normalize after migration\\n        if (\\n            singlePools.getTotalAllocation(poolId) != 0 && initialBalance != 0\\n        ) {\\n            deposited =\\n                (deposited * singlePools.getTotalAllocation(poolId)) /\\n                initialBalance;\\n        }\\n        // Increase allocation points\\n        singlePools.increaseAllocation(poolId, amount, user, withdrawDelay);\\n        // Notify watchers\\n        emit DepositedSinglePool(\\n            user,\\n            poolId,\\n            deposited,\\n            block.chainid,\\n            amount,\\n            address(token)\\n        );\\n        // Notify rewarder\\n        rewarder.setUserDeposit(user, poolId, amount, token);\\n    }\\n\\n    /**\\n     * @notice Deposit to the multi-pool.\\n     * @param dmp Deposit params (user, poolId, depositToken, amount, data).\\n     */\\n    function _depositMultiPool(\\n        DepositMultiPool memory dmp\\n    )\\n        internal\\n        enabled(dmp.user)\\n        checkDepositAmount(dmp.depositToken, dmp.amount)\\n    {\\n        // Sholdn't be a crosschain deposit\\n        if (multiPools.isCrosschain(dmp.poolId)) revert CrosschainError();\\n        // Is pool ready?\\n        multiPools.checkPoolShares(dmp.poolId);\\n        // Initial denominator\\n        // IMultiPoolsStore.Strategy[] memory strategies = multiPools\\n        //     .getStrategies(dmp.poolId);\\n        // Deposit shares\\n        uint256 strategyShare;\\n        // To reduce token spending approvals we transfer deposit token here first\\n        dmp.depositToken.safeTransferFrom(dmp.user, address(this), dmp.amount);\\n        uint256 totalStrategies = multiPools.countStrategies(dmp.poolId);\\n        // Deposit into strategies\\n        for (uint256 i = 0; i < totalStrategies; i++) {\\n            address addr = multiPools.getStrategyAddress(dmp.poolId, i);\\n            uint256 poolShare = multiPools.getStrategyShare(dmp.poolId, i);\\n            // Transfer tokens into the strategy\\n            dmp.depositToken.safeTransfer(\\n                addr,\\n                (dmp.amount * poolShare) / 10000\\n            );\\n            // Proceed deposit\\n            uint256 deposited = IBaseStrategy(addr).deposit(\\n                dmp.poolId,\\n                dmp.depositToken,\\n                dmp.minAmounts[i],\\n                dmp.slippage,\\n                dmp.data\\n            );\\n            // Balance of LP before deposit\\n            uint256 initialBalance = multiPools.getBalance(dmp.poolId, i) -\\n                deposited;\\n            // Calc shares\\n            if (initialBalance != 0) {\\n                strategyShare +=\\n                    ((((deposited * 1e18) / initialBalance)) *\\n                        poolShare *\\n                        1e14) /\\n                    1e18;\\n            }\\n        }\\n        // Notify watchers here to reduce variables amount and prevent stack too deep error on coverage\\n        emit DepositedMultiPool(\\n            dmp.user,\\n            dmp.poolId,\\n            block.chainid,\\n            dmp.amount,\\n            address(dmp.depositToken)\\n        );\\n        // Calc allocation points and normalize after strategy migration\\n        if (multiPools.getTotalAllocation(dmp.poolId) != 0) {\\n            dmp.amount =\\n                (multiPools.getTotalAllocation(dmp.poolId) * strategyShare) /\\n                1e18;\\n        }\\n        // Store allocation points\\n        multiPools.increaseAllocation(\\n            dmp.poolId,\\n            dmp.amount,\\n            dmp.user,\\n            withdrawDelay\\n        );\\n        // Notify rewarder\\n        rewarder.setUserDeposit(dmp.user, dmp.poolId, dmp.amount, dmp.depositToken);\\n    }\\n\\n    function _withdrawFromMulti(\\n        uint16 poolId,\\n        IERC20 tokenOut,\\n        uint256 shares,\\n        uint256[] calldata minAmounts,\\n        uint16 slippage,\\n        bytes memory data\\n    ) internal returns (uint256 totalAmount, uint256 totalFees) {\\n        if (minAmounts.length != multiPools.countStrategies(poolId))\\n            revert BadArray();\\n        for (uint256 i = 0; i < multiPools.countStrategies(poolId); i++) {\\n            // Get strategy\\n            IBaseStrategy strategy = IBaseStrategy(\\n                multiPools.getStrategyAddress(poolId, i)\\n            );\\n            // Withdraw from strategy\\n            uint256 amount = strategy.withdraw(\\n                poolId,\\n                _calcShare(poolId, shares, strategy),\\n                tokenOut,\\n                minAmounts[i],\\n                slippage,\\n                data\\n            );\\n            uint256 fees = (amount * multiPools.getWithdrawalFees(poolId, i)) /\\n                10000;\\n            totalFees += fees;\\n            totalAmount += amount - fees;\\n        }\\n        multiPools.decreaseAllocation(poolId, shares, _msgSender());\\n    }\\n\\n    function _calcShare(\\n        uint16 poolId,\\n        uint256 shares,\\n        IBaseStrategy strategy\\n    ) internal view returns (uint256) {\\n        return\\n            (((shares * 1e18) / multiPools.getTotalAllocation(poolId)) *\\n                strategy.allocationOf(poolId)) / 1e18;\\n    }\\n\\n    function _getFeesAndWithdraw(\\n        uint16 poolId,\\n        uint256 amount,\\n        address user,\\n        uint256 shares\\n    ) internal returns (uint256 withdrawFee) {\\n        withdrawFee = (amount * singlePools.getWithdrawalFees(poolId)) / 10000;\\n        // Reduce allocation points\\n        singlePools.decreaseAllocation(poolId, shares, user);\\n        // Transfer fees to the treasure\\n        if (withdrawFee != 0) _baseToken.safeTransfer(treasury, withdrawFee);\\n    }\\n\\n    function _finalizeWithdrawal(\\n        FinalizeWithdrawal calldata fw\\n    )\\n        internal\\n        onlyRole(FINALIZER_ROLE)\\n        zeroVal(fw.shares)\\n        zeroAddr(address(fw.tokenOut))\\n        enabled(fw.user)\\n        returns (uint256 amount)\\n    {\\n        // Get strategy\\n        IBaseStrategy strategy = IBaseStrategy(\\n            singlePools.getStrategyAddress(fw.poolId)\\n        );\\n        // Withdraw from strategy\\n        amount = strategy.withdraw(\\n            fw.poolId,\\n            (fw.shares * strategy.allocationOf(fw.poolId)) /\\n                singlePools.getTotalAllocation(fw.poolId), // Convert to the strategy shares\\n            fw.tokenOut,\\n            fw.minAmount,\\n            fw.slippage,\\n            fw.data\\n        );\\n        // Calc withdrawal fee\\n        amount -= _getFeesAndWithdraw(\\n            fw.poolId,\\n            amount,\\n            fw.user,\\n            fw.shares\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/rewarder/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n    /// @dev Caller unauthorized.\\n    error Unauthorized();\\n\\n    /// @dev Amount is zero.\\n    error ZeroAmount();\\n\\n    /// @dev Address is zero.\\n    error ZeroAddress();\\n\\n    /// @dev Wrong amount.\\n    error BadAmount();\\n\\n    /// @dev Emit when a reward epoch is set for a pool\\n    event EpochSet(uint16 poolId);\\n\\n    function setUserDeposit(\\n        address user,\\n        uint16 poolId,\\n        uint256 amount,\\n        IERC20 depositToken\\n    ) external;\\n\\n    function setUserWithdraw(\\n        address user,\\n        uint16 poolId,\\n        uint256 amount,\\n        IERC20 withdrawToken\\n    ) external;\\n\\n    function hasActiveRewards(\\n        uint16 poolId\\n    ) external view returns (bool hasRewards);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/IBaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBaseStrategy {\\n    /// @dev Universal instalation params.\\n    struct InstallParams {\\n        address controller;\\n        address router;\\n        address treasury;\\n        uint16 protocolFee;\\n        uint16 slippage;\\n    }\\n\\n    /// @dev Emitted when reards get autocompounded.\\n    event Compounded(uint256 rewardAmount, uint256 fee);\\n\\n    /// @dev Caller unauthorized.\\n    error Unauthorized();\\n\\n    /// @dev Unexpected token address.\\n    error BadToken();\\n\\n    /// @dev Strategy disabled.\\n    error NotActive();\\n\\n    /// @dev Amount is zero.\\n    error ZeroAmount();\\n\\n    /// @dev Address is zero.\\n    error ZeroAddress();\\n\\n    /// @dev Protocol paused.\\n    error OnPause();\\n\\n    /// @dev Slippage too big.\\n    error SlippageProtection();\\n\\n    /// @dev Slippage percentage too big.\\n    error SlippageTooHigh();\\n\\n    /// @dev Wrong amount.\\n    error BadAmount();\\n\\n    /// @dev Strategy disabled.\\n    error StrategyDisabled();\\n\\n    /// @dev Different size of arrays.\\n    error ArrayDifferentLength();\\n\\n    /// @dev No rewards to claim.\\n    error NoRewardsAvailable();\\n\\n    /// @dev Reentrancy detected.\\n    error Reentrancy();\\n\\n    function balance() external view returns (uint256);\\n\\n    function claimable()\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function deposit(\\n        uint16 poolId,\\n        IERC20 depositToken,\\n        uint256 minAmount,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint16 poolId,\\n        uint256 shares,\\n        IERC20 tokenOut,\\n        uint256 minAmount,\\n        uint16 slippage,\\n        bytes memory data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Move liquidity to another strategy.\\n     * @param pool Pool ID.\\n     * @param _slippage Slippage tolerance.\\n     * @param data Additional params.\\n     * @return amountOut Withdraw token amount.\\n     */\\n    function migrate(\\n        uint16 pool,\\n        uint16 _slippage,\\n        uint256 minAmount,\\n        bytes memory data\\n    ) external returns (uint256 amountOut);\\n\\n    function autocompound(uint256, bytes memory) external;\\n\\n    function shareToAmount(\\n        uint256 shares,\\n        bytes calldata data\\n    ) external view returns (uint256 amountOut);\\n\\n    function allocationOf(uint16 poolId) external view returns (uint256);\\n\\n    function totalAllocation() external view returns (uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"__baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finalizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract ISinglePoolsStore\",\"name\":\"_singlePools\",\"type\":\"address\"},{\"internalType\":\"contract IMultiPoolsStore\",\"name\":\"_multiPools\",\"type\":\"address\"},{\"internalType\":\"contract IBanList\",\"name\":\"_banList\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Banned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrosschainError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrosschainPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrosschainUnpaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBanned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Outdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewarderUndefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoreAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoreUndefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBlockchain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBridgeFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositedToken\",\"type\":\"address\"}],\"name\":\"BaseBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"CrosschainStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"}],\"name\":\"CrosschainWithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"DepositTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DepositedMultiPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DepositedSinglePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"FinalizedCrosschainMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"FinalizerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"RewarderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"chainId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"TransporterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"ValidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previous\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"current\",\"type\":\"uint16\"}],\"name\":\"WithdrawDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINALIZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banList\",\"outputs\":[{\"internalType\":\"contract IBanList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ILeechRouter.XChain\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"bridgedToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMultiPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"crosschainDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crosschainPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ILeechRouter.XChain\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"crosschainWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositMultiPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"targetChainId\",\"type\":\"uint96\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ILeechRouter.FinalizeWithdrawal\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"finalizeCrosschainWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"finalizeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"finalizeMultiPoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"targetChainId\",\"type\":\"uint96\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ILeechRouter.FinalizeWithdrawal\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"finalizeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiPools\",\"outputs\":[{\"internalType\":\"contract IMultiPoolsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCrosschainPaused\",\"type\":\"bool\"}],\"name\":\"setCrosschainPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFinalizer\",\"type\":\"address\"}],\"name\":\"setFinalizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"chainId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTransporter\",\"type\":\"address\"}],\"name\":\"setTransporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newDelay\",\"type\":\"uint16\"}],\"name\":\"setWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"shareToAmountMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"shareToAmountSP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singlePools\",\"outputs\":[{\"internalType\":\"contract ISinglePoolsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transporter\",\"outputs\":[{\"internalType\":\"contract ILeechTransporter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelay\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawMultiPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LeechRouter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000aef897aa692840fe94eb4721df9842fcdf888993000000000000000000000000aef897aa692840fe94eb4721df9842fcdf888993000000000000000000000000aef897aa692840fe94eb4721df9842fcdf888993000000000000000000000000aef897aa692840fe94eb4721df9842fcdf8889930000000000000000000000000559c05f0791bc8794fe354769cee47a29e723f0000000000000000000000000fdae4668ee086a39c32b4adb5c016abbb42ffc8c000000000000000000000000ed4a99356f221de003761fd8c82976ce0335d788", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}