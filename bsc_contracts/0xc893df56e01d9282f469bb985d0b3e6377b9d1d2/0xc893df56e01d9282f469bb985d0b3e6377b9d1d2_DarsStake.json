{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/root/bscDarsContracts/contracts/DarsStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\nhttps://dars.one/\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"./lib/IBEP20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/TransferHelper.sol\\\";\\nimport './lib/IPancakePair.sol';\\n\\npragma experimental ABIEncoderV2;\\n\\ncontract DarsStake {\\n    using SafeMath for uint256;\\n    using TransferHelper for IBEP20;\\n\\n    IBEP20 immutable public rewardToken;\\n    IBEP20 immutable public lpDarsToken;\\n    IPancakePair immutable public pancakePair;\\n    \\n\\n    struct UserInfo {\\n        uint256 depositTimestamp;\\n        uint256 sharesAmount;\\n        uint256 initialDepositAmount;\\n        uint256 dividendsAmount;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 currentRewardPerShare;\\n        uint256 sharesTotal;\\n        uint256 usersInStake;\\n        uint256 freezingPeriod;\\n        uint256 totalDividends;\\n    }\\n\\n    PoolInfo public poolInfo;\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    \\n\\n    event Stake(address user, uint256 amount);\\n    event PoolCharged(uint256 amount);\\n    event UnStake(address user, uint256 amount);\\n    event Dividends(address user, uint256 amount);\\n\\n    constructor(\\n        address _lpDarsToken,\\n        address _rewardToken,\\n        uint256 _freezingPeriod\\n    ) {\\n        pancakePair=IPancakePair(_lpDarsToken);\\n        lpDarsToken = IBEP20(_lpDarsToken);\\n        rewardToken=IBEP20(_rewardToken);\\n        poolInfo=PoolInfo({\\n            currentRewardPerShare:0,\\n            sharesTotal:0,\\n            usersInStake:0,\\n            freezingPeriod:_freezingPeriod,\\n            totalDividends:0\\n        });  \\n    }\\n\\n    function getDarsRate() public view returns (uint256) {\\n        \\n        (uint112 reserves0, uint112 reserves1,) = pancakePair.getReserves();\\n        (uint112 reserveIn, uint112 reserveOut) = pancakePair.token0() == address(rewardToken) ? (reserves0, reserves1) : (reserves1, reserves0);\\n        \\n        if (reserveIn > 0 && reserveOut > 0 && 1e18 < reserveOut){\\n            uint256 numerator = uint256(1e18).mul(10000).mul(reserveIn);\\n            uint256 denominator = uint256(reserveOut).sub(1e18).mul(9975);\\n            return numerator.div(denominator).add(1);\\n        }else{\\n            return 0;\\n        }\\n\\n    }\\n\\n    function chargePool(uint256 value) external {\\n\\n        rewardToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            value\\n        );\\n\\n        if (poolInfo.usersInStake > 0) {\\n            poolInfo.currentRewardPerShare=poolInfo.currentRewardPerShare.add(value.mul(1e12).div(poolInfo.sharesTotal));\\n            emit PoolCharged(value);\\n        }\\n    }\\n\\n    function dividendsTransfer(address _to, uint256 _amount) internal {\\n        uint256 max=rewardToken.balanceOf(address(this));\\n        if (_amount > max) {\\n            _amount=max;\\n        }\\n\\n        usersInfo[_to].initialDepositAmount = usersInfo[_to].sharesAmount\\n        .mul(poolInfo.currentRewardPerShare)\\n        .div(1e12);\\n\\n        usersInfo[_to].dividendsAmount=usersInfo[_to].dividendsAmount.add(_amount);\\n        poolInfo.totalDividends=poolInfo.totalDividends.add(_amount);\\n\\n        rewardToken.safeTransfer(_to, _amount);\\n        emit Dividends(_to, _amount);\\n    }\\n\\n    function stake(uint256 _amount) external {\\n\\n        require(_amount > 0, \\\"amount must be greater than 0\\\");\\n        \\n        require(\\n            lpDarsToken.allowance(address(msg.sender), address(this)) >=\\n                _amount,\\n            \\\"Increase the allowance first,call the approve method\\\"\\n        );\\n\\n        UserInfo storage user = usersInfo[msg.sender];\\n\\n        if (user.sharesAmount > 0) {\\n            uint256 dividends = calculateDividends(msg.sender);\\n            if (dividends > 0) {\\n                dividendsTransfer(msg.sender, dividends);\\n            }\\n        }else{\\n            poolInfo.usersInStake++;\\n        }\\n        \\n        lpDarsToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        user.depositTimestamp = block.timestamp;\\n        user.sharesAmount = user.sharesAmount.add(_amount);\\n        user.initialDepositAmount = user.sharesAmount.mul(poolInfo.currentRewardPerShare).div(1e12);\\n        poolInfo.sharesTotal = poolInfo.sharesTotal.add(_amount);\\n        emit Stake(msg.sender, _amount);\\n\\n        if (poolInfo.usersInStake == 1 && user.sharesAmount== _amount ) {\\n            uint256 balance=rewardToken.balanceOf(address(this));\\n            if(balance>0){\\n                poolInfo.currentRewardPerShare = poolInfo.currentRewardPerShare.add(balance.mul(1e12).div(poolInfo.sharesTotal));\\n                emit PoolCharged(balance);\\n            }                 \\n        } \\n      \\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() external {\\n\\n        UserInfo storage user = usersInfo[msg.sender];\\n        uint256 unstaked_shares = user.sharesAmount;\\n        require(\\n            unstaked_shares > 0,\\n            \\\"you do not have staked tokens, stake first\\\"\\n        );\\n        require(isTokensFrozen(msg.sender) == false, \\\"tokens are frozen\\\");\\n        user.sharesAmount = 0;\\n        user.initialDepositAmount = 0;\\n        poolInfo.sharesTotal = poolInfo.sharesTotal.sub(unstaked_shares);\\n        poolInfo.usersInStake--; \\n        lpDarsToken.safeTransfer(msg.sender, unstaked_shares);\\n        emit UnStake(msg.sender, unstaked_shares);\\n    }\\n\\n    function unstake(uint256 _amount) external {\\n        UserInfo storage user = usersInfo[msg.sender];\\n\\n        require(\\n            _amount > 0 && _amount<=user.sharesAmount,\\\"bad _amount\\\"\\n        );\\n        require(isTokensFrozen(msg.sender) == false, \\\"tokens are frozen\\\");\\n\\n        uint256 dividends = calculateDividends(msg.sender);\\n        if (dividends > 0) {\\n            dividendsTransfer(msg.sender, dividends);\\n        }\\n        user.sharesAmount=user.sharesAmount.sub(_amount);\\n        user.initialDepositAmount = user.sharesAmount.mul(poolInfo.currentRewardPerShare).div(1e12);\\n        poolInfo.sharesTotal = poolInfo.sharesTotal.sub(_amount);\\n        if(user.sharesAmount==0){poolInfo.usersInStake--;}\\n        \\n        lpDarsToken.safeTransfer(msg.sender, _amount);\\n\\n        emit UnStake(msg.sender, _amount);\\n    }\\n\\n    function getDividends() external {\\n        require(\\n            usersInfo[msg.sender].sharesAmount > 0,\\n            \\\"you do not have staked tokens, stake first\\\"\\n        );\\n        uint256 dividends = calculateDividends(msg.sender);\\n        if (dividends > 0) {\\n            dividendsTransfer(msg.sender, dividends);\\n        }\\n    }\\n\\n    function calculateDividends(address userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return usersInfo[userAddress].sharesAmount\\n        .mul(poolInfo.currentRewardPerShare)\\n        .div(1e12)\\n        .sub(usersInfo[userAddress].initialDepositAmount);\\n    }\\n\\n    function isTokensFrozen(address userAddress) public view returns (bool) {\\n        return (poolInfo.freezingPeriod >(block.timestamp.sub(usersInfo[userAddress].depositTimestamp)));\\n    }\\n\\n    function getPool()\\n        external\\n        view\\n        returns (PoolInfo memory)\\n    {\\n        return poolInfo;\\n    }\\n\\n    function getUser(address userAddress)\\n        external\\n        view\\n        returns (UserInfo memory)\\n    {\\n        return usersInfo[userAddress];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/root/bscDarsContracts/contracts/lib/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.4 <0.8.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/root/bscDarsContracts/contracts/lib/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"/root/bscDarsContracts/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.4 <0.8.0;\\n\\n/**\\n * Copyright (c) 2016-2019 zOS Global Limited\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/bscDarsContracts/contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.4 <0.8.0;\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TransferHelper {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(token.transfer.selector, to, value)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(token.approve.selector,spender,newAllowance)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"INCREASE_ALLOWANCE_FAILED\\\"\\n        );     \\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpDarsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_freezingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"chargePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDarsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersInStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"}],\"internalType\":\"struct DarsStake.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendsAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DarsStake.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isTokensFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDarsToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersInStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DarsStake", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b5888e8ef180b143b74fb27ab86e4943f2f433a900000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000003f480", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}