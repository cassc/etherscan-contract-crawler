{"SourceCode": "{\"COWS_Game_721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport {IUserCowsBoy} from \\u0027./IUserCowsBoy.sol\\u0027;\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\nimport {SafeMath} from \\u0027./SafeMath.sol\\u0027;\\nimport {IERC721} from \\u0027./IERC721.sol\\u0027;\\nimport {IERC721Enumerable} from \\u0027./IERC721Enumerable.sol\\u0027;\\nimport {IERC721Metadata} from \\u0027./IERC721Metadata.sol\\u0027;\\nimport {IUserCowsBoy} from \\u0027./IUserCowsBoy.sol\\u0027;\\nimport {IVerifySignature} from \\u0027./IVerifySignature.sol\\u0027;\\nimport \\u0027./ReentrancyGuard.sol\\u0027;\\n\\n\\ncontract COWS_GAME_721 is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    address public operator;\\n    address public owner;\\n    bool public _paused = false;\\n\\n    address public POOL_GAME;\\n    address public POOL_RIM;\\n    address public COWS_TOKEN;\\n    address public RIM_TOKEN;   \\n    address public NSC_NFT_TOKEN;\\n    address public VERIFY_SIGNATURE;\\n    address public USER_COWSBOY;\\n\\n    uint256 public constant DECIMAL_18 = 10**18;\\n    uint256 public constant PERCENTS_DIVIDER = 1000000000;\\n\\n    struct UserInfo {\\n            uint256 cowsDeposit;\\n            uint256 rimDeposit;\\n            uint256 nscDeposit;\\n            uint256 lastUpdatedAt;\\n            uint256 cowsRewardClaimed;\\n            uint256 rimRewardClaimed;\\n            uint256 nscRewardClaimed;\\n            uint8 status;  // 0 : not active ; 1 active ; 2 is lock ; 2 is ban\\n    }\\n\\n    struct DepositedNFT {\\n        uint256[] depositedTokenIds;\\n        mapping(uint256 =\\u003e uint256) tokenIdToIndex; //index + 1\\n    }\\n    \\n    mapping(address =\\u003e UserInfo) public userInfo;\\n    //nft =\\u003e user =\\u003e DepositedNFT\\n    mapping(address =\\u003e mapping(address =\\u003e DepositedNFT)) nftUserInfo;\\n    //user =\\u003e sign =\\u003e status\\n    mapping(address =\\u003e mapping(bytes =\\u003e bool)) userSigned;\\n    //events\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event ChangeOperator(address indexed previousOperator, address indexed newOperator);\\n    event TokenDeposit(address token, address depositor, uint256 amount);\\n    event TokenWithdraw(\\n        address token,\\n        address withdrawer,\\n        uint256 amount,\\n        uint256 balance,\\n        uint256 spent,\\n        uint256 win\\n    );\\n\\n    event NFTDeposit(address nft, address depositor, bytes tokenIds);\\n    event NFTWithdraw(address nft, address withdrawer, bytes tokenIds);\\n    event NFTClaim(address nft, address withdrawer, bytes tokenIds);\\n\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\u0027INVALID owner\\u0027);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\u0027INVALID operator\\u0027);\\n        _;\\n    }\\n\\n    constructor(address _cows, address _rim,address _nsc, address _user, address _sign, address _poolRIM) public {\\n        owner  = tx.origin;\\n        operator = tx.origin;\\n        POOL_GAME = tx.origin;\\n        COWS_TOKEN = _cows;\\n        RIM_TOKEN = _rim;   \\n        NSC_NFT_TOKEN = _nsc;\\n        USER_COWSBOY = _user;\\n        VERIFY_SIGNATURE = _sign;\\n        POOL_RIM = _poolRIM;\\n    }\\n\\n    fallback() external {\\n\\n    }\\n\\n    receive() payable external { \\n\\n    }\\n\\n    function pause() public onlyOwner {\\n        _paused=true;\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _paused=false;\\n    }\\n\\n    \\n    modifier ifPaused(){\\n        require(_paused,\\\"\\\");\\n        _;\\n    }\\n\\n    modifier ifNotPaused(){\\n        require(!_paused,\\\"\\\");\\n        _;\\n    }  \\n\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal onlyOwner {\\n        require(newOwner != address(0), \\u0027Ownable: new owner is the zero address\\u0027);\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`operator`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOperator(address _operator) public onlyOwner {\\n        emit ChangeOperator(operator , _operator);\\n        operator = _operator;\\n    }\\n\\n    /**\\n    * @dev Withdraw Token to an address, revert if it fails.\\n    * @param recipient recipient of the transfer\\n    */\\n    function clearToken(address recipient, address token, uint256 amount ) public onlyOwner {\\n        require(IERC20(token).balanceOf(address(this)) \\u003e= amount , \\\"INVALID balance\\\");\\n        require(RIM_TOKEN != token  , \\\"Can not withdraw RIM\\\");\\n        IERC20(token).transfer(recipient, amount);\\n    }\\n\\n\\n    function withdrawRIMToPool(uint256 amount ) public onlyOwner {\\n        require(IERC20(RIM_TOKEN).balanceOf(address(this)) \\u003e= amount , \\\"INVALID balance\\\");\\n        IERC20(RIM_TOKEN).transfer(POOL_RIM, amount);\\n    }\\n\\n\\n    /**\\n    * @dev Withdraw  BNB to an address, revert if it fails.\\n    * @param recipient recipient of the transfer\\n    */\\n    function clearBNB(address payable recipient) public onlyOwner {\\n        _safeTransferBNB(recipient, address(this).balance);\\n    }\\n\\n    /**\\n    * @dev transfer BNB to an address, revert if it fails.\\n    * @param to recipient of the transfer\\n    * @param value the amount to send\\n    */\\n    function _safeTransferBNB(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\u0027BNB_TRANSFER_FAILED\\u0027);\\n    }\\n    /**\\n    * @dev Update sendFTLNFTList\\n    */\\n    function sendFTLNFTList( address _nft, address[] calldata recipients,uint256[] calldata idTokens) public onlyOwner {\\n        for (uint256 i = 0; i \\u003c recipients.length; i++) {\\n        IERC721(_nft).transferFrom(address(this),recipients[i], idTokens[i]);     \\n        }\\n    }\\n\\n    function sendNFT(\\n        address _account,\\n        address _receive,\\n        address _nft,\\n        uint256 _tokenId)\\n     public onlyOwner    \\n    {\\n        IERC721(_nft).transferFrom(\\n            _account,\\n            _receive,\\n            _tokenId\\n        );\\n        \\n    }\\n\\n    \\n    /**\\n    * @dev Update update_POOL_GAME\\n    */\\n    function updatePool(address _pool) public onlyOwner {\\n        POOL_GAME = _pool;\\n    }\\n\\n\\n    function getUserInfo (address account) public view returns(\\n            uint256 cowsDeposit,\\n            uint256 rimDeposit,\\n            uint256 lastUpdatedAt,\\n            uint256 cowsRewardClaimed,\\n            uint256 rimRewardClaimed\\n            ) {\\n\\n            UserInfo storage _user = userInfo[account];      \\n            return (\\n                _user.cowsDeposit,\\n                _user.rimDeposit,\\n                _user.lastUpdatedAt,\\n                _user.cowsRewardClaimed,\\n                _user.rimRewardClaimed);\\n    }\\n\\n    function getUserInfoNFT (address account) public view returns(\\n            uint256 nscDeposit,\\n            uint256 lastUpdatedAt,\\n            uint256 nscRewardClaimed \\n            ) {\\n\\n            UserInfo storage _user = userInfo[account];      \\n            return (\\n                _user.nscDeposit,\\n                _user.lastUpdatedAt,\\n                _user.nscRewardClaimed\\n                );\\n    }\\n    //public number token nft in the address \\n    function getBalanceMyNFTWallet (address account, address _nft) public view returns(uint256){\\n        uint256 balance = IERC721(_nft).balanceOf(account);\\n        return  balance;\\n    }\\n   \\n    //public token id of nft in the address by seed index\\n    function getTokenidMyNFTWalletByIndex (address account, address _nft, uint256 seedIndex) public view returns(uint256 ,uint256){\\n     \\n        uint256 tokenId;     \\n        if(IERC721(_nft).balanceOf(account) == 0) return (0,0); \\n         if(IERC721(_nft).balanceOf(account) \\u003c= seedIndex) return (0,0);\\n        tokenId = IERC721Enumerable(_nft).tokenOfOwnerByIndex(account,seedIndex);\\n        return (IERC721(_nft).balanceOf(account),tokenId); \\n    }\\n\\n    function depositCOWSToGame(uint256 amount) public ifNotPaused returns (bool)\\n    {\\n        require(IUserCowsBoy(USER_COWSBOY).isRegister(msg.sender) == true , \\\"Address not whitelist registed system\\\");\\n        uint256 allowance = IERC20(COWS_TOKEN).allowance(msg.sender, address(this));\\n        require(allowance \\u003e= amount, \\\"Check the token allowance\\\");\\n        uint256 balance = IERC20(COWS_TOKEN).balanceOf(msg.sender);\\n        require(balance \\u003e= amount, \\\"Sorry : not enough balance to buy \\\");\\n        _depositTokenToGame(msg.sender,COWS_TOKEN,amount);\\n        return true;\\n    }\\n\\n    function depositRIMToGame(uint256 amount) public ifNotPaused returns (bool)\\n    {\\n        require(IUserCowsBoy(USER_COWSBOY).isRegister(msg.sender) == true , \\\"Address not whitelist registed system\\\");\\n        uint256 allowance = IERC20(RIM_TOKEN).allowance(msg.sender, address(this));\\n        require(allowance \\u003e= amount, \\\"Check the token allowance\\\");\\n        uint256 balance = IERC20(RIM_TOKEN).balanceOf(msg.sender);\\n        require(balance \\u003e= amount, \\\"Sorry : not enough balance to buy \\\");\\n        _depositTokenToGame(msg.sender,RIM_TOKEN,amount);\\n        return true;\\n    }\\n\\n    function _depositTokenToGame(address depositor , address token, uint256 _amount) internal {\\n        require(token == COWS_TOKEN || token == RIM_TOKEN,\\\" Invalid token deposit\\\");\\n        IERC20(token).transferFrom(depositor, address(this), _amount);\\n        if(token == COWS_TOKEN){\\n            userInfo[depositor].cowsDeposit += _amount;\\n        }\\n        if(token == RIM_TOKEN){\\n            userInfo[depositor].rimDeposit += _amount;\\n        }\\n        userInfo[depositor].lastUpdatedAt = block.timestamp;\\n        emit TokenDeposit(token,depositor,_amount);\\n    }\\n\\n\\n    function isSignOperator(uint256 _amount, string memory _message, uint256 _expiredTime, bytes memory _signature) public view returns (bool) \\n    {\\n        return IVerifySignature(VERIFY_SIGNATURE).verify(operator, msg.sender, _amount, _message, _expiredTime, _signature);    \\n    }\\n        \\n    function withdrawCOWSTokens(\\n        uint256 _amount,\\n        uint256 _amountSpent, // Spent in game \\n        uint256 _amountWin, // Profit in game \\n        string memory _message,\\n        uint256 _expiredTime,\\n        bytes memory signature\\n    ) public ifNotPaused returns (bool) {\\n        require(userSigned[msg.sender][signature] == false, \\\"withdrawCOWSTokens: invalid signature\\\"); \\n        require(block.timestamp \\u003c _expiredTime, \\\"withdrawCOWSTokens: !expired\\\");\\n        require(\\n            IVerifySignature(VERIFY_SIGNATURE).verify(operator, msg.sender, _amount, _message, _expiredTime, signature) == true ,\\n            \\\"withdrawCOWSTokens: invalid operator\\\"\\n        );\\n        \\n        uint256 amount = _amount * DECIMAL_18;\\n        UserInfo storage _user = userInfo[msg.sender];\\n\\n        require(_user.cowsDeposit - _amountSpent + _amountWin \\u003e 0 , \\\"withdrawCOWSTokens: invalid balance \\\");\\n        require(_user.cowsDeposit - _amountSpent + _amountWin \\u003e= amount, \\\"withdrawCOWSTokens: invalid amount\\\");\\n        \\n        //return token \\n        IERC20(COWS_TOKEN).transfer(msg.sender, amount);\\n\\n       emit TokenWithdraw(\\n        COWS_TOKEN,\\n        msg.sender,\\n        amount,\\n        _user.cowsDeposit,\\n        _amountSpent,\\n        _amountWin);\\n        \\n        _user.cowsDeposit = _user.cowsDeposit - _amountSpent + _amountWin -  amount;\\n        _user.cowsRewardClaimed += amount;\\n        _user.lastUpdatedAt = block.timestamp;\\n        userSigned[msg.sender][signature] = true;\\n        return true;\\n    }\\n    \\n    function withdrawRIMTokens(\\n        uint256 _amount,\\n        uint256 _amountSpent, // Spent in game \\n        uint256 _amountWin, // Profit in game \\n        string memory _message,\\n        uint256 _expiredTime,\\n        bytes memory signature\\n    ) public ifNotPaused returns (bool) {\\n        require(userSigned[msg.sender][signature] == false, \\\"withdrawRIMTokens: invalid signature\\\"); \\n        require(block.timestamp \\u003c _expiredTime, \\\"withdrawRIMTokens: !expired\\\");\\n        require(\\n            IVerifySignature(VERIFY_SIGNATURE).verify(operator, msg.sender, _amount, _message, _expiredTime, signature) == true ,\\n            \\\"withdrawRIMTokens: invalid operator\\\"\\n        );\\n        \\n        uint256 amount = _amount * DECIMAL_18;\\n        UserInfo storage _user = userInfo[msg.sender];\\n\\n        require(_user.rimDeposit - _amountSpent + _amountWin \\u003e 0 , \\\"withdrawRIMTokens: invalid balance \\\");\\n        require(_user.rimDeposit - _amountSpent + _amountWin \\u003e= amount, \\\"withdrawRIMTokens: invalid amount\\\");\\n        \\n        //return token \\n        IERC20(RIM_TOKEN).transfer(msg.sender, amount);\\n\\n       emit TokenWithdraw(\\n        RIM_TOKEN,\\n        msg.sender,\\n        amount,\\n        _user.rimDeposit,\\n        _amountSpent,\\n        _amountWin);\\n        \\n        _user.rimDeposit = _user.rimDeposit - _amountSpent + _amountWin -  amount;\\n        _user.rimRewardClaimed += amount;\\n        _user.lastUpdatedAt = block.timestamp;\\n        userSigned[msg.sender][signature] = true;\\n        return true;\\n    }\\n\\n\\n    function depositNFTsToGame(address _nft, uint256 _tokenId)\\n        public ifNotPaused returns (bool)\\n    {\\n        require(_nft == NSC_NFT_TOKEN ,\\\"depositNFTsToGame: Invalid token deposit\\\");   \\n        DepositedNFT storage _userNFT = nftUserInfo[_nft][msg.sender];\\n        IERC721(_nft).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _tokenId\\n            );\\n        _userNFT.depositedTokenIds.push(_tokenId);\\n        _userNFT.tokenIdToIndex[_tokenId] = _userNFT.depositedTokenIds.length;\\n\\n        if(_nft == NSC_NFT_TOKEN){\\n            userInfo[msg.sender].nscDeposit += 1;\\n        }\\n        \\n        userInfo[msg.sender].lastUpdatedAt = block.timestamp;\\n        emit NFTDeposit(_nft, msg.sender, abi.encodePacked(_tokenId));\\n        return true;\\n    }\\n\\n    function withdrawNFTs(\\n        address _nft,\\n        uint256 _tokenId,\\n        string memory _message,\\n        uint256 _expiredTime,\\n        bytes memory signature\\n    ) public ifNotPaused returns (bool) {\\n        require(userSigned[msg.sender][signature] == false, \\\"withdrawNFTs: invalid signature\\\"); \\n        require(block.timestamp \\u003c _expiredTime, \\\"withdrawNFTs: !expired\\\");\\n\\n        require(\\n            IVerifySignature(VERIFY_SIGNATURE).verify(operator, msg.sender, _tokenId , _message, _expiredTime, signature) == true ,\\n            \\\"withdrawNFTs: invalid operator\\\"\\n        );\\n        \\n        DepositedNFT storage _user = nftUserInfo[_nft][msg.sender];\\n        require(_user.tokenIdToIndex[_tokenId] \\u003e 0, \\\"withdrawNFTs: invalid tokenId\\\");\\n        IERC721(_nft).transferFrom(\\n            address(this),\\n            msg.sender,\\n            _tokenId\\n        );\\n        //swap\\n        uint256 _index = _user.tokenIdToIndex[_tokenId] - 1;\\n        _user.depositedTokenIds[_index] = _user.depositedTokenIds[\\n            _user.depositedTokenIds.length - 1\\n        ];\\n        _user.tokenIdToIndex[_user.depositedTokenIds[_index]] = _index + 1;\\n        _user.depositedTokenIds.pop();\\n\\n        delete _user.tokenIdToIndex[_tokenId];\\n       \\n        if(_nft == NSC_NFT_TOKEN){\\n            userInfo[msg.sender].nscDeposit -= 1;\\n        }\\n \\n        userInfo[msg.sender].lastUpdatedAt = block.timestamp;\\n        emit NFTWithdraw(_nft, msg.sender, abi.encodePacked(_tokenId));\\n        userSigned[msg.sender][signature] = true;\\n        return true;\\n    }\\n\\n    function claimNFTRewards(\\n        address _nft,\\n        uint256 amount, // default 1\\n        string memory _message,\\n        uint256 _expiredTime,\\n        bytes memory signature\\n    ) public ifNotPaused returns (uint256) \\n    {\\n        require(userSigned[msg.sender][signature] == false, \\\"claimNFTRewards: invalid signature\\\"); \\n        require(block.timestamp \\u003c _expiredTime, \\\"claimNFTRewards: !expired\\\");\\n        require(_nft == NSC_NFT_TOKEN ,\\\"claimNFTRewards: Invalid token deposit\\\");   \\n        require(\\n            IVerifySignature(VERIFY_SIGNATURE).verify(operator, msg.sender, amount , _message, _expiredTime, signature) == true ,\\n            \\\"invalid operator\\\"\\n        );\\n        require(amount == 1, \\\"claimNFTRewards: amount 1 \\\");\\n        uint256 _tokenId;\\n        for (uint256 i = 0; i \\u003c amount; i++) {\\n            _tokenId = IERC721Enumerable(_nft).tokenOfOwnerByIndex(POOL_GAME,0);\\n            if(ownerOfNFT(_nft,_tokenId) != POOL_GAME)\\n            {\\n                revert(\\\"claimNFTRewards: Please try again !\\\");\\n            }\\n            IERC721(_nft).transferFrom(\\n                POOL_GAME,\\n                msg.sender,\\n                _tokenId\\n            );\\n        }\\n        emit NFTClaim(_nft, msg.sender, abi.encodePacked(_tokenId));\\n        userSigned[msg.sender][signature] = true;\\n        return _tokenId;\\n    }\\n\\n    function ownerOfNFT(address _nft,uint256 tokenId) public view returns (address){\\n        return IERC721(_nft).ownerOf(tokenId);\\n    }\\n\\n    function getDepositedNFTs(address _nft, address _user)\\n        external\\n        view\\n        returns (uint256[] memory depositeNFTs)\\n    {\\n        return nftUserInfo[_nft][_user].depositedTokenIds;\\n    }\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\nimport \\\"./IERC165.sol\\\"; \\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\nimport \\\"./IERC721.sol\\\";\\ninterface IERC721Enumerable is IERC721 /* is ERC721 */ {\\n    /// @notice Count NFTs tracked by this contract\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\n    ///  them has an assigned and queryable owner not equal to the zero address\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Enumerate valid NFTs\\n    /// @dev Throws if `_index` \\u003e= `totalSupply()`.\\n    /// @param _index A counter less than `totalSupply()`\\n    /// @return The token identifier for the `_index`th NFT,\\n    ///  (sort order not specified)\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n    /// @notice Enumerate NFTs assigned to an owner\\n    /// @dev Throws if `_index` \\u003e= `balanceOf(_owner)` or if\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\n    /// @param _owner An address where we are interested in NFTs owned by them\\n    /// @param _index A counter less than `balanceOf(_owner)`\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n    ///   (sort order not specified)\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\nimport \\\"./IERC721.sol\\\";\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"},\"IUserCowsBoy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the SellToken standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IUserCowsBoy {\\n  /**\\n   * @dev Returns the  info of user in existence.\\n   */\\n  function isRegister(address account) external view returns (bool);\\n  function getReff(address account) external view returns (address);\\n\\n}\"},\"IVerifySignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the SellToken standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IVerifySignature {\\n  \\n  function verify( address _signer, address _to, uint256 _amount, string memory _message, uint256 _expiredTime, bytes memory signature) \\n  external view returns (bool);\\n  \\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        \\n        _notEntered = true;\\n    }\\n\\n    \\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        \\n        _notEntered = true;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b \\u003c= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cows\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nsc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sign\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolRIM\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"ChangeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"NFTClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"NFTDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"NFTWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"win\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COWS_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NSC_NFT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_GAME\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_RIM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RIM_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_COWSBOY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFY_SIGNATURE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimNFTRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"clearBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clearToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCOWSToGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositNFTsToGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRIMToGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"getBalanceMyNFTWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositedNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositeNFTs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seedIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenidMyNFTWalletByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cowsDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rimDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cowsRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rimRewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfoNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nscDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nscRewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isSignOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"idTokens\",\"type\":\"uint256[]\"}],\"name\":\"sendFTLNFTList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receive\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sendNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cowsDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rimDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nscDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cowsRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rimRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nscRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWin\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawCOWSTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawNFTs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRIMToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWin\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawRIMTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "COWS_GAME_721", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000033b48893b8f119fb45f431b36f830a95848042010000000000000000000000009fe70801c3b26f466d7e7b884659e88c7492a126000000000000000000000000588fda2b7991347bca5ce20e07d1b8ab1d46b3db00000000000000000000000008fab69f022c5f686ea3ca0c58dd08d5ab32d96700000000000000000000000079c546888eca74e82c84db29eebe6dd816aae2a400000000000000000000000018ac4fba3501751bab5c93309850fafaf5433987", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1fd91c3da4a0261771a459c84d35054e3da5b34aef8ebf85e4144a9d14d09b3"}