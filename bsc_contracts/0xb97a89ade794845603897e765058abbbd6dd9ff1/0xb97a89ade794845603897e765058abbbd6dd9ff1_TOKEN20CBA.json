{"SourceCode": "//SPDX-License-Identifier: MiT\r\npragma solidity ^0.8.6;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity( address tokenA, address tokenB, uint amountADesired,uint amountBDesired, uint amountAMin,uint amountBMin, address to,uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(address token,uint amountTokenDesired, uint amountTokenMin,uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(address tokenA,address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(address token,uint liquidity, uint amountTokenMin,uint amountETHMin,address to,uint deadline) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin,  uint amountETHMin, address to,uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path,address to,uint deadline) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path,address to,uint deadline) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Cast(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(address indexed sender, uint amount0In,uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b;require(c >= a, \"SafeMath: addition overflow\");return c;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b <= a, errorMessage);uint256 c = a - b; return c;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}uint256 c = a * b;require(c / a == b, \"SafeMath: multiplication overflow\");return c;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return div(a, b, \"SafeMath: division by zero\");}\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b > 0, errorMessage);uint256 c = a / b;return c;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return mod(a, b, \"SafeMath: modulo by zero\");}\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage);return a % b;}\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {return msg.data;}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() { _transferOwnership(_msgSender());}\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    modifier onlyOwner() {require(owner() == _msgSender(), \"Ownable: caller is not the owner\");_;}\r\n    function renounceOwnership() public virtual onlyOwner {_transferOwnership(address(0));}\r\n    function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), \"Ownable: new owner is the zero address\");_transferOwnership(newOwner);}\r\n    function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner);}\r\n\r\n    //\u9ed1\u540d\u5355\r\n    mapping(address => bool) public isBlacked;\r\n    //\u767d\u540d\u5355\r\n    mapping(address => bool) public isWhitelist;\r\n\r\n    event EventWhitelist(address indexed addr, bool isBool);\r\n    function setWhitelist(address addr_, bool isBool_) public onlyOwner{\r\n        if(isWhitelist[addr_] != isBool_){\r\n            isWhitelist[addr_] = isBool_;\r\n            emit EventWhitelist(addr_, isBool_);\r\n        }\r\n    }\r\n\r\n    event EventIsWhitelists(address[] adds, bool isExclude);\r\n    function setWhiteListAdds(address[] calldata adds_, bool isExclude_) public onlyOwner{\r\n        require(adds_.length >0 , \"address list is zero\");\r\n        for(uint256 i = 0; i < adds_.length; i++) {\r\n            isWhitelist[adds_[i]] = isExclude_;\r\n        }\r\n        emit EventIsWhitelists(adds_, isExclude_);\r\n    }\r\n\r\n    event EventBlacked(address indexed addr, bool isBool);\r\n    function setBlacked(address addr_, bool isBool_) public onlyOwner{\r\n        _setBlacked(addr_, isBool_);\r\n    }\r\n\r\n    function _setBlacked(address addr_, bool isBool_) internal {\r\n        if(isBlacked[addr_] != isBool_){\r\n            isBlacked[addr_] = isBool_;\r\n            emit EventBlacked(addr_, isBool_);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n    string internal _name;\r\n    string internal _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) { return _name;}\r\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\r\n    function decimals() public view virtual override returns (uint8) {return 18;}\r\n    function totalSupply() public view virtual override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view virtual override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount);return true; }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {_approve(_msgSender(), spender, amount);return true;}\r\n    function transferFrom(address sender, address recipient,uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _cast(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: cast to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner,address spender,uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\ninterface CBB {\r\n    function getUserInvite(address to_) external view returns(address[] memory);\r\n}\r\n\r\ncontract ReceiveUsdt is Ownable {\r\n    IERC20 public usdt;\r\n    constructor(address usdt_) {\r\n        usdt = IERC20(usdt_);\r\n    }\r\n\r\n    function transferBack(uint256 amount) public onlyOwner{\r\n        usdt.transfer(owner(), amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TOKEN20CBA is Ownable, ERC20 {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    CBB public cbb;\r\n\r\n    \r\n    mapping(address => bool) public isUniswapPair;\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    uint256[2] private buyFee = [10000,2000];\r\n    \r\n    uint256[4] private sellFee = [2500,5000,2000,2500];\r\n    \r\n    uint256[10] private invitFee = [3000,2000,1000,1000,500,500,500,500,500,500];\r\n    \r\n    uint256 public lpTotal;\r\n    \r\n    uint256 public nftTotal;\r\n    \r\n    uint256 public mintScale = 2000;\r\n    \r\n    uint256 private feeDenominator = 100000;\r\n    \r\n    uint256 public nowFee = 12;\r\n    \r\n    uint256 public _rewardCount;\r\n    \r\n    uint256 public _balanceCount;\r\n    \r\n    uint256 private validBalance = 50 * (10 ** 18);\r\n    \r\n    mapping(address => bool) private isValid;\r\n\r\n\r\n    \r\n    address public assignAddr = 0x8eDDFAFff9dC5680eA53fA3061C70AAfA6779A20;\r\n    \r\n    address public deadAddr = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    address public nftAddr = 0xAf185B3e49e50459185cDfEBb592658aAfb1ed1b;\r\n    \r\n    address public pubAddr = 0xb3B10F259493db545424CA578c75dC2A668dd8C7;\r\n    \r\n    address public growAddr = 0xAe0D9973DD6DA3361d625a5f6FF083BF864F8633;\r\n\r\n\r\n    \r\n    \r\n\r\n    //usdt 0x55d398326f99059fF775485246999027B3197955\r\n    //dex 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    IERC20 private usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    address private dex = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    ReceiveUsdt public receiveUsdt;\r\n\r\n    uint256 private totalSupply_ = 110660000 * (10 ** 18);\r\n\r\n    uint256 private constant MAX_SUPPLY = ~uint256(0)/1e18;\r\n    uint256 public constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private TOTAL_GONS;\r\n    uint256 public pairBalance;\r\n\r\n    \r\n    uint256 public _lastRebasedTime;\r\n    uint256 public _gonsPerFragment;\r\n    uint256 public _lastEveryDayTime;\r\n    uint256 public _lastNowAllotTotal;\r\n\r\n    uint256 private _blackAddrTime;\r\n\r\n    \r\n    \r\n    constructor(address cbb_) ERC20(\"Treasure Coin\",\"TPC\"){ \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(dex);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), address(usdt));\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        isUniswapPair[uniswapV2Pair] = true;\r\n        receiveUsdt = new ReceiveUsdt(address(usdt));\r\n\r\n        cbb = CBB(cbb_);\r\n\r\n        setWhitelist(deadAddr, true);\r\n        setWhitelist(nftAddr, true);\r\n        setWhitelist(pubAddr, true);\r\n        setWhitelist(growAddr, true);\r\n        setWhitelist(address(this), true);\r\n        setWhitelist(owner(), true);\r\n        \r\n\r\n        \r\n        \r\n        _totalSupply = totalSupply_;\r\n        TOTAL_GONS = MAX_UINT256/1e18 - (MAX_UINT256/1e18 % _totalSupply);\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        _balances[msg.sender] = TOTAL_GONS;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBlacked[from] && !isBlacked[to], \"address is blacklited\");\r\n        if(amount == 0) {super._transfer(from, to, 0);return;}\r\n\r\n        if(_balanceCount >= 80000 && _balanceCount < 150000){\r\n            if(nowFee >=12)setFee(true);\r\n        }else if(_balanceCount >= 150000 && _balanceCount < 250000){\r\n            if(nowFee >=6)setFee(true);\r\n        }else if(_balanceCount >= 250000){\r\n            if(nowFee >=3)setFee(false);\r\n        }\r\n\r\n        \r\n        \r\n        \r\n\r\n        if(IUniswapV2Pair(uniswapV2Pair).totalSupply() <= 0 && to == uniswapV2Pair){_blackAddrTime = block.timestamp;}\r\n\r\n        if(inSwapAndLiquify){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n        bool canSwap = balanceOf(address(this)) >= lpTotal;\r\n        if( canSwap\r\n            && !inSwapAndLiquify\r\n            && !isUniswapPair[from]\r\n            && from != owner()\r\n            && to != owner()\r\n        ){\r\n            if(lpTotal>0)swapAndLiquify(lpTotal);\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (to==uniswapV2Pair && isWhitelist[from]==false && isWhitelist[to]==false){\r\n            if (gonAmount >= _balances[from].div(10**18).mul(uint(10 ** 18).sub(1))  ){\r\n                gonAmount = _balances[from].div(10**18).mul(uint(10 ** 18).sub(1));\r\n            }\r\n        }\r\n\r\n        if (from == uniswapV2Pair){\r\n            pairBalance = pairBalance.sub(amount);\r\n        }else{\r\n            _balances[from] = _balances[from].sub(gonAmount);\r\n            _checkValidSub(from);\r\n        }\r\n\r\n        uint256 gonAmountReceived = (!isWhitelist[from] && !isWhitelist[to]) ? takeFeeFunc(from, to, gonAmount) : gonAmount;\r\n\r\n        if (to == uniswapV2Pair){\r\n            pairBalance = pairBalance.add(gonAmountReceived.div(_gonsPerFragment));\r\n        }else{\r\n            _balances[to] = _balances[to].add(gonAmountReceived);\r\n            _checkValidAdd(to);\r\n        }\r\n        emit Transfer(from, to, gonAmountReceived.div(_gonsPerFragment));\r\n    }\r\n    \r\n    function _basicTransfer(address from_, address to_, uint256 amount_) internal {\r\n        uint256 gonAmount = amount_.mul(_gonsPerFragment);\r\n        if (from_ == uniswapV2Pair){\r\n            pairBalance = pairBalance.sub(amount_);\r\n        }else{\r\n            _balances[from_] = _balances[from_].sub(gonAmount);\r\n            _checkValidSub(from_);\r\n        }\r\n        if (to_ == uniswapV2Pair){\r\n            pairBalance = pairBalance.add(amount_);\r\n        }else{\r\n            _balances[to_] = _balances[to_].add(gonAmount);\r\n            _checkValidAdd(to_);\r\n        }\r\n    }\r\n\r\n    function _checkValidSub(address user) private {\r\n        if(balanceOf(user) < validBalance && isValid[user]){\r\n            if(_balanceCount > 0){\r\n                isValid[user] = false;\r\n                _balanceCount--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkValidAdd(address user) private {\r\n        if(balanceOf(user) >= validBalance && !isValid[user]){\r\n            isValid[user] = true;\r\n            _balanceCount++;\r\n\r\n        }\r\n    }\r\n\r\n    function transferAdd(address from, address to, uint amount) private {\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount.div(_gonsPerFragment));\r\n    }\r\n\r\n    event EventTeamReward(address from, address to, uint256 a, uint256 b, uint256 fee);\r\n    function takeFeeFunc(address from_, address to_, uint256 gonAmount) internal returns (uint256) {\r\n        uint256 _gonAmount = gonAmount;\r\n        uint256 allFees;\r\n        uint256 aFee;\r\n        uint256 bFee;\r\n        uint256 cFee;\r\n        uint256 dFee;\r\n        if(nowFee <= 0){return gonAmount;}\r\n        if(isUniswapPair[from_]){\r\n            if(block.timestamp <= _blackAddrTime.add(3 minutes))_setBlacked(to_,true);\r\n            aFee = _calcFees(gonAmount,buyFee[0]);\r\n            if(aFee>0)_sendeReward(from_, to_, gonAmount, aFee);\r\n            bFee = _calcFees(gonAmount,buyFee[1]);\r\n            if(bFee>0){\r\n                transferAdd(from_,address(this),bFee);\r\n                lpTotal += bFee.div(_gonsPerFragment);\r\n            }\r\n            allFees = aFee.add(bFee);\r\n            if(allFees > 0)gonAmount = gonAmount.sub(allFees);\r\n            if(!isContract(to_)){\r\n                emit EventTeamReward(from_, to_, _gonAmount.div(_gonsPerFragment), gonAmount.div(_gonsPerFragment), nowFee);\r\n            }\r\n        }\r\n        if(isUniswapPair[to_]){\r\n            aFee = _calcFees(gonAmount,sellFee[0]);\r\n            bFee = _calcFees(gonAmount,sellFee[1]);\r\n            cFee = _calcFees(gonAmount,sellFee[2]);\r\n            dFee = _calcFees(gonAmount,sellFee[3]);\r\n            if(bFee >0 )nftTotal += bFee.div(_gonsPerFragment);\r\n            allFees = aFee.add(bFee).add(cFee).add(dFee);\r\n\r\n            if(aFee>0)transferAdd(from_,deadAddr,aFee);\r\n            if(bFee>0)transferAdd(from_,nftAddr,bFee);\r\n            if(cFee>0)transferAdd(from_,pubAddr,cFee);\r\n            if(dFee>0)transferAdd(from_,growAddr,dFee);\r\n            if(allFees > 0)gonAmount = gonAmount.sub(allFees);\r\n        }\r\n        return gonAmount;\r\n    }\r\n\r\n    function balanceOf(address account_) public view override returns (uint256) {\r\n        return account_ == uniswapV2Pair ? pairBalance : _balances[account_].div(_gonsPerFragment);\r\n    }\r\n\r\n    function _sendeReward(address from_, address to_, uint amount_, uint iFee) private {\r\n        address[] memory _parent = cbb.getUserInvite(to_);\r\n        uint256 _iFee = iFee;\r\n        uint a_;\r\n        for(uint8 i = 0; i < 10; i++){\r\n            address pI = _parent[i];\r\n            if(pI == address(0))break;\r\n            if(balanceOf(pI) < (1000 * 10 ** 18))continue;\r\n            a_ = _calcFees(amount_,invitFee[i]);\r\n            _iFee = _iFee.sub(a_);\r\n            if(a_>0){\r\n                _balances[pI] = _balances[pI].add(a_);\r\n                emit Transfer(from_, pI, a_.div(_gonsPerFragment));\r\n            }\r\n        }\r\n        if(_iFee>0){\r\n            _balances[assignAddr] = _balances[assignAddr].add(_iFee);\r\n            emit Transfer(from_, assignAddr, _iFee.div(_gonsPerFragment));\r\n        }\r\n    }\r\n    function setFee(bool bool_) private {\r\n        nowFee = bool_ ? nowFee.div(2) : 0;\r\n        mintScale = bool_ ? mintScale.div(2) : 0;\r\n        uint[2] memory buyFee_ = buyFee;\r\n        uint[4] memory sellFee_ = sellFee;\r\n        uint[10] memory invitFee_ = invitFee;\r\n        for(uint i = 0;i < 10;i++){\r\n            if(i < 2){\r\n                buyFee_[i] = bool_ ? buyFee_[i].div(2) : 0;\r\n            }\r\n            if(i < 4){\r\n                sellFee_[i] = bool_ ? sellFee_[i].div(2) : 0;\r\n            }\r\n            invitFee_[i] = bool_ ? invitFee_[i].div(2) : 0;\r\n        }\r\n        buyFee = buyFee_;\r\n        sellFee = sellFee_;\r\n        invitFee = invitFee_;\r\n    }\r\n\r\n    function _calcFees(uint256 amount, uint256 fee) private view returns(uint256){\r\n        if(amount <= 0){return 0;}\r\n        if(fee <= 0){return amount;}\r\n        return amount.div(feeDenominator).mul(fee);\r\n    }\r\n\r\n    function isContract(address account_) private view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account_) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    \r\n    function returnJSData() external view returns(uint, uint, uint, uint, uint, uint){\r\n        \r\n        uint price;\r\n         (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if (reserve0 == 0 || reserve1 == 0) {\r\n            price =  0;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(10 ** decimals(), path);\r\n        if(amounts[0] == 0){price = 0;}\r\n        if(amounts[1] == 0){price = 0;}else{price = amounts[1];}\r\n        return (\r\n            price,\r\n            _lastNowAllotTotal,\r\n            0,\r\n            balanceOf(deadAddr),\r\n            balanceOf(pubAddr),\r\n            balanceOf(growAddr)\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function manualRebase() external {\r\n        require(shouldRebase(),\"rebase not required\");\r\n        rebase();\r\n    }\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply, uint256 count);\r\n    function rebase() internal {\r\n        if ( inSwapAndLiquify ) return;\r\n        uint256 total;\r\n        uint256 _timestamp = block.timestamp;\r\n        \r\n        if(_timestamp >= _lastEveryDayTime.add(24 hours)){\r\n            uint a = totalSupply_.div(feeDenominator).mul(mintScale);\r\n            total = a;\r\n            _lastNowAllotTotal = a;\r\n            _lastEveryDayTime = _timestamp;\r\n            _rewardCount = 0;\r\n        }else{\r\n            if(_rewardCount >= 24)return;\r\n            total = _lastNowAllotTotal;\r\n        }\r\n        _rewardCount++;\r\n\r\n        uint256 rebaseRate = total.div(24);\r\n        \r\n        \r\n        \r\n            _totalSupply = _totalSupply.add(rebaseRate);\r\n       \r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        \r\n\r\n        emit LogRebase(_timestamp, _totalSupply, _rewardCount);\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return\r\n        // _autoRebase&& \r\n        (_totalSupply < MAX_SUPPLY)&& \r\n        !isUniswapPair[msg.sender]&& \r\n        !inSwapAndLiquify;\r\n        \r\n    }\r\n\r\n    \r\n    \r\n    \r\n   \r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    bool inSwapAndLiquify;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = usdt.balanceOf(address(receiveUsdt));\r\n        lpTotal = lpTotal.sub(contractTokenBalance);\r\n        swapTokensForToken(half);\r\n        uint256 newBalance = usdt.balanceOf(address(receiveUsdt)).sub(initialBalance);\r\n        receiveUsdt.transferBack(newBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(receiveUsdt),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        usdt.approve(address(uniswapV2Router), usdtAmount);\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            address(usdt),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cbb_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBool\",\"type\":\"bool\"}],\"name\":\"EventBlacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adds\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExclude\",\"type\":\"bool\"}],\"name\":\"EventIsWhitelists\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"EventTeamReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBool\",\"type\":\"bool\"}],\"name\":\"EventWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_balanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastEveryDayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastNowAllotTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assignAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbb\",\"outputs\":[{\"internalType\":\"contract CBB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveUsdt\",\"outputs\":[{\"internalType\":\"contract ReceiveUsdt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnJSData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBool_\",\"type\":\"bool\"}],\"name\":\"setBlacked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adds_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isExclude_\",\"type\":\"bool\"}],\"name\":\"setWhiteListAdds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBool_\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN20CBA", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000aed13403603dba4ba9a172861f78e9b8709f76f7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa716000cf5cd620cae4948ec8fd3369871afb01ba130de822b5eb9111e104fa"}