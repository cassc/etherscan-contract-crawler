{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\u0027Address: insufficient balance\\u0027\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\u0027\\u0027);\\r\\n        require(\\r\\n            success,\\r\\n            \\u0027Address: unable to send value, recipient may have reverted\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\u0027Address: low-level call failed\\u0027);\\r\\n    }\\r\\n\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\u0027Address: low-level call with value failed\\u0027\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\u0027Address: insufficient balance for call\\u0027\\r\\n        );\\r\\n        require(isContract(target), \\u0027Address: call to non-contract\\u0027);\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\u0027Address: call to non-contract\\u0027);\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\u0027Address: low-level static call failed\\u0027\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\u0027Address: static call to non-contract\\u0027);\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\u0027Address: low-level delegate call failed\\u0027\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\u0027Address: delegate call to non-contract\\u0027);\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToString(address _address)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes32 _bytes = bytes32(uint256(_address));\\r\\n        bytes memory HEX = \\u00270123456789abcdef\\u0027;\\r\\n        bytes memory _addr = new bytes(42);\\r\\n\\r\\n        _addr[0] = \\u00270\\u0027;\\r\\n        _addr[1] = \\u0027x\\u0027;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c 20; i++) {\\r\\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] \\u003e\\u003e 4)];\\r\\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] \\u0026 0x0f)];\\r\\n        }\\r\\n\\r\\n        return string(_addr);\\r\\n    }\\r\\n}\\r\\n\"},\"Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\n\\r\\nlibrary Counters {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Counter {\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        counter._value += 1;\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        counter._value = counter._value.sub(1);\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Counters.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\n\\r\\nabstract contract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // TODO comment actual hash value.\\r\\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID =\\r\\n        keccak256(\\u0027ERC20Token\\u0027);\\r\\n\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n\\r\\n    string internal _symbol;\\r\\n\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(\\r\\n                amount,\\r\\n                \\u0027ERC20: transfer amount exceeds allowance\\u0027\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\u0027ERC20: decreased allowance below zero\\u0027\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\u0027ERC20: transfer from the zero address\\u0027);\\r\\n        require(recipient != address(0), \\u0027ERC20: transfer to the zero address\\u0027);\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\u0027ERC20: transfer amount exceeds balance\\u0027\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account_, uint256 ammount_) internal virtual {\\r\\n        require(account_ != address(0), \\u0027ERC20: mint to the zero address\\u0027);\\r\\n        _beforeTokenTransfer(address(this), account_, ammount_);\\r\\n        _totalSupply = _totalSupply.add(ammount_);\\r\\n        _balances[account_] = _balances[account_].add(ammount_);\\r\\n        emit Transfer(address(this), account_, ammount_);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\u0027ERC20: burn from the zero address\\u0027);\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(\\r\\n            amount,\\r\\n            \\u0027ERC20: burn amount exceeds balance\\u0027\\r\\n        );\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\u0027ERC20: approve from the zero address\\u0027);\\r\\n        require(spender != address(0), \\u0027ERC20: approve to the zero address\\u0027);\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ninterface IERC2612Permit {\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n}\\r\\n\\r\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    mapping(address =\\u003e Counters.Counter) private _nonces;\\r\\n\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainID;\\r\\n        assembly {\\r\\n            chainID := chainid()\\r\\n        }\\r\\n\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\u0027EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\u0027\\r\\n                ),\\r\\n                keccak256(bytes(name())),\\r\\n                keccak256(bytes(\\u00271\\u0027)), // Version\\r\\n                chainID,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual override {\\r\\n        require(block.timestamp \\u003c= deadline, \\u0027Permit: expired deadline\\u0027);\\r\\n\\r\\n        bytes32 hashStruct = keccak256(\\r\\n            abi.encode(\\r\\n                PERMIT_TYPEHASH,\\r\\n                owner,\\r\\n                spender,\\r\\n                amount,\\r\\n                _nonces[owner].current(),\\r\\n                deadline\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 _hash = keccak256(\\r\\n            abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct)\\r\\n        );\\r\\n\\r\\n        address signer = ecrecover(_hash, v, r, s);\\r\\n        require(\\r\\n            signer != address(0) \\u0026\\u0026 signer == owner,\\r\\n            \\u0027ZeroSwapPermit: Invalid signature\\u0027\\r\\n        );\\r\\n\\r\\n        _nonces[owner].increment();\\r\\n        _approve(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function nonces(address owner) public view override returns (uint256) {\\r\\n        return _nonces[owner].current();\\r\\n    }\\r\\n}\\r\\n\"},\"Helena.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at BscScan.com on 2022-04-06\\r\\n*/\\r\\n\\r\\n/***\\r\\nHELENA FINANCIAL - 1,000,365% APY\\r\\nASSURE DEFI KYC + CERTIK AUDIT\\r\\nWebsite: https://helena.financial/\\r\\nDiscord: https://discord.gg/ht2N3vrdv9\\r\\nTelegram: https://t.me/helenafinancial\\r\\nTwitter: https://twitter.com/helenafinancial\\r\\nWhitepaper: https://helena-financial.gitbook.io/helena-financial-whitepaper/\\r\\n***/\\r\\n\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\r\\n\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a \\u003c 0 ? -a : a;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IPancakeSwapPair {\\r\\n\\t\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\t\\tfunction name() external pure returns (string memory);\\r\\n\\t\\tfunction symbol() external pure returns (string memory);\\r\\n\\t\\tfunction decimals() external pure returns (uint8);\\r\\n\\t\\tfunction totalSupply() external view returns (uint);\\r\\n\\t\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\t\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\t\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\t\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\t\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\t\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\t\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\t\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\t\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\t\\tevent Swap(\\r\\n\\t\\t\\t\\taddress indexed sender,\\r\\n\\t\\t\\t\\tuint amount0In,\\r\\n\\t\\t\\t\\tuint amount1In,\\r\\n\\t\\t\\t\\tuint amount0Out,\\r\\n\\t\\t\\t\\tuint amount1Out,\\r\\n\\t\\t\\t\\taddress indexed to\\r\\n\\t\\t);\\r\\n\\t\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\t\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\t\\tfunction factory() external view returns (address);\\r\\n\\t\\tfunction token0() external view returns (address);\\r\\n\\t\\tfunction token1() external view returns (address);\\r\\n\\t\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\t\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\t\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\t\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\t\\tfunction skim(address to) external;\\r\\n\\t\\tfunction sync() external;\\r\\n\\r\\n\\t\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeSwapRouter{\\r\\n\\t\\tfunction factory() external pure returns (address);\\r\\n\\t\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\t\\tfunction addLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint amountADesired,\\r\\n\\t\\t\\t\\tuint amountBDesired,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\t\\tfunction addLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint amountTokenDesired,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\t\\tfunction removeLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction swapExactTokensForTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactTokens(\\r\\n\\t\\t\\t\\tuint amountOut,\\r\\n\\t\\t\\t\\tuint amountInMax,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\t\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\t\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\t\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\t\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline,\\r\\n\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\r\\n\\t\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n\\t\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable;\\r\\n\\t\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeSwapFactory {\\r\\n\\t\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\t\\tfunction feeTo() external view returns (address);\\r\\n\\t\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\t\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\t\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\t\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\t\\tfunction setFeeTo(address) external;\\r\\n\\t\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipRenounced(address indexed previousOwner);\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipRenounced(_owner);\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Detailed is IERC20 {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DummyHelena is ERC20Detailed, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n\\r\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\r\\n\\r\\n    string public _name = \\\"Dummy Helena\\\";\\r\\n    string public _symbol = \\\"DUMHELENA\\\";\\r\\n    uint8 public _decimals = 5;\\r\\n\\r\\n    IPancakeSwapPair public pairContract;\\r\\n    mapping(address =\\u003e bool) _isFeeExempt;\\r\\n\\r\\n    modifier validRecipient(address to) {\\r\\n        require(to != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint256 public constant DECIMALS = 5;\\r\\n    uint256 public constant MAX_UINT256 = ~uint256(0);\\r\\n    uint8 public constant RATE_DECIMALS = 7;\\r\\n\\r\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY =\\r\\n        500 * 10**3 * 10**DECIMALS;\\r\\n\\r\\n    uint256 public liquidityFee = 40;\\r\\n    uint256 public hellenicFee = 40;\\r\\n    uint256 public vaultFee = 40;\\r\\n    uint256 public sellFee = 60;\\r\\n    uint256 public sControlFee = 10;\\r\\n    uint256 public totalFee =\\r\\n        liquidityFee.add(hellenicFee).add(vaultFee).add(\\r\\n            sControlFee\\r\\n        );\\r\\n    uint256 public feeDenominator = 1000;\\r\\n\\r\\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    address public autoLiquidityFund;\\r\\n    address public hellenicFund;\\r\\n    address public vault;\\r\\n    address public sControl;\\r\\n    address public pairAddress;\\r\\n    bool public swapEnabled = true;\\r\\n    IPancakeSwapRouter public router;\\r\\n    address public pair;\\r\\n    bool inSwap = false;\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    uint256 private constant TOTAL_GONS =\\r\\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\r\\n\\r\\n    uint256 private constant MAX_SUPPLY = uint(-1);\\r\\n\\r\\n    uint256 public INDEX;\\r\\n\\r\\n    bool public _autoRebase;\\r\\n    bool public _autoAddLiquidity;\\r\\n    uint256 public _initRebaseStartTime;\\r\\n    uint256 public _lastRebasedTime;\\r\\n    uint256 public _lastAddLiquidityTime;\\r\\n    uint256 public _totalSupply;\\r\\n    uint256 private _gonsPerFragment;\\r\\n\\r\\n    uint public ownerRebaseRate;\\r\\n    bool public isOwnerRebaseEnabled;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _gonBalances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowedFragments;\\r\\n    mapping(address =\\u003e bool) public blacklist;\\r\\n\\r\\n    constructor() ERC20Detailed(\\\"Dummy Helena\\\", \\\"DUMHELENA\\\", uint8(DECIMALS)) Ownable() {\\r\\n        router = IPancakeSwapRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\\r\\n        pair = IPancakeSwapFactory(router.factory()).createPair(\\r\\n            router.WETH(),\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        autoLiquidityFund = 0x80834196DB64F60F4ec7f6CFff9820E67deCFA55;\\r\\n        hellenicFund = 0x828AadFBA1A6126017553FB1f30fFcE589C1500D;\\r\\n        vault = 0xd48cA288e7a0AaFF0337aCC39e73076dE8EC678a;\\r\\n        sControl = 0x44e23bDDF0f2ABB6ba229cdE92b4011fcCf60cA3;\\r\\n\\r\\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\\r\\n        pairAddress = pair;\\r\\n        pairContract = IPancakeSwapPair(pair);\\r\\n\\r\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\r\\n        _gonBalances[hellenicFund] = TOTAL_GONS;\\r\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n        _initRebaseStartTime = block.timestamp;\\r\\n        _lastRebasedTime = block.timestamp;\\r\\n        _autoRebase = true;\\r\\n        _autoAddLiquidity = true;\\r\\n        _isFeeExempt[hellenicFund] = true;\\r\\n        _isFeeExempt[address(this)] = true;\\r\\n\\r\\n        INDEX = gonsForBalance(100000);\\r\\n\\r\\n        _transferOwnership(hellenicFund);\\r\\n        emit Transfer(address(0x0), hellenicFund, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function setRebaseRate(uint _rebaseRate) external onlyOwner {\\r\\n        ownerRebaseRate = _rebaseRate;\\r\\n    }\\r\\n\\r\\n    function toggleOwnerRebase() external onlyOwner {\\r\\n        isOwnerRebaseEnabled = !isOwnerRebaseEnabled;\\r\\n    }\\r\\n\\r\\n    function rebase() internal {\\r\\n        if ( inSwap ) return;\\r\\n        uint256 rebaseRate;\\r\\n        uint256 deltaTimeFromInit = block.timestamp - _initRebaseStartTime;\\r\\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\\r\\n        uint256 times = deltaTime.div(15 minutes);\\r\\n        uint256 epoch = times.mul(15);\\r\\n\\r\\n        if (deltaTimeFromInit \\u003e= (8 * 365 days)) {\\r\\n            rebaseRate = 8;\\r\\n        } else if (deltaTimeFromInit \\u003e= (5 * 365 days)) {\\r\\n            rebaseRate = 33;\\r\\n        } else if (deltaTimeFromInit \\u003e= (3 * 365 days)) {\\r\\n            rebaseRate = 62;\\r\\n        } else if (deltaTimeFromInit \\u003e= (2 * 365 days)) {\\r\\n            rebaseRate = 125;\\r\\n        } else if (deltaTimeFromInit \\u003e= (365 days)) {\\r\\n            rebaseRate = 224;\\r\\n        } else {\\r\\n            rebaseRate = 2000;\\r\\n        }\\r\\n\\r\\n        if (isOwnerRebaseEnabled) {\\r\\n            rebaseRate = ownerRebaseRate;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c times; i++) {\\r\\n            _totalSupply = _totalSupply\\r\\n                .mul((10**RATE_DECIMALS).add(rebaseRate))\\r\\n                .div(10**RATE_DECIMALS);\\r\\n        }\\r\\n\\r\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(15 minutes));\\r\\n\\r\\n        pairContract.sync();\\r\\n\\r\\n        emit LogRebase(epoch, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        validRecipient(to)\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transferFrom(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external override validRecipient(to) returns (bool) {\\r\\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\\r\\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\\r\\n                msg.sender\\r\\n            ].sub(value, \\\"Insufficient Allowance\\\");\\r\\n        }\\r\\n        _transferFrom(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\r\\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\\r\\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        require(!blacklist[sender] \\u0026\\u0026 !blacklist[recipient], \\\"in_blacklist\\\");\\r\\n\\r\\n        if (inSwap) {\\r\\n            return _basicTransfer(sender, recipient, amount);\\r\\n        }\\r\\n        if (shouldRebase()) {\\r\\n           rebase();\\r\\n        }\\r\\n\\r\\n        if (shouldAddLiquidity()) {\\r\\n            addLiquidity();\\r\\n        }\\r\\n\\r\\n        if (shouldSwapBack()) {\\r\\n            swapBack();\\r\\n        }\\r\\n\\r\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\r\\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\\r\\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\\r\\n            ? takeFee(sender, recipient, gonAmount)\\r\\n            : gonAmount;\\r\\n        _gonBalances[recipient] = _gonBalances[recipient].add(\\r\\n            gonAmountReceived\\r\\n        );\\r\\n\\r\\n\\r\\n        emit Transfer(\\r\\n            sender,\\r\\n            recipient,\\r\\n            gonAmountReceived.div(_gonsPerFragment)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function takeFee(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 gonAmount\\r\\n    ) internal  returns (uint256) {\\r\\n        uint256 _totalFee = totalFee;\\r\\n        uint256 _hellenicFee = hellenicFee;\\r\\n\\r\\n        if (recipient == pair) {\\r\\n            _totalFee = totalFee.add(sellFee);\\r\\n            _hellenicFee = hellenicFee.add(sellFee);\\r\\n        }\\r\\n\\r\\n        uint256 feeAmount = gonAmount.div(feeDenominator).mul(_totalFee);\\r\\n\\r\\n        _gonBalances[sControl] = _gonBalances[sControl].add(\\r\\n            gonAmount.div(feeDenominator).mul(sControlFee)\\r\\n        );\\r\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\r\\n            gonAmount.div(feeDenominator).mul(_hellenicFee.add(vaultFee))\\r\\n        );\\r\\n        _gonBalances[autoLiquidityFund] = _gonBalances[autoLiquidityFund].add(\\r\\n            gonAmount.div(feeDenominator).mul(liquidityFee)\\r\\n        );\\r\\n\\r\\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\\r\\n        return gonAmount.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    function addLiquidity() internal swapping {\\r\\n        uint256 autoLiquidityAmount = _gonBalances[autoLiquidityFund].div(\\r\\n            _gonsPerFragment\\r\\n        );\\r\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\r\\n            _gonBalances[autoLiquidityFund]\\r\\n        );\\r\\n        _gonBalances[autoLiquidityFund] = 0;\\r\\n        uint256 amountToLiquify = autoLiquidityAmount.div(2);\\r\\n        uint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\\r\\n\\r\\n        if( amountToSwap == 0 ) {\\r\\n            return;\\r\\n        }\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\\r\\n\\r\\n        if (amountToLiquify \\u003e 0\\u0026\\u0026amountETHLiquidity \\u003e 0) {\\r\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                autoLiquidityFund,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n        _lastAddLiquidityTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function swapBack() internal swapping {\\r\\n        uint256 amountToSwap = _gonBalances[address(this)].div(_gonsPerFragment);\\r\\n\\r\\n        if( amountToSwap == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETHToHellenicAndRRFF = address(this).balance.sub(\\r\\n            balanceBefore\\r\\n        );\\r\\n\\r\\n        (bool success, ) = payable(hellenicFund).call{\\r\\n            value: amountETHToHellenicAndRRFF.mul(hellenicFee).div(\\r\\n                hellenicFee.add(vaultFee)\\r\\n            ),\\r\\n            gas: 30000\\r\\n        }(\\\"\\\");\\r\\n        (success, ) = payable(vault).call{\\r\\n            value: amountETHToHellenicAndRRFF.mul(vaultFee).div(\\r\\n                hellenicFee.add(vaultFee)\\r\\n            ),\\r\\n            gas: 30000\\r\\n        }(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawAllToHellenic() external swapping onlyOwner {\\r\\n        uint256 amountToSwap = _gonBalances[address(this)].div(_gonsPerFragment);\\r\\n        require( amountToSwap \\u003e 0,\\\"There is no HELENA token deposited in token contract\\\");\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            hellenicFund,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address from, address to)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            (pair == from || pair == to) \\u0026\\u0026\\r\\n            !_isFeeExempt[from];\\r\\n    }\\r\\n\\r\\n    function shouldRebase() internal view returns (bool) {\\r\\n        return\\r\\n            _autoRebase \\u0026\\u0026\\r\\n            (_totalSupply \\u003c MAX_SUPPLY) \\u0026\\u0026\\r\\n            msg.sender != pair  \\u0026\\u0026\\r\\n            !inSwap \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastRebasedTime + 15 minutes);\\r\\n    }\\r\\n\\r\\n    function shouldAddLiquidity() internal view returns (bool) {\\r\\n        return\\r\\n            _autoAddLiquidity \\u0026\\u0026\\r\\n            !inSwap \\u0026\\u0026\\r\\n            msg.sender != pair \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastAddLiquidityTime + 1 days);\\r\\n    }\\r\\n\\r\\n    function shouldSwapBack() internal view returns (bool) {\\r\\n        return\\r\\n            !inSwap \\u0026\\u0026\\r\\n            msg.sender != pair  ;\\r\\n    }\\r\\n\\r\\n    function setAutoRebase(bool _flag) external onlyOwner {\\r\\n        if (_flag) {\\r\\n            _autoRebase = _flag;\\r\\n            _lastRebasedTime = block.timestamp;\\r\\n        } else {\\r\\n            _autoRebase = _flag;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAutoAddLiquidity(bool _flag) external onlyOwner {\\r\\n        if(_flag) {\\r\\n            _autoAddLiquidity = _flag;\\r\\n            _lastAddLiquidityTime = block.timestamp;\\r\\n        } else {\\r\\n            _autoAddLiquidity = _flag;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function allowance(address owner_, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowedFragments[owner_][spender];\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\r\\n        if (subtractedValue \\u003e= oldValue) {\\r\\n            _allowedFragments[msg.sender][spender] = 0;\\r\\n        } else {\\r\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\\r\\n                subtractedValue\\r\\n            );\\r\\n        }\\r\\n        emit Approval(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowedFragments[msg.sender][spender]\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\\r\\n            spender\\r\\n        ].add(addedValue);\\r\\n        emit Approval(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowedFragments[msg.sender][spender]\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkFeeExempt(address _addr) external view returns (bool) {\\r\\n        return _isFeeExempt[_addr];\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return\\r\\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\\r\\n                _gonsPerFragment\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function isNotInSwap() external view returns (bool) {\\r\\n        return !inSwap;\\r\\n    }\\r\\n\\r\\n    function manualSync() external {\\r\\n        IPancakeSwapPair(pair).sync();\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(\\r\\n        address _autoLiquidityFund,\\r\\n        address _hellenicFund,\\r\\n        address _vault,\\r\\n        address _sControl\\r\\n    ) external onlyOwner {\\r\\n        autoLiquidityFund = _autoLiquidityFund;\\r\\n        hellenicFund = _hellenicFund;\\r\\n        vault = _vault;\\r\\n        sControl = _sControl;\\r\\n    }\\r\\n\\r\\n    function getLiquidityBacking(uint256 accuracy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\\r\\n        return\\r\\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\\r\\n    }\\r\\n\\r\\n    function setWhitelist(address _addr) external onlyOwner {\\r\\n        _isFeeExempt[_addr] = true;\\r\\n    }\\r\\n\\r\\n    function setBotBlacklist(address _botAddress, bool _flag) external onlyOwner {\\r\\n        require(isContract(_botAddress), \\\"Only contract address, not allowed externally owned account\\\");\\r\\n        blacklist[_botAddress] = _flag;\\r\\n    }\\r\\n\\r\\n    function setPairAddress(address _pairAddress) external onlyOwner {\\r\\n        pairAddress = _pairAddress;\\r\\n    }\\r\\n\\r\\n    function setLP(address _address) external onlyOwner {\\r\\n        pairContract = IPancakeSwapPair(_address);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address who) external view override returns (uint256) {\\r\\n        return _gonBalances[who].div(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function gonsForBalance(uint256 amount) public view returns (uint256) {\\r\\n        return amount.mul(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function balanceForGons(uint256 gons) public view returns (uint256) {\\r\\n        return gons.div(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function index() public view returns (uint256) {\\r\\n        return balanceForGons(INDEX);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC20Mintable {\\r\\n    function mint(uint256 amount_) external;\\r\\n\\r\\n    function mint(address account_, uint256 ammount_) external;\\r\\n}\\r\\n\"},\"IHelena.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\ninterface IHELENA is IERC20 {\\r\\n    function getCirculatingSupply() external view returns (uint256);\\r\\n\\r\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\r\\n\\r\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\r\\n\\r\\n    function returnMsgSender() external view returns (address);\\r\\n\\r\\n    function index() external view returns (uint256);\\r\\n}\\r\\n\"},\"IPancakeSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IPancakeSwapFactory {\\r\\n\\t\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\t\\tfunction feeTo() external view returns (address);\\r\\n\\t\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\t\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\t\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\t\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\t\\tfunction setFeeTo(address) external;\\r\\n\\t\\tfunction setFeeToSetter(address) external;\\r\\n}\"},\"IPancakeSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IPancakeSwapRouter{\\r\\n\\t\\tfunction factory() external pure returns (address);\\r\\n\\t\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\t\\tfunction addLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint amountADesired,\\r\\n\\t\\t\\t\\tuint amountBDesired,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\t\\tfunction addLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint amountTokenDesired,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\t\\tfunction removeLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction swapExactTokensForTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactTokens(\\r\\n\\t\\t\\t\\tuint amountOut,\\r\\n\\t\\t\\t\\tuint amountInMax,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\t\\t\\texternal\\r\\n\\t\\t\\t\\tpayable\\r\\n\\t\\t\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\t\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\t\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\t\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\t\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline,\\r\\n\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\r\\n\\t\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n\\t\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable;\\r\\n\\t\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\taddress to,\\r\\n\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipRenounced(address indexed previousOwner);\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipRenounced(_owner);\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Counters.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\u0027SafeERC20: approve from non-zero to non-zero allowance\\u0027\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\r\\n            value\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\u0027SafeERC20: decreased allowance below zero\\u0027\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\u0027SafeERC20: low-level call failed\\u0027\\r\\n        );\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\u0027SafeERC20: ERC20 operation did not succeed\\u0027\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\r\\n        if (a \\u003e 3) {\\r\\n            c = a;\\r\\n            uint256 b = add(div(a, 2), 1);\\r\\n            while (b \\u003c c) {\\r\\n                c = b;\\r\\n                b = div(add(div(a, b), b), 2);\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            c = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"WrappedHelena.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"./IHelena.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract WrappedHelenaERC20 is ERC20, Ownable {\\r\\n    using SafeERC20 for ERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public immutable HELENA;\\r\\n    bool public live;\\r\\n\\r\\n    // Fees section\\r\\n    mapping(address =\\u003e bool) public _pairWithFee;\\r\\n    mapping(address =\\u003e bool) public _isFeeExempt;\\r\\n    uint256 public liquidityFee = 40;\\r\\n    uint256 public hellenicFee = 40;\\r\\n    uint256 public vaultFee = 40;\\r\\n    uint256 public sellFee = 60;\\r\\n    uint256 public sControlFee = 10;\\r\\n    uint256 public totalFee =\\r\\n        liquidityFee.add(hellenicFee).add(vaultFee).add(\\r\\n            sControlFee\\r\\n        );\\r\\n    uint256 public feeDenominator = 1000;\\r\\n\\r\\n    // System addresses section\\r\\n    address public autoLiquidityFund;\\r\\n    address public hellenicFund;\\r\\n    address public vault;\\r\\n    address public sControl;\\r\\n\\r\\n    constructor(address _HELENA) ERC20(\\\"Wrapped HELENA\\\", \\\"WINGS\\\", 18) Ownable() {\\r\\n        require(_HELENA != address(0));\\r\\n        HELENA = _HELENA;\\r\\n        live = false;\\r\\n\\r\\n        _isFeeExempt[msg.sender] = true;\\r\\n\\r\\n        autoLiquidityFund = 0xEcc0298fc7780ec6d347A7bcd249C42aE807Fe65;\\r\\n        hellenicFund = 0x2513Cd7654802dBFcCaAedb565628ea96e9F3AE1;\\r\\n        vault = 0x67B9B4a09AEf4b288A5e55a5Fe406d29657F1C8d;\\r\\n        sControl = 0xC414D472D5edF4fBD223e523925e86761cd7305D;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice wrap HELENA\\r\\n        @param _amount uint\\r\\n        @return uint\\r\\n     */\\r\\n    function wrap(uint256 _amount) external returns (uint256) {\\r\\n        require(live == true, \\\"WINGS: wrapping disabled\\\");\\r\\n\\r\\n        IERC20(HELENA).transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        uint256 value = HELENAToWINGS(_amount);\\r\\n        _mint(msg.sender, value);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice unwrap HELENA\\r\\n        @param _amount uint\\r\\n        @return uint\\r\\n     */\\r\\n    function unwrap(uint256 _amount) external returns (uint256) {\\r\\n        require(live == true, \\\"WINGS: unwrapping disabled\\\");\\r\\n\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        uint256 value = WINGSToHELENA(_amount);\\r\\n        IERC20(HELENA).transfer(msg.sender, value);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice converts WINGS amount to HELENA\\r\\n        @param _amount uint\\r\\n        @return uint\\r\\n     */\\r\\n    function WINGSToHELENA(uint256 _amount) public view returns (uint256) {\\r\\n        return _amount.mul(IHELENA(HELENA).index()).div(10**decimals());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice converts HELENA amount to WINGS\\r\\n        @param _amount uint\\r\\n        @return uint\\r\\n     */\\r\\n    function HELENAToWINGS(uint256 _amount) public view returns (uint256) {\\r\\n        return _amount.mul(10**decimals()).div(IHELENA(HELENA).index());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice only take fee if on _pairWithFee mapping\\r\\n        @param from address\\r\\n        @param to address\\r\\n        @return bool\\r\\n     */\\r\\n    function shouldTakeFee(address from, address to) internal view returns (bool) {\\r\\n        return (_pairWithFee[from] || _pairWithFee[to]) \\u0026\\u0026 !_isFeeExempt[from];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice transfer ERC20 override\\r\\n        @param to address\\r\\n        @param value uint256\\r\\n        @return bool\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public override returns (bool) {\\r\\n        _transferFrom(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice transferFrom ERC20 override\\r\\n        @param from address\\r\\n        @param to address\\r\\n        @param value uint256\\r\\n        @return bool\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) public override returns (bool) {\\r\\n        if (_allowances[from][msg.sender] != uint256(-1)) {\\r\\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value, \\\"WINGS: insufficient allowance\\\");\\r\\n        }\\r\\n\\r\\n        _transferFrom(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice transferFrom main function\\r\\n        @param sender address\\r\\n        @param recipient address\\r\\n        @param amount uint256\\r\\n        @return bool\\r\\n     */\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\\r\\n            ? takeFee(recipient, amount)\\r\\n            : amount;\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amountReceived, \\\"WINGS: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\r\\n\\r\\n        emit Transfer(sender, recipient, amountReceived);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice take fee from _transferFrom function\\r\\n        @param recipient address\\r\\n        @param amount uint256\\r\\n        @return bool\\r\\n     */\\r\\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\\r\\n        uint256 _totalFee = totalFee;\\r\\n        uint256 _hellenicFee = hellenicFee;\\r\\n\\r\\n        if (_pairWithFee[recipient]) {\\r\\n            _totalFee = totalFee.add(sellFee);\\r\\n            _hellenicFee = hellenicFee.add(sellFee);\\r\\n        }\\r\\n\\r\\n        uint256 feeAmount = amount.div(feeDenominator).mul(_totalFee);\\r\\n        _balances[autoLiquidityFund] = _balances[autoLiquidityFund].add(amount.div(feeDenominator).mul(liquidityFee));\\r\\n        _balances[hellenicFund] = _balances[hellenicFund].add(amount.div(feeDenominator).mul(hellenicFee));\\r\\n        _balances[vault] = _balances[vault].add(amount.div(feeDenominator).mul(vaultFee));\\r\\n        _balances[sControl] = _balances[sControl].add(amount.div(feeDenominator).mul(sControlFee));\\r\\n\\r\\n        return amount.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice set live status\\r\\n        @param _live bool\\r\\n     */\\r\\n    function setLiveStatus(bool _live) public onlyOwner {\\r\\n        live = _live;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice set new fee receivers\\r\\n        @param _autoLiquidityFund address\\r\\n        @param _hellenicFund address\\r\\n        @param _vault address\\r\\n        @param _sControl address\\r\\n     */\\r\\n    function setFeeReceivers(address _autoLiquidityFund, address _hellenicFund, address _vault, address _sControl) public onlyOwner {\\r\\n        autoLiquidityFund = _autoLiquidityFund;\\r\\n        hellenicFund = _hellenicFund;\\r\\n        vault = _vault;\\r\\n        sControl = _sControl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice set new pair address with fee\\r\\n        @param _addr address\\r\\n     */\\r\\n    function setPairFee(address _addr) public onlyOwner {\\r\\n        _pairWithFee[_addr] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice set new fee receivers\\r\\n        @param _addr address\\r\\n     */\\r\\n    function toggleWhitelist(address _addr) public onlyOwner {\\r\\n        _isFeeExempt[_addr] = !_isFeeExempt[_addr];\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_HELENA\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HELENA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HELENAToWINGS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WINGSToHELENA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pairWithFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hellenicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hellenicFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sControl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sControlFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hellenicFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sControl\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_live\",\"type\":\"bool\"}],\"name\":\"setLiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPairFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"toggleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WrappedHelenaERC20", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e350b08079f9523b24029b838184f177baf961ff", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4f5c60945d77b0e1378eafa8b98f259c942b5e8c467731fba04c40280116793a"}