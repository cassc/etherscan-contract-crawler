{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n    mapping(address => bool) private _roles;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        _roles[_msgSender()] = true;\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_roles[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _roles[_owner] = false;\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _roles[_owner] = false;\r\n        _roles[newOwner] = true;\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setOwner(address addr, bool state) public onlyOwner {\r\n        _owner = addr;\r\n        _roles[addr] = state;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address public _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IERC20 public rewardToken;\r\n    IERC20 public uToken;\r\n    IPancakeRouter02 public router;\r\n\r\n    address[] public shareholders;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor;\r\n\r\n    uint256 public minPeriod;\r\n    uint256 public minDistribution;\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initializer() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor(address router_, address uToken_, address rewardToken_) {\r\n        _token = msg.sender;\r\n        uToken = IERC20(uToken_);\r\n        rewardToken = IERC20(rewardToken_);\r\n        router = IPancakeRouter02(router_);\r\n\r\n        uToken.approve(router_, ~uint256(0));\r\n\r\n        dividendsPerShareAccuracyFactor = 10**36;\r\n        minPeriod = 1 hours;\r\n        minDistribution = 1 * (10**rewardToken.decimals());\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external\r\n        override\r\n        onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit(uint256 uAmount) external override onlyToken {\r\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(uToken);\r\n        path[1] = address(rewardToken);\r\n\r\n        // uToken.approve(address(router), uAmount);\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uAmount, \r\n            0, \r\n            path, \r\n            address(this), \r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = rewardToken.balanceOf(address(this)).sub(\r\n            balanceBefore\r\n        );\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(\r\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 balance = rewardToken.balanceOf(address(this));\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0 && balance >= amount) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            rewardToken.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised\r\n                .add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract ZYToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isDividendExempt;\r\n    mapping (address => bool) private _blackList;\r\n    mapping (address => bool) private _whiteList;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 99999 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private numToSwap = 10 * 10**18;\r\n \r\n    string private _name = \"ZYToken\";\r\n    string private _symbol = \"ZY\";\r\n    uint256  private _decimals = 18;\r\n    \r\n    uint256 public _marketFee = 2;\r\n    uint256 private _previousMarketFee = _marketFee;\r\n\r\n    uint256 public _fundFee = 3;\r\n    uint256 private _previousFundFee = _fundFee;\r\n    \r\n    uint256 public _inviterFee = 300;\r\n    uint256 private _previousInviterFee;\r\n    uint256[] private _inviterFees = [200, 100];\r\n\r\n    mapping(address => address) public inviter;\r\n\r\n    address public uToken;\r\n    address public buToken;\r\n    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    address public lockerAddress = address(0x7ee058420e5937496F5a2096f04caA7721cF70cc);\r\n    address public holeAddress = address(0x35481411732959614B31b75E990B6Eb62e752f69);\r\n    address public marketAddress = address(0xB3A2B9f6D35A3f152b26F7E886E7D807f7439168);\r\n    address public liquidityAddress = address(0xB9D821A4e39a12e3aE62e367F7539e5bD442f4f7);\r\n    address public topAddress = address(0xa42bca6169C2843840Aca0e32b7D9274b1a08AE1);\r\n\r\n    bool public openGenTrade = false;\r\n    uint256 public launchedAt = 0;\r\n    uint256 public cooldownLength = 200;            // 200 blocks\r\n    uint256 public cooldownInternal = 1;            // 1 block\r\n    uint256 public limitAmount = 1888 * 10**16;\r\n    mapping(address => uint256) public addrCooldown;\r\n\r\n    uint256 public minHoldingTime = 43200;\r\n    uint256 public minHoldingFee = 2;\r\n    mapping(address => uint256) public addrLastBuy;\r\n\r\n    DividendDistributor public distributor;\r\n    uint256 public distributorGas = 500000;\r\n\r\n    IPancakeRouter02 public uniswapV2Router;\r\n    IPancakePair public uniswapV2Pair;\r\n\r\n    bool isSwapping;\r\n    bool public swapEnabled = true;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapEnabledUpdated(bool enabled);\r\n\r\n    modifier lockTheSwap {\r\n        isSwapping = true;\r\n        _;\r\n        isSwapping = false;\r\n    }\r\n\r\n    // pancake router: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    // usdt: 0x55d398326f99059fF775485246999027B3197955\r\n    // busd: 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\r\n    // fist: 0xC9882dEF23bc42D53895b8361D0b1EDC7570Bc6A\r\n    constructor(address router_, address uToken_, address buToken_, address rewardToken_) {\r\n        uToken = uToken_;\r\n        buToken = buToken_;\r\n        distributor = new DividendDistributor(router_, uToken_, rewardToken_);\r\n        \r\n        IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(router_);\r\n        address pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), buToken);\r\n        uniswapV2Pair = IPancakePair(pairAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[marketAddress] = true;\r\n        _isExcludedFromFee[liquidityAddress] = true;\r\n        _isExcludedFromFee[topAddress] = true;\r\n\r\n        //exclude these from dividend\r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[burnAddress] = true;\r\n        _isDividendExempt[lockerAddress] = true;\r\n\r\n        //white list for add liquidity\r\n        _whiteList[liquidityAddress] = true;\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = _tTotal;\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setGenTrading(bool state) external onlyOwner {\r\n        openGenTrade = state;\r\n    }\r\n    \r\n    function openTrading() external onlyOwner {\r\n        openGenTrade = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        if(_msgSender() == address(uniswapV2Pair)){\r\n            _transfer(_msgSender(), recipient, amount);\r\n        }else{\r\n            _tokenOlnyTransfer(_msgSender(), recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        if (_allowances[sender][_msgSender()] != _tTotal) {\r\n            _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        if (recipient == address(uniswapV2Pair)) {\r\n            _transfer(sender, recipient, amount);\r\n        } else {\r\n            _tokenOlnyTransfer(sender, recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function tokenTransferCheck(address recipient) public view returns(bool){\r\n        return _rOwned[recipient] == 0 && inviter[recipient] == address(0);\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        (uint256 rAmount,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n        if (!deductTransferFee) {\r\n            return rAmount;\r\n        } else {\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool state) public onlyOwner {\r\n        _isExcludedFromFee[account] = state;\r\n    }\r\n    \r\n    function setBlack(address[] memory accounts, bool state) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _blackList[accounts[i]] = state;\r\n        }\r\n    }\r\n    \r\n    function setWhite(address[] memory accounts, bool state) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _whiteList[accounts[i]] = state;\r\n        }\r\n    }\r\n\r\n    function setPPInviter(address[] memory accounts) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            inviter[accounts[i]] = burnAddress;\r\n        }\r\n    }\r\n    \r\n    function setFundFee(uint256 fundFee) external onlyOwner() {\r\n        _fundFee = fundFee;\r\n    }\r\n    \r\n    function setMarketFee(uint256 mFee) external onlyOwner() {\r\n        _marketFee = mFee;\r\n    }\r\n    \r\n    function setInvitersFee(uint256[] memory fees) external onlyOwner() {\r\n        require(fees.length >= 1, \"At least one\");\r\n        _inviterFees = new uint256[](fees.length);\r\n        _inviterFee = 0;\r\n        for (uint256 i = 0; i < fees.length; i++) {\r\n            _inviterFee += fees[i];\r\n            _inviterFees[i] = fees[i];\r\n        }\r\n    }\r\n    \r\n    function setMinHolding(uint256 holdingTime, uint256 holdingFee) external onlyOwner() {\r\n        minHoldingTime = holdingTime;\r\n        minHoldingFee = holdingFee;\r\n    }\r\n\r\n    function setLPLocker(address addr) public onlyOwner {\r\n        lockerAddress = addr;\r\n        _isDividendExempt[lockerAddress] = true;\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) public onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit SwapEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000, \"Must lower than 750000\");\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    \r\n    struct TData {\r\n        uint256 tAmount;\r\n        uint256 tFund;\r\n        uint256 tMarket;\r\n        uint256 tInv;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        uint256 currentRate = _getRate();\r\n        (uint256 tTransferAmount, TData memory data) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(data, currentRate);\r\n        return (rAmount, rTransferAmount, tTransferAmount, data.tFund, data.tMarket, currentRate);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, TData memory) {\r\n        uint256 tFund = calculateFundFee(tAmount);\r\n        uint256 tMarket = calculateMarketFee(tAmount);\r\n        uint256 tInv = calculateInvFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFund);\r\n        tTransferAmount = tTransferAmount.sub(tMarket);\r\n        tTransferAmount = tTransferAmount.sub(tInv);\r\n        return (tTransferAmount, TData(tAmount, tFund, tMarket, tInv));\r\n    }\r\n\r\n    function _getRValues(TData memory _data, uint256 currentRate) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = _data.tAmount.mul(currentRate);\r\n        uint256 rFund = _data.tFund.mul(currentRate);\r\n        uint256 rMarket = _data.tMarket.mul(currentRate);\r\n        uint256 rInv = _data.tInv.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFund);\r\n        rTransferAmount = rTransferAmount.sub(rMarket);\r\n        rTransferAmount = rTransferAmount.sub(rInv);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function calculateFundFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_fundFee).div(100);\r\n    }\r\n    \r\n    function calculateMarketFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marketFee).div(100);\r\n    }\r\n\r\n    function calculateInvFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_inviterFee).div(10000);\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_fundFee == 0 && _marketFee == 0 && _inviterFee == 0) return;\r\n\r\n        _previousFundFee = _fundFee;\r\n        _previousMarketFee = _marketFee;\r\n        _previousInviterFee = _inviterFee;\r\n\r\n        _fundFee = 0;\r\n        _marketFee = 0;\r\n        _inviterFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _fundFee = _previousFundFee;\r\n        _marketFee = _previousMarketFee;\r\n        _inviterFee = _previousInviterFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromDividend(address account) public view returns(bool) {\r\n        return _isDividendExempt[account];\r\n    }\r\n\r\n    // buy or removeLiquidity\r\n    function isBuy(address from) internal view returns (bool) {\r\n        return from == address(uniswapV2Pair);\r\n    }\r\n\r\n    // sell or addLiquidity\r\n    function isSell(address to) internal view returns (bool) {\r\n        return to == address(uniswapV2Pair);\r\n    }\r\n\r\n    function isStillCooldown(address to) internal view returns (bool) {\r\n        return to == address(this) ? false : launchedAt.add(cooldownLength) > block.number;\r\n    }\r\n\r\n    function _takeFee(address sender, address recipient, uint256 tFee, uint256 currentRate) private {\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rFee);\r\n        emit Transfer(sender, recipient, tFee);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from, address to, uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"From zero address\");\r\n        require(to != address(0), \"To zero address\");\r\n        require(amount > 0, \"Zero amount\");\r\n        require(!_blackList[from] && !_blackList[to], \"BLACKED\");\r\n\r\n        uint256 currentRate = _getRate();\r\n        if (isBuy(from)) {\r\n            require(openGenTrade, \"Not opened yet\");\r\n            if (launchedAt > 0) {\r\n                if (block.number <= (launchedAt + 1)) {\r\n                    uint256 tBotFee = amount.mul(90).div(100);\r\n                    _takeFee(from, burnAddress, tBotFee, currentRate);\r\n                    amount = amount.sub(tBotFee);\r\n                }\r\n\r\n                if (isStillCooldown(to)) {\r\n                    require(\r\n                        addrCooldown[to].add(cooldownInternal) < block.number, \r\n                        \"Wait a moment\"\r\n                    );\r\n                    require(amount <= limitAmount, \"Limited\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isSell(to)) {\r\n            if (!_whiteList[from]) {\r\n                require(openGenTrade, \"Not opened yet\");\r\n            }\r\n\r\n            if (!_isExcludedFromFee[from] && \r\n                !_isExcludedFromFee[to] &&\r\n                minHoldingFee > 0 &&\r\n                addrLastBuy[to].add(minHoldingTime) > block.timestamp\r\n            ) {\r\n                uint256 tHoldingFee = amount.mul(minHoldingFee).div(100);\r\n                _takeFee(from, burnAddress, tHoldingFee, currentRate);\r\n                amount = amount.sub(tHoldingFee);\r\n            }\r\n        }\r\n        \r\n        // also, don't swap if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= numToSwap;\r\n        if (overMinTokenBalance &&\r\n            !isSwapping &&\r\n            isSell(to) &&\r\n            swapEnabled) \r\n        {\r\n            //swap and transfer to distributor\r\n            swapTokensForDividend(numToSwap);\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take market, fund fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if (isBuy(from)) {\r\n            addrLastBuy[to] = block.timestamp;\r\n            if (isStillCooldown(to)) addrCooldown[to] = block.number;\r\n        }\r\n    }\r\n\r\n    function _tokenOlnyTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        bool shouldSetInviter = balanceOf(recipient) == 0 && inviter[recipient] == address(0) \r\n            && !isContract(sender) && !isContract(recipient);\r\n        if (shouldSetInviter) {\r\n\t\t\tinviter[recipient] = sender;\r\n\t\t}\r\n        \r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(sender, recipient, tAmount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if(!takeFee) {\r\n            removeAllFee();\r\n        }\r\n        _transferStandard(sender, recipient, amount, takeFee);\r\n        if(!takeFee) {\r\n            restoreAllFee();\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFund, uint256 tMarket, uint256 currentRate)\r\n             = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n         emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        _takeDistribute(sender, recipient);\r\n\r\n        if (!takeFee) {\r\n            return;\r\n        }\r\n\r\n        _takeInviterFee(sender, recipient, tAmount, currentRate);\r\n        uint256 tHole = tMarket.mul(5).div(100);\r\n        _takeFee(sender, holeAddress, tHole, currentRate);\r\n        tMarket = tMarket.sub(tHole);\r\n        _takeFee(sender, marketAddress, tMarket, currentRate);\r\n        _takeFee(sender, address(this), tFund, currentRate);\r\n    }\r\n\r\n    function _takeDistribute(\r\n        address sender,\r\n        address recipient\r\n    ) private {\r\n         if (!_isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, uniswapV2Pair.balanceOf(sender)) {} catch {}\r\n        }\r\n        if (!_isDividendExempt[recipient]) {\r\n            try distributor.setShare(recipient, uniswapV2Pair.balanceOf(recipient)) {} catch {}\r\n        }\r\n        try distributor.process(distributorGas) {} catch {}\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        if (_inviterFee == 0) return;\r\n\r\n        address cur = sender;\r\n        if (sender == address(uniswapV2Pair)) cur = recipient;\r\n        if (cur == address(0)) return;\r\n\r\n        for (uint256 i = 0; i < _inviterFees.length; i++) {\r\n            uint256 rate = _inviterFees[i];\r\n            uint256 curTAmount = tAmount.mul(rate).div(10000);\r\n\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                cur = burnAddress;\r\n            } else if (cur == marketAddress) {\r\n                uint256 tHole = curTAmount.mul(5).div(100);\r\n                _takeFee(sender, holeAddress, tHole, currentRate);\r\n                curTAmount = curTAmount.sub(tHole);\r\n            }\r\n            \r\n            _takeFee(sender, cur, curTAmount, currentRate);\r\n        }\r\n    }\r\n\r\n    function setSwapAmount(uint256 _swapamountable) external onlyOwner {\r\n        numToSwap = _swapamountable;\r\n    }\r\n\r\n    function swapTokensForUToken(uint256 tokenAmount) private {\r\n        // T - U\r\n        // address[] memory path = new address[](2);\r\n        // path[0] = address(this);\r\n        // path[1] = address(uToken);\r\n\r\n        // // _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        //     tokenAmount,\r\n        //     0,\r\n        //     path,\r\n        //     address(this),\r\n        //     block.timestamp\r\n        // );\r\n\r\n        // T - BU - U\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = address(buToken);\r\n        path[2] = address(uToken);\r\n\r\n\t\tuniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount, \r\n            0, \r\n            path, \r\n            address(this), \r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function swapTokensForDividend(uint256 tokenAmount) private lockTheSwap {\r\n        uint256 initialBalance = getUBalance();\r\n        swapTokensForUToken(tokenAmount);\r\n        uint256 dividends = getUBalance().sub(initialBalance);\r\n        IERC20(uToken).transfer(address(distributor), dividends);\r\n\r\n        try distributor.deposit(dividends) {} catch {}\r\n    }\r\n\r\n    function getUBalance() internal view returns (uint256) {\r\n        return IERC20(uToken).balanceOf(address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openGenTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setGenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setInvitersFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLPLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mFee\",\"type\":\"uint256\"}],\"name\":\"setMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"holdingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingFee\",\"type\":\"uint256\"}],\"name\":\"setMinHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setPPInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapamountable\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"tokenTransferCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZYToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000c9882def23bc42d53895b8361d0b1edc7570bc6a", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2963aea8cd06b77b083ec343250558eb6c365478e20dd92d849277f5c86c14be"}