{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.8 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner() {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0, \"SafeMathInt: toUint256Safe Error 1\");\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0, \"SafeMathUint: toInt256Safe Error 1\");\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary StringTools {\r\n    function appendString(string memory a, string memory b) internal pure returns (string memory) {\r\n        return appendString(a, b, \"\");\r\n    }\r\n\r\n    function appendString(string memory a, string memory b, string memory c) internal pure returns (string memory) {\r\n        return appendString(a, b, c, \"\");\r\n    }\r\n\r\n    function appendString(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c, d));\r\n    }\r\n\r\n    function toString(uint value) internal pure returns (string memory) {\r\n        if (value == 0) {return \"0\";}\r\n\r\n        uint temp = value;\r\n        uint digits;\r\n\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        require(_allowances[sender][_msgSender()] >= amount, \"ERC20: Transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: Transfer from the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: Transfer amount exceeds balance\");\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: Mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: Burn from the zero address\");\r\n        require(_balances[account] >= amount, \"ERC20: Burn amount exceeds balance\");\r\n\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: Approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: Approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    Map internal iterableMap;\r\n\r\n    constructor() {}\r\n\r\n    function iterableMapGet(address key) external view returns (uint) {\r\n        return iterableMap.values[key];\r\n    }\r\n\r\n    function iterableMapGetIndexOfKey(address key) public view returns (int) {\r\n        if (!iterableMap.inserted[key]) {\r\n            return - 1;\r\n        }\r\n        return int(iterableMap.indexOf[key]);\r\n    }\r\n\r\n    function iterableMapGetKeyAtIndex(uint index) public view returns (address) {\r\n        return iterableMap.keys[index];\r\n    }\r\n\r\n    function iterableMapSize() public view returns (uint) {\r\n        return iterableMap.keys.length;\r\n    }\r\n\r\n    function iterableMapSet(address key, uint val) public {\r\n        if (iterableMap.inserted[key]) {\r\n            iterableMap.values[key] = val;\r\n        } else {\r\n            iterableMap.inserted[key] = true;\r\n            iterableMap.values[key] = val;\r\n            iterableMap.indexOf[key] = iterableMap.keys.length;\r\n            iterableMap.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function iterableMapRemove(address key) public {\r\n        if (!iterableMap.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete iterableMap.inserted[key];\r\n        delete iterableMap.values[key];\r\n\r\n        uint index = iterableMap.indexOf[key];\r\n        uint lastIndex = iterableMap.keys.length - 1;\r\n        address lastKey = iterableMap.keys[lastIndex];\r\n\r\n        iterableMap.indexOf[lastKey] = index;\r\n        delete iterableMap.indexOf[key];\r\n\r\n        iterableMap.keys[index] = lastKey;\r\n        iterableMap.keys.pop();\r\n    }\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    function withdrawableDividendOf(address _owner) external view returns (uint256);\r\n\r\n    function withdrawnDividendOf(address _owner) external view returns (uint256);\r\n\r\n    function accumulativeDividendOf(address _owner) external view returns (uint256);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    function distributeDividends() external payable;\r\n\r\n    function withdrawDividend() external;\r\n\r\n    event DividendsDistributed(\r\n        address indexed from,\r\n        uint256 weiAmount\r\n    );\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount\r\n    );\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 constant internal magnitude = 2 ** 128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_, decimals_) {\r\n    }\r\n\r\n    receive() external payable {distributeDividends();}\r\n\r\n    function distributeDividends() public override payable {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare + ((msg.value * magnitude) / totalSupply());\r\n            emit DividendsDistributed(_msgSender(), msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed + msg.value;\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() external virtual override {\r\n        _withdrawDividendOfUser(payable(_msgSender()));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user] + _withdrawableDividend;\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success,) = user.call{value : _withdrawableDividend, gas : 21000}(\"\");\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user] - _withdrawableDividend;\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) external view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view override returns (uint256) {\r\n        return accumulativeDividendOf(_owner) - withdrawnDividends[_owner];\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) external view override returns (uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view override returns (uint256) {\r\n        return ((magnifiedDividendPerShare * balanceOf(_owner)).toInt256Safe() + magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] - (magnifiedDividendPerShare * value).toInt256Safe();\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = (magnifiedDividendCorrections[account] + (magnifiedDividendPerShare * value).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance - currentBalance;\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance - newBalance;\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DividendTracker is DividendPayingToken, IterableMapping, Ownable {\r\n    using SafeMathInt for int256;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public lastProcessedIndex;\r\n    uint256 public claimWait;\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor(string memory symbol_, uint8 decimals_, uint256 minimumTokenBalanceForDividends_) DividendPayingToken(symbol_, symbol_, decimals_) {\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = minimumTokenBalanceForDividends_ * (10 ** decimals());\r\n        // Must hold minimum tokens to receive dividends\r\n    }\r\n\r\n    function _transfer(address, address, uint256) internal pure override {\r\n        require(false, \"No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(false, \"withdrawDividend disabled. Use the 'claim' function on the main contract.\");\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner() {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        iterableMapRemove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner() {\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"claimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return iterableMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account) public view returns (\r\n        address account, int256 index, int256 iterationsUntilProcessed, uint256 withdrawableDividends,\r\n        uint256 totalDividends, uint256 lastClaimTime, uint256 nextClaimTime, uint256 secondsUntilAutoClaimAvailable\r\n    ) {\r\n\r\n        account = _account;\r\n        index = iterableMapGetIndexOfKey(account);\r\n        iterationsUntilProcessed = - 1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index - int256(lastProcessedIndex);\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = iterableMap.keys.length > lastProcessedIndex ? iterableMap.keys.length - lastProcessedIndex : 0;\r\n                iterationsUntilProcessed = index + int256(processesUntilEndOfArray);\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n        lastClaimTime = lastClaimTimes[account];\r\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime + claimWait : 0;\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime - block.timestamp : 0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index) external view returns (\r\n        address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\r\n        if (index >= iterableMapSize()) {return (address(0), - 1, - 1, 0, 0, 0, 0, 0);}\r\n\r\n        address account = iterableMapGetKeyAtIndex(index);\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if (lastClaimTime > block.timestamp) {return false;}\r\n\r\n        return (block.timestamp - lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner() {\r\n        if (excludedFromDividends[account]) {return;}\r\n\r\n        if (newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            iterableMapSet(account, newBalance);\r\n        } else {\r\n            _setBalance(account, 0);\r\n            iterableMapRemove(account);\r\n        }\r\n\r\n        processAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) external returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = iterableMap.keys.length;\r\n        if (numberOfTokenHolders == 0) {return (0, 0, lastProcessedIndex);}\r\n\r\n        uint256 currentProcessingIndex = lastProcessedIndex;\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            currentProcessingIndex++;\r\n            if (currentProcessingIndex >= numberOfTokenHolders) {currentProcessingIndex = 0;}\r\n            address account = iterableMap.keys[currentProcessingIndex];\r\n\r\n            if (canAutoClaim(lastClaimTimes[account]) && processAccount(payable(account), true)) {claims++;}\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed + (gasLeft - newGasLeft);\r\n            }\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = currentProcessingIndex;\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract BNBDividendPayingERC20Token is ERC20, Ownable {\r\n    using StringTools for *;\r\n\r\n    struct FeeSet {\r\n        uint256 burnFee;\r\n        uint256 holderFee;\r\n        uint256 liquidityFee;\r\n    }\r\n\r\n    FeeSet[] public weeklyFee;\r\n    FeeSet public buyFee;\r\n    uint256 immutable oneWeek = 7 * 24 * 60 * 60;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public embargoedAddresses;\r\n    mapping(address => uint256) public effectiveObtainTime;\r\n\r\n    uint256 availableLiquidityFee;\r\n    uint256 availableHolderFee;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    bool public isSwappingEnabled = true;\r\n    uint256 public swapTokensAtAmount;\r\n    bool private swapping;\r\n    bool private isInitialEntrance = true;\r\n\r\n    DividendTracker public dividendTracker;\r\n    uint256 public gasForProcessing = 300000;\r\n\r\n    bool public isTradingEnabled = false;\r\n    mapping(address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetSwapTokensAtAmount(uint256 oldAmount, uint256 newAmount);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event FeeChargedAfterHoldingFor(address indexed account, uint256 numOfWeeks, uint256 fromTimestamp, uint256 toTimestamp);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SendDividends(\r\n        uint256 tokensSwapped,\r\n        uint256 amount\r\n    );\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    constructor(\r\n        string memory tokenName_,\r\n        string memory tokenSymbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        uint256 swapTokensAtAmount_,\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) ERC20(tokenName_, tokenSymbol_, decimals_) {\r\n        // Week 0\r\n        weeklyFee.push(FeeSet(120, 150, 30));\r\n        // Week 1\r\n        weeklyFee.push(FeeSet(120, 140, 30));\r\n        // Week 2\r\n        weeklyFee.push(FeeSet(120, 130, 30));\r\n        // Week 3\r\n        weeklyFee.push(FeeSet(110, 130, 30));\r\n        // Week 4\r\n        weeklyFee.push(FeeSet(100, 130, 30));\r\n        // Week 5\r\n        weeklyFee.push(FeeSet(100, 120, 30));\r\n        // Week 6\r\n        weeklyFee.push(FeeSet(100, 120, 20));\r\n        // Week 7\r\n        weeklyFee.push(FeeSet(100, 110, 20));\r\n        // Week 8\r\n        weeklyFee.push(FeeSet(90, 110, 20));\r\n        // Week 9\r\n        weeklyFee.push(FeeSet(90, 100, 20));\r\n        // Week 10\r\n        weeklyFee.push(FeeSet(80, 100, 20));\r\n        // Week 11\r\n        weeklyFee.push(FeeSet(70, 100, 20));\r\n        // Week 12\r\n        weeklyFee.push(FeeSet(70, 90, 20));\r\n        // Week 13\r\n        weeklyFee.push(FeeSet(70, 90, 10));\r\n        // Week 14\r\n        weeklyFee.push(FeeSet(70, 80, 10));\r\n        // Week 15\r\n        weeklyFee.push(FeeSet(60, 70, 10));\r\n        // Week 16\r\n        weeklyFee.push(FeeSet(50, 70, 10));\r\n        // Week 17\r\n        weeklyFee.push(FeeSet(50, 60, 10));\r\n        // Week 18\r\n        weeklyFee.push(FeeSet(40, 60, 10));\r\n        // Week 19\r\n        weeklyFee.push(FeeSet(40, 50, 10));\r\n\r\n        buyFee = FeeSet(15, 25, 10);\r\n\r\n        dividendTracker = new DividendTracker(tokenSymbol_.appendString(\"-DT\"), decimals(), minimumTokenBalanceForDividends_);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n\r\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(address(0));\r\n        dividendTracker.excludeFromDividends(owner());\r\n\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n\r\n        swapTokensAtAmount = swapTokensAtAmount_ * (10 ** decimals());\r\n        _mint(owner(), totalSupply_ * (10 ** decimals()));\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function isExcludedFromFees(address account) external view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function getNumOfWeeksTokenHeldFor(address _address) external view returns (uint256) {\r\n        return (block.timestamp - effectiveObtainTime[_address]) / oneWeek;\r\n    }\r\n\r\n    function embargoAddress(address account, bool shouldEmbargo) external onlyOwner() {\r\n        embargoedAddresses[account] = shouldEmbargo;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner() {\r\n        require(_isExcludedFromFees[account] != excluded, \"Account is already excluded\");\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner() {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n\r\n    function setIsSwappingEnabled(bool shouldEnable) external onlyOwner() {\r\n        isSwappingEnabled = shouldEnable;\r\n    }\r\n\r\n    function setTradingEnabled() external onlyOwner() {\r\n        require(!isTradingEnabled, \"Trading already enabled\");\r\n        isTradingEnabled = true;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) external onlyOwner() {\r\n        emit SetSwapTokensAtAmount(swapTokensAtAmount, _swapTokensAtAmount);\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n    }\r\n\r\n    function setBuyFees(uint256 burnFee, uint256 holderFee, uint256 liquidityFee) external onlyOwner() {\r\n        buyFee.burnFee = burnFee;\r\n        buyFee.holderFee = holderFee;\r\n        buyFee.liquidityFee = liquidityFee;\r\n\r\n        uint256 total = burnFee + holderFee + liquidityFee;\r\n        require(total <= 50, \"Invalid total buy fee.\");\r\n    }\r\n\r\n    function setWeeklyFees(uint256 weekNumber, uint256 burnFee, uint256 holderFee, uint256 liquidityFee) external onlyOwner() {\r\n        require(weekNumber < weeklyFee.length, \"Invalid weekNumber\");\r\n\r\n        weeklyFee[weekNumber].burnFee = burnFee;\r\n        weeklyFee[weekNumber].holderFee = holderFee;\r\n        weeklyFee[weekNumber].liquidityFee = liquidityFee;\r\n\r\n        uint256 total = burnFee + holderFee + liquidityFee;\r\n        require(total <= 300, \"Invalid total week fee.\");\r\n    }\r\n\r\n    function recoverLostCoins(address coinAddress, address receiveWallet, uint256 amount) external onlyOwner() {\r\n        require(coinAddress != address(this), \"Cannot recover self\");\r\n        IERC20(coinAddress).transfer(receiveWallet, amount);\r\n    }\r\n\r\n    function subTransfer(address from, address to, uint256 amount) internal {\r\n        if (amount <= 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 oldBalance = balanceOf(to);\r\n        super._transfer(from, to, amount);\r\n        uint256 newBalance = balanceOf(to);\r\n\r\n        uint256 deltaBalance = newBalance - oldBalance;\r\n        uint256 timeCenterOfAmount = ((oldBalance * effectiveObtainTime[to]) + (deltaBalance * block.timestamp)) / newBalance;\r\n\r\n        effectiveObtainTime[to] = (timeCenterOfAmount > block.timestamp) ? block.timestamp : timeCenterOfAmount;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"Transfer from the zero address\");\r\n        if (from != owner() && to != owner()) {\r\n            require(!embargoedAddresses[from] && !embargoedAddresses[to], \"Cannot associate with embargoed users\");\r\n        }\r\n\r\n        if (isInitialEntrance && !swapping) {\r\n            uint256 requiredGasValue = gasForProcessing + 400000;\r\n            require(\r\n                gasleft() >= requiredGasValue,\r\n                \"Insufficient Gas. Try again with gasLimt of at least \".appendString((requiredGasValue + 100000).toString())\r\n            );\r\n            isInitialEntrance = false;\r\n        }\r\n\r\n        if (!isTradingEnabled) {\r\n            require(canTransferBeforeTradingIsEnabled[from], \"This account cannot send tokens until trading is enabled\");\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount && isTradingEnabled && !swapping &&\r\n        !automatedMarketMakerPairs[from] && isSwappingEnabled && from != owner() && to != owner();\r\n\r\n        if (canSwap) {\r\n            swapping = true;\r\n\r\n            swapAndLiquify(availableLiquidityFee);\r\n            availableLiquidityFee = 0;\r\n\r\n            swapAndSendDividends(availableHolderFee);\r\n            availableHolderFee = 0;\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !(swapping || _isExcludedFromFees[from] || _isExcludedFromFees[to] || !isTradingEnabled);\r\n\r\n        if (takeFee) {\r\n            FeeSet storage currentFeeSet;\r\n\r\n            if (automatedMarketMakerPairs[from]) {\r\n                currentFeeSet = buyFee;\r\n            } else {\r\n                uint256 holdWeeks = (block.timestamp - effectiveObtainTime[from]) / oneWeek;\r\n                if (holdWeeks >= weeklyFee.length) {\r\n                    holdWeeks = weeklyFee.length - 1;\r\n                }\r\n                currentFeeSet = weeklyFee[holdWeeks];\r\n                emit FeeChargedAfterHoldingFor(from, holdWeeks, effectiveObtainTime[from], block.timestamp);\r\n            }\r\n\r\n            uint256 burnFees = (amount * currentFeeSet.burnFee) / 1000;\r\n            uint256 liquidityFees = (amount * currentFeeSet.liquidityFee) / 1000;\r\n            uint256 holderFees = (amount * currentFeeSet.holderFee) / 1000;\r\n\r\n            availableHolderFee = availableHolderFee + holderFees;\r\n            availableLiquidityFee = availableLiquidityFee + liquidityFees;\r\n\r\n            amount = ((amount - burnFees) - liquidityFees) - holderFees;\r\n            _burn(from, burnFees);\r\n            subTransfer(from, address(this), liquidityFees + holderFees);\r\n        }\r\n        subTransfer(from, to, amount);\r\n\r\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if (!swapping) {\r\n            try dividendTracker.process(gasForProcessing) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gasForProcessing, tx.origin);\r\n            } catch {}\r\n\r\n            isInitialEntrance = true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(balanceOf(msg.sender) >= amount, \"Insufficient Balance\");\r\n        _burn(msg.sender, amount);\r\n        try dividendTracker.setBalance(payable(msg.sender), balanceOf(msg.sender)) {} catch {}\r\n    }\r\n\r\n    // -----------------------------Dividend Related------------------------------------- //\r\n\r\n    function updateDividendTracker(address newAddress) external onlyOwner() {\r\n        require(newAddress != address(dividendTracker), \"The dividend tracker already has that address\");\r\n\r\n        DividendTracker newDividendTracker = DividendTracker(payable(newAddress));\r\n\r\n        require(newDividendTracker.owner() == address(this), \"The new dividend tracker has wrong owner\");\r\n\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(address(0));\r\n        newDividendTracker.excludeFromDividends(owner());\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner() {\r\n        require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n        require(newValue <= block.gaslimit - 500000, \"New Value too High\");\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner() {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) external view returns (uint256) {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account) external view returns (uint256) {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account) external view returns (\r\n        address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index) external view returns (\r\n        address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(_msgSender()), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function getMinimumTokenBalanceForDividends() external view returns (uint256) {\r\n        return dividendTracker.minimumTokenBalanceForDividends();\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        swapTokensForEth(tokens);\r\n        uint256 dividends = address(this).balance;\r\n        (bool success,) = address(dividendTracker).call{value : dividends}(\"\");\r\n\r\n        if (success) {\r\n            emit SendDividends(tokens, dividends);\r\n        }\r\n    }\r\n\r\n    // -------------------------- AMM Related ------------------------------- //\r\n\r\n    function updateUniswapV2Router(address newAddress) external onlyOwner() {\r\n        require(newAddress != address(uniswapV2Router), \"The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner() {\r\n        require(pair != uniswapV2Pair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens / 2;\r\n        uint256 otherHalf = tokens - half;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half);\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value : ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForDividends_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfWeeks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTimestamp\",\"type\":\"uint256\"}],\"name\":\"FeeChargedAfterHoldingFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"effectiveObtainTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldEmbargo\",\"type\":\"bool\"}],\"name\":\"embargoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"embargoedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNumOfWeeksTokenHeldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwappingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverLostCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldEnable\",\"type\":\"bool\"}],\"name\":\"setIsSwappingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weekNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setWeeklyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BNBDividendPayingERC20Token", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000000002faf080000000000000000000000000000000000000000000000000000000000ee6b2800000000000000000000000000000000000000000000000000000000000000007537761702054430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065357415054430000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6cf6215d193d1abf85adfa6fd26123f665697af7a347a9751f55fd553708bab"}