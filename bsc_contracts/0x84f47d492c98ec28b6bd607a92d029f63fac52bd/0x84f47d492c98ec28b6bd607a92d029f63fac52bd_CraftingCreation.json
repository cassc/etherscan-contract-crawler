{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */ \\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BaseStep.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\nimport { DataTypes } from \\\"./libraries/DataTypes.sol\\\";\\nimport \\\"./interfaces/IBaseStep.sol\\\";\\n\\n/// @title BaseStep \\n/// @author Urriza\\n/// @notice This contract will be used to manage the buyments of the skip times in the crafting system.\\n/// @dev Inherits from Initializable, AccessControlEnumerableUpgradeable and PausableUpgradeable for upgradeability,\\n/// access control and pausable features. It also implements the IBaseStep interface.\\ncontract BaseStep is \\n    Initializable, \\n    AccessControlEnumerableUpgradeable,\\n    IBaseStep \\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ============== CONSTANTS ==============\\n\\n    /// @notice The role identifier for the manager who can change the configuration variables.\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @notice Constant to store the multiplier applied to handle decimals.\\n    uint256 public constant MULTIPLIER = 10_000;\\n\\n    /// @notice Constant to store the time unit in which the skipTimePrice will be stored (hours).\\n    uint256 public constant SKIP_TIME_SECONDS = 3_600;\\n\\n    // ============== VARIABLES ==============\\n\\n    /// @notice Variable to store the CraftingSharedStorage contract address.\\n    ICraftingSharedStorage public craftingSharedStorage;\\n\\n    /// @notice Variable to store the GQ oracle prices address.\\n    IGQOracle public oracle;\\n\\n    /// @notice Variable to store the LandStaking contract address. \\n    ILandStaking public landStaking;\\n\\n    /// @notice Variable to store the total amount of resources used.\\n    uint256 public totalResourcesUsed;\\n\\n    /// @notice Storage gap for possible new variables.\\n    uint256[46] __gapBaseStep; \\n\\n    // ============== INITIALIZE ==============\\n\\n    function __BaseStep_init(\\n        ICraftingSharedStorage _craftingSharedStorage,\\n        IGQOracle _oracle,\\n        ILandStaking _landStaking\\n    ) \\n        internal \\n        onlyInitializing \\n    {\\n        __BaseStep_init_unchained(_craftingSharedStorage, _oracle, _landStaking);\\n    }\\n\\n    function __BaseStep_init_unchained(\\n        ICraftingSharedStorage _craftingSharedStorage,\\n        IGQOracle _oracle,\\n        ILandStaking _landStaking\\n    ) \\n        internal \\n        onlyInitializing \\n    {\\n        if (address(_craftingSharedStorage) == address(0)) revert CraftingSharedStorageZeroAddress();        \\n        craftingSharedStorage = _craftingSharedStorage;\\n        if (address(_oracle) == address(0)) revert OracleZeroAddress();        \\n        oracle = _oracle;\\n        if (address(_landStaking) == address(0)) revert LandStakingZeroAddress();        \\n        landStaking = _landStaking;\\n\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ============== EXTERNAL FUNCTIONS ==============\\n\\n    /// @inheritdoc IBaseStep\\n    function changeCraftingSharedStorage(\\n        ICraftingSharedStorage _craftingSharedStorage\\n    ) \\n        external \\n        onlyRole(MANAGER_ROLE) \\n    {\\n        if (address(_craftingSharedStorage) == address(0)) revert CraftingSharedStorageZeroAddress();\\n        craftingSharedStorage = _craftingSharedStorage;\\n\\n        emit CraftingSharedStorageChanged(msg.sender, _craftingSharedStorage);\\n    }\\n\\n    /// @inheritdoc IBaseStep\\n    function changeOracle(\\n        IGQOracle _oracle\\n    ) \\n        external \\n        onlyRole(MANAGER_ROLE) \\n    {\\n        if (address(_oracle) == address(0)) revert OracleZeroAddress();\\n        oracle = _oracle;\\n\\n        emit OracleChanged(msg.sender, address(_oracle));\\n    }\\n\\n    /// @inheritdoc IBaseStep\\n    function changeLandStaking(\\n        ILandStaking _landStaking\\n    ) \\n        external \\n        onlyRole(MANAGER_ROLE) \\n    {\\n        if (address(_landStaking) == address(0)) revert LandStakingZeroAddress();\\n        landStaking = _landStaking;\\n\\n        emit LandStakingChanged(msg.sender, _landStaking);\\n    }\\n\\n    // ============== INTERNAL FUNCTIONS ==============\\n\\n    /// @notice Function that returns the price of a skip time.\\n    /// @param endTime Crafting end time.\\n    /// @param skipTimePrice Skip time price of the piece being crafted.\\n    function _getSkipCraftingTimePrice(\\n        uint256 endTime,\\n        uint256 skipTimePrice\\n    ) internal view returns (uint256) {\\n        // Compute the skip time price in GQ\\n        uint256 skipTimePriceGQ = oracle.convertBUSDToGQ(skipTimePrice);\\n\\n        // Compute the total price according to the remaining crafting time\\n        uint256 totalPrice = skipTimePriceGQ * (endTime - block.timestamp) / SKIP_TIME_SECONDS;\\n\\n        return totalPrice;\\n    }\\n\\n    /// @notice Function that executes the buyment of a skip time.\\n    /// @param user User that buys the skip time.  \\n    /// @param endTime Crafting end time.\\n    /// @param skipTimePrice Skip time price of the piece being crafted.\\n    function _buySkipCraftingTime(\\n        address user,        \\n        uint256 endTime,\\n        uint256 skipTimePrice\\n    ) internal {\\n        // Get the required information from the storage\\n        address craftingToken = craftingSharedStorage.craftingToken();\\n        address paymentRecipient = craftingSharedStorage.paymentRecipient();\\n\\n        // Compute the skip time price in GQ\\n        uint256 skipTimePriceGQ = oracle.convertBUSDToGQ(skipTimePrice);\\n\\n        // Compute the total price according to the remaining crafting time\\n        uint256 totalPrice = skipTimePriceGQ * (endTime - block.timestamp) / SKIP_TIME_SECONDS;\\n\\n        // Transfer the amount from the user to the payment recipient\\n        IERC20Upgradeable(craftingToken).safeTransferFrom(\\n            user,\\n            paymentRecipient,\\n            totalPrice\\n        );\\n    }\\n\\n    /// @notice Function that returns the new resource cost of a crafting after aplying the cost reduction from the staked Land.\\n    /// @param user The user. \\n    /// @param resources The resources cost of the item crafting. \\n    function _computeCraftingCostReduction(\\n        address user,\\n        SharedStructs.Resource[] memory resources\\n    ) internal view returns (SharedStructs.Resource[] memory) {\\n        uint256 craftingCostReduction = landStaking.getUserCraftingCostReduction(user);\\n\\n        if (craftingCostReduction != 0) {\\n            uint256 costReduction;\\n            uint256 numResources = resources.length;\\n\\n            for (uint256 i; i < numResources;) {\\n                uint256 amount = resources[i].amount;\\n                costReduction = (amount * craftingCostReduction) / MULTIPLIER;\\n\\n                resources[i].amount = amount - costReduction;\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        return resources;\\n    }\\n\\n    /// @notice Function that returns the new endTime of a crafting after aplying the time reduction from the staked Land.\\n    /// @param user The user. \\n    /// @param craftingTime The craftingTime of the item. \\n    function _computeCraftingTimeReduction( \\n        address user,\\n        uint256 craftingTime\\n    ) internal returns (uint256) {\\n        uint256 timeReductionPerc = landStaking.getUserCraftingTimeReduction(user);\\n        uint256 timeReduction;\\n\\n        uint256 endTime = block.timestamp + craftingTime;\\n\\n        if (timeReductionPerc != 0) {\\n            timeReduction = (craftingTime * timeReductionPerc) / MULTIPLIER;\\n\\n            string memory size = landStaking.getUserTopLandSize(user);\\n            if (landStaking.getUserStaking(user, size).endTime < endTime - timeReduction) {\\n                landStaking.setTopLandBlockDuration(user, craftingTime - timeReduction);\\n            }\\n        }\\n\\n        return endTime - timeReduction;\\n    }\\n}\"\r\n    },\r\n    \"contracts/CraftingCreation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\nimport \\\"./BaseStep.sol\\\";\\nimport \\\"./interfaces/ICraftingCreation.sol\\\";\\nimport \\\"./interfaces/IResourcesController.sol\\\";\\nimport \\\"./storage/interfaces/ICraftingSharedStorage.sol\\\";\\nimport \\\"./landStaking/ILandStaking.sol\\\";\\nimport \\\"./tokens/ArmorERC721.sol\\\";\\nimport \\\"./tokens/WeaponERC721.sol\\\";\\n\\nimport { DataTypes } from \\\"./libraries/DataTypes.sol\\\";\\nimport { SharedStructs } from \\\"./libraries/SharedStructs.sol\\\";\\n\\n/// @title CraftingCreation \\n/// @author Urriza\\n/// @notice This contract will be used to manage creation step in the crafting system.\\n/// @dev Inherits from Initializable, AccessControlEnumerableUpgradeable, PausableUpgradeable and BaseStep for upgradeability,\\n/// access control, pausable features and management of skip times. \\n/// It also implements the IERC721ReceiverUpgradeable for ERC712 Management and the ICraftingCreation interfaces.\\ncontract CraftingCreation is \\n    Initializable, \\n    AccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    IERC721ReceiverUpgradeable,\\n    BaseStep,\\n    ICraftingCreation \\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ============== CONSTANTS ==============\\n\\n    /// @notice The role identifier for the pauser.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    // ============== VARIABLES ==============\\n\\n    /// @notice Variable for knowing if contract has been initialized. \\n    bool public initialized;\\n\\n    /// @notice Variable to store the ResourcesController contract address.\\n    IResourcesController public resourcesController;\\n\\n    /// @notice Variable to store the CraftingStyling contract address.\\n    ICraftingStyling public craftingStyling;\\n\\n    /// @notice Mapping to store if the creation of an item is paused.\\n    /// NftType => ItemId => State\\n    /// True == Item assemble unpaused / False == Item assemble paused.\\n    mapping(DataTypes.NftType => mapping(uint8 => bool)) public itemCreationState;\\n\\n    /// @notice Mapping to store the information regarding the Tier assigned to each Pool.\\n    /// PoolId => Tier\\n    mapping(uint256 => uint256) public poolTiers;\\n\\n    /// @notice Mapping to store the information about the user's item creations in the different Pools.\\n    /// User => PoolId => CreationItem\\n    mapping(address => mapping(uint256 => CreationItem)) public userCreationItems;\\n\\n    /// @notice Mapping to store the information regarding the Price assigned to each Pool.\\n    /// PoolId => Price\\n    mapping(uint256 => uint256) public poolPrices;\\n\\n    /// @notice Mapping to store the information regarding the crafted items per user per tier.\\n    /// Tier => User => Number of crafted items\\n    mapping(uint256 => mapping(address => uint256)) public userCraftedItemsByTier;\\n\\n    /// @notice Mapping to store the information regarding the required crafted items per tier.\\n    /// Tier => Number of required crafted items\\n    mapping(uint256 => uint256) public requiredCraftedItemsByTier;\\n\\n    /// @notice Storage gap for possible new variables.\\n    uint256[42] __gapCreation; \\n\\n    // ============== MODIFIERS ==============\\n\\n    /// @notice Modifier that will return true only when contract is initialized.\\n    modifier isInitialized() {\\n        if (!initialized) revert ContractNotInitialized();\\n        _;\\n    }\\n\\n    //============== CONSTRUCTOR ==============\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ============== INITIALIZE ==============\\n\\n    function initialize(\\n        ICraftingSharedStorage craftingSharedStorageAddress,\\n        IGQOracle oracleAddress,\\n        ILandStaking landStakingAddress,\\n        IResourcesController resourcesControllerAddress,\\n        ICraftingStyling craftingStylingAddress\\n    )\\n        external \\n        initializer \\n    {\\n        if (address(craftingStylingAddress) == address(0)) revert CraftingStylingZeroAddress();\\n        craftingStyling = craftingStylingAddress;\\n        if (address(resourcesControllerAddress) == address(0)) revert ResourcesControllerZeroAddress();\\n        resourcesController = resourcesControllerAddress;\\n\\n        __AccessControlEnumerable_init();\\n        __Pausable_init();\\n        __BaseStep_init(craftingSharedStorageAddress, oracleAddress, landStakingAddress);\\n\\n        initialized = true;\\n\\n        poolTiers[0] = 1;\\n        poolTiers[1] = 2;\\n        poolTiers[2] = 3;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ============== EXTERNAL FUNCTIONS ==============\\n\\n    /// @inheritdoc IERC721ReceiverUpgradeable\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function changeResourcesController(\\n        IResourcesController resourcesController_\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        if (address(resourcesController_) == address(0)) revert ResourcesControllerZeroAddress();\\n        resourcesController = resourcesController_;\\n\\n        emit ResourcesControllerChanged(msg.sender, resourcesController_);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function changeCraftingStyling(\\n        ICraftingStyling craftingStyling_\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        if (address(craftingStyling_) == address(0)) revert CraftingStylingZeroAddress();\\n        craftingStyling = craftingStyling_;\\n\\n        emit CraftingStylingChanged(msg.sender, craftingStyling_);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function changePoolPrice(\\n        uint256 poolId,\\n        uint256 price\\n    )         \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        poolPrices[poolId] = price;\\n\\n        emit PoolPriceChanged(msg.sender, poolId, price);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function changeRequiredCraftedItems(\\n        uint256 tier,\\n        uint256 requiredCraftedItems\\n    )         \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        requiredCraftedItemsByTier[tier] = requiredCraftedItems;\\n\\n        emit RequiredCraftedItemsChanged(msg.sender, tier, requiredCraftedItems);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function checkTierStatusByUser(\\n        uint8 tier,\\n        address user\\n    ) external view returns(bool) {\\n        return userCraftedItemsByTier[tier-1][user] >= requiredCraftedItemsByTier[tier];\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function updateItemCreationState(\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        bool newState\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        itemCreationState[nftType][itemId] = newState;\\n\\n        emit ItemCreationStateUpdated(msg.sender, nftType, itemId, newState);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function getCraftingFeeInBNB() external view returns (uint256) {\\n        uint256 craftingFee = craftingSharedStorage.craftingFee();\\n\\n        return oracle.getBNBAmountByStable(craftingFee);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function getPoolPriceInGQ(\\n        uint256 poolId\\n    ) external view returns (uint256) {\\n        return oracle.convertBUSDToGQ(poolPrices[poolId]);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function createItem(\\n        uint256 poolId,\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        uint8 tier,\\n        DataTypes.Elements element\\n    ) \\n        external \\n        payable\\n        whenNotPaused\\n        isInitialized \\n    {        \\n        // Check if the specified Tier matches the tier of the Pool\\n        if (tier != poolTiers[poolId]) revert InvalidTierForPool(poolId, tier);\\n\\n        // Check if the user has the Tier available\\n        if (userCraftedItemsByTier[tier-1][msg.sender] < requiredCraftedItemsByTier[tier]) revert TierLocked(tier);\\n\\n        // Check if the creation of the item is paused\\n        if (!itemCreationState[nftType][itemId]) revert ItemCreationPaused(nftType, itemId);\\n\\n        // Get the CreationItem info regarding the Pool data\\n        CreationItem memory creationItem = userCreationItems[msg.sender][poolId];\\n\\n        // Check if there is already an item on the specified Pool\\n        if (creationItem.exists) revert PoolRequestedNotAvailable(poolId);\\n\\n        // Check if the element is valid (Only for weapons)\\n        if (nftType == DataTypes.NftType.WEAPON && !craftingSharedStorage.isWeaponTypeElementValid(itemId, element)) revert ElementNotValid(nftType, itemId, element);\\n\\n        // Extract the crafting fee from the BNB sent\\n        _extractCraftingFee();\\n\\n        // If the pool has a price, execute the payment\\n        if (poolPrices[poolId] != 0) {\\n            _executePoolPayment(msg.sender, poolPrices[poolId]);\\n        }\\n\\n        // Get the crafting info\\n        SharedStructs.CraftingInfo memory itemCraftingInfo = craftingSharedStorage.getCraftingInfo(nftType, itemId, tier, DataTypes.Step.CREATION);\\n\\n        // The item must have defined the resources needed for the specified tier\\n        SharedStructs.Resource[] memory resources = itemCraftingInfo.resources;\\n        uint256 resourcesNumber = resources.length;\\n        if (resourcesNumber == 0) revert ItemTierResourcesNotDefined(nftType, itemId, tier);\\n\\n        // Check if the user has a staked Land in order to apply the cost reductions\\n        resources = _computeCraftingCostReduction(msg.sender, resources);\\n        // Burn the needed resources to create the item (Approve is needed before calling this function)\\n        totalResourcesUsed += resourcesController.burnUserResources(msg.sender, resources);\\n\\n        // Mint the item\\n        uint256 tokenId = _mintNFT(\\n            nftType,\\n            msg.sender, \\n            itemId,\\n            tier\\n        );\\n\\n        // Add a new crafting for the user\\n        uint256 craftingId = craftingSharedStorage.addNewCrafting(\\n            nftType,\\n            itemId,\\n            tier,\\n            msg.sender, \\n            element,\\n            tokenId\\n        );           \\n\\n        // Check if the user has a staked Land in order to apply the time reductions\\n        uint256 endTime = _computeCraftingTimeReduction(msg.sender, itemCraftingInfo.craftingTime);\\n\\n        // Add the new crafting to the specified pool\\n        userCreationItems[msg.sender][poolId] = CreationItem({\\n            craftingId: craftingId,\\n            endTime: uint64(endTime),\\n            started: true,\\n            exists: true\\n        });\\n\\n        // Update the user crafted items for the tier\\n        userCraftedItemsByTier[tier][msg.sender]++;\\n\\n        emit ItemCreated(msg.sender, craftingId, poolId, nftType, itemId, uint64(endTime), tier);\\n    }\\n    \\n    /// @inheritdoc ICraftingCreation\\n    function getSkipCraftingTimePriceInGQ (\\n        address user,\\n        uint256 poolId\\n    ) external view returns (uint256) {\\n        // Get the CreationItem info regarding the Pool data\\n        CreationItem storage creationItem = userCreationItems[user][poolId];\\n\\n        // Check if the creation item doesn't exist or has been already sent to styling\\n        if (!creationItem.exists) return 0;\\n\\n        // Get the CraftingItem info regarding the shared data\\n        SharedStructs.CraftingItem memory craftingItem = craftingSharedStorage.getCraftingItem(creationItem.craftingId);\\n        \\n        // Check if the crafting period has ended \\n        if (block.timestamp >= creationItem.endTime) return 0;\\n\\n        // Get the CraftingInfo regarding the configuration data\\n        SharedStructs.CraftingInfo memory itemCraftingInfo = craftingSharedStorage.getCraftingInfo(\\n            craftingItem.nftType, \\n            craftingItem.itemId, \\n            craftingItem.tier, \\n            DataTypes.Step.CREATION\\n        );\\n\\n        // Return the skip crafting time price\\n        return _getSkipCraftingTimePrice(creationItem.endTime, itemCraftingInfo.skipTimePrice);\\n    }\\n\\n    /// @inheritdoc ICraftingCreation\\n    function skipCraftingTime(\\n        uint256 poolId\\n    ) \\n        external\\n        whenNotPaused\\n        isInitialized\\n    {\\n        // Get the CreationItem info regarding the Pool data\\n        CreationItem storage creationItem = userCreationItems[msg.sender][poolId];\\n\\n        // Check if the creation item doesn't exist or has been already sent to styling\\n        if (!creationItem.exists) revert ItemCraftingDoesNotExistOrAlreadySent(msg.sender, poolId);\\n\\n        // Get the CraftingItem info regarding the shared data\\n        SharedStructs.CraftingItem memory craftingItem = craftingSharedStorage.getCraftingItem(creationItem.craftingId);\\n        \\n        // Check if the crafting period has ended \\n        if (block.timestamp >= creationItem.endTime) revert ItemCraftingFinished(creationItem.craftingId);\\n\\n        // Get the CraftingInfo regarding the configuration data\\n        SharedStructs.CraftingInfo memory itemCraftingInfo = craftingSharedStorage.getCraftingInfo(\\n            craftingItem.nftType, \\n            craftingItem.itemId, \\n            craftingItem.tier, \\n            DataTypes.Step.CREATION\\n        );\\n\\n        // Compute the remaining time of the crafting, as well as its price\\n        _buySkipCraftingTime(msg.sender, creationItem.endTime, itemCraftingInfo.skipTimePrice);\\n\\n        // Update the user craftings to set the end of the crafting\\n        creationItem.endTime = uint64(block.timestamp);\\n        \\n        emit ItemSkipTime(msg.sender, creationItem.craftingId, craftingItem.nftType, craftingItem.itemId, uint64(block.timestamp));\\n    }\\n\\n     /// @inheritdoc ICraftingCreation\\n    function sendToStyling(      \\n        uint256 poolId\\n    ) \\n        external \\n        whenNotPaused\\n        isInitialized \\n    {\\n        // Get the CreationItem info regarding the Pool data\\n        CreationItem storage creationItem = userCreationItems[msg.sender][poolId];\\n\\n        // Check if the creation item doesn't exist or has been already sent to styling\\n        if (!creationItem.exists) revert ItemCraftingDoesNotExistOrAlreadySent(msg.sender, poolId);\\n\\n        // Get the CraftingItem info regarding the shared data\\n        SharedStructs.CraftingItem memory craftingItem = craftingSharedStorage.getCraftingItem(creationItem.craftingId);\\n\\n        // Check if the crafting period has ended\\n        if (block.timestamp < creationItem.endTime) revert ItemCraftingNotFinished(creationItem.craftingId);\\n\\n        // Add the item to the available pool in the CraftingStyling contract\\n        craftingStyling.addItem(creationItem.craftingId, msg.sender);\\n\\n        // Update the pool status to allow future craftings\\n        delete userCreationItems[msg.sender][poolId];\\n\\n        if (craftingItem.nftType == DataTypes.NftType.ARMOR) {\\n            address armorPieceAddress = craftingSharedStorage.getArmorPieceAddress();\\n\\n            // Transfer the armor to the Styling contract\\n            ArmorERC721(armorPieceAddress).safeTransferFrom(address(this), address(craftingStyling), craftingItem.tokenId);\\n        }\\n        else { \\n            address weaponTypeAddress = craftingSharedStorage.getWeaponTypeAddress();\\n\\n            // Transfer the weapon to the Styling contract\\n            WeaponERC721(weaponTypeAddress).safeTransferFrom(address(this), address(craftingStyling), craftingItem.tokenId);\\n        }\\n\\n        emit ItemSentToStyling(msg.sender, creationItem.craftingId);\\n    }\\n\\n    // ============== INTERNAL FUNCTIONS ==============\\n\\n    /// @notice Extracts the crafting fee from the BNB amount.\\n    function _extractCraftingFee() internal {\\n        uint256 craftingFee = craftingSharedStorage.craftingFee();\\n        uint256 oracleCraftingFee = oracle.getBNBAmountByStable(craftingFee);\\n\\n        // Check if there is enough BNB to cover the staking fee\\n        if(msg.value < oracleCraftingFee) revert NotEnoughBNBSent(msg.value);\\n\\n        // Check if the msg.value is inside the 5% interval\\n        if (msg.value > (oracleCraftingFee * 10_500) / MULTIPLIER) revert BNBAmountSentExceeded(msg.value);\\n\\n        // Transfer the crafting fee to the fee receiver\\n        address feeRecipient = craftingSharedStorage.feeRecipient();\\n\\n        (bool result, ) = feeRecipient.call{value: msg.value}(\\\"\\\");\\n        require(result, \\\"Failed to send BNB to the fee receiver address\\\");\\n    }\\n\\n    /// @notice Function that executes the payment of a pool.\\n    /// @param user User creates the item.  \\n    /// @param price Pool price.\\n    function _executePoolPayment(\\n        address user,        \\n        uint256 price\\n    ) internal {\\n        // Get the required information from the storage\\n        address craftingToken = craftingSharedStorage.craftingToken();\\n        address paymentRecipient = craftingSharedStorage.paymentRecipient();\\n\\n        // Compute the pool price in GQ\\n        uint256 poolPriceGQ = oracle.convertBUSDToGQ(price);\\n\\n        // Transfer the amount from the user to the payment recipient\\n        IERC20Upgradeable(craftingToken).safeTransferFrom(\\n            user,\\n            paymentRecipient,\\n            poolPriceGQ\\n        );\\n    }\\n\\n    /// @notice Function that mints an NFT of a certain type (Armor/Weapon).\\n    /// @param nftType The type of the NFT (Armor/Weapon).     \\n    /// @param owner The owner of the item.    \\n    /// @param itemId The id of the item.    \\n    /// @param tier The tier of the item.    \\n    function _mintNFT(\\n        DataTypes.NftType nftType,\\n        address owner,\\n        uint8 itemId,\\n        uint8 tier\\n    )         \\n        internal \\n        returns (uint256 tokenId)\\n    {\\n        if (nftType == DataTypes.NftType.ARMOR) {\\n            // Mint the armor\\n            address armorPieceAddress = craftingSharedStorage.getArmorPieceAddress();\\n\\n            tokenId = ArmorERC721(armorPieceAddress).armorPieceMint(\\n                address(this),\\n                craftingSharedStorage.defaultURI(),\\n                SharedStructs.ItemInfo(\\n                    tier,                  \\n                    0,             \\n                    \\\"\\\",                               \\n                    craftingSharedStorage.collectionId(),                 \\n                    craftingSharedStorage.collectionName(),\\n                    owner,\\n                    itemId\\n                )\\n            );\\n        }\\n        else {\\n            // Mint the weapon\\n            address weaponTypeAddress = craftingSharedStorage.getWeaponTypeAddress();\\n\\n            tokenId = WeaponERC721(weaponTypeAddress).weaponMint(\\n                address(this),\\n                craftingSharedStorage.defaultURI(),\\n                SharedStructs.ItemInfo(\\n                    tier,                  \\n                    0,             \\n                    \\\"\\\",                               \\n                    craftingSharedStorage.collectionId(),                 \\n                    craftingSharedStorage.collectionName(),\\n                    owner,\\n                    itemId\\n                )\\n            );\\n        }\\n\\n        emit ItemMinted(owner, nftType, itemId, tokenId, tier);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBaseStep.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./../storage/interfaces/ICraftingSharedStorage.sol\\\";\\nimport \\\"../oracles/prices/interfaces/IGQOracle.sol\\\";\\nimport \\\"../landStaking/ILandStaking.sol\\\";\\n\\n/// @title The interface for the BaseStep contract.\\n/// @notice This interface facilitates common functionalities for all steps.\\ninterface IBaseStep {\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when trying to set the crafting shared storage to the address 0.\\n    error CraftingSharedStorageZeroAddress();\\n\\n    /// @notice Error when trying to set the GQ oracle address to the address 0.\\n    error OracleZeroAddress();\\n\\n    /// @notice Error when trying to set the land staking to the address 0.\\n    error LandStakingZeroAddress();\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when the address of the shared crafting storage contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newCraftingSharedStorage The new address of the shared crafting storage contract.\\n    event CraftingSharedStorageChanged (\\n        address indexed sender,\\n        ICraftingSharedStorage indexed newCraftingSharedStorage\\n    );\\n\\n    /// @notice Event emitted when the GQ oracle address is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newOracleAddress The new GQ oracle address.\\n    event OracleChanged (\\n        address indexed sender,\\n        address newOracleAddress\\n    );\\n\\n    /// @notice Event emitted when the address of the land staking contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newLandStaking The new address of the land staking contract.\\n    event LandStakingChanged (\\n        address indexed sender,\\n        ILandStaking indexed newLandStaking\\n    );\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Function that changes the address of the crafting shared storage contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.      \\n    /// @param _craftingSharedStorage The new crafting shared storage contract address.\\n    function changeCraftingSharedStorage(\\n        ICraftingSharedStorage _craftingSharedStorage\\n    ) external;\\n\\n    /// @notice Function that changes the GQ oracle address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param _oracle The GQ oracle address.\\n    function changeOracle(\\n        IGQOracle _oracle\\n    ) external;\\n\\n    /// @notice Function that changes the address of the land staking contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.      \\n    /// @param _landStaking The new land staking contract address.\\n    function changeLandStaking(\\n        ILandStaking _landStaking\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICraftingAssembly.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\nimport \\\"./IBaseStep.sol\\\";\\nimport \\\"./IResourcesController.sol\\\";\\n\\n/// @title The interface for the Crafting Assembly step.\\n/// @notice This interface facilitates the Assembly step functionalities\\ninterface ICraftingAssembly {\\n\\n    // ============== STRUCTS ==============\\n\\n    /// @notice Struct to store the Assembly Items information.\\n    struct AssemblyItem {\\n        uint256 craftingId;\\n        uint64 endTime;\\n        bool started;\\n        bool exists;\\n    }\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    /// @notice Error when trying to set the resources controller address to the address 0.\\n    error ResourcesControllerZeroAddress();\\n\\n    /// @notice Error when trying to add a item from the styling contract but there is no pool available.\\n    error NoPoolAvailable(address user);\\n\\n    /// @notice Error when for a specified armor piece and tier, there aren't resources defined.\\n    error ItemTierResourcesNotDefined(DataTypes.NftType nftType, uint8 itemId, uint8 tier);\\n\\n    /// @notice Error when for a specified tier and rarity booster, there isn't a specified price defined.\\n    error RarityBoosterPriceUndefined(uint8 tier, uint8 rarityBoosterId);\\n\\n    /// @notice Error when trying to send to claim item for which he hasn't got assembly or that he has already claimed.\\n    error ItemAssemblyDoesNotExistOrAlreadyClaimed(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to start an item assembly that has already started.\\n    error ItemAssemblyAlreadyStarted(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to send to assembly/skip time an item that hasn't started it's assembly period.\\n    error ItemAssemblyNotStarted(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to skip the assembly time of an item assembly that has already finished.\\n    error ItemAssemblyAlreadyFinished(uint256 craftingId);\\n\\n    /// @notice Error when trying to send to assembly an item that hasn't end it's assembly.\\n    error ItemAssemblyNotFinished(uint256 craftingId);\\n\\n    /// @notice Error when trying to claim an armor that hasn't got the URI set.\\n    error ArmorURINotSet(uint256 craftingId);\\n\\n        /// @notice Error when trying to claim a weapon that hasn't got the URI set.\\n    error WeaponURINotSet(uint256 craftingId);\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when the address of the resources controller contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newResourcesControllerAddress The new address of the resources controller contract.\\n    event ResourcesControllerChanged (\\n        address indexed sender,\\n        IResourcesController indexed newResourcesControllerAddress\\n    );\\n\\n    /// @notice Event emitted when a rarity booster is bought.\\n    /// @param sender The address of the user that buys the rarity booster.\\n    /// @param tier The tier of the rarity booster.\\n    /// @param rarityBoosterId The id of the rarity booster.\\n    /// @param price The price of the rarity booster.\\n    event RarityBoosterBought (\\n        address indexed sender,\\n        uint8 tier,\\n        uint8 rarityBoosterId,\\n        uint16 price\\n    );\\n\\n    /// @notice Event emitted when an item assembly is created.\\n    /// @param sender The address of the user that creates the item.\\n    /// @param craftingId The id of the crafting.\\n    /// @param poolId The id of the pool.   \\n    event ItemAssemblyCreated (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        uint256 poolId\\n    );\\n\\n    /// @notice Event emitted when an item assembly is started.\\n    /// @param sender The address of the user that starts the assembly.\\n    /// @param craftingId The id of the crafting.\\n    /// @param poolId The id of the pool.\\n    /// @param endTime The endTime of the item assembly.     \\n    event ItemAssemblyStarted (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        uint256 poolId,\\n        uint64 endTime\\n    );\\n\\n    /// @notice Event emitted when a skip time is bought for an item crafting.\\n    /// @param sender The address of the user that buys the skip time.\\n    /// @param craftingId The id of the crafting.\\n    /// @param nftType The type of the NFT (Armor/Weapon).     \\n    /// @param itemId The id of the item.\\n    /// @param newEndTime The new endTime of the item crafting.    \\n    event ItemSkipTime (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        DataTypes.NftType nftType,        \\n        uint8 indexed itemId,\\n        uint64 newEndTime\\n    );\\n\\n    /// @notice Event emitted when an item is claimed.\\n    /// @param sender The address of the user that claims the item.\\n    /// @param craftingId The id of the crafting.  \\n    /// @param itemId The id of the item.\\n    /// @param tokenId The tokenId of the NFT.\\n    /// @param tier The tier of the item.     \\n    event ItemClaimed (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        uint8 indexed itemId,\\n        uint256 tokenId,\\n        uint8 tier  \\n    );\\n\\n    /// @notice Event emitted when an item is completed and ready to be claimed.\\n    /// @param nftType The type of the NFT (Armor/Weapon).     \\n    /// @param itemId The id of the item.  \\n    /// @param owner The address of the owner of the item.\\n    /// @param tokenId The tokenId of the item NFT.\\n    /// @param tier The tier of the item.     \\n    /// @param element The element of the item.     \\n    /// @param rarity The rarity of the item.     \\n    /// @param aesthetics The aesthetics of the item.     \\n    event ItemCompleted (\\n        DataTypes.NftType indexed nftType,  \\n        uint8 indexed itemId,\\n        address indexed owner,\\n        uint256 tokenId,\\n        uint8 tier,\\n        DataTypes.Elements element,\\n        DataTypes.Rarity rarity,\\n        uint8[] aesthetics\\n    );  \\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Pauses all main functionalities.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    function pause() external;\\n\\n    /// @notice Unpauses all main functionalities.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    function unpause() external;\\n \\n    /// @notice Function that changes the address of the resources controller contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param resourcesController_ The new resources controller address.\\n    function changeResourcesController(\\n        IResourcesController resourcesController_\\n    ) external;\\n\\n    /// @notice Function that adds an item to assembly for an user.\\n    /// @dev Only callable when the contract is not paused and by an address with the CREATION_ROLE.\\n    /// @param craftingId The id of the crafting.\\n    /// @param user The user.\\n    function addItem(\\n        uint256 craftingId,\\n        address user\\n    ) external;\\n\\n    /// @notice Function that starts the assembly for an item.\\n    /// @dev Only callable when the contract is not paused.   \\n    /// The RarityBoosterIds must be from 1 to 5, included. \\n    /// If the selected rarityBooster it\u2019s not available for the Tier of the craftingItem the operation will revert.\\n    /// @param poolId The id of pool where is the item. \\n    /// @param rarityBoosterId The id of the rarity booster selected. \\n    function startItemAssembly(\\n        uint256 poolId,\\n        uint8 rarityBoosterId\\n    ) external;\\n\\n    /// @notice Function that returns the rarity booster price from a specified tier in GQ.     \\n    /// @param tier The tier.\\n    /// @param rarityBoosterId The id of the rarity booster selected.\\n    /// @return The optional weapon piece price.\\n    function getRarityBoosterPriceInGQ(\\n        uint8 tier,\\n        uint8 rarityBoosterId\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that returns the skip crafting time price of an item in GQ.     \\n    /// @param user The address of the user.\\n    /// @param poolId The id of the pool where is the item.\\n    /// @return The skip crafting time price.\\n    function getSkipCraftingTimePriceInGQ (\\n        address user,\\n        uint256 poolId\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that skips the crafting time of an item.\\n    /// @dev Only callable when the contract is not paused.   \\n    /// @param poolId The id of the pool where is the item.\\n    function skipCraftingTime(\\n        uint256 poolId\\n    ) external;\\n\\n    /// @notice Function that claims an item and transfers it to the owner.\\n    /// @dev Only callable when the contract is not paused.   \\n    /// @param poolId The id of the pool where is the item.\\n    function claimItem(      \\n        uint256 poolId\\n    ) \\n    external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICraftingCreation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\nimport \\\"./IBaseStep.sol\\\";\\nimport \\\"./IResourcesController.sol\\\";\\nimport \\\"./ICraftingStyling.sol\\\";\\n\\n/// @title The interface for the Crafting Creation step.\\n/// @notice This interface facilitates the Creation step functionalities.\\ninterface ICraftingCreation {\\n\\n    // ============== STRUCTS ==============\\n\\n    /// @notice Struct to store the Creation Items information.\\n    struct CreationItem {\\n        uint256 craftingId;\\n        uint64 endTime;\\n        bool started;\\n        bool exists;\\n    }\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    /// @notice Error when trying to set the resources controller address to the address 0.\\n    error ResourcesControllerZeroAddress();\\n\\n    /// @notice Error when trying to set the crafting styling address to the address 0.\\n    error CraftingStylingZeroAddress();\\n\\n    /// @notice Error when trying to add an item to the creation contract but there is no pool available.\\n    error NoPoolAvailable(address user);\\n\\n    /// @notice Error when the specified tier doesn't match the tier of the pool.\\n    error InvalidTierForPool(uint256 poolId, uint256 tier);\\n\\n    /// @notice Error when trying to create an item for a tier that he hasn't unlocked yet.\\n    error TierLocked(uint256 tier);\\n\\n    /// @notice Error when the creation of an item is paused.\\n    error ItemCreationPaused(DataTypes.NftType nftType, uint8 itemId);\\n\\n    /// @notice Error when trying to create an item to a pool that has already had one.\\n    error PoolRequestedNotAvailable(uint256 poolId);\\n\\n    /// @notice Error when the trying to create an item with an invalid element.\\n    error ElementNotValid(DataTypes.NftType nftType, uint8 itemId, DataTypes.Elements element);\\n\\n    /// @notice Error when trying to create an item without sending enough BNB to cover the crafting fee.\\n    error NotEnoughBNBSent(uint256 amount);\\n\\n    /// @notice Error when trying to create an item sending an amount of BNB that exceeds the limit.\\n    error BNBAmountSentExceeded(uint256 amount);\\n\\n    /// @notice Error when for a specified armor piece and tier, there aren't resources defined.\\n    error ItemTierResourcesNotDefined(DataTypes.NftType nftType, uint8 itemId, uint8 tier);\\n\\n    /// @notice Error when trying to send to styling/skip time an item for which he hasn't got crafting or that he has already sent.\\n    error ItemCraftingDoesNotExistOrAlreadySent(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to send to styling an item that hasn't end it's crafting.\\n    error ItemCraftingNotFinished(uint256 craftingId);\\n\\n    /// @notice Error when trying to skip the creation time of an item an item crafting that has already ended.\\n    error ItemCraftingFinished(uint256 craftingId);\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when the address of the resources controller contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newResourcesController The new address of the resources controller contract.\\n    event ResourcesControllerChanged (\\n        address indexed sender,\\n        IResourcesController indexed newResourcesController\\n    );\\n\\n    /// @notice Event emitted when the address of the styling contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newCraftingStyling The new address of the styling contract.\\n    event CraftingStylingChanged (\\n        address indexed sender,\\n        ICraftingStyling indexed newCraftingStyling\\n    );\\n\\n    /// @notice Event emitted when the price of a pool is changed.\\n    /// @param sender The address of the user that changes the pool price.\\n    /// @param poolId The id of the pool.\\n    /// @param newPoolPrice The new price of the pool.\\n    event PoolPriceChanged (\\n        address indexed sender,\\n        uint256 indexed poolId,\\n        uint256 newPoolPrice\\n    );\\n\\n    /// @notice Event emitted when the required crafted items to unlock a tier is changed.\\n    /// @param sender The address of the user that changes the required crafted items.\\n    /// @param tier The tier.\\n    /// @param newRequiredCraftedItems The new required crafted items.\\n    event RequiredCraftedItemsChanged (\\n        address indexed sender,\\n        uint256 indexed tier,\\n        uint256 newRequiredCraftedItems\\n    );\\n\\n    /// @notice Event emitted when the state of an item is updated.\\n    /// @param sender The address of the user that updates the state.\\n    /// @param nftType The type of the NFT (Armor/Weapon).    \\n    /// @param itemId The id of the item.\\n    /// @param newState The new state.\\n    event ItemCreationStateUpdated (\\n        address indexed sender,\\n        DataTypes.NftType nftType,        \\n        uint8 indexed itemId,\\n        bool newState\\n    );\\n\\n    /// @notice Event emitted when an item is created (a new Crafting is created and the NFT is minted to the smart contract).\\n    /// @param sender The address of the user that creates the item.\\n    /// @param craftingId The id of the crafting.\\n    /// @param poolId The id of the pool.\\n    /// @param nftType The type of the NFT (Armor/Weapon).     \\n    /// @param itemId The id of the item.\\n    /// @param endTime The endTime of the item crafting.\\n    /// @param tier The tier of the item.       \\n    event ItemCreated (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        uint256 poolId,\\n        DataTypes.NftType nftType,        \\n        uint8 indexed itemId,\\n        uint64 endTime,\\n        uint8 tier\\n    );\\n\\n    /// @notice Event emitted when an item is minted.\\n    /// @param sender The address of the user that mints the item.\\n    /// @param nftType The type of the NFT (Armor/Weapon).    \\n    /// @param itemId The id of the item.\\n    /// @param tokenId The tokenId of the item NFT.\\n    /// @param tier The tier of the item.           \\n    event ItemMinted (\\n        address indexed sender,\\n        DataTypes.NftType nftType,\\n        uint8 indexed itemId,\\n        uint256 tokenId,\\n        uint8 tier\\n    );\\n\\n    /// @notice Event emitted when a skip time is bought for an item crafting.\\n    /// @param sender The address of the user that buys the skip time.\\n    /// @param craftingId The id of the crafting.\\n    /// @param nftType The type of the NFT (Armor/Weapon).     \\n    /// @param itemId The id of the item.\\n    /// @param newEndTime The new endTime of the item crafting.    \\n    event ItemSkipTime (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        DataTypes.NftType nftType,        \\n        uint8 indexed itemId,\\n        uint64 newEndTime\\n    );\\n\\n    /// @notice Event emitted when an item is sent to the Styling contract.\\n    /// @param sender The address of the user that sents the item to styling.\\n    /// @param craftingId The id of the crafting.  \\n    event ItemSentToStyling (\\n        address indexed sender,\\n        uint256 indexed craftingId\\n    );\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Pauses all main functionalities.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    function pause() external;\\n\\n    /// @notice Unpauses all main functionalities.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    function unpause() external;\\n\\n    /// @notice Function that changes the address of the resources controller contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param resourcesController_ The new resources controller contract address.\\n    function changeResourcesController(\\n        IResourcesController resourcesController_\\n    ) external;\\n\\n    /// @notice Function that changes the address of the crafting styling contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param craftingStyling_ The new crafting styling contract address.\\n    function changeCraftingStyling(\\n        ICraftingStyling craftingStyling_\\n    ) external;\\n\\n    /// @notice Function that changes the price of a pool.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param poolId The pool id. \\n    /// @param price The new pool price.\\n    function changePoolPrice(\\n        uint256 poolId,\\n        uint256 price\\n    ) external;\\n\\n    /// @notice Function that changes the required crafted items to unlock a tier.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param tier The tier. \\n    /// @param requiredCraftedItems The required crafted items.\\n    function changeRequiredCraftedItems(\\n        uint256 tier,\\n        uint256 requiredCraftedItems\\n    ) external;\\n\\n    /// @notice Function that returns if a user has a tier locked or not.\\n    /// @dev Will return false if the user has the tier locked or true if he has the tier unlocked.    \\n    /// @param tier The tier. \\n    /// @param user The user. \\n    function checkTierStatusByUser(\\n        uint8 tier,\\n        address user\\n    ) external view returns(bool);\\n\\n    /// @notice Function that updates one item creation state.\\n    /// @dev Only callable when the contract is not paused and by an address with the MANAGER_ROLE.       \\n    /// @param nftType The type of the NFT (Armor/Weapon).    \\n    /// @param itemId The item id.\\n    /// @param newState The new creation state (True == Unpaused / False == Paused).\\n    function updateItemCreationState(\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        bool newState\\n    ) external;\\n\\n    /// @notice Function that returns the crafting fee in BNB.\\n    function getCraftingFeeInBNB() external view returns (uint256);\\n\\n    /// @notice Function that returns the pool price in GQ.\\n    /// @param poolId The pool id where is the item. \\n    function getPoolPriceInGQ(\\n        uint256 poolId\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that creates a new item.\\n    /// @dev Only callable when the contract is not paused.   \\n    /// @param poolId The pool id where is the item. \\n    /// @param nftType The type of the NFT (Armor/Weapon).\\n    /// @param itemId The id of the item.\\n    /// @param tier The tier of the item. \\n    /// @param element The element of the item. \\n    function createItem(\\n        uint256 poolId,\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        uint8 tier,\\n        DataTypes.Elements element\\n    ) external payable;\\n\\n    /// @notice Function that returns the skip crafting time price of an item in GQ.     \\n    /// @param user The address of the user.\\n    /// @param poolId The id of the pool where is the item.\\n    /// @return The skip crafting time price.\\n    function getSkipCraftingTimePriceInGQ (\\n        address user,\\n        uint256 poolId\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that skips the crafting time of an item.\\n    /// @dev Only callable when the contract is not paused.       \\n    /// @param poolId The id of the pool where is the item.\\n    function skipCraftingTime(\\n        uint256 poolId\\n    ) external;\\n\\n    /// @notice Function that sends an item to the Styling contract.\\n    /// @dev Only callable when the contract is not paused.       \\n    /// @param poolId The id of the pool where is the item.\\n    function sendToStyling(      \\n        uint256 poolId\\n    ) \\n    external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICraftingStyling.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\nimport \\\"./IBaseStep.sol\\\";\\nimport \\\"./IResourcesController.sol\\\";\\nimport \\\"./ICraftingAssembly.sol\\\";\\n\\n/// @title The interface for the Crafting Styling step.\\n/// @notice This interface facilitates the Styling step functionalities\\ninterface ICraftingStyling {\\n\\n    // ============== STRUCTS ==============\\n\\n    /// @notice Struct to store the Styling Items information.\\n    struct StylingItem {\\n        uint256 craftingId;\\n        uint64 endTime;\\n        bool started;\\n        bool exists;\\n    }\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    /// @notice Error when trying to set the resources controller address to the address 0.\\n    error ResourcesControllerZeroAddress();\\n\\n    /// @notice Error when trying to set the crafting assembly address to the address 0.\\n    error CraftingAssemblyZeroAddress();\\n\\n    /// @notice Error when trying to add an item from the creation contract but there is no pool available.\\n    error NoPoolAvailable(address user);\\n\\n    /// @notice Error when for a specified armor piece and tier, there aren't resources defined.\\n    error ItemTierResourcesNotDefined(DataTypes.NftType nftType, uint8 itemId, uint8 tier);\\n\\n    /// @notice Error when the requested armor aesthetic is not defined.\\n    error RequestedArmorAestheticUndefined(DataTypes.ArmorPieces armorPieceId, uint8 aesthetic);\\n\\n    /// @notice Error when the weapon pieces of a weapon are not defined.\\n    error WeaponTypePiecesUndefined(DataTypes.WeaponTypes weaponTypeId);\\n\\n    /// @notice Error when the number of aesthetics doesn't match the pieces of the weapon.\\n    error InvalidNumberOfAesthetics();\\n\\n    /// @notice Error when the requested weapon piece aesthetic is not defined.\\n    error RequestedWeaponPieceAestheticUndefined(\\n        DataTypes.WeaponTypes weaponTypeId, \\n        DataTypes.WeaponPieces weaponPieceId, \\n        uint8 aesthetic\\n    );\\n\\n    /// @notice Error when any of the requested aesthetics don't match the weapon's element.\\n    error RequestedAestheticDoesntMatchElement(\\n        DataTypes.WeaponTypes weaponTypeId, \\n        DataTypes.WeaponPieces weaponPieceId, \\n        uint8 aesthetic, \\n        DataTypes.Elements element\\n    );\\n\\n    /// @notice Error when the User doesn't provide a valid aesthetic for required weapon piece.\\n    error MainWeaponPieceRequiredWithoutAesthetic(DataTypes.WeaponTypes weaponTypeId, DataTypes.WeaponPieces weaponPieceId);\\n\\n    /// @notice Error when trying to send to assembly/skip time an item for which he hasn't got styling or that he has already sent.\\n    error ItemStylingDoesNotExistOrAlreadySent(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to start an item styling that has already started.\\n    error ItemStylingAlreadyStarted(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to send to assembly/skip time an item that hasn't started it's styling period.\\n    error ItemStylingNotStarted(address owner, uint256 poolId);\\n\\n    /// @notice Error when trying to skip the styling time of an item styling that has already finished.\\n    error ItemStylingAlreadyFinished(uint256 craftingId);\\n\\n    /// @notice Error when trying to send to assembly an item that hasn't end it's styling.\\n    error ItemStylingNotFinished(uint256 craftingId);\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when the address of the resources controller contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newResourcesControllerAddress The new address of the resources controller contract.\\n    event ResourcesControllerChanged (\\n        address indexed sender,\\n        IResourcesController indexed newResourcesControllerAddress\\n    );\\n\\n    /// @notice Event emitted when the address of the assembly contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newCraftingAssemblyAddress The new address of the assembly contract.\\n    event CraftingAssemblyChanged (\\n        address indexed sender,\\n        ICraftingAssembly indexed newCraftingAssemblyAddress\\n    );\\n\\n    /// @notice Event emitted when the price of the optional weapon pieces of a tier is changed.\\n    /// @param sender The address of the user that changes the price.\\n    /// @param tier The tier.\\n    /// @param newPrice The new price of the optional weapon piece.\\n    event OptionalWeaponPiecePriceChanged (\\n        address indexed sender,\\n        uint256 indexed tier,\\n        uint256 indexed newPrice\\n    );\\n\\n    /// @notice Event emitted when an item styling is created.\\n    /// @param sender The address of the user that creates the item.\\n    /// @param craftingId The id of the crafting.\\n    /// @param poolId The id of the pool.   \\n    event ItemStylingCreated (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        uint256 poolId\\n    );\\n\\n    /// @notice Event emitted when an item styling is started.\\n    /// @param sender The address of the user that starts the styling.\\n    /// @param craftingId The id of the crafting.\\n    /// @param poolId The id of the pool.\\n    /// @param endTime The endTime of the item styling.     \\n    event ItemStylingStarted (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        uint256 poolId,\\n        uint64 endTime\\n    );\\n\\n    /// @notice Event emitted when a skip time is bought for an item crafting.\\n    /// @param sender The address of the user that buys the skip time.\\n    /// @param craftingId The id of the crafting.\\n    /// @param nftType The type of the NFT (Armor/Weapon).     \\n    /// @param itemId The id of the item.\\n    /// @param newEndTime The new endTime of the item crafting.    \\n    event ItemSkipTime (\\n        address indexed sender,\\n        uint256 indexed craftingId,\\n        DataTypes.NftType nftType,        \\n        uint8 indexed itemId,\\n        uint64 newEndTime\\n    );\\n\\n    /// @notice Event emitted when an item is sent to the Assembly contract.\\n    /// @param sender The address of the user that sents the item to assembly.\\n    /// @param craftingId The id of the crafting.  \\n    event ItemSentToAssembly (\\n        address indexed sender,\\n        uint256 indexed craftingId\\n    );\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Pauses all main functionalities.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    function pause() external;\\n\\n    /// @notice Unpauses all main functionalities.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    function unpause() external;\\n\\n    /// @notice Function that changes the address of the resources controller contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param resourcesController_ The new resources controller address.\\n    function changeResourcesController(\\n        IResourcesController resourcesController_\\n    ) external;\\n\\n    /// @notice Function that changes the address of the crafting assembly contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param craftingAssembly_ The new crafting assembly address.\\n    function changeCraftingAssembly(\\n        ICraftingAssembly craftingAssembly_\\n    ) external;\\n \\n    /// @notice Function that changes the price of the optional weapon pieces og a tier.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param tier The tier.\\n    /// @param price The new price.\\n    function changeOptionalWeaponPiecePrice(\\n        uint256 tier,\\n        uint256 price\\n    ) external;\\n\\n    /// @notice Function that adds an item to styling for an user.\\n    /// @dev Only callable when the contract is not paused and by an address with the CREATION_ROLE.\\n    /// @param craftingId The id of the crafting.\\n    /// @param user The user.\\n    function addItem(\\n        uint256 craftingId,\\n        address user\\n    ) external;\\n\\n    /// @notice Function that starts the styling for an item.\\n    /// @dev Only callable when the contract is not paused.   \\n    /// If the item is a weapon, the aesthetics array should include all the weapon pieces (main or optional).\\n    /// @param poolId The id of pool where is the item. \\n    /// @param aesthetics The array with the requested aesthetics. \\n    function startItemStyling(\\n        uint256 poolId,\\n        uint8[] calldata aesthetics\\n    ) external;\\n\\n    /// @notice Function that returns the optional weapon piece price from a specified tier in GQ.     \\n    /// @param tier The tier.\\n    /// @return The optional weapon piece price.\\n    function getOptionalWeaponPiecePriceInGQ (\\n        uint256 tier\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that returns the skip crafting time price of an item in GQ.     \\n    /// @param user The address of the user.\\n    /// @param poolId The id of the pool where is the item.\\n    /// @return The skip crafting time price.\\n    function getSkipCraftingTimePriceInGQ (\\n        address user,\\n        uint256 poolId\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that skips the crafting time of an item.\\n    /// @dev Only callable when the contract is not paused.     \\n    /// @param poolId The id of the pool where is the item.\\n    function skipCraftingTime(\\n        uint256 poolId\\n    ) external;\\n\\n    /// @notice Function that sends an item to the Assembly contract.\\n    /// @dev Only callable when the contract is not paused.     \\n    /// @param poolId The id of the pool where is the item.\\n    function sendToAssembly(      \\n        uint256 poolId\\n    ) \\n    external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IResourcesController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {SharedStructs} from \\\"../libraries/SharedStructs.sol\\\";\\n\\n/// @title The interface for the ResourcesController contract.\\n/// @notice This interface facilitates common functionalities for all steps.\\ninterface IResourcesController {\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Function that burns the token resources from an user.\\n    /// @dev Only callable by an address with the CREATION_ROLE.    \\n    /// @param user The user that has the resources. \\n    /// @param resources The Resources that the user must be able to burn. \\n    function burnUserResources(\\n        address user,\\n        SharedStructs.Resource[] memory resources\\n    ) external returns(uint256 totalResourcesUsed);\\n}\"\r\n    },\r\n    \"contracts/landStaking/ILandStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../oracles/prices/interfaces/IGQOracle.sol\\\";\\n\\n/// @title The interface for the LandStaking contract.\\n/// @notice This interface facilitates the LandStaking functionalities.\\ninterface ILandStaking {\\n\\n    // ============== STRUCTS ==============\\n\\n    /// @notice Struct to store the Lands staking information.\\n    struct StakedLand {\\n        uint256 tokenId;\\n        uint256 endTime;\\n        bool staked;\\n    }\\n\\n    /// @notice Struct to store the Pool rewards information.\\n    struct PoolReward {\\n        address resource;\\n        uint256 amount;\\n    }\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    /// @notice Error when trying to set the land contract address to the address 0.\\n    error LandZeroAddress();\\n\\n    /// @notice Error when trying to set the staking token contract address to the address 0.\\n    error StakingTokenZeroAddress();\\n\\n    /// @notice Error when trying to set the fee receiver address to the address 0.\\n    error FeeReceiverZeroAddress();\\n\\n    /// @notice Error when trying to set the GQ oracle address to the address 0.\\n    error OracleZeroAddress();\\n\\n    /// @notice Error when trying to stake/unstake a Land without being the owner.\\n    error NotTheOwnerOfTheLand();\\n\\n    /// @notice Error when trying to stake a Land when there is another of the same size already staked.\\n    error LandSizeAlreadyStaked(address sender, uint256 tokenId);\\n\\n    /// @notice Error when trying to set a Land block duration/unstake a Land without having anyone of the specific size staked.\\n    error LandSizeNotStaked(string size);\\n\\n    /// @notice Error when trying to unstake a Land when the block duration hasn't ended.\\n    error BlockDurationNotEnded(string size);\\n\\n    /// @notice Error when trying to claim rewards from a pool that hasn't got the pool rewards defined.\\n    error PoolRewardsNotDefined(string landType);\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when the address of the land contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newLandAddress The new address of the land contract.\\n    event LandAddressChanged (\\n        address indexed sender,\\n        address newLandAddress\\n    );\\n\\n    /// @notice Event emitted when the staking token contract is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newStakingTokenAddress The new address of the staking token contract.\\n    event StakingTokenChanged (\\n        address indexed sender,\\n        address newStakingTokenAddress\\n    );\\n\\n    /// @notice Event emitted when the fee receiver address is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newFeeReceiverAddress The new fee receiver address.\\n    event FeeReceiverChanged (\\n        address indexed sender,\\n        address newFeeReceiverAddress\\n    );\\n\\n    /// @notice Event emitted when the GQ oracle address is changed.\\n    /// @param sender The address of the user that changes the address.\\n    /// @param newOracleAddress The new GQ oracle address.\\n    event OracleChanged (\\n        address indexed sender,\\n        address newOracleAddress\\n    );\\n\\n    /// @notice Event emitted when a new land type is added.\\n    /// @param sender The address of the user that adds the new land type.\\n    /// @param landType The new land type.\\n    event LandTypeAdded (\\n        address indexed sender,\\n        string landType\\n    );\\n\\n    /// @notice Event emitted when the staking fee of a land size pool is changed.\\n    /// @param sender The address of the user that changes the staking fee.\\n    /// @param size The size of the Land.    \\n    /// @param newStakingFee The new staking fee.\\n    event PoolStakingFeeChanged (\\n        address indexed sender,\\n        string indexed size,\\n        uint256 newStakingFee\\n    );\\n\\n    /// @notice Event emitted when the crafting cost reduction of a land size pool is changed.\\n    /// @param sender The address of the user that changes the cost reduction.\\n    /// @param size The size of the Land.\\n    /// @param costReduction The crafting cost reduction.\\n    event PoolCraftingCostReductionChanged (\\n        address indexed sender,\\n        string indexed size,\\n        uint256 costReduction\\n    );\\n\\n    /// @notice Event emitted when the crafting time reduction of a land size pool is changed.\\n    /// @param sender The address of the user that changes the time reduction.\\n    /// @param size The size of the Land.\\n    /// @param timeReduction The crafting time reduction.\\n    event PoolCraftingTimeReductionChanged (\\n        address indexed sender,\\n        string indexed size,\\n        uint256 timeReduction\\n    );\\n\\n    /// @notice Event emitted when the rewards of a land size pool are changed.\\n    /// @param sender The address of the user that changes the rewards.\\n    /// @param size The size of the Land.\\n    event PoolRewardsChanged (\\n        address indexed sender,\\n        string indexed size\\n    );\\n\\n    /// @notice Event emitted when a Land is staked.\\n    /// @param sender The address of the user that staked the Land.\\n    /// @param tokenId The token id of the Land.\\n    event LandStaked (\\n        address indexed sender,\\n        uint256 indexed tokenId\\n    );\\n\\n    /// @notice Event emitted when a Land block duration is changed.\\n    /// @param sender The address of the user that changes the block duration of the Land.\\n    /// @param sender The address of the owner of the Land.\\n    /// @param size The size of the Land.\\n    /// @param blockDuration The block duration of the Land.\\n    event LandBlockDurationChanged (\\n        address indexed sender,\\n        address indexed user,\\n        string indexed size,\\n        uint256 blockDuration\\n    );\\n\\n    /// @notice Event emitted when a Land is unstaked.\\n    /// @param sender The address of the user that unstaked the Land.\\n    /// @param tokenId The token id of the Land.\\n    event LandUnstaked (\\n        address indexed sender,\\n        uint256 indexed tokenId\\n    );\\n\\n    /// @notice Event emitted when a user claims rewards from a pool.\\n    /// @param sender The address of the user that claims rewards.\\n    /// @param size The size of the land.\\n    event RewardsClaimed (\\n        address indexed sender,\\n        string indexed size\\n    );\\n\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Pauses all main functionalities.\\n    /// @dev Only callable by an account with the PAUSER_ROLE.\\n    function pause() external;\\n\\n    /// @notice Unpauses all main functionalities.\\n    /// @dev Only callable by an account with the PAUSER_ROLE.\\n    function unpause() external;\\n\\n    /// @notice Function that changes the address of the land contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param _landAddress The new land contract address.\\n    function changeLandAddress(\\n        address _landAddress\\n    ) external;\\n\\n    /// @notice Function that changes the staking token contract.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param _stakingTokenAddress The new staking token contract address.\\n    function changeStakingToken(\\n        address _stakingTokenAddress\\n    ) external;\\n\\n    /// @notice Function that changes the fee receiver address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param _feeReceiver The fee receiver address.\\n    function changeFeeReceiver(\\n        address _feeReceiver\\n    ) external;\\n\\n    /// @notice Function that changes the GQ oracle address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param _oracle The GQ oracle address.\\n    function changeOracle(\\n        IGQOracle _oracle\\n    ) external;\\n\\n    /// @notice Function that changes the staking fee of a land size pool.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param size The size of the land.\\n    /// @param stakingFee The staking fee.\\n    function changePoolStakingFee(\\n        string calldata size,\\n        uint256 stakingFee\\n    ) external;\\n\\n    /// @notice Function that returns a land size pool staking fee in GQ. \\n    /// @param size The size of the land.\\n    function getPoolStakingFeeInGQ(\\n        string calldata size\\n    ) external view returns (uint256);\\n\\n    /// @notice Function that changes the crafting reduction cost of a land size pool.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param size The size of the land.\\n    /// @param costReduction The new cost reduction.\\n    function changePoolCraftingCostReduction(\\n        string calldata size,\\n        uint256 costReduction\\n    ) external;\\n\\n    /// @notice Function that returns a user's crafting cost reduction (if has a land staked).    \\n    /// @param user The user.\\n    function getUserCraftingCostReduction(\\n        address user\\n    ) external view returns(uint256);\\n\\n    /// @notice Function that changes the crafting reduction time of a land size pool.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param size The size of the land.\\n    /// @param timeReduction The time reduction.\\n    function changePoolCraftingTimeReduction(\\n        string calldata size,\\n        uint256 timeReduction\\n    ) external;\\n\\n    /// @notice Function that returns a user's crafting time reduction (if has a land staked).    \\n    /// @param user The user.\\n    function getUserCraftingTimeReduction(\\n        address user\\n    ) external view returns(uint256);\\n\\n    /// @notice Function that changes the rewards of a land size pool.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.            \\n    /// @param size The size of the land.\\n    /// @param _poolRewards The new pool rewards.\\n    function changePoolRewards(\\n        string calldata size,\\n        PoolReward[] calldata _poolRewards\\n    ) external;\\n\\n    /// @notice Function that returns the rewards of a land size pool.      \\n    /// @param size The size of the land.\\n    /// @return Array of rewards of the land size pool.\\n    function getPoolRewards(\\n        string calldata size \\n    ) external view returns (PoolReward[] memory); \\n\\n    /// @notice Function that adds a new land type.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.        \\n    /// @param landType The new land type.\\n    function addLandType(\\n        string calldata landType\\n    ) external;\\n\\n    /// @notice Function that stakes a land.\\n    /// @dev Only callable when the contract is not paused.      \\n    /// @param tokenId The land token id.\\n    function stakeLand(\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /// @notice Function that returns a user's staked land info.    \\n    /// @param user The user.\\n    /// @return size The size of the top land of the user.\\n    function getUserStaking(\\n        address user, \\n        string calldata size\\n    ) external view returns (StakedLand memory);\\n\\n    /// @notice Function that returns a user's top land's size.    \\n    /// @param user The user.\\n    /// @return size The size of the top land of the user.\\n    function getUserTopLandSize(\\n        address user\\n    ) external view returns(string memory size);\\n\\n    /// @notice Function that sets a block duration for the top size Land of a user.\\n    /// @dev Only callable by an address with the BLOCKER_ROLE.     \\n    /// @param user The user.\\n    /// @param blockDuration The land block duration.\\n    function setTopLandBlockDuration(\\n        address user,\\n        uint256 blockDuration\\n     ) external;\\n\\n    /// @notice Function that sets a block duration of a Land.\\n    /// @dev Only callable by an address with the BLOCKER_ROLE.     \\n    /// @param user The user.\\n    /// @param size The size of the land.\\n    /// @param blockDuration The land block duration.\\n    function setLandBlockDuration(\\n        address user,\\n        string calldata size,\\n        uint256 blockDuration\\n    ) external;\\n\\n    /// @notice Function that unstakes a land.\\n    /// @dev Only callable when the contract is not paused.      \\n    /// @param size The size of the land.\\n    function unstakeLand(\\n        string calldata size\\n    ) external;\\n\\n    /// @notice Function that claims the pending rewards from a pool for a user.\\n    /// @dev Only callable when the contract is not paused.      \\n    /// @param size The size of the land.\\n    function claimRewards(\\n        string calldata size\\n    ) external;\\n\\n    /// @notice Function that returns the user's pending rewards for a specific pool.    \\n    /// @param user The user.\\n    /// @param size The size assigned to the pool.\\n    /// @return pendingRewards Array of pending PoolRewards to claim.\\n    function getUserPendingRewards(\\n        address user,\\n        string calldata size\\n    ) external view returns(PoolReward[] memory pendingRewards);\\n}\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title DataTypes\\n/// @notice This library contains the different data types for the Crafting system.\\nlibrary DataTypes {\\n\\n    /// @notice Enum to store the steps in the Crafting process.\\n    enum Step {\\n        CREATION,\\n        STYLING,\\n        ASSEMBLY\\n    }\\n\\n    /// @notice Enum to store the two types of NFTs available in the Crafting.\\n    enum NftType {\\n        ARMOR,\\n        WEAPON\\n    }\\n    \\n    /// @notice Enum to store the different Elements.\\n    enum Elements {\\n        BULLET,\\n        LASER,\\n        METAL,\\n        POLYVALENT\\n    }\\n\\n    /// @notice Enum to store the data for the Rarities.\\n    enum Rarity {\\n        COMMON,\\n        UNCOMMON,\\n        RARE,\\n        EPIC,\\n        LEGENDARY,\\n        NO_RARITY\\n    }\\n\\n    /// @notice Enum to store the different Weapon Pieces.\\n    enum WeaponPieces {\\n        HILT,\\n        CROSS_GUARD,\\n        BLADE,\\n        HEAD,\\n        GRIP,\\n        BARREL,\\n        BODY,\\n        MAGAZINE,\\n        REFLEX_SIGHT,\\n        HOLOGRAPHIC_SIGHT,\\n        LASER_POINTER,\\n        SILENCER,\\n        STOCK,\\n        X4_SIGHT,\\n        BAYONETTA,\\n        STRIKER,\\n        BIPOD,\\n        GRENADE_LAUNCHER,\\n        ATTACHED_SHOTGUN,\\n        SNIPER_SIGHT,\\n        BARREL_BRAKE\\n    }\\n\\n    /// @notice Struct to store the types for the Weapon Pieces.\\n    enum WeaponPieceTypes {\\n        MAIN,\\n        SIGHT,\\n        UNDER_BARREL,\\n        ACCESSORY\\n    }\\n\\n    /// @notice Enum to store the different Weapon Types.\\n    enum WeaponTypes {\\n        KNIFE,\\n        BLADE,\\n        BLUNT,\\n        PISTOL,\\n        REVOLVER,\\n        SHOTGUN,\\n        REPEATER_SHOTGUN,\\n        ASSAULT_SMG,\\n        HIGH_RATE_SMG,\\n        LIGHT_MACHINE_GUN,\\n        ASSAULT_RIFLE,\\n        SNIPER_RIFLE,\\n        PRECISION_RIFLE\\n    }\\n\\n    /// @notice Enum to store the different Armor Pieces.\\n    enum ArmorPieces {\\n        HELMET, \\n        CHEST,\\n        SHOULDERS,\\n        FOREARMS,\\n        ARMS,\\n        GLOVES,\\n        LEGS,\\n        KNEEPADS,\\n        BOOTS\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SharedStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\n\\n/// @title SharedStructs\\n/// @notice This library contains the different shared structs for the Crafting system.\\nlibrary SharedStructs {\\n\\n    struct RequestData {\\n        uint256 tokenId;\\n        uint8 tier;\\n    }\\n\\n    struct RangesByTier {\\n        uint16 minRange;\\n        uint16 maxRange;\\n    }\\n\\n    struct ArmorTierConfig {\\n        address armorAddress;\\n        uint8 armorQuantity;\\n        uint8 armorTierId;\\n        uint8 armorRarityId;\\n        string armorRarityName;\\n        uint8 collectionId;\\n        string collectionName;\\n    }\\n\\n    struct WeaponTierConfig {\\n        address weaponAddress;\\n        uint8 weaponQuantity;\\n        uint8 weaponTierId;\\n        uint8 weaponRarityId;\\n        string weaponRarityName;\\n        uint8 collectionId;\\n        string collectionName;\\n    }\\n\\n    struct ItemInfo {\\n        uint8 tier;\\n        uint8 rarityId;\\n        string rarityName;\\n        uint8 collectionId;\\n        string collectionName;\\n        address firstOwner;\\n        uint8 piece;\\n    }\\n\\n    /// @notice Struct to store the data for the Resources.\\n    struct Resource {\\n        address resourceAddress;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the Weapon Piece information. \\n    struct WeaponPieceInfo {\\n        uint8 numAesthetics; \\n        DataTypes.WeaponPieceTypes weaponPieceType;\\n        mapping(uint8 => DataTypes.Elements[]) aestheticsInfo; // Aesthetic ID => Element ID[]\\n    }\\n\\n    /// @notice Struct to store the Weapon information.\\n    struct WeaponInfo {\\n        string description;      \\n        DataTypes.WeaponPieces[] weaponPieces;\\n        mapping(uint8 => mapping(DataTypes.Step => CraftingInfo)) craftingInfo; // Tier => Step => CraftingInfo\\n    }\\n\\n    /// @notice Struct to store the Armor Piece information. \\n    struct ArmorPieceInfo {\\n        string description;\\n        uint8 numAesthetics; \\n        mapping(uint8 => mapping(DataTypes.Step => CraftingInfo)) craftingInfo; // Tier => Step => CraftingInfo\\n    }\\n\\n    /// @notice Struct to store the Crafting information (Tier/Step dependent data).\\n    struct CraftingInfo {\\n        uint64 craftingTime;\\n        uint256 skipTimePrice;\\n        Resource[] resources;\\n    }\\n\\n    /// @notice Struct to store the information of the crafting items (Armor pieces and Weapons).\\n    struct CraftingItem {\\n        DataTypes.NftType nftType;\\n        uint8 itemId;\\n        uint8 tier;\\n        DataTypes.Elements element;\\n        uint8 rarityBooster;\\n        DataTypes.Rarity rarity;\\n        address owner;\\n        uint256 tokenId;\\n        uint8[] aesthetics;\\n    }\\n\\n    // @notice Struct to store the information needed for the Chainlink fallback.\\n    struct CraftingRequestData {\\n        uint256 craftingId;\\n        uint8 tier;\\n        uint8 rarityBoosterId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/prices/interfaces/IGQOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGQOracle {\\n\\n    /// @notice Gets the price of GQ per stable.\\n    /// @param amount Amount in stable to convert.\\n    function convertBUSDToGQ(uint256 amount) external pure returns (uint256);\\n\\n    /// @notice Gets the price of BNB per stable.\\n    /// @param _amountInStable Amount in stable to convert.\\n    function getBNBAmountByStable(uint256 _amountInStable) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/random/VRFConsumerBaseV2Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract VRFConsumerBaseV2Upgradeable is Initializable, OwnableUpgradeable {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    // Chainlink data\\n    VRFCoordinatorV2Interface internal COORDINATOR;\\n    LinkTokenInterface internal LINKTOKEN;\\n    address internal vrfCoordinator;\\n    address internal link;\\n    bytes32 internal keyHash;\\n    uint16 internal requestConfirmations;\\n    uint32 internal callbackGasLimit;\\n    uint32 internal numWords;\\n    uint64 internal subscriptionId;\\n    uint256 internal request;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __VRFConsumerBaseV2_init(\\n        address _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        address _link,\\n        bytes32 _keyHash,\\n        uint32 _callbackGasLimit,\\n        uint16 _requestConfirmations,\\n        uint32 _numWords\\n    ) internal onlyInitializing {\\n        __VRFConsumerBaseV2_init_unchained(\\n            _vrfCoordinator,\\n            _subscriptionId,\\n            _link,\\n            _keyHash,\\n            _callbackGasLimit,\\n            _requestConfirmations,\\n            _numWords\\n        );\\n    }\\n\\n    function __VRFConsumerBaseV2_init_unchained(\\n        address _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        address _link,\\n        bytes32 _keyHash,\\n        uint32 _callbackGasLimit,\\n        uint16 _requestConfirmations,\\n        uint32 _numWords\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        subscriptionId = _subscriptionId;\\n        link = _link;\\n        keyHash = _keyHash;\\n        requestConfirmations = _requestConfirmations;\\n        callbackGasLimit = _callbackGasLimit;\\n        numWords = _numWords;\\n        vrfCoordinator = _vrfCoordinator;\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(link);\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomness\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        virtual\\n    {}\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    function changeCoordinator(address _vrfCoordinator) external onlyOwner {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    function changeCallbackGasLimit(uint32 _callbackGasLimit)\\n        external\\n        onlyOwner\\n    {\\n        callbackGasLimit = _callbackGasLimit;\\n    }\\n\\n    function changeSubscriptionId(uint64 _subscriptionId) external onlyOwner {\\n        subscriptionId = _subscriptionId;\\n    }\\n\\n    function changeRequestConfirmations(uint16 _requestConfirmations)\\n        external\\n        onlyOwner\\n    {\\n        requestConfirmations = _requestConfirmations;\\n    }\\n\\n    function changeKeyHash(bytes32 _keyHash) external onlyOwner {\\n        keyHash = _keyHash;\\n    }\\n}\"\r\n    },\r\n    \"contracts/storage/interfaces/ICraftingSharedStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { DataTypes } from \\\"../../libraries/DataTypes.sol\\\";\\nimport { SharedStructs } from \\\"../../libraries/SharedStructs.sol\\\";\\n\\n/// @title The interface for the Crafting Shared Storage.\\n/// @notice This interface facilitates functions to get information from the different assets that are used on the crafting system.\\ninterface ICraftingSharedStorage {\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    /// @notice Error when trying to set the crafting token address to the address 0.\\n    error CraftingTokenZeroAddress();\\n\\n    /// @notice Error when trying to set the payment recipient address to the address 0.\\n    error PaymentRecipientZeroAddress();\\n\\n    /// @notice Error when trying to set the fee recipient address to the address 0.\\n    error FeeRecipientZeroAddress();\\n\\n    /// @notice Error when trying to set the ArmorsController contract address to the address 0.\\n    error ArmorsControllerZeroAddress();\\n\\n    /// @notice Error when trying to set the WeaponsController contract address to the address 0.\\n    error WeaponsControllerZeroAddress();\\n\\n    /// @notice Error when trying to set the RarityController contract address to the address 0.\\n    error RarityControllerZeroAddress();\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when a collection id is changed.\\n    /// @param sender The address of the user that changes the collection id.\\n    /// @param id The id of the NFT collection.     \\n    event CollectionIdChanged (\\n        address indexed sender,\\n        uint8 indexed id\\n    );\\n\\n    /// @notice Event emitted when one collection name is changed.\\n    /// @param sender The address of the user that changes the collection name.\\n    /// @param name The name of the NFT collection.     \\n    event CollectionNameChanged (\\n        address indexed sender,\\n        string indexed name\\n    );\\n\\n    /// @notice Event emitted when the default URI is changed.\\n    /// @param sender The address of the user that changes the default URI.\\n    /// @param newDefaultURI The new default URI.\\n    event DefaultURIChanged (\\n        address indexed sender,\\n        string indexed newDefaultURI\\n    );\\n\\n    /// @notice Event emitted when the crafting token address is changed.\\n    /// @param sender The address of the user that changes the crafting token address.\\n    /// @param newCraftingTokenAddress The new crafting token address.    \\n    event CraftingTokenChanged (\\n        address indexed sender,\\n        address newCraftingTokenAddress\\n    );\\n\\n    /// @notice Event emitted when the crafting fee is changed.\\n    /// @param sender The address of the user that changes the crafting fees.\\n    /// @param newCraftingFee The new crafting fee.    \\n    event CraftingFeeChanged (\\n        address indexed sender,\\n        uint256 newCraftingFee\\n    );\\n\\n    /// @notice Event emitted when the payment recipient address is changed.\\n    /// @param sender The address of the user that changes the payment recipient address.\\n    /// @param newPaymentRecipientAddress The new payment recipient address.    \\n    event PaymentRecipientChanged (\\n        address indexed sender,\\n        address newPaymentRecipientAddress\\n    );\\n\\n    /// @notice Event emitted when the fee recipient address is changed.\\n    /// @param sender The address of the user that changes the fee recipient address.\\n    /// @param newFeeRecipientAddress The new fee recipient address.    \\n    event FeeRecipientChanged (\\n        address indexed sender,\\n        address newFeeRecipientAddress\\n    );\\n\\n    /// @notice Event emitted when the ArmorsController contract address is changed.\\n    /// @param sender The address of the user that changes the ArmorsController contract address.\\n    /// @param newArmorsControllerAddress The new ArmorsController contract address.    \\n    event ArmorsControllerChanged (\\n        address indexed sender,\\n        address newArmorsControllerAddress\\n    );\\n\\n    /// @notice Event emitted when the WeaponsController contract address is changed.\\n    /// @param sender The address of the user that changes the WeaponsController contract address.\\n    /// @param newWeaponsControllerAddress The new WeaponsController contract address.    \\n    event WeaponsControllerChanged (\\n        address indexed sender,\\n        address newWeaponsControllerAddress\\n    );\\n\\n    /// @notice Event emitted when the RarityController contract address is changed.\\n    /// @param sender The address of the user that changes the RarityController contract address.\\n    /// @param newRarityControllerAddress The new RarityController contract address.    \\n    event RarityControllerChanged (\\n        address indexed sender,\\n        address newRarityControllerAddress\\n    );\\n\\n    /// @notice Event emitted when a element description is changed.\\n    /// @param sender The address of the user that changes the element description.\\n    /// @param elementId The id of the element.   \\n    /// @param newElementDescription The new element description.     \\n    event ElementDescriptionChanged (\\n        address indexed sender,\\n        DataTypes.Elements elementId,\\n        string newElementDescription\\n    );\\n\\n    /// @notice Event emitted when a crafting item is added.\\n    /// @param sender The address of the user that adds the crafting item.\\n    /// @param craftingId The id of the crafting.   \\n    /// @param nftType The type of the NFT (Armor/Weapon).\\n    /// @param itemId The id of the item.\\n    /// @param tier The id of the item.\\n    /// @param owner The owner of the item.\\n    /// @param element The element of the item.\\n    /// @param tokenId The tokenId of the item.\\n    event CraftingItemAdded (\\n        address indexed sender,\\n        uint256 indexed craftingId, \\n        DataTypes.NftType nftType,\\n        uint256 itemId,\\n        uint8 tier,\\n        address owner,\\n        DataTypes.Elements element,\\n        uint256 tokenId\\n    );\\n\\n    /// @notice Event emitted when a crafting item element is changed.\\n    /// @param sender The address of the user that changes the crafting item element.\\n    /// @param craftingId The id of the crafting.   \\n    /// @param element The element of the item.\\n    event CraftingItemElementChanged (\\n        address indexed sender,\\n        uint256 indexed craftingId, \\n        DataTypes.Elements element\\n    );\\n\\n    /// @notice Event emitted when a crafting item aesthetics is changed.\\n    /// @param sender The address of the user that changes the crafting item aesthetics.\\n    /// @param craftingId The id of the crafting.   \\n    /// @param aesthetics The new crafting item aesthetics.     \\n    event CraftingItemAestheticsChanged (\\n        address indexed sender,\\n        uint256 indexed craftingId, \\n        uint8[] aesthetics\\n    );\\n\\n    /// @notice Event emitted when a crafting item rarity booster is changed.\\n    /// @param sender The address of the user that changes the crafting item rarity booster.\\n    /// @param craftingId The id of the crafting.   \\n    /// @param rarityBooster The new crafting item rarity booster.     \\n    event CraftingItemRarityBoosterChanged (\\n        address indexed sender,\\n        uint256 indexed craftingId, \\n        uint8 rarityBooster\\n    );\\n\\n    /// @notice Event emitted when a crafting item rarity is changed.\\n    /// @param sender The address of the user that changes the crafting item rarity.\\n    /// @param craftingId The id of the crafting.   \\n    /// @param rarity The new crafting item rarity.     \\n    event CraftingItemRarityChanged (\\n        address indexed sender,\\n        uint256 indexed craftingId, \\n        DataTypes.Rarity rarity\\n    );\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Pauses all item crafting additions.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    //function pause() external;\\n\\n    /// @notice Unpauses all item crafting additions.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    //function unpause() external;\\n\\n    /// @notice Function that returns the collection id.\\n    /// @return The collection id.      \\n    function collectionId() external view returns (uint8);\\n\\n    /// @notice Function that sets the NFT collection id.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param _collectionId The id of the NFT collection.\\n    function setCollectionId(\\n        uint8 _collectionId\\n    ) external;\\n\\n    /// @notice Function that returns the collection name.\\n    /// @return The collection name.    \\n    function collectionName() external view returns (string calldata);\\n\\n    /// @notice Function that sets the NFT collection name.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param _collectionName The name of the NFT collection.\\n    function setCollectionName(\\n        string calldata _collectionName\\n    ) external;\\n\\n    /// @notice Function that sets the default URI.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.       \\n    /// @param _defaultURI The new default URI.\\n    function setDefaultURI(\\n        string calldata _defaultURI\\n    ) external;\\n\\n    /// @notice Function that returns the defaultURI.\\n    /// @return The defaultURI.    \\n    function defaultURI() external view returns (string calldata);\\n\\n    /// @notice Function that returns the crafting token.\\n    /// @return The crafting token.    \\n    function craftingToken() external view returns (address);\\n\\n    /// @notice Function that sets the crafting token address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param craftingTokenAddress The crafting token address.\\n    function setCraftingToken(\\n        address craftingTokenAddress\\n    ) external;\\n\\n    /// @notice Function that returns the crafting fee.\\n    /// @return The crafting fee.    \\n    function craftingFee() external view returns (uint256);\\n\\n    /// @notice Function that sets the crafting fee.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param _craftingFee The crafting fee.\\n    function setCraftingFee(\\n        uint256 _craftingFee\\n    ) external;\\n\\n    /// @notice Function that returns the payment recipient.\\n    /// @return The payment recipient.\\n    function paymentRecipient() external view returns (address);\\n\\n    /// @notice Function that sets the payment recipient address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param paymentRecipient The payment recipient address.\\n    function setPaymentRecipient(\\n        address paymentRecipient\\n    ) external;\\n\\n    /// @notice Function that returns the fee recipient.\\n    /// @return The fee recipient.    \\n    function feeRecipient() external view returns (address);\\n\\n    /// @notice Function that sets the fee recipient address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param feeRecipient The fee recipient address.\\n    function setFeeRecipient(\\n        address feeRecipient\\n    ) external;\\n\\n    /// @notice Function that sets the ArmorsController contract address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param armorsControllerAddress The ArmorsController contract address.\\n    function setArmorsController(\\n        address armorsControllerAddress\\n    ) external;\\n\\n    /// @notice Function that sets the RarityController contract address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param rarityControllerAddress The RarityController contract address.\\n    function setRarityController(\\n        address rarityControllerAddress\\n    ) external;\\n\\n    /// @notice Function that sets the WeaponsController contract address.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.    \\n    /// @param weaponsControllerAddress The WeaponsController contract address.\\n    function setWeaponsController(\\n        address weaponsControllerAddress\\n    ) external;\\n\\n    /// @notice Function that sets the description of an element.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.\\n    /// @param elementId The id of the element.\\n    /// @param elementDescription The description of the element.\\n    function setElementDescription(\\n        DataTypes.Elements elementId,\\n        string calldata elementDescription\\n    ) external;\\n\\n    /// @notice Function that returns the CraftingItem struct.\\n    /// @param craftingId The id of the crafting.\\n    /// @return The CraftingItem struct.\\n    function getCraftingItem(\\n        uint256 craftingId\\n    ) external view returns (SharedStructs.CraftingItem memory);\\n\\n    /// @notice Function that adds a new item crafting and returns the crafting id.\\n    /// @dev Only callable by an address with the CREATION_ROLE.\\n    /// @param nftType The type of the NFT (Armor/Weapon).\\n    /// @param itemId The id of the item.\\n    /// @param tier The id of the item.\\n    /// @param owner The owner of the item.\\n    /// @param element The element of the item.\\n    /// @param tokenId The tokenId of the item.\\n    /// @return craftingId The craftingId.\\n    function addNewCrafting(\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        uint8 tier,\\n        address owner,\\n        DataTypes.Elements element,\\n        uint256 tokenId\\n    ) external returns (uint256 craftingId);\\n\\n    /// @notice Function that sets the element of a crafting item.\\n    /// @dev Only callable by an address with the MANAGER_ROLE.\\n    /// @param craftingId The id of the crafting.\\n    /// @param element The element of the item.\\n    function setCraftingItemElement(\\n        uint256 craftingId,\\n        DataTypes.Elements element\\n    ) external;\\n\\n    /// @notice Function that returns the element of a crafting item.\\n    /// @param craftingId The id of the crafting.\\n    /// @return The element of the crafting item.\\n    function getCraftingItemElement(\\n        uint256 craftingId\\n    ) external view returns (DataTypes.Elements);\\n\\n    /// @notice Function that sets the aesthetics of a crafting item.\\n    /// @dev Only callable by an address with the STYLING_ROLE.\\n    /// @param craftingId The id of the crafting.\\n    /// @param aesthetics The aesthetics of the item.\\n    function setCraftingItemAesthetics(\\n        uint256 craftingId,\\n        uint8[] calldata aesthetics\\n    ) external;\\n\\n    /// @notice Function that returns the aesthetics of a crafting item.\\n    /// @param craftingId The id of the crafting.\\n    /// @return The aesthetics of the crafting item.\\n    function getCraftingItemAesthetics(\\n        uint256 craftingId\\n    ) external view returns (uint8[] memory);\\n\\n    /// @notice Function that sets the rarity booster of a crafting item.\\n    /// @dev Only callable by an address with the ASSEMBLY_ROLE.\\n    /// @param craftingId The id of the crafting.\\n    /// @param rarityBooster The rarity booster of the item.\\n    function setCraftingItemRarityBooster(\\n        uint256 craftingId,\\n        uint8 rarityBooster\\n    ) external;\\n\\n    /// @notice Function that sets the rarity of a crafting item.\\n    /// @dev Only callable by an address with the ASSEMBLY_ROLE.\\n    /// @param craftingId The id of the crafting.\\n    /// @param rarity The rarity of the item.\\n    function setCraftingItemRarity(\\n        uint256 craftingId,\\n        DataTypes.Rarity rarity\\n    ) external;\\n\\n    /// @notice Function that returns the CraftingInfo struct from an item.\\n    /// @param nftType The type of the NFT (Armor/Weapon).\\n    /// @param itemId The id of the item.\\n    /// @param tier The tier of the item.\\n    /// @param step The step of the crafting.      \\n    /// @return craftingInfo The crafting info struct.\\n    function getCraftingInfo(\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        uint8 tier,\\n        DataTypes.Step step\\n    ) external view returns (SharedStructs.CraftingInfo memory craftingInfo);\\n\\n    /// @notice Function that returns if an element is valid for a weapon type.\\n    /// @param itemId The id of the item.\\n    /// @param element The element.  \\n    /// @return The bool indicating if it's valid.\\n    function isWeaponTypeElementValid(\\n        uint8 itemId,\\n        DataTypes.Elements element\\n    ) external view returns (bool);\\n\\n    /// @notice Function that returns the resources required to craft an item.\\n    /// @param nftType The type of the NFT (Armor/Weapon).\\n    /// @param itemId The id of the item.\\n    /// @param tier The tier of the item.\\n    /// @param step The step of the crafting.      \\n    /// @return resources The resources array.\\n    function getCraftingItemResources(\\n        DataTypes.NftType nftType,\\n        uint8 itemId,\\n        uint8 tier,\\n        DataTypes.Step step\\n    ) external view returns (SharedStructs.Resource[] memory resources);\\n\\n    /// @notice Function that returns the number of aesthetics from an item.\\n    /// @dev The array of item IDs should fit depending on the NftType (Armors: ArmorPieceId / Weapons: WeaponTypeId, WeaponPieceId).\\n    /// @param nftType The type of the NFT (Armor/Weapon).\\n    /// @param itemIds Array with the item IDs.\\n    /// @return aesthetic The number of aesthetics.\\n    function getCraftingItemNumAesthetics(\\n        DataTypes.NftType nftType,\\n        uint8[2] calldata itemIds\\n    ) external view returns (uint8 aesthetic);\\n\\n    /// @notice Function that returns the weapon pieces required to build a weapon type.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @return The weapon pieces required.\\n    function getWeaponTypePieces(\\n        DataTypes.WeaponTypes weaponTypeId\\n    ) external view returns (DataTypes.WeaponPieces[] memory); \\n\\n    /// @notice Function that returns the weapon piece type.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @return The armor piece type.\\n    function getWeaponPieceType(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId       \\n    ) external view returns (DataTypes.WeaponPieceTypes);\\n\\n    /// @notice Function that returns the weapon piece aesthetic elements.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @param aestheticId The id of the aesthetics.    \\n    /// @return The weapon piece aesthetic elements.\\n    function getWeaponPieceAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId,\\n        uint8 aestheticId\\n    ) external view returns (DataTypes.Elements[] memory); \\n\\n    /// @notice Function that returns the armor piece address.\\n    /// @return The armor piece address.\\n    function getArmorPieceAddress() external view returns (address);\\n\\n    /// @notice Function that returns the weapon piece address.\\n    /// @return The weapon piece address.\\n    function getWeaponTypeAddress() external view returns (address);\\n\\n    /// @notice Function that returns the description of a rarity.\\n    /// @param rarityId The rarity id.\\n    /// @return The description of the rarity.\\n    function getRarityDescription(\\n        DataTypes.Rarity rarityId\\n    ) external returns (string memory);\\n\\n    /// @notice Function that returns the probabilities of the rarities depending on the tier and the rarity booster.\\n    /// @param tier The tier.\\n    /// @param rarityBoosterid The rarity booster id.    \\n    /// @return The probability of the rarities.\\n    function getRarityProbabilities(\\n        uint8 tier,\\n        uint8 rarityBoosterid\\n    ) external view returns (uint256[] memory);\\n\\n    // Function they returns the price of the a rarity booster depending on the tier and the rarity booster id.\\n    /// @param tier The tier.\\n    /// @param rarityBoosterId The rarity booster id. \\n    function getRarityBoosterPrice(\\n        uint8 tier,\\n        uint8 rarityBoosterId\\n    ) external view returns (uint256);\\n\\n    // Function they returns the rarity booster token.\\n    /// @return The rarity booster token address.\\n    function getRarityBoosterToken(\\n    ) external view returns (address);    \\n}\"\r\n    },\r\n    \"contracts/tokens/ArmorERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"../oracles/random/VRFConsumerBaseV2Upgradeable.sol\\\";\\nimport {SharedStructs} from \\\"../libraries/SharedStructs.sol\\\";\\n\\ncontract ArmorERC721 is\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721URIStorageUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    VRFConsumerBaseV2Upgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant URI_SETTER_ROLE = keccak256(\\\"URI_SETTER_ROLE\\\");\\n    bytes32 public constant RARITY_SETTER_ROLE = keccak256(\\\"RARITY_SETTER_ROLE\\\");    \\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    mapping(uint8 => string) public baseURIByTier;\\n    mapping(uint8 => string) public baseURIArmorPieces;\\n    mapping(uint256 => SharedStructs.RequestData) randomRequestMap;\\n    mapping(uint8 => SharedStructs.RangesByTier) rangesMap;\\n    mapping(uint256 => SharedStructs.ItemInfo) public armorsInfoMap;\\n\\n    event Minted(address indexed to, uint256 indexed tokenId);\\n    event URIGeneration(uint256 tokenId, string tokenURI);\\n    event RarityUpdated(uint256 tokenId, uint8 rarityId, string rarityName);    \\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        /*address _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        address _link,\\n        bytes32 _keyHash,\\n        uint32 _callbackGasLimit,\\n        uint16 _requestConfirmations,\\n        uint32 _numWords*/\\n    ) public initializer {\\n        __ERC721_init(\\\"Outer Ring Armor\\\", \\\"ORA\\\");\\n        __ERC721Enumerable_init();\\n        __ERC721URIStorage_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ERC721Burnable_init();\\n        // TO-DO UNCOMMENT\\n        /*__VRFConsumerBaseV2_init(\\n            _vrfCoordinator,\\n            _subscriptionId,\\n            _link,\\n            _keyHash,\\n            _callbackGasLimit,\\n            _requestConfirmations,\\n            _numWords\\n        );*/\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n\\n        rangesMap[1] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 10000\\n        });\\n        rangesMap[2] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 6000\\n        });\\n        rangesMap[3] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 4500\\n        });\\n        rangesMap[4] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 4000\\n        });\\n        rangesMap[5] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 3000\\n        });\\n        rangesMap[6] = SharedStructs.RangesByTier({minRange: 0, maxRange: 100});\\n    }\\n\\n    /// @notice This function sets the ranges for random mint in lootbox\\n    /// @param tier The tier to set the range\\n    /// @param minRange Minimum range of random\\n    /// @param maxRange Maximum range of random\\n    function setRangesMap(\\n        uint8 tier,\\n        uint8 minRange,\\n        uint8 maxRange\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        rangesMap[tier] = SharedStructs.RangesByTier({\\n            minRange: minRange,\\n            maxRange: maxRange\\n        });\\n    }\\n\\n    /// @notice This function sets the base URI for the different tiers\\n    /// @param tier The tier that will be set\\n    /// @param baseURI The URI to metadata\\n    function setBaseURIByTier(uint8 tier, string memory baseURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        baseURIByTier[tier] = baseURI;\\n    }\\n\\n    /// @notice This function sets the base URI for the different pieces of armor\\n    /// @param piece The tier that will be set\\n    /// @param baseURI The URI to metadata\\n    function setBaseURIByArmorPiece(uint8 piece, string memory baseURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        baseURIArmorPieces[piece] = baseURI;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function safeMint(address to, string memory uri)\\n        public\\n        onlyRole(MINTER_ROLE)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n        emit URIGeneration(tokenId, uri);\\n        emit Minted(to, tokenId);\\n    }\\n\\n    /// @notice Function to set the URI for a token\\n    /// @param _tokenId The id of token to update\\n    /// @param _tokenURI The URI to set in the token\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\\n        public\\n        onlyRole(URI_SETTER_ROLE)\\n    {\\n        _setTokenURI(_tokenId, _tokenURI);\\n        emit URIGeneration(_tokenId, _tokenURI);\\n    }\\n\\n    /// @notice Function to set the Rarity info for a token\\n    /// @param _tokenId The id of token to update\\n    /// @param _rarityId The rarityId to set in the token\\n    /// @param _rarityName The rarityName to set in the token\\n    function setRarityInfo(\\n        uint256 _tokenId,\\n        uint8 _rarityId,\\n        string memory _rarityName\\n    ) public onlyRole(RARITY_SETTER_ROLE) {\\n        armorsInfoMap[_tokenId].rarityId = _rarityId;\\n        armorsInfoMap[_tokenId].rarityName = _rarityName;\\n\\n        emit RarityUpdated(_tokenId, _rarityId, _rarityName);\\n    }\\n\\n    /// @notice This function is used for LootBoxes and random generation\\n    /// @param _to Recipient address\\n    /// @param _uri URI for the token\\n    /// @param _armorTierConfig Structure with armor config\\n    function misteryBoxMint(\\n        address _to,\\n        string memory _uri,\\n        SharedStructs.ArmorTierConfig memory _armorTierConfig\\n    ) public onlyRole(MINTER_ROLE) {\\n        uint256 _tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, _tokenId);\\n        armorsInfoMap[_tokenId].tier = _armorTierConfig.armorTierId;\\n        armorsInfoMap[_tokenId].rarityId = _armorTierConfig.armorRarityId;\\n        armorsInfoMap[_tokenId].rarityName = _armorTierConfig.armorRarityName;\\n        armorsInfoMap[_tokenId].collectionId = _armorTierConfig.collectionId;\\n        armorsInfoMap[_tokenId].collectionName = _armorTierConfig\\n            .collectionName;\\n        armorsInfoMap[_tokenId].firstOwner = _to;\\n        _setTokenURI(_tokenId, _uri);\\n        emit URIGeneration(_tokenId, _uri);\\n        emit Minted(_to, _tokenId);\\n    }\\n\\n    /// @notice This function is used for the Crafting\\n    /// @param _to Recipient address    \\n    /// @param _uri URI for the token\\n    /// @param _itemInfo Structure with armor item info\\n    function armorPieceMint(\\n        address _to,\\n        string memory _uri,\\n        SharedStructs.ItemInfo memory _itemInfo\\n    ) public onlyRole(MINTER_ROLE) returns (uint256 _tokenId){\\n        _tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, _tokenId);\\n\\n        armorsInfoMap[_tokenId].tier = _itemInfo.tier;\\n        armorsInfoMap[_tokenId].rarityId = _itemInfo.rarityId;\\n        armorsInfoMap[_tokenId].rarityName = _itemInfo.rarityName;\\n        armorsInfoMap[_tokenId].collectionId = _itemInfo.collectionId;\\n        armorsInfoMap[_tokenId].collectionName = _itemInfo.collectionName;\\n        armorsInfoMap[_tokenId].firstOwner = _itemInfo.firstOwner;\\n        armorsInfoMap[_tokenId].piece = _itemInfo.piece;\\n\\n        _setTokenURI(_tokenId, _uri);\\n        \\n        emit URIGeneration(_tokenId, _uri);\\n        emit Minted(_itemInfo.firstOwner, _tokenId);\\n    }\\n\\n    /// @notice This function is used for LootBoxes and random generation\\n    /// @param _to Recipient address\\n    /// @param _tier The tier of the loot box selected\\n    /// @param _piece Index for armor pieces\\n    /// @param _armorTierConfig Structure with armor config\\n    function lootBoxMint(\\n        address _to,\\n        uint8 _tier,\\n        uint8 _piece,\\n        SharedStructs.ArmorTierConfig memory _armorTierConfig\\n    ) public onlyRole(MINTER_ROLE) {\\n        uint256 _tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, _tokenId);\\n        request = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        SharedStructs.RequestData storage requestData = randomRequestMap[\\n            request\\n        ];\\n        requestData.tokenId = _tokenId;\\n        requestData.tier = _tier;\\n        armorsInfoMap[_tokenId].tier = _armorTierConfig.armorTierId;\\n        armorsInfoMap[_tokenId].rarityId = _armorTierConfig.armorRarityId;\\n        armorsInfoMap[_tokenId].rarityName = _armorTierConfig.armorRarityName;\\n        armorsInfoMap[_tokenId].collectionId = _armorTierConfig.collectionId;\\n        armorsInfoMap[_tokenId].collectionName = _armorTierConfig\\n            .collectionName;\\n        armorsInfoMap[_tokenId].firstOwner = _to;\\n        armorsInfoMap[_tokenId].piece = _piece;\\n        emit Minted(_to, _tokenId);\\n    }\\n\\n    /// @notice This function is used for random generation is the callback of Chain Link\\n    /// @param _requestId Id of the request\\n    /// @param randomWords An array of random words returned by VRF\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        SharedStructs.RequestData memory requestData = randomRequestMap[\\n            _requestId\\n        ];\\n        SharedStructs.RangesByTier memory range = rangesMap[requestData.tier];\\n        SharedStructs.ItemInfo memory armorInfo = armorsInfoMap[\\n            requestData.tokenId\\n        ];\\n        string memory auxURI = requestData.tier == 6\\n            ? baseURIArmorPieces[armorInfo.piece]\\n            : baseURIByTier[requestData.tier];\\n        string memory _tokenURI = string(\\n            abi.encodePacked(\\n                auxURI,\\n                StringsUpgradeable.toString(\\n                    ((randomWords[0] % range.maxRange))\\n                ),\\n                \\\".json\\\"\\n            )\\n        );\\n        _setTokenURI(requestData.tokenId, _tokenURI);\\n        emit URIGeneration(requestData.tokenId, _tokenURI);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    )\\n        internal\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n        whenNotPaused\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(\\n            ERC721Upgradeable,\\n            ERC721EnumerableUpgradeable,\\n            AccessControlUpgradeable\\n        )\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getFirstOwner(uint256 tokenId) external view returns(address) {\\n        return armorsInfoMap[tokenId].firstOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/tokens/WeaponERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"../oracles/random/VRFConsumerBaseV2Upgradeable.sol\\\";\\nimport {SharedStructs} from \\\"../libraries/SharedStructs.sol\\\";\\n\\ncontract WeaponERC721 is\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721URIStorageUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    VRFConsumerBaseV2Upgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant URI_SETTER_ROLE = keccak256(\\\"URI_SETTER_ROLE\\\");\\n    bytes32 public constant RARITY_SETTER_ROLE = keccak256(\\\"RARITY_SETTER_ROLE\\\");    \\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    mapping(uint8 => string) public baseURIByTier;\\n    mapping(uint256 => SharedStructs.RequestData) randomRequestMap;\\n    mapping(uint8 => SharedStructs.RangesByTier) rangesMap;\\n    mapping(uint256 => SharedStructs.ItemInfo) public weaponsInfoMap;\\n\\n    event Minted(address indexed to, uint256 indexed tokenId);\\n    event URIGeneration(uint256 tokenId, string tokenURI);\\n    event RarityUpdated(uint256 tokenId, uint8 rarityId, string rarityName);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        // TO-DO UNCOMMENT\\n        /*address _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        address _link,\\n        bytes32 _keyHash,\\n        uint32 _callbackGasLimit,\\n        uint16 _requestConfirmations,\\n        uint32 _numWords*/\\n    ) public initializer {\\n        __ERC721_init(\\\"Outer Ring Weapon\\\", \\\"ORW\\\");\\n        __ERC721Enumerable_init();\\n        __ERC721URIStorage_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ERC721Burnable_init();\\n        // TO-DO UNCOMMENT\\n        /*__VRFConsumerBaseV2_init(\\n            _vrfCoordinator,\\n            _subscriptionId,\\n            _link,\\n            _keyHash,\\n            _callbackGasLimit,\\n            _requestConfirmations,\\n            _numWords\\n        );*/\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n\\n        rangesMap[1] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 10000\\n        });\\n        rangesMap[2] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 3000\\n        });\\n        rangesMap[3] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 1500\\n        });\\n        rangesMap[4] = SharedStructs.RangesByTier({\\n            minRange: 0,\\n            maxRange: 1000\\n        });\\n        rangesMap[5] = SharedStructs.RangesByTier({minRange: 0, maxRange: 500});\\n        rangesMap[6] = SharedStructs.RangesByTier({minRange: 0, maxRange: 100});\\n    }\\n\\n    function setBaseURIByTier(uint8 tier, string memory baseURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        baseURIByTier[tier] = baseURI;\\n    }\\n\\n    /// @notice Function to set the URI for a token\\n    /// @param _tokenId The id of token to update\\n    /// @param _tokenURI The URI to set in the token\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\\n        public\\n        onlyRole(URI_SETTER_ROLE)\\n    {\\n        _setTokenURI(_tokenId, _tokenURI);\\n        emit URIGeneration(_tokenId, _tokenURI);\\n    }\\n\\n    /// @notice Function to set the Rarity info for a token\\n    /// @param _tokenId The id of token to update\\n    /// @param _rarityId The rarityId to set in the token\\n    /// @param _rarityName The rarityName to set in the token\\n    function setRarityInfo(\\n        uint256 _tokenId,\\n        uint8 _rarityId,\\n        string memory _rarityName\\n    ) public onlyRole(RARITY_SETTER_ROLE) {\\n        weaponsInfoMap[_tokenId].rarityId = _rarityId;\\n        weaponsInfoMap[_tokenId].rarityName = _rarityName;\\n\\n        emit RarityUpdated(_tokenId, _rarityId, _rarityName);\\n    }\\n\\n    /// @notice This function sets the ranges for random mint in lootbox\\n    /// @param tier The tier to set the range\\n    /// @param minRange Minimum range of random\\n    /// @param maxRange Maximum range of random\\n    function setRangesMap(\\n        uint8 tier,\\n        uint8 minRange,\\n        uint8 maxRange\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        rangesMap[tier] = SharedStructs.RangesByTier({\\n            minRange: minRange,\\n            maxRange: maxRange\\n        });\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function safeMint(address to, string memory uri)\\n        public\\n        onlyRole(MINTER_ROLE)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n        emit URIGeneration(tokenId, uri);\\n        emit Minted(to, tokenId);\\n    }\\n\\n    /// @notice This function is used for LootBoxes and random generation\\n    /// @param _to Recipient address\\n    /// @param _uri URI for the token\\n    /// @param _weaponTierConfig Structure with armor config\\n    function misteryBoxMint(\\n        address _to,\\n        string memory _uri,\\n        SharedStructs.WeaponTierConfig memory _weaponTierConfig\\n    ) public onlyRole(MINTER_ROLE) {\\n        uint256 _tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, _tokenId);\\n        weaponsInfoMap[_tokenId].tier = _weaponTierConfig.weaponTierId;\\n        weaponsInfoMap[_tokenId].rarityId = _weaponTierConfig.weaponRarityId;\\n        weaponsInfoMap[_tokenId].rarityName = _weaponTierConfig\\n            .weaponRarityName;\\n        weaponsInfoMap[_tokenId].collectionId = _weaponTierConfig.collectionId;\\n        weaponsInfoMap[_tokenId].collectionName = _weaponTierConfig\\n            .collectionName;\\n        weaponsInfoMap[_tokenId].firstOwner = _to;\\n        _setTokenURI(_tokenId, _uri);\\n        emit URIGeneration(_tokenId, _uri);\\n        emit Minted(_to, _tokenId);\\n    }\\n\\n    /// @notice This function is used for the Crafting system\\n    /// @param _to Recipient address\\n    /// @param _uri URI for the token\\n    /// @param _itemInfo Structure with item info\\n    /// @return _tokenId The id of the minted token\\n    function weaponMint(\\n        address _to,\\n        string memory _uri,\\n        SharedStructs.ItemInfo memory _itemInfo\\n    ) public onlyRole(MINTER_ROLE) returns (uint256 _tokenId){\\n        _tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, _tokenId);\\n\\n        weaponsInfoMap[_tokenId].tier = _itemInfo.tier;\\n        weaponsInfoMap[_tokenId].rarityId = _itemInfo.rarityId;\\n        weaponsInfoMap[_tokenId].rarityName = _itemInfo.rarityName;\\n        weaponsInfoMap[_tokenId].collectionId = _itemInfo.collectionId;\\n        weaponsInfoMap[_tokenId].collectionName = _itemInfo.collectionName;\\n        weaponsInfoMap[_tokenId].firstOwner = _to;\\n        weaponsInfoMap[_tokenId].piece = _itemInfo.piece;\\n\\n        _setTokenURI(_tokenId, _uri);\\n        emit URIGeneration(_tokenId, _uri);\\n        emit Minted(_to, _tokenId);\\n    }\\n\\n    /// @notice This function is used for LootBoxes and random generation\\n    /// @param _to Recipient address\\n    /// @param _tier The tier of the loot box selected\\n    /// @param _weaponTierConfig Structure with weapon config\\n    function lootBoxMint(\\n        address _to,\\n        uint8 _tier,\\n        SharedStructs.WeaponTierConfig memory _weaponTierConfig\\n    ) public onlyRole(MINTER_ROLE) {\\n        uint256 _tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, _tokenId);\\n        request = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        SharedStructs.RequestData storage requestData = randomRequestMap[\\n            request\\n        ];\\n        requestData.tokenId = _tokenId;\\n        requestData.tier = _tier;\\n        weaponsInfoMap[_tokenId].tier = _weaponTierConfig.weaponTierId;\\n        weaponsInfoMap[_tokenId].rarityId = _weaponTierConfig.weaponRarityId;\\n        weaponsInfoMap[_tokenId].rarityName = _weaponTierConfig\\n            .weaponRarityName;\\n        weaponsInfoMap[_tokenId].collectionId = _weaponTierConfig.collectionId;\\n        weaponsInfoMap[_tokenId].collectionName = _weaponTierConfig\\n            .collectionName;\\n        weaponsInfoMap[_tokenId].firstOwner = _to;\\n        emit Minted(_to, _tokenId);\\n    }\\n\\n    /// @notice This function is used for random generation is the callback of Chain Link\\n    /// @param _requestId Id of the request\\n    /// @param randomWords An array of random words returned by VRF\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        SharedStructs.RequestData memory requestData = randomRequestMap[\\n            _requestId\\n        ];\\n        SharedStructs.RangesByTier memory range = rangesMap[requestData.tier];\\n        string memory _tokenURI = string(\\n            abi.encodePacked(\\n                baseURIByTier[requestData.tier],\\n                StringsUpgradeable.toString(\\n                    ((randomWords[0] % range.maxRange))\\n                ),\\n                \\\".json\\\"\\n            )\\n        );\\n        _setTokenURI(requestData.tokenId, _tokenURI);\\n        emit URIGeneration(requestData.tokenId, _tokenURI);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    )\\n        internal\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n        whenNotPaused\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(\\n            ERC721Upgradeable,\\n            ERC721EnumerableUpgradeable,\\n            AccessControlUpgradeable\\n        )\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getFirstOwner(uint256 tokenId) external view returns(address) {\\n        return weaponsInfoMap[tokenId].firstOwner;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BNBAmountSentExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CraftingSharedStorageZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CraftingStylingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Elements\",\"name\":\"element\",\"type\":\"uint8\"}],\"name\":\"ElementNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"InvalidTierForPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"ItemCraftingDoesNotExistOrAlreadySent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"craftingId\",\"type\":\"uint256\"}],\"name\":\"ItemCraftingFinished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"craftingId\",\"type\":\"uint256\"}],\"name\":\"ItemCraftingNotFinished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"}],\"name\":\"ItemCreationPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"ItemTierResourcesNotDefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LandStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NoPoolAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBNBSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolRequestedNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResourcesControllerZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"TierLocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ICraftingSharedStorage\",\"name\":\"newCraftingSharedStorage\",\"type\":\"address\"}],\"name\":\"CraftingSharedStorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ICraftingStyling\",\"name\":\"newCraftingStyling\",\"type\":\"address\"}],\"name\":\"CraftingStylingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"craftingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"ItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"ItemCreationStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"ItemMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"craftingId\",\"type\":\"uint256\"}],\"name\":\"ItemSentToStyling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"craftingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newEndTime\",\"type\":\"uint64\"}],\"name\":\"ItemSkipTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILandStaking\",\"name\":\"newLandStaking\",\"type\":\"address\"}],\"name\":\"LandStakingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoolPrice\",\"type\":\"uint256\"}],\"name\":\"PoolPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRequiredCraftedItems\",\"type\":\"uint256\"}],\"name\":\"RequiredCraftedItemsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IResourcesController\",\"name\":\"newResourcesController\",\"type\":\"address\"}],\"name\":\"ResourcesControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKIP_TIME_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICraftingSharedStorage\",\"name\":\"_craftingSharedStorage\",\"type\":\"address\"}],\"name\":\"changeCraftingSharedStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICraftingStyling\",\"name\":\"craftingStyling_\",\"type\":\"address\"}],\"name\":\"changeCraftingStyling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILandStaking\",\"name\":\"_landStaking\",\"type\":\"address\"}],\"name\":\"changeLandStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGQOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changePoolPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredCraftedItems\",\"type\":\"uint256\"}],\"name\":\"changeRequiredCraftedItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IResourcesController\",\"name\":\"resourcesController_\",\"type\":\"address\"}],\"name\":\"changeResourcesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkTierStatusByUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"craftingSharedStorage\",\"outputs\":[{\"internalType\":\"contract ICraftingSharedStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"craftingStyling\",\"outputs\":[{\"internalType\":\"contract ICraftingStyling\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Elements\",\"name\":\"element\",\"type\":\"uint8\"}],\"name\":\"createItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCraftingFeeInBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolPriceInGQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getSkipCraftingTimePriceInGQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICraftingSharedStorage\",\"name\":\"craftingSharedStorageAddress\",\"type\":\"address\"},{\"internalType\":\"contract IGQOracle\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"contract ILandStaking\",\"name\":\"landStakingAddress\",\"type\":\"address\"},{\"internalType\":\"contract IResourcesController\",\"name\":\"resourcesControllerAddress\",\"type\":\"address\"},{\"internalType\":\"contract ICraftingStyling\",\"name\":\"craftingStylingAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.NftType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"itemCreationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landStaking\",\"outputs\":[{\"internalType\":\"contract ILandStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IGQOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredCraftedItemsByTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourcesController\",\"outputs\":[{\"internalType\":\"contract IResourcesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"sendToStyling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"skipCraftingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalResourcesUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.NftType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"updateItemCreationState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCraftedItemsByTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCreationItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"craftingId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CraftingCreation", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}