{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-22\r\n*/\r\n\r\n/**\r\n\r\n *Submitted for verification at BscScan.com on 2023-05-10\r\n\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\n\r\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\r\n\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n            if (a == 0) {\r\n\r\n                return 0; \r\n\r\n            }\r\n\r\n            uint256 c = a * b;\r\n\r\n            assert(c / a == b);\r\n\r\n            return c; \r\n\r\n        }\r\n\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n            uint256 c = a / b;\r\n\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n            return c; \r\n\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n            assert(b <= a);\r\n\r\n            return a - b; \r\n\r\n        }\r\n\r\n\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n            uint256 c = a + b;\r\n\r\n            assert(c >= a);\r\n\r\n            return c; \r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n\r\n        function totalSupply() external view returns (uint256);\r\n\r\n        function balanceOf(address _who) external view returns (uint256);\r\n\r\n        function transfer(address _to, uint256 _value) external;\r\n\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n\r\n        function approve(address _spender, uint256 _value) external; \r\n\r\n        function burnFrom(address _from, uint256 _value) external; \r\n\r\n            function mint(uint256 amount) external  returns (bool);\r\n\r\n        function decimals() external pure returns (uint8);\r\n\r\n\r\n\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n \r\n\r\n \r\n\r\n    \r\n\r\n\r\n\r\n    contract Base {\r\n\r\n        using SafeMath for uint;\r\n\r\n\r\n\r\n        Erc20Token constant internal USDT  = Erc20Token(0x55d398326f99059fF775485246999027B3197955); \r\n\r\n        Erc20Token constant internal EPT   = Erc20Token(0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069); \r\n\r\n        Erc20Token constant internal ARR   = Erc20Token(0xb37b866871882124C3E7E301d936C29089c43987); \r\n\r\n        Erc20Token constant internal ATT   = Erc20Token(0xD727972b540dF5FD3b7bea2145313C2146D576e6); \r\n\r\n\r\n\r\n        Erc20Token constant internal _ATTIns = Erc20Token(0xD727972b540dF5FD3b7bea2145313C2146D576e6); \r\n\r\n        uint256 authenticationO   = 0;\r\n\r\n        uint256 authenticationP   = 0;\r\n\r\n        uint256 authenticationC   = 1;\r\n\r\n        uint256 dayMaxUSDT   = 100000000000000000000000;\r\n\r\n        uint256 dayMaxEPT   = 100000000000000000000000;\r\n\r\n        uint256 dayMaxARR    = 100000000000000000000000;\r\n\r\n        uint256 dayMaxATT   = 100000000000000000000000;\r\n\r\n        uint256 dayAll   = 0;\r\n\r\n        uint256 times   = 0;\r\n\r\n\r\n\r\n\r\n\r\n      mapping(uint256=>uint256) edDayMap;\r\n\r\n      mapping(uint256=>address) public addressMap;\r\n\r\n        mapping(uint256=>mapping(uint256=>uint256)) edMap;  \r\n\r\n\r\n\r\n \r\n\r\n         address  public Operator;\r\n\r\n        bool  public Open;\r\n\r\n        address  _owner;\r\n\r\n \r\n\r\n        modifier onlyOwner() {\r\n\r\n            require(msg.sender == _owner, \"Permission denied\"); _;\r\n\r\n        }\r\n\r\n        modifier isZeroAddr(address addr) {\r\n\r\n            require(addr != address(0), \"Cannot be a zero address\"); _; \r\n\r\n        }\r\n\r\n \r\n\r\n         modifier onlyOpen() {\r\n\r\n        require(Open, \"_owner Open\"); _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyauthentication() {\r\n\r\n        require(authenticationC == authenticationO);\r\n\r\n        require(authenticationC == authenticationP);_;\r\n\r\n    }\r\n\r\n \r\n\r\n    modifier onlyOperator() {\r\n\r\n        require(msg.sender == Operator, \"Permission denied\"); _;\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner onlyauthentication {\r\n\r\n        require(newOwner != address(0));\r\n\r\n         authenticationC = authenticationC.add(1);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setDayMax (uint256 Quantity,uint256 types) public onlyOwner onlyauthentication {\r\n\r\n        authenticationC = authenticationC.add(1);\r\n\r\n        edDayMap[types] = Quantity;\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n\r\n    \r\n\r\n    function transferOperatorship(address newOperator) public onlyOperator onlyauthentication {\r\n\r\n        require(newOperator != address(0));\r\n\r\n        authenticationC = authenticationC.add(1);\r\n\r\n        Operator = newOperator;\r\n\r\n    }\r\n\r\n\r\n\r\n \r\n\r\n    function setAuthenticationP() public onlyOperator {\r\n\r\n        authenticationP = authenticationC;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setAuthenticationO() public onlyOwner {\r\n\r\n        authenticationO = authenticationC;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n     function setOpenOrClose() public onlyOwner {\r\n\r\n        Open = !Open;\r\n\r\n    } \r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n        receive() external payable {}  \r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n\r\ncontract ATTCT is Base {\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n\r\n\r\n\r\n     constructor()\r\n\r\n     {\r\n\r\n \r\n        addressMap[1] = 0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069;\r\n        addressMap[2] = 0xb37b866871882124C3E7E301d936C29089c43987;\r\n        addressMap[3] = 0xD727972b540dF5FD3b7bea2145313C2146D576e6;\r\n        addressMap[4] = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n        _owner = 0xdd641fb909dF7aF0ADd83ea50CA947d229918ab8; \r\n\r\n        Operator = 0x0d70a7f85A75d1cD59AA7c27269fB0807238c573; \r\n\r\n     }\r\n\r\n \r\n\r\n      \r\n\r\n       \r\n\r\n    function ATTRecharge(uint256 ty,uint256 Number ,uint256 orderID ,uint256 addID ) public    {\r\n\r\n\r\n\r\n        if(ty == 1){\r\n\r\n            EPT.transferFrom(msg.sender, address(this),Number * 10**18 /getPrice(ty));\r\n\r\n\r\n\r\n        }else if( ty == 2){\r\n\r\n            ARR.transferFrom(msg.sender, address(this),Number * 10**18 /getPrice(ty));\r\n\r\n\r\n\r\n\r\n\r\n         }else if(ty == 3){\r\n\r\n            ATT.transferFrom(msg.sender, address(this),Number * 10**18 /getPrice(ty));\r\n\r\n\r\n\r\n         }\r\n\r\n         else if(ty == 4){\r\n\r\n            USDT.transferFrom(msg.sender, address(this),Number);\r\n\r\n\r\n\r\n         }\r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n \r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     function multiTransferOne(\r\n\r\n        address  addresses,\r\n\r\n        uint256  tokens,\r\n\r\n        uint256 types\r\n\r\n    ) external onlyOperator() onlyOpen() {\r\n\r\n              dayAll = dayAll.add(tokens);\r\n\r\n            require(dayAll <= edDayMap[types], \"dayMax\");\r\n\r\n             Erc20Token(addressMap[types]).transfer( addresses ,tokens );\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function ApplyForWithdrawal(\r\n\r\n        uint256  tokens\r\n\r\n    ) external   {\r\n\r\n    }\r\n\r\n\r\n\r\n  \r\n\r\n    function getPrice(uint256  ty)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (uint256 price)\r\n\r\n    {\r\n\r\n        address tokenAddress0  ;\r\n\r\n         address uniswapV2Pair   ;\r\n\r\n\r\n\r\n        address     USDT  =  address(0x55d398326f99059fF775485246999027B3197955); \r\n\r\n        address     EPT   =  address(0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069); \r\n\r\n      \r\n\r\n        address     ATT   =  address(0xD727972b540dF5FD3b7bea2145313C2146D576e6); \r\n\r\n        if(ty == 1||ty == 2){\r\n\r\n            tokenAddress0 = EPT;\r\n\r\n            uniswapV2Pair = 0x49f2dfe2cC250a5Ed11Ae2d823A6564A8500aD9a;\r\n\r\n        }else if(ty == 3){\r\n\r\n            tokenAddress0 = ATT;\r\n\r\n            uniswapV2Pair = 0x37f1DcAAF8C0a5169fed08E7248Afd12800Ec0c3;\r\n\r\n        }\r\n\r\n         uint256 balancePath1 = Erc20Token(USDT).balanceOf(\r\n\r\n            uniswapV2Pair\r\n\r\n        );\r\n\r\n        uint256 balancePath2 = Erc20Token(tokenAddress0).balanceOf(uniswapV2Pair);\r\n\r\n        if (balancePath1 == 0 || balancePath2 == 0) return 0;\r\n\r\n        \r\n\r\n        if(ty == 2){\r\n\r\n             price =\r\n\r\n           balancePath1 * getPriceARR()   /\r\n\r\n            (balancePath2 ) ; \r\n\r\n        }else {\r\n\r\n              price =\r\n\r\n             balancePath1 * 10**18   /\r\n\r\n            balancePath2  ; \r\n\r\n        }\r\n\r\n      \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n \r\n    function getPriceARR()\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (uint256 price)\r\n\r\n    {\r\n\r\n        address     EPT   =  address(0xCDAbD94A40e25E80Cd4CE1D73C8f93e368BD1069); \r\n\r\n        address     ARR   =  address(0xb37b866871882124C3E7E301d936C29089c43987); \r\n\r\n        address   uniswapV2Pair = 0xaDf74c4eF1Eab7F2b38Be9CF05576D95F86B4edB;\r\n\r\n        uint256 balancePath1 = Erc20Token(EPT).balanceOf(\r\n\r\n            uniswapV2Pair\r\n\r\n        );\r\n\r\n        uint256 balancePath2 = Erc20Token(ARR).balanceOf(uniswapV2Pair);\r\n\r\n        if (balancePath1 == 0 || balancePath2 == 0) return 0;\r\n\r\n      \r\n\r\n        price = balancePath1 * 10**18/ balancePath2  ; \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addID\",\"type\":\"uint256\"}],\"name\":\"ATTRecharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ApplyForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ty\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceARR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"multiTransferOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"setDayMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpenOrClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ATTCT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://534b811837bd3512d61748336968811b92b0dd329d028687fce450f4df06c3f0"}