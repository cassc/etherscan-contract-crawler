{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >= 0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n contract TOKEN is IERC20, Ownable {\r\n\r\n  uint256 private constant _totalTokens = 1_234_567_890 * 10**DECIMALS; \r\n  string private constant NAME = \"BOJACK\";\r\n  string private constant SYMBOL = \"BOJACK\";\r\n  uint8 private constant DECIMALS = 18;\r\n\r\n  struct feeProfile{ uint8 _liquidity; uint8 _marketing; uint8 _dev; uint8 _totalFee; }\r\n\r\n  feeProfile public _buyProfile;\r\n  feeProfile public _sellProfile;\r\n        \r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  mapping (address => uint256) private _balances; \r\n  mapping (address => bool) public _addressesExcludedFromFees; \r\n\r\n  bool public _isSwapEnabled; \r\n  bool public _isFeeEnabled; \r\n  bool public _isBuyingAllowed; //The contract will be activated once liquidity is added.\r\n\r\n  uint256 public _tokenSwapThreshold = _totalTokens / 1000 * 1; //0.1%\r\n\r\n  // UNISWAP INTERFACES (For swaps)\r\n  IRouter02 internal V2Router;\r\n  address private V2Pair;\r\n\r\n  address public _marketingWallet;\r\n  address public _devWallet;\r\n\r\n  uint256 private blockPenalty;\r\n  uint256 public tradingActiveBlock = 0; // 0 means trading is not active\r\n\r\n  event _changeFees(uint256 _liq, uint256 _marketing, uint256 _dev, bool _isBuy);\r\n  event _updateWallets(address _marketing, address _dev);\r\n  event _setRouter(address _routerAddress);\r\n  event _setThreshold(uint256 _threshold);\r\n  event _clear(uint256 _tokenAmount);\r\n  event _claimDust(uint256 _amount);\r\n  event _launch(uint256 _start);\r\n  event _swapAndLiquify(uint256 _amount);\r\n    \r\n  constructor () {\r\n    _balances[_msgSender()] = totalSupply();\r\n    _marketingWallet = address(0xa7d2a94fB19a0Fa4d07E63C623c89827e4d01f86);\r\n    _devWallet = address(0xe8222921A07B931986045Fd880af4c3032A3A937);\r\n\r\n    // Initialize V2 router \r\n    setSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    // Exclude contract from fees\r\n    setExcludedFromFees(address(this), true);\r\n    setExcludedFromFees(_msgSender(), true);\r\n    setExcludedFromFees(_marketingWallet, true);\r\n    setExcludedFromFees(_devWallet, true);\r\n\r\n    // buy \r\n    setFeeProfile(0,0,0,true);\r\n\r\n    // sell\r\n    setFeeProfile(0,0,0,false);\r\n\r\n    emit Transfer(address(0), _msgSender(), totalSupply());\r\n  }\r\n\r\n  function Launch(uint256 _blockPenalty) external onlyOwner {\r\n    require(!_isBuyingAllowed, \"trading is already active\");\r\n  \r\n    setSwapEnabled(true);\r\n    setFeeEnabled(true);\r\n\r\n    _isBuyingAllowed = true;\r\n    tradingActiveBlock = block.number;\r\n    blockPenalty = _blockPenalty;\r\n\r\n    emit _launch(tradingActiveBlock);\r\n  }\r\n\r\n  function setWallets(address _marketing, address _dev) external onlyOwner() {\r\n        _marketingWallet = _marketing;\r\n        _devWallet = _dev;\r\n        emit _updateWallets(_marketing, _dev);\r\n    }\r\n\r\n  function setFeeProfile(uint8 _liquidity, uint8 _marketing, uint8 _dev, bool _updateBuy) public onlyOwner() {\r\n    uint8 _totalFee = _liquidity + _marketing + _dev;\r\n    require(_totalFee <= 20, \"tax to high\");\r\n        if(_updateBuy) { _buyProfile._liquidity = _liquidity;  _buyProfile._marketing = _marketing;  _buyProfile._dev = _dev; _buyProfile._totalFee = _totalFee; }\r\n        else{ _sellProfile._liquidity = _liquidity; _sellProfile._marketing = _marketing; _sellProfile._dev = _dev; _sellProfile._totalFee = _totalFee;}\r\n        emit _changeFees(_liquidity,_marketing,_dev,_updateBuy);\r\n    }\r\n    \r\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    doTransfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    doTransfer(sender, recipient, amount);\r\n    doApprove(sender, _msgSender(), _allowances[sender][_msgSender()] - amount); // Will fail when there is not enough allowance\r\n    return true;\r\n  }\r\n  \r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    doApprove(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n  \r\n  function doTransfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(sender != address(0), \"zero address transfer is not allowed\");\r\n    require(recipient != address(0), \"zero address transfer is not allowed\");\r\n    require(amount > 0, \"amount must be greater than zero\");\r\n\r\n    if(!_isBuyingAllowed)  { require(_addressesExcludedFromFees[sender], \"cant transfer\"); }\r\n    if(_isSwapEnabled){\texecuteSwapCheck(sender, recipient); }\r\n\r\n    uint256 feeRate = calculateFeeRate(sender, recipient);\r\n    uint256 feeAmount = amount * feeRate / 100;\r\n    uint256 transferAmount = amount - feeAmount;\r\n\r\n    updateBalances(sender, recipient, amount, feeAmount);\r\n\r\n    emit Transfer(sender, recipient, transferAmount); \r\n  }\r\n  \r\n  function executeSwapCheck(address sender, address recipient) private {\r\n    if (!isMarketTransfer(sender, recipient)) {\r\n      return;\r\n    }\r\n\r\n    uint256 tokensAvailableForSwap = balanceOf(address(this));\r\n    if (tokensAvailableForSwap >= _tokenSwapThreshold) {\r\n      tokensAvailableForSwap = _tokenSwapThreshold;\r\n\r\n      bool isSelling = isPancakeswapPair(recipient);\r\n      if (isSelling) {\r\n        executeSwap(tokensAvailableForSwap);\r\n      }\r\n    }\r\n  }\r\n\r\n  // if buildup becomes to large in contract\r\n  function clearSwap(uint256 _tokenAmount) external onlyOwner(){\r\n    executeSwap(_tokenAmount);\r\n    emit _clear(_tokenAmount);\r\n  }\r\n  \r\n  function executeSwap(uint256 amount) private {\r\n    // Allow pancakeswap to spend the tokens of the address\r\n    doApprove(address(this), address(V2Router), amount);\r\n    uint256 total = _sellProfile._totalFee;\r\n\r\n    if(total > 0 ){\r\n      uint256 tokensReservedForLiquidity = amount * _sellProfile._liquidity / total;\r\n      uint256 tokensReservedForDev = amount * _sellProfile._dev / total ;\r\n      uint256 tokensReservedForMarketing = amount - tokensReservedForLiquidity - tokensReservedForDev;\r\n\r\n      uint256 tokensToSwapForLiquidity = tokensReservedForLiquidity / 2;\r\n      uint256 tokensToAddAsLiquidity = tokensToSwapForLiquidity;\r\n\r\n      uint256 tokensToSwap = tokensToSwapForLiquidity + tokensReservedForMarketing + tokensReservedForDev;\r\n      uint256 ethSwapped = swapTokensForBNB(tokensToSwap);\r\n      \r\n      uint256 bnbToBeAddedToLiquidity = ethSwapped * tokensToSwapForLiquidity / tokensToSwap;\r\n      uint256 bnbToBeSentToDevelopment = ethSwapped * tokensReservedForDev / tokensToSwap;\r\n      uint256 bnbToBeSentToMarketing = ethSwapped - bnbToBeAddedToLiquidity- bnbToBeSentToDevelopment;\r\n\r\n      payable(_marketingWallet).transfer(bnbToBeSentToMarketing);\r\n      payable(_devWallet).transfer(bnbToBeSentToDevelopment);\r\n\r\n      try V2Router.addLiquidityETH{value: bnbToBeAddedToLiquidity}(address(this), tokensToAddAsLiquidity, 0, 0, _devWallet, block.timestamp){} catch {}\r\n      emit _swapAndLiquify(ethSwapped);\r\n    }\r\n  }\r\n\r\n  function updateBalances(address sender, address recipient, uint256 sentAmount, uint256 feeAmount) private {\r\n    // Calculate amount to be received by recipient\r\n    uint256 receivedAmount = sentAmount - feeAmount;\r\n\r\n    // Update balances\r\n    _balances[sender] -= sentAmount;\r\n    _balances[recipient] += receivedAmount;\r\n    \r\n    // Add fees to contract\r\n    _balances[address(this)] += feeAmount;\r\n\r\n    // hides bloat emits\r\n    if(feeAmount > 0 ){\r\n      emit Transfer(sender, address(this), feeAmount); \r\n    }\r\n  \r\n  }\r\n\r\n  function doApprove(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0), \"Cannot approve from the zero address\");\r\n    require(spender != address(0), \"Cannot approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function calculateFeeRate(address sender, address recipient) private view returns(uint256) {\r\n    bool applyFees = _isFeeEnabled && !_addressesExcludedFromFees[sender] && !_addressesExcludedFromFees[recipient];\r\n    if (applyFees) {\r\n      if (isPancakeswapPair(recipient)) {\r\n        return _sellProfile._totalFee;\r\n      }else{\r\n            if(isPenaltyActive()){\r\n                return 75;\r\n              }else{\r\n                return _buyProfile._totalFee;\r\n              }\r\n            }\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  function swapTokensForBNB(uint256 tokenAmount) internal returns(uint256) {\r\n    uint256 initialBalance = address(this).balance;\r\n  \r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = V2Router.WETH();\r\n    V2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n \r\n    return address(this).balance - initialBalance;\r\n  }\r\n\r\n  function isSwapTransfer(address sender, address recipient) private view returns(bool) {\r\n    bool isContractSelling = sender == address(this) && isPancakeswapPair(recipient);\r\n    return isContractSelling;\r\n  }\r\n\r\n  function isMarketTransfer(address sender, address recipient) internal virtual view returns(bool) {\r\n    return !isSwapTransfer(sender, recipient);\r\n  }\r\n\r\n  function amountUntilSwap() external  view returns (uint256) {\r\n    uint256 balance = balanceOf(address(this));\r\n    if (balance > _tokenSwapThreshold) {\r\n      return 0;\r\n    }\r\n    return _tokenSwapThreshold - balance;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    doApprove(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    doApprove(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  function setSwapRouter(address routerAddress) public onlyOwner {\r\n    require(routerAddress != address(0), \"Cannot use the zero address as router address\");\r\n    V2Router = IRouter02(routerAddress);\r\n    V2Pair = IFactoryV2(V2Router.factory()).createPair(address(this), V2Router.WETH());\r\n    emit _setRouter(routerAddress);\r\n  }\r\n\r\n  function isPancakeswapPair(address addr) internal view returns(bool) {\r\n    return V2Pair == addr;\r\n  }\r\n\r\n  function setTokenSwapThreshold(uint256 threshold) external  onlyOwner {\r\n    require(threshold > 0, \"Threshold must be greater than 0\");\r\n    _tokenSwapThreshold = threshold;\r\n    emit _setThreshold(threshold);\r\n  }\r\n\r\n  // dust can build up by failure of adding liq \r\n  function clearDust() external  onlyOwner{\r\n      payable(_devWallet).transfer(address(this).balance);\r\n      emit _claimDust(address(this).balance);\r\n  }\r\n\r\n    function totalSupply() public override pure returns (uint256) { return _totalTokens; }\r\n    function allowance(address user, address spender) public view override returns (uint256) { return _allowances[user][spender]; }\r\n    function pairAddress() public view returns (address) { return V2Pair; }\r\n    function setSwapEnabled(bool isEnabled) public onlyOwner { _isSwapEnabled = isEnabled; }\r\n    function setFeeEnabled(bool isEnabled) public onlyOwner { _isFeeEnabled = isEnabled; }\r\n    function setExcludedFromFees(address addr, bool value) public onlyOwner { _addressesExcludedFromFees[addr] = value; }\r\n    function isPenaltyActive() public view returns (bool) { return tradingActiveBlock >= block.number - blockPenalty; } \r\n    function decimals() external pure override returns (uint8) { if (totalSupply() == 0) { revert(); } return DECIMALS; }\r\n    function symbol() external pure override returns (string memory) { return SYMBOL; }\r\n    function name() external pure override returns (string memory) { return NAME; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n\r\n  receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"}],\"name\":\"_changeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_claimDust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_clear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"_launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"_setRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"_setThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_swapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"_updateWallets\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockPenalty\",\"type\":\"uint256\"}],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressesExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyProfile\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_totalFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isBuyingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfile\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_totalFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountUntilSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"clearSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPenaltyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dev\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_updateBuy\",\"type\":\"bool\"}],\"name\":\"setFeeProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ea262e41f43ffb7b3329b09ec671fe41c423bb9a972bf3644315ec87cb03417"}