{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IpancakeswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IpancakeswapV2Router02 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PILOTCOIN is Context, IERC20, Ownable {\r\n\r\n    event Burn(address indexed _from, uint256 indexed _amount);\r\n    event PoolFunded(address indexed _to, uint256 indexed _amount);\r\n\r\n    mapping(address => bool) private _pools;\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private constant _decimals = 18;\r\n    uint16 public constant PRECISION = 1000;\r\n    uint256 public taxThreshold = 1000 * 10**_decimals;\r\n    uint256 private _initialSupply = 100000000 * 10**_decimals;\r\n\r\n    uint256 public buyTax = 0; //0%\r\n    uint256 public sellTax = 60; //6%\r\n    uint256 public liqPercentage = 300; //30% of 6% tax. Translates to = 1.8%\r\n    uint256[2] public fS = [500, 500]; // 50/50\r\n\r\n    string private constant _name = \"PILOT COIN\";\r\n    string private constant _symbol = \"PTC\";\r\n\r\n    address public pancakeswapV2Pair;\r\n    address burnAddress = address(0x0dead);\r\n    address payable public marketingWallet;\r\n    address payable public collectorWallet;\r\n    IpancakeswapV2Router02 public pancakeswapV2Router;\r\n    bool public launched = false;\r\n\r\n    modifier onlyStakingPools(){\r\n        require(_pools[_msgSender()], \"Not a pool\");\r\n        _;\r\n    }\r\n\r\n    //pancakeswapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //Mainnet\r\n    //pancakeswapV2Router = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3; //Testnet\r\n\r\n    constructor(address _pancakeswapV2Router, address _marketing, address _collector) {\r\n       \r\n        pancakeswapV2Router = IpancakeswapV2Router02(_pancakeswapV2Router);\r\n        pancakeswapV2Pair = IpancakeswapV2Factory(pancakeswapV2Router.factory()).createPair(address(this), pancakeswapV2Router.WETH());\r\n        marketingWallet = payable(_marketing);\r\n        collectorWallet = payable(_collector);\r\n\r\n        _totalSupply = _initialSupply;\r\n        _balance[msg.sender] = _initialSupply;\r\n\r\n        _pools[msg.sender] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _initialSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;   \r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return _balance[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool){\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256){\r\n        return _allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool){\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), _allowances[_sender][_msgSender()] - _amount);\r\n        return true;\r\n    }\r\n    \r\n    function fundPool(address _to, uint256 _amount) external onlyStakingPools {\r\n        _fundPoolInternal(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external returns(bool) {\r\n        _burn(_msgSender(), _amount);\r\n        return true;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        // One time thing... Cannot be undone\r\n        // Everything SAFU\r\n\r\n        launched = true;\r\n    }\r\n\r\n    function updatePool(address[] memory _wallet, bool[] memory _update) external onlyOwner {\r\n        for(uint i = 0; i < _wallet.length; i++){\r\n            _pools[_wallet[i]] = _update[i];\r\n        }\r\n    }\r\n\r\n    function updateExcludedWallet(address _wallet, bool _flag) external onlyOwner {\r\n        _isExcludedFromFee[_wallet] = _flag;\r\n    }\r\n\r\n    function updateTaxThreshold(uint256 _threshold) external onlyOwner {\r\n        taxThreshold = _threshold;\r\n    }\r\n\r\n    function updateLiqPercentage(uint256 _percTrailingZero) external onlyOwner {\r\n        liqPercentage = _percTrailingZero;\r\n    }\r\n\r\n    function changeSellTax(uint256 _newSellTax) external onlyOwner {\r\n        require(_newSellTax <= 150, \"Tax too high\");\r\n        sellTax = _newSellTax;\r\n    }\r\n\r\n    function updateBuyTax(uint256 _newBuyTax) external onlyOwner {\r\n        require(_newBuyTax <= 150, \"Tax too high\");\r\n        buyTax = _newBuyTax;\r\n    }\r\n    \r\n    function setMarketingWallet(address _marketing) external onlyOwner {\r\n        marketingWallet = payable(_marketing);\r\n    }\r\n\r\n    function setCollectorWallet(address _collector) external onlyOwner {\r\n        collectorWallet = payable(_collector);\r\n    }\r\n\r\n    function approve(address _purgeCatcher) external onlyOwner {\r\n        //Approve purge of collected tax. \r\n\r\n        _transfer(address(this), _purgeCatcher, balanceOf(address(this)));\r\n    }\r\n\r\n    function _pov(uint256 _value, uint256 _trailingZeroPercent) internal pure returns(uint256){\r\n        if(_trailingZeroPercent == 0){\r\n            return 0;\r\n        }else{\r\n            return (_value * _trailingZeroPercent) / PRECISION;\r\n        }\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _fundPoolInternal(address _pool, uint256 _amount) internal {\r\n        _balance[_pool] += _amount;\r\n        _totalSupply += _amount;\r\n\r\n        emit PoolFunded(_pool, _amount);\r\n    }\r\n\r\n    function _burn(address _from, uint256 _amount) internal {\r\n        IERC20(address(this)).transferFrom(_from, burnAddress, _amount);\r\n        _totalSupply -= _amount;\r\n\r\n        emit Burn(_from, _amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) internal {\r\n\r\n        uint256 tax;\r\n        if (_isExcludedFromFee[_from] || _to == burnAddress) {\r\n            tax = 0;\r\n        } else {\r\n            require(launched, \"PTC not launched\");\r\n            \r\n            if (_from == address(pancakeswapV2Pair)) {\r\n                tax = buyTax;\r\n            } else if (_to == address(pancakeswapV2Pair)) {\r\n                \r\n                uint256 tokensToSwap = balanceOf(address(this));\r\n                if (tokensToSwap > taxThreshold) {\r\n                    \r\n                    uint256 liqAmount = _pov(tokensToSwap, liqPercentage);\r\n                    uint256 liqSplit = liqAmount / 2;\r\n\r\n                    //Swap & add liquidity\r\n                    _swapTokensForEth(liqSplit);\r\n                    _addLiquidityETH(liqSplit, address(this).balance);\r\n\r\n                    //Swap for marketing\r\n                    _swapTokensForEth(tokensToSwap - liqSplit);\r\n                    _distributeFee();\r\n                }\r\n\r\n                tax = sellTax;\r\n\r\n            } else {\r\n                tax = 0;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(_from, _to, _amount, tax);\r\n    }\r\n\r\n    function _tokenTransfer(address _from, address _to, uint256 _amount, uint256 tax) internal {\r\n        uint256 taxTokens = _pov(_amount, tax);\r\n        uint256 transferAmount = _amount - taxTokens;\r\n\r\n        _balance[_from] -= _amount;\r\n        _balance[_to] += transferAmount;\r\n        _balance[address(this)] += taxTokens;\r\n\r\n        if(_to == address(0x0dead)){\r\n            _burn(_from, _amount);\r\n        }else{\r\n            emit Transfer(_from, _to, transferAmount);\r\n        } \r\n    }\r\n\r\n    function _distributeFee() internal {\r\n        uint256 balance = address(this).balance;\r\n\r\n        marketingWallet.transfer(_pov(balance, fS[0]));\r\n        collectorWallet.transfer(_pov(balance, fS[1]));\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 _tokenAmount) internal {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(pancakeswapV2Router), _tokenAmount);\r\n        \r\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 60\r\n        );\r\n    }\r\n\r\n    function _addLiquidityETH(uint256 _tokenAmount, uint256 _ethAmount) internal {\r\n\r\n        _approve(address(this), address(pancakeswapV2Router), _tokenAmount);\r\n\r\n        pancakeswapV2Router.addLiquidityETH{value: _ethAmount}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            address(0xdead),\r\n            block.timestamp + 60\r\n        );\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purgeCatcher\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSellTax\",\"type\":\"uint256\"}],\"name\":\"changeSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectorWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IpancakeswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setCollectorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyTax\",\"type\":\"uint256\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"updateExcludedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percTrailingZero\",\"type\":\"uint256\"}],\"name\":\"updateLiqPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallet\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_update\",\"type\":\"bool[]\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"updateTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PILOTCOIN", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000f16d1b3ed160c7a5cde73c56e866bccd6a674290000000000000000000000000bd6b0c62f48bc9118de5f9dbe30666d634a4132", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8a2ab3998aa423886d9a8a0e73460aa2bfaf60fe776797b6bea80ad1507c031"}