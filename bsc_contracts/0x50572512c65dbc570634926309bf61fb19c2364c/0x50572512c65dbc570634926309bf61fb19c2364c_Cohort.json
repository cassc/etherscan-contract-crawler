{"SourceCode": "// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/access/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT;\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender()\r\n    internal\r\n    view\r\n    virtual\r\n    returns (address payable)\r\n  {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File contracts/access/Pausable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\n\r\nabstract contract Pausable is Context {\r\n  /**\r\n   * @dev Emitted when the pause is triggered by `account`.\r\n   */\r\n  event Paused(address account);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by `account`.\r\n   */\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state.\r\n   */\r\n  constructor() {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view virtual returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused(), \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused(), \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  function _pause() internal virtual whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns to normal state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  function _unpause() internal virtual whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n}\r\n\r\n// File contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\nabstract contract Ownable is Pausable {\r\n  address public _owner;\r\n  address public _admin;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor(address ownerAddress) {\r\n    _owner = ownerAddress;\r\n    _admin = ownerAddress;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(\r\n      _owner == _msgSender(),\r\n      \"Ownable: caller is not the owner\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(\r\n      _admin == _msgSender(),\r\n      \"Ownable: caller is not the Admin\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyAdmin {\r\n    emit OwnershipTransferred(_owner, _admin);\r\n    _owner = _admin;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner)\r\n    public\r\n    virtual\r\n    onlyOwner\r\n  {\r\n    require(\r\n      newOwner != address(0),\r\n      \"Ownable: new owner is the zero address\"\r\n    );\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File contracts/abstract/CohortStaking.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract CohortStaking {\r\n  struct tokenInfo {\r\n    bool isExist;\r\n    uint8 decimal;\r\n    uint256 userMinStake;\r\n    uint256 userMaxStake;\r\n    uint256 totalMaxStake;\r\n    uint256 lockableDays;\r\n    bool optionableStatus;\r\n  }\r\n\r\n  mapping(address => tokenInfo) public tokenDetails;\r\n  mapping(address => uint256) public totalStaking;\r\n  mapping(address => address[]) public tokensSequenceList;\r\n\r\n  mapping(address => mapping(address => uint256))\r\n    public tokenDailyDistribution;\r\n\r\n  mapping(address => mapping(address => bool))\r\n    public tokenBlockedStatus;\r\n\r\n  uint256 public refPercentage;\r\n  uint256 public poolStartTime;\r\n  uint256 public stakeDuration;\r\n\r\n  function viewStakingDetails(address _user)\r\n    public\r\n    view\r\n    virtual\r\n    returns (\r\n      address[] memory,\r\n      address[] memory,\r\n      bool[] memory,\r\n      uint256[] memory,\r\n      uint256[] memory,\r\n      uint256[] memory\r\n    );\r\n\r\n  function safeWithdraw(address tokenAddress, uint256 amount)\r\n    public\r\n    virtual;\r\n\r\n  function transferOwnership(address newOwner) public virtual;\r\n}\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File contracts/interfaces/ICohort.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface ICohort {\r\n  function setupCohort(uint256[] memory _intervalDays, bool _isSwapfy)\r\n    external\r\n    returns (bool);\r\n}\r\n\r\n// File contracts/Cohort.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @title Unifarm Cohort Unstake Handler Contract\r\n * @author Opendefi by OroPocket\r\n */\r\n\r\ncontract Cohort is Ownable, ICohort {\r\n  /// @notice LockableToken struct for storing token lockable details\r\n  struct LockableTokens {\r\n    uint256 lockableDays;\r\n    bool optionableStatus;\r\n  }\r\n\r\n  /// @notice Wrappers over Solidity's arithmetic operations\r\n  using SafeMath for uint256;\r\n\r\n  /// @notice totalStaking of a specfic tokenAddress.\r\n  mapping(address => uint256) public totalUnStaking;\r\n\r\n  /// @notice tokens old to new token swap\r\n  mapping(address => address) public tokens;\r\n\r\n  /// @notice unStakeStatus of a user.\r\n  mapping(address => mapping(uint256 => bool)) public unStakeStatus;\r\n\r\n  /// @notice tokenBlocked status.\r\n  mapping(address => bool) public tokenBlockedStatus;\r\n\r\n  /// @notice lockable token mapping\r\n  mapping(address => LockableTokens) public lockableDetails;\r\n\r\n  /// @notice cohort instance.\r\n  CohortStaking public cohort;\r\n\r\n  /// @notice DAYS is equal to 86400.\r\n  uint256 public DAYS = 1 days;\r\n\r\n  /// @notice HOURS is equal to 3600.\r\n  uint256 public HOURS = 1 hours;\r\n\r\n  /// @notice intervalDays\r\n  uint256[] public intervalDays;\r\n\r\n  /// @notice poolStartTime\r\n  uint256 public poolStartTime;\r\n\r\n  /// @notice stakeDuration\r\n  uint256 public stakeDuration;\r\n\r\n  /// @notice isSwapify\r\n  bool public swapiFy;\r\n\r\n  /// @notice factory\r\n  address public factory;\r\n\r\n  event LockableTokenDetails(\r\n    address indexed tokenAddress,\r\n    uint256 lockableDys,\r\n    bool optionalbleStatus,\r\n    uint256 updatedTime\r\n  );\r\n\r\n  event WithdrawDetails(\r\n    address indexed tokenAddress,\r\n    uint256 withdrawalAmount,\r\n    uint256 time\r\n  );\r\n\r\n  event Claim(\r\n    address indexed userAddress,\r\n    address indexed stakedTokenAddress,\r\n    address indexed tokenAddress,\r\n    uint256 claimRewards,\r\n    uint256 time\r\n  );\r\n\r\n  event UnStake(\r\n    address indexed userAddress,\r\n    address indexed unStakedtokenAddress,\r\n    uint256 unStakedAmount,\r\n    uint256 time,\r\n    uint256 stakeId\r\n  );\r\n\r\n  event ReferralEarn(\r\n    address indexed userAddress,\r\n    address indexed callerAddress,\r\n    address indexed rewardTokenAddress,\r\n    uint256 rewardAmount,\r\n    uint256 time\r\n  );\r\n\r\n  event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\r\n\r\n  /**\r\n   * @notice construct the cohort unstake handler.\r\n   * @param cohortAddress specfic cohortAddress.\r\n   * @param ownerAddress owner Address of a cohort.\r\n   */\r\n\r\n  constructor(\r\n    address cohortAddress,\r\n    address ownerAddress,\r\n    address factoryAddress\r\n  ) Ownable(ownerAddress) {\r\n    require(\r\n      cohortAddress != address(0),\r\n      \"Cohort: invalid cohortAddress\"\r\n    );\r\n    cohort = CohortStaking(cohortAddress);\r\n    factory = factoryAddress;\r\n  }\r\n\r\n  function setupCohort(uint256[] memory _intervalDays, bool _isSwapfy)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    require(_msgSender() == factory, \"Cohort: permission denied\");\r\n    swapiFy = _isSwapfy;\r\n    poolStartTime = cohort.poolStartTime();\r\n    stakeDuration = cohort.stakeDuration();\r\n    updateIntervalDays(_intervalDays);\r\n    return true;\r\n  }\r\n\r\n  function setTokenBlockedStatus(address tokenAddress, bool status)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    tokenBlockedStatus[tokenAddress] = status;\r\n    return true;\r\n  }\r\n\r\n  // make sure about ownership things before call this function.\r\n  function init(address[] memory tokenAddress)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n      transferFromCohort(tokenAddress[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFromCohort(address tokenAddress) internal {\r\n    uint256 bal = IERC20(tokenAddress).balanceOf(address(cohort));\r\n    if (bal > 0) cohort.safeWithdraw(tokenAddress, bal);\r\n  }\r\n\r\n  function updateCohort(address _newCohortAddress)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    cohort = CohortStaking(_newCohortAddress);\r\n    return true;\r\n  }\r\n\r\n  function setSwapTokens(\r\n    address[] memory oldTokenAddresses,\r\n    address[] memory newTokenAddresses\r\n  ) external onlyOwner returns (bool) {\r\n    require(\r\n      oldTokenAddresses.length == newTokenAddresses.length,\r\n      \"Invalid Input Tokens\"\r\n    );\r\n    for (uint8 m = 0; m < oldTokenAddresses.length; m++) {\r\n      tokens[oldTokenAddresses[m]] = newTokenAddresses[m];\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function updateTotalUnStaking(\r\n    address[] memory tokenAddresses,\r\n    uint256[] memory overAllUnStakedTokens\r\n  ) external onlyOwner returns (bool) {\r\n    require(\r\n      tokenAddresses.length == overAllUnStakedTokens.length,\r\n      \"Cohort: Invalid Inputs\"\r\n    );\r\n    for (uint8 n = 0; n < tokenAddresses.length; n++) {\r\n      require(\r\n        tokenAddresses[n] != address(0),\r\n        \"Cohort: invalid poolAddress\"\r\n      );\r\n      require(\r\n        overAllUnStakedTokens[n] > 0,\r\n        \"Cohort: emptied overAllStaked\"\r\n      );\r\n      totalUnStaking[tokenAddresses[n]] = overAllUnStakedTokens[n];\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function updateIntervalDays(uint256[] memory _interval) public {\r\n    require(\r\n      _msgSender() == factory || _msgSender() == _owner,\r\n      \"Cohort: permission denied\"\r\n    );\r\n    intervalDays = new uint256[](0);\r\n    for (uint8 i = 0; i < _interval.length; i++) {\r\n      uint256 noD = stakeDuration.div(DAYS);\r\n      require(noD > _interval[i], \"Invalid Interval Day\");\r\n      intervalDays.push(_interval[i]);\r\n    }\r\n\r\n    emit IntervalDaysDetails(intervalDays, block.timestamp);\r\n  }\r\n\r\n  function lockableToken(\r\n    address tokenAddress,\r\n    uint8 lockableStatus,\r\n    uint256 lockedDays,\r\n    bool optionableStatus\r\n  ) external onlyOwner {\r\n    require(\r\n      lockableStatus == 1 ||\r\n        lockableStatus == 2 ||\r\n        lockableStatus == 3,\r\n      \"Invalid Lockable Status\"\r\n    );\r\n\r\n    (bool tokenExist, , , , , , ) = cohort.tokenDetails(tokenAddress);\r\n\r\n    require(tokenExist == true, \"Token Not Exist\");\r\n\r\n    if (lockableStatus == 1) {\r\n      lockableDetails[tokenAddress].lockableDays = block\r\n        .timestamp\r\n        .add(lockedDays);\r\n    } else if (lockableStatus == 2)\r\n      lockableDetails[tokenAddress].lockableDays = 0;\r\n    else if (lockableStatus == 3)\r\n      lockableDetails[tokenAddress]\r\n        .optionableStatus = optionableStatus;\r\n\r\n    emit LockableTokenDetails(\r\n      tokenAddress,\r\n      lockableDetails[tokenAddress].lockableDays,\r\n      lockableDetails[tokenAddress].optionableStatus,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function reclaimOwnership(address newOwner)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    cohort.transferOwnership(newOwner);\r\n    return true;\r\n  }\r\n\r\n  function safeWithdraw(address tokenAddress, uint256 amount)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(\r\n      IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n      \"SAFEWITHDRAW: Insufficient Balance\"\r\n    );\r\n\r\n    require(\r\n      IERC20(tokenAddress).transfer(_owner, amount) == true,\r\n      \"SAFEWITHDRAW: Transfer failed\"\r\n    );\r\n\r\n    emit WithdrawDetails(tokenAddress, amount, block.timestamp);\r\n  }\r\n\r\n  function getTokenAddress(address tokenAddress)\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    if (swapiFy) {\r\n      address newAddress = tokens[tokenAddress] == address(0)\r\n        ? tokenAddress\r\n        : tokens[tokenAddress];\r\n      return (newAddress);\r\n    } else {\r\n      return (tokenAddress);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Claim accumulated rewards\r\n   * @param userAddress user Address through he staked.\r\n   * @param stakeId Stake ID of the user\r\n   * @param totalStake total Staking.\r\n   */\r\n\r\n  function claimRewards(\r\n    address userAddress,\r\n    uint256 stakeId,\r\n    uint256 totalStake\r\n  ) internal {\r\n    // Local variables\r\n    uint256 interval;\r\n    uint256 endOfProfit;\r\n\r\n    (\r\n      address[] memory referrar,\r\n      address[] memory tokenAddresses,\r\n      ,\r\n      ,\r\n      uint256[] memory stakedAmount,\r\n      uint256[] memory startTime\r\n    ) = cohort.viewStakingDetails(userAddress);\r\n\r\n    interval = poolStartTime.add(stakeDuration);\r\n    // Interval calculation\r\n    if (interval > block.timestamp) endOfProfit = block.timestamp;\r\n    else endOfProfit = poolStartTime.add(stakeDuration);\r\n\r\n    interval = endOfProfit.sub(startTime[stakeId]);\r\n\r\n    uint256 refPercentage = cohort.refPercentage();\r\n    uint256[3] memory stakeData;\r\n\r\n    stakeData[0] = (stakedAmount[stakeId]);\r\n    stakeData[1] = (totalStake);\r\n    stakeData[2] = (refPercentage);\r\n\r\n    // Reward calculation\r\n    if (interval >= HOURS)\r\n      _rewardCalculation(\r\n        userAddress,\r\n        tokenAddresses[stakeId],\r\n        referrar[stakeId],\r\n        stakeData,\r\n        interval\r\n      );\r\n  }\r\n\r\n  function _rewardCalculation(\r\n    address userAddress,\r\n    address tokenAddress,\r\n    address referrer,\r\n    uint256[3] memory stakingData,\r\n    uint256 interval\r\n  ) internal {\r\n    uint256 rewardsEarned;\r\n    uint256 refEarned;\r\n    uint256[2] memory noOfDays;\r\n\r\n    noOfDays[1] = interval.div(HOURS);\r\n    noOfDays[0] = interval.div(DAYS);\r\n\r\n    rewardsEarned = noOfDays[1].mul(\r\n      getOneDayReward(\r\n        stakingData[0],\r\n        tokenAddress,\r\n        tokenAddress,\r\n        stakingData[1]\r\n      )\r\n    );\r\n\r\n    address stakedToken = getTokenAddress(tokenAddress);\r\n\r\n    // Referrer Earning\r\n    if (referrer != address(0)) {\r\n      refEarned = (rewardsEarned.mul(stakingData[2])).div(100 ether);\r\n      rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n      require(\r\n        IERC20(stakedToken).transfer(referrer, refEarned) == true,\r\n        \"Transfer Failed\"\r\n      );\r\n\r\n      emit ReferralEarn(\r\n        referrer,\r\n        _msgSender(),\r\n        stakedToken,\r\n        refEarned,\r\n        block.timestamp\r\n      );\r\n    }\r\n    //  Rewards Send\r\n    sendToken(userAddress, stakedToken, stakedToken, rewardsEarned);\r\n\r\n    uint8 i = 1;\r\n\r\n    while (i < intervalDays.length) {\r\n      if (noOfDays[0] >= intervalDays[i]) {\r\n        uint256 reductionHours = (intervalDays[i].sub(1)).mul(24);\r\n        uint256 balHours = noOfDays[1].sub(reductionHours);\r\n        address rewardToken = cohort.tokensSequenceList(\r\n          tokenAddress,\r\n          i\r\n        );\r\n\r\n        if (\r\n          rewardToken != tokenAddress &&\r\n          cohort.tokenBlockedStatus(tokenAddress, rewardToken) ==\r\n          false\r\n        ) {\r\n          rewardsEarned = balHours.mul(\r\n            getOneDayReward(\r\n              stakingData[0],\r\n              tokenAddress,\r\n              rewardToken,\r\n              stakingData[1]\r\n            )\r\n          );\r\n\r\n          address rewardToken1 = getTokenAddress(rewardToken);\r\n          // Referrer Earning\r\n\r\n          if (referrer != address(0)) {\r\n            refEarned = (rewardsEarned.mul(stakingData[2])).div(\r\n              100 ether\r\n            );\r\n            rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n            require(\r\n              IERC20(rewardToken1).transfer(referrer, refEarned) ==\r\n                true,\r\n              \"Transfer Failed\"\r\n            );\r\n\r\n            emit ReferralEarn(\r\n              referrer,\r\n              _msgSender(),\r\n              rewardToken1,\r\n              refEarned,\r\n              block.timestamp\r\n            );\r\n          }\r\n          //  Rewards Send\r\n          sendToken(\r\n            userAddress,\r\n            tokenAddress,\r\n            rewardToken1,\r\n            rewardsEarned\r\n          );\r\n        }\r\n        i = i + 1;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get rewards for one day\r\n   * @param stakedAmount Stake amount of the user\r\n   * @param stakedToken Staked token address of the user\r\n   * @param rewardToken Reward token address\r\n   * @return reward One dayh reward for the user\r\n   */\r\n\r\n  function getOneDayReward(\r\n    uint256 stakedAmount,\r\n    address stakedToken,\r\n    address rewardToken,\r\n    uint256 totalStake\r\n  ) public view returns (uint256 reward) {\r\n    reward = (\r\n      stakedAmount.mul(\r\n        cohort.tokenDailyDistribution(stakedToken, rewardToken)\r\n      )\r\n    ).div(totalStake);\r\n  }\r\n\r\n  /**\r\n   * @notice Get rewards for one day\r\n   * @param stakedToken Stake amount of the user\r\n   * @param tokenAddress Reward token address\r\n   * @param amount Amount to be transferred as reward\r\n   */\r\n\r\n  function sendToken(\r\n    address userAddress,\r\n    address stakedToken,\r\n    address tokenAddress,\r\n    uint256 amount\r\n  ) internal {\r\n    // Checks\r\n    if (tokenAddress != address(0)) {\r\n      require(\r\n        IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n        \"SEND : Insufficient Reward Balance\"\r\n      );\r\n\r\n      require(\r\n        IERC20(tokenAddress).transfer(userAddress, amount),\r\n        \"Transfer failed\"\r\n      );\r\n\r\n      // Emit state changes\r\n      emit Claim(\r\n        userAddress,\r\n        stakedToken,\r\n        tokenAddress,\r\n        amount,\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n\r\n  function getTotalStaking(address tokenAddress)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 totalStaking = cohort.totalStaking(tokenAddress);\r\n    uint256 actualStaking = totalStaking.add(\r\n      totalUnStaking[tokenAddress]\r\n    );\r\n    return actualStaking;\r\n  }\r\n\r\n  /**\r\n   * @notice Unstake and claim rewards\r\n   * @param stakeId Stake ID of the user\r\n   */\r\n  function unStake(address userAddress, uint256 stakeId)\r\n    external\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(\r\n      _msgSender() == userAddress || _msgSender() == _owner,\r\n      \"UNSTAKE: Invalid User Entry\"\r\n    );\r\n\r\n    // view the staking details\r\n    (\r\n      ,\r\n      address[] memory tokenAddress,\r\n      bool[] memory isActive,\r\n      ,\r\n      uint256[] memory stakedAmount,\r\n      uint256[] memory startTime\r\n    ) = cohort.viewStakingDetails(userAddress);\r\n\r\n    uint256 totalStaking = getTotalStaking(tokenAddress[stakeId]);\r\n    address stakedToken = getTokenAddress(tokenAddress[stakeId]);\r\n\r\n    // lockableDays check\r\n    require(\r\n      lockableDetails[stakedToken].lockableDays <= block.timestamp,\r\n      \"UNSTAKE: Token Locked\"\r\n    );\r\n\r\n    // optional lock check\r\n    if (lockableDetails[stakedToken].optionableStatus == true)\r\n      require(\r\n        startTime[stakeId].add(stakeDuration) <= block.timestamp,\r\n        \"UNSTAKE: Locked in optional lock\"\r\n      );\r\n\r\n    // Checks\r\n    require(\r\n      stakedAmount[stakeId] > 0 &&\r\n        isActive[stakeId] == true &&\r\n        unStakeStatus[userAddress][stakeId] == false,\r\n      \"UNSTAKE : Already Claimed (or) Insufficient Staked\"\r\n    );\r\n\r\n    // update the state\r\n    unStakeStatus[userAddress][stakeId] = true;\r\n\r\n    // Balance check\r\n    require(\r\n      IERC20(stakedToken).balanceOf(address(this)) >=\r\n        stakedAmount[stakeId],\r\n      \"UNSTAKE : Insufficient Balance\"\r\n    );\r\n\r\n    // Transfer staked token back to user\r\n    if (tokenBlockedStatus[tokenAddress[stakeId]] == false) {\r\n      IERC20(stakedToken).transfer(\r\n        userAddress,\r\n        stakedAmount[stakeId]\r\n      );\r\n    }\r\n\r\n    claimRewards(userAddress, stakeId, totalStaking);\r\n    // Emit state changes\r\n    emit UnStake(\r\n      userAddress,\r\n      stakedToken,\r\n      stakedAmount[stakeId],\r\n      block.timestamp,\r\n      stakeId\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  function emergencyUnstake(\r\n    uint256 stakeId,\r\n    address userAddress,\r\n    address[] memory rewardtokens,\r\n    uint256[] memory amount\r\n  ) external onlyOwner {\r\n    // view the staking details\r\n    (\r\n      address[] memory referrer,\r\n      address[] memory tokenAddress,\r\n      bool[] memory isActive,\r\n      ,\r\n      uint256[] memory stakedAmount,\r\n\r\n    ) = cohort.viewStakingDetails(userAddress);\r\n\r\n    require(\r\n      stakedAmount[stakeId] > 0 &&\r\n        isActive[stakeId] == true &&\r\n        unStakeStatus[userAddress][stakeId] == false,\r\n      \"EMERGENCY : Already Claimed (or) Insufficient Staked\"\r\n    );\r\n\r\n    address stakedToken = getTokenAddress(tokenAddress[stakeId]);\r\n    // Balance check\r\n    require(\r\n      IERC20(stakedToken).balanceOf(address(this)) >=\r\n        stakedAmount[stakeId],\r\n      \"EMERGENCY : Insufficient Balance\"\r\n    );\r\n\r\n    unStakeStatus[userAddress][stakeId] = true;\r\n\r\n    IERC20(stakedToken).transfer(userAddress, stakedAmount[stakeId]);\r\n\r\n    uint256 refPercentage = cohort.refPercentage();\r\n\r\n    for (uint256 i; i < rewardtokens.length; i++) {\r\n      uint256 rewardsEarned = amount[i];\r\n\r\n      if (referrer[stakeId] != address(0)) {\r\n        uint256 refEarned = (rewardsEarned.mul(refPercentage)).div(\r\n          100 ether\r\n        );\r\n        rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n        require(\r\n          IERC20(rewardtokens[i]).transfer(\r\n            referrer[stakeId],\r\n            refEarned\r\n          ),\r\n          \"EMERGENCY : Transfer Failed\"\r\n        );\r\n\r\n        emit ReferralEarn(\r\n          referrer[stakeId],\r\n          userAddress,\r\n          rewardtokens[i],\r\n          refEarned,\r\n          block.timestamp\r\n        );\r\n      }\r\n\r\n      sendToken(\r\n        userAddress,\r\n        tokenAddress[stakeId],\r\n        rewardtokens[i],\r\n        rewardsEarned\r\n      );\r\n    }\r\n\r\n    // Emit state changes\r\n    emit UnStake(\r\n      userAddress,\r\n      tokenAddress[stakeId],\r\n      stakedAmount[stakeId],\r\n      block.timestamp,\r\n      stakeId\r\n    );\r\n  }\r\n\r\n  function pause() external onlyOwner returns (bool) {\r\n    _pause();\r\n    return true;\r\n  }\r\n\r\n  function unpause() external onlyOwner returns (bool) {\r\n    _unpause();\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cohortAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"updatedIntervals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"IntervalDaysDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockableDys\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"optionalbleStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedTime\",\"type\":\"uint256\"}],\"name\":\"LockableTokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReferralEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unStakedtokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawDetails\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cohort\",\"outputs\":[{\"internalType\":\"contract CohortStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardtokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"getOneDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddress\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockableDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optionableStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lockableStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optionableStatus\",\"type\":\"bool\"}],\"name\":\"lockableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"reclaimOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oldTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"newTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setSwapTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenBlockedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_intervalDays\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isSwapfy\",\"type\":\"bool\"}],\"name\":\"setupCohort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapiFy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBlockedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUnStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unStakeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCohortAddress\",\"type\":\"address\"}],\"name\":\"updateCohort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_interval\",\"type\":\"uint256[]\"}],\"name\":\"updateIntervalDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"overAllUnStakedTokens\",\"type\":\"uint256[]\"}],\"name\":\"updateTotalUnStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Cohort", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000207c678457617bc8c8ab06f9088efc1dcd45887c00000000000000000000000089bcafc0994f8e38051ceab57c0fe14ec3b64fe0000000000000000000000000b558c3c7af7f1d437fe82914426a63c13c6a3a80", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a802112114a5f66a2f113a2b88e09c1113b62cbdf9e0002c3da7b1a218ef1360"}