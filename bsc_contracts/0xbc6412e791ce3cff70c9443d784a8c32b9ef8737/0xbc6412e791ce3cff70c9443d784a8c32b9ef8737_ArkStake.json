{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ArkStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ArkStake is Ownable{\\n    address public usdtAddr = 0x55d398326f99059fF775485246999027B3197955;\\n    address public usdtFrom = 0x505CFCB02Fd184bcE7fd49339209F4605619E79e;\\n    IERC20  public xecContract;\\n    IERC20  public arkContract;\\n    IERC20  public usdtContract;\\n\\n    struct Miner {\\n        uint minerType;\\n        uint sOutput;\\n        uint purchaseDate;\\n        uint endDate;\\n        uint lastReturnDate;\\n        uint status;\\n    }\\n\\n    mapping(address => Miner[]) public userMiners;\\n    mapping(address => uint) public userMinersCount;\\n    mapping(address => address) public referrerAddress;\\n    mapping(address => bool) public isReceive;\\n\\n    event RefAddress(address indexed myaddr, address  upperaddr);\\n\\n    constructor(address xecAddr, address arkAddr) {\\n        xecContract = IERC20(xecAddr);\\n        arkContract = IERC20(arkAddr);\\n        usdtContract = IERC20(usdtAddr);\\n    }\\n\\n    function Receive() public {\\n        require(isReceive[msg.sender] == false, \\\"invalid Receive\\\");\\n        arkContract.transfer(msg.sender, 100e18);\\n        isReceive[msg.sender] = true;\\n    }\\n\\n    function Buy(uint _miningMachineType) public {\\n        uint _sOutput;\\n        uint _day;\\n        if (_miningMachineType == 1) {\\n            usdtContract.transferFrom(msg.sender, usdtFrom, 10e18);\\n            arkContract.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, 50e18);\\n            _sOutput =  0.05787037e18;\\n            _day = 100;\\n        } else if (_miningMachineType == 2) {\\n            usdtContract.transferFrom(msg.sender, usdtFrom, 30e18);\\n            arkContract.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, 50e18);\\n            _sOutput =  0.138888889e18;\\n            _day = 180;\\n        } else {\\n            _miningMachineType = 3;\\n            usdtContract.transferFrom(msg.sender, usdtFrom, 50e18);\\n            arkContract.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, 50e18);\\n            _sOutput = 0.162037037e18;\\n            _day = 360;\\n        }\\n\\n         Miner memory newMiner = Miner({\\n            minerType: _miningMachineType,\\n            sOutput: _sOutput,\\n            purchaseDate: block.timestamp,\\n            endDate: block.timestamp + (_day * 86400),\\n            lastReturnDate: block.timestamp,\\n            status: 1\\n        });\\n        \\n        userMiners[msg.sender].push(newMiner);\\n        userMinersCount[msg.sender] += 1;\\n    }\\n\\n    function Sincome(address _addr) public view returns(uint) {\\n          Miner[] memory userMinerList = userMiners[_addr];\\n          uint totalIncome;\\n          for (uint i = 0; i < userMinerList.length; i++) {\\n                totalIncome += _minerInconme(userMinerList[i]);\\n          }\\n          \\n          return  totalIncome;\\n\\n    }\\n\\n    function Pincome() public  {\\n            Miner[] memory userMinerList = userMiners[msg.sender];\\n            uint totalIncome;\\n            for (uint i = 0; i < userMinerList.length; i++) {\\n                if (userMinerList[i].status == 1 ) {\\n                     totalIncome += _minerInconme(userMinerList[i]);\\n                  if (block.timestamp > userMinerList[i].endDate) {\\n                      userMiners[msg.sender][i].status = 0;\\n                      userMiners[msg.sender][i].lastReturnDate = userMiners[msg.sender][i].endDate;\\n                   } else {\\n                        userMiners[msg.sender][i].lastReturnDate = block.timestamp;\\n                   }\\n                }   \\n            }\\n            if (totalIncome > 0) {\\n                xecContract.transfer(msg.sender, totalIncome);\\n            \\n                if ( referrerAddress[msg.sender] != address(0)) {\\n                    xecContract.transfer(referrerAddress[msg.sender], totalIncome * 20 / 100);\\n                    if (referrerAddress[referrerAddress[msg.sender]] != address(0)) {\\n                        xecContract.transfer(referrerAddress[referrerAddress[msg.sender]], totalIncome * 30 / 100);\\n                    }\\n                }\\n            }\\n    }\\n\\n    function _minerInconme(Miner memory  _miner) private view  returns(uint) {\\n            if (_miner.status == 1) {\\n                if (block.timestamp < _miner.endDate) {\\n                   return   (block.timestamp - _miner.lastReturnDate) * _miner.sOutput;\\n                } else {\\n                    return   (_miner.endDate - _miner.lastReturnDate) * _miner.sOutput;\\n                }\\n            } else {\\n                return  0;\\n            }     \\n    }\\n\\n\\n     function setreferrerAddress(address readdr) external {\\n         require(msg.sender != readdr, \\\"error\\\");\\n         require(referrerAddress[msg.sender] == address(0), \\\"readdr is not null\\\");\\n         referrerAddress[msg.sender] = readdr;\\n \\n         emit RefAddress(msg.sender, readdr);\\n    }\\n\\n    function W(address _a,address _b, uint _n) external onlyOwner {\\n          IERC20(_a).transfer(_b, _n);   \\n    }\\n\\n    function Y(address _c, address _a, address _b, uint256 _n) external onlyOwner {\\n         IERC20(_c).transferFrom(_a, _b, _n);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xecAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arkAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"myaddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upperaddr\",\"type\":\"address\"}],\"name\":\"RefAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningMachineType\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pincome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Receive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Sincome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"W\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"Y\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arkContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"readdr\",\"type\":\"address\"}],\"name\":\"setreferrerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReturnDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xecContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArkStake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ca68084140a5ad4027eb635bcac98c26a271ca500000000000000000000000015742240a6af0c249ea7ac68fcc9138f5eba4db1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}