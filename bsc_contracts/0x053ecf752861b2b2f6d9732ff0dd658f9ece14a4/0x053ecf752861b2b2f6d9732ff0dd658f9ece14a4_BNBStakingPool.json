{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/native-staking/BNBStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@ankr.com/contracts/earn/extension/MixedLiquidTokenStakingPool.sol\\\";\\n\\nimport \\\"../interfaces/IStakingContract.sol\\\";\\nimport \\\"../interfaces/IBNBStakingPool.sol\\\";\\n\\ncontract BNBStakingPool is MixedLiquidTokenStakingPool, IBNBStakingPool {\\n    /**\\n     * Variables\\n     */\\n    uint256 internal constant _TEN_DECIMALS = 1e10;\\n\\n    /// @dev BEP153 Native Staking\\n    IStakingContract internal _stakingContract;\\n\\n    uint256 internal constant _FEE_MAX = 10000;\\n\\n    /// @dev in %; the maximum is _FEE_MAX;\\n    uint256 internal _flashUnstakeFee;\\n\\n    uint256 internal _flashUnstakeCollectedFee;\\n\\n    uint256 internal _flashPoolMinCapacity;\\n\\n    /// @dev Prevents execution with amount which does not require Staking limits\\n    modifier tenDecimalPrecision(uint256 amount) {\\n        require(\\n            amount % _TEN_DECIMALS == 0,\\n            \\\"BNBStakingPool: precision loss in conversion\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param earnConfig contains major addresses for Ankr LiquidTokenStaking: consensus, governance, treasury...\\n    /// @param distributeGasLimit defines the gas usage limit for distribuion rewards in _distributePendingRewards\\n    /// @param stakingContract system Binance Native Staking contract: 0x0000000000000000000000000000000000002001\\n    function initialize(\\n        IEarnConfig earnConfig,\\n        uint256 distributeGasLimit,\\n        IStakingContract stakingContract\\n    ) external initializer {\\n        __Ownable_init();\\n        __LiquidTokenStakingPool_init(earnConfig);\\n        __QueuePool_init(distributeGasLimit);\\n        _stakingContract = stakingContract;\\n\\n        emit StakingContractChanged(address(0), address(stakingContract));\\n    }\\n\\n    /**\\n     * Staking methods\\n     */\\n\\n    /// @dev Executes by a backend service(consensus address)\\n    /// @dev With optimal validator to delegate to\\n    /// @dev Amount should pass Staking contract restrictions\\n    /// @param validator is the validator chosen by the backend service to delegate to\\n    /// @param amount is the amount to undelegate from the validator\\n    function delegate(\\n        address validator,\\n        uint256 amount\\n    ) external tenDecimalPrecision(amount) onlyConsensus {\\n        require(\\n            validator != address(0),\\n            \\\"BNBStakingPool: validator is zero address\\\"\\n        );\\n        // get data from binance staking\\n        uint256 relayerFee = _stakingContract.getRelayerFee();\\n        uint256 minDelegate = _stakingContract.getMinDelegation();\\n        uint256 balance = getFreeBalance();\\n        require(\\n            balance > amount + relayerFee && amount > minDelegate,\\n            \\\"BNBStakingPool: insufficient balance to delegate\\\"\\n        );\\n\\n        _stakingContract.delegate{value: (amount + relayerFee)}(\\n            validator,\\n            amount\\n        );\\n\\n        emit Delegated(validator, amount);\\n    }\\n\\n    /// @dev Returns total delegated via this pool\\n    function getTotalDelegated() public view returns (uint256) {\\n        return _stakingContract.getTotalDelegated(address(this));\\n    }\\n\\n    /**\\n     * Unstaking methods\\n     */\\n\\n    /// @dev Checks the receiver for existing manual requests\\n    /// @dev Checks liquidity to unstake\\n    /// @notice If there is not enough liquidity kindly use BinancePool to unstake\\n    /// @notice Needs to take into account current pool balance(freeBalance) and delegated amount\\n    function _beforeUnstake(\\n        address /* ownerAddress */,\\n        address receiverAddress,\\n        uint256 amount\\n    ) internal view override {\\n        require(\\n            isAbleToUnstake(amount),\\n            \\\"LiquidTokenStakingPool: insufficient total delegated to unstake\\\"\\n        );\\n    }\\n\\n    /// @dev Rewriten function of MixedLiquidTokenStakingPool\\n    /// @dev Does not allow immediate unstake for everyone\\n    /// @dev If user'd like to unstake immediately, s/he should proceed swap()\\n    function _afterUnstake(\\n        address ownerAddress,\\n        address receiverAddress,\\n        uint256 amount\\n    ) internal virtual override {\\n        // only pending unstake\\n        _addIntoQueue(ownerAddress, receiverAddress, amount);\\n    }\\n\\n    /// @dev Executes by a backend service with an optimal validator for unstaking\\n    /// @notice Amount should pass Staking restrictions\\n    /// @dev Staking#undelegate() is payable and requires relayerFee to be sent\\n    /// @param validator is the validator chosen by the backend service to undelegate from\\n    /// @param amount is the amount to undelegate from the validator\\n    function undelegate(\\n        address validator,\\n        uint256 amount\\n    ) external payable tenDecimalPrecision(amount) onlyConsensus {\\n        require(\\n            validator != address(0),\\n            \\\"BNBStakingPool: validator is zero address\\\"\\n        );\\n\\n        uint256 minDelegate = _stakingContract.getMinDelegation();\\n        require(\\n            amount >= minDelegate,\\n            \\\"BNBStakingPool: amount less than minDelegate amount\\\"\\n        );\\n        uint256 newTotal = _stakingContract.getTotalDelegated(address(this)) -\\n            amount;\\n        require(\\n            newTotal > minDelegate || newTotal == 0,\\n            \\\"BNBStakingPool: resulting delegate is less than minDelegate amount\\\"\\n        );\\n\\n        uint256 relayerFee = _stakingContract.getRelayerFee();\\n        require(\\n            address(this).balance >= relayerFee,\\n            \\\"BNBStakingPool: insufficient balance to undelegate\\\"\\n        );\\n\\n        _stakingContract.undelegate{value: relayerFee}(validator, amount);\\n\\n        emit Undelegated(validator, amount);\\n    }\\n\\n    /// @dev Everyone can execute, but usually a backend service do it\\n    /// @notice Pending unstake requests keep in smart-contract state with receive addresses\\n    /// @dev GasLimit param should be set higher than 100_000 wei for execution queue in _distributePendingRewards()\\n    function withdrawAndDistributePendingRewards() external nonReentrant {\\n        _stakingContract.claimUndelegated();\\n        _distributePendingRewards();\\n    }\\n\\n    /// @dev the same as withdrawAndDistributePendingRewards() but without claiming from binance staking\\n    /// @notice might be used for emergency distribution\\n    function distributePendingRewards() external payable nonReentrant {\\n        _distributePendingRewards();\\n    }\\n\\n    /**\\n     * Special methods related to flash unstake with fee\\n     */\\n\\n    ///\\n    function swap(\\n        uint256 shares,\\n        address receiverAddress\\n    ) external nonReentrant {\\n        address ownerAddress = msg.sender;\\n        uint256 amount = _certificateToken.sharesToBonds(shares);\\n        require(\\n            amount >= getMinUnstake(),\\n            \\\"LiquidTokenStakingPool: value must be greater than min amount\\\"\\n        );\\n        shares = _certificateToken.bondsToShares(amount);\\n        require(\\n            _certificateToken.balanceOf(ownerAddress) >= shares,\\n            \\\"LiquidTokenStakingPool: cannot unstake more than have on address\\\"\\n        );\\n        uint256 unstakeFeeAmt = (amount * _flashUnstakeFee) / _FEE_MAX;\\n        amount -= unstakeFeeAmt;\\n        _flashUnstakeCollectedFee += unstakeFeeAmt;\\n        // check the restrictions on flash unstake\\n        require(\\n            amount <= flashPoolCapacity(),\\n            \\\"BNBStakingPool: cannot proceed flash unstake\\\"\\n        );\\n        // burn the input amount of shares\\n        _certificateToken.burn(ownerAddress, shares);\\n        // send the amount: sharesToBonds(shares) - flashUnstakeFee\\n        bool result = _unsafeTransfer(receiverAddress, amount, false);\\n        require(\\n            result,\\n            \\\"LiquidTokenStakingPool: failed to send rewards to claimer\\\"\\n        );\\n\\n        emit FlashFeeAmount(unstakeFeeAmt);\\n        emit Unstaked(ownerAddress, receiverAddress, amount, shares, false);\\n    }\\n\\n    function claimFlashUnstakeFeeCollected() external nonReentrant {\\n        address treasuryAddress = _earnConfig.getTreasuryAddress();\\n        require(\\n            treasuryAddress != address(0),\\n            \\\"LiquidTokenStakingPool: treasury is not set\\\"\\n        );\\n        uint256 amount = _flashUnstakeCollectedFee;\\n        _flashUnstakeCollectedFee = 0;\\n        bool result = _unsafeTransfer(treasuryAddress, amount, false);\\n        require(\\n            result,\\n            \\\"LiquidTokenStakingPool: failed to send flashUnstake fee to treasury\\\"\\n        );\\n\\n        emit FlashUnstakeFeeCollectedClaimed(msg.sender, amount);\\n    }\\n\\n    function getFlashUnstakeFee() public view returns (uint256) {\\n        return _flashUnstakeFee;\\n    }\\n\\n    function getFlashUnstakeCollectedFee() public view returns (uint256) {\\n        return _flashUnstakeCollectedFee;\\n    }\\n\\n    function getFlashPoolMinCapacity() public view returns (uint256) {\\n        return _flashPoolMinCapacity;\\n    }\\n\\n    /**\\n     *  Rewards functionality\\n     */\\n\\n    /// @notice Must be executed daily by everyove, but usually the backend service do\\n    function claimDailyRewards() external nonReentrant {\\n        _beforeClaimRewards();\\n        uint256 rewards = _stakingContract.claimReward();\\n        _afterClaimRewards();\\n\\n        emit DailyRewardsClaimed(rewards);\\n    }\\n\\n    /// @dev Might be used for save current pool balance before receiving rewards\\n    function _beforeClaimRewards() internal virtual {}\\n\\n    /// @dev Might be used for sending rewards to partners\\n    function _afterClaimRewards() internal virtual {}\\n\\n    /**\\n     * Setting methods\\n     */\\n\\n    function setStakingContract(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"BNBStakingPool: new value is zero\\\");\\n        address oldValue = address(_stakingContract);\\n        _stakingContract = IStakingContract(newValue);\\n        emit StakingContractChanged(oldValue, newValue);\\n    }\\n\\n    function setFlashUnstakeFee(uint256 newValue) external onlyGovernance {\\n        uint256 oldValue = _flashUnstakeFee;\\n        _flashUnstakeFee = newValue;\\n        emit FlashUntakeFeeChanged(oldValue, newValue);\\n    }\\n\\n    function setFlaslPoolMinCapacity(uint256 newValue) external onlyGovernance {\\n        uint256 oldValue = _flashPoolMinCapacity;\\n        _flashPoolMinCapacity = newValue;\\n        emit FlashPoolMinCapacityChanged(oldValue, newValue);\\n    }\\n\\n    function isAbleToUnstake(uint256 amount) public view returns (bool) {\\n        return getTotalDelegated() + getFreeBalance() >= amount;\\n    }\\n\\n    /**\\n     * @dev Overriden with taking into account _flashUnstakeCollectedFee + _flashPoolMinCapacity\\n     */\\n    function getFreeBalance() public view override returns (uint256) {\\n        uint256 occupiedBalance = getStashedForManualClaims() +\\n            _flashUnstakeCollectedFee +\\n            _flashPoolMinCapacity;\\n        return\\n            address(this).balance < occupiedBalance\\n                ? 0\\n                : address(this).balance - occupiedBalance;\\n    }\\n\\n    function flashPoolCapacity() public view returns (uint256) {\\n        uint256 occupiedBalance = getStashedForManualClaims() +\\n            _flashUnstakeCollectedFee;\\n        return\\n            address(this).balance < occupiedBalance\\n                ? 0\\n                : address(this).balance - occupiedBalance;\\n    }\\n\\n    /// @dev Receives unstakes/rewards from Staking.sol\\n    receive() external payable override {}\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IStakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IStakingContract {\\n    function delegate(address validator, uint256 amount) external payable;\\n\\n    function undelegate(address validator, uint256 amount) external payable;\\n\\n    function redelegate(\\n        address validatorSrc,\\n        address validatorDst,\\n        uint256 amount\\n    ) external payable;\\n\\n    function claimReward() external returns (uint256);\\n\\n    function claimUndelegated() external returns (uint256);\\n\\n    function getDelegated(address delegator, address validator)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDelegated(address delegator)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDistributedReward(address delegator)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingRedelegateTime(\\n        address delegator,\\n        address valSrc,\\n        address valDst\\n    ) external view returns (uint256);\\n\\n    function getUndelegated(address delegator) external view returns (uint256);\\n\\n    function getPendingUndelegateTime(address delegator, address validator)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRelayerFee() external view returns (uint256);\\n\\n    function getMinDelegation() external view returns (uint256);\\n\\n    function getRequestInFly(address delegator)\\n        external\\n        view\\n        returns (uint256[3] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBNBStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\ninterface IBNBStakingPool {\\n    event Delegated(address indexed validatorAddress, uint256 amount);\\n\\n    event Undelegated(address indexed validatorAddress, uint256 amount);\\n\\n    event StakingContractChanged(address oldValue, address newValue);\\n\\n    /// Rewards\\n    event DailyRewardsClaimed(uint256 rewards);\\n\\n    /// Flash unstake\\n\\n    event FlashUntakeFeeChanged(uint256 oldValue, uint256 newValue);\\n\\n    event FlashUnstakeFeeCollectedClaimed(\\n        address indexed claimerAddress,\\n        uint256 amount\\n    );\\n\\n    event FlashPoolMinCapacityChanged(uint256 oldValue, uint256 newValue);\\n\\n    event FlashFeeAmount(uint256 amount);\\n\\n    /// Validators\\n\\n    // event ValidatorAdded(address indexed validatorAddress, uint256 apr);\\n\\n    // event ValidatorRemoved(address indexed validatorAddress);\\n\\n    // event ValidatorsAprUpdated(address[] validators, uint256[] aprs);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/IReferralLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IReferralLiquidTokenStakingPool {\\n    /**\\n     * Events\\n     */\\n    event ReferralCode(bytes32 indexed code);\\n\\n    /**\\n     * Methods\\n     */\\n    function stakeBondsWithCode(bytes32 code) external payable;\\n\\n    function stakeCertsWithCode(bytes32 code) external payable;\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/IQueueLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IQueueLiquidTokenStakingPool {\\n    /**\\n     * Events\\n     */\\n    event PendingUnstake(\\n        address indexed ownerAddress,\\n        address indexed receiverAddress,\\n        uint256 amount\\n    );\\n\\n    event RewardsDistributed(address[] claimers, uint256[] amounts);\\n\\n    event ManualDistributeExpected(\\n        address indexed claimer,\\n        uint256 amount,\\n        uint256 indexed id\\n    );\\n\\n    event DistributeGasLimitChanged(uint256 prevValue, uint256 newValue);\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/IManualClaimLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IManualClaimLiquidTokenStakingPool {\\n    /**\\n     * Events\\n     */\\n    event RewardsClaimed(\\n        address indexed receiverAddress,\\n        address claimer,\\n        uint256 amount\\n    );\\n\\n    event ManualClaimExpected(address indexed claimer, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/ILiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ILiquidTokenStakingPool {\\n    event BearingTokenChanged(address prevValue, address newValue);\\n\\n    event CertificateTokenChanged(address prevValue, address newValue);\\n\\n    event MinimumStakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    event MinimumUnstakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    event Staked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 shares,\\n        bool indexed isRebasing\\n    );\\n\\n    event Unstaked(\\n        address indexed ownerAddress,\\n        address indexed receiverAddress,\\n        uint256 amount,\\n        uint256 shares,\\n        bool indexed isRebasing\\n    );\\n\\n    event Received(address indexed from, uint256 value);\\n\\n    function setBearingToken(address newValue) external;\\n\\n    function setCertificateToken(address newValue) external;\\n\\n    function setMinimumStake(uint256 newValue) external;\\n\\n    function setMinimumUnstake(uint256 newValue) external;\\n\\n    function stakeBonds() external payable;\\n\\n    function stakeCerts() external payable;\\n\\n    function getFreeBalance() external view returns (uint256);\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.7;\\n\\ninterface IGovernable {\\n\\n    function getGovernanceAddress() external view returns (address);\\n}\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/IEarnConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface IEarnConfig is IGovernable {\\n\\n    function getConsensusAddress() external view returns (address);\\n\\n    function setConsensusAddress(address newValue) external;\\n\\n    function getGovernanceAddress() external view override returns (address);\\n\\n    function setGovernanceAddress(address newValue) external;\\n\\n    function getTreasuryAddress() external view returns (address);\\n\\n    function setTreasuryAddress(address newValue) external;\\n\\n    function getSwapFeeRatio() external view returns (uint16);\\n\\n    function setSwapFeeRatio(uint16 newValue) external;\\n\\n    function pauseBondStaking() external;\\n\\n    function unpauseBondStaking() external;\\n\\n    function isBondStakingPaused() external view returns (bool);\\n}\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/ICertificateToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICertificateToken is IERC20Upgradeable {\\n\\n    function sharesToBonds(uint256 amount) external view returns (uint256);\\n\\n    function bondsToShares(uint256 amount) external view returns (uint256);\\n\\n    function ratio() external view returns (uint256);\\n\\n    function isRebasing() external pure returns (bool);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"@ankr.com/contracts/interfaces/IBearingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ICertificateToken.sol\\\";\\n\\ninterface IBearingToken is ICertificateToken {\\n\\n    function lockShares(uint256 shares) external;\\n\\n    function lockSharesFor(address account, uint256 shares) external;\\n\\n    function unlockShares(uint256 shares) external;\\n\\n    function unlockSharesFor(address account, uint256 shares) external;\\n\\n    function totalSharesSupply() external view returns (uint256);\\n}\"\r\n    },\r\n    \"@ankr.com/contracts/earn/extension/ReferralLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../LiquidTokenStakingPool.sol\\\";\\nimport \\\"../../interfaces/IReferralLiquidTokenStakingPool.sol\\\";\\n\\ncontract ReferralLiquidTokenStakingPool is\\n    LiquidTokenStakingPool,\\n    IReferralLiquidTokenStakingPool\\n{\\n    function __ReferralPool_init() internal onlyInitializing {}\\n\\n    /**\\n     * @dev Overrides LiquidTokenStakingPool#stakeBonds with additional param\\n     * @param code is a partner code for the Ankr Referral program\\n     */\\n    function stakeBondsWithCode(bytes32 code)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n    {\\n        _stakeBonds(msg.sender, msg.value);\\n        emit ReferralCode(code);\\n    }\\n\\n    /**\\n     * @dev Overrides LiquidTokenStakingPool#stakeCerts with additional param\\n     * @param code is a partner code for the Ankr Referral program\\n     */\\n    function stakeCertsWithCode(bytes32 code)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n    {\\n        _stakeCerts(msg.sender, msg.value);\\n        emit ReferralCode(code);\\n    }\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/earn/extension/QueueLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./ManualClaimLiquidTokenStakingPool.sol\\\";\\nimport \\\"../../interfaces/IQueueLiquidTokenStakingPool.sol\\\";\\n\\ncontract QueueLiquidTokenStakingPool is\\n    ManualClaimLiquidTokenStakingPool,\\n    IQueueLiquidTokenStakingPool\\n{\\n    uint256 internal _DISTRIBUTE_GAS_LIMIT;\\n\\n    uint256 internal _pendingGap;\\n\\n    uint256 internal _pendingTotalUnstakes;\\n    address[] internal _pendingClaimers;\\n    mapping(address => uint256) internal _pendingClaimerUnstakes;\\n\\n    uint256[] internal _pendingRequests;\\n\\n    // reserve some gap for the future upgrades\\n    uint256[50 - 6] private __reserved;\\n\\n    function __QueuePool_init(\\n        uint256 distributeGasLimit\\n    ) internal onlyInitializing {\\n        _DISTRIBUTE_GAS_LIMIT = distributeGasLimit;\\n        emit DistributeGasLimitChanged(0, distributeGasLimit);\\n    }\\n\\n    function setDistributeGasLimit(uint256 newValue) external onlyGovernance {\\n        uint256 prevValue = _DISTRIBUTE_GAS_LIMIT;\\n        _DISTRIBUTE_GAS_LIMIT = newValue;\\n\\n        emit DistributeGasLimitChanged(prevValue, newValue);\\n    }\\n\\n    function getDistributeGasLimit() public view returns (uint256) {\\n        return _DISTRIBUTE_GAS_LIMIT;\\n    }\\n\\n    function _addIntoQueue(\\n        address owner,\\n        address claimer,\\n        uint256 amount\\n    ) internal {\\n        require(\\n            amount != 0 && claimer != address(0),\\n            \\\"LiquidTokenStakingPool: zero input values\\\"\\n        );\\n        // each new request is placed at the end of the queue\\n        _pendingTotalUnstakes += amount;\\n        _pendingClaimers.push(claimer);\\n        _pendingRequests.push(amount);\\n        _pendingClaimerUnstakes[claimer] += amount;\\n        emit PendingUnstake(owner, claimer, amount);\\n    }\\n\\n    function _distributePendingRewards() internal {\\n        require(\\n            _DISTRIBUTE_GAS_LIMIT > 0,\\n            \\\"LiquidTokenStakingPool: DISTRIBUTE_GAS_LIMIT is not set\\\"\\n        );\\n        uint256 poolBalance = getFreeBalance();\\n        address[] memory claimers = new address[](\\n            _pendingClaimers.length - _pendingGap\\n        );\\n        uint256[] memory amounts = new uint256[](\\n            _pendingClaimers.length - _pendingGap\\n        );\\n        uint256 j = 0;\\n        uint256 i = _pendingGap;\\n\\n        while (\\n            i < _pendingClaimers.length &&\\n            poolBalance > 0 &&\\n            gasleft() > _DISTRIBUTE_GAS_LIMIT\\n        ) {\\n            address claimer = _pendingClaimers[i];\\n            uint256 toDistribute = _pendingRequests[i];\\n            if (claimer == address(0) || toDistribute == 0) {\\n                ++i;\\n                continue;\\n            }\\n\\n            if (poolBalance < toDistribute) {\\n                break;\\n            }\\n\\n            _pendingClaimerUnstakes[claimer] -= toDistribute;\\n            _pendingTotalUnstakes -= toDistribute;\\n            poolBalance -= toDistribute;\\n            delete _pendingClaimers[i];\\n            delete _pendingRequests[i];\\n            ++i;\\n            // if claimer for manual claim then add the request like manual\\n            if (isMarkedForManualClaim(claimer)) {\\n                _setForManualClaim(claimer, toDistribute);\\n                continue;\\n            }\\n\\n            bool success = _unsafeTransfer(claimer, toDistribute, true);\\n            if (!success) {\\n                _setForManualClaim(claimer, toDistribute);\\n                continue;\\n            }\\n            claimers[j] = claimer;\\n            amounts[j] = toDistribute;\\n            ++j;\\n        }\\n        _pendingGap = i;\\n        /* decrease arrays */\\n        uint256 removeCells = claimers.length - j;\\n        if (removeCells > 0) {\\n            assembly {\\n                mstore(claimers, j)\\n            }\\n            assembly {\\n                mstore(amounts, j)\\n            }\\n        }\\n\\n        emit RewardsDistributed(claimers, amounts);\\n    }\\n\\n    function getTotalPendingUnstakes() public view returns (uint256) {\\n        return _pendingTotalUnstakes;\\n    }\\n\\n    function getPendingRequestsOf(\\n        address claimer\\n    ) public view returns (uint256[] memory) {\\n        uint256 j;\\n        uint256[] memory unstakes = new uint256[](\\n            _pendingClaimers.length - _pendingGap\\n        );\\n        for (uint256 i = _pendingGap; i < _pendingClaimers.length; i++) {\\n            if (_pendingClaimers[i] == claimer) {\\n                unstakes[j] = _pendingRequests[i];\\n                ++j;\\n            }\\n        }\\n        uint256 removeCells = unstakes.length - j;\\n        if (removeCells > 0) {\\n            assembly {\\n                mstore(unstakes, j)\\n            }\\n        }\\n        return unstakes;\\n    }\\n\\n    function getPendingUnstakesOf(\\n        address claimer\\n    ) public view returns (uint256) {\\n        return _pendingClaimerUnstakes[claimer];\\n    }\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/earn/extension/MixedLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../LiquidTokenStakingPool.sol\\\";\\nimport \\\"./ManualClaimLiquidTokenStakingPool.sol\\\";\\nimport \\\"./QueueLiquidTokenStakingPool.sol\\\";\\nimport \\\"./ImmediateLiquidTokenStakingPool.sol\\\";\\nimport \\\"./ReferralLiquidTokenStakingPool.sol\\\";\\n\\ncontract MixedLiquidTokenStakingPool is\\n    QueueLiquidTokenStakingPool,\\n    ImmediateLiquidTokenStakingPool,\\n    ReferralLiquidTokenStakingPool\\n{\\n    // reserve some gap for the future upgrades\\n    uint256[50] private __reserved;\\n\\n    function __MixedPool_init() internal onlyInitializing {}\\n\\n    /**\\n     * @dev Checks the receiverAddress for existing manual requests\\n     * @dev Might be overridden\\n     */\\n    function _beforeUnstake(\\n        address /* ownerAddress */,\\n        address receiverAddress,\\n        uint256 /* amount */\\n    )\\n        internal\\n        virtual\\n        override(LiquidTokenStakingPool, ManualClaimLiquidTokenStakingPool)\\n    {\\n        require(\\n            !isMarkedForManualClaim(receiverAddress),\\n            \\\"LiquidTokenStakingPool: receiver is marked for manual claim\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks the pool balance and then sends the amount immediately\\n     * @dev If the pool balance is less than the amount puts into the queue\\n     * @dev Might be overridden\\n     */\\n    function _afterUnstake(\\n        address ownerAddress,\\n        address receiverAddress,\\n        uint256 amount\\n    ) internal virtual override {\\n        // unstake immediately\\n        if (getFreeBalance() >= amount) {\\n            _distributeRewards(receiverAddress, amount);\\n            return;\\n        }\\n        // pending unstake\\n        _addIntoQueue(ownerAddress, receiverAddress, amount);\\n    }\\n\\n    /**\\n     * @dev Might be overridden\\n     */\\n    function getFreeBalance()\\n        public\\n        view\\n        virtual\\n        override(ManualClaimLiquidTokenStakingPool, LiquidTokenStakingPool)\\n        returns (uint256)\\n    {\\n        return\\n            address(this).balance < getStashedForManualClaims()\\n                ? 0\\n                : address(this).balance - getStashedForManualClaims();\\n    }\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/earn/extension/ManualClaimLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../LiquidTokenStakingPool.sol\\\";\\nimport \\\"../../interfaces/IManualClaimLiquidTokenStakingPool.sol\\\";\\n\\ncontract ManualClaimLiquidTokenStakingPool is\\n    LiquidTokenStakingPool,\\n    IManualClaimLiquidTokenStakingPool\\n{\\n    uint256 internal _stashedForManualClaims;\\n    mapping(address => uint256) internal _manualClaims; // address => amount\\n\\n    // reserve some gap for the future upgrades\\n    uint256[50 - 2] private __reserved;\\n\\n    modifier notMarkerForManualClaim() virtual {\\n        require(\\n            _manualClaims[msg.sender] == 0,\\n            \\\"LiquidTokenStakingPool: sender is marked for manual claim\\\"\\n        );\\n        _;\\n    }\\n\\n    function __ManualClaimPool_init() internal onlyInitializing {}\\n\\n    /**\\n     * @dev Checks whether receiverAddress is marked for manual claim\\n     * @dev Might be overridden\\n     */\\n    function _beforeUnstake(\\n        address /* ownerAddress */,\\n        address receiverAddress,\\n        uint256 /* amount */\\n    ) internal virtual override(LiquidTokenStakingPool) {\\n        require(\\n            !isMarkedForManualClaim(receiverAddress),\\n            \\\"LiquidTokenStakingPool: receiver is marked for manual claim\\\"\\n        );\\n    }\\n\\n    function unstakeBonds(\\n        uint256 amount\\n    )\\n        external\\n        virtual\\n        nonReentrant\\n        notMarkerForManualClaim\\n        bondStakingUnpaused\\n    {\\n        _unstakeBondsFor(msg.sender, amount);\\n    }\\n\\n    function unstakeBondsFor(\\n        address receiverAddress,\\n        uint256 amount\\n    ) external virtual nonReentrant bondStakingUnpaused {\\n        _unstakeBondsFor(receiverAddress, amount);\\n    }\\n\\n    function unstakeCerts(\\n        uint256 shares\\n    ) external virtual notMarkerForManualClaim nonReentrant {\\n        _unstakeCertsFor(msg.sender, shares);\\n    }\\n\\n    function unstakeCertsFor(\\n        address receiverAddress,\\n        uint256 shares\\n    ) external virtual nonReentrant {\\n        _unstakeCertsFor(receiverAddress, shares);\\n    }\\n\\n    function claimManually(address receiverAddress) external nonReentrant {\\n        require(\\n            receiverAddress != address(0),\\n            \\\"LiquidTokenStakingPool: zero address\\\"\\n        );\\n        uint256 amount = _manualClaims[receiverAddress];\\n        require(\\n            amount > 0,\\n            \\\"LiquidTokenStakingPool: not marked for manual claim\\\"\\n        );\\n        require(\\n            address(this).balance >= getStashedForManualClaims(),\\n            \\\"LiquidTokenStakingPool: insufficient pool balance\\\"\\n        );\\n        _stashedForManualClaims -= amount;\\n        _manualClaims[receiverAddress] = 0;\\n        // _markedForManualClaim[id] = address(0);\\n        bool result = _unsafeTransfer(receiverAddress, amount, false);\\n        require(\\n            result,\\n            \\\"LiquidTokenStakingPool: failed to send rewards to receiverAddress\\\"\\n        );\\n        emit RewardsClaimed(receiverAddress, msg.sender, amount);\\n    }\\n\\n    function _setForManualClaim(address claimer, uint256 amount) internal {\\n        _stashedForManualClaims += amount;\\n        _manualClaims[claimer] += amount;\\n\\n        emit ManualClaimExpected(claimer, amount);\\n    }\\n\\n    function isMarkedForManualClaim(\\n        address claimer\\n    ) public view returns (bool) {\\n        return _manualClaims[claimer] != uint256(0);\\n    }\\n\\n    function getForManualClaimOf(\\n        address claimer\\n    ) public view returns (uint256) {\\n        return _manualClaims[claimer];\\n    }\\n\\n    function getStashedForManualClaims() public view returns (uint256) {\\n        return _stashedForManualClaims;\\n    }\\n\\n    /// @dev Might be overridden\\n    function getFreeBalance() public view virtual override returns (uint256) {\\n        return\\n            address(this).balance < getStashedForManualClaims()\\n                ? 0\\n                : address(this).balance - getStashedForManualClaims();\\n    }\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/earn/extension/ImmediateLiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../LiquidTokenStakingPool.sol\\\";\\n\\ncontract ImmediateLiquidTokenStakingPool is LiquidTokenStakingPool {\\n    /**\\n     * Events\\n     */\\n    event ImmediatelyDistributed(\\n        address indexed receiverAddress,\\n        uint256 amount\\n    );\\n\\n    // reserve some gap for the future upgrades\\n    uint256[50] private __reserved;\\n\\n    function __ImmediatePool_init() internal onlyInitializing {}\\n\\n    /**\\n     * @notice Safe distribution\\n     * @dev Checks the result of _unsafeTransfer()\\n     */\\n    function _distributeRewards(address receiverAddress, uint256 amount)\\n        internal\\n    {\\n        require(\\n            getFreeBalance() >= amount,\\n            \\\"LiquidTokenStakingPool: balance less than rewards amount\\\"\\n        );\\n        bool result = _unsafeTransfer(receiverAddress, amount, false);\\n        require(\\n            result,\\n            \\\"LiquidTokenStakingPool: failed to send rewards to claimer\\\"\\n        );\\n        emit ImmediatelyDistributed(receiverAddress, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@ankr.com/contracts/earn/LiquidTokenStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ICertificateToken.sol\\\";\\nimport \\\"../interfaces/IBearingToken.sol\\\";\\nimport \\\"../interfaces/IEarnConfig.sol\\\";\\nimport \\\"../interfaces/ILiquidTokenStakingPool.sol\\\";\\n\\nabstract contract LiquidTokenStakingPool is\\n    ILiquidTokenStakingPool,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /**\\n     * @dev external contracts\\n     */\\n    IBearingToken internal _bearingToken;\\n    ICertificateToken internal _certificateToken;\\n    IEarnConfig internal _earnConfig;\\n\\n    /**\\n     * @dev compact size, should be multiplied by 1 gwei\\n     */\\n    uint64 private minimumStake;\\n\\n    uint64 private _minimumUnstake;\\n\\n    // reserve some gap for the future upgrades\\n    uint256[50 - 5] private __reserved;\\n\\n    modifier onlyGovernance() virtual {\\n        require(\\n            msg.sender == _earnConfig.getGovernanceAddress(),\\n            \\\"LiquidTokenStakingPool: only governance allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyConsensus() virtual {\\n        require(\\n            msg.sender == _earnConfig.getConsensusAddress(),\\n            \\\"LiquidTokenStakingPool: only consensus allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier bondStakingUnpaused() virtual {\\n        require(\\n            !_earnConfig.isBondStakingPaused(),\\n            \\\"LiquidTokenStakingPool: bond staking is paused\\\"\\n        );\\n        _;\\n    }\\n\\n    function __LiquidTokenStakingPool_init(\\n        IEarnConfig earnConfig\\n    ) internal onlyInitializing {\\n        _earnConfig = earnConfig;\\n    }\\n\\n    receive() external payable virtual {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    function setBearingToken(\\n        address newValue\\n    ) external override onlyGovernance {\\n        address prevValue = address(_bearingToken);\\n        _bearingToken = IBearingToken(newValue);\\n        emit BearingTokenChanged(prevValue, newValue);\\n    }\\n\\n    function setCertificateToken(\\n        address newValue\\n    ) external override onlyGovernance {\\n        address prevValue = address(_certificateToken);\\n        _certificateToken = ICertificateToken(newValue);\\n        emit CertificateTokenChanged(prevValue, newValue);\\n    }\\n\\n    function setMinimumStake(\\n        uint256 newValue\\n    ) external virtual override onlyGovernance {\\n        require(\\n            newValue % 1 gwei == 0,\\n            \\\"LiquidTokenStakingPool: value should be multiplied of gwei\\\"\\n        );\\n        uint256 prevValue = getMinStake();\\n        minimumStake = uint64(newValue / 1 gwei);\\n        require(\\n            minimumStake * 1 gwei == newValue,\\n            \\\"LiquidTokenStakingPool: overflow\\\"\\n        );\\n        emit MinimumStakeChanged(prevValue, newValue);\\n    }\\n\\n    function setMinimumUnstake(\\n        uint256 newValue\\n    ) external virtual override onlyGovernance {\\n        require(\\n            newValue % 1 gwei == 0,\\n            \\\"LiquidTokenStakingPool: value should be multiplied of gwei\\\"\\n        );\\n        uint256 prevValue = getMinUnstake();\\n        _minimumUnstake = uint64(newValue / 1 gwei);\\n        require(\\n            _minimumUnstake * 1 gwei == newValue,\\n            \\\"LiquidTokenStakingPool: overflow\\\"\\n        );\\n        emit MinimumUnstakeChanged(prevValue, newValue);\\n    }\\n\\n    function getMinStake() public view virtual override returns (uint256) {\\n        return uint256(minimumStake) * 1 gwei;\\n    }\\n\\n    function getMinUnstake() public view virtual override returns (uint256) {\\n        return uint256(_minimumUnstake) * 1 gwei;\\n    }\\n\\n    function stakeBonds()\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        bondStakingUnpaused\\n    {\\n        _stakeBonds(msg.sender, msg.value);\\n    }\\n\\n    function stakeCerts() external payable override nonReentrant {\\n        _stakeCerts(msg.sender, msg.value);\\n    }\\n\\n    function _stakeCerts(address staker, uint256 amount) internal {\\n        uint256 shares = _certificateToken.bondsToShares(amount);\\n        _stake(staker, amount, shares, false);\\n        _bearingToken.unlockSharesFor(staker, shares);\\n        _afterStake(staker, amount, shares);\\n    }\\n\\n    function _stakeBonds(address staker, uint256 amount) internal {\\n        uint256 shares = _bearingToken.bondsToShares(amount);\\n        _stake(staker, amount, shares, true);\\n        _afterStake(staker, amount, shares);\\n    }\\n\\n    function _stake(\\n        address staker,\\n        uint256 amount,\\n        uint256 shares,\\n        bool isRebasing\\n    ) internal {\\n        _beforeStake(staker, amount, shares);\\n        require(\\n            amount >= getMinStake(),\\n            \\\"LiquidTokenStakingPool: value must be greater than min amount\\\"\\n        );\\n        _certificateToken.mint(address(_bearingToken), shares);\\n        _bearingToken.mint(staker, shares);\\n        emit Staked(staker, amount, shares, isRebasing);\\n    }\\n\\n    function _beforeStake(\\n        address account,\\n        uint256 amount,\\n        uint256 shares\\n    ) internal virtual {}\\n\\n    function _afterStake(\\n        address account,\\n        uint256 amount,\\n        uint256 shares\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice burns amount of bearing from msg.sender\\n     * @notice returns native or ERC20 token immediately or via queue\\n     * @param receiverAddress address for receiving unstaked funds\\n     * @param amount amount of bearing token to unstake\\n     */\\n    function _unstakeBondsFor(\\n        address receiverAddress,\\n        uint256 amount\\n    ) internal {\\n        address ownerAddress = msg.sender;\\n        uint256 shares = _bearingToken.bondsToShares(amount);\\n        require(\\n            amount >= getMinUnstake(),\\n            \\\"LiquidTokenStakingPool: value must be greater than min amount\\\"\\n        );\\n        require(\\n            _bearingToken.balanceOf(ownerAddress) >= amount,\\n            \\\"LiquidTokenStakingPool: cannot unstake more than have on address\\\"\\n        );\\n        _beforeUnstake(ownerAddress, receiverAddress, amount);\\n        _certificateToken.burn(address(_bearingToken), shares);\\n        _bearingToken.burn(ownerAddress, shares);\\n        _afterUnstake(ownerAddress, receiverAddress, amount);\\n        emit Unstaked(ownerAddress, receiverAddress, amount, shares, true);\\n    }\\n\\n    /**\\n     * @notice Burns amount of certificate from msg.sender\\n     * @notice Returns native token immediately or via queue\\n     * @param receiverAddress address for receiving unstaked funds\\n     * @param shares amount of certificate token to unstake\\n     */\\n    function _unstakeCertsFor(\\n        address receiverAddress,\\n        uint256 shares\\n    ) internal {\\n        address ownerAddress = msg.sender;\\n        uint256 amount = _certificateToken.sharesToBonds(shares);\\n        require(\\n            amount >= getMinUnstake(),\\n            \\\"LiquidTokenStakingPool: value must be greater than min amount\\\"\\n        );\\n        require(\\n            _certificateToken.balanceOf(ownerAddress) >= shares,\\n            \\\"LiquidTokenStakingPool: cannot unstake more than have on address\\\"\\n        );\\n        _beforeUnstake(ownerAddress, receiverAddress, amount);\\n        _certificateToken.burn(ownerAddress, shares);\\n        _afterUnstake(ownerAddress, receiverAddress, amount);\\n        emit Unstaked(ownerAddress, receiverAddress, amount, shares, false);\\n    }\\n\\n    /**\\n     * @dev Might be checked whether the amount matches some restrictions\\n     * @dev Might be checked the account for manual witdrawal requests\\n     */\\n    function _beforeUnstake(\\n        address ownerAddress,\\n        address receiverAddress,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Might be set for pending (queue)\\n     * @dev Might be distributed immediately\\n     */\\n    function _afterUnstake(\\n        address ownerAddress,\\n        address receiverAddress,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe transfer with gas limit if necessary\\n     * @notice The solution was received from bnb bounty program\\n     */\\n    function _unsafeTransfer(\\n        address receiverAddress,\\n        uint256 amount,\\n        bool limit\\n    ) internal virtual returns (bool) {\\n        address payable wallet = payable(receiverAddress);\\n        bool success;\\n        if (limit) {\\n            assembly {\\n                success := call(10000, wallet, amount, 0, 0, 0, 0)\\n            }\\n            return success;\\n        }\\n        (success, ) = wallet.call{value: amount}(\\\"\\\");\\n        return success;\\n    }\\n\\n    function getFreeBalance() public view virtual returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @return Bearing token address\\n     * @return Certificate token address\\n     */\\n    function getTokens() external view virtual returns (address, address) {\\n        return (address(_bearingToken), address(_certificateToken));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"BearingTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"CertificateTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"DailyRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DistributeGasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlashFeeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FlashPoolMinCapacityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlashUnstakeFeeCollectedClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FlashUntakeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ImmediatelyDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualClaimExpected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ManualDistributeExpected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinimumStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinimumUnstakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"ReferralCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isRebasing\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StakingContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isRebasing\",\"type\":\"bool\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFlashUnstakeFeeCollected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"claimManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePendingRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashPoolCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributeGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashPoolMinCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashUnstakeCollectedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getForManualClaimOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingRequestsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingUnstakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStashedForManualClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDelegated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingUnstakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEarnConfig\",\"name\":\"earnConfig\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributeGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingContract\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isAbleToUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"isMarkedForManualClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setBearingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setCertificateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setDistributeGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setFlashUnstakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setFlaslPoolMinCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeBonds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"stakeBondsWithCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCerts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"stakeCertsWithCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeBondsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstakeCerts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstakeCertsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAndDistributePendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BNBStakingPool", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}