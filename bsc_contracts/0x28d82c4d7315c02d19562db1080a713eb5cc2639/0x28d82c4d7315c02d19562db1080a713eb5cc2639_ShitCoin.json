{"SourceCode": "/*\r\nShitcoin is a innovative new kind of money, and store of value with the vision of \r\none day helping those who are battling against a shitty time in in life with incredible gains.\r\n\r\nName: Shitcoin\r\nTicker: STC\r\nSupply: 21,000,000\r\nDecimals 8\r\n\r\nTake note\r\n* 4.20% Max wallet.\r\n\r\nTokenomics Buy\r\n* 21,000,000 \u2190 fixed total supply\r\n* 0% Transfer \u2190 zero transaction fees for sending and receiving\r\n* 1% Stake \u2190 every buy transaction sends shitcoins to the stake award pool.\r\n* 4% Auto-Liquidity \u2190 every buy transaction adds to liquidity.\r\n* 1% Development \u2190 every buy transaction sends bnb to the development wallet.\r\n\r\nTokenomics Sell\r\n* 21,000,000 \u2190 fixed total supply.\r\n* 0% Transfer \u2190 zero transaction fees for sending and receiving.\r\n* 2% Stake \u2190 every sell transaction sends shitcoins to the stake award pool.\r\n* 6% Auto-Liquidity \u2190 every sell transaction adds to liquidity.\r\n* 1% Development \u2190 every sell transaction sends bnb to the development wallet.\r\n\r\n* Shitcoiners who hold shitcoins receive a NFT (Non-Fungible Turd)\r\n* Burn 69 \u2190 +1% staking award bonus. (Unlimited available)\r\n* Stake 6,690 \u2190 50% timee reduction. (690 available)\r\n* Kickstart Development \u2190 N/A, Novelty. (2 available)\r\n\r\nPlease read through our website to find out more, or join the Discord/Telegram to ask any questions you may have.\r\n* Website: https://shitcoin69.com\r\n\r\nSincerely,\r\nShit-toshi\r\n\r\n*/\r\n\r\npragma solidity ^0.8.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier:MIT\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Dex Factory contract interface\r\ninterface IdexFacotry {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// Dex Router02 contract interface\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ShitCoin is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public _isExcludedFromMaxTx;\r\n\r\n    string private _name = \"Shitcoin\";\r\n    string private _symbol = \"STC\";\r\n    uint8 private _decimals = 8;\r\n    uint256 private _totalSupply = 21 * 1e6 * 1e8; // 21 Million\r\n\r\n    IDexRouter public dexRouter;\r\n    address public dexPair;\r\n    address payable public stakingPool;\r\n    address payable public devWallet;\r\n\r\n    uint256 public minTokenToSwap = 100000 * 1e8; // 100K amount will trigger swap and distribute\r\n    uint256 public maxHolding = _totalSupply.mul(42).div(1000); // 4.2 max wallet\r\n    uint256 public percentDivider = 1000;\r\n    uint256 public _launchTime; // can be set only once\r\n\r\n    bool public distributeAndLiquifyStatus; // should be true to turn on to liquidate the pool\r\n    bool public feesStatus = true; // enable by default\r\n    bool public _tradingOpen; //once switched on, can never be switched off.\r\n\r\n    //buying taxes\r\n    uint256 public stakingFeeOnBuying = 10; // 1% will be added to the STC staking address\r\n    uint256 public devFeeOnBuying = 10; // 1% will be added to the dev address\r\n    uint256 public liquidityFeeOnBuying = 40; // 4% will be added to the liquidity\r\n\r\n    //selling taxes\r\n    uint256 public stakingFeeOnSelling = 20; // 2% will be added to the STC staking address\r\n    uint256 public devFeeOnSelling = 10; // 1% will be added to the dev address\r\n    uint256 public liquidityFeeOnSelling = 60; // 6% will be added to the liquidity\r\n\r\n    uint256 lpFeeCounter = 0;\r\n    uint256 devFeeCounter = 0;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor(address payable _stakingPool, address payable _devWallet) {\r\n        _balances[owner()] = _totalSupply;\r\n        stakingPool = _stakingPool;\r\n        devWallet = _devWallet;\r\n        \r\n\r\n        IDexRouter _pancakeRouter = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        dexPair = IdexFacotry(_pancakeRouter.factory()).createPair(\r\n            address(this),\r\n            _pancakeRouter.WETH()\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        dexRouter = _pancakeRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    //to receive BNB from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"STC: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"STC: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function includeOrExcludeFromFee(address account, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function includeOrExcludeFromMaxTx(address _address, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromMaxTx[_address] = value;\r\n    }\r\n\r\n    function setMinTokenToSwap(uint256 _amount) external onlyOwner {\r\n        minTokenToSwap = _amount;\r\n    }\r\n\r\n    function setDistributionStatus(bool _value) public onlyOwner {\r\n        distributeAndLiquifyStatus = _value;\r\n    }\r\n\r\n    function enableOrDisableFees(bool _value) external onlyOwner {\r\n        feesStatus = _value;\r\n    }\r\n\r\n    function updateAddresses(\r\n        address payable _stakingPool,\r\n        address payable _devWallet\r\n    ) external onlyOwner {\r\n        // include in fee older address\r\n        _isExcludedFromFee[stakingPool] = false;\r\n        _isExcludedFromFee[devWallet] = false;\r\n\r\n        stakingPool = _stakingPool;\r\n        devWallet = _devWallet;\r\n\r\n        // exclude from fee new address\r\n        _isExcludedFromFee[stakingPool] = true;\r\n        _isExcludedFromFee[devWallet] = true;\r\n    }\r\n\r\n    function setRoute(IDexRouter _router, address _pair) external onlyOwner {\r\n        dexRouter = _router;\r\n        dexPair = _pair;\r\n    }\r\n    \r\n    function setRoute(uint256 _maxHolding) external onlyOwner {\r\n            maxHolding = _maxHolding;\r\n\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        require(!_tradingOpen, \"STC: Already enabled\");\r\n        _tradingOpen = true;\r\n        _launchTime = block.timestamp;\r\n        distributeAndLiquifyStatus = true;\r\n    }\r\n\r\n    function totalBuyFeePerTx(uint256 amount) public view returns (uint256) {\r\n        uint256 fee = amount\r\n            .mul(\r\n                stakingFeeOnBuying.add(devFeeOnBuying).add(liquidityFeeOnBuying)\r\n            )\r\n            .div(percentDivider);\r\n        return fee;\r\n    }\r\n\r\n    function totalSellFeePerTx(uint256 amount) public view returns (uint256) {\r\n        uint256 fee = amount\r\n            .mul(\r\n                stakingFeeOnSelling.add(devFeeOnSelling).add(\r\n                    liquidityFeeOnSelling\r\n                )\r\n            )\r\n            .div(percentDivider);\r\n        return fee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"STC: approve from the zero address\");\r\n        require(spender != address(0), \"STC: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"STC: transfer from the zero address\");\r\n        require(to != address(0), \"STC: transfer to the zero address\");\r\n        require(amount > 0, \"STC: Amount must be greater than zero\");\r\n\r\n        if (\r\n            _isExcludedFromMaxTx[from] == false &&\r\n            _isExcludedFromMaxTx[to] == false // by default false\r\n        ) { \r\n            if (!_tradingOpen) {\r\n                require(\r\n                    from != dexPair && to != dexPair,\r\n                    \"STC: Trading is not enabled yet\"\r\n                );\r\n            }\r\n        }\r\n\r\n        // swap and liquify\r\n        distributeAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || !feesStatus) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax,stakingPool fee, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (sender == dexPair && takeFee) {\r\n            uint256 allFee = totalBuyFeePerTx(amount);\r\n            uint256 tTransferAmount = amount.sub(allFee);\r\n            require(\r\n                balanceOf(recipient).add(tTransferAmount)  <= maxHolding,\r\n                \"User max holding Limit Reached\"\r\n               \r\n            );\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n            _takeStakingPoolFeeOnBuying(sender, amount);\r\n            _takeDevFeeOnBuying(sender, amount);\r\n            _takeliquidityFeeOnBuying(sender, amount);\r\n        } else if (recipient == dexPair && takeFee) {\r\n            uint256 allFee = totalSellFeePerTx(amount);\r\n            uint256 tTransferAmount = amount.sub(allFee);\r\n            \r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n            _takeStakingFeeOnSelling(sender, amount);\r\n            _takeLiquidityFeeOnSelling(sender, amount);\r\n            _takeDevFeeOnSelling(sender, amount);\r\n        } else {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _takeStakingPoolFeeOnBuying(address sender, uint256 amount)\r\n        internal\r\n    {\r\n        uint256 fee = amount.mul(stakingFeeOnBuying).div(percentDivider);\r\n        _balances[stakingPool] = _balances[stakingPool].add(fee);\r\n\r\n        emit Transfer(sender, stakingPool, fee);\r\n    }\r\n\r\n    function _takeDevFeeOnBuying(address sender, uint256 amount) internal {\r\n        uint256 _devFee = amount.mul(devFeeOnBuying).div(percentDivider);\r\n        devFeeCounter = devFeeCounter.add(_devFee);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(_devFee);\r\n\r\n        emit Transfer(sender, address(this), _devFee);\r\n    }\r\n\r\n    function _takeliquidityFeeOnBuying(address sender, uint256 amount)\r\n        internal\r\n    {\r\n        uint256 _lpFee = amount.mul(liquidityFeeOnBuying).div(percentDivider);\r\n        lpFeeCounter = lpFeeCounter.add(_lpFee);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(_lpFee);\r\n\r\n        emit Transfer(sender, address(this), _lpFee);\r\n    }\r\n\r\n    function _takeStakingFeeOnSelling(address sender, uint256 amount) internal {\r\n        uint256 fee = amount.mul(stakingFeeOnSelling).div(percentDivider);\r\n        _balances[stakingPool] = _balances[stakingPool].add(fee);\r\n\r\n        emit Transfer(sender, stakingPool, fee);\r\n    }\r\n\r\n    function _takeDevFeeOnSelling(address sender, uint256 amount) internal {\r\n        uint256 _devFee = amount.mul(devFeeOnSelling).div(percentDivider);\r\n        devFeeCounter = devFeeCounter.add(_devFee);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(_devFee);\r\n\r\n        emit Transfer(sender, address(this), _devFee);\r\n    }\r\n\r\n    function _takeLiquidityFeeOnSelling(address sender, uint256 amount)\r\n        internal\r\n    {\r\n        uint256 _lpFee = amount.mul(liquidityFeeOnSelling).div(percentDivider);\r\n        lpFeeCounter = lpFeeCounter.add(_lpFee);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(_lpFee);\r\n\r\n        emit Transfer(sender, address(this), _lpFee);\r\n    }\r\n\r\n    function distributeAndLiquify(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is Dex pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenToSwap;\r\n\r\n        if (\r\n            shouldSell &&\r\n            from != dexPair &&\r\n            distributeAndLiquifyStatus &&\r\n            !(from == address(this) && to == address(dexPair)) // swap 1 time\r\n        ) {\r\n            // approve contract\r\n            _approve(address(this), address(dexRouter), contractTokenBalance);\r\n\r\n            uint256 halfLiquidity = lpFeeCounter.div(2);\r\n            uint256 otherHalfLiquidity = lpFeeCounter.sub(halfLiquidity);\r\n\r\n            uint256 tokenAmountToBeSwapped = contractTokenBalance.sub(\r\n                otherHalfLiquidity\r\n            );\r\n\r\n            // now is to lock into liquidty pool\r\n            Utils.swapTokensForEth(address(dexRouter), tokenAmountToBeSwapped);\r\n\r\n            uint256 deltaBalance = address(this).balance;\r\n            uint256 bnbToBeAddedToLiquidity = deltaBalance\r\n                .mul(halfLiquidity)\r\n                .div(tokenAmountToBeSwapped);\r\n            uint256 bnbForDev = deltaBalance.sub(bnbToBeAddedToLiquidity);\r\n\r\n            // sending bnb to development wallet\r\n            if (bnbForDev > 0) devWallet.transfer(bnbForDev);\r\n\r\n            // add liquidity to Dex\r\n            if (bnbToBeAddedToLiquidity > 0) {\r\n                Utils.addLiquidity(\r\n                    address(dexRouter),\r\n                    owner(),\r\n                    otherHalfLiquidity,\r\n                    bnbToBeAddedToLiquidity\r\n                );\r\n\r\n                emit SwapAndLiquify(\r\n                    halfLiquidity,\r\n                    bnbToBeAddedToLiquidity,\r\n                    otherHalfLiquidity\r\n                );\r\n            }\r\n\r\n            // Reset all fee counters\r\n            lpFeeCounter = 0;\r\n            devFeeCounter = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Library for doing a swap on Dex\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(address routerAddress, uint256 tokenAmount)\r\n        internal\r\n    {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // generate the Dex pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAndLiquifyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDistributionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxHolding\",\"type\":\"uint256\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalBuyFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalSellFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShitCoin", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000053f553ad579db6bd6df3a8be6ac30f4d70c278f50000000000000000000000005a8d6ce92d0957bfade20405a7ace3bfa6999904", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f5d49a1f5bb2e241473cc66dfac571dc260810c20cb7c15166bb51e3dd20a96"}