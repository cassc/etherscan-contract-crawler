{"SourceCode": "// File: interfaces/ISuperPrize.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n \r\ninterface ISuperPrize {\r\n    function addNftPools(uint[] memory _nftIds) external;\r\n    function deleteNftPools(uint[] memory _nftIds) external;\r\n}\r\n\r\n// File: destoryNFTPool.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1;\r\n            // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IMasterChef {\r\n    function pending(uint256 pid, address user) external view returns (uint256);\r\n\r\n    function deposit(uint256 pid, uint256 amount) external;\r\n\r\n    function withdraw(uint256 pid, uint256 amount) external;\r\n\r\n    function emergencyWithdraw(uint256 pid) external;\r\n\r\n    function UserLPAmount(address user) external view returns (uint256);\r\n\r\n    function poolTotalAmount() external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ninterface IInvite {\r\n    function addRecord(address) external returns(bool);\r\n    function getParents(address) external view returns(address[] memory);\r\n    function getChilds(address) external view returns(address[] memory);\r\n    function getInviteNum(address) external view returns(uint256[2] memory);\r\n    function getFee() view external  returns(uint8[] memory);\r\n}\r\n\r\ncontract MasterChefNFTPool is Ownable, ERC721Holder {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    EnumerableSet.AddressSet private _multLP;\r\n    EnumerableSet.AddressSet private _blackList;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        //\u7528\u6237\u63d0\u4f9b\u8d28\u62bc\u4e86\u591a\u5c11\u6570\u91cf\u7684\u8d44\u4ea7\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        //\u7528\u6237\u5df2\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n        uint256 reward; // Reward\r\n        //\u603b\u5757\u6570\r\n        uint256 blockNums;\r\n        //\u6700\u540e\u4e00\u6b21\u9886\u53d6\u5757\u9ad8\r\n        uint256 takeBlock;\r\n        //\u6700\u540e\u4e00\u6b21\u6263\u51cfNFT\u9ad8\u5ea6\r\n        uint256 reduceNFTBlock;\r\n        //\u7528\u6237\u4e0a\u6b21\u9886\u53d6\u65f6\u6bcf\u80a1\u6536\u76ca\r\n        uint256 accDexPerShare;\r\n        //\u7528\u6237\u5b9e\u9645\u5269\u4f59\u6570\u91cf\r\n        uint256 amountInner;\r\n    }\r\n\r\n    // Info of each pool.\r\n    //\u77ff\u6c60\u4fe1\u606f\r\n    struct PoolInfo {\r\n        IERC721 lpToken; // Address of LP token contract.\r\n        //\u5206\u914d\u70b9\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. DEXs to distribute per block.\r\n        //\u6700\u540e\u5956\u52b1\u5757\r\n        uint256 lastRewardBlock; // Last block number that DEXs distribution occurs.\r\n        //\u6bcf\u80a1\u7d2f\u8ba1 DEX\uff0c\u4e58\u4ee5 1e12(1*10^12)\r\n        uint256 accDexPerShare; // Accumulated DEXs per share, times 1e12.\r\n        //\u5f53\u524d\u6c60\u5b58\u6b3e\u603b\u989d\r\n        uint256 totalAmount; // Total amount of current pool deposit.\r\n    }\r\n    uint8 public invRewardNum = 8;\r\n    uint16 public invRewardFee = 500;\r\n    // The DEX Token!\r\n    address public dex;\r\n    //\u6bcf\u4e2a\u533a\u5757\u5956\u52b1\u591a\u5c11\u4ee3\u5e01\r\n    // DEX tokens created per block.\r\n    uint256 public dexPerBlock;\r\n    //\u6240\u6709\u77ff\u6c60\u4fe1\u606f\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    //\u7b2c\u51e0\u4e2a\u77ff\u6c60=>\u94b1\u5305\u5730\u5740=>\u94b1\u5305\u5730\u5740\u4fe1\u606f\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(address => uint256) public invRewardAmount;\r\n    // Control mining\r\n    bool public paused = false;\r\n    //\u5956\u52b1\u603b\u5206\u914d\u70b9(\u603b\u5206\u914d\u70b9\u3002\u5fc5\u987b\u662f\u6240\u6709\u6c60\u4e2d\u6240\u6709\u5206\u914d\u70b9\u7684\u603b\u548c)\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n    // The block number when DEX mining starts.\r\n    uint256 public startBlock;\r\n    // multLP MasterChef\r\n    address public multLpChef;\r\n    // multLP Token\r\n    address public multLpToken;\r\n    //\u591a\u5c11\u4e2a\u5757\u5956\u52b1\u51cf\u534a\r\n    // How many blocks are halved\r\n    uint256 public halvingPeriod;\r\n    // user reward\r\n    uint256 public userReward;\r\n    uint256 public multLpUserReward;\r\n    //\u6c60\u5b50\u603b\u7684\u8d28\u62bc\u6570\u91cf\r\n    uint256 public poolTotalAmount;\r\n    //\u6700\u5927\u9886\u53d6\u591a\u5c11\u4e2a\u5757\r\n    uint256 public maxTakeBlock = 2880000;\r\n    IInvite public inviteContract;\r\n    //\u7528\u6237\u8d28\u62bc\u6570\u636e\r\n    mapping(uint256 => mapping(address => uint256)) public userDeposits;\r\n    address immutable destoryAddress = 0x000000000000000000000000000000000000dEaD;\r\n    ISuperPrize[] public iSuperPrizes;\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Deposits(address indexed user, uint256 indexed pid, uint256[] amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event destoryNft(address indexed nft, uint256 nftid);\r\n\r\n    receive() external payable {}\r\n\r\n    constructor(\r\n        address _dex,\r\n        uint256 _dexPerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        dex = _dex;\r\n        dexPerBlock = _dexPerBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9080\u8bf7\u5408\u7ea6\r\n    function setInviteContract(address _inviteContract) onlyOwner public{\r\n        require(_inviteContract!=address(0),\"address error\");\r\n        inviteContract = IInvite(_inviteContract);\r\n    }\r\n    \r\n    //\u51cf\u534a\u5468\u671f\r\n    function setHalvingPeriod(uint256 _block) public onlyOwner {\r\n        halvingPeriod = _block;\r\n    }\r\n\r\n    function setInvRewardFee(uint16 _invRewardFee) public onlyOwner {\r\n        invRewardFee = _invRewardFee;\r\n    }\r\n    //\u8bbe\u7f6e\u6bcf\u4e2a\u5757\u4ea7\u51fa\u591a\u5c11\u5956\u52b1\r\n    // Set the number of dex produced by each block\r\n    function setDexPerBlock(uint256 newPerBlock) public onlyOwner {\r\n        massUpdatePools();\r\n        dexPerBlock = newPerBlock;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u5f00\u59cb\u533a\u5757\u9ad8\u5ea6\r\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    //\u6dfb\u52a0\u9ed1\u540d\u5355\r\n    function addBadAddress(address _bad) public onlyOwner returns (bool) {\r\n        require(_bad != address(0), \"_bad is the zero address\");\r\n        return EnumerableSet.add(_blackList, _bad);\r\n    }\r\n\r\n    //\u5220\u9664\u9ed1\u540d\u5355\r\n    function delBadAddress(address _bad) public onlyOwner returns (bool) {\r\n        require(_bad != address(0), \"_bad is the zero address\");\r\n        return EnumerableSet.remove(_blackList, _bad);\r\n    }\r\n\r\n    function getBlackListLength() public view returns (uint256) {\r\n        return EnumerableSet.length(_blackList);\r\n    }\r\n\r\n    function isBadAddress(address account) public view returns (bool) {\r\n        return EnumerableSet.contains(_blackList, account);\r\n    }\r\n\r\n    function getBadAddress(uint256 _index)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        require(_index <= getBlackListLength() - 1, \"index out of bounds\");\r\n        return EnumerableSet.at(_blackList, _index);\r\n    }\r\n\r\n    //\u6dfb\u52a0lp\u4ee3\u5e01\r\n    //\u65e0\u7528\r\n    function addMultLP(address _addLP) public onlyOwner returns (bool) {\r\n        require(_addLP != address(0), \"LP is the zero address\");\r\n        IERC20(_addLP).approve(multLpChef, uint256(-1));\r\n        return EnumerableSet.add(_multLP, _addLP);\r\n    }\r\n\r\n    //\u67e5\u770b\u662f\u5426\u91cd\u590dlp\u4ee3\u5e01\r\n    function isMultLP(address _LP) public view returns (bool) {\r\n        return EnumerableSet.contains(_multLP, _LP);\r\n    }\r\n\r\n    function getMultLPLength() public view returns (uint256) {\r\n        return EnumerableSet.length(_multLP);\r\n    }\r\n\r\n    function getMultLPAddress(uint256 _pid) public view returns (address) {\r\n        require(_pid <= getMultLPLength() - 1, \"not find this multLP\");\r\n        return EnumerableSet.at(_multLP, _pid);\r\n    }\r\n\r\n    //\u6682\u505c\u5408\u7ea6\r\n    function setPause() public onlyOwner {\r\n        paused = !paused;\r\n    }\r\n\r\n    function setInvRewardNum(uint8 _invRewardNum) public onlyOwner {\r\n        invRewardNum = _invRewardNum;\r\n    }\r\n\r\n    //\u8bbe\u7f6elp\u4ee3\u5e01\r\n    function setMultLP(address _multLpToken, address _multLpChef)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _multLpToken != address(0) && _multLpChef != address(0),\r\n            \"is the zero address\"\r\n        );\r\n        multLpToken = _multLpToken;\r\n        multLpChef = _multLpChef;\r\n    }\r\n\r\n    //\u6dfb\u52a0\u77ff\u6c60\u4fe1\u606f\r\n    //1\u3002\u5956\u52b1\u70b9\u6570 2\u3002\u77ff\u6c60nft 3.\u662f\u5426\u66f4\u65b0\u6240\u6709\u77ff\u6c60\u5956\u52b1\u4fe1\u606f\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC721 _nft,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        require(address(_nft) != address(0), \"_lpToken is the zero address\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock\r\n            ? block.number\r\n            : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _nft,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accDexPerShare: 0,\r\n                totalAmount: 0\r\n            })\r\n        );\r\n        // LpOfPid[address(_nft)] = poolLength() - 1;\r\n    }\r\n\r\n    //\u66f4\u65b0\u77ff\u6c60\u5956\u52b1\u70b9\u6570\r\n    // Update the given pool's DEX allocation point. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    //\u8f6c\u79fb\u5f53\u524d\u5408\u7ea6\u7684\u5956\u52b1\u4ee3\u5e01\r\n    // The current pool corresponds to the pid of the multLP pool\r\n    function setPoolWithDraw(address _owner, uint256 amount) public onlyOwner {\r\n        safeDexTransfer(_owner, amount);\r\n    }\r\n\r\n    //\u8ba1\u7b97\u6700\u540e\u4e00\u6b21\u5956\u52b1\u533a\u5757\u9ad8\u5ea6\u4e0e\u5f00\u59cb\u533a\u5757\u9ad8\u5ea6\r\n    function phase(uint256 blockNumber) public view returns (uint256) {\r\n        //\u6ca1\u8bbe\u7f6e\u51cf\u534a\u671f\r\n        if (halvingPeriod == 0) {\r\n            return 0;\r\n        }\r\n        if (blockNumber > startBlock) {\r\n            return (blockNumber.sub(startBlock).sub(1)).div(halvingPeriod);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //\u83b7\u53d6\u5f53\u524d\u5757\u5956\u52b1\u6570\u91cf\r\n    function reward(uint256 blockNumber) public view returns (uint256) {\r\n        uint256 _phase = phase(blockNumber);\r\n        //\u8ba1\u7b97\u5f53\u524d\u5757\u8870\u51cf\u540e\u7684\u6570\u91cf\r\n        return dexPerBlock.div(2**_phase);\r\n    }\r\n\r\n    //\u83b7\u53d6\u533a\u5757\u5956\u52b1\r\n    function getDexBlockReward(uint256 _lastRewardBlock)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 blockReward = 0;\r\n        //\u6700\u540e\u4e00\u6b21\u5956\u52b1\u65f6\u7684\u533a\u5757\u9ad8\u5ea6(\u83b7\u53d6\u8870\u51cf\u6b21\u6570)\r\n        uint256 n = phase(_lastRewardBlock);\r\n        //\u5f53\u524d\u533a\u5757\u9ad8\u5ea6(\u83b7\u53d6\u8870\u51cf\u6b21\u6570)\r\n        uint256 m = phase(block.number);\r\n        while (n < m) {\r\n            //\u6700\u540e\u4e00\u6b21\u533a\u5757\u5956\u52b1\u7d2f\u52a0\r\n            n++;\r\n            //\u8870\u51cf\u6b21\u6570*\u591a\u5c11\u6b21\u5757\u8870\u51cf+\u5f00\u59cb\u533a\u5757\u9ad8\u5ea6(\u5f53\u524d\u7d2f\u52a0\u540e\u7684\u533a\u5757\u9ad8\u5ea6/)\r\n            uint256 r = n.mul(halvingPeriod).add(startBlock);\r\n            //\u5956\u52b1\u7d2f\u52a0\u503c+\u672c\u6b21\u533a\u5757\u9ad8\u5ea6\u53d1\u653e\u5956\u52b1\u6570\u91cf\r\n            blockReward = blockReward.add(\r\n                (r.sub(_lastRewardBlock)).mul(reward(r))\r\n            );\r\n            _lastRewardBlock = r;\r\n        }\r\n        //\u52a0\u4e0a\u5f53\u524d\u533a\u5757\u9ad8\u5ea6\u5956\u52b1\u6570\u91cf\r\n        blockReward = blockReward.add(\r\n            (block.number.sub(_lastRewardBlock)).mul(reward(block.number))\r\n        );\r\n        return blockReward;\r\n    }\r\n\r\n    //\u66f4\u65b0\u6240\u6709\u6c60\u7684\u5956\u52b1\u4fe1\u606f\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    //\u5c06\u7ed9\u5b9a\u6c60\u7684\u5956\u52b1\u53d8\u91cf\u66f4\u65b0\u4e3a\u6700\u65b0\u7684(\u66f4\u65b0\u77ff\u6c60\u533a\u5757\u9ad8\u5ea6\uff0c\u5e94\u53d1\u653e\u5956\u52b1\u6570\u91cf\uff0c\u6bcf\u4e2a\u8d28\u62bc\u8d44\u4ea7\u5e94\u8be5\u53d1\u653e\u591a\u5c11\u5956\u52b1)\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply;\r\n        if (isMultLP(address(pool.lpToken))) {\r\n            if (pool.totalAmount == 0) {\r\n                pool.lastRewardBlock = block.number;\r\n                return;\r\n            }\r\n            lpSupply = pool.totalAmount;\r\n        } else {\r\n            //\u770b\u770b\u5408\u7ea6\u603b\u5171\u8d28\u62bc\u591a\u5c11erc721\r\n            lpSupply = pool.totalAmount;\r\n            if (lpSupply == 0) {\r\n                pool.lastRewardBlock = block.number;\r\n                return;\r\n            }\r\n        }\r\n        //\u6700\u540e\u4e00\u6b21\u53d1\u653e\u5956\u52b1\u533a\u5757\uff0c\u5230\u5f53\u524d\u533a\u5757\u9ad8\u5ea6\u603b\u5171\u672a\u53d1\u7684\u5956\u52b1\u6570\u91cf\r\n        uint256 blockReward = getDexBlockReward(pool.lastRewardBlock);\r\n        if (blockReward <= 0) {\r\n            return;\r\n        }\r\n        //\u5f53\u524d\u77ff\u6c60\u5e94\u53d1\u5956\u52b1 = \u603b\u5956\u52b1\u6570\u91cf*\u5f53\u524d\u77ff\u6c60\u5206\u914d\u70b9\u6570/\u603b\u7684\u5206\u966a\u70b9\u6570\r\n        uint256 dexReward = blockReward.mul(pool.allocPoint).div(\r\n            totalAllocPoint\r\n        );\r\n        //\u6bcf\u4e2a\u8d28\u62bcnft\u5e94\u8be5\u5206\u914d\u591a\u5c11\u5956\u52b1\r\n        pool.accDexPerShare = pool.accDexPerShare.add(\r\n            dexReward.mul(1e12).div(lpSupply)\r\n        );\r\n        //\u66f4\u65b0\u6700\u540e\u4e00\u6b21\u8ba1\u7b97\u5956\u52b1\u7684\u533a\u5757\u9ad8\u5ea6\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // View function to see pending DEXs on frontend.\r\n    function pending(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 dexAmount = pendingDex(_pid, _user);\r\n        return (dexAmount, 0);\r\n    }\r\n\r\n    //\u83b7\u53d6\u6307\u5b9a\u77ff\u6c60\u7528\u6237\u5956\u52b1\r\n    function pendingDex(uint256 _pid, address _user)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //\u83b7\u53d6\u77ff\u6c60\u4fe1\u606f\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        //\u83b7\u53d6\u8d28\u62bc\u77ff\u6c60\u7684\u7528\u6237\u4fe1\u606f\r\n        UserInfo memory user = userInfo[_pid][_user];\r\n        //\u83b7\u53d6\u6bcf\u80a1\u6536\u76ca\r\n        uint256 accDexPerShare = pool.accDexPerShare;\r\n        //\u83b7\u53d6\u8be5\u77ff\u6c60\u8d28\u62bc\u5230\u5f53\u524d\u5408\u7ea6\u7684\u8d28\u62bc\u8d44\u4ea7\u603b\u6570\u91cf\r\n        uint256 lpSupply = pool.totalAmount;\r\n        //\u7528\u6237lp\u4ee3\u5e01\u6570\u91cf\u5927\u4e8e0\r\n        if (user.amount > 0) {\r\n            //\u5f53\u524d\u533a\u5757\u9ad8\u5ea6\u5927\u4e8e\u6c60\u4e2d\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u5956\u52b1\u7684\u533a\u5757\u9ad8\u5ea6\r\n            if (block.number > pool.lastRewardBlock) {\r\n                //\u83b7\u53d6\u533a\u5757\u5956\u52b1\r\n                uint256 blockReward = getDexBlockReward(pool.lastRewardBlock);\r\n                //\u83b7\u53d6\u5f53\u524d\u77ff\u6c60\u80fd\u5206\u591a\u5c11\u5956\u52b1\r\n                uint256 dexReward = blockReward.mul(pool.allocPoint).div(\r\n                    totalAllocPoint\r\n                );\r\n                accDexPerShare = accDexPerShare.add(\r\n                    dexReward.mul(1e12).div(lpSupply)\r\n                );\r\n                pool.accDexPerShare = accDexPerShare;\r\n            }\r\n           uint256 _reward;\r\n           (_reward,,,) = getNftReward(user, pool);\r\n            return _reward;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //\u5c06 LP \u4ee3\u5e01\u5b58\u5165 oecPool \u7528\u4e8e DEX \u5206\u914d\r\n    //\u8d28\u62bcnft \u5e76 \u9886\u53d6\u6536\u76ca tokenid = 0 \u5c31\u53ea\u5206\u914d\u5956\u52b1\r\n    // Deposit LP tokens to oecPool for DEX allocation.\r\n    function deposit(uint256 index, uint256 _tokenId) public notPause {\r\n        require(!isBadAddress(msg.sender), \"Illegal, rejected \");\r\n        depositDex(index, _tokenId, msg.sender);\r\n        ISuperPrize isuperPrize = iSuperPrizes[index];\r\n        uint256[] memory _tokenIds = new uint256[](1);\r\n        _tokenIds[0] = _tokenId;\r\n        isuperPrize.deleteNftPools(_tokenIds);\r\n    }\r\n\r\n    //\u6279\u91cf\u9500\u6bc1\r\n    function deposits(uint256 index, uint256[] memory _tokenIds)\r\n        public\r\n        notPause\r\n    {\r\n        require(!isBadAddress(msg.sender), \"Illegal, rejected \");\r\n        address userAddress = msg.sender;\r\n        //\u83b7\u53d6\u77ff\u6c60\u4fe1\u606f\r\n        PoolInfo storage pool = poolInfo[index];\r\n        //\u83b7\u53d6\u77ff\u6c60\u7528\u6237\u4fe1\u606f\r\n        UserInfo storage user = userInfo[index][userAddress];\r\n        //\u66f4\u65b0\u77ff\u6c60\u5956\u52b1\u4fe1\u606f\r\n        updatePool(index);\r\n        uint256 pendingAmount;\r\n         if (user.amount > 0) {\r\n           uint256 totalEndNum;\r\n            uint256 totalEndBlock;\r\n            uint256 reductNftBlock;\r\n            uint256 pendingAmount;\r\n            (pendingAmount, totalEndNum,totalEndBlock,reductNftBlock) = getNftReward(user, pool);\r\n            if (pendingAmount > 0) {\r\n                //\u53d1\u9001\u5956\u52b1\u4ee3\u5e01\r\n                safeDexTransfer(msg.sender, pendingAmount);\r\n                // update withdraw info\r\n                //\u66f4\u65b0\u7528\u6237\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n                userReward = userReward.add(pendingAmount);\r\n                //\u66f4\u65b0\u7528\u6237\u4fe1\u606f\u4e2d\u7528\u6237\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n                user.reward = user.reward.add(pendingAmount);\r\n                user.blockNums = user.blockNums.sub(totalEndBlock);\r\n                user.takeBlock = block.number;\r\n            }\r\n\r\n            if (totalEndNum > 0) {\r\n                user.amountInner = user.amountInner.sub(totalEndNum);\r\n                pool.totalAmount = pool.totalAmount.sub(totalEndNum);\r\n                //\u8bb0\u5f55\u5f53\u524d\u6263\u51cfNFT\u5757\u9ad8\r\n                user.reduceNFTBlock = block.number.sub(reductNftBlock);\r\n            }\r\n        }else{\r\n             user.reduceNFTBlock = block.number;\r\n             user.takeBlock = block.number;\r\n        }\r\n        \r\n        uint256 _tokenIdsLength = _tokenIds.length;\r\n        for (uint256 i; i < _tokenIdsLength; i++) {\r\n            uint256 _tokenId = _tokenIds[i];\r\n            pool.lpToken.safeTransferFrom(userAddress, destoryAddress, _tokenId);\r\n        }\r\n\r\n        pool.totalAmount = pool.totalAmount.add(_tokenIdsLength);\r\n        //\u66f4\u65b0\u7528\u6237\u8d28\u62bc\u591a\u5c11\u8d44\u4ea7\r\n        user.amount = user.amount.add(_tokenIdsLength);\r\n        user.amountInner = user.amountInner.add(_tokenIdsLength);\r\n        user.accDexPerShare = pool.accDexPerShare;\r\n        user.blockNums = user.blockNums.add(maxTakeBlock.mul(_tokenIdsLength));\r\n        poolTotalAmount = poolTotalAmount.add(_tokenIdsLength);\r\n        ISuperPrize isuperPrize = iSuperPrizes[index];\r\n        isuperPrize.deleteNftPools(_tokenIds);\r\n        emit Deposits(userAddress, index, _tokenIds);\r\n    }\r\n\r\n    function addSuperPrize(address _isuperPrize)\r\n        public\r\n        onlyOwner\r\n    {\r\n        iSuperPrizes.push(ISuperPrize(_isuperPrize));\r\n    }\r\n\r\n    function updateSuperPrize(uint256 index,address _isuperPrize)\r\n        public\r\n        onlyOwner\r\n    {\r\n        iSuperPrizes[index] = ISuperPrize(_isuperPrize);\r\n    }\r\n\r\n    //\u7528\u6237\u8d28\u62bcnft\u5e76\u53d1\u653e\u5956\u52b1\r\n    function depositDex(\r\n        uint256 _pid,\r\n        uint256 _tokenId,\r\n        address _user\r\n    ) private {\r\n        //\u83b7\u53d6\u77ff\u6c60\u4fe1\u606f\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        //\u83b7\u53d6\u77ff\u6c60\u7528\u6237\u4fe1\u606f\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        //\u66f4\u65b0\u77ff\u6c60\u5956\u52b1\u4fe1\u606f\r\n        updatePool(_pid);\r\n        if (user.amountInner > 0) {\r\n            uint256 totalEndNum;\r\n            uint256 totalEndBlock;\r\n            uint256 reductNftBlock;\r\n            uint256 pendingAmount;\r\n            (pendingAmount, totalEndNum,totalEndBlock,reductNftBlock) = getNftReward(user, pool);\r\n            if (pendingAmount > 0) {\r\n                //\u53d1\u9001\u5956\u52b1\u4ee3\u5e01\r\n                safeDexTransfer(msg.sender, pendingAmount);\r\n                // update withdraw info\r\n                //\u66f4\u65b0\u7528\u6237\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n                userReward = userReward.add(pendingAmount);\r\n                //\u66f4\u65b0\u7528\u6237\u4fe1\u606f\u4e2d\u7528\u6237\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n                user.reward = user.reward.add(pendingAmount);\r\n                user.blockNums = user.blockNums.sub(totalEndBlock);\r\n                user.takeBlock = block.number;\r\n            }\r\n\r\n            if (totalEndNum > 0) {\r\n                user.amountInner = user.amountInner.sub(totalEndNum);\r\n                pool.totalAmount = pool.totalAmount.sub(totalEndNum);\r\n                //\u8bb0\u5f55\u5f53\u524d\u6263\u51cfNFT\u5757\u9ad8\r\n                user.reduceNFTBlock = block.number.sub(reductNftBlock);\r\n            }\r\n        }else{\r\n             user.reduceNFTBlock = block.number;\r\n             user.takeBlock = block.number;\r\n        }\r\n\r\n        pool.lpToken.safeTransferFrom(_user, destoryAddress, _tokenId);\r\n        pool.totalAmount = pool.totalAmount.add(1);\r\n        //\u66f4\u65b0\u7528\u6237\u8d28\u62bc\u591a\u5c11\u8d44\u4ea7\r\n        user.amount = user.amount.add(1);\r\n        user.amountInner = user.amountInner.add(1);\r\n        user.blockNums = user.blockNums.add(maxTakeBlock);\r\n        poolTotalAmount = poolTotalAmount.add(1);\r\n         user.accDexPerShare = pool.accDexPerShare;\r\n        // //\u66f4\u65b0\u7528\u6237\u5df2\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n        // user.rewardDebt = user.rewardDebt.add(pool.accDexPerShare.div(1e12));\r\n        ISuperPrize isuperPrize = iSuperPrizes[_pid];\r\n        uint[] memory _tokenIds = new uint[](1);\r\n        _tokenIds[0] = _tokenId;\r\n        isuperPrize.deleteNftPools(_tokenIds);\r\n        emit Deposit(_user, _pid, _tokenId);\r\n    }\r\n\r\n    function getNftReward(UserInfo memory userInfo, PoolInfo memory _poolInfo)\r\n        internal\r\n        view\r\n        returns (uint256 _reward, uint256 _endNum,uint256 _endBlocks,uint256 reduceNFTBlock)\r\n    {   \r\n        if(userInfo.amountInner==0){\r\n            return (0,0,0,0);\r\n        }\r\n       \r\n        //\u9886\u53d6\u76f8\u5dee\u591a\u5c11\u4e2a\u5757\r\n        uint256 differBlocks = block.number - userInfo.takeBlock;\r\n        //\u6263\u51cf\u76f8\u5dee\u591a\u5c11\u4e2a\u5757\r\n        uint256 reduceNFTDifferBlock = block.number - userInfo.reduceNFTBlock;\r\n        //\u8ba1\u7b97\u5e73\u5747\u6bcf\u4e2aNFT\u5269\u4f59\u9ad8\u5ea6\r\n        uint256 nftAvgBlock = userInfo.blockNums.div(userInfo.amountInner);\r\n        //\u603b\u6d88\u8017\u7684\u5757\r\n        uint256 reduceNFTDifferBlockTotal = reduceNFTDifferBlock.mul(userInfo.amountInner);\r\n\r\n        if(reduceNFTDifferBlockTotal>=maxTakeBlock){\r\n            uint exceptNum = reduceNFTDifferBlockTotal % maxTakeBlock;\r\n            _endNum =  reduceNFTDifferBlockTotal.div(maxTakeBlock);\r\n            reduceNFTBlock = exceptNum.div(userInfo.amountInner);\r\n            if(_endNum>userInfo.amountInner){\r\n                _endNum = userInfo.amountInner;\r\n                reduceNFTBlock = 0;\r\n            }\r\n        }\r\n\r\n        //\u6263\u51cf\u591a\u5c11\u4e2a\u5757\r\n        _endBlocks = _endBlocks.add(differBlocks.mul(userInfo.amountInner));\r\n        if(_endBlocks>userInfo.blockNums){\r\n            _endBlocks = userInfo.blockNums;\r\n        }\r\n\r\n        _poolInfo.accDexPerShare = (_poolInfo.accDexPerShare - userInfo.accDexPerShare);\r\n        if(userInfo.blockNums.div(userInfo.amountInner)>=differBlocks){\r\n            _reward = _poolInfo\r\n                .accDexPerShare\r\n                .mul(userInfo.amountInner)\r\n                .div(1e12);\r\n        }else{\r\n             _poolInfo.accDexPerShare = _poolInfo.accDexPerShare\r\n             .mul((nftAvgBlock*1e12)/differBlocks)\r\n             .div(1e12);\r\n             _reward = _poolInfo.accDexPerShare.div(1e12).mul(userInfo.amountInner);\r\n        }\r\n        return (_reward, _endNum,_endBlocks,reduceNFTBlock);\r\n    }\r\n\r\n\r\n\r\n    //\u7528\u6237\u8d28\u62bcnft\u5e76\u53d1\u653e\u5956\u52b1\r\n    // Withdraw LP tokens from oecpool.\r\n    function withdraw(uint256 index) public notPause {\r\n        withdrawDex(index, msg.sender);\r\n    }\r\n\r\n    function getTimestamp() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    //\u53d6\u6d88\u8d28\u62bc\r\n    function withdrawDex(uint256 _pid, address _user) private {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        require(user.amount >= 1, \"withdrawDex: not good\");\r\n        //\u66f4\u65b0\u77ff\u6c60\u5956\u52b1\r\n        updatePool(_pid);\r\n       uint256 totalEndNum;\r\n            uint256 totalEndBlock;\r\n            uint256 reductNftBlock;\r\n            uint256 pendingAmount;\r\n            (pendingAmount, totalEndNum,totalEndBlock,reductNftBlock) = getNftReward(user, pool);\r\n            if (pendingAmount > 0) {\r\n                //\u53d1\u9001\u5956\u52b1\u4ee3\u5e01\r\n                safeDexTransfer(msg.sender, pendingAmount);\r\n                // update withdraw info\r\n                //\u66f4\u65b0\u7528\u6237\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n                userReward = userReward.add(pendingAmount);\r\n                //\u66f4\u65b0\u7528\u6237\u4fe1\u606f\u4e2d\u7528\u6237\u9886\u53d6\u5956\u52b1\u6570\u91cf\r\n                user.reward = user.reward.add(pendingAmount);\r\n                user.blockNums = user.blockNums.sub(totalEndBlock);\r\n                user.takeBlock = block.number;\r\n                user.accDexPerShare = pool.accDexPerShare;\r\n            }\r\n\r\n            if (totalEndNum > 0) {\r\n                user.amountInner = user.amountInner.sub(totalEndNum);\r\n                pool.totalAmount = pool.totalAmount.sub(totalEndNum);\r\n                //\u8bb0\u5f55\u5f53\u524d\u6263\u51cfNFT\u5757\u9ad8\r\n                user.reduceNFTBlock = block.number.sub(reductNftBlock);\r\n            }\r\n        emit Withdraw(_user, _pid, pendingAmount);\r\n    }\r\n\r\n    function balanceOf(address owner,uint _pid) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][owner];\r\n        return user.amount;\r\n    }\r\n\r\n    // Safe DEX transfer function, just in case if rounding error causes pool to not have enough DEXs.\r\n    function safeDexTransfer(address _to, uint256 _amount) internal returns(uint) {\r\n       uint256 dexBal = IERC20(dex).balanceOf(address(this));\r\n        uint256 amount = 0;\r\n        if (_amount > dexBal) {\r\n            IERC20(dex).transfer(_to, dexBal);\r\n            amount = dexBal;\r\n        } else {\r\n            IERC20(dex).transfer(_to, _amount);\r\n            amount = _amount;\r\n        }\r\n\r\n       //\u83b7\u53d6\u9080\u8bf7\u5173\u7cfb\r\n       address[] memory invAddresses = inviteContract.getParents(_to);\r\n       if(invAddresses.length==0){\r\n           return amount;\r\n       }\r\n\r\n       uint256 invReward = amount;\r\n        //\u5206\u5956\u52b1\r\n       for(uint8 index=0;index<invRewardNum;index++){\r\n          address parent = invAddresses[index];\r\n          if(parent==address(0)){\r\n              break;\r\n          }\r\n          invReward = invReward.mul(invRewardFee).div(1000);\r\n          //\u7ed9\u9080\u8bf7\u4eba\u8f6c\u5165\u5bf9\u5e94\u4ee3\u5e01\r\n          IERC20(dex).transfer(parent, invReward);\r\n          if(invAddresses.length - 1 == index){\r\n              break;\r\n          }\r\n       }\r\n      return amount;\r\n    }\r\n\r\n\r\n    //\u83b7\u53d6\u5956\u52b1\u4ee3\u5e01\u4f59\u989d\r\n    function getSecBalance() public view returns (uint256) {\r\n        return IERC20(dex).balanceOf(address(this));\r\n    }\r\n\r\n    modifier notPause() {\r\n        require(paused == false, \"Mining has been suspended\");\r\n        _;\r\n    }\r\n\r\n    // addresses not allowed to be represented to harvest\r\n    mapping(address => bool) public notRepresents;\r\n\r\n    function represent(bool _allow) public {\r\n        if (!_allow) {\r\n            notRepresents[msg.sender] = true;\r\n        } else if (notRepresents[msg.sender]) {\r\n            delete notRepresents[msg.sender];\r\n        }\r\n    }\r\n\r\n    function harvest() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            deposit(pid, 0);\r\n        }\r\n    }\r\n\r\n    //\u4e0d\u80fd\u6536\u83b7\u5730\u5740\r\n    function harvestOf(address account) public {\r\n        require(!isBadAddress(account), \"Illegal, rejected \");\r\n        require(!notRepresents[account], \"not allowed\");\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            depositDex(pid, 0, account);\r\n        }\r\n    }\r\n\r\n    function getMetashBalance() public view returns (uint256) {\r\n        return IERC20(dex).balanceOf(address(this));\r\n    }\r\n\r\n    function setMaxTakeBlock(uint256 _maxTakeBlock) public onlyOwner {\r\n        maxTakeBlock = _maxTakeBlock;\r\n    }\r\n\r\n    function updateDex(address _dex) public onlyOwner{\r\n        dex = _dex;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dexPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Deposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftid\",\"type\":\"uint256\"}],\"name\":\"destoryNft\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bad\",\"type\":\"address\"}],\"name\":\"addBadAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addLP\",\"type\":\"address\"}],\"name\":\"addMultLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_isuperPrize\",\"type\":\"address\"}],\"name\":\"addSuperPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bad\",\"type\":\"address\"}],\"name\":\"delBadAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlackListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getDexBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetashBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getMultLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultLPLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"harvestOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"iSuperPrizes\",\"outputs\":[{\"internalType\":\"contract ISuperPrize\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invRewardNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteContract\",\"outputs\":[{\"internalType\":\"contract IInvite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBadAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LP\",\"type\":\"address\"}],\"name\":\"isMultLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTakeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multLpChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multLpUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notRepresents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDexPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"represent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerBlock\",\"type\":\"uint256\"}],\"name\":\"setDexPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setHalvingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_invRewardFee\",\"type\":\"uint16\"}],\"name\":\"setInvRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_invRewardNum\",\"type\":\"uint8\"}],\"name\":\"setInvRewardNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviteContract\",\"type\":\"address\"}],\"name\":\"setInviteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTakeBlock\",\"type\":\"uint256\"}],\"name\":\"setMaxTakeBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multLpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multLpChef\",\"type\":\"address\"}],\"name\":\"setMultLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"updateDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_isuperPrize\",\"type\":\"address\"}],\"name\":\"updateSuperPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNums\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reduceNFTBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDexPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInner\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MasterChefNFTPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007c5446465731f54c11f4e8247be89dc7c9f50df000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e4d4b9fb9ac24b936824a9069624d59a8d78096df2dca4fd727b0363ba6628d9"}