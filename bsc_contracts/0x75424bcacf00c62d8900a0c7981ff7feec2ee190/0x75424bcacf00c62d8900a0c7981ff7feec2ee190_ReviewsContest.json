{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract ReviewsContest {\r\n    address private owner;\r\n    \r\n    mapping (string => bool) private _tempWinnerIdentifiers;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function playout(uint256 requiredWinnersCount, uint256[] memory ids, string[] memory identifiers) public {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        require(identifiers.length >= requiredWinnersCount, \"Participants count should be equal or greater than required winners count\");\r\n        require(requiredWinnersCount > 0 && identifiers.length > 0, \"Pariticipants and requried winners count should be greater than 0\");\r\n        require(ids.length == identifiers.length, \"Ids and identifiers should has equal length\");\r\n        \r\n        uint256 iterator = 0;\r\n        uint256 currentWinnersCount = 0;\r\n        bool[] memory winners = new bool[](identifiers.length);\r\n\r\n        // For clear _tempWinnerIdentifiers mappping\r\n        uint256[] memory winnerIndexes = new uint256[](requiredWinnersCount);\r\n        \r\n        while (currentWinnersCount < requiredWinnersCount) {\r\n            bytes memory encoded = abi.encodePacked(\r\n                ids,\r\n                currentWinnersCount,\r\n                iterator,\r\n                block.timestamp,\r\n                blockhash(block.number - 1),\r\n                block.coinbase);\r\n                \r\n            iterator++;\r\n            uint256 randomNumber = uint256(keccak256(encoded)) % identifiers.length;\r\n\r\n            string memory identifier = identifiers[randomNumber];\r\n            if (winners[randomNumber] || _tempWinnerIdentifiers[identifier])\r\n            {\r\n                continue;\r\n            }\r\n            \r\n            winnerIndexes[currentWinnersCount] = randomNumber;\r\n            winners[randomNumber] = true;\r\n            _tempWinnerIdentifiers[identifier] = true;\r\n\r\n            emit Win(ids[randomNumber], identifier);\r\n            currentWinnersCount++;\r\n        }\r\n\r\n        // Clear mapping for next playout\r\n        for (uint i = 0; i < winnerIndexes.length; i++) {\r\n            _tempWinnerIdentifiers[identifiers[winnerIndexes[i]]] = false;\r\n        }\r\n    }\r\n    \r\n    event Win(uint256 id, string identifier);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredWinnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"identifiers\",\"type\":\"string[]\"}],\"name\":\"playout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReviewsContest", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d6e59105174b6b123490a60fbd629316932e152f8b5e371488999e9f1667160a"}