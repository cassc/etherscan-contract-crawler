{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//SafeMathInt.sol\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n//SafeMathUint.sol\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _creator;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _creator = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(\r\n            owner() == _msgSender() || _creator == _msgSender(),\r\n            \"Ownable: caller is not the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () public {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// Interface of ERC20\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n//IERC20Metadata.sol\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n//ERC20.sol\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n//DividendPayingTokenInterface.sol\r\n/// @title Dividend-Paying Token Interface\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev An interface for a dividend-paying token contract.\r\ninterface DividendPayingTokenInterface {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\r\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\r\n    function withdrawDividend() external;\r\n\r\n    /// @dev This event MUST emit when ether is distributed to token holders.\r\n    /// @param from The address which sends ether to this contract.\r\n    /// @param weiAmount The amount of distributed ether in wei.\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n\r\n    /// @dev This event MUST emit when an address withdraws their dividend.\r\n    /// @param to The address which withdraws ether from this contract.\r\n    /// @param weiAmount The amount of withdrawn ether in wei.\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\n//DividendPayingTokenOptionalInterface.sol\r\n/// @title Dividend-Paying Token Optional Interface\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev OPTIONAL functions for a dividend-paying token contract.\r\ninterface DividendPayingTokenOptionalInterface {\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n//IterableMapping.sol\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key)\r\n        public\r\n        view\r\n        returns (int256)\r\n    {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(\r\n        Map storage map,\r\n        address key,\r\n        uint256 val\r\n    ) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//DividendPayingToken.sol\r\ncontract DividendPayingToken is\r\n    ERC20,\r\n    Ownable,\r\n    DividendPayingTokenInterface,\r\n    DividendPayingTokenOptionalInterface\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    address public ADA; //ADA\r\n\r\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of `magnitude`,\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 internal constant magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    // About dividendCorrection:\r\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n    //   `dividendOf(_user)` should not be changed,\r\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol,address  _ada)\r\n        public\r\n        ERC20(_name, _symbol)\r\n    {\r\n        ADA= _ada;\r\n    }\r\n\r\n    function distributeADADividends(uint256 amount) public onlyOwner {\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(msg.sender);\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            bool success = IERC20(ADA).transfer(user, _withdrawableDividend);\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256Safe() / magnitude;\r\n    }\r\n\r\n    /// @dev Internal function that transfer tokens from one address to another.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param from The address to transfer from.\r\n    /// @param to The address to transfer to.\r\n    /// @param value The amount to be transferred.\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare\r\n            .mul(value)\r\n            .toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\r\n            .add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\r\n            _magCorrection\r\n        );\r\n    }\r\n\r\n    /// @dev Internal function that mints tokens to an account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account that will receive the created tokens.\r\n    /// @param value The amount that will be created.\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    /// @dev Internal function that burns an amount of the token of a given account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account whose tokens will be burnt.\r\n    /// @param value The amount that will be burnt.\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract StakingDividendTracker is Ownable, DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n\r\n    constructor(string memory _name,string memory _symbol,address _ada)\r\n        public\r\n        DividendPayingToken(\r\n            _name,\r\n            _symbol,\r\n           _ada\r\n        )\r\n    {\r\n        claimWait = 5;\r\n        minimumTokenBalanceForDividends = 1 * (10**18); //must hold 1+ tokens\r\n    }\r\n\r\n    function _transfer(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal override {\r\n        require(false, \"Staking_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public override {\r\n        require(\r\n            false,\r\n            \"Staking_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main Safe_ADA contract.\"\r\n        );\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(\r\n            newClaimWait >= 3600 && newClaimWait <= 86400,\r\n            \"Staking_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\"\r\n        );\r\n        require(\r\n            newClaimWait != claimWait,\r\n            \"Staking_Dividend_Tracker: Cannot update claimWait to same value\"\r\n        );\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public\r\n        view\r\n        returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        )\r\n    {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(\r\n                    int256(lastProcessedIndex)\r\n                );\r\n            } else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\r\n                    lastProcessedIndex\r\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\r\n                    : 0;\r\n\r\n                iterationsUntilProcessed = index.add(\r\n                    int256(processesUntilEndOfArray)\r\n                );\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\r\n            ? nextClaimTime.sub(block.timestamp)\r\n            : 0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        if (index >= tokenHoldersMap.size()) {\r\n            return (\r\n                0x0000000000000000000000000000000000000000,\r\n                -1,\r\n                -1,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if (lastClaimTime > block.timestamp) {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if (newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        } else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n\r\n        processAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (canAutoClaim(lastClaimTimes[account])) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    // Withdraw reward tokens. EMERGENCY ONLY.\r\n    function _emergencyWithdrawDivident() public onlyOwner {\r\n        IERC20(ADA).transfer(msg.sender, IERC20(ADA).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ncontract StackingContract is Ownable, Pausable{\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    StakingDividendTracker public dividendTracker;\r\n    StakingDividendTracker public rewardDividentTracker;\r\n    IERC20 public stakingToken; // staking token\r\n    uint256 public totalStaked; // how many token has been staked\r\n    IERC20 public RewardToken; //Native Token\r\n    address public ADA = 0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47;\r\n    address public SOL = 0x570A5D26f7765Ecb712C0924E4De545B89fD43dF;\r\n    \r\n\r\n    uint256 public REWARD_PER_BLOCK;\r\n\r\n    uint256 public lastRewardBlock;\r\n    uint256 public accRewardPerShare;\r\n\r\n    // struct which will define the user data structure\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n    // user mappimg which saves the user data\r\n    mapping(address => UserInfo) public _user;\r\n\r\n    //here we will give the staking token address\r\n    constructor(address _stakingToken, address _rewardToken,uint256 _rewardPerBlock) public{\r\n     dividendTracker = new StakingDividendTracker(\r\n         \"Staking_ADA_Dividen_Tracker\",\r\n            \"Staking_ADA_Dividend_Tracker\",\r\n         ADA);\r\n     rewardDividentTracker= new StakingDividendTracker(\r\n     \"Staking_SOL_Dividen_Tracker\",\r\n            \"Staking_SOL_Dividend_Tracker\",\r\n     SOL);\r\n        stakingToken = IERC20(_stakingToken);\r\n        RewardToken = IERC20(_rewardToken);\r\n        REWARD_PER_BLOCK= _rewardPerBlock;\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n   // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n        \r\n            return _to.sub(_from);\r\n        \r\n    }\r\n\r\n    function updatedRewards() private {\r\n      uint256 stakingBalance = stakingToken.balanceOf(address(this));\r\n      if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (stakingBalance == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(lastRewardBlock, block.number);\r\n        uint256 reward = multiplier.mul(REWARD_PER_BLOCK);\r\n        accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(stakingBalance));\r\n        lastRewardBlock = block.number;\r\n\r\n    }\r\nfunction currentBlock () public view returns (uint) {\r\n\r\nreturn block.number;\r\n}\r\n    function pendingReward(address _auser) public view returns (uint256 ,uint256,uint256) {\r\n         UserInfo storage user = _user[_auser];\r\n\r\n\r\n         uint256 stakingSupply = stakingToken.balanceOf(address(this));\r\n         uint256 rewardPerShare = accRewardPerShare;\r\n        if ( block.number > lastRewardBlock && stakingSupply != 0) {\r\n            uint256 multiplier = getMultiplier(lastRewardBlock, block.number);\r\n             uint256 reward = multiplier.mul(REWARD_PER_BLOCK);\r\n            rewardPerShare = rewardPerShare.add(reward.mul(1e12).div(stakingSupply));\r\n        }\r\n        return (user.amount.mul(rewardPerShare).div(1e12).sub(user.rewardDebt),\r\n        dividendTracker.withdrawableDividendOf(_auser),\r\n        rewardDividentTracker.withdrawableDividendOf(_auser));\r\n        \r\n        }\r\n\r\n\r\n    //fun to call when user is staking\r\n    function stake(uint256 _amount) public whenNotPaused {\r\n        require(_amount > 0, \"amount should be greater than zero\");\r\n        require(_user[msg.sender].amount.add(_amount) < 200000000000*(1e18),\"max stake amount exeeds\");\r\n        claimReward();\r\n        totalStaked = totalStaked.add( _amount);\r\n        _user[msg.sender].amount = _user[msg.sender].amount.add(_amount);\r\n        _user[msg.sender].rewardDebt = _user[msg.sender].amount.mul(accRewardPerShare).div(1e12);\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n        dividendTracker.setBalance(payable(msg.sender), _user[msg.sender].amount);\r\n        rewardDividentTracker.setBalance(payable(msg.sender), _user[msg.sender].amount);\r\n        updatedRewards();\r\n    }\r\n    \r\n    function claimReward() public whenNotPaused {\r\n        UserInfo storage user = _user[msg.sender];\r\n        if(user.amount>0){\r\n        updatedRewards();\r\n        (uint256  reward ,,) = pendingReward(msg.sender);\r\n        RewardToken.transfer(msg.sender, reward);\r\n        // updated rewarddebt\r\n        _user[msg.sender].rewardDebt = _user[msg.sender].amount.mul(accRewardPerShare).div(1e12);\r\n\r\n       // handling ADA transfer \r\n        uint256 dividends = IERC20(ADA).balanceOf(address(this));\r\n        bool success = IERC20(ADA).transfer(\r\n            address(dividendTracker),\r\n            dividends\r\n        );\r\n\r\n        if (success) {\r\n            dividendTracker.distributeADADividends(dividends);\r\n        }\r\n\r\n        // handling sol transfer \r\n        uint256 dividendsSOL = IERC20(SOL).balanceOf(address(this));\r\n        bool successSOL = IERC20(SOL).transfer(\r\n            address(rewardDividentTracker),\r\n            dividendsSOL\r\n        );\r\n\r\n        if (successSOL) {\r\n            rewardDividentTracker.distributeADADividends(dividendsSOL);\r\n        }\r\n        // claim divident of user.\r\n        dividendTracker.processAccount(msg.sender, false);\r\n        rewardDividentTracker.processAccount(msg.sender, false);\r\n        }\r\n    }\r\n\r\n    // fun to call when user withdraw his staked token \r\n    function withdraw(uint256 _amount) public whenNotPaused {\r\n        require(_amount <= _user[msg.sender].amount,\"Insufficient amount\");\r\n        stakingToken.transfer(msg.sender, _amount);\r\n        // claim the users reward\r\n        claimReward();\r\n        totalStaked = totalStaked.sub(_amount);\r\n        _user[msg.sender].amount = _user[msg.sender].amount.sub(_amount);\r\n        updatedRewards();\r\n        _user[msg.sender].rewardDebt = _user[msg.sender].amount.mul(accRewardPerShare).div(1e12);\r\n        \r\n        // set dividentTrackers to tract new balance of users.\r\n        dividendTracker.setBalance(payable(msg.sender), _user[msg.sender].amount);\r\n        rewardDividentTracker.setBalance(payable(msg.sender), _user[msg.sender].amount);\r\n    }\r\n\r\n\r\n   // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() public {\r\n        UserInfo storage user = _user[msg.sender];\r\n        stakingToken.transfer(address(msg.sender), user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n   // Withdraw reward tokens. EMERGENCY ONLY.\r\n    function emergencyWithdrawReward() public onlyOwner {\r\n        RewardToken.transfer(msg.sender, RewardToken.balanceOf(address(this)));\r\n        dividendTracker._emergencyWithdrawDivident();\r\n        rewardDividentTracker._emergencyWithdrawDivident();\r\n        IERC20(ADA).transfer(msg.sender, IERC20(ADA).balanceOf(address(this)));\r\n        IERC20(SOL).transfer(msg.sender, IERC20(SOL).balanceOf(address(this)));\r\n    }\r\n\r\n    // update the reward per block\r\n    function setBlockReward(uint _tokens) public onlyOwner {\r\n        REWARD_PER_BLOCK = _tokens;\r\n    }\r\n    function setToken(address _token) public onlyOwner {\r\n        stakingToken = IERC20(_token);\r\n    }\r\n\r\n    function setRewardToken(address _rewardToken) public onlyOwner {\r\n        RewardToken = IERC20(_rewardToken);\r\n    }\r\n\r\n    // to withdraw the native token from the contract \r\n    function getNativeToken() external onlyOwner {\r\n        uint256  balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n    // only owner can pause the contract \r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n    //only ouner can unpause the contract\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    event Received(address, uint);\r\n    // to handle the native token \r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract StakingDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auser\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDividentTracker\",\"outputs\":[{\"internalType\":\"contract StakingDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StackingContract", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000651a89fed302227d41425235f8e934502fb94c480000000000000000000000007b86f5ca09dc00502e342b0fef5117e1c32222ce0000000000000000000000000000000000000000000000015af1d78b58c40000", "EVMVersion": "Default", "Library": "IterableMapping:844fee467da1aff02f62858dfd4dc5ebce7e2048", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cffad38aa6c19476638de2034a08f09d8295643bb9dd7d2eae09311b802b0815"}