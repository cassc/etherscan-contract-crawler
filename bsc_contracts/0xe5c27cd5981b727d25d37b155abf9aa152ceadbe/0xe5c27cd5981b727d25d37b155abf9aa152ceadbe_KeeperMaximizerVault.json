{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/maximizer/KeeperMaximizerVaultApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/*\\r\\n  ______                     ______                                 \\r\\n /      \\\\                   /      \\\\                                \\r\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\r\\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\r\\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\r\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\r\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\r\\n\\r\\n * App:             https://apeswap.finance\\r\\n * Medium:          https://ape-swap.medium.com\\r\\n * Twitter:         https://twitter.com/ape_swap\\r\\n * Discord:         https://discord.com/invite/apeswap\\r\\n * Telegram:        https://t.me/ape_swap\\r\\n * Announcements:   https://t.me/ape_swap_news\\r\\n * GitHub:          https://github.com/ApeSwapFinance\\r\\n */\\r\\n\\r\\nimport \\\"./MaximizerVaultApe.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\n\\r\\n/// @title Keeper Maximizer VaultApe\\r\\n/// @author ApeSwapFinance\\r\\n/// @notice Chainlink keeper compatible MaximizerVaultApe\\r\\ncontract KeeperMaximizerVaultApe is\\r\\n    MaximizerVaultApe,\\r\\n    KeeperCompatibleInterface\\r\\n{\\r\\n    address public keeper;\\r\\n\\r\\n    constructor(\\r\\n        address _keeper,\\r\\n        address _owner,\\r\\n        address _bananaVault,\\r\\n        uint256 _maxDelay,\\r\\n        Settings memory _settings\\r\\n    ) MaximizerVaultApe(_owner, _bananaVault, _maxDelay, _settings) {\\r\\n        keeper = _keeper;\\r\\n    }\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == keeper, \\\"KeeperMaximizerVaultApe: Not keeper\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Chainlink keeper checkUpkeep\\r\\n    function checkUpkeep(bytes memory)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory performData)\\r\\n    {\\r\\n        (upkeepNeeded, performData) = checkVaultCompound();\\r\\n\\r\\n        if (upkeepNeeded) {\\r\\n            return (upkeepNeeded, performData);\\r\\n        }\\r\\n\\r\\n        return (false, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Chainlink keeper performUpkeep\\r\\n    /// @param performData response from checkUpkeep\\r\\n    function performUpkeep(bytes memory performData)\\r\\n        external\\r\\n        override\\r\\n        onlyKeeper\\r\\n    {\\r\\n        (\\r\\n            address[] memory _vaults,\\r\\n            uint256[] memory _minPlatformOutputs,\\r\\n            uint256[] memory _minKeeperOutputs,\\r\\n            uint256[] memory _minBurnOutputs,\\r\\n            uint256[] memory _minBananaOutputs\\r\\n        ) = abi.decode(\\r\\n                performData,\\r\\n                (address[], uint256[], uint256[], uint256[], uint256[])\\r\\n            );\\r\\n\\r\\n        uint256 vaultLength = _vaults.length;\\r\\n        require(vaultLength > 0, \\\"KeeperMaximizerVaultApe: No vaults\\\");\\r\\n\\r\\n        for (uint256 index = 0; index < vaultLength; ++index) {\\r\\n            address vault = _vaults[index];\\r\\n            (, uint256 keeperOutput, , ) = _getExpectedOutputs(vault);\\r\\n\\r\\n            require(\\r\\n                (block.timestamp >=\\r\\n                    vaultInfos[vault].lastCompound + maxDelay) ||\\r\\n                    (keeperOutput >= minKeeperFee),\\r\\n                \\\"KeeperMaximizerVaultApe: Upkeep validation\\\"\\r\\n            );\\r\\n\\r\\n            _compoundVault(\\r\\n                _vaults[index],\\r\\n                _minPlatformOutputs[index],\\r\\n                _minKeeperOutputs[index],\\r\\n                _minBurnOutputs[index],\\r\\n                _minBananaOutputs[index],\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n\\r\\n        BANANA_VAULT.earn();\\r\\n    }\\r\\n\\r\\n    function setKeeper(address _keeper) external onlyOwner {\\r\\n        keeper = _keeper;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/maximizer/MaximizerVaultApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/*\\r\\n  ______                     ______                                 \\r\\n /      \\\\                   /      \\\\                                \\r\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\r\\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\r\\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\r\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\r\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\r\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n         | \u2593\u2593                                             | \u2593\u2593      \\r\\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\r\\n\\r\\n * App:             https://apeswap.finance\\r\\n * Medium:          https://ape-swap.medium.com\\r\\n * Twitter:         https://twitter.com/ape_swap\\r\\n * Discord:         https://discord.com/invite/apeswap\\r\\n * Telegram:        https://t.me/ape_swap\\r\\n * Announcements:   https://t.me/ape_swap_news\\r\\n * GitHub:          https://github.com/ApeSwapFinance\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@apeswap.finance/contracts/contracts/utils/Sweeper.sol\\\";\\r\\n\\r\\nimport \\\"../libs/IMaximizerVaultApe.sol\\\";\\r\\nimport \\\"../libs/IStrategyMaximizerMasterApe.sol\\\";\\r\\nimport \\\"../libs/IBananaVault.sol\\\";\\r\\n\\r\\n/// @title Maximizer VaultApe\\r\\n/// @author ApeSwapFinance\\r\\n/// @notice Interaction contract for all maximizer vault strategies\\r\\ncontract MaximizerVaultApe is\\r\\n    ReentrancyGuard,\\r\\n    IMaximizerVaultApe,\\r\\n    Ownable,\\r\\n    Sweeper\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct VaultInfo {\\r\\n        uint256 lastCompound;\\r\\n        bool enabled;\\r\\n    }\\r\\n\\r\\n    struct CompoundInfo {\\r\\n        address[] vaults;\\r\\n        uint256[] minPlatformOutputs;\\r\\n        uint256[] minKeeperOutputs;\\r\\n        uint256[] minBurnOutputs;\\r\\n        uint256[] minBananaOutputs;\\r\\n    }\\r\\n\\r\\n    Settings public settings;\\r\\n\\r\\n    address[] public override vaults;\\r\\n    mapping(address => VaultInfo) public vaultInfos;\\r\\n    IBananaVault public immutable BANANA_VAULT;\\r\\n\\r\\n    uint256 public maxDelay;\\r\\n    uint256 public minKeeperFee;\\r\\n    uint256 public slippageFactor;\\r\\n    uint256 public constant SLIPPAGE_FACTOR_DENOMINATOR = 10000;\\r\\n    uint16 public maxVaults;\\r\\n\\r\\n    // Fee upper limits\\r\\n    uint256 public constant override KEEPER_FEE_UL = 1000; // 10%\\r\\n    uint256 public constant override PLATFORM_FEE_UL = 1000; // 10%\\r\\n    uint256 public constant override BUYBACK_RATE_UL = 1000; // 10%\\r\\n    uint256 public constant override WITHDRAW_FEE_UL = 1000; // 10%\\r\\n    uint256 public constant override WITHDRAW_REWARDS_FEE_UL = 1000; // 10%\\r\\n    uint256 public constant override WITHDRAW_FEE_PERIOD_UL = 2**255; // MAX_INT / 2\\r\\n\\r\\n    event Compound(address indexed vault, uint256 timestamp);\\r\\n    event ChangedTreasury(address _old, address _new);\\r\\n    event ChangedPlatform(address _old, address _new);\\r\\n\\r\\n    event ChangedKeeperFee(uint256 _old, uint256 _new);\\r\\n    event ChangedPlatformFee(uint256 _old, uint256 _new);\\r\\n    event ChangedBuyBackRate(uint256 _old, uint256 _new);\\r\\n    event ChangedWithdrawFee(uint256 _old, uint256 _new);\\r\\n    event ChangedWithdrawFeePeriod(uint256 _old, uint256 _new);\\r\\n    event ChangedWithdrawRewardsFee(uint256 _old, uint256 _new);\\r\\n    event VaultAdded(address _vaultAddress);\\r\\n    event VaultEnabled(uint256 _vaultPid, address _vaultAddress);\\r\\n    event VaultDisabled(uint256 _vaultPid, address _vaultAddress);\\r\\n    event ChangedMaxDelay(uint256 _new);\\r\\n    event ChangedMinKeeperFee(uint256 _new);\\r\\n    event ChangedSlippageFactor(uint256 _new);\\r\\n    event ChangedMaxVaults(uint256 _new);\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        address _bananaVault,\\r\\n        uint256 _maxDelay,\\r\\n        Settings memory _settings\\r\\n    ) Ownable() Sweeper(new address[](0), true) {\\r\\n        transferOwnership(_owner);\\r\\n        BANANA_VAULT = IBananaVault(_bananaVault);\\r\\n\\r\\n        maxDelay = _maxDelay;\\r\\n        minKeeperFee = 10000000000000000;\\r\\n        slippageFactor = 9500;\\r\\n        maxVaults = 2;\\r\\n\\r\\n        settings = _settings;\\r\\n    }\\r\\n\\r\\n    function getSettings() external view override returns (Settings memory) {\\r\\n        return settings;\\r\\n    }\\r\\n\\r\\n    /// @notice Chainlink keeper - Check what vaults need compounding\\r\\n    /// @return upkeepNeeded compounded necessary\\r\\n    /// @return performData data needed to do compound/performUpkeep\\r\\n    function checkVaultCompound()\\r\\n        public\\r\\n        view\\r\\n        returns (bool upkeepNeeded, bytes memory performData)\\r\\n    {\\r\\n        uint256 totalLength = vaults.length;\\r\\n        uint256 actualLength = 0;\\r\\n\\r\\n        CompoundInfo memory tempCompoundInfo = CompoundInfo(\\r\\n            new address[](totalLength),\\r\\n            new uint256[](totalLength),\\r\\n            new uint256[](totalLength),\\r\\n            new uint256[](totalLength),\\r\\n            new uint256[](totalLength)\\r\\n        );\\r\\n\\r\\n        for (uint16 index = 0; index < totalLength; ++index) {\\r\\n            if (maxVaults == actualLength) {\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            address vault = vaults[index];\\r\\n            VaultInfo memory vaultInfo = vaultInfos[vault];\\r\\n\\r\\n            if (\\r\\n                !vaultInfo.enabled ||\\r\\n                IStrategyMaximizerMasterApe(vault).totalStake() == 0\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            (\\r\\n                uint256 platformOutput,\\r\\n                uint256 keeperOutput,\\r\\n                uint256 burnOutput,\\r\\n                uint256 bananaOutput\\r\\n            ) = _getExpectedOutputs(vault);\\r\\n\\r\\n            if (\\r\\n                block.timestamp >= vaultInfo.lastCompound + maxDelay ||\\r\\n                keeperOutput >= minKeeperFee\\r\\n            ) {\\r\\n                tempCompoundInfo.vaults[actualLength] = vault;\\r\\n                tempCompoundInfo.minPlatformOutputs[\\r\\n                    actualLength\\r\\n                ] = platformOutput.mul(slippageFactor).div(\\r\\n                    SLIPPAGE_FACTOR_DENOMINATOR\\r\\n                );\\r\\n                tempCompoundInfo.minKeeperOutputs[actualLength] = keeperOutput\\r\\n                    .mul(slippageFactor)\\r\\n                    .div(SLIPPAGE_FACTOR_DENOMINATOR);\\r\\n                tempCompoundInfo.minBurnOutputs[actualLength] = burnOutput\\r\\n                    .mul(slippageFactor)\\r\\n                    .div(SLIPPAGE_FACTOR_DENOMINATOR);\\r\\n                tempCompoundInfo.minBananaOutputs[actualLength] = bananaOutput\\r\\n                    .mul(slippageFactor)\\r\\n                    .div(SLIPPAGE_FACTOR_DENOMINATOR);\\r\\n\\r\\n                actualLength = actualLength + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (actualLength > 0) {\\r\\n            CompoundInfo memory compoundInfo = CompoundInfo(\\r\\n                new address[](actualLength),\\r\\n                new uint256[](actualLength),\\r\\n                new uint256[](actualLength),\\r\\n                new uint256[](actualLength),\\r\\n                new uint256[](actualLength)\\r\\n            );\\r\\n\\r\\n            for (uint16 index = 0; index < actualLength; ++index) {\\r\\n                compoundInfo.vaults[index] = tempCompoundInfo.vaults[index];\\r\\n                compoundInfo.minPlatformOutputs[index] = tempCompoundInfo\\r\\n                    .minPlatformOutputs[index];\\r\\n                compoundInfo.minKeeperOutputs[index] = tempCompoundInfo\\r\\n                    .minKeeperOutputs[index];\\r\\n                compoundInfo.minBurnOutputs[index] = tempCompoundInfo\\r\\n                    .minBurnOutputs[index];\\r\\n                compoundInfo.minBananaOutputs[index] = tempCompoundInfo\\r\\n                    .minBananaOutputs[index];\\r\\n            }\\r\\n\\r\\n            return (\\r\\n                true,\\r\\n                abi.encode(\\r\\n                    compoundInfo.vaults,\\r\\n                    compoundInfo.minPlatformOutputs,\\r\\n                    compoundInfo.minKeeperOutputs,\\r\\n                    compoundInfo.minBurnOutputs,\\r\\n                    compoundInfo.minBananaOutputs\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return (false, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Earn on ALL vaults in this contract\\r\\n    function earnAll() external override {\\r\\n        for (uint256 index = 0; index < vaults.length; index++) {\\r\\n            _earn(index, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Earn on a batch of vaults in this contract\\r\\n    /// @param _pids Array of pids to earn on\\r\\n    function earnSome(uint256[] calldata _pids) external override {\\r\\n        for (uint256 index = 0; index < _pids.length; index++) {\\r\\n            _earn(_pids[index], false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Earn on a single vault based on pid\\r\\n    /// @param _pid The pid of the vault\\r\\n    function earn(uint256 _pid) external {\\r\\n        _earn(_pid, true);\\r\\n    }\\r\\n\\r\\n    function _earn(uint256 _pid, bool _revert) private {\\r\\n        if (_pid >= vaults.length) {\\r\\n            if (_revert) {\\r\\n                revert(\\\"vault pid out of bounds\\\");\\r\\n            } else {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        address vaultAddress = vaults[_pid];\\r\\n        VaultInfo memory vaultInfo = vaultInfos[vaultAddress];\\r\\n\\r\\n        uint256 totalStake = IStrategyMaximizerMasterApe(vaultAddress)\\r\\n            .totalStake();\\r\\n        // Check if vault is enabled and has stake\\r\\n        if (vaultInfo.enabled && totalStake > 0) {\\r\\n            // Earn if vault is enabled\\r\\n            (\\r\\n                uint256 platformOutput,\\r\\n                uint256 keeperOutput,\\r\\n                uint256 burnOutput,\\r\\n                uint256 bananaOutput\\r\\n            ) = _getExpectedOutputs(vaultAddress);\\r\\n\\r\\n            platformOutput = platformOutput.mul(slippageFactor).div(\\r\\n                SLIPPAGE_FACTOR_DENOMINATOR\\r\\n            );\\r\\n            keeperOutput = keeperOutput.mul(slippageFactor).div(\\r\\n                SLIPPAGE_FACTOR_DENOMINATOR\\r\\n            );\\r\\n            burnOutput = burnOutput.mul(slippageFactor).div(\\r\\n                SLIPPAGE_FACTOR_DENOMINATOR\\r\\n            );\\r\\n            bananaOutput = bananaOutput.mul(slippageFactor).div(\\r\\n                SLIPPAGE_FACTOR_DENOMINATOR\\r\\n            );\\r\\n\\r\\n            return\\r\\n                _compoundVault(\\r\\n                    vaultAddress,\\r\\n                    platformOutput,\\r\\n                    keeperOutput,\\r\\n                    burnOutput,\\r\\n                    bananaOutput,\\r\\n                    false\\r\\n                );\\r\\n        } else {\\r\\n            if (_revert) {\\r\\n                revert(\\\"MaximizerVaultApe: vault is disabled\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        BANANA_VAULT.earn();\\r\\n    }\\r\\n\\r\\n    function _compoundVault(\\r\\n        address _vault,\\r\\n        uint256 _minPlatformOutput,\\r\\n        uint256 _minKeeperOutput,\\r\\n        uint256 _minBurnOutput,\\r\\n        uint256 _minBananaOutput,\\r\\n        bool _takeKeeperFee\\r\\n    ) internal {\\r\\n        IStrategyMaximizerMasterApe(_vault).earn(\\r\\n            _minPlatformOutput,\\r\\n            _minKeeperOutput,\\r\\n            _minBurnOutput,\\r\\n            _minBananaOutput,\\r\\n            _takeKeeperFee\\r\\n        );\\r\\n\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        vaultInfos[_vault].lastCompound = timestamp;\\r\\n\\r\\n        emit Compound(_vault, timestamp);\\r\\n    }\\r\\n\\r\\n    function _getExpectedOutputs(address _vault)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 platformOutput,\\r\\n            uint256 keeperOutput,\\r\\n            uint256 burnOutput,\\r\\n            uint256 bananaOutput\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            platformOutput,\\r\\n            keeperOutput,\\r\\n            burnOutput,\\r\\n            bananaOutput\\r\\n        ) = IStrategyMaximizerMasterApe(_vault).getExpectedOutputs();\\r\\n    }\\r\\n\\r\\n    /// @notice Get amount of vaults\\r\\n    /// @return amount of vaults\\r\\n    function vaultsLength() external view override returns (uint256) {\\r\\n        return vaults.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Get balance of user in specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _user user address\\r\\n    /// @return stake\\r\\n    /// @return banana\\r\\n    /// @return autoBananaShares\\r\\n    function balanceOf(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 stake,\\r\\n            uint256 banana,\\r\\n            uint256 autoBananaShares\\r\\n        )\\r\\n    {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        (stake, banana, autoBananaShares) = strat.balanceOf(_user);\\r\\n    }\\r\\n\\r\\n    /// @notice Get user info of a specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _user user address\\r\\n    /// @return stake\\r\\n    /// @return autoBananaShares\\r\\n    /// @return rewardDebt\\r\\n    /// @return lastDepositedTime\\r\\n    function userInfo(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 stake,\\r\\n            uint256 autoBananaShares,\\r\\n            uint256 rewardDebt,\\r\\n            uint256 lastDepositedTime\\r\\n        )\\r\\n    {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        (stake, autoBananaShares, rewardDebt, lastDepositedTime) = strat\\r\\n            .userInfo(_user);\\r\\n    }\\r\\n\\r\\n    /// @notice Get staked want tokens of a specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _user user address\\r\\n    /// @return amount of staked tokens in farm\\r\\n    function stakedWantTokens(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        (uint256 stake, , , ) = strat.userInfo(_user);\\r\\n        return stake;\\r\\n    }\\r\\n\\r\\n    /// @notice Get shares per staked token of a specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @return accumulated shares per staked token\\r\\n    function accSharesPerStakedToken(uint256 _pid)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        return strat.accSharesPerStakedToken();\\r\\n    }\\r\\n\\r\\n    /// @notice User deposit for specific vault for other user\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _user user address depositing for\\r\\n    /// @param _wantAmt amount of tokens to deposit\\r\\n    function depositTo(\\r\\n        uint256 _pid,\\r\\n        address _user,\\r\\n        uint256 _wantAmt\\r\\n    ) external override nonReentrant {\\r\\n        _depositTo(_pid, _user, _wantAmt);\\r\\n    }\\r\\n\\r\\n    /// @notice User deposit for specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _wantAmt amount of tokens to deposit\\r\\n    function deposit(uint256 _pid, uint256 _wantAmt)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        _depositTo(_pid, msg.sender, _wantAmt);\\r\\n    }\\r\\n\\r\\n    function _depositTo(\\r\\n        uint256 _pid,\\r\\n        address _user,\\r\\n        uint256 _wantAmt\\r\\n    ) internal {\\r\\n        address vaultAddress = vaults[_pid];\\r\\n        VaultInfo storage vaultInfo = vaultInfos[vaultAddress];\\r\\n        require(vaultInfo.enabled, \\\"MaximizerVaultApe: vault is disabled\\\");\\r\\n\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaultAddress\\r\\n        );\\r\\n        IERC20 wantToken = IERC20(strat.STAKE_TOKEN_ADDRESS());\\r\\n        uint256 beforeWantToken = wantToken.balanceOf(address(strat));\\r\\n        // The vault will be compounded on each deposit\\r\\n        vaultInfo.lastCompound = block.timestamp;\\r\\n        wantToken.safeTransferFrom(msg.sender, address(strat), _wantAmt);\\r\\n        uint256 afterWantToken = wantToken.balanceOf(address(strat));\\r\\n        // account for reflect fees\\r\\n        strat.deposit(_user, afterWantToken - beforeWantToken);\\r\\n    }\\r\\n\\r\\n    /// @notice User withdraw for specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _wantAmt amount of tokens to withdraw\\r\\n    function withdraw(uint256 _pid, uint256 _wantAmt)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        _withdraw(_pid, _wantAmt);\\r\\n    }\\r\\n\\r\\n    /// @notice User withdraw all for specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    function withdrawAll(uint256 _pid) external override nonReentrant {\\r\\n        _withdraw(_pid, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @dev Providing a private withdraw as nonReentrant functions cannot call each other\\r\\n    function _withdraw(uint256 _pid, uint256 _wantAmt) private {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        strat.withdraw(msg.sender, _wantAmt);\\r\\n    }\\r\\n\\r\\n    /// @notice User harvest rewards for specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    /// @param _wantAmt amount of reward tokens to claim\\r\\n    function harvest(uint256 _pid, uint256 _wantAmt)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        strat.claimRewards(msg.sender, _wantAmt);\\r\\n    }\\r\\n\\r\\n    /// @notice User harvest all rewards for specific vault\\r\\n    /// @param _pid pid of vault\\r\\n    function harvestAll(uint256 _pid) external override nonReentrant {\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaults[_pid]\\r\\n        );\\r\\n        strat.claimRewards(msg.sender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    // ===== onlyOwner functions =====\\r\\n\\r\\n    /// @notice Add a new vault address\\r\\n    /// @param _vault vault address to add\\r\\n    /// @dev Only callable by the contract owner\\r\\n    function addVault(address _vault) public override onlyOwner {\\r\\n        require(\\r\\n            vaultInfos[_vault].lastCompound == 0,\\r\\n            \\\"MaximizerVaultApe: addVault: Vault already exists\\\"\\r\\n        );\\r\\n        // Verify that this strategy is assigned to this vault\\r\\n        require(\\r\\n            address(IStrategyMaximizerMasterApe(_vault).vaultApe()) ==\\r\\n                address(this),\\r\\n            \\\"strategy vault ape not set to this address\\\"\\r\\n        );\\r\\n        vaultInfos[_vault] = VaultInfo(block.timestamp, true);\\r\\n        // Whitelist vault address on BANANA Vault\\r\\n        bytes32 DEPOSIT_ROLE = BANANA_VAULT.DEPOSIT_ROLE();\\r\\n        BANANA_VAULT.grantRole(DEPOSIT_ROLE, _vault);\\r\\n\\r\\n        vaults.push(_vault);\\r\\n\\r\\n        emit VaultAdded(_vault);\\r\\n    }\\r\\n\\r\\n    /// @notice Add new vaults\\r\\n    /// @param _vaults vault addresses to add\\r\\n    /// @dev Only callable by the contract owner\\r\\n    function addVaults(address[] calldata _vaults) external onlyOwner {\\r\\n        for (uint256 index = 0; index < _vaults.length; ++index) {\\r\\n            addVault(_vaults[index]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enableVault(uint256 _vaultPid) external onlyOwner {\\r\\n        address vaultAddress = vaults[_vaultPid];\\r\\n        vaultInfos[vaultAddress].enabled = true;\\r\\n        emit VaultEnabled(_vaultPid, vaultAddress);\\r\\n    }\\r\\n\\r\\n    function disableVault(uint256 _vaultPid) public onlyOwner {\\r\\n        address vaultAddress = vaults[_vaultPid];\\r\\n        vaultInfos[vaultAddress].enabled = false;\\r\\n        emit VaultDisabled(_vaultPid, vaultAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Call this function to disable a vault by pid and pull staked tokens out into strategy for users to withdraw from\\r\\n    /// @param _vaultPid ID of the vault to emergencyWithdraw from\\r\\n    function emergencyVaultWithdraw(uint256 _vaultPid) external onlyOwner {\\r\\n        address vaultAddress = vaults[_vaultPid];\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaultAddress\\r\\n        );\\r\\n        strat.emergencyVaultWithdraw();\\r\\n        disableVault(_vaultPid);\\r\\n        emit VaultDisabled(_vaultPid, vaultAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Call this function to empty out the BANANA vault rewards for a specific strategy if there is an emergency\\r\\n    /// @param _vaultPid ID of the vault to emergencyWithdraw from\\r\\n    /// @param _sendBananaTo Address to send BANANA to for the passed _vaultPid\\r\\n    function emergencyBananaVaultWithdraw(\\r\\n        uint256 _vaultPid,\\r\\n        address _sendBananaTo\\r\\n    ) external onlyOwner {\\r\\n        address vaultAddress = vaults[_vaultPid];\\r\\n        IStrategyMaximizerMasterApe strat = IStrategyMaximizerMasterApe(\\r\\n            vaultAddress\\r\\n        );\\r\\n        strat.emergencyBananaVaultWithdraw(_sendBananaTo);\\r\\n        disableVault(_vaultPid);\\r\\n        emit VaultDisabled(_vaultPid, vaultAddress);\\r\\n    }\\r\\n\\r\\n    // ===== onlyOwner Setters =====\\r\\n\\r\\n    /// @notice Set the maxDelay used to compound vaults through Keepers\\r\\n    /// @param _maxDelay Delay in seconds\\r\\n    function setMaxDelay(uint256 _maxDelay) external onlyOwner {\\r\\n        maxDelay = _maxDelay;\\r\\n        emit ChangedMaxDelay(_maxDelay);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the minKeeperFee in denomination of native currency\\r\\n    /// @param _minKeeperFee Minimum fee in native currency used to allow the Keeper to run before maxDelay\\r\\n    function setMinKeeperFee(uint256 _minKeeperFee) external onlyOwner {\\r\\n        minKeeperFee = _minKeeperFee;\\r\\n        emit ChangedMinKeeperFee(_minKeeperFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the slippageFactor for calculating outputs\\r\\n    /// @param _slippageFactor Minimum fee in native currency required to run compounder through Keeper before maxDelay\\r\\n    function setSlippageFactor(uint256 _slippageFactor) external onlyOwner {\\r\\n        require(\\r\\n            _slippageFactor <= SLIPPAGE_FACTOR_DENOMINATOR,\\r\\n            \\\"slippageFactor too high\\\"\\r\\n        );\\r\\n        slippageFactor = _slippageFactor;\\r\\n        emit ChangedSlippageFactor(_slippageFactor);\\r\\n    }\\r\\n\\r\\n    /// @notice Set maxVaults to be compounded through the Keeper\\r\\n    /// @param _maxVaults Number of vaults to compound on each run\\r\\n    function setMaxVaults(uint16 _maxVaults) external onlyOwner {\\r\\n        maxVaults = _maxVaults;\\r\\n        emit ChangedMaxVaults(_maxVaults);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the address where treasury funds are sent to\\r\\n    /// @param _treasury Address of treasury\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        emit ChangedTreasury(settings.treasury, _treasury);\\r\\n        settings.treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the address where performance funds are sent to\\r\\n    /// @param _platform Address of platform\\r\\n    function setPlatform(address _platform) external onlyOwner {\\r\\n        emit ChangedPlatform(settings.platform, _platform);\\r\\n        settings.platform = _platform;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the keeperFee earned on compounding through the Keeper\\r\\n    /// @param _keeperFee Percentage to take on each compound. (100 = 1%)\\r\\n    function setKeeperFee(uint256 _keeperFee) external onlyOwner {\\r\\n        require(\\r\\n            _keeperFee <= KEEPER_FEE_UL,\\r\\n            \\\"MaximizerVaultApe: Keeper fee too high\\\"\\r\\n        );\\r\\n        emit ChangedKeeperFee(settings.keeperFee, _keeperFee);\\r\\n        settings.keeperFee = _keeperFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the platformFee earned on compounding\\r\\n    /// @param _platformFee Percentage to take on each compound. (100 = 1%)\\r\\n    function setPlatformFee(uint256 _platformFee) external onlyOwner {\\r\\n        require(\\r\\n            _platformFee <= PLATFORM_FEE_UL,\\r\\n            \\\"MaximizerVaultApe: Platform fee too high\\\"\\r\\n        );\\r\\n        emit ChangedPlatformFee(settings.platformFee, _platformFee);\\r\\n        settings.platformFee = _platformFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the percentage of BANANA to burn on each compound.\\r\\n    /// @param _buyBackRate Percentage to burn on each compound. (100 = 1%)\\r\\n    function setBuyBackRate(uint256 _buyBackRate) external onlyOwner {\\r\\n        require(\\r\\n            _buyBackRate <= BUYBACK_RATE_UL,\\r\\n            \\\"MaximizerVaultApe: Buyback rate too high\\\"\\r\\n        );\\r\\n        emit ChangedBuyBackRate(settings.buyBackRate, _buyBackRate);\\r\\n        settings.buyBackRate = _buyBackRate;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the withdrawFee percentage to take on withdraws.\\r\\n    /// @param _withdrawFee Percentage to send to platform. (100 = 1%)\\r\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyOwner {\\r\\n        require(\\r\\n            _withdrawFee <= WITHDRAW_FEE_UL,\\r\\n            \\\"MaximizerVaultApe: Withdraw fee too high\\\"\\r\\n        );\\r\\n        emit ChangedWithdrawFee(settings.withdrawFee, _withdrawFee);\\r\\n        settings.withdrawFee = _withdrawFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the withdrawFeePeriod period where users pay a fee if they withdraw before this period\\r\\n    /// @param _withdrawFeePeriod Period in seconds\\r\\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _withdrawFeePeriod <= WITHDRAW_FEE_PERIOD_UL,\\r\\n            \\\"MaximizerVaultApe: Withdraw fee period too long\\\"\\r\\n        );\\r\\n        emit ChangedWithdrawFeePeriod(\\r\\n            settings.withdrawFeePeriod,\\r\\n            _withdrawFeePeriod\\r\\n        );\\r\\n        settings.withdrawFeePeriod = _withdrawFeePeriod;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the withdrawRewardsFee percentage to take on BANANA Vault withdraws.\\r\\n    /// @param _withdrawRewardsFee Percentage to send to platform. (100 = 1%)\\r\\n    function setWithdrawRewardsFee(uint256 _withdrawRewardsFee)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _withdrawRewardsFee <= WITHDRAW_REWARDS_FEE_UL,\\r\\n            \\\"MaximizerVaultApe: Withdraw rewards fee too high\\\"\\r\\n        );\\r\\n        emit ChangedWithdrawRewardsFee(\\r\\n            settings.withdrawRewardsFee,\\r\\n            _withdrawRewardsFee\\r\\n        );\\r\\n        settings.withdrawRewardsFee = _withdrawRewardsFee;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libs/IStrategyMaximizerMasterApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../libs/IMaximizerVaultApe.sol\\\";\\r\\n\\r\\n// For interacting with our own strategy\\r\\ninterface IStrategyMaximizerMasterApe {\\r\\n    function STAKE_TOKEN_ADDRESS() external returns (address);\\r\\n\\r\\n    function vaultApe() external returns (IMaximizerVaultApe);\\r\\n\\r\\n    function accSharesPerStakedToken() external view returns (uint256);\\r\\n\\r\\n    function totalStake() external view returns (uint256);\\r\\n\\r\\n    function getExpectedOutputs()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 platformOutput,\\r\\n            uint256 keeperOutput,\\r\\n            uint256 burnOutput,\\r\\n            uint256 bananaOutput\\r\\n        );\\r\\n\\r\\n    function balanceOf(address)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 stake,\\r\\n            uint256 banana,\\r\\n            uint256 autoBananaShares\\r\\n        );\\r\\n\\r\\n    function userInfo(address)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 stake,\\r\\n            uint256 autoBananaShares,\\r\\n            uint256 rewardDebt,\\r\\n            uint256 lastDepositedTime\\r\\n        );\\r\\n\\r\\n    // Main want token compounding function\\r\\n    function earn(\\r\\n        uint256 _minPlatformOutput,\\r\\n        uint256 _minKeeperOutput,\\r\\n        uint256 _minBurnOutput,\\r\\n        uint256 _minBananaOutput,\\r\\n        bool _takeKeeperFee\\r\\n    ) external;\\r\\n\\r\\n    // Transfer want tokens autoFarm -> strategy\\r\\n    function deposit(address _userAddress, uint256 _amount) external;\\r\\n\\r\\n    // Transfer want tokens strategy -> vaultChef\\r\\n    function withdraw(address _userAddress, uint256 _wantAmt) external;\\r\\n\\r\\n    function claimRewards(address _userAddress, uint256 _shares) external;\\r\\n\\r\\n    function emergencyVaultWithdraw() external;\\r\\n\\r\\n    function emergencyBananaVaultWithdraw(address _to) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libs/IMaximizerVaultApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface IMaximizerVaultApe {\\r\\n    function KEEPER_FEE_UL() external view returns (uint256);\\r\\n\\r\\n    function PLATFORM_FEE_UL() external view returns (uint256);\\r\\n\\r\\n    function BUYBACK_RATE_UL() external view returns (uint256);\\r\\n\\r\\n    function WITHDRAW_FEE_UL() external view returns (uint256);\\r\\n\\r\\n    function WITHDRAW_REWARDS_FEE_UL() external view returns (uint256);\\r\\n\\r\\n    function WITHDRAW_FEE_PERIOD_UL() external view returns (uint256);\\r\\n\\r\\n    struct Settings {\\r\\n        address treasury;\\r\\n        uint256 keeperFee;\\r\\n        address platform;\\r\\n        uint256 platformFee;\\r\\n        uint256 buyBackRate;\\r\\n        uint256 withdrawFee;\\r\\n        uint256 withdrawFeePeriod;\\r\\n        uint256 withdrawRewardsFee;\\r\\n    }\\r\\n\\r\\n    function getSettings() external view returns (Settings memory);\\r\\n\\r\\n    function userInfo(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 stake,\\r\\n            uint256 autoBananaShares,\\r\\n            uint256 rewardDebt,\\r\\n            uint256 lastDepositedTime\\r\\n        );\\r\\n\\r\\n    function vaults(uint256 _pid) external view returns (address);\\r\\n\\r\\n    function vaultsLength() external view returns (uint256);\\r\\n\\r\\n    function addVault(address _strat) external;\\r\\n\\r\\n    function stakedWantTokens(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function depositTo(\\r\\n        uint256 _pid,\\r\\n        address _to,\\r\\n        uint256 _wantAmt\\r\\n    ) external;\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _wantAmt) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _wantAmt) external;\\r\\n\\r\\n    function withdrawAll(uint256 _pid) external;\\r\\n\\r\\n    function earnAll() external;\\r\\n\\r\\n    function earnSome(uint256[] memory pids) external;\\r\\n\\r\\n    function harvest(uint256 _pid, uint256 _wantAmt) external;\\r\\n\\r\\n    function harvestAll(uint256 _pid) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libs/IBananaVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\r\\n\\r\\ninterface IBananaVault is IAccessControlEnumerable {\\r\\n    function DEPOSIT_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function userInfo(address _address)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 lastDepositedTime,\\r\\n            uint256 pacocaAtLastUserAction,\\r\\n            uint256 lastUserActionTime\\r\\n        );\\r\\n\\r\\n    function earn() external;\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _shares) external;\\r\\n\\r\\n    function lastHarvestedTime() external view returns (uint256);\\r\\n\\r\\n    function calculateTotalPendingBananaRewards()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function available() external view returns (uint256);\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function masterApe() external view returns (address);\\r\\n    \\r\\n    function bananaToken() external view returns (address);\\r\\n\\r\\n    function totalShares() external view returns (uint256);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function treasury() external view returns (address);\\r\\n\\r\\n    function setTreasury(address _treasury) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easilly be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/KeeperBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@apeswap.finance/contracts/contracts/utils/Sweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * ApeSwapFinance\\n * App:             https://apeswap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev Sweep any ERC20 token.\\n * Sometimes people accidentally send tokens to a contract without any way to retrieve them.\\n * This contract makes sure any erc20 tokens can be removed from the contract.\\n */\\ncontract Sweeper is Ownable {\\n    struct NFT {\\n        IERC721 nftaddress;\\n        uint256[] ids;\\n    }\\n    mapping(address => bool) public lockedTokens;\\n    bool public allowNativeSweep;\\n\\n    event SweepWithdrawToken(address indexed receiver, IERC20 indexed token, uint256 balance);\\n\\n    event SweepWithdrawNFTs(address indexed receiver, NFT[] indexed nfts);\\n\\n    event SweepWithdrawNative(address indexed receiver, uint256 balance);\\n\\n    constructor(address[] memory _lockedTokens, bool _allowNativeSweep) {\\n        lockTokens(_lockedTokens);\\n        allowNativeSweep = _allowNativeSweep;\\n    }\\n\\n    /**\\n     * @dev Transfers erc20 tokens to owner\\n     * Only owner of contract can call this function\\n     */\\n    function sweepTokens(IERC20[] memory tokens, address to) external onlyOwner {\\n        NFT[] memory empty;\\n        sweepTokensAndNFTs(tokens, empty, to);\\n    }\\n\\n    /**\\n     * @dev Transfers NFT to owner\\n     * Only owner of contract can call this function\\n     */\\n    function sweepNFTs(NFT[] memory nfts, address to) external onlyOwner {\\n        IERC20[] memory empty;\\n        sweepTokensAndNFTs(empty, nfts, to);\\n    }\\n\\n    /**\\n     * @dev Transfers ERC20 and NFT to owner\\n     * Only owner of contract can call this function\\n     */\\n    function sweepTokensAndNFTs(\\n        IERC20[] memory tokens,\\n        NFT[] memory nfts,\\n        address to\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 token = tokens[i];\\n            require(!lockedTokens[address(token)], \\\"Tokens can't be sweeped\\\");\\n            uint256 balance = token.balanceOf(address(this));\\n            token.transfer(to, balance);\\n            emit SweepWithdrawToken(to, token, balance);\\n        }\\n\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            IERC721 nftaddress = nfts[i].nftaddress;\\n            require(!lockedTokens[address(nftaddress)], \\\"Tokens can't be sweeped\\\");\\n            uint256[] memory ids = nfts[i].ids;\\n            for (uint256 j = 0; j < ids.length; j++) {\\n                nftaddress.safeTransferFrom(address(this), to, ids[j]);\\n            }\\n        }\\n        emit SweepWithdrawNFTs(to, nfts);\\n    }\\n\\n    /// @notice Sweep native coin\\n    /// @param _to address the native coins should be transferred to\\n    function sweepNative(address payable _to) public onlyOwner {\\n        require(allowNativeSweep, \\\"Not allowed\\\");\\n        uint256 balance = address(this).balance;\\n        _to.transfer(balance);\\n        emit SweepWithdrawNative(_to, balance);\\n    }\\n\\n    /**\\n     * @dev Refuse native sweep.\\n     * Once refused can't be allowed again\\n     */\\n    function refuseNativeSweep() public onlyOwner {\\n        allowNativeSweep = false;\\n    }\\n\\n    /**\\n     * @dev Lock single token so they can't be transferred from the contract.\\n     * Once locked it can't be unlocked\\n     */\\n    function lockToken(address token) public onlyOwner {\\n        lockedTokens[token] = true;\\n    }\\n\\n    /**\\n     * @dev Lock multiple tokens so they can't be transferred from the contract.\\n     * Once locked it can't be unlocked\\n     */\\n    function lockTokens(address[] memory tokens) public onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            lockToken(tokens[i]);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bananaVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keeperFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRewardsFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IMaximizerVaultApe.Settings\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedBuyBackRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedKeeperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedMaxDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedMaxVaults\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedMinKeeperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangedPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedPlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedSlippageFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangedTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedWithdrawFeePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangedWithdrawRewardsFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"indexed\":true,\"internalType\":\"struct Sweeper.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"}],\"name\":\"SweepWithdrawNFTs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SweepWithdrawNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SweepWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BANANA_VAULT\",\"outputs\":[{\"internalType\":\"contract IBananaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUYBACK_RATE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_FACTOR_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_PERIOD_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_REWARDS_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"accSharesPerStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"addVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowNativeSweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"banana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoBananaShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVaultCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultPid\",\"type\":\"uint256\"}],\"name\":\"disableVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"earnSome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultPid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sendBananaTo\",\"type\":\"address\"}],\"name\":\"emergencyBananaVaultWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultPid\",\"type\":\"uint256\"}],\"name\":\"emergencyVaultWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultPid\",\"type\":\"uint256\"}],\"name\":\"enableVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keeperFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRewardsFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IMaximizerVaultApe.Settings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVaults\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minKeeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refuseNativeSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"}],\"name\":\"setBuyBackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keeperFee\",\"type\":\"uint256\"}],\"name\":\"setKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxVaults\",\"type\":\"uint16\"}],\"name\":\"setMaxVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minKeeperFee\",\"type\":\"uint256\"}],\"name\":\"setMinKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"setSlippageFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawRewardsFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keeperFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRewardsFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedWantTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Sweeper.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sweepNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Sweeper.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepTokensAndNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoBananaShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastCompound\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeeperMaximizerVaultApe", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000002777053d6764996e594c3e88af1d58d5363a2e60000000000000000000000005c7c7246bd8a18df5f6ee422f9f8ccdf716a6ad200000000000000000000000001286d590a263d5cf4317d1b71183f15554f560800000000000000000000000000000000000000000000000000000000000151800000000000000000000000005c7c7246bd8a18df5f6ee422f9f8ccdf716a6ad200000000000000000000000000000000000000000000000000000000000000320000000000000000000000005c7c7246bd8a18df5f6ee422f9f8ccdf716a6ad200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}