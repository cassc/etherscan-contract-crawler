{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IRewardToken {\r\n    function minusLPAmount(address account, uint256 amount) external;\r\n\r\n    function addLPAmount(address account, uint256 amount) external;\r\n\r\n    function _limitAmount() external view returns (uint256);\r\n\r\n    function _feeWhiteList(address account) external view returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract AbsLPPool is Ownable {\r\n    struct UserInfo {\r\n        bool isActive;\r\n        uint256 amount;\r\n        uint256 rewardTokenDebt;\r\n        uint256 calTokenReward;\r\n\r\n        uint256 rewardLPDebt;\r\n        uint256 calLPReward;\r\n\r\n        uint256 rewardMintDebt;\r\n        uint256 calMintReward;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 totalAmount;\r\n        uint256 accTokenPerShare;\r\n        uint256 accTokenReward;\r\n\r\n        uint256 accLPPerShare;\r\n        uint256 accLPReward;\r\n\r\n        uint256 accMintPerShare;\r\n        uint256 accMintReward;\r\n        uint256 mintPerBlock;\r\n        uint256 lastMintBlock;\r\n        uint256 totalMintReward;\r\n    }\r\n\r\n    PoolInfo private poolInfo;\r\n    mapping(address => UserInfo) private userInfo;\r\n\r\n    address private _lpToken;\r\n    string private _lpTokenSymbol;\r\n    address private _rewardToken;\r\n    address private _mintRewardToken;\r\n\r\n    mapping(address => address) public _invitor;\r\n    mapping(address => address[]) public _binder;\r\n    uint256 public _inviteFee = 1000;\r\n\r\n    constructor(\r\n        address LPToken, string memory LPTokenSymbol,\r\n        address RewardToken,  address MintRewardToken\r\n    ){\r\n        _lpToken = LPToken;\r\n        _lpTokenSymbol = LPTokenSymbol;\r\n        _rewardToken = RewardToken;\r\n        _mintRewardToken = MintRewardToken;\r\n        poolInfo.lastMintBlock = block.number;\r\n    }\r\n\r\n    function addTokenReward(uint256 reward) public {\r\n        require(msg.sender == _rewardToken, \"rq Token\");\r\n        if (reward > 0 && poolInfo.totalAmount > 0) {\r\n            poolInfo.accTokenPerShare += reward * 1e18 / poolInfo.totalAmount;\r\n            poolInfo.accTokenReward += reward;\r\n        }\r\n    }\r\n\r\n    function addLPTokenReward(uint256 reward) public {\r\n        require(msg.sender == _rewardToken, \"rq Token\");\r\n        if (reward > 0 && poolInfo.totalAmount > 0) {\r\n            poolInfo.accLPPerShare += reward * 1e18 / poolInfo.totalAmount;\r\n            poolInfo.accLPReward += reward;\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function deposit(uint256 amount, address invitor) external {\r\n        require(amount > 0, \"=0\");\r\n        address account = msg.sender;\r\n        UserInfo storage user = userInfo[account];\r\n        if (!user.isActive) {\r\n            user.isActive = true;\r\n            if (userInfo[invitor].isActive) {\r\n                _invitor[account] = invitor;\r\n                _binder[invitor].push(account);\r\n            }\r\n        }\r\n        _calReward(user);\r\n\r\n        IERC20(_lpToken).transferFrom(msg.sender, address(this), amount);\r\n\r\n        user.amount += amount;\r\n        poolInfo.totalAmount += amount;\r\n        IRewardToken(_rewardToken).minusLPAmount(account, amount);\r\n\r\n        user.rewardTokenDebt = user.amount * poolInfo.accTokenPerShare / 1e18;\r\n        user.rewardLPDebt = user.amount * poolInfo.accLPPerShare / 1e18;\r\n        user.rewardMintDebt = user.amount * poolInfo.accMintPerShare / 1e18;\r\n    }\r\n\r\n    function withdraw() public {\r\n        address account = msg.sender;\r\n        UserInfo storage user = userInfo[account];\r\n        _calReward(user);\r\n\r\n        uint256 amount = user.amount;\r\n\r\n        IERC20(_lpToken).transfer(msg.sender, amount);\r\n\r\n        user.amount -= amount;\r\n        poolInfo.totalAmount -= amount;\r\n        IRewardToken(_rewardToken).addLPAmount(account, amount);\r\n\r\n        user.rewardTokenDebt = user.amount * poolInfo.accTokenPerShare / 1e18;\r\n        user.rewardLPDebt = user.amount * poolInfo.accLPPerShare / 1e18;\r\n        user.rewardMintDebt = user.amount * poolInfo.accMintPerShare / 1e18;\r\n    }\r\n\r\n    function claim() public {\r\n        address account = msg.sender;\r\n        UserInfo storage user = userInfo[account];\r\n        _calReward(user);\r\n        uint256 pendingToken = user.calTokenReward;\r\n        if (pendingToken > 0) {\r\n            IRewardToken rewardToken = IRewardToken(_rewardToken);\r\n            uint256 limitAmount = rewardToken._limitAmount();\r\n            if (!rewardToken._feeWhiteList(account) && limitAmount > 0 && rewardToken.balanceOf(account) + pendingToken > limitAmount) {\r\n                pendingToken = 0;\r\n            }\r\n            if (pendingToken > 0) {\r\n                rewardToken.transfer(account, pendingToken);\r\n                user.calTokenReward = 0;\r\n            }\r\n        }\r\n        uint256 pendingLP = user.calLPReward;\r\n        if (pendingLP > 0) {\r\n            IERC20(_lpToken).transfer(account, pendingLP);\r\n            user.calLPReward = 0;\r\n            IRewardToken(_rewardToken).addLPAmount(account,pendingLP);\r\n        }\r\n        uint256 pendingMint = user.calMintReward;\r\n        if (pendingMint > 0) {\r\n            IERC20 mintRewardToken = IERC20(_mintRewardToken);\r\n            address invitor = _invitor[account];\r\n            if (address(0) != invitor) {\r\n                uint256 inviteAmount = pendingMint * _inviteFee / 10000;\r\n                if (inviteAmount > 0) {\r\n                    pendingMint -= inviteAmount;\r\n                    mintRewardToken.transfer(invitor, inviteAmount);\r\n                }\r\n            }\r\n            mintRewardToken.transfer(account, pendingMint);\r\n            user.calMintReward = 0;\r\n        }\r\n    }\r\n\r\n    function _updatePool() private {\r\n        PoolInfo storage pool = poolInfo;\r\n        uint256 blockNum = block.number;\r\n        uint256 lastRewardBlock = pool.lastMintBlock;\r\n        if (blockNum <= lastRewardBlock) {\r\n            return;\r\n        }\r\n        pool.lastMintBlock = blockNum;\r\n\r\n        uint256 accReward = pool.accMintReward;\r\n        uint256 totalReward = pool.totalMintReward;\r\n        if (accReward >= totalReward) {\r\n            return;\r\n        }\r\n\r\n        uint256 totalAmount = pool.totalAmount;\r\n        uint256 rewardPerBlock = pool.mintPerBlock;\r\n        if (0 < totalAmount && 0 < rewardPerBlock) {\r\n            uint256 reward = rewardPerBlock * (blockNum - lastRewardBlock);\r\n            uint256 remainReward = totalReward - accReward;\r\n            if (reward > remainReward) {\r\n                reward = remainReward;\r\n            }\r\n            pool.accMintPerShare += reward * 1e18 / totalAmount;\r\n            pool.accMintReward += reward;\r\n        }\r\n    }\r\n\r\n    function _calReward(UserInfo storage user) private {\r\n        _updatePool();\r\n        if (user.amount > 0) {\r\n            uint256 accMintReward = user.amount * poolInfo.accMintPerShare / 1e18;\r\n            uint256 pendingMintAmount = accMintReward - user.rewardMintDebt;\r\n            if (pendingMintAmount > 0) {\r\n                user.rewardMintDebt = accMintReward;\r\n                user.calMintReward += pendingMintAmount;\r\n            }\r\n\r\n            uint256 accLPReward = user.amount * poolInfo.accLPPerShare / 1e18;\r\n            uint256 pendingLPAmount = accLPReward - user.rewardLPDebt;\r\n            if (pendingLPAmount > 0) {\r\n                user.rewardLPDebt = accLPReward;\r\n                user.calLPReward += pendingLPAmount;\r\n            }\r\n\r\n            uint256 accTokenReward = user.amount * poolInfo.accTokenPerShare / 1e18;\r\n            uint256 pendingAmount = accTokenReward - user.rewardTokenDebt;\r\n            if (pendingAmount > 0) {\r\n                user.rewardTokenDebt = accTokenReward;\r\n                user.calTokenReward += pendingAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function pendingTokenReward(address account) private view returns (uint256 reward) {\r\n        reward = 0;\r\n        UserInfo storage user = userInfo[account];\r\n        if (user.amount > 0) {\r\n            reward = user.amount * poolInfo.accTokenPerShare / 1e18 - user.rewardTokenDebt;\r\n        }\r\n    }\r\n\r\n    function pendingLPReward(address account) private view returns (uint256 reward) {\r\n        reward = 0;\r\n        UserInfo storage user = userInfo[account];\r\n        if (user.amount > 0) {\r\n            reward = user.amount * poolInfo.accLPPerShare / 1e18 - user.rewardLPDebt;\r\n        }\r\n    }\r\n\r\n    function _calPendingMintReward(address account) private view returns (uint256 reward) {\r\n        reward = 0;\r\n        PoolInfo storage pool = poolInfo;\r\n        UserInfo storage user = userInfo[account];\r\n        if (user.amount > 0) {\r\n            uint256 poolPendingReward;\r\n            uint256 blockNum = block.number;\r\n            uint256 lastRewardBlock = pool.lastMintBlock;\r\n            if (blockNum > lastRewardBlock) {\r\n                poolPendingReward = pool.mintPerBlock * (blockNum - lastRewardBlock);\r\n                uint256 totalReward = pool.totalMintReward;\r\n                uint256 accReward = pool.accMintReward;\r\n                uint256 remainReward;\r\n                if (totalReward > accReward) {\r\n                    remainReward = totalReward - accReward;\r\n                }\r\n                if (poolPendingReward > remainReward) {\r\n                    poolPendingReward = remainReward;\r\n                }\r\n            }\r\n            reward = user.amount * (pool.accMintPerShare + poolPendingReward * 1e18 / pool.totalAmount) / 1e18 - user.rewardMintDebt;\r\n        }\r\n    }\r\n\r\n    function getPoolInfo() public view returns (\r\n        uint256 totalAmount,\r\n        uint256 accTokenPerShare, uint256 accTokenReward,\r\n        uint256 accLPPerShare, uint256 accLPReward,\r\n        uint256 accMintPerShare, uint256 accMintReward,\r\n        uint256 mintPerBlock, uint256 lastMintBlock, uint256 totalMintReward\r\n    ) {\r\n        totalAmount = poolInfo.totalAmount;\r\n        accTokenPerShare = poolInfo.accTokenPerShare;\r\n        accTokenReward = poolInfo.accTokenReward;\r\n        accLPPerShare = poolInfo.accLPPerShare;\r\n        accLPReward = poolInfo.accLPReward;\r\n        accMintPerShare = poolInfo.accMintPerShare;\r\n        accMintReward = poolInfo.accMintReward;\r\n        mintPerBlock = poolInfo.mintPerBlock;\r\n        lastMintBlock = poolInfo.lastMintBlock;\r\n        totalMintReward = poolInfo.totalMintReward;\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 amount, uint256 lpAllowance,\r\n        uint256 pendingToken, uint256 pendingLP, uint256 pendingMintReward\r\n    ) {\r\n        UserInfo storage user = userInfo[account];\r\n        amount = user.amount;\r\n        lpAllowance = IERC20(_lpToken).allowance(account, address(this));\r\n        pendingToken = pendingTokenReward(account) + user.calTokenReward;\r\n        pendingLP = pendingLPReward(account) + user.calLPReward;\r\n        pendingMintReward = _calPendingMintReward(account) + user.calMintReward;\r\n    }\r\n\r\n    function getUserExtInfo(address account) public view returns (\r\n        uint256 calTokenReward, uint256 rewardTokenDebt,\r\n        uint256 calLPReward, uint256 rewardLPDebt,\r\n        uint256 calMintReward, uint256 rewardMintDebt\r\n    ) {\r\n        UserInfo storage user = userInfo[account];\r\n        calTokenReward = user.calTokenReward;\r\n        rewardTokenDebt = user.rewardTokenDebt;\r\n        calLPReward = user.calLPReward;\r\n        rewardLPDebt = user.rewardLPDebt;\r\n        calMintReward = user.calMintReward;\r\n        rewardMintDebt = user.rewardMintDebt;\r\n    }\r\n\r\n    function getBaseInfo() external view returns (\r\n        address lpToken,\r\n        uint256 lpTokenDecimals,\r\n        string memory lpTokenSymbol,\r\n        address rewardToken,\r\n        uint256 rewardTokenDecimals,\r\n        string memory rewardTokenSymbol,\r\n        address mintRewardToken,\r\n        uint256 mintRewardTokenDecimals,\r\n        string memory mintRewardTokenSymbol\r\n    ){\r\n        lpToken = _lpToken;\r\n        lpTokenDecimals = IERC20(lpToken).decimals();\r\n        lpTokenSymbol = _lpTokenSymbol;\r\n        rewardToken = _rewardToken;\r\n        rewardTokenDecimals = IERC20(rewardToken).decimals();\r\n        rewardTokenSymbol = IERC20(rewardToken).symbol();\r\n        mintRewardToken = _mintRewardToken;\r\n        mintRewardTokenDecimals = IERC20(mintRewardToken).decimals();\r\n        mintRewardTokenSymbol = IERC20(mintRewardToken).symbol();\r\n    }\r\n\r\n    function getBinderLength(address account) public view returns (uint256){\r\n        return _binder[account].length;\r\n    }\r\n\r\n    function setLPToken(address lpToken, string memory lpSymbol) external onlyOwner {\r\n        require(poolInfo.totalAmount == 0, \"started\");\r\n        _lpToken = lpToken;\r\n        _lpTokenSymbol = lpSymbol;\r\n    }\r\n\r\n    function setRewardToken(address rewardToken) external onlyOwner {\r\n        _rewardToken = rewardToken;\r\n    }\r\n\r\n    function setMintRewardToken(address rewardToken) external onlyOwner {\r\n        _mintRewardToken = rewardToken;\r\n    }\r\n\r\n    function setMintPerBlock(uint256 mintPerBlock) external onlyOwner {\r\n        _updatePool();\r\n        poolInfo.mintPerBlock = mintPerBlock;\r\n    }\r\n\r\n    function setTotalMintReward(uint256 totalReward) external onlyOwner {\r\n        _updatePool();\r\n        poolInfo.totalMintReward = totalReward;\r\n    }\r\n\r\n    function setInviteFee(uint256 fee) external onlyOwner {\r\n        _inviteFee = fee;\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyOwner {\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external onlyOwner {\r\n        if (token == _lpToken) {\r\n            return;\r\n        }\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract LPDividendPool is AbsLPPool {\r\n    constructor() AbsLPPool(\r\n    //ZM-USDT-LP\r\n        address(0xfF69aCcF887b04246e7FF6e91e80Fa7123D2D138),\r\n        \"ZM-USDT-LP\",\r\n    //ZM\r\n        address(0x4ec59bbE3D46473C4fcCecaF7ddBe8d80d1767A8),\r\n    //ZM2\r\n        address(0x846F4195a3Ad6D0e654892026462d9984bA4aa6E)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addLPTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mintRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintRewardTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mintRewardTokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLPPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLPReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMintBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserExtInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calTokenReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calLPReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLPDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMintDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingMintReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpSymbol\",\"type\":\"string\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"setMintPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"setMintRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"setTotalMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPDividendPool", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://86c6f2f7538ea698804a14b6d9515f71583555a3260a7e48b649662ef09b0c0c"}