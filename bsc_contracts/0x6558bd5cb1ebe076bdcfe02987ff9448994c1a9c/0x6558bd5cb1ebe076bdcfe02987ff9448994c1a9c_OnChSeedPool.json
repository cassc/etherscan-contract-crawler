{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/seed/OnChSeedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../common/OnChPayable.sol\\\";\\nimport \\\"../common/OnChOwnableWithWhitelist.sol\\\";\\nimport \\\"../stake/IOnChStakingOrchestrator.sol\\\";\\nimport \\\"../kyc/IOnChKycOrchestrator.sol\\\";\\n\\ncontract OnChSeedPool is OnChPayable, OnChOwnableWithWhitelist, ReentrancyGuard {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event StakedBasedDeposit(\\n        string indexed poolName,\\n        address indexed poolAddress,\\n        address indexed depositer,\\n        uint256 collectedCoinAmount, address collectedCoinAddress\\n    );\\n\\n    event CoinBasedDeposit(\\n        string indexed poolName,\\n        address indexed poolAddress,\\n        address indexed depositer,\\n        uint256 collectedCoinAmount, address collectedCoinAddress,\\n        uint256 seedCoinAmount, address seedCoinAddress\\n    );\\n\\n    event SeedCoinsWithdrawn(\\n        string indexed poolName,\\n        address indexed poolAddress,\\n        address indexed withdrawer,\\n        uint256 seedCoinAmount, address seedCoinAddress\\n    );\\n\\n    event CollectedCoinsWithdrawn(\\n        string indexed poolName,\\n        address indexed poolAddress,\\n        address indexed feeWalletAddress,\\n        uint256 collectedCoinAmount, address collectedCoinAddress\\n    );\\n\\n    event CoinsEarlyWithdrawn(\\n        string indexed poolName,\\n        address indexed poolAddress,\\n        address indexed withdrawer,\\n        uint256 collectedCoinAmount, address collectedCoinAddress,\\n        uint256 seedCoinAmount, address seedCoinAddress\\n    );\\n\\n    struct OnChSeedPoolConfig {\\n        string name;\\n        address collectedCoinAddress;\\n        address seedCoinAddress;\\n        uint256 seedCoinDecimals;\\n        address kycOrchestratorAddress;\\n        address stakingOrchestratorAddress;\\n        address feeWalletAddress;\\n    }\\n\\n    struct OnChSeedPoolState {\\n        bool seedCoinToCollectedCoinRatioSubUnitary;\\n        uint256 seedCoinToCollectedCoinRatio;\\n        uint256 stakeBasedDepositStarts;\\n        uint256 stakeBasedDepositEnds;\\n        uint256 coinBasedDepositStarts;\\n        uint256 coinBasedDepositEnds;\\n        uint256 depositSoftCap;\\n        uint256 depositHardCap;\\n        uint256 maxDepositPerWallet;\\n    }\\n\\n    bool configReady;\\n    bool stateReady;\\n\\n    bool allowEarlyCoinWithdrawal;\\n\\n    OnChSeedPoolConfig _config;\\n    OnChSeedPoolState _state;\\n\\n    mapping(address => uint256) internal _stakeBasedDeposits;\\n    mapping(address => uint256) internal _coinBasedDeposits;\\n    mapping(address => uint256) internal _seedCoinDeposits;\\n    mapping(address => uint256) internal _totalDeposits;\\n\\n    uint256 public stakeBasedDepositTotal;\\n    uint256 public coinBasedDepositTotal;\\n    uint256 public depositTotal;\\n    uint256 public seedCoinDepositTotal;\\n\\n    constructor() {\\n        allowEarlyCoinWithdrawal = false;\\n        configReady = false;\\n        stateReady = false;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _config.name;\\n    }\\n\\n    function config() external view returns (OnChSeedPoolConfig memory) {\\n        return _config;\\n    }\\n\\n    function state() external view returns (OnChSeedPoolState memory) {\\n        return _state;\\n    }\\n\\n    function changeConfig(\\n        string memory name_,\\n        address collectedCoinAddress_,\\n        address seedCoinAddress_,\\n        uint256 seedCoinDecimals_,\\n        address kycOrchestratorAddress_,\\n        address stakingOrchestratorAddress_,\\n        address feeWalletAddress_\\n    )\\n    external\\n    whitelistedOnly {\\n        require(collectedCoinAddress_ != address(0), \\\"OnChSeedPool: Missing collected coin address\\\");\\n        require(seedCoinAddress_ != address(0), \\\"OnChSeedPool: Missing seed coin address\\\");\\n        require(kycOrchestratorAddress_ != address(0), \\\"OnChSeedPool: Missing kyc orchestrator address\\\");\\n        require(stakingOrchestratorAddress_ != address(0), \\\"OnChSeedPool: Missing staking orchestrator address\\\");\\n        require(feeWalletAddress_ != address(0), \\\"OnChSeedPool: Missing fee wallet address\\\");\\n\\n        _config.name = name_;\\n        _config.collectedCoinAddress = collectedCoinAddress_;\\n        _config.seedCoinAddress = seedCoinAddress_;\\n        _config.seedCoinDecimals = seedCoinDecimals_;\\n        _config.kycOrchestratorAddress = kycOrchestratorAddress_;\\n        _config.stakingOrchestratorAddress = stakingOrchestratorAddress_;\\n        _config.feeWalletAddress = feeWalletAddress_;\\n\\n        configReady = true;\\n    }\\n\\n    function changeState(\\n        uint256 stakeBasedDepositStarts_,\\n        uint256 stakeBasedDepositEnds_,\\n        uint256 coinBasedDepositStarts_,\\n        uint256 coinBasedDepositEnds_,\\n        uint256 depositSoftCap_,\\n        uint256 depositHardCap_,\\n        uint256 seedCoinToCollectedCoinRatio_,\\n        uint256 maxDepositPerWallet_,\\n        bool seedCoinToCollectedCoinSubUnitary_\\n    )\\n    external\\n    whitelistedOnly {\\n        require(stakeBasedDepositStarts_ > 0, \\\"OnChSeedPool: zero stake based deposit start time\\\");\\n        require(stakeBasedDepositEnds_ >= stakeBasedDepositStarts_, \\\"OnChSeedPool: stake based deposit end must be after stake based deposit starts\\\");\\n        require(coinBasedDepositEnds_ >= stakeBasedDepositEnds_, \\\"OnChSeedPool: coin based deposit end must be after stake based deposit ends\\\");\\n        require(coinBasedDepositEnds_ >= coinBasedDepositStarts_, \\\"OnChSeedPool: coin based deposit end must be after coin based deposit starts\\\");\\n\\n        require(depositSoftCap_ >= 0, \\\"OnChSeedPool: deposit soft cap cannot be negative\\\");\\n        require(depositHardCap_ >= depositSoftCap_, \\\"OnChSeedPool: deposit hard cap cannot be lower than the soft cap\\\");\\n        require(seedCoinToCollectedCoinRatio_ > 0, \\\"OnChSeedPool: seed coin to collected coin (BUSD) ratio cannot be negative\\\");\\n        require(maxDepositPerWallet_ > 0, \\\"OnChSeedPool: Max deposit per wallet cannot be 0\\\");\\n\\n        _state.stakeBasedDepositStarts = stakeBasedDepositStarts_;\\n        _state.stakeBasedDepositEnds = stakeBasedDepositEnds_;\\n        _state.coinBasedDepositStarts = coinBasedDepositStarts_;\\n        _state.coinBasedDepositEnds = coinBasedDepositEnds_;\\n        _state.depositSoftCap = depositSoftCap_;\\n        _state.depositHardCap = depositHardCap_;\\n        _state.seedCoinToCollectedCoinRatio = seedCoinToCollectedCoinRatio_;\\n        _state.seedCoinToCollectedCoinRatioSubUnitary = seedCoinToCollectedCoinSubUnitary_;\\n        _state.maxDepositPerWallet = maxDepositPerWallet_;\\n\\n        stateReady = true;\\n    }\\n\\n    function ready() external view returns (bool) {\\n        return _ready();\\n    }\\n\\n    function _ready() internal view returns (bool) {\\n        return configReady && stateReady;\\n    }\\n\\n    function stakeBasedMaxDepositFor(address account) external view returns (uint256) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        if (block.timestamp >= _state.stakeBasedDepositStarts && block.timestamp <= _state.stakeBasedDepositEnds ||\\n            block.timestamp >= _state.coinBasedDepositStarts && block.timestamp <= _state.coinBasedDepositEnds) {\\n            return _stakeBasedMaxDepositFor(account);\\n        }\\n        return 0;\\n    }\\n\\n    function _stakeBasedMaxDepositFor(address account) internal view returns (uint256) {\\n        if (!IOnChKycOrchestrator(_config.kycOrchestratorAddress).checkKyc(account)) {\\n            return 0;\\n        }\\n        uint256 stakedCoin = IOnChStakingOrchestrator(_config.stakingOrchestratorAddress).getRealtimeStakedAmount(account);\\n        if (_config.seedCoinDecimals == 9) {\\n            stakedCoin = stakedCoin.mul(10 ** 9);\\n        }\\n\\n        uint256 maxAmount = 0;\\n        if (_state.seedCoinToCollectedCoinRatioSubUnitary) {\\n            maxAmount = stakedCoin.div(_state.seedCoinToCollectedCoinRatio) - _stakeBasedDeposits[account];\\n        } else {\\n            maxAmount = stakedCoin.mul(_state.seedCoinToCollectedCoinRatio) - _stakeBasedDeposits[account];\\n        }\\n\\n        if (depositTotal + maxAmount > _state.depositHardCap) {\\n            maxAmount = _state.depositHardCap - depositTotal;\\n        }\\n\\n        if (_totalDeposits[account] + maxAmount > _state.maxDepositPerWallet) {\\n            maxAmount = (_state.maxDepositPerWallet - _totalDeposits[account]);\\n        }\\n\\n        return maxAmount;\\n    }\\n\\n    function coinBasedMaxDepositFor(address account) external view returns (uint256) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        if (block.timestamp >= _state.coinBasedDepositStarts && block.timestamp <= _state.coinBasedDepositEnds) {\\n            return _coinBasedMaxDepositFor(account);\\n        }\\n        return 0;\\n    }\\n\\n    function _coinBasedMaxDepositFor(address account) internal view returns (uint256) {\\n        if (!IOnChKycOrchestrator(_config.kycOrchestratorAddress).checkKyc(account)) {\\n            return 0;\\n        }\\n\\n        uint256 seedCoinBalance = IERC20(_config.seedCoinAddress).balanceOf(account);\\n        if (_config.seedCoinDecimals == 9) {\\n            seedCoinBalance = seedCoinBalance.mul(10 ** 9);\\n        }\\n\\n        uint256 maxAmount = 0;\\n        if (_state.seedCoinToCollectedCoinRatioSubUnitary) {\\n            maxAmount = seedCoinBalance.div(_state.seedCoinToCollectedCoinRatio);\\n        } else {\\n            maxAmount = seedCoinBalance.mul(_state.seedCoinToCollectedCoinRatio);\\n        }\\n\\n        if (depositTotal + maxAmount > _state.depositHardCap) {\\n            maxAmount = _state.depositHardCap - depositTotal;\\n        }\\n\\n        if (_totalDeposits[account] + maxAmount > _state.maxDepositPerWallet) {\\n            maxAmount = (_state.maxDepositPerWallet - _totalDeposits[account]);\\n        }\\n\\n        return maxAmount;\\n    }\\n\\n    function stakeBasedDepositOf(address account) external view returns (uint256) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        return _stakeBasedDeposits[account];\\n    }\\n\\n    function coinBasedDepositOf(address account) external view returns (uint256) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        return _coinBasedDeposits[account];\\n    }\\n\\n    function seedCoinDepositOf(address account) external view returns (uint256) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        return _seedCoinDeposits[account];\\n    }\\n\\n    function totalDepositOf(address account) external view returns (uint256) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        return _totalDeposits[account];\\n    }\\n\\n    function stakeBasedDeposit(uint256 collectedCoinAmount) external returns (bool) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        require(depositTotal < _state.depositHardCap, \\\"OnChSeedPool: Pool is full\\\");\\n        require(IOnChKycOrchestrator(_config.kycOrchestratorAddress).checkKyc(msg.sender), \\\"OnChSeedPool: KYC must be completed first\\\");\\n        require(msg.sender == tx.origin, \\\"OnChSeedPool: Call from contract not allowed\\\");\\n\\n        if (depositTotal + collectedCoinAmount > _state.depositHardCap) {\\n            collectedCoinAmount = _state.depositHardCap - depositTotal;\\n        }\\n\\n        require(block.timestamp >= _state.stakeBasedDepositStarts && block.timestamp <= _state.stakeBasedDepositEnds ||\\n            block.timestamp >= _state.coinBasedDepositStarts && block.timestamp <= _state.coinBasedDepositEnds, \\\"OnChSeedPool: Outside time interval\\\");\\n\\n        uint256 maxAmount = _stakeBasedMaxDepositFor(msg.sender);\\n        require(collectedCoinAmount <= maxAmount, \\\"Cannot deposit more than max amount: please stake more HER\\\");\\n\\n        require(IERC20(_config.collectedCoinAddress).allowance(msg.sender, address(this)) >= collectedCoinAmount, \\\"OnChSeedPool: Insufficient allowance\\\");\\n        _payMe(msg.sender, collectedCoinAmount, _config.collectedCoinAddress);\\n\\n        _stakeBasedDeposits[msg.sender] = _stakeBasedDeposits[msg.sender] + collectedCoinAmount;\\n        stakeBasedDepositTotal = stakeBasedDepositTotal + collectedCoinAmount;\\n\\n        _totalDeposits[msg.sender] = _totalDeposits[msg.sender] + collectedCoinAmount;\\n        depositTotal = depositTotal + collectedCoinAmount;\\n\\n        emit StakedBasedDeposit(_config.name, address(this), msg.sender, collectedCoinAmount, _config.collectedCoinAddress);\\n\\n        return true;\\n    }\\n\\n    function coinBasedDeposit(uint256 collectedCoinAmount) external returns (bool) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        require(depositTotal < _state.depositHardCap, \\\"OnChSeedPool: Pool is full\\\");\\n        require(IOnChKycOrchestrator(_config.kycOrchestratorAddress).checkKyc(msg.sender), \\\"OnChSeedPool: KYC must be completed first\\\");\\n        require(msg.sender == tx.origin, \\\"Call from contract not allowed\\\");\\n\\n        if (depositTotal + collectedCoinAmount > _state.depositHardCap) {\\n            collectedCoinAmount = _state.depositHardCap - depositTotal;\\n        }\\n\\n        require(block.timestamp >= _state.coinBasedDepositStarts && block.timestamp <= _state.coinBasedDepositEnds, \\\"OnChSeedPool: Outside time interval\\\");\\n\\n        uint256 maxAmount = _coinBasedMaxDepositFor(msg.sender);\\n        require(collectedCoinAmount <= maxAmount, \\\"Cannot deposit more than max amount: please buy more HER\\\");\\n\\n        uint256 seedCoinAmount = 0;\\n        if (_state.seedCoinToCollectedCoinRatioSubUnitary) {\\n            seedCoinAmount = collectedCoinAmount.mul(_state.seedCoinToCollectedCoinRatio);\\n        } else {\\n            seedCoinAmount = collectedCoinAmount.div(_state.seedCoinToCollectedCoinRatio);\\n        }\\n\\n        if (_config.seedCoinDecimals == 9) {\\n            seedCoinAmount = seedCoinAmount.div(10 ** 9);\\n            // because starting calculations are done from 10**18 we need to get down to 10**9\\n        }\\n\\n        require(IERC20(_config.collectedCoinAddress).allowance(msg.sender, address(this)) >= collectedCoinAmount, \\\"OnChSeedPool: Insufficient collected coin allowance\\\");\\n        require(IERC20(_config.seedCoinAddress).allowance(msg.sender, address(this)) >= seedCoinAmount, \\\"OnChSeedPool: Insufficient seed coin allowance\\\");\\n\\n        _payMe(msg.sender, collectedCoinAmount, _config.collectedCoinAddress);\\n        _payMe(msg.sender, seedCoinAmount, _config.seedCoinAddress);\\n\\n        _coinBasedDeposits[msg.sender] = _coinBasedDeposits[msg.sender] + collectedCoinAmount;\\n        coinBasedDepositTotal = coinBasedDepositTotal + collectedCoinAmount;\\n\\n        _totalDeposits[msg.sender] = _totalDeposits[msg.sender] + collectedCoinAmount;\\n        depositTotal = depositTotal + collectedCoinAmount;\\n\\n        _seedCoinDeposits[msg.sender] = _seedCoinDeposits[msg.sender] + seedCoinAmount;\\n        seedCoinDepositTotal = seedCoinDepositTotal + seedCoinAmount;\\n\\n        emit CoinBasedDeposit(_config.name, address(this), msg.sender, collectedCoinAmount, _config.collectedCoinAddress, seedCoinAmount, _config.seedCoinAddress);\\n\\n        return true;\\n    }\\n\\n    function withdrawCoins() external nonReentrant returns (bool) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        require(block.timestamp > _state.coinBasedDepositEnds, \\\"OnChSeedPool: Cannot withdraw until pool ends\\\");\\n        require(_seedCoinDeposits[msg.sender] > 0, \\\"OnChSeedPool: No seed coin to withdraw\\\");\\n\\n        uint256 seedCoinAmount = _seedCoinDeposits[msg.sender];\\n\\n        _payDirect(msg.sender, seedCoinAmount, _config.seedCoinAddress);\\n\\n        _seedCoinDeposits[msg.sender] = 0;\\n        seedCoinDepositTotal = seedCoinDepositTotal - seedCoinAmount;\\n\\n        emit SeedCoinsWithdrawn(_config.name, address(this), msg.sender, seedCoinAmount, _config.seedCoinAddress);\\n\\n        return true;\\n    }\\n\\n    function collectedCoinsBalance() external view returns (uint256) {\\n        return IERC20(_config.collectedCoinAddress).balanceOf(address(this));\\n    }\\n\\n    function withdrawCollectedCoins() external nonReentrant whitelistedOnly returns (bool) {\\n        require(_ready(), \\\"OnChSeedPool: Pool not ready\\\");\\n        require(block.timestamp > _state.coinBasedDepositEnds, \\\"OnChSeedPool: Cannot withdraw until pool ends\\\");\\n\\n        uint256 collectedCoinBalance = IERC20(_config.collectedCoinAddress).balanceOf(address(this));\\n        require(collectedCoinBalance > 0, \\\"OnChSeedPool: Cannot withdraw from empty pool\\\");\\n\\n        _payDirect(_config.feeWalletAddress, collectedCoinBalance, _config.collectedCoinAddress);\\n\\n        emit CollectedCoinsWithdrawn(_config.name, address(this), _config.feeWalletAddress, collectedCoinBalance, _config.collectedCoinAddress);\\n\\n        return true;\\n    }\\n\\n    function isAllowEarlyCoinWithdrawal() external view returns (bool) {\\n        return allowEarlyCoinWithdrawal;\\n    }\\n\\n    function setAllowEarlyCoinWithdrawal(bool allowEarlyCoinWithdrawal_) external onlyOwner returns (bool) {\\n        allowEarlyCoinWithdrawal = allowEarlyCoinWithdrawal_;\\n        return allowEarlyCoinWithdrawal;\\n    }\\n\\n    function earlyWithdrawCoins() external returns (bool) {\\n        require(allowEarlyCoinWithdrawal, \\\"OnChSeedPool: Not allowed\\\");\\n        uint256 totalDepositAmount = _totalDeposits[msg.sender];\\n        bool paid = false;\\n        if (totalDepositAmount > 0) {\\n            _payDirect(msg.sender, totalDepositAmount, _config.collectedCoinAddress);\\n            paid = true;\\n        }\\n        uint256 seedCoinAmount = _seedCoinDeposits[msg.sender];\\n        if (seedCoinAmount > 0) {\\n            _payDirect(msg.sender, seedCoinAmount, _config.seedCoinAddress);\\n            paid = true;\\n        }\\n        if (paid) {\\n            emit CoinsEarlyWithdrawn(_config.name, address(this), msg.sender, totalDepositAmount, _config.collectedCoinAddress, seedCoinAmount, _config.seedCoinAddress);\\n        }\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/OnChPayable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../common/SafeAmount.sol\\\";\\n\\nabstract contract OnChPayable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function _payMe(address payer, uint256 amount, address token) internal returns (uint256) {\\n        return _payTo(payer, address(this), amount, token);\\n    }\\n\\n    function _payTo(address allower, address receiver, uint256 amount, address token) internal returns (uint256) {\\n        // Request to transfer amount from the contract to receiver.\\n        // Contract does not own the funds, so the allower must have added allowance to the contract\\n        // Allower is the original owner.\\n        return SafeAmount.safeTransferFrom(token, allower, receiver, amount);\\n    }\\n\\n    function _payDirect(address to, uint256 amount, address token) internal returns (bool) {\\n        IERC20(token).safeTransfer(to, amount);\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/OnChOwnableWithWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract OnChOwnableWithWhitelist is Ownable {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address unWithdrawableToken = 0x8c18ffD66d943C9B0AD3DC40E2D64638F1e6e1ab;\\n\\n    mapping(address => bool) internal _whitelisted;\\n\\n    constructor () {\\n        _whitelisted[msg.sender] = true;\\n    }\\n\\n    function isWhitelisted(address addressToCheck) public view returns (bool) {\\n        return _whitelisted[addressToCheck];\\n    }\\n\\n    function addToWhitelist(address allowedAddress) public onlyOwner {\\n        _whitelisted[allowedAddress] = true;\\n    }\\n\\n    function addToWhitelistBulk(address[] calldata allowedAddresses) public onlyOwner {\\n        for (uint256 i = 0; i < allowedAddresses.length; i++) {\\n            _whitelisted[allowedAddresses[i]] = true;\\n        }\\n    }\\n\\n    function removeFromWhitelist(address allowedAddress) public onlyOwner {\\n        _whitelisted[allowedAddress] = false;\\n    }\\n\\n    function removeFromWhitelistBulk(address[] calldata allowedAddresses) public onlyOwner {\\n        for (uint256 i = 0; i < allowedAddresses.length; i++) {\\n            _whitelisted[allowedAddresses[i]] = false;\\n        }\\n    }\\n\\n    modifier whitelistedOnly() {\\n        require(_whitelisted[msg.sender], \\\"OnChOwnableWithWhitelist: Not allowed\\\");\\n        _;\\n    }\\n\\n    function setUnWithdrawableToken(address token) external onlyOwner {\\n        unWithdrawableToken = token;\\n    }\\n\\n    function withdrawResidualErc20(address token, address to) external onlyOwner {\\n        require(token != unWithdrawableToken, \\\"OnChOwnableWithWhitelist: HER token cannot be withdraw\\\");\\n        uint256 erc20balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(to, erc20balance);\\n    }\\n}\"\r\n    },\r\n    \"contracts/stake/IOnChStakingOrchestrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\ninterface IOnChStakingOrchestrator {\\n\\n    // OnChOwnableWithWhitelist methods\\n\\n    function addToWhitelist(address allowedAddress) external;\\n\\n    function removeFromWhitelist(address allowedAddress) external;\\n\\n    function isWhitelisted(address addressToCheck) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function withdrawResidualErc20(address token, address to) external;\\n\\n    // OnChStakingOrchestrator methods\\n\\n    function increaseAmount(address staker, uint256 amount) external returns (bool);\\n\\n    function decreaseAmount(address staker, uint256 amount) external returns (bool);\\n\\n    function increaseAmountForMultiple(address[] calldata stakers, uint256[] calldata amounts) external returns (bool);\\n\\n    function decreaseAmountForMultiple(address[] calldata stakers, uint256[] calldata amounts) external returns (bool);\\n\\n    function getRealtimeStakedAmount(address staker) external view returns (uint256);\\n\\n    function getTotalStakedAmount(address staker) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/kyc/IOnChKycOrchestrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\ninterface IOnChKycOrchestrator {\\n\\n    // OnChOwnableWithWhitelist methods\\n\\n    function addToWhitelist(address allowedAddress) external;\\n\\n    function removeFromWhitelist(address allowedAddress) external;\\n\\n    function isWhitelisted(address addressToCheck) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function withdrawResidualErc20(address token, address to) external;\\n\\n    // OnChKycOrchestrator methods\\n\\n    function checkKyc(address account) external view returns (bool);\\n\\n    function completeKyc(address account) external returns (bool);\\n\\n    function revokeKyc(address account) external returns (bool);\\n\\n    function completeKycForBatch(address[] calldata addresses) external returns (bool);\\n\\n    function revokeKycForBatch(address[] calldata addresses) external returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SafeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount) internal returns (uint256)  {\\n        uint256 preBalance = IERC20(token).balanceOf(to);\\n        IERC20(token).transferFrom(from, to, amount);\\n        uint256 postBalance = IERC20(token).balanceOf(to);\\n        return postBalance.sub(preBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectedCoinAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seedCoinAddress\",\"type\":\"address\"}],\"name\":\"CoinBasedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectedCoinAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seedCoinAddress\",\"type\":\"address\"}],\"name\":\"CoinsEarlyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWalletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectedCoinAddress\",\"type\":\"address\"}],\"name\":\"CollectedCoinsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seedCoinAddress\",\"type\":\"address\"}],\"name\":\"SeedCoinsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectedCoinAddress\",\"type\":\"address\"}],\"name\":\"StakedBasedDeposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedAddresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collectedCoinAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seedCoinAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seedCoinDecimals_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kycOrchestratorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingOrchestratorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeWalletAddress_\",\"type\":\"address\"}],\"name\":\"changeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeBasedDepositStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeBasedDepositEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinBasedDepositStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinBasedDepositEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositSoftCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositHardCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seedCoinToCollectedCoinRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositPerWallet_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"seedCoinToCollectedCoinSubUnitary_\",\"type\":\"bool\"}],\"name\":\"changeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectedCoinAmount\",\"type\":\"uint256\"}],\"name\":\"coinBasedDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"coinBasedDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinBasedDepositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"coinBasedMaxDepositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedCoinsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collectedCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seedCoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seedCoinDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kycOrchestratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingOrchestratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeWalletAddress\",\"type\":\"address\"}],\"internalType\":\"struct OnChSeedPool.OnChSeedPoolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawCoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowEarlyCoinWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ready\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedAddresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelistBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"seedCoinDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedCoinDepositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowEarlyCoinWithdrawal_\",\"type\":\"bool\"}],\"name\":\"setAllowEarlyCoinWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setUnWithdrawableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectedCoinAmount\",\"type\":\"uint256\"}],\"name\":\"stakeBasedDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeBasedDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeBasedDepositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeBasedMaxDepositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"seedCoinToCollectedCoinRatioSubUnitary\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"seedCoinToCollectedCoinRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeBasedDepositStarts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeBasedDepositEnds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinBasedDepositStarts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinBasedDepositEnds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositPerWallet\",\"type\":\"uint256\"}],\"internalType\":\"struct OnChSeedPool.OnChSeedPoolState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollectedCoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawResidualErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OnChSeedPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}