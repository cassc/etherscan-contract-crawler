{"SourceCode": "// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract $ES_Voting is Ownable{\r\n    // create a struct template for each of the initiatives\r\n    struct Initiative {\r\n        uint256 id;\r\n        string initiative;\r\n        uint256 numberOfVotes;\r\n    }\r\n\r\n    // list of all the initiatives\r\n    Initiative[] public initiatives;\r\n\r\n    // this is the owner's address\r\n    address public _owner;\r\n\r\n    // token used to montior voters level\r\n    address public voteToken;\r\n\r\n    // map of voter addresses\r\n    mapping(address => bool) public voters;\r\n\r\n    // array of voters\r\n    address [] public listOfVoters;\r\n\r\n    // create voting seesion start and end\r\n    uint256 public votingStart;\r\n    uint256 public votingEnd;\r\n\r\n    // create voting status\r\n    bool public votingStarted;\r\n\r\n    // Define an enum for the voting options\r\n    enum VotingOption { Zero, One, Two, Three, Four, Five }\r\n\r\n    // modifers\r\n    modifier votingOnGoing() {\r\n        require(votingStarted, \"No voting yet\");\r\n        _;\r\n    }\r\n\r\n    // create constructor\r\n    constructor(address _voteToken) {\r\n        voteToken = _voteToken;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    //functions\r\n    //create a vote session\r\n    function startVoting(string[] memory _initiatives, uint256 _votingDuration) public onlyOwner {\r\n        require(votingStarted == false, \"Voting is currently active\");\r\n        delete initiatives;\r\n        resetAllVoterStatus();\r\n\r\n        for(uint256 i = 0; i < _initiatives.length; i++) {\r\n            initiatives.push(\r\n                Initiative({id: i, initiative: _initiatives[i], numberOfVotes: 0})\r\n            );\r\n        }\r\n        votingStarted = true;\r\n        votingStart = block.timestamp;\r\n        votingEnd = block.timestamp + (_votingDuration * 1 minutes);\r\n    }\r\n\r\n    // to add a new initiative\r\n    function addInitiative(string memory _initiative) public onlyOwner votingOnGoing {\r\n        require(checkVotingPeriod(), \"Voting has ended\");\r\n        initiatives.push(\r\n            Initiative({id: initiatives.length, initiative: _initiative, numberOfVotes: 0})\r\n        );\r\n    }\r\n\r\n    // check voter status\r\n    function checkVoterStatus(address _voter) public view votingOnGoing returns (bool) {\r\n        if(voters[_voter] == true){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getVoteTokenBalance(address account) public view returns (uint256 _balance){\r\n        _balance = IERC20(voteToken).balanceOf(account);\r\n        return (_balance);\r\n    }\r\n\r\n    //vote function\r\n    function vote(uint256 _id) public votingOnGoing {\r\n        require(checkVotingPeriod(), \"Voting has ended\");\r\n        require(!voters[msg.sender], \"You already voted!\");\r\n        uint256 balance = getVoteTokenBalance(msg.sender);\r\n\r\n        VotingOption voteValue;\r\n\r\n        if (balance >= 17296695 * 10**18) {\r\n            voteValue = VotingOption.Five;\r\n        } else if (balance >= 8648347 * 10**18) {\r\n            voteValue = VotingOption.Four;\r\n        } else if (balance >= 4324173 * 10**18) {\r\n            voteValue = VotingOption.Three;\r\n        } else if (balance >= 2162086 * 10**18) {\r\n            voteValue = VotingOption.Two;\r\n        } else if (balance >= 864834 * 10**18) {\r\n            voteValue = VotingOption.One;\r\n        } else {\r\n            voteValue = VotingOption.Zero;\r\n        }\r\n\r\n        // Update the numberOfVotes based on the voteValue\r\n        initiatives[_id].numberOfVotes += uint8(voteValue);\r\n\r\n        // Mark the sender as a voter and add them to the list\r\n        voters[msg.sender] = true;\r\n        listOfVoters.push(msg.sender);\r\n    }\r\n\r\n    // get number of votes\r\n    function retrieveVotes() public view returns (Initiative[] memory) {\r\n        return initiatives;\r\n    }\r\n\r\n    function retrieveVoters() public view returns (address[] memory) {\r\n        return listOfVoters;\r\n    }\r\n\r\n    // view voting time\r\n    function votingTimer() public view votingOnGoing returns(uint256) {\r\n        if(block.timestamp >= votingEnd){\r\n            return 0;\r\n        }\r\n        return (votingEnd - block.timestamp);\r\n    }\r\n\r\n    // check if voting period is still ongoing\r\n    function checkVotingPeriod() public returns (bool) {\r\n        if(votingTimer() > 0){\r\n            return true;\r\n        }\r\n        votingStarted = false;\r\n        return false;\r\n    }\r\n\r\n    // reset all voters status\r\n    function resetAllVoterStatus() public onlyOwner {\r\n        for(uint256 i = 0; i < listOfVoters.length; i++){\r\n            voters[listOfVoters[i]] = false;\r\n        }\r\n        delete listOfVoters;\r\n    }\r\n\r\n    function setVoteToken(address token) public onlyOwner {\r\n        require(token != address(0), \"Can't Set Zero Address\");\r\n        voteToken = token;\r\n    }\r\n\r\n     //Transfers ownership of the contract to a new account (`newOwner`).\r\n     //Can only be called by the current owner.\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    //utility extrasa\r\n    //get stuck tokens ftom contract\r\n    function rescueToken(address tokenAddress, address to) external onlyOwner returns (bool success) {\r\n    \tuint256 _contractBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n\r\n        return IERC20(tokenAddress).transfer(to, _contractBalance);\r\n    }\r\n\r\n    //gets stuck bnb from contract\r\n    function rescueBNB(uint256 amount) external onlyOwner{\r\n    \tpayable(msg.sender).transfer(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initiative\",\"type\":\"string\"}],\"name\":\"addInitiative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"checkVoterStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVotingPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVoteTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initiatives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"initiative\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfVoters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllVoterStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"initiative\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct $ES_Voting.Initiative[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setVoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_initiatives\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_votingDuration\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "$ES_Voting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000049214162b736de0f0061c1ba48e8d45eed3568bc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://309120f8cc1cea80d51640fd26432fabfe6ac6b17ccaa642fe2c992e74486f3c"}