{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract TokenVesting is Ownable {\\n    // Contract libs\\n    using SafeMath for uint256;\\n\\n    address public token;\\n\\n    // Contract events\\n    event Released(address indexed beneficiary, uint256 amount);\\n\\n    // Vesting information struct\\n    struct VestingBeneficiary {\\n        address beneficiary;\\n        uint256 lockDuration;\\n        uint256 duration;\\n        uint256 amount;\\n        uint256 leftOverVestingAmount;\\n        uint256 released;\\n        uint256 upfrontAmount;\\n        uint256 startedAt;\\n        uint256 interval;\\n        uint256 lastReleasedAt;\\n    }\\n\\n    // Vesting beneficiary list\\n    mapping(address => VestingBeneficiary) public beneficiaries;\\n    address[] public beneficiaryAddresses;\\n    // Token deployed date\\n    uint256 public tokenListingDate;\\n    uint256 public tokenVestingCap;\\n\\n    constructor(address _token, uint256 _tokenListingDate) {\\n        token = _token;\\n        if (_tokenListingDate > 0) {\\n            tokenListingDate = _tokenListingDate;\\n        }\\n    }\\n\\n    // only owner or added beneficiaries can release the vesting amount\\n    modifier onlyBeneficiaries() {\\n        require(\\n            owner() == _msgSender() || beneficiaries[_msgSender()].amount > 0,\\n            \\\"You cannot release tokens!\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set first day token listing on exchange for vesting process\\n     */\\n    function setTokenListingDate(uint256 _tokenListingDate) public onlyOwner {\\n        require(\\n            _tokenListingDate >= block.timestamp,\\n            \\\"Token listing must be in future date\\\"\\n        );\\n\\n        tokenListingDate = _tokenListingDate;\\n\\n        uint256 beneficiaryCount = beneficiaryAddresses.length;\\n        for (uint256 i = 0; i < beneficiaryCount; i++) {\\n            VestingBeneficiary storage info = beneficiaries[\\n            beneficiaryAddresses[i]\\n            ];\\n\\n            info.startedAt = _tokenListingDate.add(info.lockDuration);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add new beneficiary to vesting contract with some conditions.\\n     */\\n    function addBeneficiary(\\n        address _beneficiary,\\n        uint256 _amount,\\n        uint256 _lockDuration,\\n        uint256 _duration,\\n        uint256 _upfrontAmount,\\n        uint256 _interval\\n    ) public onlyOwner {\\n        require(\\n            _beneficiary != address(0),\\n            \\\"The beneficiary's address cannot be 0\\\"\\n        );\\n\\n        require(_amount > 0, \\\"Shares amount has to be greater than 0\\\");\\n        require(\\n            tokenVestingCap.add(_amount) <= IERC20(token).totalSupply(),\\n            \\\"Full token vesting to other beneficiaries. Can not add new beneficiary\\\"\\n        );\\n        require(\\n            beneficiaries[_beneficiary].amount == 0,\\n            \\\"The beneficiary has added to the vesting pool already\\\"\\n        );\\n\\n        // Add new vesting beneficiary\\n        uint256 _leftOverVestingAmount = _amount.sub(_upfrontAmount);\\n        uint256 vestingStartedAt = tokenListingDate.add(_lockDuration);\\n        beneficiaries[_beneficiary] = VestingBeneficiary(\\n            _beneficiary,\\n            _lockDuration,\\n            _duration,\\n            _amount,\\n            _leftOverVestingAmount,\\n            _upfrontAmount,\\n            _upfrontAmount,\\n            vestingStartedAt,\\n            _interval,\\n            0\\n        );\\n\\n        beneficiaryAddresses.push(_beneficiary);\\n        tokenVestingCap = tokenVestingCap.add(_amount);\\n\\n        // Transfer immediately if any upfront amount\\n        if (_upfrontAmount > 0) {\\n            emit Released(_beneficiary, _amount);\\n            IERC20(token).transfer(_beneficiary, _upfrontAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get new vested amount of beneficiary base on vesting schedule of this beneficiary.\\n     */\\n    function releasableAmount(address _beneficiary)\\n    public\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    )\\n    {\\n        VestingBeneficiary memory info = beneficiaries[_beneficiary];\\n        if (info.amount == 0) {\\n            return (0, 0, block.timestamp);\\n        }\\n\\n        (uint256 _vestedAmount, uint256 _lastIntervalDate) = vestedAmount(\\n            _beneficiary\\n        );\\n\\n        return (\\n        _vestedAmount,\\n        _vestedAmount.sub(info.released),\\n        _lastIntervalDate\\n        );\\n    }\\n\\n    /**\\n     * @dev Get total vested amount of beneficiary base on vesting schedule of this beneficiary.\\n     */\\n    function vestedAmount(address _beneficiary)\\n    public\\n    view\\n    returns (uint256, uint256)\\n    {\\n        VestingBeneficiary memory info = beneficiaries[_beneficiary];\\n        require(info.amount > 0, \\\"The beneficiary's address cannot be found\\\");\\n        // Listing date is not set\\n        if (tokenListingDate == 0 || info.startedAt == 0) {\\n            return (info.released, info.lastReleasedAt);\\n        }\\n\\n        // No vesting (All amount unlock at the TGE)\\n        if (info.duration == 0) {\\n            return (info.amount, info.startedAt);\\n        }\\n\\n        // Vesting has not started yet\\n        if (block.timestamp < info.startedAt) {\\n            return (info.released, info.lastReleasedAt);\\n        }\\n\\n        // Vesting is done\\n        if (block.timestamp >= info.startedAt.add(info.duration)) {\\n            return (info.amount, info.startedAt.add(info.duration));\\n        }\\n\\n        // It's too soon to next release\\n        if (\\n            info.lastReleasedAt > 0 &&\\n            block.timestamp - info.interval < info.lastReleasedAt\\n        ) {\\n            return (info.released, info.lastReleasedAt);\\n        }\\n\\n        // Vesting is interval counter\\n        uint256 totalVestedAmount = info.released;\\n        uint256 lastIntervalDate = info.lastReleasedAt > 0\\n        ? info.lastReleasedAt\\n        : info.startedAt;\\n\\n        uint256 multiplyIntervals;\\n        while (block.timestamp >= lastIntervalDate.add(info.interval)) {\\n            multiplyIntervals = multiplyIntervals.add(1);\\n            lastIntervalDate = lastIntervalDate.add(info.interval);\\n        }\\n\\n        if (multiplyIntervals > 0) {\\n            uint256 newVestedAmount = info\\n            .leftOverVestingAmount\\n            .mul(multiplyIntervals.mul(info.interval))\\n            .div(info.duration);\\n\\n            totalVestedAmount = totalVestedAmount.add(newVestedAmount);\\n        }\\n\\n        return (totalVestedAmount, lastIntervalDate);\\n    }\\n\\n    /**\\n     * @dev Release vested tokens to a specified beneficiary.\\n     */\\n    function releaseTo(\\n        address _beneficiary,\\n        uint256 _amount,\\n        uint256 _lastIntervalDate\\n    ) internal returns (bool) {\\n        VestingBeneficiary storage info = beneficiaries[_beneficiary];\\n        if (block.timestamp < _lastIntervalDate) {\\n            return false;\\n        }\\n        // Update beneficiary information\\n        info.released = info.released.add(_amount);\\n        info.lastReleasedAt = _lastIntervalDate;\\n\\n        // Emit event to of new release\\n        emit Released(_beneficiary, _amount);\\n        // Transfer new released amount to vesting beneficiary\\n        IERC20(token).transfer(_beneficiary, _amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Release vested tokens to a all beneficiaries.\\n     */\\n    function releaseBeneficiaryTokens() public onlyOwner {\\n        // Get current vesting beneficiaries\\n        uint256 beneficiariesCount = beneficiaryAddresses.length;\\n        for (uint256 i = 0; i < beneficiariesCount; i++) {\\n            // Calculate the releasable amount\\n            (\\n            ,\\n            uint256 _newReleaseAmount,\\n            uint256 _lastIntervalDate\\n            ) = releasableAmount(beneficiaryAddresses[i]);\\n\\n            // Release new vested token to the beneficiary\\n            if (_newReleaseAmount > 0) {\\n                releaseTo(\\n                    beneficiaryAddresses[i],\\n                    _newReleaseAmount,\\n                    _lastIntervalDate\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Release vested tokens to current beneficiary.\\n     */\\n    function releaseMyTokens() public onlyBeneficiaries {\\n        // Calculate the releasable amount\\n        (\\n        ,\\n        uint256 _newReleaseAmount,\\n        uint256 _lastIntervalDate\\n        ) = releasableAmount(_msgSender());\\n\\n        // Release new vested token to the beneficiary\\n        if (_newReleaseAmount > 0) {\\n            releaseTo(_msgSender(), _newReleaseAmount, _lastIntervalDate);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenListingDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upfrontAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftOverVestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upfrontAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleasedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaryAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseBeneficiaryTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenListingDate\",\"type\":\"uint256\"}],\"name\":\"setTokenListingDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenListingDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenVestingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000076b5ea2a75e96f629d739537e152062b4b89eee90000000000000000000000000000000000000000000000000000000061ab4ed0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}