{"SourceCode": "// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YieldStaking.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\ncontract YieldStaking is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 rewardLockedUp; // Reward locked up.\r\n        uint256 nextHarvestUntil; // When can the user harvest again.\r\n        uint256 depositTime; // time when user last deposited KST\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. KST to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that KST distribution occurs.\r\n        uint256 accKstPerShare; // Accumulated KST per share, times UNITS. See below.\r\n        uint16 depositFeeBP; // Deposit fee in basis points\r\n        uint256 harvestInterval; // Harvest interval in seconds\r\n        uint256 totalLp; // Total token in Pool\r\n        uint256 spentTokens; // Spent tokens until now, even if they are not withdrawn.\r\n        bool burnFee; // burn fee on early withdrawal\r\n    }\r\n\r\n    IERC20 internal kst;\r\n\r\n    uint256 internal constant UNITS = 1e12;\r\n\r\n    // Deposit Fee address\r\n    address public feeAddress;\r\n\r\n    // KST tokens created per block\r\n    uint256 public kstPerBlock;\r\n\r\n    // Max harvest interval: 14 days\r\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\r\n\r\n    // Maximum deposit fee rate: 10%\r\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\r\n\r\n    // Info of each pool\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    mapping(address => uint256) private _unlockTime;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n\r\n    // The block number when KST mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // Total locked up rewards\r\n    uint256 public totalLockedUpRewards;\r\n\r\n    // Total KST being staked\r\n    uint256 public kstInPools;\r\n\r\n    // rewards wallet\r\n    address public kstRewardWallet;\r\n\r\n    address public burnAddress;\r\n\r\n    mapping(address => bool) private _isIDO;\r\n    address private idoFactory;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event EmissionRateUpdated(\r\n        address indexed caller,\r\n        uint256 previousAmount,\r\n        uint256 newAmount\r\n    );\r\n    event RewardLockedUp(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amountLockedUp\r\n    );\r\n    event FeeAddressChanged(\r\n        address indexed caller,\r\n        address oldAddress,\r\n        address newAddress\r\n    );\r\n    event AllocPointsUpdated(\r\n        address indexed caller,\r\n        uint256 previousAmount,\r\n        uint256 newAmount\r\n    );\r\n    event Lock(\r\n        address indexed account,\r\n        uint256 timestamp,\r\n        uint256 unlockTime,\r\n        address locker\r\n    );\r\n\r\n    constructor(\r\n        IERC20 _kst,\r\n        uint256 _kstPerBlock,\r\n        address _kstRewardWallet\r\n    ) {\r\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\r\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\r\n\r\n        kst = _kst;\r\n        kstPerBlock = _kstPerBlock;\r\n        feeAddress = msg.sender;\r\n        kstRewardWallet = _kstRewardWallet;\r\n    }\r\n\r\n    /// @notice Return reward multiplier over the given _from to _to block.\r\n    /// @dev View function that returns uint256\r\n    /// @param _from from block\r\n    /// @param _to to block\r\n    /// @return reward multiplier\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n    /// @notice Set farming start, can call only once\r\n    /// @dev Sets the startblock to the current block and updates the pools\r\n    function startFarming() public onlyOwner {\r\n        require(block.number < startBlock, \"Error::Farm started already\");\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            pool.lastRewardBlock = block.number;\r\n        }\r\n\r\n        startBlock = block.number;\r\n    }\r\n\r\n    /// @notice Returns the amount of pools\r\n    /// @dev Returns the amount of pools\r\n    /// @return Amount of pools\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    /// @notice Returns the users unlock time\r\n    /// @dev Returns the users unlock time in seconds\r\n    /// @param account users wallet address\r\n    /// @return Users unlock time in UNIX timestamp\r\n    function unlockTime(address account) external view returns (uint256) {\r\n        return _unlockTime[account];\r\n    }\r\n\r\n    /// @notice Returns if the provided address is an IDO\r\n    /// @dev Returns if the provided address is an IDO\r\n    /// @param account address\r\n    /// @return Returns if the provided address is an IDO\r\n    function isIDO(address account) external view returns (bool) {\r\n        return _isIDO[account];\r\n    }\r\n\r\n    /// @notice Returns users staked balance\r\n    /// @dev Returns users staked balance in a certain pool\r\n    /// @param _pid pool id\r\n    /// @param _user users wallet address\r\n    /// @return Users staked balance\r\n    function stakedBalance(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return user.amount;\r\n    }\r\n\r\n    /// @notice Locks the users staked amount\r\n    /// @dev Locks the users staked amount\r\n    /// @param _user users wallet address\r\n    /// @param _lockTime unlock time of tokens\r\n    function lock(address _user, uint256 _lockTime) external onlyIDO {\r\n        _unlockTime[_user] = _lockTime;\r\n        emit Lock(_user, block.timestamp, _lockTime, _msgSender());\r\n    }\r\n\r\n    /// @notice Add a new IDO\r\n    /// @dev Sets a new IDO so it can lock users tokens\r\n    /// @param account IDO address\r\n    function addIDO(address account) external {\r\n        require(\r\n            msg.sender == owner() || msg.sender == idoFactory,\r\n            \"KSTStaking: not ido factory or owner\"\r\n        );\r\n        require(account != address(0), \"KSTStaking: cannot be zero address\");\r\n        _isIDO[account] = true;\r\n    }\r\n\r\n    /// @notice Sets the IDO factory address\r\n    /// @dev Sets the IDO factory address\r\n    /// @param _address IDO address\r\n    function setFactoryAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"KSTstaking: wrong address\");\r\n        idoFactory = _address;\r\n    }\r\n\r\n    /// @notice Adds a new LP to the pool.\r\n    /// @dev Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\r\n    /// @param _allocPoint pools allocation point\r\n    /// @param _lpToken LP token address\r\n    /// @param _depositFeeBP deposit fee in basis points\r\n    /// @param _harvestInterval reward harvesting interval\r\n    /// @param _withUpdate update all of the pools\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        bool _withUpdate,\r\n        bool _burnFee\r\n    ) public onlyOwner {\r\n        require(\r\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\r\n            \"add: deposit fee too high\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"add: invalid harvest interval\"\r\n        );\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock\r\n            ? block.number\r\n            : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accKstPerShare: 0,\r\n                depositFeeBP: _depositFeeBP,\r\n                harvestInterval: _harvestInterval,\r\n                totalLp: 0,\r\n                spentTokens: 0,\r\n                burnFee: _burnFee\r\n            })\r\n        );\r\n    }\r\n\r\n    /// @notice Update the given pool's KST allocation point and deposit fee.\r\n    /// @dev Update the given pool's KST allocation point and deposit fee.\r\n    /// @param _allocPoint pools allocation point\r\n    /// @param _pid  pool id\r\n    /// @param _depositFeeBP deposit fee in basis points\r\n    /// @param _harvestInterval reward harvesting interval\r\n    /// @param _withUpdate update all of the pools\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        bool _withUpdate,\r\n        bool _burnFee\r\n    ) public onlyOwner {\r\n        require(\r\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\r\n            \"set: deposit fee too high\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"set: invalid harvest interval\"\r\n        );\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n        poolInfo[_pid].harvestInterval = _harvestInterval;\r\n        poolInfo[_pid].burnFee = _burnFee;\r\n    }\r\n\r\n    /// @notice See pending KST rewards\r\n    /// @dev See pending KST rewards for a certain pool\r\n    /// @param _pid pool id\r\n    /// @param _user users wallet address\r\n    /// @return pending KST reward\r\n    function pendingReward(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accKstPerShare = pool.accKstPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 rewards = getPoolReward(\r\n                pool.lastRewardBlock,\r\n                block.number,\r\n                kstPerBlock,\r\n                pool.spentTokens\r\n            );\r\n            accKstPerShare = accKstPerShare.add(\r\n                rewards.mul(UNITS).div(lpSupply)\r\n            );\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(accKstPerShare).div(UNITS).sub(\r\n            user.rewardDebt\r\n        );\r\n        return pending.add(user.rewardLockedUp);\r\n    }\r\n\r\n    /// @notice See if user can harvest KST\r\n    /// @dev View function to see if user can harvest KST\r\n    /// @param _pid pool id\r\n    /// @param _user users wallet address\r\n    /// @return can user harvest KST\r\n    function canHarvest(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return\r\n            block.number >= startBlock &&\r\n            block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    /// @notice Update reward vairables for all pools.\r\n    /// @dev Update reward vairables for all pools.\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    /// @notice Update reward variables of the given pool to be up-to-date.\r\n    /// @dev Update reward variables of the given pool to be up-to-date.\r\n    /// @param _pid pool id\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpSupply = pool.totalLp;\r\n        if (lpSupply == 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 rewards = getPoolReward(\r\n            pool.lastRewardBlock,\r\n            block.number,\r\n            kstPerBlock,\r\n            pool.spentTokens\r\n        );\r\n\r\n        pool.spentTokens += rewards;\r\n\r\n        pool.accKstPerShare = pool.accKstPerShare.add(\r\n            rewards.mul(UNITS).div(pool.totalLp)\r\n        );\r\n\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    /// @notice Deposit LP tokens to MasterChef for KST allocation.\r\n    /// @dev Deposit LP tokens to MasterChef for KST allocation.\r\n    /// @param _pid pool id\r\n    /// @param _amount users wallet address\r\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\r\n        require(\r\n            block.number >= startBlock,\r\n            \"KST Yield Staking: Can not deposit before start\"\r\n        );\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingKst(_pid);\r\n\r\n        if (_amount > 0) {\r\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\r\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\r\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\r\n\r\n            _amount = afterDeposit.sub(beforeDeposit);\r\n\r\n            if (pool.depositFeeBP > 0) {\r\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\r\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\r\n\r\n                _amount = _amount.sub(depositFee);\r\n            }\r\n\r\n            user.amount = user.amount.add(_amount);\r\n            pool.totalLp = pool.totalLp.add(_amount);\r\n            user.depositTime = block.timestamp;\r\n\r\n            if (address(pool.lpToken) == address(kst)) {\r\n                kstInPools = kstInPools.add(_amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accKstPerShare).div(UNITS);\r\n        emit Deposit(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    /// @notice  Withdraw tokens from masterchef\r\n    /// @dev  Withdraw tokens from masterchef and update the pool\r\n    /// @param _pid pool id\r\n    /// @param _amount users wallet address\r\n    function withdraw(uint256 _pid, uint256 _amount)\r\n        public\r\n        lockable\r\n        nonReentrant\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        //this will make sure that user can only withdraw from his pool\r\n        require(user.amount >= _amount, \"Withdraw: User amount not enough\");\r\n\r\n        //Cannot withdraw more than pool's balance\r\n        require(pool.totalLp >= _amount, \"Withdraw: Pool total not enough\");\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingKst(_pid);\r\n\r\n        if (_amount > 0) {\r\n            if (pool.burnFee) {\r\n                (uint256 withdrawAmount, uint256 burnFee) = withdrawalFee(\r\n                    (user.depositTime),\r\n                    _amount\r\n                );\r\n                user.amount = user.amount.sub(_amount);\r\n                pool.totalLp = pool.totalLp.sub(_amount);\r\n                if (address(pool.lpToken) == address(kst)) {\r\n                    kstInPools = kstInPools.sub(_amount);\r\n                }\r\n                pool.lpToken.safeTransfer(_msgSender(), withdrawAmount);\r\n                if (burnFee > 0) {\r\n                    pool.lpToken.safeTransfer(burnAddress, burnFee);\r\n                }\r\n                emit Withdraw(_msgSender(), _pid, withdrawAmount);\r\n            } else {\r\n                user.amount = user.amount.sub(_amount);\r\n                pool.totalLp = pool.totalLp.sub(_amount);\r\n                if (address(pool.lpToken) == address(kst)) {\r\n                    kstInPools = kstInPools.sub(_amount);\r\n                }\r\n                pool.lpToken.safeTransfer(_msgSender(), _amount);\r\n                emit Withdraw(_msgSender(), _pid, _amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accKstPerShare).div(UNITS);\r\n    }\r\n\r\n    /// @notice  Check the users withdrawal fee\r\n    /// @dev  Check the users withdrawal fee\r\n    /// @param _pid pool id\r\n    /// @param _user users wallet address\r\n    /// @return amount\r\n    /// @return burnFee\r\n    function checkWithdrawalFee(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256 amount, uint256 burnFee)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        (amount, burnFee) = withdrawalFee(user.depositTime, user.amount);\r\n        return (amount, burnFee);\r\n    }\r\n\r\n    function withdrawalFee(uint256 _depositTime, uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256 amount, uint256 burnFee)\r\n    {\r\n        if (block.timestamp - _depositTime <= 28 days) {\r\n            burnFee = _amount.mul(500).div(10000); // 5% burn\r\n            amount = _amount - burnFee;\r\n            return (amount, burnFee);\r\n        } else if (\r\n            block.timestamp - _depositTime > 28 days &&\r\n            block.timestamp - _depositTime <= 42 days\r\n        ) {\r\n            // 6 weeks\r\n            burnFee = _amount.mul(300).div(10000); // 3% burn\r\n            amount = _amount - burnFee;\r\n            return (amount, burnFee);\r\n        } else if (\r\n            block.timestamp - _depositTime > 42 days &&\r\n            block.timestamp - _depositTime <= 56 days\r\n        ) {\r\n            // 8 weeks\r\n            burnFee = _amount.mul(200).div(10000); // 2% burn\r\n            amount = _amount - burnFee;\r\n            return (amount, burnFee);\r\n        } else if (\r\n            block.timestamp - _depositTime > 56 days &&\r\n            block.timestamp - _depositTime <= 70 days\r\n        ) {\r\n            // 10 weeks\r\n            burnFee = _amount.mul(100).div(10000); // 1% burn\r\n            amount = _amount - burnFee;\r\n            return (amount, burnFee);\r\n        } else if (\r\n            block.timestamp - _depositTime > 70 days &&\r\n            block.timestamp - _depositTime <= 84 days\r\n        ) {\r\n            // 12 weeks\r\n            burnFee = _amount.mul(50).div(10000); // 0.5% burn\r\n            amount = _amount - burnFee;\r\n            return (amount, burnFee);\r\n        } else if (\r\n            block.timestamp - _depositTime > 84 days &&\r\n            block.timestamp - _depositTime <= 98 days\r\n        ) {\r\n            // 14 weeks\r\n            burnFee = _amount.mul(25).div(10000); // 0.25% burn\r\n            amount = _amount - burnFee;\r\n            return (amount, burnFee);\r\n        } else if (block.timestamp - _depositTime > 98 days) {\r\n            // more than 14 weeks\r\n            burnFee = 0;\r\n            amount = _amount;\r\n            return (amount, burnFee);\r\n        }\r\n    }\r\n\r\n    /// @notice  Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    /// @dev  Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    /// @param _pid pool id\r\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n        uint256 amount = user.amount;\r\n\r\n        //Cannot withdraw more than pool's balance\r\n        require(\r\n            pool.totalLp >= amount,\r\n            \"EmergencyWithdraw: Pool total not enough\"\r\n        );\r\n\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        user.rewardLockedUp = 0;\r\n        user.nextHarvestUntil = 0;\r\n        pool.totalLp = pool.totalLp.sub(amount);\r\n\r\n        if (address(pool.lpToken) == address(kst)) {\r\n            kstInPools = kstInPools.sub(amount);\r\n        }\r\n        pool.lpToken.safeTransfer(_msgSender(), amount);\r\n\r\n        emit EmergencyWithdraw(_msgSender(), _pid, amount);\r\n    }\r\n\r\n    // Pay or lockup pending KST.\r\n    function payOrLockupPendingKst(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\r\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(pool.accKstPerShare).div(UNITS).sub(\r\n            user.rewardDebt\r\n        );\r\n        if (canHarvest(_pid, _msgSender())) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards = totalLockedUpRewards.sub(\r\n                    user.rewardLockedUp\r\n                );\r\n                user.rewardLockedUp = 0;\r\n                user.nextHarvestUntil = block.timestamp.add(\r\n                    pool.harvestInterval\r\n                );\r\n\r\n                // send rewards\r\n                kst.safeTransferFrom(kstRewardWallet, msg.sender, totalRewards);\r\n            }\r\n        } else if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\r\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\r\n            emit RewardLockedUp(_msgSender(), _pid, pending);\r\n        }\r\n    }\r\n\r\n    /// @notice  Get rewards for a specific amount of tokenPerBlocks\r\n    /// @dev  Get rewards for a specific amount of tokenPerBlocks\r\n    /// @param _from from block\r\n    /// @param _to to block\r\n    /// @param _tokenPerBlock token per block\r\n    /// @param _spentTokens users spent tokens\r\n    /// @return rewards\r\n    function getPoolReward(\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _tokenPerBlock,\r\n        uint256 _spentTokens\r\n    ) public view returns (uint256 rewards) {\r\n        // Calculate number of blocks covered.\r\n        uint256 blockCount = _to.sub(_from);\r\n\r\n        // Get the amount of token for this pool\r\n        uint256 amount = blockCount.mul(_tokenPerBlock);\r\n\r\n        // Retrieve allowance and balance\r\n        uint256 allowedToken = kst.allowance(kstRewardWallet, address(this));\r\n        uint256 farmingBalance = kst.balanceOf(kstRewardWallet);\r\n\r\n        // If the actual balance is less than the allowance, use the balance.\r\n        allowedToken = farmingBalance < allowedToken\r\n            ? farmingBalance\r\n            : allowedToken;\r\n\r\n        //no more token to pay as reward\r\n        if (allowedToken <= _spentTokens) {\r\n            return 0;\r\n        }\r\n\r\n        allowedToken = allowedToken - _spentTokens;\r\n\r\n        // If we reached the total amount allowed already, return the allowedToken\r\n        if (allowedToken < amount) {\r\n            rewards = allowedToken;\r\n        } else {\r\n            rewards = amount;\r\n        }\r\n    }\r\n\r\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\r\n\r\n    function updateEmissionRate(uint256 _kstPerBlock) public onlyOwner {\r\n        massUpdatePools();\r\n\r\n        emit EmissionRateUpdated(msg.sender, kstPerBlock, _kstPerBlock);\r\n        kstPerBlock = _kstPerBlock;\r\n    }\r\n\r\n    function updateAllocPoint(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        emit AllocPointsUpdated(\r\n            _msgSender(),\r\n            poolInfo[_pid].allocPoint,\r\n            _allocPoint\r\n        );\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function changeRewardsWallet(address _address) external onlyOwner {\r\n        require(_address != address(0));\r\n        kstRewardWallet = _address;\r\n    }\r\n\r\n    function setBurnAddress(address _address) external onlyOwner {\r\n        burnAddress = _address;\r\n    }\r\n\r\n    function setKstAddress(IERC20 _kst) external onlyOwner {\r\n        kst = _kst;\r\n    }\r\n\r\n    modifier onlyIDO() {\r\n        require(_isIDO[_msgSender()], \"KSTStaking: only IDOs can lock\");\r\n        _;\r\n    }\r\n    modifier lockable() {\r\n        require(\r\n            _unlockTime[_msgSender()] <= block.timestamp,\r\n            \"KSTStaking: account is locked\"\r\n        );\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_kst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kstPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_kstRewardWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_burnFee\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spentTokens\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIDO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kstInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kstPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kstRewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accKstPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_burnFee\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_kst\",\"type\":\"address\"}],\"name\":\"setKstAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kstPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YieldStaking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "000000000000000000000000772722b55cdc2a086abd064267a17855eb15e8b30000000000000000000000000000000000000000000000000151f7a9d5344f8000000000000000000000000009c80dd6c8b38c1999aaaa939b6e6464af4dc1f8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aaa574eb2404dbdcb93f30edc273d85483a72086d33a4096ebf0890a7b1a48f6"}