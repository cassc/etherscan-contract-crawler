{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-11-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.1;\r\ninterface Ipair{\r\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function sync() external;\r\n    function skim(address to) external;\r\n}\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor (address _addr) {\r\n        _owner = _addr;\r\n        emit OwnershipTransferred(address(0), _addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view  returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public  onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract ERC20 {\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() {\r\n        _name = \"KOBE\";\r\n        _symbol = \"KOBE\";\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        uint256 trueAmount = _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\r\n        _balances[sender] = _balances[sender] - amount;//\u4fee\u6539\u4e86\u8fd9\u4e2a\u81f4\u547dbug\r\n        _balances[recipient] = _balances[recipient] + trueAmount;\r\n        emit Transfer(sender, recipient, trueAmount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual  returns (uint256) { }\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\n\r\ncontract KOBE is ERC20, Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    Ipair public pair_USDT;\r\n\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    mapping(address => bool) public isPair;\r\n    mapping(address => bool) public isFree;\r\n    mapping(address => bool) public isBlack;\r\n    mapping(uint256 => uint256) public dayPrice;\r\n    mapping(address => address) public parentList;\r\n    mapping(address => bool) public isRoute;\r\n\r\n    mapping(address => uint256) public buyList;\r\n    mapping(address => uint256) public sellList;\r\n    mapping(address => uint256) public tranList;\r\n\r\n\r\n\r\n    uint256 public nowPrice ;\r\n    uint256 public lastPrice ;\r\n    uint256 public nowTime ;\r\n    uint256 public lastTime ;\r\n    uint256 public extendTime;\r\n    uint256 public startTime;\r\n\r\n    uint256 public rate1 = 200;\r\n    uint256 public rate2 = 100;\r\n    uint256 public rate3 = 100;\r\n    uint256 public rate4 = 100;\r\n\r\n    address public devAddr2=0xA91F3beAAd65977f80cB8EE5ac28FC6425D5aF35;\r\n    address public devAddr3=0x1eF80DdA147f0B566f7d20d8BfFB57bE61840131;\r\n    address public holdAddr=0x0000000000000000000000000000000000000000;\r\n\r\n    uint8 public count=2;\r\n\r\n    constructor () Ownable(msg.sender){\r\n\r\n        isRoute[0x10ED43C718714eb63d5aA57B78B54704E256024E]=true;\r\n        IUniswapV2Router02 _uniswapV2Router =\r\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n        pair_USDT = Ipair(uniswapV2Pair);\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n        _mint(msg.sender, 824000 * 10**18);\r\n\r\n        isFree[msg.sender]=true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )internal override returns (uint256){\r\n        require(!isBlack[_from] || !isBlack[_to],\"addr in black list\");\r\n\r\n        if(_balances[holdAddr]>=815760* 10**18){\r\n            return _amount;\r\n        }\r\n\r\n        if (isFree[_from] || isFree[_to]){\r\n            if(parentList[_to]==address(0)  && !isContract(_from) && !isContract(_to)){\r\n                parentList[_to]=_from;\r\n            }\r\n            if(count==0){\r\n                updatePrice(0,0);\r\n            }else{\r\n                count=count-1;\r\n            }\r\n            return _amount;\r\n        }\r\n\r\n        require(block.timestamp>startTime,\"not start\");\r\n\r\n        uint256 _trueAmount;\r\n        uint8 txType;\r\n        if (_from==uniswapV2Pair  && isRoute[_to]){\r\n            return _amount;\r\n        } else if (_from==uniswapV2Pair  && !isRoute[_to]){\r\n            _trueAmount = _amount * (10000 - (rate1 + rate2 + rate3 + rate4 )) / 10000;\r\n            buyList[_to]=buyList[_to].add(_amount.mul(2));\r\n            _balances[devAddr2] = _balances[devAddr2] + (_amount * rate2 / 10000 );\r\n            _balances[devAddr3] = _balances[devAddr3] + (_amount * rate3 / 10000 );\r\n            _balances[uniswapV2Pair] = _balances[uniswapV2Pair] + (_amount * rate4 / 10000 );\r\n            _balances[holdAddr] = _balances[holdAddr] + (_amount * rate1 / 10000 );\r\n            _trueAmount=_takeInviterFee(_to,_amount,_trueAmount);\r\n            txType=1;\r\n            updatePrice(_trueAmount,txType);\r\n\r\n        } else if (_to==uniswapV2Pair){\r\n            txType=2;\r\n            updatePrice(_amount,txType);\r\n            require(panPrice(),\"price low not allow sell\");\r\n            require(panHold(_from,_amount),\"sell amout gt you hold 80 percent\");\r\n            require(buyList[_from]>=(sellList[_from].add(_amount)),\"sell amout gt buy total\");\r\n\r\n\r\n            _trueAmount = _amount * (10000 - (rate1 + rate2 + rate3 + rate4  )) / 10000;\r\n            sellList[_from]=sellList[_from].add(_amount);\r\n            _balances[devAddr2] = _balances[devAddr2] + (_amount * rate2 / 10000 );\r\n            _balances[devAddr3] = _balances[devAddr3] + (_amount * rate3 / 10000 );\r\n            _balances[uniswapV2Pair] = _balances[uniswapV2Pair] + (_amount * rate4 / 10000 );\r\n            _balances[holdAddr] = _balances[holdAddr] + (_amount * rate1 / 10000 );\r\n            _trueAmount=_takeInviterFee(_from,_amount,_trueAmount);\r\n\r\n        }else{\r\n            if(parentList[_to]==address(0)  && !isContract(_from) && !isContract(_to)){\r\n                parentList[_to]=_from;\r\n            }\r\n            _trueAmount = _amount * (10000 - (rate1 + rate2 + rate3 + rate4  )) / 10000;\r\n            tranList[_to]=tranList[_to].add(_amount);\r\n            _balances[devAddr2] = _balances[devAddr2] + (_amount * rate2 / 10000 );\r\n            _balances[devAddr3] = _balances[devAddr3] + (_amount * rate3 / 10000 );\r\n            _balances[uniswapV2Pair] = _balances[uniswapV2Pair] + (_amount * rate4 / 10000 );\r\n            _balances[holdAddr] = _balances[holdAddr] + (_amount * rate1 / 10000 );\r\n            _trueAmount=_takeInviterFee(_from,_amount,_trueAmount);\r\n            txType=0;\r\n            updatePrice(_trueAmount,txType);\r\n            pair_USDT.sync();\r\n        }\r\n\r\n        emit Transfer(_from, holdAddr, (_amount * rate1 / 10000 ));\r\n        emit Transfer(_from, devAddr2, (_amount * rate2 / 10000 ));\r\n        emit Transfer(_from, devAddr3, (_amount * rate3 / 10000 ));\r\n        emit Transfer(_from, uniswapV2Pair, (_amount * rate4 / 10000 ));\r\n\r\n        return _trueAmount;\r\n    }\r\n\r\n    event ParentFee(\r\n        address _addr,\r\n        address _paddr,\r\n        int256 _i,\r\n        uint256 _rate,\r\n        uint256 _fee\r\n    );\r\n\r\n    function _takeInviterFee(\r\n        address addr,\r\n        uint256 _amount,\r\n        uint256 _trueAmount\r\n    ) private returns(uint256){\r\n\r\n        address currAddr=addr;\r\n        for (int256 i = 0; i < 8; i++) {\r\n            uint256 rate;\r\n            if (i == 0) {\r\n                rate = 40;\r\n            } else if (i == 1) {\r\n                rate = 20;\r\n            } else {\r\n                rate = 5;\r\n            }\r\n            address paddr=parentList[currAddr];\r\n            if (paddr == address(0)) {\r\n                _balances[devAddr2] = _balances[devAddr2].add(_amount * rate / 1000 );\r\n                emit Transfer(addr, devAddr2, (_amount * rate / 1000 ));\r\n            }else{\r\n                _balances[paddr] = _balances[paddr].add(_amount * rate / 1000 );\r\n                emit Transfer(addr, paddr, (_amount * rate / 1000 ));\r\n            }\r\n\r\n\r\n            _trueAmount=_trueAmount.sub(_amount * rate / 1000);\r\n            currAddr=paddr;\r\n            emit ParentFee(addr, paddr, i, rate,(_amount * rate / 1000 ));\r\n\r\n        }\r\n        return _trueAmount;\r\n    }\r\n\r\n    function updatePrice(uint256 _amount,uint8 txType) internal {\r\n        uint256 price=getPrice(_amount,txType);\r\n        uint256 zero=dayZero()+extendTime;\r\n        if(nowTime==zero){\r\n            nowPrice=price;\r\n        }else{\r\n            lastTime=nowTime;\r\n            nowTime=zero;\r\n            if(nowPrice==0){\r\n                lastPrice=price;\r\n            }else{\r\n                lastPrice=nowPrice;\r\n            }\r\n            nowPrice=price;\r\n\r\n        }\r\n    }\r\n\r\n    function panPrice() public view returns(bool){\r\n        if(nowPrice>0){\r\n            if((lastPrice/nowPrice)>=2){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function panHold(address addr,uint256 amount) public view returns(bool){\r\n        uint256 balance=balanceOf(addr);\r\n        uint256 sell80=balance.mul(80).div(100);\r\n\r\n        if(amount>sell80){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getPrice(uint256 _amount,uint8 txType) public view returns(uint256){\r\n\r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        if (pair_USDT.token0() == uniswapV2Router.WETH()){\r\n            (amountA, amountB,) = pair_USDT.getReserves();\r\n        }\r\n        else{\r\n            (amountB, amountA,) = pair_USDT.getReserves();\r\n        }\r\n\r\n        if(txType!=0){\r\n            uint256 lastprice = amountA*(10**18) /amountB;\r\n            uint256 amountAExtend=_amount*lastprice/(10**18);\r\n            if(txType==1){\r\n                if(amountB>=_amount){\r\n                    amountB=amountB-_amount;\r\n                    amountA=amountA+amountAExtend;\r\n                }\r\n            }else if(txType==2){\r\n                if(amountA>=amountAExtend){\r\n                    amountB=amountB+_amount;\r\n                    amountA=amountA-amountAExtend;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        uint256 price = amountA*(10**18) /amountB;\r\n        return price;\r\n    }\r\n\r\n    function dayZero () public view returns(uint256){\r\n        return block.timestamp-(block.timestamp%(24*3600))-(8*3600);\r\n    }\r\n\r\n    function setFree(\r\n        address _addr,\r\n        bool _bool\r\n    ) external onlyOwner{\r\n        isFree[_addr] = _bool;\r\n    }\r\n\r\n    function setBlack(\r\n        address _addr,\r\n        bool _bool\r\n    ) external onlyOwner{\r\n        isBlack[_addr] = _bool;\r\n    }\r\n\r\n    function setPrice(\r\n        uint256 _nowprice,\r\n        uint256 _lastprice\r\n    ) external onlyOwner{\r\n        lastPrice = _lastprice;\r\n        nowPrice = _nowprice;\r\n    }\r\n\r\n\r\n    function setextendTime(\r\n        uint256 _extend\r\n    ) external onlyOwner{\r\n        extendTime = _extend;\r\n    }\r\n\r\n    function setStartTime(\r\n        uint256 _extend\r\n    ) external onlyOwner{\r\n        startTime = _extend;\r\n    }\r\n\r\n\r\n    function setCount(\r\n        uint8 _count\r\n    ) external onlyOwner{\r\n        count = _count;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_paddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_i\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ParentFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayZero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extendTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRoute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_USDT\",\"outputs\":[{\"internalType\":\"contract Ipair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"panHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parentList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_count\",\"type\":\"uint8\"}],\"name\":\"setCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nowprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastprice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extend\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extend\",\"type\":\"uint256\"}],\"name\":\"setextendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tranList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KOBE", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ab3c250ce56200a7ee64234cc8c3f3f2ceb54c856a371192f9122897fceb7b9"}