{"SourceCode": "/**\r\n *Submitted for verification at Bscscan.com/ on 2021-05-22\r\n*/\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Symbol      : DFC\r\n// Name        : DefiConnect\r\n// Total supply: 200,000,000,000,000\r\n// Decimals    : 8\r\n// Website     : deficonnect.tech\r\n//\r\n// Your gateway into the decentralize financial (Defi) world. \r\n// Gain first hand experience without risking too much.\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface AltcoinToken {\r\n    function balanceOf(address _owner) external returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\n    contract DFC {\r\n    \r\n    using SafeMath for uint256;\r\n    address payable owner;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => address) referrals;\r\n\r\n    string public constant name = \"DefiConnect\";\r\n    string public constant symbol = \"DFC\";\r\n    uint public constant decimals = 8;\r\n    \r\n    uint256 public totalSupply = 2e22;\r\n    uint256 public totalDistributed = 0;        \r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    constructor () {\r\n        owner = payable(msg.sender);\r\n        // 5% dev fund,\r\n        // 20% presale,\r\n        // 15% promotion, airdrop and contest\r\n        uint256 projectFund = totalSupply.mul(40).div(100);\r\n        distr(owner, projectFund);\r\n    }\r\n    \r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) private returns (bool) {\r\n        totalDistributed = totalDistributed.add(_amount);        \r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // mitigates the BEP20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n        \r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // mitigates the BEP20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalDistributed = totalDistributed.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        address myAddress = address(this);\r\n        uint256 etherBalance = myAddress.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        AltcoinToken token = AltcoinToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n    //**Staking */\r\n\r\n    bool public stakingPaused = true;\r\n\r\n    modifier canStake() {\r\n        require(!stakingPaused);\r\n        _;\r\n    }\r\n\r\n    function pauseStaking() onlyOwner public {\r\n        stakingPaused = true;\r\n    }\r\n\r\n    function resumeStaking() onlyOwner public {\r\n        stakingPaused = false;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 at;\r\n        uint256 term;\r\n    }\r\n\r\n    struct Staker {\r\n        bool registered;\r\n        address referer;\r\n        uint256 referrals;\r\n        uint paidAt;\r\n        uint256 totalReward;\r\n        Stake[] stakes;\r\n    }\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalEarned;\r\n    uint256 public constant STAKINGRETURN = 190;\r\n    uint256 public constant ADAY = 28800;\r\n    mapping(address => Staker) stakers;\r\n\r\n    event Staked(address indexed _from, uint256 _value, uint256 _term);\r\n    event Referral(address indexed _user, address indexed _from, uint256 _value);\r\n    event Harvest(address indexed _user, uint256 _value);\r\n\r\n    function stake(uint256 _amount, address referer) canStake public returns (bool) {\r\n        require(_amount > 0, 'invalid amount');\r\n        require(_amount <= balances[msg.sender], 'insufficient balance');\r\n        require(totalDistributed.add(_amount.add(_amount.div(10))) <= totalSupply, 'distribution is over');\r\n\r\n        if (!stakers[msg.sender].registered) {\r\n            stakers[msg.sender].registered = true;\r\n            stakers[msg.sender].paidAt = block.number;\r\n\r\n            if (stakers[referer].registered && referer != msg.sender) {\r\n                stakers[msg.sender].referer = referer;\r\n                stakers[referer].referrals++;\r\n            }\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\n        stakers[msg.sender].stakes.push(Stake(_amount, block.number, stakingPeriod()));\r\n        \r\n        uint256 refAmount;\r\n        if (stakers[referer].registered && referer != msg.sender) {\r\n            refAmount = _amount.div(10);\r\n            balances[referer] = balances[referer].add(refAmount);\r\n            emit Transfer(address(this), referer, refAmount);\r\n            emit Referral(referer, msg.sender, refAmount);\r\n        }\r\n\r\n        // reserve {_amount} token that will be earned by this staker\r\n        totalDistributed = totalDistributed.add(_amount.add(refAmount));\r\n        totalStaked = totalStaked.add(_amount);\r\n        emit Staked(msg.sender, _amount, stakingPeriod());\r\n        return true;\r\n    }\r\n\r\n    // stakingReward is the % a staker earns daily untill STAKINGRETURN is earned\r\n    function stakingReward() public view returns(uint256) {\r\n        return STAKINGRETURN.mul(ADAY).mul(100).div(stakingPeriod());\r\n    }\r\n\r\n    // stakingPeriod is the number of days it takes a staker to earn 200% of his stake\r\n    // while earning thesame amount daily.\r\n    // It starts at 120 and increase as the circulating supply increases\r\n    function stakingPeriod() public view returns(uint256) {\r\n        uint256 unminted = totalSupply.sub(totalDistributed);\r\n        uint256 period = totalSupply.mul(45).div(unminted);\r\n        if (period > 360) {\r\n            period = 360;\r\n        }\r\n        return period.mul(ADAY);\r\n    }\r\n\r\n    function _withdrawable(address user) internal view returns (uint256 amount) {\r\n        Staker storage staker = stakers[user];\r\n        \r\n        for (uint i = 0; i < staker.stakes.length; i++) {\r\n            Stake storage dep = staker.stakes[i];\r\n                \r\n            uint finish = dep.at + dep.term;\r\n            uint since = staker.paidAt > dep.at ? staker.paidAt : dep.at;\r\n            uint till = block.number > finish ? finish : block.number;\r\n\r\n            if (since < till) {\r\n                amount += dep.amount * (till - since) * STAKINGRETURN / dep.term / 100;\r\n            }\r\n        }\r\n    }\r\n\r\n    function harvest() public returns (bool) {\r\n        require(stakers[msg.sender].registered);\r\n        uint256 amount = _withdrawable(msg.sender);\r\n        require(amount >= 0);\r\n        stakers[msg.sender].paidAt = block.number;\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        totalEarned = totalEarned.add(amount);\r\n        stakers[msg.sender].totalReward = stakers[msg.sender].totalReward.add(amount);\r\n        emit Transfer(address(this), msg.sender, amount);\r\n        emit Harvest(msg.sender, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _farmSize(address user) internal view returns (uint256){\r\n        Staker storage staker = stakers[user];\r\n        \r\n        uint256 amount;\r\n        for (uint i = 0; i < staker.stakes.length; i++) {\r\n            Stake storage dep = staker.stakes[i];\r\n            if(dep.at + dep.term < block.number) {\r\n                continue;\r\n            }\r\n            amount = amount + dep.amount;\r\n        }\r\n        return amount;\r\n    }\r\n    \r\n    function farmSize() public view returns(uint256) {\r\n        return _farmSize(msg.sender);\r\n    }\r\n    \r\n    function withdrawable() public view returns(uint256) {\r\n        return _withdrawable(msg.sender);\r\n    }\r\n    \r\n    function rewardReceived() public view returns(uint256) {\r\n        return stakers[msg.sender].totalReward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKINGRETURN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawAltcoinTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DFC", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf7a448c3a9e00cdcae23a189ae67812046ebc0527bac0bfa6446b32ee2f9bb3"}