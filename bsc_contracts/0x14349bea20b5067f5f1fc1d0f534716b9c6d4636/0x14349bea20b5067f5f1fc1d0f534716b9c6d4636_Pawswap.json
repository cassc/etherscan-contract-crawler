{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/Pawswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function factory() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n}\\n\\n/**\\n * @dev Interface of the tax structure contract.\\n */\\ninterface ITaxStructure {\\n    function routerAddress() external view returns (address);\\n\\n    // these taxes will be taken as eth\\n    function nativeTaxBuyAmount(address) external view returns (uint256);\\n    function nativeTaxSellAmount(address) external view returns (uint256);\\n\\n    // this tax will be taken as tokens\\n    function tokenTaxBuyAmount(address) external view returns (uint256);\\n    function tokenTaxSellAmount(address) external view returns (uint256);\\n}\\n\\ninterface OwnableContract {\\n    function owner() external view returns (address);\\n}\\n\\ninterface ICharityRegistry {\\n    function isApprovedDonationRecipient(address) external view returns (bool);\\n}\\n\\ncontract Pawswap is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n    \\n    struct TaxStruct {\\n        address addr;\\n        IERC20 token;\\n        uint256 nativeTax;\\n        uint256 tokenTax;\\n        uint256 customTax;\\n        address router;\\n    }\\n\\n    mapping(address => bool) public excludedTokens; // tokens that are not allowed to list\\n    mapping(address => bool) public listers; // addresses that can list new tokens\\n    mapping(address => address) public tokenTaxContracts; // token address => tax structure contract address\\n    mapping(address => bool) public dexExcludedFromTreasury; // dex router address => true/false\\n\\n    address public pawSwapRouter;\\n    address public immutable weth;\\n    // sets treasury fee to 0.03%\\n    uint256 public treasuryFee = 3;\\n    uint256 public constant TAX_DENOMINATOR = 10**4;\\n\\n    ICharityRegistry public charityRegistry;\\n\\n    event Buy(\\n        address indexed buyer,\\n        address indexed tokenAddress,\\n        uint256 ethSpent,\\n        uint256 tokensReceived,\\n        uint256 customTaxAmount,\\n        address indexed customTaxAddress\\n    );\\n\\n    event Sell(\\n        address indexed seller,\\n        address indexed tokenAddress,\\n        uint256 tokensSold,\\n        uint256 ethReceived,\\n        uint256 customTaxAmount,\\n        address indexed customTaxAddress\\n    );\\n\\n    event Donation(\\n        address indexed donor,\\n        address indexed tokenAddress,\\n        uint256 ethDonated,\\n        address indexed donationRecipient\\n    );\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, \\\"Pawswap: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor (address _router, address _weth, address _charityRegistry) Ownable(msg.sender) {\\n        weth = _weth;\\n        pawSwapRouter = _router;\\n        charityRegistry = ICharityRegistry(_charityRegistry);\\n        dexExcludedFromTreasury[_router] = true;\\n    }\\n\\n    function buyOnPawswap (\\n        address tokenAddress,\\n        uint customTaxAmount, \\n        address customTaxAddress, \\n        uint256 minTokensToReceive,\\n        bool isExactIn\\n    ) external payable nonReentrant {\\n        address _taxStructAddr = tokenTaxContracts[tokenAddress];\\n        require(address(_taxStructAddr) != address(0), \\\"Token not listed\\\");\\n        TaxStruct memory _taxStruct = getTaxStruct(_taxStructAddr, customTaxAmount, _msgSender(), tokenAddress, true);\\n\\n        // uses getBuyAmountIn if this is an exact out trade because\\n        // we should take taxes out based on what the actual buy amount is since\\n        // the user might give us more eth than necessary -- we only want to tax the\\n        // amount used to purchased, not the excess eth sent in msg.value\\n        (uint256 _ethToSwap, uint256 _customTaxSent) = processPreSwapBuyTaxes(\\n          isExactIn ? msg.value : getBuyAmountIn(_msgSender(), tokenAddress, customTaxAmount, minTokensToReceive),\\n          customTaxAddress,\\n          _taxStruct,\\n          _taxStructAddr\\n        );\\n\\n        (uint256 tokensFromSwap, uint256 dustEth) = swapEthForTokens(\\n          _ethToSwap,\\n          isExactIn ? 0 : addTokenTax(minTokensToReceive, _taxStruct),\\n          _taxStruct,\\n          isExactIn\\n        );\\n\\n        uint256 purchasedTokens = processPostSwapBuyTaxes(\\n          _taxStruct.token,\\n          tokensFromSwap,\\n          _taxStruct\\n        );\\n\\n        // require that we met the minimum set by the user\\n        require (purchasedTokens >= minTokensToReceive, \\\"Insufficient tokens purchased\\\");\\n        // send the tokens to the buyer\\n        _taxStruct.token.safeTransfer(_msgSender(), purchasedTokens);\\n        // refund dust eth, if any\\n        if (dustEth > 0) {\\n            (bool sent, ) = _msgSender().call{value: dustEth}(\\\"\\\");\\n            require(sent, \\\"Failed to refund user dust eth\\\");\\n        }\\n\\n        emit Buy(\\n            _msgSender(),\\n            tokenAddress,\\n            isExactIn ? msg.value : msg.value - dustEth, \\n            purchasedTokens,\\n            _customTaxSent,\\n            customTaxAddress\\n        );\\n    }\\n\\n\\n    function processPreSwapBuyTaxes (\\n        uint256 ethAmount,\\n        address customTaxAddress,\\n        TaxStruct memory taxStructure,\\n        address taxContract\\n    ) private returns (uint256 _ethToSwap, uint256 _customTaxSent) {\\n        _ethToSwap = ethAmount;\\n\\n        if (!dexExcludedFromTreasury[taxStructure.router]) {\\n            // take a treasury fee if we are not using the pawswap dex. 300 is 0.3%\\n            uint256 treasuryEth = ethAmount * treasuryFee / TAX_DENOMINATOR;\\n            // leave the eth in the contract for the owner to withdraw later\\n            _ethToSwap -= treasuryEth;\\n        }\\n\\n        if (taxStructure.nativeTax != 0) {\\n            // send native tax to tax contract\\n            uint256 _nativeTax = ethAmount * taxStructure.nativeTax / TAX_DENOMINATOR;\\n            _ethToSwap -= _nativeTax;\\n            (bool sent, ) = taxContract.call{value: _nativeTax}(\\\"\\\");\\n            require(sent, \\\"Failed to send tax eth\\\");\\n        }\\n        \\n        if (taxStructure.customTax != 0) {\\n            require(charityRegistry.isApprovedDonationRecipient(customTaxAddress), \\\"Charity not approved\\\");\\n            // send to the custom tax address\\n            _customTaxSent = ethAmount * taxStructure.customTax / TAX_DENOMINATOR;\\n            _ethToSwap -= _customTaxSent;\\n            (bool sent, ) = customTaxAddress.call{value: _customTaxSent}(\\\"\\\");\\n            require(sent, \\\"Failed to donate\\\");\\n            emit Donation(\\n                _msgSender(),\\n                address(taxStructure.token),\\n                _customTaxSent,\\n                customTaxAddress\\n            );\\n        }\\n\\n        return (_ethToSwap, _customTaxSent);\\n    }\\n\\n    function processPostSwapBuyTaxes(\\n      IERC20 token,\\n      uint256 tokensFromSwap,\\n      TaxStruct memory taxStruct\\n    ) private returns (uint256 purchasedTokens) {\\n        purchasedTokens = tokensFromSwap;\\n\\n        if (taxStruct.tokenTax != 0) {\\n            // send to the token tax wallet\\n            uint256 taxTokens = tokensFromSwap * taxStruct.tokenTax / TAX_DENOMINATOR;\\n            purchasedTokens -= taxTokens;\\n            token.safeTransfer(taxStruct.addr, taxTokens);\\n        }\\n\\n        return purchasedTokens;\\n    }\\n\\n    function sellOnPawswap (\\n        address tokenAddress,\\n        uint256 tokensSold, \\n        uint customTaxAmount, \\n        address customTaxAddress, \\n        uint minEthToReceive,\\n        bool isExactIn\\n    ) external nonReentrant {\\n        address _taxStructAddr = tokenTaxContracts[tokenAddress];\\n        require(address(_taxStructAddr) != address(0), \\\"Token not listed\\\");\\n        TaxStruct memory _taxStruct = getTaxStruct(_taxStructAddr, customTaxAmount, _msgSender(), tokenAddress, false);\\n\\n        _taxStruct.token.safeTransferFrom(_msgSender(), address(this), tokensSold);\\n        tokensSold = isExactIn ? tokensSold : getSellAmountIn(_msgSender(), tokenAddress, customTaxAmount, minEthToReceive);\\n        (uint256 tokensToSwap) = processPreSwapSellTaxes(\\n          tokensSold,\\n          _taxStruct\\n        );\\n\\n        uint256 ethFromSwap = swapTokensForEth(\\n          tokensToSwap, \\n          addEthTax(minEthToReceive, _taxStruct),\\n          _taxStruct,\\n          isExactIn\\n        );\\n\\n        (uint256 ethToTransfer, uint256 customTaxSent) = processPostSwapSellTaxes(\\n          ethFromSwap, \\n          customTaxAddress,\\n          _taxStruct\\n        );\\n\\n        // require that we met the minimum set by the user\\n        require(ethToTransfer >= minEthToReceive, \\\"Insufficient ETH out\\\");\\n\\n        // send the eth to seller\\n        sendEth(_msgSender(), ethToTransfer);\\n\\n        emit Sell(\\n            _msgSender(),\\n            tokenAddress,\\n            tokensSold,\\n            ethToTransfer,\\n            customTaxSent,\\n            customTaxAddress\\n        );\\n    }\\n\\n    function sendEth (address _to, uint256 _amount) internal {\\n        (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send eth\\\");\\n    }\\n\\n    function processPreSwapSellTaxes(\\n        uint256 tokensToSwap,\\n        TaxStruct memory taxStruct\\n    ) private returns (uint256) {\\n        if (taxStruct.tokenTax != 0) {\\n            // send to the token tax wallet\\n            uint256 taxTokens = tokensToSwap * taxStruct.tokenTax / TAX_DENOMINATOR;\\n            taxStruct.token.safeTransfer(taxStruct.addr, taxTokens);\\n            tokensToSwap -= taxTokens;\\n        }\\n\\n        return tokensToSwap;\\n    }\\n\\n    function processPostSwapSellTaxes(\\n      uint256 ethFromSwap,\\n      address customTaxAddress,\\n      TaxStruct memory taxStructure\\n    ) private returns (uint256 _ethToTransfer, uint256 _customTaxSent) {\\n        _ethToTransfer = ethFromSwap;\\n\\n        if (!dexExcludedFromTreasury[taxStructure.router]) {\\n            // take a treasury fee if we are not using the pawswap dex\\n            uint256 treasuryEth = ethFromSwap * treasuryFee / TAX_DENOMINATOR;\\n            // leave the eth in the contract for the owner to withdraw later\\n            _ethToTransfer -= treasuryEth;\\n        }\\n\\n        if (taxStructure.nativeTax != 0) {\\n            // send eth percentage to the tax1 wallet\\n            uint256 _nativeTax = ethFromSwap * taxStructure.nativeTax / TAX_DENOMINATOR;\\n            _ethToTransfer -= _nativeTax;\\n            (bool sent, ) = taxStructure.addr.call{value: _nativeTax}(\\\"\\\");\\n            require(sent, \\\"Failed to send tax eth\\\");\\n        }\\n\\n        if (taxStructure.customTax != 0) {\\n            require(charityRegistry.isApprovedDonationRecipient(customTaxAddress), \\\"Charity not approved\\\");\\n            // send to the custom tax address\\n            _customTaxSent = ethFromSwap * taxStructure.customTax / TAX_DENOMINATOR;\\n            _ethToTransfer -= _customTaxSent;\\n            (bool sent, ) = customTaxAddress.call{value: _customTaxSent}(\\\"\\\");\\n            require(sent, \\\"Failed to donate\\\");\\n            emit Donation(\\n                _msgSender(),\\n                address(taxStructure.token),\\n                _customTaxSent,\\n                customTaxAddress\\n            );\\n        }\\n\\n        return (_ethToTransfer, _customTaxSent);\\n    }\\n\\n    function addTokenTax (uint256 amount, TaxStruct memory taxStruct) private pure returns (uint256) {\\n        uint256 percentageTakenPostSwap = taxStruct.tokenTax;\\n        uint256 minAmount = amount + (amount * percentageTakenPostSwap / TAX_DENOMINATOR);\\n\\n        return minAmount;\\n    }\\n\\n    function addEthTax (uint256 amount, TaxStruct memory taxStruct) private view returns (uint256) {\\n        uint256 percentageTaken = taxStruct.nativeTax + taxStruct.customTax;\\n\\n        if (!dexExcludedFromTreasury[taxStruct.router]) {\\n            uint256 treasuryTax = amount * treasuryFee / TAX_DENOMINATOR;\\n            percentageTaken += treasuryTax;\\n        }\\n\\n        return amount + (amount * percentageTaken / TAX_DENOMINATOR);\\n    }\\n\\n    function swapEthForTokens(\\n      uint256 ethToSwap,\\n      uint256 minAmountOut,\\n      TaxStruct memory taxStruct,\\n      bool isExactIn\\n    ) private returns (uint256, uint256) {\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(taxStruct.router);\\n        address [] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(taxStruct.token);\\n\\n        uint256 initialTokenBalance = taxStruct.token.balanceOf(address(this));\\n        uint256 dustEth;\\n\\n        if (isExactIn) {\\n          // if user specified amount of eth to spend, get as many tokens as possible\\n          swapExactETHForTokensSupportingFeeOnTransferTokens(\\n              ethToSwap,\\n              uniswapV2Router.getAmountsOut(ethToSwap, path)[1],\\n              path,\\n              uniswapV2Router\\n          );\\n        } else {\\n          (, dustEth) = swapETHForExactTokens(\\n              ethToSwap,\\n              minAmountOut,\\n              path,\\n              uniswapV2Router\\n          );\\n        }\\n\\n        return (taxStruct.token.balanceOf(address(this)) - initialTokenBalance, dustEth);\\n    }\\n\\n    function swapTokensForEth(\\n      uint256 tokenAmount,\\n      uint256 minEthToReceive,\\n      TaxStruct memory taxStruct,\\n      bool isExactIn\\n    ) private returns (uint256) {\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(taxStruct.router);\\n        address [] memory path = new address[](2);\\n        path[0] = address(taxStruct.token);\\n        path[1] = uniswapV2Router.WETH();\\n        \\n        taxStruct.token.approve(address(uniswapV2Router), tokenAmount);\\n\\n        uint256 initialEthBalance = address(this).balance;\\n        if (isExactIn) {\\n          swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            uniswapV2Router.getAmountsOut(tokenAmount, path)[1],\\n            path,\\n            uniswapV2Router\\n          );\\n        } else {                        \\n          uint256 dustTokens = swapTokensForExactETH(\\n            minEthToReceive,\\n            tokenAmount,\\n            path,\\n            address(this),\\n            uniswapV2Router\\n          )[1];\\n          // refund dust tokens, if any\\n          if (dustTokens > 0) {\\n            taxStruct.token.safeTransfer(_msgSender(), dustTokens);\\n          }\\n        }\\n\\n        return address(this).balance - initialEthBalance;\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        IUniswapV2Router02 uniswapV2Router\\n    ) internal {\\n        require(path[path.length - 1] == weth, \\\"Pawswap: INVALID_PATH\\\");\\n        address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(path[0],path[1]);\\n        IERC20(path[0]).transfer(pair, amountIn);\\n        _swapSupportingFeeOnTransferTokens(path, uniswapV2Router);\\n        uint amountOut = IERC20(weth).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"Pawswap: INSUFFICIENT_OUTPUT_AMT\\\");\\n        IWETH(weth).withdraw(amountOut);\\n    }\\n\\n\\n    function swapETHForExactTokens(\\n        uint amountIn, \\n        uint amountOut, \\n        address[] memory path,\\n        IUniswapV2Router02 uniswapV2Router\\n    )\\n        private\\n        returns (uint[] memory amounts, uint dustEth)\\n    {\\n        require(path[0] == weth, \\\"Pawswap: INVALID_PATH\\\");\\n        amounts = uniswapV2Router.getAmountsIn(amountOut, path);\\n        require(amounts[0] <= amountIn, \\\"Pawswap: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWETH(weth).deposit{value: amounts[0]}();\\n        address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(path[0],path[1]);\\n        assert(IWETH(weth).transfer(pair, amounts[0]));\\n        _swap(amounts, path, pair);\\n        // refund dust eth, if any\\n        if (amountIn > amounts[0]) {\\n            dustEth = amountIn - amounts[0];\\n            (bool sent, ) = _msgSender().call{value: dustEth}(\\\"\\\");\\n            require(sent, \\\"Failed to refund user dust eth\\\");\\n        }\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        IUniswapV2Router02 uniswapV2Router\\n    ) private {\\n        require(path[0] == weth, \\\"Pawswap: INVALID_PATH\\\");\\n        IWETH(weth).deposit{value: amountIn}();\\n        address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(path[0],path[1]);\\n        assert(IWETH(weth).transfer(pair, amountIn));\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\\n        _swapSupportingFeeOnTransferTokens(path, uniswapV2Router);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(address(this)) - balanceBefore >= amountOutMin,\\n            \\\"Pawswap: INSUFFICIENT_OUTPUT_AMT\\\"\\n        );\\n    }\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] memory path, address to, IUniswapV2Router02 uniswapV2Router)\\n        private\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == weth, \\\"Pawswap: INVALID_PATH\\\");\\n        amounts = uniswapV2Router.getAmountsIn(amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"Pawswap: EXCESSIVE_INPUT_AMOUNT\\\");\\n        address pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(path[0],path[1]);\\n        IERC20(path[0]).transfer(pair, amounts[0]);\\n        _swap(amounts, path, pair);\\n        IWETH(weth).withdraw(amounts[amounts.length - 1]);\\n        (bool sent, ) = to.call{value: amounts[amounts.length - 1]}(\\\"\\\");\\n        require(sent, \\\"Failed to send eth to seller\\\");\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, address[] memory path, address _pair) private {\\n        (address input, address output) = (path[0], path[1]);\\n        (address token0,) = sortTokens(input, output);\\n        uint amountOut = amounts[1];\\n        (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n        IUniswapV2Pair(_pair).swap(\\n            amount0Out, amount1Out, address(this), new bytes(0)\\n        );\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, IUniswapV2Router02 uniswapV2Router) private {\\n        (address input, address output) = (path[0], path[1]);\\n        (address token0,) = sortTokens(input, output);\\n        IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(uniswapV2Router.factory()).getPair(input, output));\\n        uint amountInput;\\n        uint amountOutput;\\n        { // scope to avoid stack too deep errors\\n        (uint reserve0, uint reserve1,) = pair.getReserves();\\n        (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n        amountOutput = uniswapV2Router.getAmountOut(amountInput, reserveInput, reserveOutput);\\n        }\\n        (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Pawswap: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Pawswap: ZERO_ADDRESS\\\");\\n    }\\n\\n    function getTaxStruct(\\n        address _taxStructureAddress,\\n        uint256 _customTaxAmount,\\n        address _account, \\n        address _token, \\n        bool _isBuy\\n    ) internal view returns (TaxStruct memory) {\\n        ITaxStructure taxStructureContract = ITaxStructure(_taxStructureAddress);\\n        if (_isBuy) {\\n            return TaxStruct(\\n                _taxStructureAddress,\\n                IERC20(_token),\\n                taxStructureContract.nativeTaxBuyAmount(_account),\\n                taxStructureContract.tokenTaxBuyAmount(_account),\\n                _customTaxAmount,\\n                taxStructureContract.routerAddress()\\n            );\\n        } else {\\n            return TaxStruct(\\n                _taxStructureAddress,\\n                IERC20(_token),\\n                taxStructureContract.nativeTaxSellAmount(_account),\\n                taxStructureContract.tokenTaxSellAmount(_account),\\n                _customTaxAmount,\\n                taxStructureContract.routerAddress()\\n            );\\n        }\\n    }\\n\\n    function getBuyAmountIn (\\n        address buyer,\\n        address tokenAddress,\\n        uint customTaxAmount,\\n        uint minTokensToReceive\\n    ) public view returns (uint256 amountIn) {\\n        require(tokenTaxContracts[tokenAddress] != address(0), \\\"Token not listed\\\");\\n        TaxStruct memory _taxStruct = getTaxStruct(tokenTaxContracts[tokenAddress], customTaxAmount, buyer, tokenAddress, true);\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_taxStruct.router);\\n        address [] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = tokenAddress;\\n\\n        uint256 [] memory amountsIn = uniswapV2Router.getAmountsIn(\\n            addTokenTax(minTokensToReceive, _taxStruct),\\n            path\\n        );\\n\\n        return addEthTax(amountsIn[0], _taxStruct);\\n    }\\n\\n    function getSellAmountIn (\\n        address seller,\\n        address tokenAddress,\\n        uint customTaxAmount,\\n        uint minEthToReceive\\n    ) public view returns (uint256) {\\n        require(tokenTaxContracts[tokenAddress] != address(0), \\\"Token not listed\\\");\\n        TaxStruct memory _taxStruct = getTaxStruct(tokenTaxContracts[tokenAddress], customTaxAmount, seller, tokenAddress, false);\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_taxStruct.router);\\n        address [] memory path = new address[](2);\\n        path[0] = tokenAddress;\\n        path[1] = uniswapV2Router.WETH();\\n\\n        uint256 [] memory amountsIn = uniswapV2Router.getAmountsIn(\\n            addEthTax(minEthToReceive, _taxStruct),\\n            path\\n        );\\n        return addTokenTax(amountsIn[0], _taxStruct);\\n    }\\n\\n    function getMinimumAmountOutBuy (address _tokenAddress, uint256 _ethAmount, uint256 _customTaxAmount, address _buyer, uint256 _slippage) external view returns (uint256 amountOut) {\\n        address _taxStructAddr = tokenTaxContracts[_tokenAddress];\\n        require(address(_taxStructAddr) != address(0), \\\"Token not listed\\\");\\n        TaxStruct memory _taxStruct = getTaxStruct(_taxStructAddr, _customTaxAmount, _buyer, _tokenAddress, true);\\n\\n        if (!dexExcludedFromTreasury[_taxStruct.router]) {\\n            _ethAmount -= _ethAmount * treasuryFee / TAX_DENOMINATOR;\\n        }\\n\\n        if (_taxStruct.nativeTax != 0) {\\n            _ethAmount -= _ethAmount * _taxStruct.nativeTax / TAX_DENOMINATOR;\\n        }\\n\\n        if (_customTaxAmount != 0) {\\n            _ethAmount -= _ethAmount * _customTaxAmount / TAX_DENOMINATOR;\\n        }\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_taxStruct.router);\\n        address [] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = _tokenAddress;\\n\\n        amountOut = uniswapV2Router.getAmountsOut(_ethAmount, path)[1];\\n\\n        if (_taxStruct.tokenTax != 0) {\\n            amountOut -= amountOut * _taxStruct.tokenTax / TAX_DENOMINATOR;\\n        }\\n\\n        return amountOut - (amountOut * _slippage / TAX_DENOMINATOR);\\n    }\\n\\n    function getMinimumAmountOutSell (address _tokenAddress, uint256 _tokenAmount, uint256 _customTaxAmount, address _seller, uint256 _slippage) external view returns (uint256 amountOut) {\\n        address _taxStructAddr = tokenTaxContracts[_tokenAddress];\\n        require(address(_taxStructAddr) != address(0), \\\"Token not listed\\\");\\n        TaxStruct memory _taxStruct = getTaxStruct(_taxStructAddr, _customTaxAmount, _seller, _tokenAddress, false);\\n\\n        if (_taxStruct.tokenTax != 0) {\\n            _tokenAmount -= _tokenAmount * _taxStruct.tokenTax / TAX_DENOMINATOR;\\n        }\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_taxStruct.router);\\n        address [] memory path = new address[](2);\\n        path[0] = _tokenAddress;\\n        path[1] = uniswapV2Router.WETH();\\n\\n        amountOut = uniswapV2Router.getAmountsOut(_tokenAmount, path)[1];\\n\\n        if (!dexExcludedFromTreasury[_taxStruct.router]) {\\n            amountOut -= amountOut * treasuryFee / TAX_DENOMINATOR;\\n        }\\n\\n        if (_taxStruct.nativeTax != 0) {\\n            amountOut -= amountOut * _taxStruct.nativeTax / TAX_DENOMINATOR;\\n        }\\n\\n        if (_customTaxAmount != 0) {\\n            amountOut -= amountOut * _customTaxAmount / TAX_DENOMINATOR;\\n        }\\n\\n        return amountOut - (amountOut * _slippage / TAX_DENOMINATOR);\\n    }\\n\\n    function setTokenTaxContract (address _tokenAddress, address _taxStructureContractAddress) external {\\n        require (!excludedTokens[_tokenAddress], \\\"Token is not allowed to list\\\");\\n        require (tokenTaxContracts[_tokenAddress] != _taxStructureContractAddress, \\\"Structure already set to this\\\");\\n        // caller must be the pawswap owner, have the listing role, or be the owner of the listed contract\\n        require (\\n            listers[_msgSender()] ||\\n            OwnableContract(_tokenAddress).owner() == _msgSender() ||\\n            this.owner() == _msgSender(),\\n            \\\"Permission denied\\\"\\n        );\\n        tokenTaxContracts[_tokenAddress] = _taxStructureContractAddress;\\n    }\\n\\n    function setListerAccount (address _address, bool isLister) external onlyOwner {\\n        listers[_address] = isLister;\\n    }\\n\\n    function excludeToken (address _tokenAddress, bool isExcluded) external onlyOwner {\\n        excludedTokens[_tokenAddress] = isExcluded;\\n    }\\n\\n    function setCharityRegistry (address _address) external onlyOwner {\\n        require (address(charityRegistry) != _address, \\\"Registry already set to this\\\");\\n        charityRegistry = ICharityRegistry(_address);\\n    }\\n\\n    function setPawSwapRouter (address _address) external onlyOwner {\\n        require (pawSwapRouter != _address, \\\"Router already set to this\\\");\\n        pawSwapRouter = _address;\\n    }\\n\\n    function setTreasuryFee (uint256 _fee) external onlyOwner {\\n        require (treasuryFee != _fee, \\\"Fee already set to this value\\\");\\n        require (_fee <= 300, \\\"Fee cannot exceed 3%\\\");\\n        treasuryFee = _fee;\\n    }\\n\\n    function toggleDexExcludedFromTreasuryFee (address _dex, bool _excluded) external onlyOwner {\\n        dexExcludedFromTreasury[_dex] = _excluded;\\n    }\\n\\n    function withdrawEthToOwner (uint256 _amount) external onlyOwner {\\n        (bool sent, ) = (msg.sender).call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send eth to owner\\\");\\n    }\\n\\n    function withdrawTokenToOwner(IERC20 token, uint256 amount) external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(balance >= amount, \\\"Insufficient token balance\\\");\\n\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"customTaxAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customTaxAddress\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethDonated\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donationRecipient\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"customTaxAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customTaxAddress\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customTaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customTaxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReceive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactIn\",\"type\":\"bool\"}],\"name\":\"buyOnPawswap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityRegistry\",\"outputs\":[{\"internalType\":\"contract ICharityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dexExcludedFromTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customTaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReceive\",\"type\":\"uint256\"}],\"name\":\"getBuyAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_customTaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"getMinimumAmountOutBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_customTaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"getMinimumAmountOutSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customTaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthToReceive\",\"type\":\"uint256\"}],\"name\":\"getSellAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pawSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customTaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customTaxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minEthToReceive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactIn\",\"type\":\"bool\"}],\"name\":\"sellOnPawswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCharityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLister\",\"type\":\"bool\"}],\"name\":\"setListerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPawSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxStructureContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenTaxContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"toggleDexExcludedFromTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTaxContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pawswap", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000022ded170795523386ba6c910c9fb3d726e673263000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000a12df51cb605acc14ff973d65e5746b22245e1ef", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}