{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.18;\r\n\r\n\r\ninterface BEP20 {\r\n  //predefined functions\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner; \r\n\r\n  constructor()  {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract LifeEnjoy is   Ownable{\r\n  \r\n    struct Deposit {\r\n        uint tariff;\r\n        uint amount;\r\n        uint at;\r\n    }\r\n\r\n    struct Income{\r\n        uint incomeType; //0=direct , 1 = level , 2 =  QoreIncome,  3 = royalityIncome\r\n        uint incomeAmt;\r\n        address fromAddr;\r\n        uint createdAt;\r\n        uint level;\r\n       \r\n    }\r\n  \r\n    struct Investor {\r\n        bool registered;\r\n        address referer;\r\n        string name;\r\n        uint refererBalance;\r\n        uint currentPackageIndex;\r\n        uint silverPackage;\r\n        uint goldPackage;\r\n        uint diamondPackage;\r\n        uint packageCnt;\r\n        uint sixPackageDirectCnt;\r\n        uint ninePackageDirectCnt;\r\n        uint elevenPackageDirectCnt;\r\n        uint totalBusiness;\r\n        uint selfBusiness;\r\n    }\r\n\r\n    struct packageListInvestor {\r\n        address leftUser;\r\n        address rightUser;\r\n        address parent;\r\n        uint position;\r\n        uint levelEightCnt;\r\n        uint levelNineCnt;\r\n        uint levelTenCnt;\r\n        uint levelElevenCnt;\r\n    }\r\n\r\n    struct teamsize{\r\n        uint Level;\r\n        uint hrslevel;\r\n}\r\n\r\n    struct Package {\r\n        uint amount;\r\n        uint purchaseTime;\r\n        \r\n    }  \r\n\r\n    struct User {\r\n        address userId; \r\n        address parent;\r\n        uint256 level;\r\n    }   \r\n\r\n\r\n    struct RecentTopUser {\r\n    address user;\r\n    uint packageAmount;\r\n    uint purchaseTime;\r\n\r\n    }\r\n\r\n    struct packagess {\r\n        bool isActive;\r\n    }   \r\n\r\n    \r\n            address[] public userList;\r\n\r\n    mapping(address => Package[]) public userPackages;\r\n    address public adminWalletAddress;\r\n    uint public adminWallet;\r\n    uint public regenerateLevel =11;\r\n    address public tokenAddr = 0x55d398326f99059fF775485246999027B3197955; \r\n    address public contractAddr = address(this);\r\n    uint[] packageList = [0,5,10,20,40,80,160,320,640,1280,2560,5120]; \r\n    uint[] referralLevelIncome = [10,10,10,10,10,5,5,5,5,5,3,3,3,3,3,2,2,2,2,2]; \r\n    uint public silverPoolCollection;\r\n    uint public goldPoolCollection;\r\n    uint public diamondPoolCollection;\r\n    uint[] public maxLenghtArr;\r\n    uint public userId;\r\n    address[] public silverPackageUsers;\r\n    address[] public goldPackageUsers;\r\n    address[] public diamondPackageUsers;\r\n    uint public silverPackageRequired = 6;\r\n    uint public goldPackageRequired = 9;\r\n    uint public diamonPackageRequired = 11; \r\n   \r\n  //  uint public totalDirectIncome;\r\n   // uint public totalLevelIncome;\r\n //   uint public totalQoreIncome; \r\n    uint256  userIdss;  \r\n    uint256 public totalincomealluserss; \r\n    uint silverRequiredBusiness = 2500;\r\n     uint goldRequiredBusiness = 7500;\r\n    uint diamondRequiredBusiness = 17500;\r\n\r\n    uint public totalincomeallusers; \r\n    mapping(address => uint) public lastInteractionTime;\r\n    mapping(address => bool) public hasBoughtPackage;\r\n    mapping(address => string) private userImages;\r\n    mapping(address => User) public userlevel;\r\n    mapping (address => teamsize) public userPackage;\r\n    mapping(address => uint) public userIds;\r\n    mapping(uint=> uint) public sortedArr;   \r\n    mapping (address => Investor) public investors;\r\n    mapping (address => Income[]) public userincomes;\r\n    mapping(address => uint[]) userIncomeLevels;\r\n    mapping (address => uint[]) public userpackagelist;\r\n    mapping (address => address[]) public userDirectList;\r\n    mapping (uint =>mapping (address => packageListInvestor)) public packageinvestors;\r\n \r\n    mapping(uint=>mapping(address => mapping(uint=>mapping(uint=>address)))) public binaryindexes;\r\n    event DepositAt(address user, uint tariff, uint amount);\r\n    event TransferOwnership(address user);\r\n        event UserAdded(address indexed user, address indexed parent);\r\n          event OwnershipTransferred(address);\r\n\r\n\r\n\r\n  \r\n    constructor()  {\r\n        owner = msg.sender;\r\n        adminWalletAddress = 0xe62A303AE85d59B5C2Db7f3643e5fCc657861836;\r\n        investors[owner].registered = true;\r\n        investors[owner].currentPackageIndex = 11;\r\n        investors[owner].packageCnt = 11;\r\n        \r\n        userId = 0;\r\n        userIdss = block.timestamp;\r\n        totalincomealluserss=0;\r\n        totalincomeallusers= block.timestamp;\r\n        for(uint i=0;i<=packageList.length;i++){\r\n            binaryindexes[i][msg.sender][0][0] = msg.sender;\r\n        }\r\n \r\n   }\r\n   \r\n\r\n    function register(address referer, string memory name) external {\r\n        require(investors[msg.sender].registered==false,\"Already Registered\");\r\n        require(investors[referer].registered==true,\"Invalid Referral\");\r\n        require(investors[referer].currentPackageIndex > 0, \"Referrer has not purchased a package\");\r\n         require(bytes(name).length > 0, \"Name cannot be empty\");\r\n        investors[msg.sender].registered = true;\r\n        investors[msg.sender].referer = referer;\r\n         investors[msg.sender].name = name;\r\n       //   userId++;\r\n      //  userIds[msg.sender] = userId;\r\n        \r\n   }                    \r\n\r\n    \r\n\r\nfunction updateUserLevelhrs(address userAddress) internal {\r\n        address parent = investors[userAddress].referer;\r\n        while (parent != address(0)) {\r\n            userPackage[parent].hrslevel += 1;\r\n            parent =  investors[parent].referer;\r\n             if (block.timestamp >= userIdss + 1 days) {\r\n        userPackage[parent].hrslevel = 0;  \r\n        userIdss = block.timestamp;  \r\n    } \r\n        }\r\n       \r\n    }\r\n\r\n\r\n    function updateUserLevel(address userAddress) internal {\r\n        address parent = investors[userAddress].referer;\r\n        while (parent != address(0)) {\r\n            userPackage[parent].Level += 1;\r\n            parent =  investors[parent].referer;\r\n        }\r\n        \r\n    }\r\n\r\n \r\n function buyPackage(uint amount) external  {\r\n        require(investors[msg.sender].registered,\"Invalid User\");\r\n        uint packageIndex = findPackageIndex(amount);\r\n               amount = amount * (10**18);\r\n\r\n        require((packageIndex==investors[msg.sender].currentPackageIndex+1),\"Invalid Package\");\r\n       if (investors[msg.sender].packageCnt == 0) {\r\n        userId++;\r\n        userIds[msg.sender] = userId;\r\n    }\r\nif(investors[msg.sender].currentPackageIndex <= 0){\r\n    updateUserLevel(msg.sender);\r\n    updateUserLevelhrs(msg.sender);\r\n    \r\n}\r\n        investors[msg.sender].totalBusiness += amount ;\r\n        investors[msg.sender].selfBusiness += amount ;\r\n            \r\n        investors[msg.sender].packageCnt++;\r\n        if(investors[msg.sender].packageCnt==silverPackageRequired){\r\n            investors[investors[msg.sender].referer].sixPackageDirectCnt++;\r\n        }\r\n        else if(investors[msg.sender].packageCnt==goldPackageRequired){\r\n            investors[investors[msg.sender].referer].ninePackageDirectCnt++;\r\n        }\r\n        else if(investors[msg.sender].packageCnt==diamonPackageRequired){\r\n            investors[investors[msg.sender].referer].elevenPackageDirectCnt++;\r\n        }\r\n        userpackagelist[msg.sender].push(packageIndex);\r\n    address referer = investors[msg.sender].referer;\r\n         if (!userInList(userDirectList[referer], msg.sender)) {\r\n        userDirectList[referer].push(msg.sender);\r\n    }\r\n        // userDirectList[investors[msg.sender].referer].push(msg.sender);\r\n        investors[msg.sender].currentPackageIndex = packageIndex; \r\n         BEP20 token    = BEP20(tokenAddr);\r\n       require(token.allowance(msg.sender,contractAddr)>=amount,\"insufficient allowance\");\r\n     require(token.balanceOf(msg.sender)>=amount,\"insufficient balance\");\r\n        \r\n       token.transferFrom(msg.sender,contractAddr,amount);\r\n        userPackages[msg.sender].push(Package(amount, block.timestamp));\r\n        addUserToTree(msg.sender,packageIndex,amount,0);\r\n         lastInteractionTime[msg.sender] = block.timestamp;\r\n\r\n             userList.push(msg.sender);\r\n\r\n  \r\n\r\n    if (block.timestamp >= userIdss + 1 days) {\r\n        userId = 0;  \r\n        userIdss = block.timestamp;  \r\n    }\r\n\r\n  \r\n\r\n    if(investors[msg.sender].currentPackageIndex <= 0){\r\n        userId++;\r\n}           \r\n    \r\n\r\n\r\n    \r\n    //address referer = investors[msg.sender].referer;\r\n           \r\n\r\n        // (address getParent, uint getBinaryIndex, uint position) = findParent(referer,packageIndex);\r\n        // packageinvestors[packageIndex][msg.sender].position = position; \r\n        // packageinvestors[packageIndex][msg.sender].parent = getParent;\r\n        // if(position==1){\r\n        //     packageinvestors[packageIndex][getParent].rightUser = msg.sender;\r\n        // }\r\n        // else {\r\n        //     packageinvestors[packageIndex][getParent].leftUser = msg.sender;\r\n        // }\r\n        // binaryindexes[packageIndex][msg.sender][0][0] = msg.sender;\r\n        // updateBinaryIndex(getParent,1,amount,packageIndex);\r\n        \r\n        sendDirectIncome(amount,packageIndex);\r\n\r\n        sendReferalIncome(amount,packageIndex);          \r\n\r\n                if (block.timestamp >= totalincomeallusers + 1 minutes) {\r\n        totalincomealluserss = 0;  \r\n        totalincomeallusers = block.timestamp;  \r\n    }\r\n\r\ntotalincomealluserss+=totalincomeallusers;\r\n    \r\n}       \r\n\r\nfunction userInList(address[] memory userList, address user) internal pure returns (bool) {\r\n    for (uint i = 0; i < userList.length; i++) {\r\n        if (userList[i] == user) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n   function validReferral(address refer,uint packageIndex) public view returns(address refAddr){\r\n        if(investors[refer].currentPackageIndex>=packageIndex){\r\n            refAddr =  refer;\r\n        }\r\n        else {\r\n            return validReferral(investors[refer].referer,packageIndex);\r\n        }\r\n   }\r\n\r\n   function addUserToTree(address userAddr,uint packageIndex,uint amount, uint regenerate) internal{\r\n        address referer = investors[userAddr].referer;\r\n        \r\n        if(userAddr==owner){\r\n            referer = owner;\r\n        }   \r\n        \r\n        referer = validReferral(referer,packageIndex);\r\n\r\n        (address getParent, uint getBinaryIndex, uint position) = findParent(referer,packageIndex);\r\n        packageinvestors[packageIndex][userAddr].position = position; \r\n        packageinvestors[packageIndex][userAddr].parent = getParent;\r\n        if(position==1){\r\n            packageinvestors[packageIndex][getParent].rightUser = userAddr;\r\n        }\r\n        else {\r\n            packageinvestors[packageIndex][getParent].leftUser = userAddr;\r\n        }\r\n        if(regenerate==0){\r\n            binaryindexes[packageIndex][userAddr][0][0] = userAddr;\r\n        }\r\n        else {\r\n            packageinvestors[packageIndex][userAddr].leftUser = address(0);\r\n            packageinvestors[packageIndex][userAddr].rightUser = address(0);\r\n            packageinvestors[packageIndex][userAddr].levelEightCnt = 0;\r\n            packageinvestors[packageIndex][userAddr].levelNineCnt = 0;\r\n            packageinvestors[packageIndex][userAddr].levelTenCnt = 0;\r\n            packageinvestors[packageIndex][userAddr].levelElevenCnt = 0;\r\n        }\r\n        \r\n        updateBinaryIndex(getParent,1,amount,packageIndex);\r\n   }\r\n\r\n\r\n   function getMappingLength(address adr, uint getIn, uint packageIndex) public view returns(uint len){\r\n        //for(uint i=0; i < 200; i++){\r\n          uint i=0;\r\n          while(true){\r\n            if(binaryindexes[packageIndex][adr][getIn][i]==address(0)){\r\n                return i;\r\n            }\r\n            i++;\r\n          }\r\n        //}\r\n   }\r\n\r\n   function findParent(address refAddr,uint packageIndex) public view returns (address  parent, uint index, uint leftOrRight){\r\n        //for(uint i=1; i < 100; i++){\r\n        uint i=0;\r\n        while(true){\r\n            uint binaryindexLength = getMappingLength(refAddr,i,packageIndex);\r\n            if(2**i != binaryindexLength){\r\n                    index = i;\r\n                    uint previousIndex = i-1;\r\n                    uint binaryPreviousIndexLength = getMappingLength(refAddr,previousIndex,packageIndex);\r\n\r\n                    for(uint j=0; j<binaryPreviousIndexLength;j++){\r\n                        address getParentAddr = binaryindexes[packageIndex][refAddr][previousIndex][j];\r\n                        if(packageinvestors[packageIndex][getParentAddr].leftUser==address(0)){\r\n                            parent = getParentAddr;\r\n                            leftOrRight = 0;\r\n                            return (parent, index, leftOrRight);\r\n                            \r\n                        }\r\n                        else if(packageinvestors[packageIndex][getParentAddr].rightUser==address(0)){\r\n                            parent = getParentAddr;\r\n                            leftOrRight = 1;\r\n                            return (parent, index, leftOrRight);\r\n                        }\r\n                    } \r\n            }\r\n            i++;\r\n        }\r\n        //}\r\n\r\n   }\r\n\r\n\r\n   function updateBinaryIndex(address updateBy,uint level,uint amount,uint packageIndex) internal {\r\n        if(updateBy == address(0) || level>regenerateLevel){\r\n            if(level>regenerateLevel){\r\n              //  sendQoreLapsIncome(level,amount);\r\n            }\r\n            \r\n            return ;\r\n        }\r\n        \r\n       \r\n        uint levelIndex;\r\n        if(level >1){\r\n            address getParent = packageinvestors[packageIndex][msg.sender].parent;\r\n            //uint position = investors[getParent].leftUser==msg.sender ? 0 : 1 ;\r\n            uint getParentLevelIndex = findLevelIndex(updateBy,getParent,level-1,packageIndex);\r\n            if(getParentLevelIndex==0 && updateBy != getParent){\r\n                levelIndex = packageinvestors[packageIndex][getParent].leftUser==msg.sender ? 0 : 1;   \r\n            }\r\n            else {\r\n                levelIndex = (2**getParentLevelIndex) + (packageinvestors[packageIndex][getParent].leftUser==msg.sender ? 0 : 1);\r\n            }\r\n        }\r\n        else {\r\n             levelIndex = packageinvestors[packageIndex][updateBy].leftUser==msg.sender ? 0 : 1;\r\n        }\r\n\r\n        binaryindexes[packageIndex][updateBy][level][levelIndex]=msg.sender;\r\n        \r\n        if(level<=11){\r\n            if(level<8 || \r\n                (level==8 && packageinvestors[packageIndex][updateBy].levelEightCnt>5) ||\r\n                (level==9 && packageinvestors[packageIndex][updateBy].levelNineCnt>10) || \r\n                (level==10 && packageinvestors[packageIndex][updateBy].levelTenCnt>15) || \r\n                (level==11 && packageinvestors[packageIndex][updateBy].levelElevenCnt>20)){\r\n                uint levelPercent = level > 2 ? 10 : 5;\r\n                uint amt = amount * 20 /100;\r\n                uint levelAmt = amt * levelPercent/100;\r\n                sendQoreIncome(updateBy,levelAmt);\r\n            }\r\n            else if(level==8 ){\r\n                packageinvestors[packageIndex][updateBy].levelEightCnt++;\r\n            }\r\n            else if(level==9 ){\r\n                packageinvestors[packageIndex][updateBy].levelNineCnt++;\r\n            }\r\n            else if(level==10 ){\r\n                packageinvestors[packageIndex][updateBy].levelTenCnt++;\r\n            }\r\n            else if(level==11 ){\r\n                packageinvestors[packageIndex][updateBy].levelElevenCnt++;\r\n            }\r\n        }\r\n\r\n        if(level==regenerateLevel){\r\n            packageinvestors[packageIndex][updateBy].levelElevenCnt++;\r\n        }\r\n        \r\n        investors[updateBy].totalBusiness += amount;\r\n        sendUserToRoyalityPool(updateBy);\r\n        if(level==regenerateLevel && packageinvestors[packageIndex][updateBy].levelElevenCnt>=2**regenerateLevel){\r\n            addUserToTree(updateBy,packageIndex,amount,1);\r\n        }\r\n        else {\r\n            updateBinaryIndex(packageinvestors[packageIndex][updateBy].parent,level+1,amount,packageIndex);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    function sendUserToRoyalityPool(address userAddr) internal{\r\n        sortedArr[0]=0;\r\n        sortedArr[1]=0;\r\n        sortedArr[2]=0;\r\n        sortedArr[3]=0;\r\n        if(investors[userAddr].silverPackage==0 && \r\n            investors[userAddr].packageCnt>=silverPackageRequired && \r\n            investors[userAddr].sixPackageDirectCnt>=5){\r\n            uint[4] memory returnDirectArr =  sort(userAddr,0);\r\n            uint topFirstAmt = (returnDirectArr[0]>(silverRequiredBusiness*40/100)) ? silverRequiredBusiness*40/100 :  returnDirectArr[0];\r\n            uint topSecondAmt = (returnDirectArr[1]>(silverRequiredBusiness*30/100)) ? silverRequiredBusiness*30/100 :  returnDirectArr[1];\r\n            uint topThirdAmt = (returnDirectArr[2]>(silverRequiredBusiness*20/100)) ? silverRequiredBusiness*20/100 :  returnDirectArr[2];\r\n            uint remainingAmt = (returnDirectArr[3]>(silverRequiredBusiness*10/100)) ? silverRequiredBusiness*10/100 :  returnDirectArr[3];\r\n            uint countableBusiness = topFirstAmt + topSecondAmt + topThirdAmt + remainingAmt;\r\n            if(countableBusiness>=silverRequiredBusiness){\r\n                investors[userAddr].silverPackage = 1;\r\n                silverPackageUsers.push(userAddr);\r\n            }                         \r\n            \r\n        }\r\n        else if(investors[userAddr].goldPackage==0 && \r\n            investors[userAddr].packageCnt>=goldPackageRequired && \r\n            investors[userAddr].sixPackageDirectCnt>=5){\r\n            uint[4] memory returnDirectArr =  sort(userAddr,3);\r\n             uint topFirstAmt = (returnDirectArr[0]>(goldRequiredBusiness*40/100)) ? goldRequiredBusiness*40/100 :  returnDirectArr[0];\r\n            uint topSecondAmt = (returnDirectArr[1]>(goldRequiredBusiness*30/100)) ? goldRequiredBusiness*30/100 :  returnDirectArr[1];\r\n            uint topThirdAmt = (returnDirectArr[2]>(goldRequiredBusiness*20/100))  ? goldRequiredBusiness*20/100 :  returnDirectArr[2];\r\n            uint remainingAmt = (returnDirectArr[3]>(goldRequiredBusiness*10/100)) ? goldRequiredBusiness*10/100 :  returnDirectArr[3];\r\n            uint countableBusiness = topFirstAmt + topSecondAmt + topThirdAmt + remainingAmt;\r\n            if(countableBusiness>=goldRequiredBusiness){\r\n                investors[userAddr].goldPackage = 1;\r\n                goldPackageUsers.push(userAddr);\r\n         \r\n            }\r\n       \r\n        }\r\n        else if(investors[userAddr].diamondPackage==0 && \r\n            investors[userAddr].packageCnt>=diamonPackageRequired && \r\n            investors[userAddr].sixPackageDirectCnt>=5){\r\n            uint[4] memory returnDirectArr =  sort(userAddr,4);\r\n            uint topFirstAmt = (returnDirectArr[0]>(diamondRequiredBusiness*40/100)) ? diamondRequiredBusiness*40/100 :  returnDirectArr[0];\r\n            uint topSecondAmt = (returnDirectArr[1]>(diamondRequiredBusiness*30/100)) ? diamondRequiredBusiness*30/100 :  returnDirectArr[1];\r\n            uint topThirdAmt = (returnDirectArr[2]>(diamondRequiredBusiness*20/100))  ? diamondRequiredBusiness*20/100 :  returnDirectArr[2];\r\n            uint remainingAmt = (returnDirectArr[3]>(diamondRequiredBusiness*10/100)) ? diamondRequiredBusiness*10/100 :  returnDirectArr[3];\r\n            uint countableBusiness = topFirstAmt + topSecondAmt + topThirdAmt + remainingAmt;\r\n            if(countableBusiness>=diamondRequiredBusiness){\r\n                investors[userAddr].diamondPackage = 1;\r\n                diamondPackageUsers.push(userAddr);\r\n            }       \r\n        }\r\n    }\r\n\r\n\r\n    function getTopDirectList(address userAddr,uint n) public view returns (address[] memory) {\r\n      \r\n        \r\n         address[] memory getSortedArr = bubbleSort(userDirectList[userAddr]);\r\n         address[] memory topNValues = new address[](n);\r\n        \r\n        for (uint i = 0; i < n; i++) {\r\n            topNValues[i] = getSortedArr[userDirectList[userAddr].length - 1 - i]; // Get the top n values\r\n        }\r\n        \r\n        return topNValues;\r\n    }\r\n\r\n\r\n    function bubbleSort(address[] memory arr) public view returns (address[] memory) {\r\n        uint n = arr.length;\r\n        uint[] memory sortedArray = new uint[](n);\r\n        address[] memory sortedArrayAddr = new address[](n);\r\n        for (uint i = 0; i < n; i++) {\r\n            sortedArray[i] = investors[arr[i]].totalBusiness;\r\n            sortedArrayAddr[i] = arr[i];\r\n        }\r\n\r\n        for (uint i = 0; i < n - 1; i++) {\r\n            for (uint j = 0; j < n - i - 1; j++) {\r\n                if (sortedArray[j] > sortedArray[j + 1]) {\r\n                    (sortedArray[j], sortedArray[j + 1]) = (sortedArray[j + 1], sortedArray[j]);\r\n                    (sortedArrayAddr[j], sortedArrayAddr[j + 1]) = (sortedArrayAddr[j + 1], sortedArrayAddr[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return sortedArrayAddr;\r\n    }\r\n\r\n    function checkInTopDirect(address[] memory arr,address checkAddr) public view returns (uint){\r\n        for(uint i=0;i<arr.length;i++){\r\n            if(arr[i]==checkAddr){\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    function sort(address userAddr, uint topDirect) public view returns(uint[4] memory returnArr){\r\n        uint getTotalForTenPercent ;\r\n        returnArr[0] = 0;\r\n        returnArr[1] = 0;\r\n        returnArr[2] = 0;\r\n        returnArr[3] = 0;\r\n     //   address[] memory topDirectList = getTopDirectList(userAddr,topDirect);\r\n        for(uint i=0;i<userDirectList[userAddr].length;i++) {\r\n            uint directTotalBusiness;\r\n        //     uint foundIt = checkInTopDirect(topDirectList,userDirectList[userAddr][i]);\r\n                \r\n            \r\n        //     if(foundIt==0){\r\n        //         directTotalBusiness = investors[userDirectList[userAddr][i]].totalBusiness ;\r\n        //     }\r\n        //     else {\r\n        //     }\r\n\r\n             directTotalBusiness = investors[userDirectList[userAddr][i]].totalBusiness - investors[userDirectList[userAddr][i]].selfBusiness;\r\n\r\n            getTotalForTenPercent += directTotalBusiness;\r\n            if(directTotalBusiness>returnArr[0]){\r\n                returnArr[3]=returnArr[2];\r\n                returnArr[2]=returnArr[1];\r\n                returnArr[1]=returnArr[0];\r\n                returnArr[0]=directTotalBusiness;\r\n            }\r\n            else if(directTotalBusiness>returnArr[1]){\r\n                returnArr[3]=returnArr[2];\r\n                returnArr[2]=returnArr[1];\r\n                returnArr[1]=directTotalBusiness;\r\n            }\r\n            else if(directTotalBusiness>returnArr[2]){\r\n                returnArr[3]=returnArr[2];\r\n                returnArr[2]=directTotalBusiness;\r\n            }\r\n             else if(directTotalBusiness>returnArr[3]){\r\n                returnArr[3]=directTotalBusiness;\r\n            }\r\n            \r\n        }\r\n        returnArr[3] = getTotalForTenPercent - (returnArr[0]+returnArr[1]+returnArr[2]);\r\n    }\r\n\r\n\r\n\r\nfunction distributeRoyalityIncome() external onlyOwner {\r\n    // Distribute to only silver users\r\n    if (silverPackageUsers.length > 0) {\r\n        uint silverEachAmt = silverPoolCollection / silverPackageUsers.length;\r\n        silverPoolCollection = 0;\r\n        for (uint i = 0; i < silverPackageUsers.length; i++) {\r\n            uint amountMul = silverEachAmt;\r\n            transferWithFee(silverPackageUsers[i], amountMul, 3, adminWalletAddress, 0);\r\n        }\r\n    } else {\r\n        transferOnly(adminWalletAddress, silverPoolCollection, 0, adminWalletAddress, 0);\r\n        silverPoolCollection = 0;\r\n    }\r\n\r\n    // Distribute to only gold users\r\n    if (goldPackageUsers.length > 0) {\r\n        uint goldEachAmt = goldPoolCollection / goldPackageUsers.length;\r\n        goldPoolCollection = 0;\r\n        for (uint i = 0; i < goldPackageUsers.length; i++) {\r\n            uint amountMul = goldEachAmt;\r\n            transferWithFee(goldPackageUsers[i], amountMul, 3, adminWalletAddress, 0);\r\n        }\r\n    }else {\r\n         transferOnly(adminWalletAddress, goldPoolCollection, 0, adminWalletAddress, 0);\r\n        goldPoolCollection = 0;\r\n    }\r\n\r\n    // Distribute to only diamond users\r\n    if (diamondPackageUsers.length > 0) {\r\n        uint diamondEachAmt = diamondPoolCollection / diamondPackageUsers.length;\r\n        diamondPoolCollection = 0;\r\n        for (uint i = 0; i < diamondPackageUsers.length; i++) {\r\n            uint amountMul = diamondEachAmt;\r\n            transferWithFee(diamondPackageUsers[i], amountMul, 3, adminWalletAddress, 0);\r\n        }\r\n    } else {\r\n         transferOnly(adminWalletAddress, diamondPoolCollection, 0, adminWalletAddress, 0);\r\n        diamondPoolCollection = 0;\r\n    }\r\n    resetUserBusiness();\r\n}\r\n\r\n\r\n function resetUserBusiness() internal  {\r\n    for (uint i = 0; i < userList.length; i++) {\r\n        address userAddr = userList[i];\r\n        investors[userAddr].totalBusiness = 0;\r\n        investors[userAddr].selfBusiness = 0;\r\n    }\r\n\r\n    // Clear the arrays after resetting business values\r\n    delete silverPackageUsers;\r\n    delete goldPackageUsers;\r\n    delete diamondPackageUsers;\r\n}\r\n\r\n\r\n    function findLevelIndex(address findInAddress,address findAddress,uint level,uint packageIndex) public view returns (uint i){\r\n        \r\n        for( i=0; i< 2**level;i++){\r\n            if(binaryindexes[packageIndex][findInAddress][level][i]==findAddress){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n   \r\n\r\n \r\n\r\n    function findPackageIndex(uint _val) public view returns (uint){\r\n        for(uint i=1; i < packageList.length; i++){\r\n            if(packageList[i]==_val){\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n   }\r\n    \r\n    function findInMaxLenghtArr(uint _val) public view returns (bool){\r\n        for(uint i=0; i < maxLenghtArr.length; i++){\r\n            if(maxLenghtArr[i]==_val){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n   }        \r\n\r\n\r\n    // 0.5 percent\r\n    function sendQoreIncome(address sendTo,uint amount) internal{\r\n        transferWithFee(sendTo,amount,2,msg.sender,0);\r\n    }\r\n\r\n\r\n    function sendQoreLapsIncome(uint level,uint amount) internal{\r\n        uint levelPercent;\r\n        uint levelAmt;\r\n\r\n        for(uint i=level;i<=11;i++){\r\n            levelPercent = i > 2 ? 10 : 5;\r\n            levelAmt += amount * levelPercent/100;\r\n    \r\n        }\r\n      \r\n        transferOnly(adminWalletAddress,levelAmt,2,msg.sender,0);\r\n    }\r\n\r\n     // send 60% of total amount \r\n   function sendDirectIncome(uint amount,uint packageIndex) internal {\r\n        uint directIncomePercent  = (investors[investors[msg.sender].referer].currentPackageIndex >=packageIndex) ? 60 : 30;\r\n        uint directIncome = amount * directIncomePercent/100;\r\n        //uint directIncomeWithDeci = directIncome*(10**18);\r\n        transferWithFee(investors[msg.sender].referer,directIncome,0,msg.sender,0);\r\n        \r\n        //investors[investors[msg.sender].referer].directIncome +=directIncome;\r\n        if(directIncomePercent==30){\r\n            silverPoolCollection +=  directIncome*50/100;\r\n            goldPoolCollection += directIncome*30/100;\r\n            diamondPoolCollection += directIncome*20/100;\r\n        }\r\n   }\r\n\r\n    // send 20% of total amount\r\n   function sendReferalIncome(uint amount,uint packageIndex) internal {\r\n        uint totalReferralAmt = amount*20/100;\r\n        address rec = investors[msg.sender].referer;\r\n        uint levels =0; \r\n\r\n    \r\n        for (uint i = 0; i < referralLevelIncome.length; i++) {\r\n            if (!investors[rec].registered) {\r\n                break;\r\n            }\r\n\r\n            uint refRewardPercent = referralLevelIncome[i];\r\n            uint a = totalReferralAmt * refRewardPercent / 100;\r\n            if(investors[rec].currentPackageIndex>=packageIndex){\r\n                transferWithFee(rec,a,1,msg.sender,levels);\r\n                investors[rec].refererBalance += a; \r\n            }\r\n            else {\r\n                transferOnly(adminWalletAddress,a,1,msg.sender,levels);\r\n                adminWallet+=a;\r\n            }\r\n            userIncomeLevels[rec].push(levels);\r\n            rec = investors[rec].referer;\r\n            levels++;\r\n\r\n        }\r\n\r\n    }   \r\n\r\n    \r\n\r\n    function transferWithFee(address sendTo,uint sendAmtWithFee,uint income_type,address fromAddr,uint levels) internal{\r\n       BEP20 token    = BEP20(tokenAddr);\r\n        uint adminFeeAmt  = sendAmtWithFee*5/100;\r\n        uint royalityFeeAmt  = adminFeeAmt;\r\n        uint sendAmt = sendAmtWithFee - (adminFeeAmt + royalityFeeAmt) ;\r\n      token.transfer(adminWalletAddress,adminFeeAmt);\r\n        silverPoolCollection +=  royalityFeeAmt*50/100;\r\n        goldPoolCollection += royalityFeeAmt*30/100;\r\n        diamondPoolCollection += royalityFeeAmt*20/100;\r\n      token.transfer(sendTo,sendAmt);\r\n        \r\n        totalincomeallusers+=sendAmt;\r\n        userincomes[sendTo].push(Income(income_type, sendAmt, fromAddr, block.timestamp,levels));\r\n    }\r\n\r\n    function transferOnly(address sentTo,uint sendAmt,uint income_type,address fromAddr,uint levels) internal {\r\n     BEP20 token    = BEP20(tokenAddr);\r\n       totalincomeallusers+=sendAmt;\r\n      token.transfer(sentTo,sendAmt);\r\n\r\n     \r\n        userincomes[adminWalletAddress].push(Income(income_type,sendAmt,fromAddr,block.timestamp,levels));\r\n    }   \r\n\r\n    function calculateFee(uint256 amount) internal  pure returns (uint256) {\r\n    return (amount * 10) / 100;\r\n}\r\n\r\n\r\n    function showUserIncomes(address addr) public view returns (uint[] memory incomeType,\r\n                                                                uint[] memory amount,\r\n                                                                address[] memory fromAddr,\r\n                                                                uint[] memory time,\r\n                                                               uint[] memory levels ) {\r\n        uint length = userincomes[addr].length;\r\n        incomeType= new uint[](length);\r\n        amount= new uint[](length);\r\n        fromAddr= new address[](length);\r\n        time= new uint[](length);\r\n        levels = new uint[](length);  \r\n\r\n\r\n      \r\n      for(uint i = 0; i < length; i++){\r\n      \r\n          incomeType[i] = userincomes[addr][i].incomeType;\r\n          amount[i] = userincomes[addr][i].incomeAmt;\r\n          fromAddr[i] = userincomes[addr][i].fromAddr;\r\n          time[i] = userincomes[addr][i].createdAt;\r\n         levels[i] = userincomes[addr][i].level;\r\n\r\n   \r\n      }\r\n      \r\n      return (incomeType, amount, fromAddr, time,levels);\r\n  }     \r\n\r\n  \r\n\r\n\r\n\r\nfunction getPackageDetails(address user) public view returns (uint[] memory packageAmounts, uint[] memory purchaseTimes) {\r\n    require(investors[user].registered, \"User not registered\");\r\n\r\n    Package[] storage packages = userPackages[user];\r\n    uint packageCount = packages.length;\r\n    packageAmounts = new uint[](packageCount);\r\n    purchaseTimes = new uint[](packageCount);\r\n\r\n    for (uint i = 0; i < packageCount; i++) {\r\n\r\n\r\n        packageAmounts[i] = packages[i].amount;\r\n        purchaseTimes[i] = packages[i].purchaseTime;\r\n    }\r\n\r\n    return (packageAmounts, purchaseTimes);\r\n}   \r\n\r\n\r\nfunction getUserDirectListLength(address user) public view returns (uint) {\r\n    return userDirectList[user].length;\r\n}   \r\n\r\n\r\nfunction getUserDirectListLength24hrs(address user) public view returns (uint) {\r\n    uint count = 0;\r\n    for (uint i = 0; i < userDirectList[user].length; i++) {\r\n        if (block.timestamp - lastInteractionTime[userDirectList[user][i]] <= 1 days) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n} \r\n\r\n\r\n\r\n // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        BEP20 _token = BEP20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }   \r\n\r\n     // Only owner can call this function\r\n    function transferOwnership(address to) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n        return true;\r\n    }   \r\n\r\n function getUsersPurchasedLast24Hours() public view returns (uint) {\r\n        return userId;\r\n    }  \r\n\r\n function getallusersincomeLast24Hours() public view returns (uint) {\r\n        return totalincomealluserss;\r\n    }   \r\n\r\n   \r\n function getLastPackageAmount(address user) public view returns (uint) {\r\n    require(investors[user].registered, \"User not registered\");\r\n    Package[] storage packages = userPackages[user];\r\n\r\n    if (packages.length > 0) {\r\n        uint lastIndex = packages.length - 1;\r\n        return packages[lastIndex].amount;\r\n    } else {\r\n        // No packages purchased by the user\r\n        return 0;\r\n    }\r\n}               \r\n\r\n\r\nfunction getAllDirectReferrals(address userAddr) external view returns (address[] memory) {\r\n    return userDirectList[userAddr];\r\n}   \r\n\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"binaryindexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"}],\"name\":\"bubbleSort\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"checkAddr\",\"type\":\"address\"}],\"name\":\"checkInTopDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamonPackageRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"diamondPackageUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondPoolCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRoyalityIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"findInMaxLenghtArr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"findInAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"findAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageIndex\",\"type\":\"uint256\"}],\"name\":\"findLevelIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"findPackageIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"packageIndex\",\"type\":\"uint256\"}],\"name\":\"findParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftOrRight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getAllDirectReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLastPackageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageIndex\",\"type\":\"uint256\"}],\"name\":\"getMappingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPackageDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"packageAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"purchaseTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getTopDirectList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDirectListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDirectListLength24hrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersPurchasedLast24Hours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getallusersincomeLast24Hours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldPackageRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"goldPackageUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldPoolCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasBoughtPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"refererBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPackageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"silverPackage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldPackage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamondPackage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sixPackageDirectCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ninePackageDirectCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elevenPackageDirectCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBusiness\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInteractionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxLenghtArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"packageinvestors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"leftUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rightUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelEightCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelNineCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelTenCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelElevenCnt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regenerateLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"showUserIncomes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"incomeType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"fromAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverPackageRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"silverPackageUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverPoolCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"topDirect\",\"type\":\"uint256\"}],\"name\":\"sort\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"returnArr\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sortedArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalincomeallusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalincomealluserss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDirectList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrslevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userincomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"incomeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomeAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userlevel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userpackagelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"packageIndex\",\"type\":\"uint256\"}],\"name\":\"validReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LifeEnjoy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98c3d93eb8a04028c0b4e44288229a882f18974266626eca517843dc91abe7d2"}