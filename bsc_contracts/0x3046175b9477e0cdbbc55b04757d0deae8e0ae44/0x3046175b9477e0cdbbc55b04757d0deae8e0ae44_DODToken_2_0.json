{"SourceCode": "/*\r\n * Day of Defeat (DOD)\r\n *\r\n * Radical Social Experiment token mathematically designed to give holders 10,000,000X PRICE INCREASE\r\n *\r\n * Website: https://dayofdefeat.app/\r\n * Twitter: https://twitter.com/dayofdefeatBSC\r\n * Telegram: https://t.me/DayOfDefeatBSC\r\n * BTok: https://titanservice.cn/dayofdefeatCN\r\n *\r\n * By Studio L, Legacy Capital Division\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: StudioL/DOD/DODTokenV2.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IPancakeSwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IFundPool {\r\n    function swapForFundPool() external;\r\n}\r\n\r\ninterface IMarketingPool {\r\n    function swapForMarketingPool() external;\r\n}\r\n\r\n/**\r\n * Ensure that the dao governance contract has been deployed correctly\r\n * before deploying the dod token contract\r\n */\r\ncontract DODToken_2_0 is Ownable, ReentrancyGuard, ERC20Detailed(\"Day of Defeat 2.0\", \"DOD\", 18) {\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 private constant genesisTotalSupply = 100000000000000 * 10 ** 18;\r\n\r\n    uint256 private constant DIVISOR = 10000;\r\n    uint256 private marketingFee = 400;\r\n    uint256 private transitionFee = 1500;\r\n\r\n    uint256 private constant maxFee = 2500; // The tax rate can be adjusted from 0% to 25%\r\n    uint256 private constant transferLimit = 9999999999; // Limit per transfer\r\n    uint256 private constant BASE = 10000000000;\r\n\r\n    /**\r\n     * When any one of the following three conditions is met,\r\n     * the bonus pool will be triggered to start the voting mechanism.\r\n     *\r\n     * Triggering conditions:\r\n     *\r\n     * - When there is >=99,999,000BUSD in the bonus pool.\r\n     * - When the total remaining amount of DOD <= 1,000,000,000 (1 billion).\r\n     * - When the number of DOD burned >= 99,999,000,000,000 (999,99 billion).\r\n     *\r\n     * To learn more about the mechanism, please transfer to the official website to view.\r\n     */\r\n    uint256 private constant bonusPoolTrigger = 99999000 * 10 ** 18;\r\n    uint256 private constant totalRemainingTrigger = 1000000000 * 10 ** 18;\r\n    uint256 private constant totalBurnedTrigger = 99999000000000 * 10 ** 18;\r\n\r\n    /**\r\n     * When the conditions of the prize pool are met, if the voting is passed, the exchange will be started.\r\n     * As long as DOD is transferred to the bonus pool address,\r\n     * The bonus pool will automatically transfer BUSD to the corresponding wallet address at the rate of 0.1BUSD/DOD.\r\n     * The redemption period is 90 days\r\n     */\r\n    uint256 private constant exchangePeriod = 90 days;\r\n\r\n    /**\r\n     * When the conditions are met, the rigid price of DOD to BUSD (1 DOD => 0.1 BUSD)\r\n     */\r\n    uint256 private constant dodToBusdMultiplier = 1000;\r\n\r\n    /**\r\n     * If none of the above three conditions are met,\r\n     * the bonus pool will be automatically triggered after November 18, 2026 to open the voting mechanism.\r\n     * Note: this time is relative to the deployment time of v1\r\n     *\r\n     * If the vote fails, the game continues without making any changes.\r\n     * If the vote is passed, the bonus pool will be opened and the exchange will be opened.\r\n     * But the conversion ratio needs to be determined according to the amount of DOD held.\r\n     */\r\n    uint256 private constant deadline = 1794931200; // November 18, 2026\r\n\r\n    mapping(address => bool) public excludeFee; // Do trading accounts need to pay taxes\r\n    mapping(address => bool) public includePair; // Trading Pair Limits for Selling\r\n\r\n    address public constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public constant BNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public constant FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public pair; // BNB-DOD LP\r\n\r\n    address private genesis; // genesis wallet address\r\n    address private marketingPool; // marketing pool\r\n    address private fundPool; // Fund pool\r\n    address private governor; // governance contract\r\n    bool private meetCriteria; // When the conditions of the prize pool are met.\r\n    bool private pass; // If the voting is passed, the prize pool will be unlock.\r\n    bool private swapStatus; // Whether to trigger an automatic call to a third party.\r\n    bool private isFundSwap; // Indicator, which only triggers one swap operation at a time, and is executed alternately.\r\n    bool private inSwap = false;\r\n    uint256 public lastTriggerTime; // In order to reduce the trigger frequency and reduce the gas fee borne by the user\r\n    uint256 public triggerInterval = 2 hours; // The trigger interval for checkUnlock and autoSwap.\r\n    uint256 private unlockTime; // The unlock time when the unlock condition is met.\r\n    /**\r\n     * \r\n     * After the bonus pool is unlocked, the game is over and the transaction is closed.\r\n     * At this time, users holding DOD can only swap in this contract and cannot trade in DEX\r\n     * \r\n     * Notice:\r\n     * Closing transactions are performed by the administrator, provided that the pool is unlocked\r\n     * \r\n     */\r\n    bool private stopTrade;\r\n\r\n    /**\r\n     * When unlocking, the bonus pool's (BUSD balance and total remaining amount of DOD)\r\n     */\r\n    uint256 private busdBalanceUnlocking;\r\n    uint256 private totalSupplyUnlocking;\r\n\r\n    event AdjustmentFee(address indexed operator, uint256 _marketingFee, uint256 _transitionFee);\r\n    event SetVotePass(address indexed operator, bool _pass);\r\n    event SetGovernor(address indexed newGovernor, address indexed oldGovernor);\r\n    event UpdatePool(address indexed marketingPool, address indexed fundPool);\r\n    event UnlockFundPool(address indexed operator, uint256 unlockTime);\r\n    event SetTradeInCase(address indexed operator, bool enable);\r\n    event SetSwapStatus(address indexed operator, bool swapStatus);\r\n    event SetTriggerInterval(address indexed operator, uint256 _triggerInterval);\r\n    event IncludePairLimit(address indexed operator, address pair, bool enable);\r\n    event WithdrawToken(address indexed operator, address token, address to, uint256 amount);\r\n\r\n    /**\r\n     *  Note: After the token contract is deployed,\r\n     *  all administrator privileges will be transferred to the multi-signature wallet address\r\n     *  All FEE RECEIVER addresses use multi-signature wallets\r\n     */\r\n    constructor(address _genesis, address _governor) {\r\n        require(_genesis != address(0), \"Zero genesis address\");\r\n        require(_governor != address(0), \"Zero governor\");\r\n        require(isContract(_governor), \"Non contract address\");\r\n        genesis = _genesis;\r\n        governor = _governor;\r\n\r\n        excludeFee[address(this)] = true;\r\n        excludeFee[genesis] = true;\r\n        excludeFee[address(0)] = true;\r\n\r\n        pair = IPancakeSwapFactory(FACTORY).createPair(\r\n            BNB,\r\n            address(this)\r\n        );\r\n        includePair[pair] = true;\r\n        /**\r\n         * Notes:\r\n         * \r\n         * Add the `ROUTER` to includePair, otherwise, removing liquidity will fail.\r\n         * When removing liquidity, tokens are transferred from pair to router,\r\n         * and then transferred from router to user address\r\n         * \r\n         */\r\n        includePair[ROUTER] = true;\r\n\r\n        // The totalSupply is assigned to the genesis\r\n        _mint(_genesis, genesisTotalSupply);\r\n    }\r\n\r\n    modifier onlyGovernor () {\r\n        require(_msgSender() == governor, \"Governor: caller is not the governor\");\r\n        _;\r\n    }\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return genesisTotalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev genesisTotalSupply - bured.\r\n     */\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) external override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transferUnchecked(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        unchecked {\r\n            _balances[from] -= amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (stopTrade) {\r\n            require(\r\n                !includePair[from] && !includePair[to],\r\n                \"Trading in dex has been stopped\"\r\n            );\r\n        }\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        // If `to` is the blackhole address,\r\n        // it will be included in the totalSupply of destruction\r\n        if (to == DEAD) {\r\n            unchecked {\r\n                _totalSupply -= amount;\r\n            }\r\n            return _transferUnchecked(from, to, amount);\r\n        }\r\n\r\n        if (inSwap || unlockTime != 0) {\r\n            return _transferUnchecked(from, to, amount);\r\n        }\r\n\r\n        // Not triggered when buying. from = pair  \r\n        if (\r\n            !includePair[from] &&\r\n            block.timestamp >= lastTriggerTime + triggerInterval\r\n        ) {\r\n            _autoSwapInPool();\r\n            _checkUnlock();\r\n        }\r\n\r\n        uint256 fromAmount = amount;\r\n\r\n        // 19% tax on all transactions.\r\n        // Exclude `from` is `ROUTER` to avoid being charged twice\r\n        // When removing liquidity, tokens are transferred from pair to router,\r\n        // and then transferred from router to user address\r\n        if (from != ROUTER && !excludeFee[from] && !excludeFee[to]) {\r\n            if (marketingFee != 0) {\r\n                uint256 marketTax = (fromAmount * marketingFee) / DIVISOR;\r\n                _transferUnchecked(from, marketingPool, marketTax);\r\n                amount -= marketTax;\r\n            }\r\n            if (transitionFee != 0) {\r\n                uint256 transitionTax = (fromAmount * transitionFee) / DIVISOR;\r\n                _transferUnchecked(from, fundPool, transitionTax);\r\n                amount -= transitionTax;\r\n            }\r\n            // When sold all, leave a trace of dust..\r\n            if (includePair[to] && fromAmount == fromBalance) {            \r\n                amount = (amount * transferLimit) / BASE;\r\n            }\r\n        }\r\n\r\n        _transferUnchecked(from, to, amount);\r\n\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the `DEAD` address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _balances[DEAD] += amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, DEAD, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `caller`, reducing the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     */\r\n    function burn(uint256 amount) external {\r\n        // require(amount != 0, \"DOD: burn zero amount\");\r\n        if (amount == 0) return;\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function autoSwapInPool() external {\r\n        _autoSwapInPool();\r\n    }\r\n\r\n    /**\r\n     * @dev Swap trigger. Only one operation is triggered at a time, alternate execution\r\n     */\r\n    function _autoSwapInPool() internal swapping {\r\n        if (swapStatus) {\r\n            isFundSwap\r\n                ? IFundPool(fundPool).swapForFundPool()\r\n                : IMarketingPool(marketingPool).swapForMarketingPool();\r\n            isFundSwap = !isFundSwap;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the unlock trigger condition is met.\r\n     *\r\n     * Triggering conditions:\r\n     *\r\n     * - When there is >=99,999,000BUSD in the bonus pool.\r\n     * - When the total remaining amount of DOD <= 1,000,000,000 (1 billion).\r\n     * - When the number of DOD burned >= 99,999,000,000,000 (999,99 billion).\r\n     */\r\n    function _checkUnlock() internal {\r\n        lastTriggerTime = block.timestamp;\r\n        if (\r\n            !meetCriteria &&\r\n            (IERC20(BUSD).balanceOf(address(this)) >= bonusPoolTrigger ||\r\n                _totalSupply <= totalRemainingTrigger ||\r\n                genesisTotalSupply - _totalSupply >= totalBurnedTrigger ||\r\n                block.timestamp >= deadline /* (November 18, 2026) 86400 * 30 * 12 * 5 */\r\n            )\r\n        ) {\r\n            meetCriteria = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the unlock trigger condition is met.\r\n     * When the conditions are met and the vote is passed, the exchange is started\r\n     */\r\n    function swap(uint256 amount) external nonReentrant {\r\n        require(meetCriteria && pass, \"DOD: contract is locked\");\r\n        require(unlockTime != 0, \"DOD: vote failed\");\r\n        require(\r\n            block.timestamp <= unlockTime + exchangePeriod,\r\n            \"DOD: The redemption time has passed\"\r\n        );\r\n\r\n        address sender = _msgSender();\r\n        IERC20(address(this)).transferFrom(sender, address(this), amount);\r\n\r\n        /**\r\n         * 1. Before the deadline, all conditions are met,\r\n         * and the bonus pool is unlocked, 1DOD:0.1BUSD swap.\r\n         * \r\n         * 2. In any other case,\r\n         * swap according to the ratio of the swap amount to the totalSupply amount of DOD\r\n         */\r\n        if (\r\n            IERC20(BUSD).balanceOf(address(this)) >= bonusPoolTrigger &&\r\n                _totalSupply <= totalRemainingTrigger &&\r\n                genesisTotalSupply - _totalSupply >= totalBurnedTrigger\r\n        ) {\r\n            IERC20(BUSD).transfer(\r\n                sender,\r\n                (amount * dodToBusdMultiplier) / DIVISOR\r\n            );\r\n        } else {\r\n            require(\r\n                busdBalanceUnlocking != 0 && totalSupplyUnlocking != 0,\r\n                \"Abnormal quantity\"\r\n            );\r\n            IERC20(BUSD).transfer(\r\n                sender,\r\n                (amount * busdBalanceUnlocking) / totalSupplyUnlocking\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Current unlock exchange information.\r\n     */\r\n    function getUnlockInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _busdBalanceUnlocking,\r\n            uint256 _totalSupplyUnlocking,\r\n            uint256 _unlockTime,\r\n            bool _stopTrade,\r\n            bool _meetCriteria,\r\n            bool _pass,\r\n            uint256 _deadline,\r\n            uint256 _exchangePeriod,\r\n            uint256 _dodToBusdMultiplier\r\n        )\r\n    {\r\n        return (\r\n            busdBalanceUnlocking,\r\n            totalSupplyUnlocking,\r\n            unlockTime,\r\n            stopTrade,\r\n            meetCriteria,\r\n            pass,\r\n            deadline,\r\n            exchangePeriod,\r\n            dodToBusdMultiplier\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Current pool address.\r\n     */\r\n    function getPool() external view returns (address marketing, address fund) {\r\n        return (marketingPool, fundPool);\r\n    }\r\n\r\n    /**\r\n     * @dev Current unlock exchange information.\r\n     */\r\n    function getFeeInfo()\r\n        external\r\n        view\r\n        returns (\r\n            address _genesis,\r\n            address _governor,\r\n            bool _swapStatus,\r\n            bool _isFundSwap,\r\n            uint256 _lastTriggerTime,\r\n            uint256 _triggerInterval,\r\n            uint256 _marketingFee,\r\n            uint256 _transitionFee,\r\n            uint256 _maxFee,\r\n            uint256 _BASE,\r\n            uint256 _bonusPoolTrigger,\r\n            uint256 _totalRemainingTrigger,\r\n            uint256 _totalBurnedTrigger\r\n        )\r\n    {\r\n        return (\r\n            genesis,\r\n            governor,\r\n            swapStatus,\r\n            isFundSwap,\r\n            lastTriggerTime,\r\n            triggerInterval,\r\n            marketingFee,\r\n            transitionFee,\r\n            maxFee,\r\n            BASE,\r\n            bonusPoolTrigger,\r\n            totalRemainingTrigger,\r\n            totalBurnedTrigger\r\n        );\r\n    }\r\n\r\n    // ============================================== Governor operation ==============================================\r\n    /**\r\n     * @dev Regulate fees within limits (maximum 25%)\r\n     */\r\n    function adjustmentFee(\r\n        uint256 _marketingFee,\r\n        uint256 _transitionFee\r\n    ) external onlyGovernor {\r\n        require(\r\n            _marketingFee + _transitionFee <= maxFee,\r\n            \"DOD: total tax over range\"\r\n        );\r\n        marketingFee = _marketingFee;\r\n        transitionFee = _transitionFee;\r\n        emit AdjustmentFee(_msgSender(), _marketingFee, _transitionFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Voting passed, governance contract execution\r\n     */\r\n    function setVotePass() external onlyGovernor {\r\n        require(!pass, \"DOD: is currently passed\");\r\n        pass = true;\r\n        emit SetVotePass(_msgSender(), pass);\r\n    }\r\n\r\n    /**\r\n     * @dev Set up the governance contract\r\n     */\r\n    function setGovernor(address _newGovernor) external onlyGovernor {\r\n        require(_newGovernor != address(0), \"error governor\");\r\n        require(governor != _newGovernor, \"same address\");\r\n        emit SetGovernor(_newGovernor, governor);\r\n        governor = _newGovernor;\r\n    }\r\n\r\n    /**\r\n     * @dev In case of emergency, change the pool address\r\n     * - The pool address is the contract address or multi-signature address\r\n     */\r\n    function setPoolInCase(address _marketingPool, address _fundPool) external onlyGovernor {\r\n        require(marketingPool != address(0), \"MarketingPool: uninitialized\");\r\n        require(fundPool != address(0), \"FundPool: uninitialized\");\r\n\r\n        _updatePool(_marketingPool, _fundPool);\r\n    }\r\n\r\n    /**\r\n     * @dev Just in case, if a user has liquidity and has not lift it,\r\n     * requests to open/close the transaction through the governance contract.\r\n     * \r\n     * Any operation is prohibited before the bonus pool is unlocked\r\n     */\r\n    function setTradeInCase(bool enable) external onlyGovernor {\r\n        require(unlockTime != 0, \"Bonus pool not unlocked\");\r\n        require(stopTrade != enable, \"Same status\");\r\n        stopTrade = enable;\r\n        emit SetTradeInCase(_msgSender(), enable);\r\n    }\r\n\r\n    /**\r\n     * @dev If the DOD token is attacked or needs to be migrated,\r\n     * transfer the assets in the contract to the new address\r\n     */\r\n    function withdrawToken(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyGovernor {\r\n        if (_token == address(0)) {\r\n            payable(_to).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).transfer(_to, _amount);\r\n        }\r\n        emit WithdrawToken(_msgSender(), _token, _to, _amount);\r\n    }\r\n    // ============================================== Owner operation ==============================================\r\n    \r\n    /**\r\n     * Initialize after deploying the token contract\r\n     */\r\n    function initializePool(address _marketingPool, address _fundPool) external onlyOwner {\r\n        require(marketingPool == address(0), \"MarketingPool: has been set\");\r\n        require(fundPool == address(0), \"FundPool: has been set\");\r\n        _updatePool(_marketingPool, _fundPool);\r\n    }\r\n\r\n    function _updatePool(address _marketingPool, address _fundPool) internal {\r\n        require(isContract(_marketingPool), \"MarketingPool: non contract address\");\r\n        require(isContract(_fundPool), \"FundPool: non contract address\");\r\n        marketingPool = _marketingPool;\r\n        fundPool = _fundPool;\r\n        emit UpdatePool(_marketingPool, _fundPool);\r\n\r\n        excludeFee[marketingPool] = true;\r\n        excludeFee[fundPool] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev When the vote is passed, the administrator needs to unlock it\r\n     * When the bonus pool is unlocked, close the DEX transaction\r\n     * \r\n     * NOTICE:\r\n     * Make sure that the liquidity has been removed before unlocking,\r\n     * otherwise the user who added liquidity will not be able to unlock the liquidity\r\n     * after unlocking and will be permanently locked\r\n     */\r\n    function unlockFundPool() external onlyOwner {\r\n        require(pass, \"Unlock: vote failed\");\r\n        require(\r\n            IERC20(pair).balanceOf(genesis) < 10 ** 18,\r\n            \"Unlock: genesis did not remove liquidity\"\r\n        );\r\n\r\n        unlockTime = block.timestamp;\r\n        busdBalanceUnlocking = IERC20(BUSD).balanceOf(address(this));\r\n        totalSupplyUnlocking = _totalSupply;\r\n        emit UnlockFundPool(_msgSender(), unlockTime);\r\n\r\n        stopTrade = true;\r\n        emit SetTradeInCase(_msgSender(), true);\r\n    }\r\n\r\n    /**\r\n     * @dev Include/exclude pair selling limit\r\n     */\r\n    function includePairLimit(address addr, bool enable) external onlyOwner {\r\n        require(addr != address(0), \"DOD: zero address\");\r\n        require(includePair[addr] != enable, \"DOD: same value\");\r\n        includePair[addr] = enable;\r\n        emit IncludePairLimit(_msgSender(), addr, enable);\r\n    }\r\n\r\n    /**\r\n     * @dev Turn on/off third-party automatic swap calls\r\n     */\r\n    function setSwapStatus(bool enable) external onlyOwner {\r\n        require(swapStatus != enable, \"DOD: same value\");\r\n        swapStatus = enable;\r\n        emit SetSwapStatus(_msgSender(), enable);\r\n    }\r\n\r\n    /**\r\n     * @dev Set trigger interval\r\n     */\r\n    function setTriggerInterval(uint256 _triggerInterval) external onlyOwner {\r\n        require(triggerInterval != _triggerInterval, \"DOD: same value\");\r\n        require(_triggerInterval != 0, \"DOD: zero value\");\r\n        triggerInterval = _triggerInterval;\r\n        emit SetTriggerInterval(_msgSender(), _triggerInterval);\r\n    }\r\n\r\n    /**\r\n     * @dev Add/Remove Fee Whitelist\r\n     */\r\n    function setExcludeFee(address account, bool enable) external onlyOwner {\r\n        require(account != address(0), \"DOD: zero address\");\r\n        require(excludeFee[account] != enable, \"DOD: same value\");\r\n        excludeFee[account] = enable;\r\n    }\r\n\r\n    /**\r\n     * @dev Add/Remove Fee Whitelist in batches\r\n     */\r\n    function batchSetExcludeFee(\r\n        address[] calldata accounts,\r\n        bool[] calldata enables\r\n    ) external onlyOwner {\r\n        require(accounts.length == enables.length, \"DOD: array mismatch\");\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            require(accounts[i] != address(0), \"DOD: zero address\");\r\n            require(excludeFee[accounts[i]] != enables[i], \"DOD: same value\");\r\n            excludeFee[accounts[i]] = enables[i];\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transitionFee\",\"type\":\"uint256\"}],\"name\":\"AdjustmentFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"IncludePairLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernor\",\"type\":\"address\"}],\"name\":\"SetGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapStatus\",\"type\":\"bool\"}],\"name\":\"SetSwapStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"SetTradeInCase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_triggerInterval\",\"type\":\"uint256\"}],\"name\":\"SetTriggerInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_pass\",\"type\":\"bool\"}],\"name\":\"SetVotePass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"UnlockFundPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundPool\",\"type\":\"address\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transitionFee\",\"type\":\"uint256\"}],\"name\":\"adjustmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"enables\",\"type\":\"bool[]\"}],\"name\":\"batchSetExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_genesis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_swapStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isFundSwap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastTriggerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transitionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BASE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusPoolTrigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRemainingTrigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBurnedTrigger\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdBalanceUnlocking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyUnlocking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stopTrade\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_meetCriteria\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_pass\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dodToBusdMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"includePair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"includePairLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundPool\",\"type\":\"address\"}],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTriggerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundPool\",\"type\":\"address\"}],\"name\":\"setPoolInCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setTradeInCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_triggerInterval\",\"type\":\"uint256\"}],\"name\":\"setTriggerInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setVotePass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFundPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DODToken_2_0", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000005458aa8c0d63fb6520436b6f9baa0b295a0e415200000000000000000000000070aff727bac91318593cd7919f4ffe97ea6915ad", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0eaadf2635fec03aa532a3ec3eda1600bac42f30829f06a1cf086f503a802412"}