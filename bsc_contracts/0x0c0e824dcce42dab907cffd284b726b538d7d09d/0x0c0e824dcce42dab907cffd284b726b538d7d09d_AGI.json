{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-31\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-03-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function sync() external;\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    \r\n    address public fundAddress;\r\n    \r\n    address public fundAddress2;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public _buyInviteFee = 8;\r\n  \r\n    uint256 public _sellLPFee = 1;\r\n \r\n    uint256 public _sellFundFee = 1;\r\n\r\n    uint256 public _sellDestroyFee = 1;\r\n\r\n    uint256 public _sellFundFee2 = 5;\r\n\r\n\r\n    uint256 public startTradeBlock;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    mapping(address => bool) public _excludeRewardList;\r\n\r\n    uint256 public _tTotal;\r\n    uint256 public _rTotal;\r\n    mapping(address => uint256) public _rOwned;\r\n    mapping(address => uint256) public _tOwned;\r\n    uint256 public constant MAX = ~uint256(0);\r\n\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    uint256 public _limitAmount;\r\n\r\n    uint256  public apr15Minutes = 25725;\r\n\r\n    uint256 private constant AprDivBase = 100000000;\r\n\r\n    uint256 public _lastRewardTime;\r\n   \r\n    bool public _autoApy;\r\n \r\n    uint256 public _invitorHoldCondition;\r\n\r\n  \r\n    bool private inSwap;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n    address public _usdt;\r\n    ISwapRouter public _swapRouter;\r\n\r\n    constructor (address RouteAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceivedAddress, address FundAddress, address FundAddress2){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouteAddress);\r\n        _swapRouter = swapRouter;\r\n    \r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        _usdt = USDTAddress;\r\n  \r\n        address usdtPair = ISwapFactory(swapRouter.factory()).createPair(address(this), USDTAddress);\r\n        _swapPairList[usdtPair] = true;\r\n   \r\n        _excludeRewardList[usdtPair] = true;\r\n\r\n\r\n        uint256 tTotal = Supply * 10 ** Decimals;\r\n        \r\n        uint256 base = AprDivBase * 100;\r\n      \r\n        uint256 rTotal = MAX / base - (MAX / base % tTotal);\r\n        _rOwned[ReceivedAddress] = rTotal;\r\n        _tOwned[ReceivedAddress] = tTotal;\r\n        emit Transfer(address(0), ReceivedAddress, tTotal);\r\n        _rTotal = rTotal;\r\n        _tTotal = tTotal;\r\n\r\n        fundAddress = FundAddress;\r\n        fundAddress2 = FundAddress2;\r\n\r\n     \r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[FundAddress2] = true;\r\n        _feeWhiteList[ReceivedAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n\r\n        _inProject[msg.sender] = true;\r\n\r\n       \r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n    }\r\n\r\n  \r\n    function calApy() public {\r\n   \r\n        if (!_autoApy) {\r\n            return;\r\n        }\r\n      \r\n        uint256 total = _tTotal;\r\n \r\n        uint256 maxTotal = _rTotal;\r\n      \r\n        if (total == maxTotal) {\r\n            return;\r\n        }\r\n    \r\n        uint256 blockTime = block.timestamp;\r\n   \r\n        uint256 lastRewardTime = _lastRewardTime;\r\n      \r\n        if (blockTime < lastRewardTime + 15 minutes) {\r\n            return;\r\n        }\r\n       \r\n        uint256 deltaTime = blockTime - lastRewardTime;\r\n  \r\n        uint256 times = deltaTime / 15 minutes;\r\n       \r\n        for (uint256 i; i < times;) {\r\n           \r\n            total = total * (AprDivBase + apr15Minutes) / AprDivBase;\r\n           \r\n            if (total > maxTotal) {\r\n                total = maxTotal;\r\n                break;\r\n            }\r\n           \r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n       \r\n        _tTotal = total;\r\n        \r\n        _lastRewardTime = lastRewardTime + times * 15 minutes;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n       \r\n        if (_excludeRewardList[account]) {\r\n            return _tOwned[account];\r\n        }\r\n        \r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        \r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n   \r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256){\r\n       \r\n        uint256 currentRate = _getRate();\r\n       \r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() public view returns (uint256) {\r\n        \r\n        if (_rTotal < _tTotal) {\r\n            return 1;\r\n        }\r\n        \r\n        return _rTotal / _tTotal;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n       \r\n        calApy();\r\n\r\n        uint256 balance = balanceOf(from);\r\n        \r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            \r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isBuy;\r\n\r\n      \r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startTradeBlock) {\r\n                \r\n                require(_feeWhiteList[from] || _feeWhiteList[to], \"!Trading\");\r\n               \r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                \r\n                if (block.number < startTradeBlock + 4) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n\r\n                takeFee = true;\r\n                if (_swapPairList[from]) {\r\n                    isBuy = true;\r\n                }\r\n            }\r\n        } else {\r\n            \r\n            if (0 == balanceOf(to) && amount > 0) {\r\n                _bindInvitor(to, from);\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isBuy);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isBuy\r\n    ) private {\r\n      \r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n\r\n        \r\n        uint256 currentRate = _getRate();\r\n        \r\n        _rOwned[sender] = _rOwned[sender] - tAmount * currentRate;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            if (isBuy) {\r\n                uint256 totalInviteAmount = tAmount * _buyInviteFee / 100;\r\n                feeAmount += totalInviteAmount;\r\n                uint256 fundAmount = totalInviteAmount;\r\n              \r\n                if (totalInviteAmount > 0) {\r\n                    address current = recipient;\r\n                    address invitor;\r\n                    uint256 inviterAmount;\r\n                    uint256 perInviteAmount = totalInviteAmount / 16;\r\n                    uint256 invitorHoldCondition = _invitorHoldCondition;\r\n                    for (uint256 i; i < 10;) {\r\n                        invitor = _inviter[current];\r\n                        if (address(0) == invitor) {\r\n                            break;\r\n                        }\r\n                        if (0 == i) {\r\n                            inviterAmount = perInviteAmount * 6;\r\n                        } else if (1 == i) {\r\n                            inviterAmount = perInviteAmount * 2;\r\n                        } else {\r\n                            inviterAmount = perInviteAmount;\r\n                        }\r\n                        if (0 == invitorHoldCondition || balanceOf(invitor) >= invitorHoldCondition) {\r\n                            fundAmount -= inviterAmount;\r\n                            _takeTransfer(sender, invitor, inviterAmount, currentRate);\r\n                        }\r\n                        current = invitor;\r\n                    unchecked{\r\n                        ++i;\r\n                    }\r\n                    }\r\n                }\r\n                \r\n                if (fundAmount > 1000000) {\r\n                    _takeTransfer(sender, fundAddress, fundAmount, currentRate);\r\n                }\r\n            } else {\r\n                if (!inSwap) {\r\n                    inSwap = true;\r\n                    \r\n                    uint256 lpAmount = tAmount * _sellLPFee / 100;\r\n                    if (lpAmount > 0) {\r\n                        feeAmount += lpAmount;\r\n                        _takeTransfer(\r\n                            sender,\r\n                            recipient,\r\n                            lpAmount,\r\n                            currentRate\r\n                        );\r\n                        ISwapPair(recipient).sync();\r\n                    }\r\n                    \r\n                    uint256 fundFee = _sellFundFee + _sellFundFee2;\r\n                    uint256 fundAmount = tAmount * fundFee / 100;\r\n                    if (fundAmount > 0) {\r\n                        feeAmount += fundAmount;\r\n                        _takeTransfer(sender, address(this), fundAmount, currentRate);\r\n\r\n                        address usdt = _usdt;\r\n                        address tokenDistributor = address(_tokenDistributor);\r\n                        address[] memory path = new address[](2);\r\n                        path[0] = address(this);\r\n                        path[1] = usdt;\r\n                       \r\n                        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                            fundAmount,\r\n                            0,\r\n                            path,\r\n                            tokenDistributor,\r\n                            block.timestamp\r\n                        );\r\n\r\n                        IERC20 USDT = IERC20(usdt);\r\n                        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n                        \r\n                        uint256 fundUsdt = usdtBalance * _sellFundFee / fundFee;\r\n                        if (fundUsdt > 0) {\r\n                            USDT.transferFrom(tokenDistributor, fundAddress, fundUsdt);\r\n                        }\r\n                        uint256 fundUsdt1 = usdtBalance - fundUsdt;\r\n                        if (fundUsdt1 > 0) {\r\n                            USDT.transferFrom(tokenDistributor, fundAddress2, fundUsdt1);\r\n                        }\r\n                    }\r\n                   \r\n                    uint256 destroyAmount = tAmount * _sellDestroyFee / 100;\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyAmount, currentRate);\r\n                    }\r\n                    inSwap = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(\r\n            sender,\r\n            recipient,\r\n            tAmount - feeAmount,\r\n            currentRate\r\n        );\r\n    }\r\n\r\n   \r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        \r\n        _takeTransfer(sender, fundAddress, tAmount / 100 * 90, currentRate);\r\n      \r\n        _takeTransfer(sender, recipient, tAmount / 100 * 10, currentRate);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        _tOwned[to] += tAmount;\r\n\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[to] = _rOwned[to] + rAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n\r\n       \r\n        if (_limitAmount > 0 && !_swapPairList[to] && !_feeWhiteList[to]) {\r\n            require(_limitAmount >= balanceOf(to), \"exceed LimitAmount\");\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external onlyOwner {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(fundAddress, amount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddress2(address addr) external onlyOwner {\r\n        fundAddress2 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n        if (enable) {\r\n            _excludeRewardList[addr] = true;\r\n        }\r\n    }\r\n\r\n    \r\n    function setExcludeReward(address addr, bool enable) external onlyOwner {\r\n        _tOwned[addr] = balanceOf(addr);\r\n        _rOwned[addr] = _tOwned[addr] * _getRate();\r\n        _excludeRewardList[addr] = enable;\r\n    }\r\n\r\n    function setBuyFee(uint256 buyInviteFee) external onlyOwner {\r\n        _buyInviteFee = buyInviteFee;\r\n    }\r\n\r\n    function setSellFee(uint256 sellLPFee, uint256 sellFundFee, uint256 sellDestroyFee, uint256 sellFundFee2) external onlyOwner {\r\n        _sellLPFee = sellLPFee;\r\n        _sellFundFee = sellFundFee;\r\n        _sellDestroyFee = sellDestroyFee;\r\n        _sellFundFee2 = sellFundFee2;\r\n    }\r\n\r\n    \r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        _limitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n\r\n\r\n   \r\n    function startAutoApy() external onlyOwner {\r\n        require(!_autoApy, \"autoAping\");\r\n        _autoApy = true;\r\n        _lastRewardTime = block.timestamp;\r\n    }\r\n\r\n   \r\n    function emergencyCloseAutoApy() external onlyOwner {\r\n        _autoApy = false;\r\n    }\r\n\r\n    \r\n    function closeAutoApy() external onlyOwner {\r\n        calApy();\r\n        _autoApy = false;\r\n    }\r\n\r\n   \r\n    function setApr15Minutes(uint256 apr) external onlyOwner {\r\n        calApy();\r\n        apr15Minutes = apr;\r\n    }\r\n\r\n    function setInvitorHoldCondition(uint256 amount) external onlyOwner {\r\n        _invitorHoldCondition = amount * 10 ** _decimals;\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => address) public _inviter;\r\n    mapping(address => address[]) private _binders;\r\n    mapping(address => bool) public _inProject;\r\n\r\n    \r\n    function bindInvitor(address account, address invitor) public {\r\n        address caller = msg.sender;\r\n        require(_inProject[caller], \"notInProj\");\r\n        _bindInvitor(account, invitor);\r\n    }\r\n\r\n    \r\n    function _bindInvitor(address account, address invitor) private {\r\n        if (_inviter[account] == address(0) && invitor != address(0) && invitor != account) {\r\n            if (_binders[account].length == 0) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(account)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                _inviter[account] = invitor;\r\n                _binders[invitor].push(account);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setInProject(address adr, bool enable) external onlyOwner {\r\n        _inProject[adr] = enable;\r\n    }\r\n}\r\n\r\ncontract AGI is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n \r\n        \"Artificial general intelligence\",\r\n   \r\n        \"AGI\",\r\n   \r\n        6,\r\n    \r\n        2000000000000000,\r\n    \r\n        address(0xC070Ec7a2495D911248D1687Ebd809c47518C8b7),\r\n    \r\n        address(0xC070Ec7a2495D911248D1687Ebd809c47518C8b7),\r\n    \r\n        address(0xC070Ec7a2495D911248D1687Ebd809c47518C8b7)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoApy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_invitorHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr15Minutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAutoApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCloseAutoApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"setApr15Minutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyInviteFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInvitorHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDestroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee2\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAutoApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AGI", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6862838ce65087e46fcf0f7b28fd567afb8f3216ba7570c935bca5d7afb20a86"}