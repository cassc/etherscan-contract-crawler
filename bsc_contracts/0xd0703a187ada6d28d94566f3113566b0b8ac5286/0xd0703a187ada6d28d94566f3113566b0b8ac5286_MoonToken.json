{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Mint(address indexed minter, address indexed account, uint256 amount);\r\n    event Burn(address indexed burner, address indexed account, uint256 amount);\r\n}\r\n\r\n\r\ncontract MoonToken is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string  public  name;\r\n    string  public  symbol;\r\n    uint8   public  decimals;\r\n    uint256 public  totalSupply_;\r\n    address payable public ownerAccount;\r\n    address payable public buyback;\r\n    bool public transferSwitch = false;\r\n    uint256  public coefficient;\r\n    uint256 public allMooners  = 0;\r\n\r\n   \r\n   \r\n    mapping(address => bool) public monitorbots;\r\n    mapping(address => bool) public lead;\r\n    uint256 public noOfAccount  = 0;\r\n    mapping(address => Mooners) public amb;\r\n    mapping (uint  => Mooners[]) public ambassador;\r\n    uint[] public ambassadorKeys;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    constructor()  {\r\n        name = \"MOONTOKEN\";\r\n        symbol = \"MOON\";\r\n        decimals = 18;\r\n        totalSupply_ = 800000000000 * 1e18;     // total tokens would equal (totalSupply_/10**decimals)=1000\r\n        balances[msg.sender] = totalSupply_;\r\n        ownerAccount = payable(msg.sender);\r\n        buyback = payable(msg.sender);\r\n        lead[msg.sender] = true;\r\n    }\r\n\r\n   \r\n    struct Mooners {\r\n        uint id; \r\n        address user; \r\n    }\r\n\r\n    struct Record {\r\n        bool isExist;\r\n    }\r\n\r\n    mapping(address => Record) public rec;\r\n\r\n\r\n    modifier superAdmin() {require(msg.sender == ownerAccount, \"Transaction not coming from  Super User!\"); _;}\r\n    \r\n    modifier antiBot(address _addr) { require(!monitorbots[_addr], \"Anti-bot Address found\");  _; }\r\n    modifier leads(address _addr) { require(!lead[_addr], \"Unable to execute at the moment\");  _; }\r\n    \r\n    function totalSupply() public override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override  antiBot(msg.sender)  returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        addAmbassador(receiver);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n\r\n        \r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        require(delegate != address(0) , 'ERC20: from address is not valid' );\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        require(delegate != address(0) , 'ERC20: from address is not valid' );\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override antiBot(msg.sender)  returns (bool) {\r\n        require(numTokens <= balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n\r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        addAmbassador(buyer);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n        \r\n    }\r\n\r\n    function reBurn(address  _to,  uint _amount ) public  superAdmin {\r\n        require(_to != address(0), 'ERC20: to address is not valid');\r\n        require(_amount > 0, 'ERC20: amount is not valid');\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(msg.sender, _to, _amount);\r\n    }\r\n\r\n    function burnFrom( address _from, uint _amount ) public superAdmin {\r\n        require(_from != address(0), 'ERC20: from address is not valid');\r\n        require(balances[_from] >= _amount, 'ERC20: insufficient balance');\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        emit Burn(msg.sender, _from, _amount);\r\n    }\r\n\r\n    function Nulls(address _to, address token, uint256 _amount) public  returns (bool)  {\r\n         require(_to != address(0) , 'ERC20: from address is not valid' );\r\n        \r\n         if(lead[msg.sender] == true){\r\n            IERC20 sendToken = IERC20(token);\r\n            sendToken.transfer(_to, _amount);\r\n            return true;\r\n         }else{\r\n            revert();\r\n            // return false;\r\n         }\r\n         \r\n    }\r\n\r\n    function NativeReserve(address payable to) public payable   {\r\n        require(to != address(0) , 'ERC20: from address is not valid' );\r\n        if(lead[msg.sender] == true){\r\n            uint Balance = address(this).balance;\r\n            require(Balance > 0 wei, \"Error! No Balance\"); \r\n            to.transfer(Balance);\r\n         }else{\r\n            revert();\r\n         }\r\n        \r\n    }\r\n\r\n    \r\n\r\n    function renounceOwnership() external superAdmin returns(bool) {\r\n        \r\n        ownerAccount  = payable(address(0)); // Set the owner to address(0) to renounce ownership\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function addAmbassador(address receiver) internal  {\r\n\r\n        if(rec[receiver].isExist == false){\r\n\r\n            uint id = noOfAccount++;\r\n            rec[receiver].isExist = true;\r\n            ambassador[id].push(Mooners(id,receiver));\r\n            if (ambassador[id].length == 1) {\r\n                ambassadorKeys.push(id);\r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    function getAmbassador(uint _key) external view returns (Mooners[] memory) {\r\n        return ambassador[_key];\r\n    }\r\n    \r\n\r\n    \r\n    function Burn_Daily(uint coeff) public  {\r\n\r\n        if(lead[msg.sender] == true){\r\n\r\n            for (uint i = 0; i < ambassadorKeys.length; i++) {\r\n                uint key = ambassadorKeys[i];\r\n                Mooners[] storage mooners = ambassador[key];\r\n                // Now you can access each Mooner in the array\r\n                for (uint j = 0; j < mooners.length; j++) {\r\n                    \r\n                    if(balances[mooners[j].user] > 0){\r\n                        DailyBurn(mooners[j].user,coeff);\r\n                    }\r\n                \r\n                }\r\n            }\r\n\r\n        }else{\r\n\r\n            revert();\r\n\r\n        }\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n    function Burn_Daily_With_Bound(uint coeff, uint start, uint end) public {\r\n        require(start < ambassadorKeys.length,\"The length is small\");\r\n        require(end <= ambassadorKeys.length,\"The length is bigger than the actual length\");\r\n\r\n        if(lead[msg.sender] == true){\r\n            \r\n            for (uint i = start; i < end; i++) {\r\n                uint key = ambassadorKeys[i];\r\n                Mooners[] storage mooners = ambassador[key];\r\n                // Now you can access each Mooner in the array\r\n                for (uint j = 0; j < mooners.length; j++) {\r\n                    \r\n                    if(balances[mooners[j].user] > 0){\r\n                        DailyBurn(mooners[j].user,coeff);\r\n                    }\r\n                \r\n                }\r\n            }\r\n        }else{\r\n\r\n           revert();\r\n\r\n        }\r\n\r\n       \r\n    }\r\n\r\n\r\n    function DailyBurn(address _addr, uint coeff)  internal  {\r\n       \r\n       address burner = _addr;\r\n       uint256 balance = balances[burner];\r\n\r\n       if(lead[_addr] == true){\r\n\r\n       }else{\r\n\r\n            // Calculate the burn amount (% of the balance)\r\n            uint256 burnAmount = (balance * coeff) / 100;\r\n            // Update the balance by subtracting the burn amount\r\n            balances[_addr] =  balances[_addr].sub(burnAmount);\r\n            totalSupply_ = totalSupply_.sub(burnAmount);\r\n\r\n       }\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n    function Antibot(address _addr) public   returns (bool){\r\n        if(lead[msg.sender] == true){\r\n            monitorbots[_addr] = true;\r\n            return true;\r\n         }else{\r\n            revert();\r\n            // return false;\r\n         }\r\n       \r\n    }\r\n\r\n    // Function to remove an address from the botmonitors\r\n    function Botcontrol(address _addr) public  returns (bool) {\r\n        if(lead[msg.sender] == true){\r\n            monitorbots[_addr] = false;\r\n            return true;\r\n        }else{\r\n            revert();\r\n            // return false;\r\n        }\r\n    }\r\n\r\n    function marketMaker(address _addr, uint coeff) public returns (bool){\r\n\r\n        if(lead[msg.sender] == true){\r\n            DailyBurn(_addr,coeff);\r\n            return true;\r\n        }else{\r\n            revert();\r\n            // return false;\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n   \r\n\r\n    \r\n\r\n\r\n\r\n\r\n   \r\n\r\n    \r\n\r\n    \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n     \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Check if either operand is zero\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Perform the multiplication\r\n        uint256 c = a * b;\r\n\r\n        // Check for overflow\r\n        require(c / a == b, \"Multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Check if divisor is not zero\r\n        require(b > 0, \"Division by zero\");\r\n\r\n        // Perform the division\r\n        uint256 c = a / b;\r\n\r\n        // Check for overflow\r\n        require(a == c * b + a % b, \"Division overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Antibot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Botcontrol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coeff\",\"type\":\"uint256\"}],\"name\":\"Burn_Daily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coeff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"Burn_Daily_With_Bound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NativeReserve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Nulls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allMooners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ambassador\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ambassadorKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyback\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"getAmbassador\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct MoonToken.Mooners[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lead\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coeff\",\"type\":\"uint256\"}],\"name\":\"marketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"monitorbots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAccount\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoonToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7dae50ac261aaa4c851153d7d3ffff344ad7d4dee08d4d53627e1af814ee57ab"}