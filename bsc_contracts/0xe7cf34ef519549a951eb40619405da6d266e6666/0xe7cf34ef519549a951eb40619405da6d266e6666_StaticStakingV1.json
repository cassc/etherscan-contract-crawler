{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Staking/StaticStakingV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../Staking/IStakingDelegate.sol';\\nimport '../Staking/IStakingFeeDecider.sol';\\n\\n/**\\n * @title Token Staking\\n * @dev BEP20 compatible token.\\n */\\ncontract StaticStakingV1 is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 pendingRewards;\\n        uint256 lockedAmount;\\n        uint256 unbondAmount;\\n        uint256 lockedTimestamp;\\n        uint256 unbondTimestamp;\\n        bool isLocked;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 lastBlock;\\n        uint256 tokenPerShare;\\n        uint256 tokenRealStaked;\\n        uint256 tokenReceived;\\n        uint256 tokenRewarded;\\n        uint256 tokenTotalLimit;\\n        uint256 tokenTotalBonus; // in percent\\n        uint256 lockupTimerange;\\n        uint256 unbondTimerange;\\n    }\\n\\n    IERC20 public baseToken;\\n    IERC20 public extrToken;\\n    IStakingDelegate public delegate;\\n    IStakingFeeDecider public unlockFeeDecider;\\n    IStakingFeeDecider public unbondFeeDecider;\\n\\n    uint256 public startBlock;\\n    uint256 public closeBlock;\\n    uint256 public sumOfBlock;\\n    uint256 public claimingStartBlock;\\n    uint256 public depositsCloseBlock;\\n\\n    uint256 public feeRewarded;\\n    uint256 public feeReceived;\\n\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    uint256 public maxPid;\\n\\n    event Deposited(address indexed user, uint256 pid, address indexed token, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 pid, address indexed token, uint256 amount);\\n    event WithdrawnReward(address indexed user, uint256 pid, address indexed token, uint256 amount);\\n    event WithdrawnRemain(address indexed user, uint256 pid, address indexed token, uint256 amount);\\n    event WithdrawnFeeval(address indexed user, uint256 pid, address indexed token, uint256 amount);\\n    event LockChanged(address indexed user, uint256 pid, uint256 unlock, uint256 unbond);\\n    event FeeDeducted(address indexed user, uint256 pid, address indexed token, uint256 amount);\\n    event RewardChanged(address indexed token, uint256 reward);\\n    event UnlockFeeDeciderChanged(address indexed addr);\\n    event UnbondFeeDeciderChanged(address indexed addr);\\n    event StartBlockChanged(uint256 block);\\n    event CloseBlockChanged(uint256 block);\\n    event SumOfBlockChanged(uint256 block);\\n    event ClaimingStartBlockChanged(uint256 block);\\n    event DepositsCloseBlockChanged(uint256 block);\\n\\n    constructor(uint256 lockupTimer, uint256 unbondTimer, uint256 poolBonus, uint256 poolLimit) {\\n        addPool(lockupTimer, unbondTimer, poolBonus, poolLimit);\\n        setSumOfBlock(10512000);\\n    }\\n\\n    function setTokenAddress(IERC20 _baseToken, IERC20 _extrToken) public onlyOwner {\\n        require(address(_baseToken) != address(0), 'Staking: token address needs to be different than zero!');\\n        require(address(_extrToken) != address(0), 'Staking: token address needs to be different than zero!');\\n        require(address(baseToken) == address(0) && address(extrToken) == address(0), 'Staking: tokens already set!');\\n        baseToken = _baseToken;\\n        extrToken = _extrToken;\\n    }\\n\\n    function setRewardBonus(uint256 _bonus) public onlyOwner {\\n        require(address(extrToken) != address(0), 'Staking: cannot set reward bonus before setting reward token!');\\n        for (uint256 i=0; i<maxPid; i++) updatePool(i);\\n        for (uint256 i=0; i<maxPid; i++) poolInfo[i].tokenTotalBonus = _bonus;\\n        emit RewardChanged(address(extrToken), _bonus);\\n    }\\n\\n    function setSumOfBlock(uint256 _sumOfBlock) public onlyOwner {\\n        require(_sumOfBlock > 0, 'Staking: sum of block needs to be higher than zero!');\\n        for (uint256 i=0; i<maxPid; i++) updatePool(i);\\n        sumOfBlock = _sumOfBlock;\\n        emit StartBlockChanged(sumOfBlock);\\n    }\\n\\n    function setUnlockFeeDecider(IStakingFeeDecider addr) public onlyOwner {\\n        require(address(addr) != address(0), 'Staking: unlock fee decider address needs to be different than zero!');\\n        unlockFeeDecider = addr;\\n        emit UnlockFeeDeciderChanged(address(addr));\\n    }\\n\\n    function setUnbondFeeDecider(IStakingFeeDecider addr) public onlyOwner {\\n        require(address(addr) != address(0), 'Staking: unbond fee decider address needs to be different than zero!');\\n        unbondFeeDecider = addr;\\n        emit UnbondFeeDeciderChanged(address(addr));\\n    }\\n\\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\\n        require(startBlock == 0, 'Staking: start block already set');\\n        require(_startBlock > 0, 'Staking: start block needs to be higher than zero!');\\n        startBlock = _startBlock;\\n        emit StartBlockChanged(startBlock);\\n    }\\n\\n    function setCloseBlock(uint256 _closeBlock) public onlyOwner {\\n        require(startBlock != 0, 'Staking: start block needs to be set first');\\n        require(closeBlock == 0, 'Staking: close block already set');\\n        require(_closeBlock > startBlock, 'Staking: close block needs to be higher than start one!');\\n        closeBlock = _closeBlock;\\n        emit CloseBlockChanged(closeBlock);\\n    }\\n\\n    function setClaimingStartBlock(uint256 _claimingStartBlock) public onlyOwner {\\n        require(startBlock != 0, 'Staking: start block needs to be set first');\\n        claimingStartBlock = _claimingStartBlock;\\n        emit ClaimingStartBlockChanged(claimingStartBlock);\\n    }\\n\\n    function setDepositsCloseBlock(uint256 _depositsCloseBlock) public onlyOwner {\\n        require(startBlock != 0, 'Staking: start block needs to be set first');\\n        depositsCloseBlock = _depositsCloseBlock;\\n        emit DepositsCloseBlockChanged(depositsCloseBlock);\\n    }\\n\\n    function isStarted() public view returns (bool) {\\n        return startBlock != 0 && block.number >= startBlock;\\n    }\\n\\n    function isStopped() public view returns (bool) {\\n        return closeBlock != 0 && block.number >= closeBlock;\\n    }\\n\\n    function withdrawFee(address addr) public onlyOwner {\\n        require(startBlock != 0, 'Staking: start block needs to be set first');\\n        for (uint256 i=0; i<maxPid; i++) {\\n            updatePool(i);\\n        }\\n\\n        uint256 unlockedFeeReward = feeRewarded.sub(feeReceived);\\n        uint256 possibleFeeAmount = baseToken.balanceOf(address(this));\\n\\n        if (unlockedFeeReward > possibleFeeAmount) {\\n            unlockedFeeReward = possibleFeeAmount;\\n        }\\n        if (unlockedFeeReward > 0) {\\n            feeReceived = feeReceived.add(unlockedFeeReward);\\n            baseToken.safeTransfer(addr, unlockedFeeReward);\\n            emit WithdrawnFeeval(addr, 0, address(baseToken), unlockedFeeReward);\\n        }\\n    }\\n\\n    function withdrawRemaining(address addr) public onlyOwner {\\n        require(startBlock != 0, 'Staking: start block needs to be set first');\\n        for (uint256 i=0; i<maxPid; i++) {\\n            updatePool(i);\\n        }\\n\\n        uint256 allTokenRewarded = 0;\\n        uint256 allTokenReceived = 0;\\n\\n        for (uint256 i=0; i<maxPid; i++) {\\n            allTokenRewarded = allTokenRewarded.add(poolInfo[i].tokenRewarded);\\n            allTokenReceived = allTokenReceived.add(poolInfo[i].tokenReceived);\\n        }\\n\\n        uint256 unlockedAmount = 0;\\n        uint256 possibleAmount = extrToken.balanceOf(address(this));\\n        uint256 reservedAmount = allTokenRewarded.sub(allTokenReceived);\\n\\n        if (address(baseToken) == address(extrToken)) {\\n            for (uint i=0; i<maxPid; i++) {\\n                reservedAmount = reservedAmount.add(poolInfo[i].tokenRealStaked);\\n            }\\n            reservedAmount = reservedAmount.add(feeRewarded).sub(feeReceived);\\n        }\\n\\n        if (possibleAmount > reservedAmount) {\\n            unlockedAmount = possibleAmount.sub(reservedAmount);\\n        }\\n        if (unlockedAmount > 0) {\\n            extrToken.safeTransfer(addr, unlockedAmount);\\n            emit WithdrawnRemain(addr, 0, address(extrToken), unlockedAmount);\\n        }\\n    }\\n\\n    function pendingRewards(uint256 pid, address addr) external view returns (uint256) {\\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][addr];\\n        uint256 tokenPerShare = pool.tokenPerShare;\\n        uint256 lastMintedBlock = pool.lastBlock;\\n        if (lastMintedBlock == 0) {\\n            lastMintedBlock = startBlock;\\n        }\\n        uint256 lastBlock = getLastBlock();\\n        if (lastBlock == 0) {\\n            return 0;\\n        }\\n        if (lastBlock > lastMintedBlock && pool.tokenRealStaked != 0) {\\n            uint256 multiplier = lastBlock.sub(lastMintedBlock);\\n            uint256 tokenAward = multiplier\\n                .mul(pool.tokenRealStaked).div(sumOfBlock)\\n                .mul(pool.tokenTotalBonus).div(100);\\n            tokenPerShare = tokenPerShare.add(tokenAward.mul(1e12).div(pool.tokenRealStaked));\\n        }\\n        return user.amount.mul(tokenPerShare).div(1e12).sub(user.rewardDebt).add(user.pendingRewards);\\n    }\\n\\n    function deposit(uint256 pid, uint256 amount) external {\\n        // amount eq to zero is allowed\\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\\n        require(closeBlock == 0 || block.number <= closeBlock, 'Staking: staking has ended, please withdraw remaining tokens');\\n        require(depositsCloseBlock == 0 || block.number <= depositsCloseBlock, 'Staking: staking new deposits have been disabled');\\n\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        require(pool.tokenTotalLimit == 0 || pool.tokenTotalLimit >= pool.tokenRealStaked.add(amount),\\n            'Staking: you cannot deposit over the limit!');\\n\\n        instantReseal(pid);\\n\\n        updatePool(pid);\\n        updatePendingRewards(pid, msg.sender);\\n\\n        if (amount > 0) {\\n            user.amount = user.amount.add(amount);\\n            pool.tokenRealStaked = pool.tokenRealStaked.add(amount);\\n            baseToken.safeTransferFrom(address(msg.sender), address(this), amount);\\n            emit Deposited(msg.sender, pid, address(baseToken), amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n\\n        if (address(delegate) != address(0)) {\\n            delegate.balanceChanged(msg.sender, pid, address(baseToken), user.amount);\\n        }\\n    }\\n\\n    function freeUnlock(uint256 pid) external {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        bool worked;\\n        if (user.lockedTimestamp > 0 && user.lockedTimestamp <= block.timestamp) {\\n            instantUnlock(pid);\\n            worked = true;\\n        }\\n        if (user.unbondTimestamp > 0 && user.unbondTimestamp <= block.timestamp) {\\n            instantUnbond(pid);\\n            worked = true;\\n        }\\n        require(worked, 'Staking: cannot unlock/unbond before timelock finishes!');\\n        if (address(delegate) != address(0)) {\\n            delegate.balanceChanged(msg.sender, pid, address(baseToken), user.amount);\\n        }\\n    }\\n\\n    function paidUnlock(uint256 pid) external {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        instantUnseal(pid);\\n        if (address(delegate) != address(0)) {\\n            delegate.balanceChanged(msg.sender, pid, address(baseToken), user.amount);\\n        }\\n    }\\n\\n    function withdraw(uint256 pid, uint256 amount) external {\\n        // amount eq to zero is allowed\\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\\n\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        require((!user.isLocked && block.timestamp >= user.lockedTimestamp) || isStopped(),\\n            'Staking: you cannot withdraw before unlock!');\\n        require((!user.isLocked && block.timestamp >= user.unbondTimestamp) || isStopped(),\\n            'Staking: you cannot withdraw before unbond!');\\n        require(user.amount >= amount, 'Staking: you cannot withdraw more than you have!');\\n\\n        uint256 feeCost;\\n        feeCost = feeRewarded;\\n        instantUnseal(pid);\\n        feeCost = feeRewarded - feeCost;\\n        amount = amount - feeCost; // deduct fees\\n\\n        updatePool(pid);\\n        updatePendingRewards(pid, msg.sender);\\n\\n        if (amount > 0) {\\n            user.amount = user.amount.sub(amount);\\n            pool.tokenRealStaked = pool.tokenRealStaked.sub(amount);\\n            baseToken.safeTransfer(address(msg.sender), amount);\\n            emit Withdrawn(msg.sender, pid, address(baseToken), amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n\\n        if (address(delegate) != address(0)) {\\n            delegate.balanceChanged(msg.sender, pid, address(baseToken), user.amount);\\n        }\\n    }\\n\\n    function claim(uint256 pid) external {\\n        require(pid < maxPid, 'Staking: invalid pool ID provided');\\n        require(startBlock > 0 && block.number >= startBlock, 'Staking: not started yet');\\n        require(claimingStartBlock == 0 || block.number >= claimingStartBlock, 'Staking: claiming rewards is not active');\\n\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        updatePool(pid);\\n        updatePendingRewards(pid, msg.sender);\\n\\n        if (user.pendingRewards > 0) {\\n            uint256 claimedAmount = transferPendingRewards(pid, msg.sender, user.pendingRewards);\\n            emit WithdrawnReward(msg.sender, pid, address(baseToken), claimedAmount);\\n            user.pendingRewards = user.pendingRewards.sub(claimedAmount);\\n            pool.tokenReceived = pool.tokenReceived.add(claimedAmount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n    }\\n\\n    function instantReseal(uint256 pid) internal returns (bool) {\\n        unsafeRelock(pid);\\n        return true;\\n    }\\n\\n    function instantUnlock(uint256 pid) internal returns (bool) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        if (user.lockedTimestamp > 0) {\\n            bool isEarlyUnlock = user.lockedTimestamp > block.timestamp;\\n            uint256 cachedLockedTimestamp = user.lockedTimestamp;\\n            unsafeUnlock(pid);\\n            user.lockedTimestamp = cachedLockedTimestamp;\\n\\n            updatePool(pid);\\n            updatePendingRewards(pid, msg.sender);\\n\\n            if (!isStopped() && isEarlyUnlock && address(unlockFeeDecider) != address(0)) {\\n                uint256 fee = unlockFeeDecider.calculateFee(msg.sender, pid, user.amount); // X% fee\\n                feeRewarded = feeRewarded.add(fee);\\n                user.amount = user.amount.sub(fee);\\n                pool.tokenRealStaked = pool.tokenRealStaked.sub(fee);\\n                emit FeeDeducted(msg.sender, pid, address(baseToken), fee);\\n            }\\n\\n            user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n            user.lockedTimestamp = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function instantUnbond(uint256 pid) internal returns (bool) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        if (user.unbondTimestamp > 0) {\\n            bool isEarlyUnbond = user.unbondTimestamp > block.timestamp;\\n            uint256 cachedLockedTimestamp = user.lockedTimestamp;\\n            unsafeUnbond(pid);\\n            user.lockedTimestamp = cachedLockedTimestamp;\\n\\n            updatePool(pid);\\n            updatePendingRewards(pid, msg.sender);\\n\\n            if (!isStopped() && isEarlyUnbond && address(unbondFeeDecider) != address(0)) {\\n                uint256 fee = unbondFeeDecider.calculateFee(msg.sender, pid, user.amount);\\n                feeRewarded = feeRewarded.add(fee);\\n                user.amount = user.amount.sub(fee);\\n                pool.tokenRealStaked = pool.tokenRealStaked.sub(fee);\\n                emit FeeDeducted(msg.sender, pid, address(baseToken), fee);\\n            }\\n\\n            user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n            user.lockedTimestamp = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function instantUnseal(uint256 pid) internal returns (bool) {\\n        bool unlockNeeded = instantUnlock(pid);\\n        bool unbondNeeded = instantUnbond(pid);\\n        return unlockNeeded || unbondNeeded;\\n    }\\n\\n    function unsafeRelock(uint256 pid) internal {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        updatePool(pid);\\n        updatePendingRewards(pid, msg.sender);\\n\\n        user.lockedTimestamp = block.timestamp.add(pool.lockupTimerange);\\n        user.unbondTimestamp = 0;\\n        user.isLocked = true;\\n\\n        pool.tokenRealStaked = pool.tokenRealStaked.add(user.unbondAmount);\\n        user.unbondAmount = 0;\\n        user.lockedAmount = user.amount;\\n\\n        user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n        emit LockChanged(msg.sender, pid, user.lockedTimestamp, 0);\\n    }\\n\\n    function unsafeUnlock(uint256 pid) internal {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        updatePool(pid);\\n        updatePendingRewards(pid, msg.sender);\\n\\n        user.lockedTimestamp = 0;\\n        user.unbondTimestamp = block.timestamp.add(pool.unbondTimerange);\\n        user.isLocked = false;\\n\\n        pool.tokenRealStaked = pool.tokenRealStaked.sub(user.lockedAmount);\\n        user.unbondAmount = user.amount;\\n        user.lockedAmount = 0;\\n\\n        user.rewardDebt = user.amount.mul(pool.tokenPerShare).div(1e12);\\n        emit LockChanged(msg.sender, pid, 0, user.unbondTimestamp);\\n    }\\n\\n    function unsafeUnbond(uint256 pid) internal {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        user.lockedTimestamp = 0;\\n        user.unbondTimestamp = 0;\\n\\n        emit LockChanged(msg.sender, pid, 0, 0);\\n    }\\n\\n    function addPool(uint256 _lockupTimerange, uint256 _unbondTimerange, uint256 _tokenTotalBonus,\\n        uint256 _tokenTotalLimit) internal {\\n        require(maxPid < 10, 'Staking: Cannot add more than 10 pools!');\\n\\n        poolInfo.push(PoolInfo({\\n            lastBlock: 0,\\n            tokenPerShare: 0,\\n            tokenRealStaked: 0,\\n            tokenReceived: 0,\\n            tokenRewarded: 0,\\n            tokenTotalLimit: _tokenTotalLimit,\\n            tokenTotalBonus: _tokenTotalBonus,\\n            lockupTimerange: _lockupTimerange,\\n            unbondTimerange: _unbondTimerange\\n        }));\\n        maxPid = maxPid.add(1);\\n    }\\n\\n    function updatePool(uint256 pid) internal {\\n        if (pid >= maxPid) {\\n            return;\\n        }\\n        if (startBlock == 0 || block.number < startBlock) {\\n            return;\\n        }\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (pool.lastBlock == 0) {\\n            pool.lastBlock = startBlock;\\n        }\\n        uint256 lastBlock = getLastBlock();\\n        if (lastBlock <= pool.lastBlock) {\\n            return;\\n        }\\n        uint256 poolTokenRealStaked = pool.tokenRealStaked;\\n        if (poolTokenRealStaked == 0) {\\n            return;\\n        }\\n        uint256 multiplier = lastBlock.sub(pool.lastBlock);\\n        uint256 tokenAward = multiplier\\n            .mul(poolTokenRealStaked).div(sumOfBlock)\\n            .mul(pool.tokenTotalBonus).div(100);\\n        pool.tokenRewarded = pool.tokenRewarded.add(tokenAward);\\n        pool.tokenPerShare = pool.tokenPerShare.add(tokenAward.mul(1e12).div(poolTokenRealStaked));\\n        pool.lastBlock = lastBlock;\\n    }\\n\\n    function updatePendingRewards(uint256 pid, address addr) internal {\\n        if (pid >= maxPid) {\\n            return;\\n        }\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][addr];\\n        uint256 pending = user.amount.mul(pool.tokenPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            user.pendingRewards = user.pendingRewards.add(pending);\\n        }\\n    }\\n\\n    function transferPendingRewards(uint256 pid, address to, uint256 amount) internal returns (uint256) {\\n        if (pid >= maxPid) {\\n            return 0;\\n        }\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        uint256 tokenAmount = extrToken.balanceOf(address(this));\\n        if (tokenAmount == 0) {\\n            return 0;\\n        }\\n        if (tokenAmount > amount) {\\n            tokenAmount = amount;\\n        }\\n        extrToken.safeTransfer(to, tokenAmount);\\n        return tokenAmount;\\n    }\\n\\n    function getLastBlock() internal view returns (uint256) {\\n        if (startBlock == 0) return 0;\\n        if (closeBlock == 0) return block.number;\\n        return (closeBlock < block.number) ? closeBlock : block.number;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Staking/IStakingFeeDecider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.6;\\n\\ninterface IStakingFeeDecider {\\n    function calculateFee(address addr, uint256 pid, uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/Staking/IStakingDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.6;\\n\\ninterface IStakingDelegate {\\n\\n    function balanceChanged(address user, uint256 pid, address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ClaimingStartBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"CloseBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"DepositsCloseBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDeducted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unbond\",\"type\":\"uint256\"}],\"name\":\"LockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"StartBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"SumOfBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnbondFeeDeciderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnlockFeeDeciderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFeeval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnRemain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"contract IStakingDelegate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsCloseBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extrToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"freeUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"paidUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRealStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotalLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotalBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTimerange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondTimerange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimingStartBlock\",\"type\":\"uint256\"}],\"name\":\"setClaimingStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closeBlock\",\"type\":\"uint256\"}],\"name\":\"setCloseBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositsCloseBlock\",\"type\":\"uint256\"}],\"name\":\"setDepositsCloseBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sumOfBlock\",\"type\":\"uint256\"}],\"name\":\"setSumOfBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_extrToken\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingFeeDecider\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setUnbondFeeDecider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingFeeDecider\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setUnlockFeeDecider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondFeeDecider\",\"outputs\":[{\"internalType\":\"contract IStakingFeeDecider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFeeDecider\",\"outputs\":[{\"internalType\":\"contract IStakingFeeDecider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StaticStakingV1", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006978000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "petersburg", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}