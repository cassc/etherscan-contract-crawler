{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\r\n}\r\n\r\ncontract TokenAccessControl {\r\n    \r\n    bool public paused = false;\r\n    address public owner;\r\n    address public newContractOwner;\r\n    mapping(address => bool) public authorizedContracts;\r\n \r\n    event Pause();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor () {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    modifier ifNotPaused {\r\n        require(!paused);\r\n        _;\r\n    }\r\n \r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    modifier onlyAuthorizedContract {\r\n        require(authorizedContracts[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyContractOwnerOrAuthorizedContract {\r\n        require(authorizedContracts[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    function transferOwnership(address _newOwner) external onlyContractOwner {\r\n        require(_newOwner != address(0));\r\n        newContractOwner = _newOwner;\r\n    }\r\n \r\n    function acceptOwnership() external {\r\n        require(msg.sender == newContractOwner);\r\n        emit OwnershipTransferred(owner, newContractOwner);\r\n        owner = newContractOwner;\r\n        newContractOwner = address(0);\r\n    }\r\n \r\n    function setAuthorizedContract(address _buyContract, bool _approve) public onlyContractOwner {\r\n        if (_approve) {\r\n            authorizedContracts[_buyContract] = true;\r\n        } else {\r\n            delete authorizedContracts[_buyContract];\r\n        }\r\n    }\r\n \r\n    function setPause(bool _paused) public onlyContractOwner {\r\n        paused = _paused;\r\n        if (paused) {\r\n            emit Pause();\r\n        }\r\n    }\r\n   \r\n}\r\n\r\ncontract TokenBase is TokenAccessControl {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public baseURI;\r\n    uint256 public totalSupply;\r\n    address royaltyReceiver;\r\n    uint256 royaltyPercentage;\r\n    \r\n    mapping (uint256 => address) tokenToOwner;\r\n    mapping (uint256 => address) tokenToApproved;\r\n    mapping (address => uint256) ownerBalance;\r\n    mapping (address => mapping (address => bool)) ownerToOperators;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) ^\r\n        bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n        bytes4(keccak256('getApproved(uint256)')) ^\r\n        bytes4(keccak256('isApprovedForAll(address,address)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721Metadata =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('tokenURI(uint256)'));\r\n        \r\n    constructor(string memory _name, string memory _symbol, string memory _baseURI) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        baseURI = _baseURI;\r\n        totalSupply = 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || \r\n                (_interfaceID == InterfaceSignature_ERC721) || \r\n                (_interfaceID == InterfaceSignature_ERC721Metadata));\r\n    }\r\n    \r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    function changeNameAndSymbol(string memory _name, string memory _symbol) public onlyContractOwner {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n        return string(abi.encodePacked(baseURI, uint2str(_tokenId), \".json\"));\r\n    }\r\n\r\n    function setTokenURI(string memory _baseURI) external onlyContractOwner {\r\n        baseURI = _baseURI;\r\n    }\r\n\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return tokenToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return tokenToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _operatorFor(address _operator, address _owner) internal view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n    \r\n    function _canReceive(address _addr, address _sender, address _owner, uint256 _tokenId, bytes memory _data) internal returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        bool isContract = (size > 0);\r\n        \r\n        if (isContract) {\r\n            ERC721TokenReceiver receiver = ERC721TokenReceiver(_addr);\r\n            if (receiver.onERC721Received(_sender, _owner, _tokenId, _data) != \r\n                bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownerBalance[_to]++;\r\n        tokenToOwner[_tokenId] = _to;\r\n        \r\n        if (_from != address(0)) {\r\n            ownerBalance[_from]--;\r\n            delete tokenToApproved[_tokenId];\r\n        }\r\n        \r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 count) {\r\n        require(_owner != address(0));\r\n        return ownerBalance[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n        owner = tokenToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable ifNotPaused {\r\n        require(_owns(msg.sender, _tokenId) || \r\n                _approvedFor(msg.sender, _tokenId) || \r\n                ownerToOperators[tokenToOwner[_tokenId]][msg.sender]);  // owns, is approved or is operator\r\n        require(_to != address(0) && _to != address(this));  // valid address\r\n        require(tokenToOwner[_tokenId] != address(0));  // is valid NFT\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) external payable ifNotPaused {\r\n        this.transferFrom(_from, _to, _tokenId);\r\n        require(_canReceive(_to, msg.sender, _from, _tokenId, _data));\r\n    }\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable ifNotPaused {\r\n        this.safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) external payable ifNotPaused {\r\n        require(_owns(msg.sender, _tokenId) || \r\n                _operatorFor(msg.sender, this.ownerOf(_tokenId)));\r\n\r\n        tokenToApproved[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _to, bool _approved) external ifNotPaused {\r\n        if (_approved) {\r\n            ownerToOperators[msg.sender][_to] = _approved;\r\n        } else {\r\n            delete ownerToOperators[msg.sender][_to];\r\n        }\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address) {\r\n        require(tokenToOwner[_tokenId] != address(0));\r\n        return tokenToApproved[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n    \r\n    function setRoyalty(address _receiver, uint8 _percentage) external onlyContractOwner {\r\n        royaltyReceiver = _receiver;\r\n        royaltyPercentage = _percentage;\r\n    }\r\n    \r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n        _tokenId = _tokenId;\r\n        receiver = royaltyReceiver;\r\n        royaltyAmount = uint256(_salePrice / 100) * royaltyPercentage;\r\n    }\r\n    \r\n    receive() external payable {\r\n        \r\n    }\r\n    \r\n    fallback() external payable {\r\n        \r\n    }\r\n    \r\n    function withdrawBalance(uint256 _amount) external onlyContractOwner {\r\n        payable(owner).transfer(_amount);\r\n    }\r\n    \r\n}\r\n\r\ncontract CyberTradeFighter is TokenBase {\r\n\r\n    uint256 lastFighterIndex = 0;\r\n    mapping (uint256 => Fighter) fighters;\r\n    \r\n    constructor(string memory _name, string memory _symbol, string memory _baseURI) TokenBase(_name, _symbol, _baseURI) {\r\n    }\r\n    \r\n    struct Fighter {\r\n        uint8 hp;\r\n        uint8 attack;\r\n        uint8 defense;\r\n        uint8 agility;\r\n        \r\n        uint8 level;\r\n        uint16 xp;\r\n        string name;\r\n        string class;\r\n        string tag;\r\n        string syndicate;\r\n        string genAttribute;\r\n        string genElement;\r\n        uint16 potentialMax;\r\n        \r\n        uint16[] skins;\r\n        uint16 activeSkin;\r\n    }\r\n\r\n    function createToken(address _owner, string memory _name, string memory _class, string memory _syndicate, bool _isBoss,\r\n                        string memory _genAttr, string memory _genElem\r\n    ) public onlyContractOwnerOrAuthorizedContract ifNotPaused returns (uint256) {\r\n        Fighter memory _fighter;\r\n        _fighter.name = _name;\r\n        _fighter.class = _class;\r\n        _fighter.tag = _isBoss ? \"Legendary Boss\" : \"Original Fighter\";\r\n        _fighter.syndicate = _syndicate;\r\n        _fighter.genAttribute = _genAttr;\r\n        _fighter.genElement = _genElem;\r\n        \r\n        totalSupply++;\r\n        lastFighterIndex++;\r\n        fighters[lastFighterIndex] = _fighter;\r\n        fighters[lastFighterIndex].skins.push(0);\r\n        _transfer(address(0), _owner, lastFighterIndex);\r\n\r\n        return lastFighterIndex;\r\n    }\r\n    \r\n    function getFighter(uint256 _id) external view returns (uint8 level, uint16 xp, \r\n        string memory name, string memory class, string memory tag, string memory syndicate, \r\n        string memory genAttribute, string memory genElement, uint16 potentialMax\r\n    ) {\r\n        Fighter memory fighter = fighters[_id];\r\n\r\n        level = fighter.level;\r\n        xp = fighter.xp;\r\n        name = fighter.name;\r\n        class = fighter.class;\r\n        tag = fighter.tag;\r\n        syndicate = fighter.syndicate;\r\n        genAttribute = fighter.genAttribute;\r\n        genElement = fighter.genElement;\r\n        potentialMax = fighter.potentialMax;\r\n    }\r\n    \r\n    function getFighterAttrs(uint256 _id) external view returns (uint8 hp, uint8 attack, uint8 defense, uint8 agility, uint16 activeSkin) {\r\n        Fighter memory fighter = fighters[_id];\r\n        hp = fighter.hp;\r\n        attack = fighter.attack;\r\n        defense = fighter.defense;\r\n        agility = fighter.agility;\r\n        activeSkin = fighter.activeSkin;\r\n    }\r\n    \r\n    function getFighterSkins(uint256 _id) external view returns (uint16[] memory skins) {\r\n        Fighter memory fighter = fighters[_id];\r\n        return fighter.skins;\r\n    }\r\n    \r\n    function deathFight(uint256 _fighter1, uint256 _fighter2) public ifNotPaused {\r\n        require(msg.sender == tokenToOwner[_fighter1] &&\r\n                msg.sender == tokenToOwner[_fighter2] &&\r\n                _fighter1 != _fighter2);\r\n        \r\n        Fighter storage fighter1 = fighters[_fighter1];\r\n        Fighter storage fighter2 = fighters[_fighter2];\r\n        \r\n        require(fighter1.level == 1 && fighter2.level == 1);\r\n        require(keccak256(bytes(fighter1.class)) == keccak256(bytes(fighter2.class)));\r\n        \r\n        if (fighter1.hp < fighter2.hp) {\r\n            fighter1.hp = fighter2.hp;\r\n        }\r\n        if (fighter1.attack < fighter2.attack) {\r\n            fighter1.attack = fighter2.attack;\r\n        }\r\n        if (fighter1.defense < fighter2.defense) {\r\n            fighter1.defense = fighter2.defense;\r\n        }\r\n        if (fighter1.agility < fighter2.agility) {\r\n            fighter1.agility = fighter2.agility;\r\n        }\r\n        \r\n        address owner = tokenToOwner[_fighter2];\r\n        totalSupply--;\r\n        delete fighters[_fighter2];\r\n        delete tokenToOwner[_fighter2];\r\n        delete tokenToApproved[_fighter2];\r\n        ownerBalance[owner]--;\r\n    }\r\n \r\n    function setAttr(uint256 _fighter, address _user, uint8 _attr, string memory _stringValue, uint16 _intValue, bool _boolValue) public onlyContractOwnerOrAuthorizedContract ifNotPaused {\r\n        require(_user == tokenToOwner[_fighter]);\r\n        Fighter storage fighter = fighters[_fighter];\r\n        uint16 i;\r\n        \r\n        if (_attr == 0) {\r\n            fighter.xp += _intValue;\r\n        } else if (_attr == 1) {\r\n            require(keccak256(bytes(fighter.syndicate)) == keccak256(bytes(\"\")), \"You can set this attribute only once.\");\r\n            fighter.syndicate = _stringValue;\r\n        } else if (_attr == 2) {\r\n            // activate skin\r\n            bool owned = false;\r\n            for (i = 0; i < fighter.skins.length; i++) {\r\n                if (fighter.skins[i] == _intValue) {\r\n                    owned = true;\r\n                }\r\n            }\r\n            require(owned, \"You do not own this skin.\");\r\n            fighter.activeSkin = _intValue;\r\n        } else if (_attr == 3) {\r\n            // set gen element\r\n            require(keccak256(bytes(fighter.genElement)) == keccak256(bytes(\"\")), \"You can set this attribute only once.\");\r\n            fighter.genElement = _stringValue;\r\n        } else if (_attr == 4) {\r\n            // used for adding and removing skins\r\n            require(_intValue > 0 && fighter.activeSkin != _intValue);\r\n            uint16 owned_index = 0;\r\n            for (i = 1; i < fighter.skins.length; i++) {\r\n                if (fighter.skins[i] == _intValue) {\r\n                    owned_index = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (owned_index > 0 && !_boolValue){\r\n                fighter.skins[owned_index] = fighter.skins[fighter.skins.length-1];\r\n                fighter.skins.pop();\r\n            } else if (owned_index == 0 && _boolValue) {\r\n                fighter.skins.push(_intValue);\r\n            }\r\n        }\r\n    }\r\n \r\n    function levelUp(uint256 _nft, uint8 _h, uint8 _a, uint8 _d, uint8 _s, uint16 _potentialMax) public onlyContractOwnerOrAuthorizedContract ifNotPaused{\r\n        Fighter storage fighter = fighters[_nft];\r\n        if (keccak256(bytes(fighter.tag)) == keccak256(bytes(\"Original Fighter\")) && fighter.level == 10) {\r\n            fighter.tag = \"Original Boss\";\r\n            fighter.level = 1;\r\n            fighter.xp = 0;\r\n            fighter.potentialMax = _potentialMax;\r\n        } else {\r\n            fighter.level++;\r\n            fighter.xp = 0;\r\n            fighter.hp = _h;\r\n            fighter.attack = _a;\r\n            fighter.defense = _d;\r\n            fighter.agility = _s;\r\n            if (_potentialMax != 0) {\r\n                fighter.potentialMax = _potentialMax;\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_syndicate\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isBoss\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_genAttr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_genElem\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fighter1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fighter2\",\"type\":\"uint256\"}],\"name\":\"deathFight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFighter\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"xp\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"syndicate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genAttribute\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genElement\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"potentialMax\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFighterAttrs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"agility\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"activeSkin\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFighterSkins\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"skins\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_h\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_a\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_d\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_s\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_potentialMax\",\"type\":\"uint16\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fighter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_attr\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_stringValue\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_intValue\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_boolValue\",\"type\":\"bool\"}],\"name\":\"setAttr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setAuthorizedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CyberTradeFighter", "CompilerVersion": "v0.7.2+commit.51b20bc0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000013437962657274726164652046696768746572730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034354460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f6e6674732e7472616465726163656d616e616765722e636f6d2f6374662f0000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38ce5f7ee20006de6a57ff18be08ab2fe35c7c807a5e98af216dc9eb222c11fa"}