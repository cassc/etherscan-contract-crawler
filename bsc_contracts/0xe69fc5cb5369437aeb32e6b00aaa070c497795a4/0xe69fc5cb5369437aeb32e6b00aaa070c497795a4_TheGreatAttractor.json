{"SourceCode": "// SPDX-License-Identifier: MIT \r\n\r\npragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract TheGreatAttractor {\r\n    address psyko =0xaaD978c2155FAccF64b93A8D2B8A5D8f2317D308; \r\n    uint256 public DREAMS_FOR_SPACE_RACERS=864000;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized;\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n    address public ceoAddress3;\r\n    address public ceoAddress4;\r\n    address public ceoAddress5;\r\n    address public ceoAddress6;\r\n    address public ceoAddress7;\r\n    address public ceoAddress8;\r\n    address public ceoAddress9;\r\n    address public ceoAddress10;\r\n    address public ceoAddress11;\r\n    mapping (address => uint256) public spaceRacers;\r\n    mapping (address => uint256) public claimedDreams;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketDreams;\r\n    constructor() public{\r\n        initialized = true;\r\n        ceoAddress=msg.sender;\r\n        ceoAddress2=address(0xbD017685eE9C6540e9FC996514aB2393f0e83D95);\r\n        ceoAddress3=address(0xe602AeC42cB560f2B62E8C67Bc05146948d0C1f8);\r\n        ceoAddress4=address(0xfBcEc6b5d4b8fed4dAe63d626069680Bd8bC2c39);\r\n        ceoAddress5=address(0xE9Fd0CaA6d4CA7c298a11ae725e01F764b0099fa);\r\n        ceoAddress6=address(0x7Cb88a7810e7995dd433b31809D761e65cEc3D1D);\r\n        ceoAddress7=address(0xa3C0dC9Bb88a7D0F878F02a698233Ba7Ea129382);\r\n        ceoAddress8=address(0xCd26cD29a320fF4F9a0B97a772F0fc634f8eb8ba);\r\n        ceoAddress9=address(0x5ca65aa8381bc33b1CE4C39cA7AAAd63f8FCcd10);\r\n        ceoAddress10=address(0x842C7777bB088694459512F06FdE820F16bF1760);\r\n        ceoAddress11=address(0xe06DF71a6F9F47c7eA197d6A5bae77f0ebB3CF51);\r\n    }\r\n    function hatchDreams(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 dreamsUsed=getMyDreams();\r\n        uint256 newRacers=SafeMath.div(dreamsUsed,DREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedDreams[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedDreams[referrals[msg.sender]]=SafeMath.add(claimedDreams[referrals[msg.sender]],SafeMath.div(dreamsUsed,10));\r\n        \r\n        //space rage\r\n        marketDreams=SafeMath.add(marketDreams,SafeMath.div(dreamsUsed,5));\r\n    }\r\n    function sellDreams() public {\r\n        require(initialized);\r\n        uint256 hasDreams=getMyDreams();\r\n        uint256 dreamValue=calculateDreamSell(hasDreams);\r\n        uint256 fee=devFee(dreamValue);\r\n        claimedDreams[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketDreams=SafeMath.add(marketDreams,hasDreams);\r\n        ERC20(psyko).transfer(ceoAddress, fee/6);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(dreamValue,fee));\r\n    }\r\n    \r\n    \r\n    function buyDreams(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 dreamsBought = calculateDreamBuy(amount, SafeMath.sub(balance, amount));\r\n    dreamsBought = SafeMath.sub(dreamsBought, devFee(dreamsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](11);\r\n    for (uint8 i = 2; i <= 11; i++) {\r\n    fees[i - 2] = fee / 30;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n    if (i == 3) psykoToken.transfer(ceoAddress3, fees[1]);\r\n    if (i == 4) psykoToken.transfer(ceoAddress4, fees[2]);\r\n    if (i == 5) psykoToken.transfer(ceoAddress5, fees[3]);\r\n    if (i == 6) psykoToken.transfer(ceoAddress6, fees[4]);\r\n    if (i == 7) psykoToken.transfer(ceoAddress7, fees[5]);\r\n    if (i == 8) psykoToken.transfer(ceoAddress8, fees[6]);\r\n    if (i == 9) psykoToken.transfer(ceoAddress9, fees[7]);\r\n    if (i == 10) psykoToken.transfer(ceoAddress10, fees[8]);\r\n    if (i == 11) psykoToken.transfer(ceoAddress11, fees[9]);\r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0] - fees[1] - fees[2] - fees[3] - fees[4] - fees[5] - fees[6] - fees[7] - fees[8] - fees[9];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedDreams[senderAddress] = SafeMath.add(claimedDreams[senderAddress], dreamsBought);\r\n    hatchDreams(ref);\r\n}\r\n\r\n    //dreams i've never ever seen\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateDreamSell(uint256 dreams) public view returns(uint256) {\r\n        return calculateTrade(dreams,marketDreams,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateDreamBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketDreams);\r\n    }\r\n    function calculateDreamBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateDreamBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,30),100);\r\n    }\r\n    function closEncounters(uint256 amount) public {\r\n        ERC20(psyko).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketDreams==0);\r\n        initialized=true;\r\n        marketDreams=86400000000;\r\n    }\r\n    function getBalance() public view returns(uint256) {\r\n        return ERC20(psyko).balanceOf(address(this));\r\n    }\r\n    function getMyRacers() public view returns(uint256) {\r\n        return spaceRacers[msg.sender];\r\n    }\r\n    function getMyDreams() public view returns(uint256) {\r\n        return SafeMath.add(claimedDreams[msg.sender],getDreamsSinceLastHatch(msg.sender));\r\n    }\r\n    function getDreamsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(DREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"spaceRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress9\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress7\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DREAMS_FOR_SPACE_RACERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchDreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateDreamBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDreamsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"closEncounters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress6\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellDreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dreams\",\"type\":\"uint256\"}],\"name\":\"calculateDreamSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress10\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress8\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyDreams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketDreams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress11\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDreams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateDreamBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "TheGreatAttractor", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://93a83f2895fe060c6a6d5dfa2d8115a4ab4b6ff18ee9d177a73f6eb5bf3cd97a"}