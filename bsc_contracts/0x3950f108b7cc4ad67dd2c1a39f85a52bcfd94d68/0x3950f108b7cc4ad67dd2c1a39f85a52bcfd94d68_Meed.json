{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Meed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor () internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary Babylonian {\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n        // else z = 0\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract Operator is Context, Ownable {\\r\\n    address private _operator;\\r\\n\\r\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\r\\n\\r\\n    constructor() internal {\\r\\n        _operator = _msgSender();\\r\\n        emit OperatorTransferred(address(0), _operator);\\r\\n    }\\r\\n\\r\\n    function operator() public view returns (address) {\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOperator() public view returns (bool) {\\r\\n        return _msgSender() == _operator;\\r\\n    }\\r\\n\\r\\n    function transferOperator(address newOperator_) public onlyOwner {\\r\\n        _transferOperator(newOperator_);\\r\\n    }\\r\\n\\r\\n    function _transferOperator(address newOperator_) internal {\\r\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\r\\n        emit OperatorTransferred(address(0), newOperator_);\\r\\n        _operator = newOperator_;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract ContractGuard {\\r\\n    mapping(uint256 => mapping(address => bool)) private _status;\\r\\n\\r\\n    function checkSameOriginReentranted() internal view returns (bool) {\\r\\n        return _status[block.number][tx.origin];\\r\\n    }\\r\\n\\r\\n    function checkSameSenderReentranted() internal view returns (bool) {\\r\\n        return _status[block.number][msg.sender];\\r\\n    }\\r\\n\\r\\n    modifier onlyOneBlock() {\\r\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\r\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\r\\n\\r\\n        _;\\r\\n\\r\\n        _status[block.number][tx.origin] = true;\\r\\n        _status[block.number][msg.sender] = true;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IBasisAsset {\\r\\n    function mint(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address from, uint256 amount) external;\\r\\n\\r\\n    function isOperator() external returns (bool);\\r\\n\\r\\n    function operator() external view returns (address);\\r\\n\\r\\n    function transferOperator(address newOperator_) external;\\r\\n\\r\\n    function decay(uint256 epoch, uint256 supplyDelta, bool positive) external;\\r\\n}\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IOracle {\\r\\n    function update() external;\\r\\n\\r\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\r\\n\\r\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\r\\n}\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IIWV {\\r\\n    function balanceOf(address _mason) external view returns (uint256);\\r\\n\\r\\n    function earned(address _mason) external view returns (uint256);\\r\\n\\r\\n    function canWithdraw(address _mason) external view returns (bool);\\r\\n\\r\\n    function canClaimReward(address _mason) external view returns (bool);\\r\\n\\r\\n    function epoch() external view returns (uint256);\\r\\n\\r\\n    function nextEpochPoint() external view returns (uint256);\\r\\n\\r\\n    function getTombPrice() external view returns (uint256);\\r\\n\\r\\n    function setOperator(address _operator) external;\\r\\n\\r\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\r\\n\\r\\n    function stake(uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    function exit() external;\\r\\n\\r\\n    function claimReward() external;\\r\\n\\r\\n    function allocateIncantations(uint256 _amount) external;\\r\\n\\r\\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\\r\\n}\\r\\n\\r\\n\\r\\ncontract Meed is ContractGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /* ========= CONSTANT VARIABLES ======== */\\r\\n\\r\\n    uint256 public constant PERIOD = 6 hours;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    // governance\\r\\n    address public operator;\\r\\n\\r\\n    // flags\\r\\n    bool public initialized = false;\\r\\n\\r\\n    // epoch\\r\\n    uint256 public startTime;\\r\\n    uint256 public epoch = 0;\\r\\n   \\r\\n\\r\\n   \\r\\n\\r\\n    // core components\\r\\n   \\r\\n\\r\\n    address public peg1;\\r\\n    address public peg2;\\r\\n    address public peg3;\\r\\n    address public pyreGAS;\\r\\n    address public iwv;\\r\\n    address public meedTaxReceiver;\\r\\n\\r\\n    \\r\\n\\r\\n    \\r\\n  \\r\\n    address public pyreGASOracle;\\r\\n    address public peg1Oracle;\\r\\n    address public peg2Oracle;\\r\\n    address public peg3Oracle;\\r\\n\\r\\n    // price\\r\\n    uint256 public tombPriceOne;\\r\\n    uint256 public pegPriceOne;\\r\\n    uint256 public pegPriceCeiling;\\r\\n    uint256 public tombPriceCeiling;\\r\\n    uint256 public meedTax = 30;\\r\\n    uint256 public peg1AmountLeft = 0;\\r\\n    uint256 public peg2AmountLeft = 1;\\r\\n    uint256 public peg3AmountLeft = 1;\\r\\n\\r\\n    \\r\\n\\r\\n    uint256[] public twapTiers;\\r\\n    uint256[] public decayRateTiers;\\r\\n    uint256 public decayRate;\\r\\n\\r\\n    \\r\\n\\r\\n \\r\\n\\r\\n    /* =================== Added variables =================== */\\r\\n   \\r\\n    uint256 public previousEpochPyreGASPrice;\\r\\n   \\r\\n\\r\\n \\r\\n\\r\\n    /* =================== Events =================== */\\r\\n\\r\\n    event Initialized(address indexed executor, uint256 at);\\r\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\r\\n    event RedeemedBonds(address indexed from, uint256 tombAmount, uint256 bondAmount);\\r\\n    event BoughtBonds(address indexed from, uint256 _pegAmount, uint256 _pyreGasAmount);\\r\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\r\\n    event IWVFunded(uint256 timestamp, uint256 seigniorage);\\r\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\r\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\r\\n\\r\\n    /* =================== Modifier =================== */\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkCondition {\\r\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkEpoch {\\r\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\r\\n\\r\\n        _;\\r\\n\\r\\n        epoch = epoch.add(1);\\r\\n      \\r\\n    }\\r\\n\\r\\n    modifier checkOperator {\\r\\n        require(\\r\\n            IBasisAsset(pyreGAS).operator() == address(this) &&\\r\\n                Operator(iwv).operator() == address(this),\\r\\n            \\\"Treasury: need more permission\\\"\\r\\n        );\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notInitialized {\\r\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    function isInitialized() public view returns (bool) {\\r\\n        return initialized;\\r\\n    }\\r\\n\\r\\n    // epoch\\r\\n    function nextEpochPoint() public view returns (uint256) {\\r\\n        return startTime.add(epoch.mul(PERIOD));\\r\\n    }\\r\\n\\r\\n    // oracle\\r\\n   \\r\\n\\r\\n    function getPyreGASPrice() public view returns (uint256 tombPrice) {\\r\\n        try IOracle(pyreGASOracle).consult(pyreGAS, 1e18) returns (uint144 price) {\\r\\n            return uint256(price);\\r\\n        } catch {\\r\\n            revert(\\\"Treasury: failed to consult PyreGAS price from the oracle\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPeg1Price() public view returns (uint256 pegPrice) {\\r\\n        try IOracle(peg1Oracle).consult(peg1, 1e18) returns (uint144 price) {\\r\\n            return uint256(price);\\r\\n        } catch {\\r\\n            revert(\\\"Treasury: failed to consult TOMB price from the oracle\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPeg2Price() public view returns (uint256 pegPrice) {\\r\\n        try IOracle(peg2Oracle).consult(peg2, 1e18) returns (uint144 price) {\\r\\n            return uint256(price);\\r\\n        } catch {\\r\\n            revert(\\\"Treasury: failed to consult TOMB price from the oracle\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPeg3Price() public view returns (uint256 pegPrice) {\\r\\n        try IOracle(peg3Oracle).consult(peg3, 1e18) returns (uint144 price) {\\r\\n            return uint256(price);\\r\\n        } catch {\\r\\n            revert(\\\"Treasury: failed to consult TOMB price from the oracle\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n  \\r\\n\\r\\n    \\r\\n\\r\\n   \\r\\n\\r\\n   \\r\\n\\r\\n  \\r\\n\\r\\n   \\r\\n\\r\\n    /* ========== GOVERNANCE ========== */\\r\\n\\r\\n    function initialize(\\r\\n        address _peg1,\\r\\n        address _peg2,\\r\\n        address _peg3,\\r\\n        address _pyreGAS,\\r\\n        address _pyreGASOracle,\\r\\n        address _peg1Oracle,\\r\\n        address _peg2Oracle,\\r\\n        address _peg3Oracle,\\r\\n        address _iwv,\\r\\n        uint256 _startTime\\r\\n    ) public notInitialized {\\r\\n        peg1 = _peg1;\\r\\n        peg2 = _peg2;\\r\\n        peg3 = _peg3;\\r\\n        pyreGAS = _pyreGAS;\\r\\n        pyreGASOracle = _pyreGASOracle;\\r\\n        peg1Oracle = _peg1Oracle;\\r\\n        peg2Oracle = _peg2Oracle;\\r\\n        peg3Oracle = _peg3Oracle;\\r\\n        iwv = _iwv;\\r\\n        startTime = _startTime;\\r\\n\\r\\n        pegPriceOne = 10**18;\\r\\n        pegPriceCeiling = pegPriceOne.mul(80).div(100);\\r\\n\\r\\n        // exclude contracts from total supply\\r\\n     \\r\\n\\r\\n        // Dynamic max expansion percent\\r\\n        twapTiers = [0, 0.4*1e18, 0.6*1e18, 0.8*1e18];\\r\\n        decayRateTiers = [160, 40, 20, 0];\\r\\n        \\r\\n\\r\\n        \\r\\n\\r\\n       \\r\\n\\r\\n        initialized = true;\\r\\n        operator = msg.sender;\\r\\n        emit Initialized(msg.sender, block.number);\\r\\n    }\\r\\n\\r\\n    function setOperator(address _operator) external onlyOperator {\\r\\n        operator = _operator;\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    function setIWV(address _iwv) external onlyOperator {\\r\\n        iwv = _iwv;\\r\\n    }\\r\\n\\r\\n \\r\\n\\r\\n    \\r\\n\\r\\n    function setPeg1Oracle(address _peg1Oracle) external onlyOperator {\\r\\n        peg1Oracle = _peg1Oracle;\\r\\n    }\\r\\n\\r\\n    function setPeg2Oracle(address _peg2Oracle) external onlyOperator {\\r\\n        peg2Oracle = _peg2Oracle;\\r\\n    }\\r\\n\\r\\n    function setPeg3Oracle(address _peg3Oracle) external onlyOperator {\\r\\n        peg3Oracle = _peg3Oracle;\\r\\n    }\\r\\n\\r\\n    function setPeg1(address _peg1) external onlyOperator {\\r\\n        peg1 = _peg1;\\r\\n    }\\r\\n\\r\\n    function setPeg2(address _peg2) external onlyOperator {\\r\\n        peg2 = _peg2;\\r\\n    }\\r\\n\\r\\n    function setPeg3(address _peg3) external onlyOperator {\\r\\n        peg3 = _peg3;\\r\\n    }\\r\\n\\r\\n    function setMeedTaxReceiver(address _meedTaxReceiver) external onlyOperator {\\r\\n        meedTaxReceiver = _meedTaxReceiver;\\r\\n    }\\r\\n\\r\\n    function setMeedTax(uint256 _meedTax) external onlyOperator {\\r\\n        meedTax = _meedTax;\\r\\n    }\\r\\n\\r\\n  \\r\\n\\r\\n  \\r\\n\\r\\n    function setTwapTiers(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\r\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\r\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\r\\n      \\r\\n        twapTiers[_index] = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setDecayRateTiers(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\r\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\r\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\r\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\r\\n        decayRateTiers[_index] = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n \\r\\n\\r\\n \\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n   \\r\\n\\r\\n    \\r\\n \\r\\n\\r\\n   \\r\\n\\r\\n   \\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n    /* ========== MUTABLE FUNCTIONS ========== */\\r\\n\\r\\n\\r\\n    function _updatePegPrices() internal {\\r\\n        try IOracle(peg1Oracle).update() {} catch {}\\r\\n        try IOracle(peg2Oracle).update() {} catch {}\\r\\n        try IOracle(peg3Oracle).update() {} catch {}\\r\\n        try IOracle(pyreGASOracle).update() {} catch {}\\r\\n    }\\r\\n\\r\\n    function getPegCirculatingSupply(address _peg) public view returns (uint256) {\\r\\n        IERC20 pegErc20 = IERC20(_peg);\\r\\n        uint256 totalSupply = pegErc20.totalSupply();\\r\\n       \\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    \\r\\n\\r\\n     function meedpeg1(uint256 _pegAmount) external onlyOneBlock checkCondition  {\\r\\n       require(_pegAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\r\\n\\r\\n        uint256 pegPrice = getPeg1Price();\\r\\n        require(\\r\\n            pegPrice < pegPriceCeiling, // price < $1\\r\\n            \\\"Treasury: tombPrice not eligible for bond purchase\\\"\\r\\n        );\\r\\n\\r\\n        require(_pegAmount <= peg1AmountLeft, \\\"Treasury: not enough bond left to purchase\\\");\\r\\n\\r\\n        uint256 _meedTaxAmount = _pegAmount.mul(meedTax).div(1000);\\r\\n        uint256 _pegBurnAmount = _pegAmount.sub(_meedTaxAmount);\\r\\n        uint256 _pyreGasAmount = (_pegAmount.sub(_meedTaxAmount)).div(1000);\\r\\n       \\r\\n        peg1AmountLeft = peg1AmountLeft.sub(_pegAmount);\\r\\n\\r\\n        IERC20(peg1).transferFrom(msg.sender, address(this), _pegAmount);\\r\\n        IERC20(peg1).transfer(meedTaxReceiver, _meedTaxAmount);\\r\\n        IBasisAsset(peg1).burn(_pegBurnAmount);\\r\\n        IBasisAsset(pyreGAS).mint(msg.sender, _pyreGasAmount);\\r\\n       \\r\\n\\r\\n        emit BoughtBonds(msg.sender, _pegAmount, _pyreGasAmount);\\r\\n    }\\r\\n\\r\\n    function meedpeg2(uint256 _pegAmount) external onlyOneBlock checkCondition  {\\r\\n        require(_pegAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\r\\n\\r\\n        uint256 pegPrice = getPeg2Price();\\r\\n        require(\\r\\n            pegPrice < pegPriceCeiling, // price < $1\\r\\n            \\\"Treasury: tombPrice not eligible for bond purchase\\\"\\r\\n        );\\r\\n\\r\\n        require(_pegAmount <= peg2AmountLeft, \\\"Treasury: not enough bond left to purchase\\\");\\r\\n\\r\\n        uint256 _meedTaxAmount = _pegAmount.mul(meedTax).div(1000);\\r\\n        uint256 _pegBurnAmount = _pegAmount.sub(_meedTaxAmount);\\r\\n        uint256 _pyreGasAmount = (_pegAmount.sub(_meedTaxAmount)).div(100);\\r\\n       \\r\\n        peg2AmountLeft = peg2AmountLeft.sub(_pegAmount);\\r\\n\\r\\n        IERC20(peg2).transferFrom(msg.sender, address(this), _pegAmount);\\r\\n        IERC20(peg2).transfer(meedTaxReceiver, _meedTaxAmount);\\r\\n        IBasisAsset(peg2).burn(_pegBurnAmount);\\r\\n        IBasisAsset(pyreGAS).mint(msg.sender, _pyreGasAmount);\\r\\n       \\r\\n\\r\\n        emit BoughtBonds(msg.sender, _pegAmount, _pyreGasAmount);\\r\\n    }\\r\\n\\r\\n    function meedpeg3(uint256 _pegAmount) external onlyOneBlock checkCondition  {\\r\\n        require(_pegAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\r\\n\\r\\n        uint256 pegPrice = getPeg3Price();\\r\\n        require(\\r\\n            pegPrice < pegPriceCeiling, // price < $1\\r\\n            \\\"Treasury: tombPrice not eligible for bond purchase\\\"\\r\\n        );\\r\\n\\r\\n        require(_pegAmount <= peg3AmountLeft, \\\"Treasury: not enough bond left to purchase\\\");\\r\\n\\r\\n        uint256 _meedTaxAmount = _pegAmount.mul(meedTax).div(1000);\\r\\n        uint256 _pegBurnAmount = _pegAmount.sub(_meedTaxAmount);\\r\\n        uint256 _pyreGasAmount = (_pegAmount.sub(_meedTaxAmount)).div(10);\\r\\n       \\r\\n        peg3AmountLeft = peg3AmountLeft.sub(_pegAmount);\\r\\n\\r\\n        IERC20(peg3).transferFrom(msg.sender, address(this), _pegAmount);\\r\\n        IERC20(peg3).transfer(meedTaxReceiver, _meedTaxAmount);\\r\\n        IBasisAsset(peg3).burn(_pegBurnAmount);\\r\\n        IBasisAsset(pyreGAS).mint(msg.sender, _pyreGasAmount);\\r\\n       \\r\\n\\r\\n        emit BoughtBonds(msg.sender, _pegAmount, _pyreGasAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _sendToIWV(uint256 _amount) internal {\\r\\n        \\r\\n\\r\\n        IERC20(pyreGAS).safeApprove(iwv, 0);\\r\\n        IERC20(pyreGAS).safeApprove(iwv, _amount);\\r\\n        IIWV(iwv).allocateIncantations(_amount);\\r\\n        emit IWVFunded(now, _amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _calculateDecayRate(uint256 _twap) internal returns (uint256) {\\r\\n        for (uint8 tierId = 3; tierId >= 0; --tierId) {\\r\\n            if (_twap >= twapTiers[tierId]) {\\r\\n                decayRate = decayRateTiers[tierId];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return decayRate;\\r\\n    }\\r\\n\\r\\n    function allocateIncantations() external onlyOneBlock checkCondition checkEpoch  {\\r\\n        _updatePegPrices();\\r\\n        previousEpochPyreGASPrice = getPyreGASPrice();\\r\\n        uint256 currentEpoch; \\r\\n        currentEpoch = epoch;\\r\\n        uint256 _decay = _calculateDecayRate(previousEpochPyreGASPrice);\\r\\n        IBasisAsset(pyreGAS).decay(currentEpoch , _decay, false);\\r\\n        \\r\\n        if (peg1AmountLeft == 0) {\\r\\n            uint256 Peg1Supply = IERC20(peg1).totalSupply();\\r\\n            uint256 Peg1NewAmountLeft = Peg1Supply.div(100);\\r\\n            peg1AmountLeft = Peg1NewAmountLeft;\\r\\n        }\\r\\n         if (peg2AmountLeft == 0) {\\r\\n            uint256 Peg2Supply = IERC20(peg2).totalSupply();\\r\\n            uint256 Peg2NewAmountLeft = Peg2Supply.div(100);\\r\\n            peg2AmountLeft = Peg2NewAmountLeft;\\r\\n        }\\r\\n         if (peg3AmountLeft == 0) {\\r\\n            uint256 Peg3Supply = IERC20(peg3).totalSupply();\\r\\n            uint256 Peg3NewAmountLeft = Peg3Supply.div(100);\\r\\n            peg3AmountLeft = Peg3NewAmountLeft;\\r\\n        }\\r\\n        if (iwv != 0x0000000000000000000000000000000000000000) {\\r\\n            // send PyreGAS to IWV if IWV address is not set to 0\\r\\n            uint256 incantations = IERC20(pyreGAS).balanceOf(address(this));\\r\\n            _sendToIWV(incantations);\\r\\n        } \\r\\n    }\\r\\n\\r\\n    function governanceRecoverUnsupported(\\r\\n        IERC20 _token,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyOperator {\\r\\n       \\r\\n        _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function iwvSetOperator(address _operator) external onlyOperator {\\r\\n        IIWV(iwv).setOperator(_operator);\\r\\n    }\\r\\n\\r\\n    function iwvSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\r\\n        IIWV(iwv).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\r\\n    }\\r\\n\\r\\n    function iwvAllocateIncantations(uint256 amount) external onlyOperator {\\r\\n        IIWV(iwv).allocateIncantations(amount);\\r\\n    }\\r\\n\\r\\n    function iwvGovernanceRecoverUnsupported(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyOperator {\\r\\n        IIWV(iwv).governanceRecoverUnsupported(_token, _amount, _to);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pegAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pyreGasAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"IWVFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateIncantations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decayRateTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeg1Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pegPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeg2Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pegPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeg3Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pegPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg\",\"type\":\"address\"}],\"name\":\"getPegCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPyreGASPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peg2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peg3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pyreGAS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pyreGASOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peg1Oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peg2Oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peg3Oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iwv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iwv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"iwvAllocateIncantations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"iwvGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"iwvSetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"iwvSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meedTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meedTaxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pegAmount\",\"type\":\"uint256\"}],\"name\":\"meedpeg1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pegAmount\",\"type\":\"uint256\"}],\"name\":\"meedpeg2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pegAmount\",\"type\":\"uint256\"}],\"name\":\"meedpeg3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg1AmountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg1Oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg2AmountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg2Oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg3AmountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg3Oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochPyreGASPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyreGAS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyreGASOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDecayRateTiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iwv\",\"type\":\"address\"}],\"name\":\"setIWV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_meedTax\",\"type\":\"uint256\"}],\"name\":\"setMeedTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_meedTaxReceiver\",\"type\":\"address\"}],\"name\":\"setMeedTaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg1\",\"type\":\"address\"}],\"name\":\"setPeg1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg1Oracle\",\"type\":\"address\"}],\"name\":\"setPeg1Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg2\",\"type\":\"address\"}],\"name\":\"setPeg2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg2Oracle\",\"type\":\"address\"}],\"name\":\"setPeg2Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg3\",\"type\":\"address\"}],\"name\":\"setPeg3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg3Oracle\",\"type\":\"address\"}],\"name\":\"setPeg3Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTwapTiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"twapTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Meed", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}