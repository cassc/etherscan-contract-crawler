{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the ERC token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Rayo is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _tetherBalances;\r\n    mapping(address => uint256) private _tetherFrozenBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _symbol;\r\n    string private _name;\r\n    uint8 private _decimals;\r\n    uint256 private _tetherLiquidity;\r\n    uint256 private _totalSupply;\r\n    uint256 private _price;\r\n    IERC20 public token;\r\n    uint256 private _ICOLiquidity;\r\n    uint256 private _ICOCoefficient;\r\n    uint256 private _totalFrozen;\r\n    address[] internal ICONodes;\r\n    address private partner1;\r\n    address private partner2;\r\n    address private partner3;\r\n\r\n    struct Transaction {\r\n        string txType;\r\n        uint256 amount;\r\n        uint256 frozenAmount;\r\n        uint256 time;\r\n    }\r\n    mapping(address => Transaction[]) internal reports;\r\n\r\n    constructor() {\r\n        _name = \"Rayo Token\";\r\n        _symbol = \"RAYO\";\r\n        _decimals = 18;\r\n        _tetherLiquidity = 1000000000000000000; // 1 Tether\r\n        _totalSupply = 100000000000000000000000; // 100000 Rayo\r\n        _price = _tetherLiquidity / _totalSupply; // First price: 0.00001 Tether\r\n        _balances[msg.sender] = _totalSupply;\r\n        token = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        _ICOCoefficient = 6;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function setPartner(\r\n        address _address1,\r\n        address _address2,\r\n        address _address3\r\n    ) public onlyOwner {\r\n        require(\r\n            partner1 == address(0) &&\r\n                partner2 == address(0) &&\r\n                partner3 == address(0),\r\n            \"It's done before.\"\r\n        );\r\n        require(\r\n            _address1 != address(0) &&\r\n                _address2 != address(0) &&\r\n                _address3 != address(0),\r\n            \"Zero address!\"\r\n        );\r\n        partner1 = _address1;\r\n        partner2 = _address2;\r\n        partner3 = _address3;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function getPartners() external view returns (address, address, address) {\r\n        return (partner1, partner2, partner3);\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function tetherLiquidity() public view returns (uint256) {\r\n        return _tetherLiquidity;\r\n    }\r\n\r\n    function price() public view returns (uint256) {\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(_tetherLiquidity, 10 ** uint256(_decimals)),\r\n                _totalSupply\r\n            );\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function balanceOfTether(address account) public view returns (uint256) {\r\n        return _tetherBalances[account];\r\n    }\r\n\r\n    function balanceOfFrozenTether(\r\n        address account\r\n    ) public view returns (uint256) {\r\n        return _tetherFrozenBalances[account];\r\n    }\r\n\r\n    function ICOLiquidity() public view returns (uint256) {\r\n        return _ICOLiquidity;\r\n    }\r\n\r\n    function ICOCoefficient() public view returns (uint256) {\r\n        return _ICOCoefficient;\r\n    }\r\n\r\n    function totalFrozen() public view returns (uint256) {\r\n        return _totalFrozen;\r\n    }\r\n\r\n    function getICONodes() public view returns (address[] memory) {\r\n        return ICONodes;\r\n    }\r\n\r\n    function getICONodesCount() public view returns (uint256) {\r\n        return ICONodes.length;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"Decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 _amount\r\n    ) external returns (bool) {\r\n        require(\r\n            _balances[_msgSender()] >=\r\n                SafeMath.div(SafeMath.mul(_amount, 101), 100),\r\n            \"\"\r\n        );\r\n\r\n        uint256 recivedAmount = SafeMath.div(SafeMath.mul(_amount, 101), 100);\r\n        uint256 sentAmount = SafeMath.div(SafeMath.mul(_amount, 98), 100);\r\n        uint256 remainAmount = SafeMath.sub(recivedAmount, sentAmount);\r\n        uint256 ownerAmount = SafeMath.div(SafeMath.mul(remainAmount, 4), 10);\r\n        uint256 burnAmount = SafeMath.div(SafeMath.mul(remainAmount, 6), 10);\r\n\r\n        _transfer(_msgSender(), address(this), recivedAmount);\r\n        _transfer(address(this), recipient, sentAmount);\r\n        _transfer(address(this), partner1, SafeMath.div(ownerAmount, 3));\r\n        _transfer(address(this), partner2, SafeMath.div(ownerAmount, 3));\r\n        _transfer(address(this), partner3, SafeMath.div(ownerAmount, 3));\r\n\r\n        emit Transfer(address(this), address(0), burnAmount);\r\n        _balances[address(this)] = _balances[address(this)].sub(burnAmount);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 _amount\r\n    ) external returns (bool) {\r\n        require(\r\n            _balances[sender] >= SafeMath.div(SafeMath.mul(_amount, 101), 100),\r\n            \"\"\r\n        );\r\n\r\n        uint256 recivedAmount = SafeMath.div(SafeMath.mul(_amount, 101), 100);\r\n        uint256 sentAmount = SafeMath.div(SafeMath.mul(_amount, 98), 100);\r\n        uint256 remainAmount = SafeMath.sub(recivedAmount, sentAmount);\r\n        uint256 ownerAmount = SafeMath.div(SafeMath.mul(remainAmount, 4), 10);\r\n        uint256 burnAmount = SafeMath.div(SafeMath.mul(remainAmount, 6), 10);\r\n\r\n        _transfer(sender, address(this), recivedAmount);\r\n        _transfer(address(this), recipient, sentAmount);\r\n        _transfer(address(this), partner1, SafeMath.div(ownerAmount, 3));\r\n        _transfer(address(this), partner2, SafeMath.div(ownerAmount, 3));\r\n        _transfer(address(this), partner3, SafeMath.div(ownerAmount, 3));\r\n\r\n        emit Transfer(address(this), address(0), burnAmount);\r\n        _balances[address(this)] = _balances[address(this)].sub(burnAmount);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(_amount)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // Buy token = Mint new token\r\n    function buy(uint256 _amount) external payable {\r\n        // _amount is Tether\r\n        require(_msgSender() != address(0), \"Mint to the zero address\");\r\n        require(_amount > 0, \"Amount should be greater than zero.\");\r\n        require(\r\n            token.allowance(_msgSender(), address(this)) >= _amount,\r\n            \"Token allowance not enough\"\r\n        );\r\n        require(\r\n            token.balanceOf(_msgSender()) >= _amount,\r\n            \"Insufficient token balance\"\r\n        );\r\n        token.transferFrom(_msgSender(), address(this), _amount);\r\n        mintToken(_msgSender(), _amount);\r\n    }\r\n\r\n    function mintToken(address _address, uint256 _amount) private {\r\n        // _amount is Tether\r\n        uint256 userMintAmount = SafeMath.div(\r\n            SafeMath.mul(\r\n                SafeMath.div(SafeMath.mul(_amount, 98), 100),\r\n                _totalSupply\r\n            ),\r\n            _tetherLiquidity\r\n        );\r\n        uint256 ownerMintAmount = SafeMath.div(\r\n            SafeMath.mul(\r\n                SafeMath.div(SafeMath.mul(_amount, 6), 1000),\r\n                _totalSupply\r\n            ),\r\n            _tetherLiquidity\r\n        );\r\n        _totalSupply = SafeMath.add(_totalSupply, userMintAmount);\r\n        _totalSupply = SafeMath.add(_totalSupply, ownerMintAmount);\r\n        _tetherLiquidity = SafeMath.add(_tetherLiquidity, _amount);\r\n        _balances[_address] = SafeMath.add(_balances[_address], userMintAmount);\r\n        _balances[partner1] = SafeMath.add(\r\n            _balances[partner1],\r\n            SafeMath.div(ownerMintAmount, 3)\r\n        );\r\n        _balances[partner2] = SafeMath.add(\r\n            _balances[partner2],\r\n            SafeMath.div(ownerMintAmount, 3)\r\n        );\r\n        _balances[partner3] = SafeMath.add(\r\n            _balances[partner3],\r\n            SafeMath.div(ownerMintAmount, 3)\r\n        );\r\n        emit Transfer(address(0), _address, userMintAmount);\r\n        emit Transfer(address(0), partner1, SafeMath.div(ownerMintAmount, 3));\r\n        emit Transfer(address(0), partner2, SafeMath.div(ownerMintAmount, 3));\r\n        emit Transfer(address(0), partner3, SafeMath.div(ownerMintAmount, 3));\r\n    }\r\n\r\n    // Sell token = Burn token\r\n    function sell(uint256 _amount) external payable {\r\n        // _amount is RAYO\r\n        require(_msgSender() != address(0), \"Burn from the zero address!\");\r\n        require(_amount > 0, \"Amount should be greater than zero.\");\r\n        require(_balances[_msgSender()] >= _amount, \"Insufficient balance.\");\r\n        emit Transfer(_msgSender(), address(this), _amount);\r\n        _balances[_msgSender()] = _balances[_msgSender()].sub(_amount);\r\n        transferTether(_amount);\r\n        burnToken(_amount);\r\n    }\r\n\r\n    // Transfer tether to seller\r\n    function transferTether(uint256 _amount) private {\r\n        // _amount is RAYO\r\n        uint256 tetherAmount = SafeMath.div(\r\n            SafeMath.mul(_amount, _tetherLiquidity),\r\n            _totalSupply\r\n        );\r\n        require(\r\n            token.transfer(\r\n                _msgSender(),\r\n                SafeMath.div(SafeMath.mul(tetherAmount, 99), 100)\r\n            ),\r\n            \"Token transfer failed\"\r\n        );\r\n        _tetherLiquidity = _tetherLiquidity.sub(\r\n            SafeMath.div(SafeMath.mul(tetherAmount, 994), 1000)\r\n        );\r\n        uint256 ownerAmount = SafeMath.div(SafeMath.mul(_amount, 6), 1000);\r\n        _balances[partner1] = SafeMath.add(\r\n            _balances[partner1],\r\n            SafeMath.div(ownerAmount, 3)\r\n        );\r\n        _balances[partner2] = SafeMath.add(\r\n            _balances[partner2],\r\n            SafeMath.div(ownerAmount, 3)\r\n        );\r\n        _balances[partner3] = SafeMath.add(\r\n            _balances[partner3],\r\n            SafeMath.div(ownerAmount, 3)\r\n        );\r\n        emit Transfer(address(this), partner1, SafeMath.div(ownerAmount, 3));\r\n        emit Transfer(address(this), partner2, SafeMath.div(ownerAmount, 3));\r\n        emit Transfer(address(this), partner3, SafeMath.div(ownerAmount, 3));\r\n    }\r\n\r\n    // Burn seller's tokens\r\n    function burnToken(uint256 _amount) private {\r\n        // _amount is RAYO\r\n        emit Transfer(\r\n            address(this),\r\n            address(0),\r\n            SafeMath.div(SafeMath.mul(_amount, 994), 1000)\r\n        );\r\n        _totalSupply = _totalSupply.sub(\r\n            SafeMath.div(SafeMath.mul(_amount, 994), 1000)\r\n        );\r\n    }\r\n\r\n    // ICO\r\n    function ICO(uint256 _amount) public payable {\r\n        // _amount is Tether\r\n        require(_msgSender() != address(0), \"Mint to the zero address\");\r\n        require(_amount > 0, \"Amount should be greater than zero.\");\r\n        require(\r\n            token.allowance(_msgSender(), address(this)) >= _amount,\r\n            \"Token allowance not enough\"\r\n        );\r\n        require(\r\n            token.balanceOf(_msgSender()) >= _amount,\r\n            \"Insufficient token balance\"\r\n        );\r\n        require(\r\n            SafeMath.add(_ICOLiquidity, SafeMath.div(_amount, 2)) <=\r\n                SafeMath.mul(500000, 10 ** uint256(_decimals)),\r\n            \"The ICO amount is over the limit (500.000 $).\"\r\n        );\r\n        token.transferFrom(_msgSender(), address(this), _amount);\r\n        mintToken(_msgSender(), SafeMath.div(_amount, 2));\r\n        startICO(SafeMath.div(_amount, 2));\r\n        addAddress();\r\n    }\r\n\r\n    function startICO(uint256 _amount) private {\r\n        uint256 userFrozenAmount = checkFrozen(_amount);\r\n        _tetherFrozenBalances[_msgSender()] = SafeMath.add(\r\n            _tetherFrozenBalances[_msgSender()],\r\n            userFrozenAmount\r\n        );\r\n        _totalFrozen = SafeMath.add(_totalFrozen, userFrozenAmount);\r\n        _tetherBalances[owner()] = SafeMath.add(\r\n            _tetherBalances[owner()],\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function checkFrozen(uint256 _amount) private returns (uint256) {\r\n        uint256 userFrozenAmount;\r\n        uint256 remainAmount = _amount;\r\n        uint256 steps = changeStep(remainAmount);\r\n        while (steps > 0) {\r\n            uint256 firstPartAmount = getFirstPartAmount();\r\n            userFrozenAmount = SafeMath.add(\r\n                userFrozenAmount,\r\n                SafeMath.mul(firstPartAmount, _ICOCoefficient)\r\n            );\r\n            reportsFun(\r\n                \"ICO\",\r\n                _msgSender(),\r\n                firstPartAmount,\r\n                SafeMath.mul(firstPartAmount, _ICOCoefficient)\r\n            );\r\n            _ICOCoefficient = SafeMath.sub(_ICOCoefficient, 1);\r\n            _ICOLiquidity = SafeMath.add(_ICOLiquidity, firstPartAmount);\r\n            remainAmount = SafeMath.sub(remainAmount, firstPartAmount);\r\n            steps = changeStep(remainAmount);\r\n        }\r\n        if (steps == 0) {\r\n            if (remainAmount != 0) {\r\n                userFrozenAmount = SafeMath.add(\r\n                    userFrozenAmount,\r\n                    SafeMath.mul(remainAmount, _ICOCoefficient)\r\n                );\r\n                _ICOLiquidity = SafeMath.add(_ICOLiquidity, remainAmount);\r\n                reportsFun(\r\n                    \"ICO\",\r\n                    _msgSender(),\r\n                    remainAmount,\r\n                    SafeMath.mul(remainAmount, _ICOCoefficient)\r\n                );\r\n            }\r\n        }\r\n        return userFrozenAmount;\r\n    }\r\n\r\n    function changeStep(uint256 _amount) private view returns (uint256) {\r\n        return\r\n            SafeMath.sub(\r\n                uint256(\r\n                    SafeMath.div(\r\n                        SafeMath.add(_ICOLiquidity, _amount),\r\n                        SafeMath.mul(100000, 10 ** uint256(_decimals))\r\n                    )\r\n                ),\r\n                uint256(\r\n                    SafeMath.div(\r\n                        _ICOLiquidity,\r\n                        SafeMath.mul(100000, 10 ** uint256(_decimals))\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getFirstPartAmount() private view returns (uint256) {\r\n        return\r\n            SafeMath.sub(\r\n                SafeMath.mul(\r\n                    SafeMath.add(\r\n                        uint256(\r\n                            SafeMath.div(\r\n                                _ICOLiquidity,\r\n                                SafeMath.mul(100000, 10 ** uint256(_decimals))\r\n                            )\r\n                        ),\r\n                        1\r\n                    ),\r\n                    SafeMath.mul(100000, 10 ** uint256(_decimals))\r\n                ),\r\n                _ICOLiquidity\r\n            );\r\n    }\r\n\r\n    function reportsFun(\r\n        string memory _title,\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 _frozenAmount\r\n    ) internal {\r\n        require(_address != address(0), \"Address should not be zero.\");\r\n        require(_amount > 0, \"Amount must be greater than zero.\");\r\n        reports[_address].push(\r\n            Transaction({\r\n                txType: _title,\r\n                amount: _amount,\r\n                frozenAmount: _frozenAmount,\r\n                time: block.timestamp\r\n            })\r\n        );\r\n    }\r\n\r\n    function addAddress() private {\r\n        bool exists = false;\r\n        for (uint i = 0; i < ICONodes.length; i++) {\r\n            if (ICONodes[i] == _msgSender()) {\r\n                exists = true;\r\n                break;\r\n            }\r\n        }\r\n        if (exists == false) {\r\n            ICONodes.push(_msgSender());\r\n        }\r\n    }\r\n\r\n    // Add projects Profit to liquidity\r\n    function projectsProfit(uint256 _amount) public payable {\r\n        // _amount is Tether\r\n        require(\r\n            token.allowance(_msgSender(), address(this)) >= _amount,\r\n            \"Token allowance is not enough.\"\r\n        );\r\n        require(\r\n            token.balanceOf(_msgSender()) >= _amount,\r\n            \"Insufficient token balance.\"\r\n        );\r\n        require(_amount > 0, \"Amount should be greater than zero.\");\r\n        token.transferFrom(_msgSender(), address(this), _amount);\r\n        _tetherLiquidity = SafeMath.add(\r\n            _tetherLiquidity,\r\n            SafeMath.div(_amount, 2)\r\n        );\r\n        releasICO(SafeMath.div(_amount, 2));\r\n    }\r\n\r\n    function releasICO(uint256 _amount) private {\r\n        uint256 remainShare = _amount;\r\n        uint256 totalShare;\r\n        for (uint i = 0; i < ICONodes.length; i++) {\r\n            uint256 share = SafeMath.div(\r\n                SafeMath.mul(_tetherFrozenBalances[ICONodes[i]], _amount),\r\n                _totalFrozen\r\n            );\r\n            if (share > _tetherFrozenBalances[ICONodes[i]]) {\r\n                share = _tetherFrozenBalances[ICONodes[i]];\r\n            }\r\n            _tetherFrozenBalances[ICONodes[i]] = SafeMath.sub(\r\n                _tetherFrozenBalances[ICONodes[i]],\r\n                share\r\n            );\r\n            _tetherBalances[ICONodes[i]] = SafeMath.add(\r\n                _tetherBalances[ICONodes[i]],\r\n                share\r\n            );\r\n            totalShare = SafeMath.add(totalShare, share);\r\n            if (share != 0) {\r\n                reportsFun(\"Releas ICO\", ICONodes[i], share, 0);\r\n            }\r\n        }\r\n        _totalFrozen = SafeMath.sub(_totalFrozen, totalShare);\r\n        remainShare = SafeMath.sub(_amount, totalShare);\r\n        _tetherBalances[owner()] = SafeMath.add(\r\n            _tetherBalances[owner()],\r\n            remainShare\r\n        );\r\n    }\r\n\r\n    function getUserTransactions(\r\n        address _wallet\r\n    ) public view returns (Transaction[] memory) {\r\n        return reports[_wallet];\r\n    }\r\n\r\n    function getReportsHistory() public view returns (Transaction[] memory) {\r\n        uint256 totalTransactions = 0;\r\n        for (uint256 i = 0; i < ICONodes.length; i++) {\r\n            totalTransactions += reports[ICONodes[i]].length;\r\n        }\r\n\r\n        Transaction[] memory allTransactions = new Transaction[](\r\n            totalTransactions\r\n        );\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = 0; i < ICONodes.length; i++) {\r\n            Transaction[] memory userTransactions = reports[ICONodes[i]];\r\n            for (uint256 j = 0; j < userTransactions.length; j++) {\r\n                allTransactions[currentIndex] = userTransactions[j];\r\n                currentIndex++;\r\n            }\r\n        }\r\n        return allTransactions;\r\n    }\r\n\r\n    // Withdraw Tether\r\n    function withdraw(uint256 _amount) public {\r\n        // _amount is Tether\r\n        require(_amount > 0, \"Amount should be greater than zero.\");\r\n        if (\r\n            _msgSender() != owner() &&\r\n            _msgSender() != partner1 &&\r\n            _msgSender() != partner2 &&\r\n            _msgSender() != partner3\r\n        ) {\r\n            require(\r\n                _tetherBalances[_msgSender()] >= _amount,\r\n                \"Insufficient balance.\"\r\n            );\r\n            _tetherBalances[_msgSender()] = SafeMath.sub(\r\n                _tetherBalances[_msgSender()],\r\n                _amount\r\n            );\r\n            require(\r\n                token.transfer(_msgSender(), _amount),\r\n                \"Token transfer failed\"\r\n            );\r\n        } else {\r\n            uint256 partnerShare = SafeMath.div(_amount, 3);\r\n            require(\r\n                token.transfer(partner1, partnerShare),\r\n                \"Token transfer failed\"\r\n            );\r\n            require(\r\n                token.transfer(partner2, partnerShare),\r\n                \"Token transfer failed\"\r\n            );\r\n            require(\r\n                token.transfer(partner3, partnerShare),\r\n                \"Token transfer failed\"\r\n            );\r\n            _tetherBalances[owner()] = SafeMath.sub(\r\n                _tetherBalances[owner()],\r\n                _amount\r\n            );\r\n        }\r\n    }\r\n\r\n    // Distribute\r\n    function distribute(\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) public payable {\r\n        require(recipients.length == amounts.length, \"Invalid input\");\r\n\r\n        uint256 amountSum = getTotalAmount(amounts);\r\n        require(amountSum > 0, \"Amount must be grather than zero.\");\r\n\r\n        require(\r\n            token.allowance(_msgSender(), address(this)) >= amountSum,\r\n            \"Token allowance not enough\"\r\n        );\r\n        require(\r\n            token.balanceOf(_msgSender()) >= amountSum,\r\n            \"Insufficient token balance\"\r\n        );\r\n        token.transferFrom(_msgSender(), address(this), amountSum);\r\n        distributeDepositAmounts(recipients, amounts, amountSum);\r\n    }\r\n\r\n    function getTotalAmount(\r\n        uint256[] memory amounts\r\n    ) private pure returns (uint256) {\r\n        uint256 amountSum = 0;\r\n        for (uint256 i = 0; i < amounts.length; i++)\r\n            amountSum = SafeMath.add(amountSum, amounts[i]);\r\n        return amountSum;\r\n    }\r\n\r\n    function distributeDepositAmounts(\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        uint256 amountSum\r\n    ) private {\r\n        uint256 shareAmount = 0;\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            address currentRecipient = recipients[i];\r\n            require(\r\n                currentRecipient != address(0),\r\n                \"Invalid recipient address\"\r\n            );\r\n\r\n            uint256 currentAmount = amounts[i];\r\n            require(currentAmount > 0, \"Invalid percentage\");\r\n\r\n            shareAmount = SafeMath.add(shareAmount, currentAmount);\r\n            mintToken(\r\n                currentRecipient,\r\n                SafeMath.div(SafeMath.mul(currentAmount, 2), 10)\r\n            );\r\n            require(\r\n                token.transfer(\r\n                    currentRecipient,\r\n                    SafeMath.div(SafeMath.mul(currentAmount, 8), 10)\r\n                ),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n        if (SafeMath.sub(amountSum, shareAmount) > 0) {\r\n            require(\r\n                token.transfer(\r\n                    _msgSender(),\r\n                    SafeMath.sub(amountSum, shareAmount)\r\n                ),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ICO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfFrozenTether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfTether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getICONodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getICONodesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportsHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Rayo.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Rayo.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"projectsProfit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address3\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tetherLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rayo", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87abe0d1580e4e75ec51dad135ddac5b0b2a29efc826b73f91ed0de395bddf7b"}