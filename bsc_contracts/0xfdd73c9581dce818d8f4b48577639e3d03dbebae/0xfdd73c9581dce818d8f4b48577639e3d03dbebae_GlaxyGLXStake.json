{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract GlaxyGLXStake {\r\n    address[] private owners;\r\n    IBEP20 public token;\r\n    IBEP20 public usdtToken;\r\n    bool public paused;\r\n    uint256 decimals = 18;\r\n    uint256 decimalFactor = 10**uint256(decimals);\r\n    uint256 public minimumRegisterAmount = 5;\r\n\r\n    struct UserInfo {\r\n        bool registered;\r\n    }\r\n    mapping(address => uint256) public withdrawalRequests;\r\n    mapping(address => bool) public withdrawalApprovals;\r\n    mapping(address => uint256) public withdrawalRequestsUSDT;\r\n    mapping(address => bool) public withdrawalApprovalsUSDT;\r\n    mapping(address => uint256) public withdrawalRequestsTOKEN;\r\n    mapping(address => bool) public withdrawalApprovalsTOKEN;\r\n    mapping(address => UserInfo) public users;\r\n    mapping(address => bool) private isOwner;\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n            // Event to signal withdrawal request\r\n    event WithdrawalRequested(address indexed requester, uint256 tokenAmount);\r\n    event WithdrawalRequestedUSDT(address indexed requester, uint256 tokenAmount);\r\n    event WithdrawalRequestedTOKEN(address indexed requester, uint256 tokenAmount);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n         // Modifier to restrict access to owners only\r\n   modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(address _tokenAddress, address _usdtTokenAddress , address[] memory _initialOwners) {\r\n        token = IBEP20(_tokenAddress);\r\n        usdtToken = IBEP20(_usdtTokenAddress);\r\n            for (uint256 i = 0; i < _initialOwners.length; i++) {\r\n            address owner = _initialOwners[i];\r\n            require(owner != address(0), \"Invalid owner address\");\r\n            require(!isOwner[owner], \"Duplicate owner\");\r\n            owners.push(owner);\r\n            isOwner[owner] = true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // Function to transfer ownership\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid new owner address\");\r\n        require(!isOwner[_newOwner], \"Duplicate owner\");\r\n\r\n        address previousOwner = msg.sender;\r\n        isOwner[previousOwner] = false;\r\n        owners.push(_newOwner);\r\n        \r\n        isOwner[_newOwner] = true;\r\n     \r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n\r\n    function setMinRegistrationFees(uint256 _minimumRegisterAmount) public onlyOwner {\r\n        minimumRegisterAmount = _minimumRegisterAmount;\r\n    }\r\n\r\n\r\n    function getTokenBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getUSDTBalance() public view returns (uint256) {\r\n        return usdtToken.balanceOf(address(this));\r\n    }\r\n\r\n    function setPause(bool _value) public onlyOwner {\r\n        paused = _value;\r\n    }\r\n\r\n\r\n    function adminRegister(address adminUsers) external onlyOwner {\r\n            users[adminUsers].registered = true;\r\n    }\r\n\r\n\r\n    function register(uint256 _registrationAmount) external {\r\n        require(_registrationAmount >= minimumRegisterAmount * decimalFactor, \"Minimum Registration amount should be 5$\");\r\n\r\n        uint256 usdtBalance = usdtToken.balanceOf(msg.sender);\r\n        require(usdtBalance >= _registrationAmount, \"Insufficient USDT balance\");\r\n\r\n        bool tokenTransferSuccess = usdtToken.transferFrom( msg.sender, address(this), _registrationAmount);\r\n        require(tokenTransferSuccess, \"Token transfer failed\");\r\n        users[msg.sender].registered = true;\r\n    }\r\n\r\n// Withdraw for users\r\n\r\n     // Function to request a withdrawal\r\n    function requestWithdrawal(uint256 _tokenAmount) external {\r\n        require(!paused, \"Withdraw is paused!\");\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n        require(!frozenAccount[msg.sender], \"Account has been frozen by the admin\");\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        uint256 halfAmount = _tokenAmount / 2 ;\r\n        require(tokenBalance >= halfAmount,\"Insufficient token balance in the contract\");\r\n        require(usdtBalance >= halfAmount,\"Insufficient USDT balance in the contract\");\r\n        withdrawalRequests[msg.sender] = _tokenAmount;\r\n        withdrawalApprovals[msg.sender] = true;\r\n        emit WithdrawalRequested(msg.sender, _tokenAmount);\r\n    }\r\n\r\n\r\n    // Function for admin to approve withdrawal requests\r\nfunction approveWithdrawal(address _requester) external onlyOwner {\r\n    require(withdrawalRequests[_requester] > 0, \"No pending withdrawal request\");\r\n\r\n    uint256 tokenAmount = withdrawalRequests[_requester];\r\n    uint256 halfTokenAmount = tokenAmount / 2;\r\n\r\n    uint256 contractTokenBalance = token.balanceOf(address(this));\r\n    require(contractTokenBalance >= halfTokenAmount, \"Insufficient token balance in the contract\");\r\n    uint256 contractUsdtTokenBalance = usdtToken.balanceOf(address(this));\r\n    require(contractUsdtTokenBalance >= halfTokenAmount, \"Insufficient USDT token balance in the contract\");\r\n\r\n    bool transferSuccess = token.transfer(_requester, halfTokenAmount);\r\n    require(transferSuccess, \"Token transfer failed\");\r\n    bool usdtTransferSuccess = usdtToken.transfer(_requester, halfTokenAmount);\r\n    require(usdtTransferSuccess, \"USDT token transfer failed\");\r\n\r\n    withdrawalRequests[_requester] = 0;\r\n    withdrawalApprovals[_requester] = false;\r\n}\r\n\r\n    // Withdraw With USDT\r\n\r\n         // Function to request a withdrawal\r\n    function requestWithdrawalUSDT(uint256 _tokenAmount) external {\r\n        require(!paused, \"Withdraw is paused!\");\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n        require(!frozenAccount[msg.sender], \"Account has been frozen by the admin\");\r\n        uint256 tokenBalance = usdtToken.balanceOf(address(this));\r\n        require(tokenBalance >= _tokenAmount,\"Insufficient token balance in the contract\");\r\n        withdrawalRequestsUSDT[msg.sender] = _tokenAmount;\r\n        withdrawalApprovalsUSDT[msg.sender] = true;\r\n        emit WithdrawalRequestedUSDT(msg.sender, _tokenAmount);\r\n    }\r\n     // Function for admin to approve withdrawal requests\r\n    function approveWithdrawalUSDT(address _requester) external onlyOwner {\r\n        require(withdrawalRequestsUSDT[_requester] > 0, \"No pending withdrawal request\");\r\n        uint256 tokenAmount = withdrawalRequestsUSDT[_requester];\r\n        bool transferSuccess = usdtToken.transfer(_requester, tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n        withdrawalRequestsUSDT[_requester] = 0;\r\n        withdrawalApprovalsUSDT[_requester] = false;\r\n    }\r\n\r\n\r\n    // Withdraw With Token\r\n\r\n         // Function to request a withdrawal\r\n    function requestWithdrawalTOKEN(uint256 _tokenAmount) external {\r\n        require(!paused, \"Withdraw is paused!\");\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n        require(!frozenAccount[msg.sender], \"Account has been frozen by the admin\");\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance >= _tokenAmount,\"Insufficient token balance in the contract\");\r\n        withdrawalRequestsTOKEN[msg.sender] = _tokenAmount;\r\n        withdrawalApprovalsTOKEN[msg.sender] = true;\r\n        emit WithdrawalRequestedTOKEN(msg.sender, _tokenAmount);\r\n    }\r\n     // Function for admin to approve withdrawal requests\r\n    function approveWithdrawalTOKEN(address _requester) external onlyOwner {\r\n        require(withdrawalRequestsTOKEN[_requester] > 0, \"No pending withdrawal request\");\r\n        uint256 tokenAmount = withdrawalRequestsTOKEN[_requester];\r\n        bool transferSuccess = token.transfer(_requester, tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n        withdrawalRequestsTOKEN[_requester] = 0;\r\n        withdrawalApprovalsTOKEN[_requester] = false;\r\n    } \r\n\r\n\r\n// Withdraw for Admin\r\n    function withdrawTokens(uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(\r\n            tokenBalance >= _tokenAmount,\r\n            \"Insufficient token balance in the contract\"\r\n        );\r\n\r\n        bool transferSuccess = token.transfer(msg.sender, _tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawUSDT(uint256 _usdtAmount) external onlyOwner {\r\n        require(_usdtAmount > 0, \"Invalid USDT amount\");\r\n\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        require(\r\n            usdtBalance >= _usdtAmount,\r\n            \"Insufficient USDT balance in the contract\"\r\n        );\r\n\r\n        bool transferSuccess = usdtToken.transfer(msg.sender, _usdtAmount);\r\n        require(transferSuccess, \"USDT transfer failed\");\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialOwners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequestedTOKEN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequestedUSDT\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminUsers\",\"type\":\"address\"}],\"name\":\"adminRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"approveWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"approveWithdrawalTOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"approveWithdrawalUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRegisterAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationAmount\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalTOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumRegisterAmount\",\"type\":\"uint256\"}],\"name\":\"setMinRegistrationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalApprovalsTOKEN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalApprovalsUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalRequestsTOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalRequestsUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GlaxyGLXStake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b3a0af610ab25632d957e1f6dac323943454250c00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c43fc9808d09de41ac2e5ba9ddc75cf30b048fb20000000000000000000000008f34a321170329c58b02c5102b5566a0777c2d19", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f50529b289a047c908f1ba612d72192bb4c1f6fbaec91dc7937f1252c39edca"}