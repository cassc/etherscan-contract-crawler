{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IAdmin{\r\n\tfunction Admin_isAdmin(address _address) external view returns(bool);\r\n    function Admin_owner_addAdmin(address _address) external;\r\n    function Admin_owner_removeAdmin(address _address) external;\r\n}\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface Iv1_DSE {\r\n\r\n\tfunction DNDEquipments(uint _tokenId) external view returns (\r\n\t\tuint64 prototypeID,\r\n\t\tuint32 level\r\n\t);\r\n\r\n    function equipmentCheck(address _player, uint _tokenId, uint16 _catId) external view;\r\n\r\n\t//\r\n\t\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\tfunction awardEquipment(address player, uint64 _prototypeID, uint32 _EQLevel) external returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\t\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\n\r\nlibrary Math32 {\r\n    function max(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary Math24 {\r\n    function max(uint24 a, uint24 b) internal pure returns (uint24) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint24 a, uint24 b) internal pure returns (uint24) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary Math16 {\r\n    function max(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DseV1{\t\r\n\r\n    struct DseV1_Prototype {\r\n\t\t//v1\r\n        uint16 cat;\r\n        uint16 subcat;\r\n        uint16 element;\r\n        uint32 bp;\r\n        uint16 minLevel;\r\n        uint16 maxLevel;// 14/32\r\n\r\n\t\t//v2\r\n\t\tuint8 rarity;\r\n\t\tuint8 imgtype;\r\n\t\tuint8 version;\r\n\t\tuint16 lpRequired;\r\n    }\r\n\r\n\tfunction DseV1_fromBytes32(bytes32 b32) internal pure returns(DseV1_Prototype memory){\r\n\t\tuint u=uint(b32);\r\n        return DseV1_Prototype(\r\n\t\t\tuint16(u >> (256-16)),\r\n\t\t\tuint16(u >> (256-32)),\r\n\t\t\tuint16(u >> (256-48)),\r\n\t\t\tuint32(u >> (256-80)),\r\n\t\t\tuint16(u >> (256-96)),\r\n\t\t\tuint16(u >> (256-112)),\r\n\r\n\t\t\tuint8(u >> (256-120)),\r\n\t\t\tuint8(u >> (256-128)),\r\n\t\t\tuint8(u >> (256-136)),\r\n\t\t\tuint16(u >> (256-152))\r\n        );\r\n\t}\r\n\r\n\tfunction DseV1_toBytes32(\r\n\t   DseV1_Prototype memory p1\r\n\t) internal pure returns(bytes32){\r\n\t\treturn bytes32(abi.encodePacked(p1.cat,p1.subcat,p1.element,p1.bp,p1.minLevel,p1.maxLevel,p1.\r\n\t\t\trarity,p1.imgtype,p1.version,p1.lpRequired));\r\n\t}\r\n\r\n\tfunction DseV1_varToBytes32(\r\n\t    uint16 cat,\r\n        uint16 subcat,\r\n        uint16 element,\r\n        uint32 bp,\r\n        uint16 minLevel,\r\n        uint16 maxLevel,\r\n\r\n\t\tuint8 rarity,\r\n\t\tuint8 imgtype,\r\n\t\tuint8 version,\r\n\t\tuint16 lpRequired\r\n\t) internal pure returns(bytes32){\r\n\t\treturn bytes32(abi.encodePacked(cat,subcat,element,bp,minLevel,maxLevel,\r\n\t\t\trarity,imgtype,version,lpRequired));\r\n\t}\r\n\r\n}\r\n\r\n//V2\r\nabstract contract DseV2{\r\n    struct DseV2_Prototype {\r\n\r\n\t\tint8 scoreBoost;\r\n\t\tint8 rewardBoost;\r\n\r\n\t\tint8 hp;\r\n\t\tint8 mp;\r\n\t\tint8 hpRecover;\r\n\t\tint8 mpRecover;\r\n\r\n\t\tint8 atk;\r\n\t\tint8 def;\r\n\t\tint8 agi;\r\n\t\tint8 iq;\r\n\t\tint8 lck;\r\n\r\n\t\tint8 drink;\r\n\t\tint8 drinkEffect;\r\n\r\n\t\tint8 boostElement;\r\n\t\tint8 boostElementPoint;\r\n\t\tint8 boostWeapon;\r\n\t\tint8 boostWeaponPoint;\r\n\t\t\r\n\t\tint8 boostStatus;\r\n\t\tint8 boostStatusPoint;\r\n\r\n\t\tint8 element;\r\n    }\r\n\r\n\tfunction DseV2_fromBytes32(bytes32 b32) internal pure returns(DseV2_Prototype memory){\r\n\t\tuint u=uint(b32);\r\n\t\tuint8 i=1;\r\n\t\tunchecked{\r\n        return DseV2_Prototype(\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++))),\r\n\t\t\tint8(uint8(u >> (256-8*i++)))\r\n        );\r\n\t\t}\r\n\t}\r\n\r\n\tfunction DseV2_toBytes32(\r\n\t    DseV2_Prototype memory p2\r\n\t) internal pure returns(bytes32){\r\n\t\treturn bytes32(\r\n\t\t    abi.encodePacked(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tp2.scoreBoost,p2.rewardBoost,p2.hp,p2.mp,p2.hpRecover,\r\n\t\t\t\t\tp2.mpRecover,p2.atk,p2.def,p2.agi,p2.iq\r\n\t\t\t\t),\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tp2.lck,p2.drink,p2.drinkEffect,p2.boostElement,p2.boostElementPoint,\r\n\t\t\t\t\tp2.boostWeapon,p2.boostWeaponPoint,p2.boostStatus,p2.boostStatusPoint,p2.element\r\n\t\t\t\t)\r\n\t\t    )\r\n\t\t);\r\n\t}\r\n\r\n\tfunction DseV2_varToBytes32(\r\n\t    int8[20] memory arrs\r\n\t) internal pure returns(bytes32){\r\n\t    uint8 i=0;\r\n\t\treturn bytes32(\r\n\t\t    abi.encodePacked(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tarrs[i++],arrs[i++],arrs[i++],arrs[i++],arrs[i++],\r\n\t\t\t\t\tarrs[i++],arrs[i++],arrs[i++],arrs[i++],arrs[i++]),\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tarrs[i++],arrs[i++],arrs[i++],arrs[i++],arrs[i++],\r\n\t\t\t\t\tarrs[i++],arrs[i++],arrs[i++],arrs[i++],arrs[i++]\r\n\t\t\t\t)\r\n\t\t    )\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n//relic\r\nabstract contract Relic{\r\n\r\n\tuint24 private constant PERCENT_MODULUS = 1000000;\r\n\r\n    struct RelicDetail {\r\n\t\t\tuint16 usedTimes;\r\n\t\t\tuint32 lastTimeUsed;\r\n\t\t\tuint8 currStamina;\r\n\t\tuint8 maxStamina;\r\n\t\r\n\t\tuint16 currFreezeMinute;\r\n\t\tuint16 maxFreezeMinute;//12\r\n\t\t\r\n\t\tuint24 freezePowerRate;\r\n\t\tuint24 freezeRate_b;\r\n\t\tuint24 freezeRate_c;\r\n\r\n\t\tuint24 currScorePower;\r\n\t\tuint24 scorePowerRate;\r\n\t\tuint24 scorePowerLimit;\r\n    }\r\n\r\n\tfunction Relic_fromBytes32(bytes32 b32) internal pure returns(RelicDetail memory){\r\n\t\tuint i=0;\r\n\t\tuint[12] memory nums=[uint(16),32,8,8,16,16,24,24,24,24,24,24];\r\n\t\tuint k=256;\r\n\t\tfor(;i<nums.length;i++){\r\n\t\t\tk-=nums[i];\r\n\t\t\tnums[i]=k;\r\n\t\t}\r\n\r\n\t\tuint u=uint(b32);\r\n        return RelicDetail(\r\n\t\t\tuint16(u >> nums[0]),\r\n\t\t\tuint32(u >> nums[1]),\r\n\t\t\tuint8(u >> nums[2]),\r\n\t\t\tuint8(u >> nums[3]),\r\n\t\t\tuint16(u >> nums[4]),\r\n\t\t\tuint16(u >> nums[5]),\r\n\t\t\tuint24(u >> nums[6]),\r\n\t\t\tuint24(u >> nums[7]),\r\n\t\t\tuint24(u >> nums[8]),\r\n\t\t\tuint24(u >> nums[9]),\r\n\t\t\tuint24(u >> nums[10]),\r\n\t\t\tuint24(u >> nums[11])\r\n        );\r\n\t}\r\n\r\n\tfunction Relic_toBytes32(\r\n\t    RelicDetail memory rd\r\n\t) internal pure returns(bytes32){\r\n\t\treturn bytes32(abi.encodePacked(\r\n\t\t\trd.usedTimes,\r\n\t\t\trd.lastTimeUsed,\r\n\t\t\trd.currStamina,\r\n\t\t\trd.maxStamina,\r\n\t\t\trd.currFreezeMinute,\r\n\t\t\trd.maxFreezeMinute,\r\n\t\t\trd.freezePowerRate,\r\n\t\t\trd.freezeRate_b,\r\n\t\t\trd.freezeRate_c,\r\n\t\t\trd.currScorePower,\r\n\t\t\trd.scorePowerRate,\r\n\t\t\trd.scorePowerLimit\r\n\t\t));\r\n\t}\r\n\r\n\tfunction Relic_varToBytes32(\r\n\t\tuint16 _usedTimes,\r\n\t\tuint32 _lastTimeUsed,\r\n\t\tuint8 _currStamina,\r\n\t\tuint8 _maxStamina,\r\n\t\tuint16 _currFreezeMinute,\r\n\t\tuint16 _maxFreezeMinute,\r\n\t\tuint24 _freezePowerRate,\r\n\t\tuint24 _freezeRate_b,\r\n\t\tuint24 _freezeRate_c,\r\n\t\tuint24 _currScorePower,\r\n\t\tuint24 _scorePowerRate,\r\n\t\tuint24 _scorePowerLimit\r\n\t) internal pure returns(bytes32){\r\n\t\treturn bytes32(abi.encodePacked(\r\n\t\t\t_usedTimes,\r\n\t\t\t_lastTimeUsed,\r\n\t\t\t_currStamina,\r\n\t\t\t_maxStamina,\r\n\t\t\t_currFreezeMinute,\r\n\t\t\t_maxFreezeMinute,\r\n\t\t\t_freezePowerRate,\r\n\t\t\t_freezeRate_b,\r\n\t\t\t_freezeRate_c,\r\n\t\t\t_currScorePower,\r\n\t\t\t_scorePowerRate,\r\n\t\t\t_scorePowerLimit\r\n\t\t));\r\n\t}\r\n\r\n\tfunction Relic_consume(RelicDetail memory _re) internal view returns (RelicDetail memory re) {\r\n\t\tre=_re;\r\n\r\n\t\trequire(re.currStamina>0 || uint(re.lastTimeUsed) + 60*uint(re.currFreezeMinute) < block.timestamp,\"freezing\");\r\n\r\n\t\t//change on each use\r\n\t\tre.usedTimes++;\r\n\t\tre.lastTimeUsed = uint32(block.timestamp);\r\n\r\n\t\t//Stamina\r\n\t\tif(re.currStamina==0){\r\n\t\t\tre.currStamina=re.maxStamina;\r\n\t\t}\r\n\t\tre.currStamina--;\r\n\r\n\t\t//Freeze\r\n\t\tif(re.currStamina==0){\r\n\t\t\tif((re.usedTimes/re.maxStamina)>re.freezeRate_c){\r\n\t\t\t\tre.currFreezeMinute=re.maxFreezeMinute;\r\n\t\t\t}else{\r\n\t\t\t\tuint16 newFreeze=uint16( (uint(re.currFreezeMinute)*uint(re.freezePowerRate))/PERCENT_MODULUS )+uint16(re.freezeRate_b);\r\n\t\t\t\tre.currFreezeMinute=Math16.min(re.maxFreezeMinute,newFreeze);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//power\r\n\t\tif(re.currScorePower!=0 && uint(re.scorePowerRate)!=PERCENT_MODULUS){\r\n\t\t\tre.currScorePower=uint24( (uint(re.currScorePower) * uint(re.scorePowerRate))/PERCENT_MODULUS );\r\n\t\t\tif(re.scorePowerRate>PERCENT_MODULUS){\r\n\t\t\t\tre.currScorePower=Math24.min(re.currScorePower,re.scorePowerLimit);\r\n\t\t\t}else{\r\n\t\t\t\tre.currScorePower=Math24.max(re.currScorePower,re.scorePowerLimit);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn re;\r\n    }\r\n}\r\n\r\nabstract contract Admin is IAdmin{\r\n\t\r\n    event AddAdmin(address indexed user);\r\n    event RemoveAdmin(address indexed user);\r\n    \r\n\t//owner\r\n\r\n\taddress owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner=msg.sender;\r\n\t\tadmin[msg.sender]=true;\r\n    }\r\n\r\n\t//admin\r\n\r\n\tmapping(address => bool) internal admin;\r\n\r\n    function Admin_isAdmin(address _address) override external view onlyOwner returns(bool) {\r\n\t\treturn admin[_address];\r\n    }\r\n\t\r\n    modifier onlyAdmin() {\r\n        require(admin[ msg.sender], \"caller is not a admin\");\r\n        _;\r\n    }\r\n\r\n    function Admin_owner_addAdmin(address _address) override external onlyOwner {\r\n\t\tadmin[_address]=true;\r\n        emit AddAdmin(msg.sender);\r\n    }\r\n\r\n    function Admin_owner_removeAdmin(address _address) override external onlyOwner {\r\n\t\tdelete admin[_address];\r\n        emit RemoveAdmin(msg.sender);\r\n    }\r\n}\r\nabstract contract Meta is Admin {\r\n\t\r\n    mapping (bytes32 => bytes32) public MetaList;\r\n    bytes32[] public MetaKeyList;\r\n\t\r\n\tfunction Meta_admin_setMeta(bytes32 key, bytes32 value) public onlyAdmin {\r\n\t\tif(MetaList[key]==bytes32(0)){\r\n\t\t\tMetaKeyList.push(key);\r\n\t\t}\r\n\t\tMetaList[key]=value;\r\n\t}\r\n\r\n\tfunction Meta_admin_setMetas(bytes32[] calldata keys, bytes32[] calldata values) public onlyAdmin {\r\n\t\trequire(keys.length==values.length);\r\n\t\tfor(uint i=0;i<keys.length;i++){\r\n\t\t\tif(MetaList[keys[i]]==bytes32(0)){\r\n\t\t\t\tMetaKeyList.push(keys[i]);\r\n\t\t\t}\r\n\t\t\tMetaList[keys[i]]=values[i];\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract v2_DSE is ERC721Enumerable,ERC721Holder, Admin {\r\n\t\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\t//Detail\r\n\r\n    struct Detail {\r\n        uint64 prototypeID;\r\n        uint32 level;\r\n\t\tbool transferLock;\r\n        uint32 lastTransferBlock;\r\n\r\n        uint32 times;\r\n        uint64 exp;\r\n    }\r\n\r\n    mapping (uint => Detail) public DetailList;\r\n\t\r\n    function admin_setDetail(uint _tokenID, uint64 _prototypeID, uint32 _level, uint32 _times, uint64 _exp) public onlyAdmin {\r\n\t\tDetail memory d=DetailList[_tokenID];\r\n\t\td.prototypeID=_prototypeID;\r\n\t\td.level=_level;\r\n\t\td.times=_times;\r\n\t\td.exp=_exp;\r\n\t\tDetailList[_tokenID]=d;\r\n\t}\r\n\t\r\n    function admin_awardDetail(address _player, uint64 _prototypeID, uint32 _level, uint32 _times) public onlyAdmin returns (uint) {\r\n\t\tuint _tokenID=award(_player);\r\n        admin_setDetail(_tokenID, _prototypeID, _level, _times,0);\r\n\t\treturn _tokenID;\r\n\t}\r\n\r\n\t//override with detail===========\r\n\r\n\tuint internal TransferBlockLock=1200*4;\r\n\r\n\tEnumerableSet.AddressSet internal transferWhiteList;\r\n\r\n    function owner_setTransferBlockLock(uint _blockNum) public onlyOwner{\r\n\t\tTransferBlockLock=_blockNum;\r\n\t}\r\n\r\n    function owner_addTransferWhiteList(address _contract) public onlyOwner{\r\n\t\ttransferWhiteList.add(_contract);\r\n\t}\r\n\t\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual override {\r\n\t\tsuper._beforeTokenTransfer(from,to,tokenId);\r\n\t\trequire(DetailList[tokenId].prototypeID==0 || !DetailList[tokenId].transferLock,\"token locked\");\r\n\r\n\t\tif(DetailList[tokenId].lastTransferBlock>0 && !transferWhiteList.contains(from) && !transferWhiteList.contains(to)){\r\n\t\t\trequire(uint(DetailList[tokenId].lastTransferBlock)+TransferBlockLock<block.number,\"token time lock\");\r\n\t\t\tDetailList[tokenId].lastTransferBlock=uint32(block.number);\r\n\t\t}\r\n\t}\r\n\r\n    function _burn(uint tokenId) internal override {\r\n\t\tdelete DetailList[tokenId];\r\n\t\tsuper._burn(tokenId);\r\n    }\r\n\r\n    function _baseURI() internal pure override returns (string memory) {\r\n        return \"https://dse.dungeonswap.app/\";\r\n    }\r\n\r\n\t//method\r\n\r\n    function admin_setLock(uint _tokenID, bool _lock) public onlyAdmin {\r\n        DetailList[_tokenID].transferLock=_lock;\r\n\t}\r\n\r\n\tfunction multiCheck(address _owner,uint[] calldata tokenIds) public view {\r\n\t\tfor(uint i=0;i<tokenIds.length;i++){\r\n\t\t\trequire(_owner==ownerOf(tokenIds[i]),\"owner error\");\r\n\t\t}\r\n\t}\r\n\r\n\t//v1===============\r\n\t\r\n\tuint internal _tokenIds;\r\n\tuint internal constant start_id=200000000;\r\n\tuint internal constant v1tov2_id=100000000;\r\n\r\n\tIv1_DSE internal DSEV1;\r\n\t\r\n    constructor(address _dseV1Address) ERC721(\"DungeonSwap Equipment v2\", \"DSE2\") Admin() {\r\n\t\t_tokenIds=start_id;\r\n\t\tDSEV1=Iv1_DSE(_dseV1Address);\r\n\t\towner_addTransferWhiteList(_dseV1Address);\r\n    }\r\n\r\n    function isV1(uint v1Id) internal pure returns (bool) {\r\n\t\treturn v1Id<v1tov2_id;\r\n\t}\r\n\r\n    function V1toV2(uint v1Id,address from,address to) public returns (uint) {\r\n\t\trequire(isV1(v1Id),\"id error\");\r\n\t\trequire(admin[msg.sender] || from==msg.sender,\"no permission\");\r\n\t\trequire(from==DSEV1.ownerOf(v1Id),\"you not own this v1\");\r\n\t\t(uint64 prototypeID,uint32 level)=DSEV1.DNDEquipments(v1Id);\r\n\t\tDSEV1.safeTransferFrom(from,address(this),v1Id);\r\n\t\tuint newId=v1Id+v1tov2_id;\r\n        _mint(to, newId);\r\n\t\tadmin_setDetail(newId,prototypeID,level,0,0);\r\n\t\treturn newId;\r\n\t}\r\n\r\n\t//erc721============================\r\n\t\r\n\tuint8 public constant decimals = 0;\r\n\t\r\n    function award(address _player) internal returns (uint) {\r\n        _tokenIds+=1;\r\n        _mint(_player, _tokenIds);\r\n        return _tokenIds;\r\n    }\r\n\t\r\n    function admin_burn(uint tokenId) public onlyAdmin {\r\n\t\t_burn(tokenId);\r\n    }\r\n\t\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\ncontract MetaDse is v2_DSE,Meta,Relic,DseV1,DseV2 {\r\n\r\n\tconstructor(address _dseV1Address) v2_DSE(_dseV1Address) {\r\n\t\t\r\n\t}\r\n\r\n\tusing Math32 for uint32;\r\n\tusing Math24 for uint24;\r\n\tusing Math16 for uint16;\r\n\t\r\n\t//V1 set====\r\n\r\n\tfunction owner_setPrototypeV1(\r\n\t\tuint64 _prototypeID,\r\n\t\tbytes32 b32\r\n\t) public onlyOwner {\r\n\t\tMeta_admin_setMeta(\r\n\t\t\tkeccak256(abi.encodePacked(\"prototypeV1_\", _prototypeID)),\r\n\t\t\tb32\r\n\t\t);\r\n\t}\r\n\t\r\n\t//V1 view====\r\n\t\r\n\tfunction getProtoV1B32(uint64 _prototypeID) public view returns(bytes32){\r\n\t\treturn MetaList[keccak256(abi.encodePacked(\"prototypeV1_\", _prototypeID))];\r\n\t}\r\n\t\r\n\tfunction getProtoMetaV1(uint64 _prototypeID) internal view returns(DseV1_Prototype memory){\r\n\t\treturn DseV1_fromBytes32(getProtoV1B32(_prototypeID));\r\n\t}\r\n\t\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\t//V2 set====\r\n\r\n\tfunction owner_setPrototypeV2(\r\n\t\tuint64 _prototypeID,\r\n\t\tbytes32 b32\r\n\t) public onlyOwner {\r\n\t\tMeta_admin_setMeta(\r\n\t\t\tkeccak256(abi.encodePacked(\"prototypeV2_\", _prototypeID)),\r\n\t\t\tb32\r\n\t\t);\r\n\t}\r\n\r\n\tfunction admin_setInstanceV2(\r\n\t\tuint32 _tokenID,\r\n\t\tbytes32 b32\r\n\t) public onlyAdmin {\r\n\t\tMeta_admin_setMeta(\r\n\t\t\tkeccak256(abi.encodePacked(\"dseV2_\", _tokenID)),\r\n\t\t\tb32\r\n\t\t);\r\n\t}\r\n\r\n\t//V2 view====\r\n\t\r\n\tfunction getProtoV2B32(uint64 _prototypeID) public view returns(bytes32){\r\n\t\treturn MetaList[keccak256(abi.encodePacked(\"prototypeV2_\", _prototypeID))];\r\n\t}\r\n\t\r\n\tfunction getInstanceV2B32(uint32 _tokenID) public view returns(bytes32){\r\n\t\treturn MetaList[keccak256(abi.encodePacked(\"dseV2_\", _tokenID))];\r\n\t}\r\n\r\n\tfunction getProtoMetaV2(uint64 _prototypeID) internal view returns(DseV2_Prototype memory){\r\n\t\treturn DseV2_fromBytes32(getProtoV2B32(_prototypeID));\r\n\t}\r\n\t\r\n\tfunction getInstanceMetaV2(uint32 _tokenID) internal view returns(DseV2_Prototype memory){\r\n\t\treturn DseV2_fromBytes32(getInstanceV2B32(_tokenID));\r\n\t}\r\n\r\n\r\n\r\n    function admin_consumeRelic(uint32 _tokenId) public onlyAdmin returns (uint32) {\r\n\t\tRelicDetail memory re=Relic_consume(getRelic(_tokenId));\r\n\r\n\t\tadmin_setRelic(_tokenId,Relic_toBytes32(re));\r\n\r\n\t\treturn uint32(re.currScorePower);\r\n    }\r\n\r\n\t//set Relic\r\n\r\n\tfunction admin_setRelic(\r\n\t\tuint32 _tokenID,\r\n\t\tbytes32 b32\r\n\t) public onlyAdmin {\r\n\t\tMeta_admin_setMeta(\r\n\t\t\tkeccak256(abi.encodePacked(\"relic_\", _tokenID)),\r\n\t\t\tb32\r\n\t\t);\r\n\t}\r\n    \r\n    \r\n\t//view Relic\r\n\r\n\tfunction getRelicB32(\r\n\t\tuint32 _tokenID\r\n\t) public view returns(bytes32){\r\n\t\treturn MetaList[keccak256(abi.encodePacked(\"relic_\", _tokenID))];\r\n\t}\r\n\r\n\t\r\n\tfunction getRelic(\r\n\t\tuint32 _tokenID\r\n\t) internal view returns(RelicDetail memory){\r\n\t\treturn Relic_fromBytes32(getRelicB32(_tokenID));\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n\r\n \r\n\r\n\t//multiCheckDetail===============\r\n\r\n\tfunction multiCheckDetailV1(address _player,uint32[] calldata _tokenIDs) public view returns(uint16[] memory elements,uint32[] memory powers) {\r\n\t\tuint len=_tokenIDs.length;\r\n\t\trequire(len<=4,\"num error\");\r\n\t\tuint64 prototypeID;\r\n\t\tuint32 level;\r\n\t\telements=new uint16[](len);\r\n\t\tpowers=new uint32[](len);\r\n\t\tbool[] memory cats=new bool[](4);\r\n\t\tfor(uint i=0;i<len;i++){\r\n\t\t\tif(_tokenIDs[i]==0)continue;\r\n\t\t\tif(isV1(_tokenIDs[i])){//v1\r\n\t\t\t\trequire(DSEV1.ownerOf(uint(_tokenIDs[i]))==_player);\r\n\t\t\t\t(prototypeID,level)=DSEV1.DNDEquipments(uint(_tokenIDs[i]));\r\n\t\t\t}else{//v2\r\n\t\t\t\trequire(ownerOf(uint(_tokenIDs[i]))==_player);\r\n\t\t\t\tprototypeID=DetailList[uint(_tokenIDs[i])].prototypeID;\r\n\t\t\t\tlevel=DetailList[uint(_tokenIDs[i])].level;\r\n\t\t\t}\r\n\t\t\tDseV1_Prototype memory pv1=getProtoMetaV1(prototypeID);\r\n\t\t\trequire(!cats[pv1.cat-1],\"cat error\");\r\n\t\t\tcats[pv1.cat-1]=true;\r\n\t\t\t\r\n\t\t\telements[i]=pv1.element;\r\n\t\t\tpowers[i]=pv1.bp*level;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n    function multiCheckDetailV2(address _player,uint32[] calldata _tokenIDs) public view returns (uint32[] memory,bytes32[] memory,bytes32[] memory,bytes32[] memory){\r\n\t\tuint len=_tokenIDs.length;\r\n\t\trequire(len>1 && len<=8,\"must within 1~8\");\r\n\t\t\r\n\t\tuint32[] memory levels=new uint32[](len);\r\n\t\tbytes32[] memory prototypeV1=new bytes32[](len);\r\n\t\tbytes32[] memory prototypeV2=new bytes32[](len);\r\n\t\tbytes32[] memory instanceV2=new bytes32[](len);\r\n\r\n\r\n\t\tfor(uint i=0;i<len;i++){\r\n\t\t\tif(_tokenIDs[i]>0){\r\n\t\t\t\tuint64 _prototypeID;\r\n\r\n\t\t\t\t//v2\r\n\t\t\t\tif(_tokenIDs[i]>=v1tov2_id){\r\n\t\t\t\t\trequire(ownerOf(uint(_tokenIDs[i]))==_player);\r\n\t\t\t\t\t_prototypeID=DetailList[uint(_tokenIDs[i])].prototypeID;\r\n\t\t\t\t\tlevels[i]=DetailList[uint(_tokenIDs[i])].level;\r\n\t\t\t\t}else{//v1\r\n\t\t\t\t\trequire(DSEV1.ownerOf(uint(_tokenIDs[i]))==_player);\r\n\t\t\t\t\t(_prototypeID,levels[i])=DSEV1.DNDEquipments(uint(_tokenIDs[i]));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//get meta\r\n\t\t\t\tif(_prototypeID>0){\r\n\t\t\t\t\tprototypeV1[i]=getProtoV1B32(_prototypeID);\r\n\t\t\t\t\tprototypeV2[i]=getProtoV2B32(_prototypeID);\r\n\t\t\t\t\tinstanceV2[i]=getInstanceV2B32(_tokenIDs[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//check v1\r\n\t\treturn (levels,prototypeV1,prototypeV2,instanceV2);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dseV1Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Admin_isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Admin_owner_addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Admin_owner_removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DetailList\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"prototypeID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"level\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"lastTransferBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"times\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"exp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MetaKeyList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"MetaList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"Meta_admin_setMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"name\":\"Meta_admin_setMetas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"V1toV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_prototypeID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_times\",\"type\":\"uint32\"}],\"name\":\"admin_awardDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"admin_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"admin_consumeRelic\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_prototypeID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_times\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_exp\",\"type\":\"uint64\"}],\"name\":\"admin_setDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenID\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"b32\",\"type\":\"bytes32\"}],\"name\":\"admin_setInstanceV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"admin_setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenID\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"b32\",\"type\":\"bytes32\"}],\"name\":\"admin_setRelic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenID\",\"type\":\"uint32\"}],\"name\":\"getInstanceV2B32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_prototypeID\",\"type\":\"uint64\"}],\"name\":\"getProtoV1B32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_prototypeID\",\"type\":\"uint64\"}],\"name\":\"getProtoV2B32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenID\",\"type\":\"uint32\"}],\"name\":\"getRelicB32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"multiCheck\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_tokenIDs\",\"type\":\"uint32[]\"}],\"name\":\"multiCheckDetailV1\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"elements\",\"type\":\"uint16[]\"},{\"internalType\":\"uint32[]\",\"name\":\"powers\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_tokenIDs\",\"type\":\"uint32[]\"}],\"name\":\"multiCheckDetailV2\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"owner_addTransferWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_prototypeID\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"b32\",\"type\":\"bytes32\"}],\"name\":\"owner_setPrototypeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_prototypeID\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"b32\",\"type\":\"bytes32\"}],\"name\":\"owner_setPrototypeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"owner_setTransferBlockLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaDse", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000455d4b2c4b4b3e50b3c3d9f8160956aa1d32936d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56b81c1ea9f897c53e0ada896618d845be20176f42be290a8abe3a14a8352fb3"}