{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DividendDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './interfaces/IDividendDistributor.sol';\\n\\ncontract DividendDistributor is IDividendDistributor, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address _token;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    address[] shareholders;\\n    mapping(address => uint256) shareholderIndexes;\\n    mapping(address => uint256) shareholderClaims;\\n\\n    mapping(address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 1e36;\\n\\n    uint256 public minPeriod = 1 hours;\\n    uint256 public minDistribution = 1e18;\\n\\n    uint256 currentIndex;\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token);\\n        _;\\n    }\\n\\n    constructor() {\\n        _token = msg.sender;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\\n        if (shares[shareholder].amount > 0) {\\n            distributeDividend(shareholder);\\n        }\\n\\n        if (amount > 0 && shares[shareholder].amount == 0) {\\n            addShareholder(shareholder);\\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n    }\\n\\n    function deposit() external payable override onlyToken {\\n        totalDividends = totalDividends.add(msg.value);\\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(msg.value).div(totalShares));\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if (shareholderCount == 0) {\\n            return;\\n        }\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n\\n            if (shouldDistribute(shareholders[currentIndex])) {\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n\\n    function shouldDistribute(address shareholder) internal view returns (bool) {\\n        return\\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\\n            getUnpaidEarnings(shareholder) > minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) internal {\\n        if (shares[shareholder].amount == 0) {\\n            return;\\n        }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if (amount > 0) {\\n            totalDistributed = totalDistributed.add(amount);\\n            TransferHelper.safeTransferETH(shareholder, amount);\\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n        }\\n    }\\n\\n    function claimDividend() external nonReentrant {\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\\n        if (shares[shareholder].amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n\\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\\n            return 0;\\n        }\\n\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\n    }\\n\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ShipDividendDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IShipTicketNFT.sol';\\nimport './interfaces/IShipDividendDistributor.sol';\\n\\ncontract ShipDividendDistributor is IShipDividendDistributor, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 ECONOMY = 0;\\n    uint256 BUSINESS = 1;\\n\\n    address _token;\\n\\n    IERC20 token;\\n    IShipTicketNFT economyTicketNFT;\\n    IShipTicketNFT businessTicketNFT;\\n\\n    struct Share {\\n        uint256 totalRealised;\\n        uint256 dividendsDebt;\\n        bool validated;\\n    }\\n\\n    struct ShareInfo {\\n        uint256 totalShares;\\n        uint256 totalDividends;\\n        uint256 totalDistributed;\\n        uint256 dividendsPerShare;\\n    }\\n\\n    mapping(uint256 => Share) public economyShares;\\n    ShareInfo public economyShareInfo;\\n\\n    mapping(uint256 => Share) public businessShares;\\n    ShareInfo public businessShareInfo;\\n\\n    uint256 public dividendsPerShareAccuracyFactor = 1e6;\\n    uint256 totalDistributed;\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token);\\n        _;\\n    }\\n\\n    constructor(address _economyTicketNFT, address _businessTicketNFT) {\\n        _token = msg.sender;\\n\\n        token = IERC20(_token);\\n        economyTicketNFT = IShipTicketNFT(_economyTicketNFT);\\n        businessTicketNFT = IShipTicketNFT(_businessTicketNFT);\\n\\n        economyShareInfo = ShareInfo({\\n            totalShares: economyTicketNFT.totalSupply(),\\n            totalDividends: 0,\\n            totalDistributed: 0,\\n            dividendsPerShare: 0\\n        });\\n        businessShareInfo = ShareInfo({\\n            totalShares: businessTicketNFT.totalSupply(),\\n            totalDividends: 0,\\n            totalDistributed: 0,\\n            dividendsPerShare: 0\\n        });\\n    }\\n\\n    function deposit(uint256 _economyAmount, uint256 _businessAmount) external override onlyToken {\\n        uint256 totalShares;\\n        uint256 dividendsPerShare;\\n\\n        if (_economyAmount > 0) {\\n            totalShares = economyTicketNFT.totalSupply();\\n            if (totalShares > 0) {\\n                dividendsPerShare = economyShareInfo.dividendsPerShare.add(\\n                    _economyAmount.mul(dividendsPerShareAccuracyFactor).div(totalShares)\\n                );\\n                economyShareInfo.totalShares = totalShares;\\n                economyShareInfo.totalDividends = economyShareInfo.totalDividends.add(_economyAmount);\\n                economyShareInfo.dividendsPerShare = dividendsPerShare;\\n            }\\n        }\\n\\n        if (_businessAmount > 0) {\\n            totalShares = businessTicketNFT.totalSupply();\\n            if (totalShares > 0) {\\n                dividendsPerShare = businessShareInfo.dividendsPerShare.add(\\n                    _businessAmount.mul(dividendsPerShareAccuracyFactor).div(totalShares)\\n                );\\n                businessShareInfo.totalShares = totalShares;\\n                businessShareInfo.totalDividends = businessShareInfo.totalDividends.add(_businessAmount);\\n                businessShareInfo.dividendsPerShare = dividendsPerShare;\\n            }\\n        }\\n    }\\n\\n    function validateEconomyTicket(uint256 ticketId) public {\\n        require(economyTicketNFT.ownerOf(ticketId) != address(0), 'ShipDividendDistributor: Invalid ticketId');\\n\\n        if (economyShares[ticketId].validated == true) {\\n            return;\\n        }\\n        economyShares[ticketId].validated = true;\\n        economyShares[ticketId].dividendsDebt = economyShareInfo.dividendsPerShare;\\n    }\\n\\n    function claimEconomyDividend(uint256 ticketId) external nonReentrant {\\n        require(msg.sender == economyTicketNFT.ownerOf(ticketId), 'ShipDividendDistributor: Invalid ticketId');\\n\\n        uint256 amount = getEconomyUnpaidEarnings(ticketId);\\n        if (amount > 0) {\\n            totalDistributed = totalDistributed.add(amount);\\n            economyShareInfo.totalDistributed = economyShareInfo.totalDistributed.add(amount);\\n            economyShares[ticketId].totalRealised = economyShares[ticketId].totalRealised.add(amount);\\n            economyShares[ticketId].dividendsDebt = economyShareInfo.dividendsPerShare;\\n            token.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function getEconomyUnpaidEarnings(uint256 ticketId) public view returns (uint256) {\\n        if (economyShares[ticketId].validated != true) {\\n            return 0;\\n        }\\n\\n        return\\n            economyShareInfo.dividendsPerShare.sub(economyShares[ticketId].dividendsDebt).div(\\n                dividendsPerShareAccuracyFactor\\n            );\\n    }\\n\\n    function validateBusinessTicket(uint256 ticketId) public {\\n        require(businessTicketNFT.ownerOf(ticketId) != address(0), 'ShipDividendDistributor: Invalid ticketId');\\n\\n        if (businessShares[ticketId].validated == true) {\\n            return;\\n        }\\n        businessShares[ticketId].validated = true;\\n        businessShares[ticketId].dividendsDebt = businessShareInfo.dividendsPerShare;\\n    }\\n\\n    function claimBusinessDividend(uint256 ticketId) external nonReentrant {\\n        require(msg.sender == businessTicketNFT.ownerOf(ticketId), 'ShipDividendDistributor: Invalid ticketId');\\n\\n        uint256 amount = getBusinessUnpaidEarnings(ticketId);\\n        if (amount > 0) {\\n            businessShareInfo.totalDistributed = businessShareInfo.totalDistributed.add(amount);\\n            businessShares[ticketId].totalRealised = businessShares[ticketId].totalRealised.add(amount);\\n            businessShares[ticketId].dividendsDebt = businessShareInfo.dividendsPerShare;\\n            token.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function getBusinessUnpaidEarnings(uint256 ticketId) public view returns (uint256) {\\n        if (businessShares[ticketId].validated != true) {\\n            return 0;\\n        }\\n\\n        return\\n            businessShareInfo.dividendsPerShare.sub(businessShares[ticketId].dividendsDebt).div(\\n                dividendsPerShareAccuracyFactor\\n            );\\n    }\\n\\n    function validateTickets() external nonReentrant {\\n        for (uint256 i = 1; i <= economyTicketNFT.totalSupply(); i++) {\\n            validateEconomyTicket(i);\\n        }\\n\\n        for (uint256 i = 1; i <= businessTicketNFT.totalSupply(); i++) {\\n            validateBusinessTicket(i);\\n        }\\n    }\\n\\n    function isValidated(uint256 ticketClass, uint256 ticketId) external view returns (bool) {\\n        if (ticketClass == ECONOMY) {\\n            return economyShares[ticketId].validated;\\n        }\\n        if (ticketId == BUSINESS) {\\n            return businessShares[ticketId].validated;\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Starbound.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/*\\n *  $$$$$$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\  $$$$$$$\\\\   $$$$$$\\\\  $$\\\\   $$\\\\ $$\\\\   $$\\\\ $$$$$$$\\\\\\n * $$  __$$\\\\\\\\__$$  __|$$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$ |  $$ |$$$\\\\  $$ |$$  __$$\\\\\\n * $$ /  \\\\__|  $$ |   $$ /  $$ |$$ |  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |$$$$\\\\ $$ |$$ |  $$ |\\n * \\\\$$$$$$\\\\    $$ |   $$$$$$$$ |$$$$$$$  |$$$$$$$\\\\ |$$ |  $$ |$$ |  $$ |$$ $$\\\\$$ |$$ |  $$ |\\n *  \\\\____$$\\\\   $$ |   $$  __$$ |$$  __$$< $$  __$$\\\\ $$ |  $$ |$$ |  $$ |$$ \\\\$$$$ |$$ |  $$ |\\n * $$\\\\   $$ |  $$ |   $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |\\\\$$$ |$$ |  $$ |\\n * \\\\$$$$$$  |  $$ |   $$ |  $$ |$$ |  $$ |$$$$$$$  | $$$$$$  |\\\\$$$$$$  |$$ | \\\\$$ |$$$$$$$  |\\n *  \\\\______/   \\\\__|   \\\\__|  \\\\__|\\\\__|  \\\\__|\\\\_______/  \\\\______/  \\\\______/ \\\\__|  \\\\__|\\\\_______/\\n *\\n *  https://starboundfinance.com/\\n *  https://t.me/StarboundOfficial\\n */\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IDEXFactory.sol';\\nimport './interfaces/IDEXRouter.sol';\\nimport './DividendDistributor.sol';\\nimport './ShipDividendDistributor.sol';\\n\\ncontract Starbound is Context, Ownable, IERC20 {\\n    using SafeMath for uint256;\\n\\n    address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address private constant ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string constant _name = 'Starbound';\\n    string constant _symbol = 'SBD';\\n    uint8 constant _decimals = 9;\\n    uint256 _totalSupply = 1000000000 * (10**_decimals); // 1,000,000,000\\n    mapping(address => uint256) _balances;\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isTxLimitExempt;\\n    mapping(address => bool) public isDividendExempt;\\n\\n    uint256 public maxTxAmount = _totalSupply / 2000; // 0.05%\\n\\n    uint256 private feeDenominator = 10000;\\n    uint256 private reflectionFee = 500;\\n    uint256 private marketingFee = 300;\\n    uint256 private economyTicketFee = 50;\\n    uint256 private businessTicketFee = 50;\\n    uint256 public totalFee = 900;\\n\\n    address public marketingFeeReceiver;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n\\n    uint256 public launchedAt;\\n\\n    uint256 public feeExemptStartAt;\\n    uint256 public feeExemptLength;\\n\\n    DividendDistributor public distributor;\\n    uint256 private distributorGas = 500000;\\n\\n    ShipDividendDistributor public shipDistributor;\\n\\n    bool public swapBackEnabled = true;\\n    uint256 public swapBackThreshold = _totalSupply / 20000; // 0.005%\\n    bool inSwap;\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(\\n        address _router,\\n        address _economyTicket,\\n        address _businessTicket\\n    ) {\\n        // PancakeswapRouter mainnet\\n        router = _router != ZERO ? IDEXRouter(_router) : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n\\n        distributor = new DividendDistributor();\\n        shipDistributor = new ShipDividendDistributor(_economyTicket, _businessTicket);\\n\\n        isFeeExempt[msg.sender] = true;\\n        isTxLimitExempt[msg.sender] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[DEAD] = true;\\n        isDividendExempt[ZERO] = true;\\n        isDividendExempt[msg.sender] = true;\\n\\n        marketingFeeReceiver = msg.sender;\\n\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(ZERO, msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function symbol() external pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(address holder, address spender) external view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, 'Insufficient Allowance');\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        checkTxLimit(sender, amount);\\n\\n        if (shouldSwapBack()) {\\n            swapBack();\\n        }\\n\\n        if (!launched() && recipient == pair) {\\n            require(_balances[sender] > 0);\\n            launch();\\n        }\\n\\n        _balances[sender] = _balances[sender].sub(amount, 'Insufficient Balance');\\n\\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : amount;\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n\\n        if (!isDividendExempt[sender]) {\\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\\n        }\\n        if (!isDividendExempt[recipient]) {\\n            try distributor.setShare(recipient, _balances[recipient]) {} catch {}\\n        }\\n\\n        try distributor.process(distributorGas) {} catch {}\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender].sub(amount, 'Insufficient Balance');\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function checkTxLimit(address sender, uint256 amount) internal view {\\n        require(amount <= maxTxAmount || isTxLimitExempt[sender], 'TX Limit Exceeded');\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n\\n    function getTotalFee(bool buying) public view returns (uint256) {\\n        if (\\n            buying &&\\n            feeExemptStartAt != 0 &&\\n            feeExemptStartAt <= block.timestamp &&\\n            feeExemptStartAt.add(feeExemptLength) >= block.timestamp\\n        ) {\\n            return economyTicketFee.add(businessTicketFee);\\n        }\\n        return totalFee;\\n    }\\n\\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\\n        uint256 economyTicketFeeAmount = amount.mul(economyTicketFee).div(feeDenominator);\\n        uint256 businessTicketFeeAmount = amount.mul(businessTicketFee).div(feeDenominator);\\n        uint256 ticketFeeAmount = economyTicketFeeAmount.add(businessTicketFeeAmount);\\n        uint256 feeAmount = amount.mul(getTotalFee(sender == pair)).div(feeDenominator);\\n\\n        feeAmount = ticketFeeAmount < feeAmount ? feeAmount.sub(ticketFeeAmount) : 0;\\n\\n        _balances[address(shipDistributor)] = _balances[address(shipDistributor)].add(ticketFeeAmount);\\n        emit Transfer(sender, address(shipDistributor), ticketFeeAmount);\\n        shipDistributor.deposit(economyTicketFeeAmount, businessTicketFeeAmount);\\n\\n        if (feeAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n            emit Transfer(sender, address(this), feeAmount);\\n        }\\n\\n        return amount.sub(feeAmount);\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair && !inSwap && swapBackEnabled && _balances[address(this)] >= swapBackThreshold;\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 amountToSwap = swapBackThreshold;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WBNB;\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\\n\\n        uint256 totalBNBFee = totalFee;\\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\\n\\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\\n        TransferHelper.safeTransferETH(marketingFeeReceiver, amountBNBMarketing);\\n    }\\n\\n    function launched() internal view returns (bool) {\\n        return launchedAt != 0;\\n    }\\n\\n    function launch() internal {\\n        launchedAt = block.timestamp;\\n    }\\n\\n    function setTxLimit(uint256 amount) external onlyOwner {\\n        maxTxAmount = amount;\\n    }\\n\\n    function setIsDividendExempt(address holder, bool exempt) public onlyOwner {\\n        require(holder != address(this) && holder != pair);\\n        isDividendExempt[holder] = exempt;\\n        if (exempt) {\\n            distributor.setShare(holder, 0);\\n        } else {\\n            distributor.setShare(holder, _balances[holder]);\\n        }\\n    }\\n\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function setFees(\\n        uint256 _reflectionFee,\\n        uint256 _marketingFee,\\n        uint256 _economyTicketFee,\\n        uint256 _businessTicketFee,\\n        uint256 _feeDenominator\\n    ) external onlyOwner {\\n        reflectionFee = _reflectionFee;\\n        marketingFee = _marketingFee;\\n        economyTicketFee = _economyTicketFee;\\n        businessTicketFee = _businessTicketFee;\\n        totalFee = _reflectionFee.add(_marketingFee).add(_economyTicketFee).add(_businessTicketFee);\\n        feeDenominator = _feeDenominator;\\n        require(totalFee < feeDenominator / 5);\\n    }\\n\\n    function setFeeReceivers(address _marketingFeeReceiver) external onlyOwner {\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n        isDividendExempt[marketingFeeReceiver] = true;\\n    }\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\\n        swapBackEnabled = _enabled;\\n        swapBackThreshold = _amount;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\\n    }\\n\\n    function setDistributorSettings(uint256 gas) external onlyOwner {\\n        require(gas < 750000);\\n        distributorGas = gas;\\n    }\\n\\n    function setFeeExemptSettings(uint256 startAt, uint256 length) external onlyOwner {\\n        require(startAt > block.timestamp);\\n        feeExemptStartAt = startAt;\\n        feeExemptLength = length;\\n    }\\n\\n    function clearFeeExempt() external onlyOwner {\\n        feeExemptStartAt = 0;\\n        feeExemptLength = 0;\\n    }\\n\\n    function setIsAllExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n        isTxLimitExempt[holder] = exempt;\\n        setIsDividendExempt(holder, exempt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDEXFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDEXRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDividendDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\\n\\n    function setShare(address shareholder, uint256 amount) external;\\n\\n    function deposit() external payable;\\n\\n    function process(uint256 gas) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/**\\n * ERC20 standard interface.\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IShipDividendDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IShipDividendDistributor {\\n    function deposit(uint256 economyAmount, uint256 businessAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IShipTicketNFT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IShipTicketNFT {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_economyTicket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_businessTicket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExemptLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExemptStartAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setFeeExemptSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_economyTicketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_businessTicketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsAllExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipDistributor\",\"outputs\":[{\"internalType\":\"contract ShipDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBackThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Starbound", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000a390a2e5cc703b6c501ccd2d4b1aad58b88f5ff2000000000000000000000000290dfa6fbe97642c192a4fc07d7ebe203676e7d1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}