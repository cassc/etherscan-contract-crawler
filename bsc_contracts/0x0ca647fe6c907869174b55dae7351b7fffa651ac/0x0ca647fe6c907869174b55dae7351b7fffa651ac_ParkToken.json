{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ParkToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interface/IParkToken.sol\\\";\\nimport \\\"./utils/contract_controller/ContractController.sol\\\";\\nimport \\\"./utils/contract_controller/interface/IContractController.sol\\\";\\n\\n/// @title Park Token Contract\\ncontract ParkToken is Context, IParkToken{\\n\\n    //Using SafeMath for uint256\\n    using SafeMath for uint256;\\n\\n    //Distribution percentage\\n    uint256 private constant _IDO_PERCENTAGE=150; //15%\\n    uint256 private constant _PRIVATE_SALE_PERCENTAGE=20; //2% \\n    uint256 private constant _LIQUIDITY_PERCENTAGE=70; //7%\\n    uint256 private constant _REWARD_BUFFER_PERCENTAGE=330; //33%\\n    uint256 private constant _TEAM_PERCENTAGE=150; //15%\\n    uint256 private constant _DEVELOPMENT_PERCENTAGE=100; //10%\\n    uint256 private constant _MARKETING_PERCENTAGE=100; //10%\\n    uint256 private constant _ADVISORS_PERCENTAGE=20; //2%\\n    uint256 private constant _AIRDROP_PERCENTAGE=10; //1%\\n    uint256 private constant _BURN_PERCENTAGE=50; //5%\\n\\n    //Contract Controller\\n    address public contractController;\\n\\n    //Wallets and their percentage\\n    address public idoWallet;\\n    uint256 private constant _IDO_WALLET_PERCENTAGE=1000; //100%\\n\\n    address public liquidityWallet;\\n    uint256 private constant _LIQUIDITY_WALLET_PERCENTAGE=1000; //100%\\n\\n    address public developmentWallet;\\n    uint256 private constant _DEVELOPEMENT_WALLET_PERCENTAGE=120; //12%\\n\\n    address public marketingWallet;\\n    uint256 private constant _MARKETING_WALLET_PERCENTAGE=100; //10%\\n\\n    address public advisorsWallet;\\n    uint256 private constant _ADVISORS_WALLET_PERCENTAGE=250; //25%\\n\\n    address public airDropWallet;\\n    uint256 private constant _AIR_DROP_WALLET_PERCENTAGE=1000; //100%\\n\\n\\n    //Vaults percentage\\n    uint256 private constant _PRIVATE_SALE_VAULT_PERCENTAGE   =1000; //100%\\n    uint256 private constant _REWARD_BUFFER_VAULT_PERCENTAGE  =1000; //100%\\n    uint256 private constant _TEAM_VAULT_PERCENTAGE           =1000; //100%\\n    uint256 private constant _DEVELOPMENT_VAULT_PERCENTAGE    =880;  //88%\\n    uint256 private constant _MARKETING_VAULT_PERCENTAGE      =900;  //90%\\n    uint256 private constant _ADVISORS_VAULT_PERCENTAGE       =750;  //75%\\n    uint256 private constant _BURN_RESERVE_VAULT_PERCENTAGE   =1000; //100%\\n\\n\\n\\n    //Taxes percentage of transfer\\n    uint256 private constant _COMMUNITY_LOTTERY = 30; //3%\\n    uint256 private constant _LP_ACQUISITION = 20; //2%\\n    uint256 private constant _COMPANY = 20; //2%\\n    uint256 private constant _GROWTH_FUND = 10; //1%\\n\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply             = 4_000_000_000e18; //scientific decimal notation\\n    uint256 private constant _INITIAL_SUPPLY = 2_000_000_000e18; //scientific decimal notation\\n\\n\\n    string private  _name;\\n    string private  _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_,address[] memory wallets_,address timeLockDAO_) {\\n        \\n        //Initializing name and symbol\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        contractController=address(new ContractController(address(this),timeLockDAO_,wallets_,_msgSender()));\\n        require(contractController!=address(0),\\\"Unable to initialize contractController\\\");\\n       \\n        //Transfer tokens to msg Sender()\\n        _balances[_msgSender()]=_totalSupply;\\n        emit Transfer(address(this), _msgSender(), _totalSupply);\\n\\n        //Burn 50% tokens\\n        _burn(_msgSender(), _INITIAL_SUPPLY);\\n\\n        //Initializing Wallets\\n        (bool isWalletsInitialized)= _initializeWallets(wallets_);\\n        require(isWalletsInitialized,\\\"Unable to initialize Wallets\\\");\\n\\n        //initialize tokenomics\\n        (bool isTokenomicsInitialized)= _initializeTokenomics();\\n        require(isTokenomicsInitialized,\\\"Unable to initialize Tokenomics\\\");  \\n\\n    }\\n\\n      //initialize wallets\\n    function _initializeWallets(address[] memory wallets_) private returns(bool){\\n\\n        //Checking total no of wallets\\n        require(wallets_.length==6,\\\"Invalid wallets list length\\\");\\n        \\n        idoWallet=wallets_[0];\\n        liquidityWallet=wallets_[1];\\n        developmentWallet=wallets_[2];\\n        marketingWallet=wallets_[3];\\n        advisorsWallet=wallets_[4];\\n        airDropWallet=wallets_[5];\\n    \\n        return true;\\n    }\\n\\n    //Transfer tokens to vaults and wallets \\n    function _initializeTokenomics() private returns(bool){\\n\\n         IContractController controller=IContractController(contractController);\\n        \\n        // IDO\\n                transfer(idoWallet, _INITIAL_SUPPLY.mul(_IDO_PERCENTAGE).mul(_IDO_WALLET_PERCENTAGE).div(1e6));\\n\\n        // Private Sale\\n                transfer(controller.getPrivateSaleVault(), _INITIAL_SUPPLY.mul(_PRIVATE_SALE_PERCENTAGE).mul(_PRIVATE_SALE_VAULT_PERCENTAGE).div(1e6));\\n        \\n        // Tokens to Liquidity Pool\\n                transfer(liquidityWallet, _INITIAL_SUPPLY.mul(_LIQUIDITY_PERCENTAGE).mul(_LIQUIDITY_WALLET_PERCENTAGE).div(1e6));\\n        \\n        // Reward Buffer\\n                transfer(controller.getRewardBufferVault(), _INITIAL_SUPPLY.mul(_REWARD_BUFFER_PERCENTAGE).mul(_REWARD_BUFFER_VAULT_PERCENTAGE).div(1e6));\\n        \\n        // Team\\n                transfer(controller.getTeamVault(), _INITIAL_SUPPLY.mul(_TEAM_PERCENTAGE).mul(_TEAM_VAULT_PERCENTAGE).div(1e6));\\n        \\n        // Development Fund\\n                transfer(developmentWallet, _INITIAL_SUPPLY.mul(_DEVELOPMENT_PERCENTAGE).mul(_DEVELOPEMENT_WALLET_PERCENTAGE).div(1e6));\\n                transfer(controller.getDevelopmentVault(), _INITIAL_SUPPLY.mul(_DEVELOPMENT_PERCENTAGE).mul(_DEVELOPMENT_VAULT_PERCENTAGE).div(1e6));       \\n  \\n        // Marketing\\n                transfer(marketingWallet, _INITIAL_SUPPLY.mul(_MARKETING_PERCENTAGE).mul(_MARKETING_WALLET_PERCENTAGE).div(1e6));\\n                transfer(controller.getMarketingVault(), _INITIAL_SUPPLY.mul(_MARKETING_PERCENTAGE).mul(_MARKETING_VAULT_PERCENTAGE).div(1e6)); \\n\\n        // Advisors\\n                transfer(advisorsWallet, _INITIAL_SUPPLY.mul(_ADVISORS_PERCENTAGE).mul(_ADVISORS_WALLET_PERCENTAGE).div(1e6));\\n                transfer(controller.getAdvisorsVault(), _INITIAL_SUPPLY.mul(_ADVISORS_PERCENTAGE).mul(_ADVISORS_VAULT_PERCENTAGE).div(1e6));        \\n     \\n        // Airdrop/Bounty\\n                transfer(airDropWallet, _INITIAL_SUPPLY.mul(_AIRDROP_PERCENTAGE).mul(_AIR_DROP_WALLET_PERCENTAGE).div(1e6));\\n        \\n        // Burn Reserve\\n                transfer(controller.getBurnReserveVault(), _INITIAL_SUPPLY.mul(_BURN_PERCENTAGE).mul(_BURN_RESERVE_VAULT_PERCENTAGE).div(1e6));\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view  override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view  override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public pure  override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view  override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account_) public view  override returns (uint256) {\\n        return _balances[account_];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to_, uint256 amount_) public  override  returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner_, address spender_) public view virtual override returns (uint256) {\\n        return _allowances[owner_][spender_];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender_, uint256 amount_) external  override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external  returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from_, spender, amount_);\\n        _transfer(from_, to_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender_, uint256 addedValue_) external  returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender_, allowance(owner, spender_) + addedValue_);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external  returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender_);\\n        require(currentAllowance >= subtractedValue_, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender_, currentAllowance - subtractedValue_);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) internal  {\\n        require(from_ != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to_ != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(to_ != address(this), \\\"ERC20: transfer to the zero address\\\");\\n        _beforeTokenTransfer(from_, amount_);\\n\\n            IContractController controller=IContractController(contractController);\\n            bool isTaxEnabled = controller.getIsTaxEnabled();\\n            bool isToExcludedFromFee = controller.getIsExcludedFromFee(to_);\\n            bool isFromExcludedFromFee = controller.getIsExcludedFromFee(from_);\\n\\n            if(isTaxEnabled && !isFromExcludedFromFee && !isToExcludedFromFee ){\\n                \\n                uint256 transferAmount= amount_.mul(920).div(1000);\\n                \\n                uint256 fromBalance = _balances[from_];\\n                require(fromBalance >= amount_, \\\"ERC20: transfer amount exceeds balance\\\");\\n                \\n                unchecked {\\n                    _balances[from_] = fromBalance - amount_;\\n                }\\n\\n                _balances[to_] += transferAmount;\\n                emit Transfer(from_, to_, transferAmount);\\n\\n                 address[] memory taxWallets = new address[](4);\\n                taxWallets[0] = controller.getCommunityLotteryVault();\\n                taxWallets[1] = controller.getLpAcquisitionVault();\\n                taxWallets[2] = controller.getCompanyVault();\\n                taxWallets[3] = controller.getGrowthFundVault();\\n\\n                //Transfer Tax\\n              \\n                unchecked {\\n                _balances[taxWallets[0]] += amount_.mul(_COMMUNITY_LOTTERY).div(1000);\\n                }\\n                emit Transfer(from_, taxWallets[0], amount_.mul(_COMMUNITY_LOTTERY).div(1000));\\n\\n\\n              \\n                unchecked {\\n                _balances[taxWallets[1]] += amount_.mul(_LP_ACQUISITION).div(1000);\\n                }\\n                emit Transfer(from_, taxWallets[1], amount_.mul(_LP_ACQUISITION).div(1000));\\n\\n               \\n                unchecked {\\n                _balances[taxWallets[2]] += amount_.mul(_COMPANY).div(1000);\\n                }\\n                emit Transfer(from_, taxWallets[2], amount_.mul(_COMPANY).div(1000));\\n\\n               \\n                unchecked {\\n                _balances[taxWallets[3]] += amount_.mul(_GROWTH_FUND).div(1000);\\n                }\\n                emit Transfer(from_,taxWallets[3], amount_.mul(_GROWTH_FUND).div(1000));\\n\\n             }\\n             else{\\n                uint256 fromBalance = _balances[from_];\\n                require(fromBalance >= amount_, \\\"ERC20: transfer amount exceeds balance\\\");\\n                unchecked {\\n                    _balances[from_] = fromBalance - amount_;\\n                }\\n                _balances[to_] += amount_;\\n\\n                emit Transfer(from_, to_, amount_);\\n             }\\n           \\n        _afterTokenTransfer(from_, to_, amount_);\\n    }\\n\\n\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n\\n    function _burn(address account_, uint256 amount_) private {\\n        require(account_ != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account_, amount_);\\n\\n        uint256 accountBalance = _balances[account_];\\n        require(accountBalance >= amount_, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account_] = accountBalance - amount_;\\n        }\\n        _totalSupply -= amount_;\\n\\n        emit Transfer(account_, address(0), amount_);\\n\\n        _afterTokenTransfer(account_, address(0), amount_);\\n    }\\n\\n        /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount_) external override returns(bool) {\\n       \\n        _burn(_msgSender(), amount_);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner_,\\n        address spender_,\\n        uint256 amount_\\n    ) internal  {\\n        require(owner_ != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender_ != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner_,\\n        address spender_,\\n        uint256 amount_\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner_, spender_);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount_, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner_, spender_, currentAllowance - amount_);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer (\\n        address from_,\\n        uint256 amount_\\n    ) internal view {\\n          //Check unlock balance   \\n         require(unlockBalanceOf(from_)>=amount_,\\\"ERC20: transfer unlock amount exceeds balance\\\");\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) internal  {\\n         IContractController controller=IContractController(contractController);\\n        if(from_==controller.getPrivateSaleVault()&&!controller.getIsExcludedFromFee(to_)){\\n            //Lock The Tokens\\n            _lock(to_, amount_);\\n        }\\n    }\\n\\n\\n    //Locking\\n    ///@dev Frequency and percentage of unlock\\n    uint256 public constant FREQUENCY_OF_UNLOCK = 365; // This value should be in day\\n    uint256 public constant PERCENTAGE_OF_UNLOCK = 1000; // 100%\\n\\n    /// @dev locked token structure\\n    struct LockToken {\\n        uint256 amount;\\n        uint256 unlockAmount;\\n        uint256 percentageOfUnlock;\\n        uint256 frequencyOfUnlock;\\n        uint256 createdDate;\\n        uint256 previousUnlockDate;\\n    }\\n\\n    /// @dev Holds number & validity of tokens locked for a given reason for a specified address\\n    mapping(address => LockToken) public locked;\\n\\n    ///@dev All  locked accounts accounts\\n    address[] public totalAddress;\\n\\n    ///@dev Events in swap and Locking\\n    event Locked(\\n        address indexed of_,\\n        uint256 indexed amount_,\\n        uint256 percentageOfUnlock_,\\n        uint256 frequencyOfUnlock_\\n    );\\n\\n    /// @notice This function required recipient address, amount and use for locking token for a time duration like :- 1/3 months.\\n    /// @dev stored in structure with (amount,unlockAmount,percentageOfUnlock,frequencyOfUnlock,createdDate, previousUnlockDate). UnlockAmount calculate (amount * percentageOfUnlock / 10**3).\\n    /// @param @address recipient, uint256 _amount\\n    /// @return true\\n    function _lock(address recipient_, uint256 amount_) private returns (bool) {\\n        require(amount_ != 0, \\\"Amount can not be 0\\\");\\n        if (locked[recipient_].amount > 0) {\\n            uint256 unlockAmount = 0;\\n            locked[recipient_].amount += amount_;\\n            locked[recipient_].unlockAmount += unlockAmount;\\n            locked[recipient_].previousUnlockDate = block.timestamp;\\n        } else {\\n            uint256 unlockAmount = 0;\\n            locked[recipient_] = LockToken(\\n                amount_,\\n                unlockAmount,\\n                PERCENTAGE_OF_UNLOCK,\\n                FREQUENCY_OF_UNLOCK,\\n                block.timestamp,\\n                block.timestamp\\n            );\\n            totalAddress.push(recipient_);\\n        }\\n\\n        emit Locked(\\n            msg.sender,\\n            amount_,\\n            PERCENTAGE_OF_UNLOCK,\\n            FREQUENCY_OF_UNLOCK\\n        );\\n        return true;\\n    }\\n\\n    /// @notice This function required recipient address and use for calculate lock token balance for a particular recipient address\\n    /// @dev update unlockAmount and previousUnlockDate in locked struct.\\n    /// @param @address recipient\\n    /// @return lockamount\\n    function calculateLockBalance(address recipient_)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 unlockAmount = 0;\\n        uint256 lockAmount = 0;\\n\\n        if (locked[recipient_].amount > 0) {\\n            uint256 unlockDate = 0;\\n            unlockDate =\\n                locked[recipient_].previousUnlockDate +\\n                (60 * 60 * 24 * locked[recipient_].frequencyOfUnlock);\\n            if (block.timestamp >= unlockDate) {\\n                uint256 count = (block.timestamp -\\n                    locked[recipient_].previousUnlockDate) /\\n                    (60 * 60 * 24 * locked[recipient_].frequencyOfUnlock);\\n                unlockAmount =\\n                    ((locked[recipient_].amount *\\n                        locked[recipient_].percentageOfUnlock) / 10**3) *\\n                    count;\\n                unlockDate = block.timestamp;\\n            }\\n            unlockAmount = locked[recipient_].unlockAmount + unlockAmount;\\n        }\\n        if (locked[recipient_].amount > unlockAmount) {\\n            lockAmount = locked[recipient_].amount - unlockAmount;\\n        }\\n        return lockAmount;\\n    }\\n\\n    /// @notice This function required recipient address and use for unlocking token for a particular recipient address\\n    /// @dev update unlockAmount and previousUnlockDate in locked struct.\\n    /// @param @address recipient\\n    /// @return true\\n    function unLock(address recipient_) external  returns (bool) {\\n        if (locked[recipient_].amount > 0) {\\n            bool isModify = false;\\n            uint256 unlockDate = 0;\\n            uint256 unlockAmount = 0;\\n            unlockDate =\\n                locked[recipient_].previousUnlockDate +\\n                (60 * 60 * 24 * locked[recipient_].frequencyOfUnlock);\\n            if (block.timestamp >= unlockDate) {\\n                uint256 count = (block.timestamp -\\n                    locked[recipient_].previousUnlockDate) /\\n                    (60 * 60 * 24 * locked[recipient_].frequencyOfUnlock);\\n                unlockAmount =\\n                    ((locked[recipient_].amount *\\n                        locked[recipient_].percentageOfUnlock) / 10**3) *\\n                    count;\\n                unlockDate = block.timestamp;\\n                isModify = true;\\n            }\\n\\n            if (isModify) {\\n                 if (\\n                    locked[recipient_].unlockAmount + unlockAmount >=\\n                    locked[recipient_].amount\\n                ) {\\n                    locked[recipient_].unlockAmount +=\\n                        locked[recipient_].amount -\\n                        locked[recipient_].unlockAmount;\\n                    locked[recipient_].previousUnlockDate = unlockDate;\\n                    delete locked[recipient_]; // delete record from struct\\n                    _removeLockAddress(recipient_);\\n                } else {\\n                    //unLockToken[recipient] += unlockAmount;\\n                    locked[recipient_].unlockAmount += unlockAmount;\\n                    locked[recipient_].previousUnlockDate = unlockDate;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice This function used for get unlockAmount of a recipient.\\n    /// @dev Get recipient balance and subtract with amount or unlockAmount\\n    /// @param @address recipient\\n    /// @return unlockbalance\\n    function unlockBalanceOf(address recipient_) public view returns (uint256) {\\n        uint256 _lockBalance = calculateLockBalance(recipient_);\\n        uint256 _unlockBalance = balanceOf(recipient_) - _lockBalance;\\n        return _unlockBalance;\\n    }\\n\\n    /// @notice This private function required recipient address and use for remove particular address from totalAddress array.\\n    /// @dev apply loop on totalAddress get perticular address match with recipient and delete from array\\n    /// @param @address recipient\\n    /// @return true\\n    function _removeLockAddress(address recipient_) private returns (bool) {\\n        for (uint256 i = 0; i < totalAddress.length; i++) {\\n            if (totalAddress[i] == recipient_) {\\n                delete totalAddress[i];\\n            }\\n        }\\n        return true;\\n    \\n    }\\n    \\n}\"\r\n    },\r\n    \"/contracts/utils/vault/interface/IVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\ninterface IVault { \\n\\n   event WithdrawBNBFromVault(uint256 indexed amount_,address indexed from_,address indexed to_,string vaultName_);\\n\\n   function getVaultName() external view returns(string memory);\\n\\n   function transfer(address to_,uint256 amount_) external returns(bool);\\n\\n\\n    //Function to recive BNB \\n    receive() external payable;\\n\\n    //Function to withdraw BNB \\n    function withdrawBNB(uint _amount,address to_) external  returns(bool);\\n\\n    //Function to get balance BNB \\n    function getBalanceBNB() external view returns(uint256);\\n\\n   //Function to Check ParkTokens balance \\n    function getBalanceParkToken()  external view returns(uint256);\\n\\n    function transferToken(address tokenaddress_,address to_,uint256 amount_) external   returns(bool);\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceToken(address tokenAddress_)  external view  returns(uint256);\\n}\"\r\n    },\r\n    \"/contracts/utils/vault/Vault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\n//Import required contracts\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../../utils/contract_controller/interface/IContractController.sol';\\nimport '../../interface/IParkToken.sol';\\nimport './interface/IVault.sol';\\n\\ncontract Vault is Context,IVault{ \\n\\n   //Using Address for address\\n   using Address for address;\\n\\n   address private _parkToken;\\n   string private  _vaultName;\\n\\n    //Contract Controller\\n    address public contractController;\\n\\n   constructor(address parkToken_,address contractController_,string memory vaultName_){\\n       //Initilizes the _vaultOwner and _vaultName\\n        _parkToken=parkToken_;\\n        contractController=contractController_;\\n        _vaultName=vaultName_;\\n   }\\n   \\n   //Returns Vault Name\\n   function getVaultName() public override view returns(string memory){\\n       return _vaultName;\\n   }\\n\\n   //Transfer Tokens\\n   function transfer(address to_,uint256 amount_) public override  returns(bool){\\n      \\n       IContractController controller= IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       IParkToken parkToken =IParkToken(_parkToken);\\n       parkToken.transfer(to_, amount_);\\n       return true;\\n   }\\n\\n\\n    //Function to recive BNB \\n    receive() external override payable {}\\n\\n    //Function to withdraw BNB \\n    function withdrawBNB(uint amount_,address to_) external override   returns(bool){\\n        IContractController controller= IContractController(contractController);\\n        require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n        require(address(this).balance>=amount_, \\\"contract does not have sufficient BNB\\\");\\n        payable(to_).transfer(amount_);\\n        emit WithdrawBNBFromVault(amount_,address(this),to_,_vaultName); \\n        return(true);\\n   }\\n\\n    //Function to Check BNB balance\\n    function getBalanceBNB()  external view override returns(uint256){\\n        return(address(this).balance);\\n   }\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceParkToken()  external view override returns(uint256){\\n        IParkToken parkToken =IParkToken(_parkToken);\\n        return(parkToken.balanceOf(address(this)));\\n   }\\n\\n\\n   //Transfer Tokens\\n   function transferToken(address tokenaddress_,address to_,uint256 amount_) public override  returns(bool){\\n       IContractController controller= IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       IERC20 erc20Token =IERC20(tokenaddress_);\\n       erc20Token.transfer(to_, amount_);\\n       return true;\\n   }\\n\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceToken(address tokenAddress_)  external view override returns(uint256){\\n         IERC20 erc20Token =IERC20(tokenAddress_);\\n        return(erc20Token.balanceOf(address(this)));\\n   }\\n\\n}\"\r\n    },\r\n    \"/contracts/utils/private_sale_vault/interface/IPrivateSaleVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\ninterface IPrivateSaleVault { \\n\\n   event WithdrawBNBFromVault(uint256 indexed amount_,address indexed from_,address indexed to_,string vaultName_);\\n\\n   event TokenPurchased(uint256 indexed amount_,address indexed from_,address indexed to_,string vaultName_);\\n\\n   function getVaultName() external view returns(string memory);\\n\\n   function transfer(address to_,uint256 amount_) external returns(bool);\\n\\n   function getPark(uint256 amount_) external payable returns(bool);\\n\\n   function getParkPrice() external view returns(uint256);\\n\\n    //set private sale price\\n   function setParkPrice(uint256 newPrice_) external  returns(bool);\\n\\n    //Function to recive BNB \\n    receive() external payable;\\n\\n    //Function to withdraw BNB \\n    function withdrawBNB(uint _amount,address to_) external  returns(bool);\\n\\n    //Function to get balance BNB \\n    function getBalanceBNB() external view returns(uint256);\\n\\n   //Function to Check ParkTokens balance \\n    function getBalanceToken()  external view returns(uint256);\\n\\n    function transferToken(address tokenaddress_,address to_,uint256 amount_) external   returns(bool);\\n\\n    //Function to Check Tokens balance \\n    function getBalanceToken(address tokenAddress_)  external view  returns(uint256);\\n\\n     //Function to Check ParkTokens balance \\n    function getPrivateSaleStatus()  external view returns(bool);\\n\\n     //Function to Check ParkTokens balance \\n    function setPrivateSaleStatus(bool newStatus)  external  returns(bool);\\n\\n}\"\r\n    },\r\n    \"/contracts/utils/private_sale_vault/PrivateSaleVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\n//Import required contracts\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../../utils/contract_controller/interface/IContractController.sol';\\nimport '../../interface/IParkToken.sol';\\nimport './interface/IPrivateSaleVault.sol';\\n\\ncontract PrivateSaleVault is Context,IPrivateSaleVault{ \\n\\n   //Using Address for address\\n   using Address for address;\\n\\n   using SafeMath for uint256;\\n\\n   address private _parkToken;\\n\\n       //Contract Controller\\n    address public contractController;\\n  \\n   string private constant _VAULT_NAME=\\\"PRIVATE SALE VAULT\\\";\\n\\n   uint256 private _privateSalePrice;\\n\\n   //PrivateSale info\\n    bool private _isPrivateSaleEnabled=false;\\n\\n   constructor(address parkToken_,address contractController_,uint256 privateSalePrice_){\\n       //Initilizes the Park Token and _vaultName\\n        _parkToken=parkToken_;\\n        contractController=contractController_;\\n        _privateSalePrice=privateSalePrice_;\\n   }\\n   \\n   //Returns vault name\\n   function getVaultName() public override pure returns(string memory){\\n       return _VAULT_NAME;\\n   }\\n\\n   //Transfers tokens\\n   function transfer(address to_,uint256 amount_) public override  returns(bool){\\n       //requires private sale is not active\\n       IContractController controller= IContractController(contractController);\\n        IParkToken parkToken =IParkToken(_parkToken);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       require(!_isPrivateSaleEnabled,\\\"Private sale is active can not transfer tokens now\\\");\\n       parkToken.transfer(to_, amount_);\\n       return true;\\n   }\\n\\n   //Purchase park tokens\\n   function getPark(uint256 amount_) external payable override returns(bool){\\n       //requires private sale is  active\\n       IParkToken parkToken =IParkToken(_parkToken);\\n       require(_isPrivateSaleEnabled,\\\"Private sale is not active can not buy tokens now\\\");\\n       require(msg.value>=_privateSalePrice.mul(amount_).div(1e18),\\\"InSufficient BNB as per private sale token price\\\");\\n       require(parkToken.balanceOf(address(this))>=amount_,\\\"InSufficient Tokens in Private Sale\\\");\\n       parkToken.transfer(_msgSender(), amount_);\\n       emit TokenPurchased(amount_,address(this),_msgSender(),_VAULT_NAME);\\n       return true;\\n   }\\n   \\n   //Returns private sale price\\n   function getParkPrice() external view override returns(uint256){\\n       return _privateSalePrice;\\n   }\\n\\n   //set private sale price\\n   function setParkPrice(uint256 newPrice_) external  override returns(bool){\\n       IContractController controller= IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       _privateSalePrice=newPrice_;\\n       return true;\\n   }\\n\\n    //Function to recive BNB \\n    receive() external override payable {}\\n\\n    //Function to withdraw BNB \\n    function withdrawBNB(uint amount_,address to_) external override   returns(bool){\\n        IContractController controller= IContractController(contractController);\\n        require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n        require(address(this).balance>=amount_, \\\"contract does not have sufficient BNB\\\");\\n        payable(to_).transfer(amount_);\\n        emit WithdrawBNBFromVault(amount_,address(this),to_,_VAULT_NAME); \\n        return(true);\\n   }\\n\\n    //Function to Check BNB balance\\n    function getBalanceBNB()  external view override returns(uint256){\\n        return(address(this).balance);\\n   }\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceToken()  external view override returns(uint256){\\n        IParkToken parkToken =IParkToken(_parkToken);\\n        return(parkToken.balanceOf(address(this)));\\n   }\\n\\n   //Transfer tokens\\n   function transferToken(address tokenaddress_,address to_,uint256 amount_) public override  returns(bool){\\n         IContractController controller= IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       IERC20 erc20Token =IERC20(tokenaddress_);\\n       erc20Token.transfer(to_, amount_);\\n       return true;\\n   }\\n\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceToken(address tokenAddress_)  external view override returns(uint256){\\n         IERC20 erc20Token =IERC20(tokenAddress_);\\n        return(erc20Token.balanceOf(address(this)));\\n   }\\n\\n        //Function to Check ParkTokens balance \\n    function getPrivateSaleStatus()  external  override view returns(bool){\\n         return _isPrivateSaleEnabled;\\n    }\\n\\n     //Function to Check ParkTokens balance \\n    function setPrivateSaleStatus(bool newStatus)  external override  returns(bool){\\n        IContractController controller= IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       _isPrivateSaleEnabled=newStatus;\\n       return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/utils/contract_controller/interface/IContractController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\ninterface IContractController{\\n\\n    //get isExcludedFromFee\\n    function getIsExcludedFromFee(address accountAddress_) external view returns(bool);\\n\\n    //set isExcludedFromFee\\n    function setIsExcludedFromFee(address accountAddress_,bool newStatus_) external returns(bool);\\n\\n    //get isExcludedFromFees\\n    function getIsTaxEnabled() external view returns(bool);\\n\\n    //set isExcludedFromFees\\n    function setIsTaxEnabled(bool newStatus_) external returns(bool);\\n\\n    //Time Lock + DAO\\n    //get timeLockDAO\\n    function getTimeLockDAO() external view returns(address);\\n\\n    //set timeLockDAO\\n    function setNewTimeLockDAO(address newTimeLockDAO_) external returns(bool);\\n\\n    //Taxes Vaults \\n    // communityLotteryVault;\\n    // lpAcquisitionVault;\\n    // companyVault;\\n    // growthFundVault; \\n\\n    //get communityLotteryVault\\n    function getCommunityLotteryVault() external view returns(address);\\n\\n    //set communityLotteryVault\\n    function setcommunityLotteryVault(address newCommunityLotteryVaultAddress_) external  returns(bool);\\n\\n    //get lpAcquisitionVault\\n    function getLpAcquisitionVault() external view returns(address);\\n\\n    //set lpAcquisitionVault\\n    function setLpAcquisitionVault(address newLpAcquisitionVaultAddress_) external  returns(bool);\\n\\n    //get companyVault\\n    function getCompanyVault() external view returns(address);\\n\\n    //set companyVault\\n    function setCompanyVault(address newCompanyVaultAddress_) external  returns(bool);\\n\\n    //get growthFundVault\\n    function getGrowthFundVault() external view returns(address);\\n\\n    //set growthFundVault\\n    function setGrowthFundVault(address newGrowthFundVaultAddress_) external  returns(bool);    \\n\\n    // Company Vaults\\n    //  privateSaleVault\\n    //  rewardBufferVault\\n    //  teamVault\\n    //  developmentVault\\n    //  marketingVault\\n    //  advisorsVault\\n    //  burnReserveVault\\n\\n    //get privateSaleVault\\n    function getPrivateSaleVault() external view returns(address);\\n\\n    //get rewardBufferVault\\n    function getRewardBufferVault() external view returns(address);\\n\\n    //get teamVault\\n    function getTeamVault() external view returns(address);\\n\\n    //get developmentVault\\n    function getDevelopmentVault() external view returns(address);\\n\\n    //get marketingVault\\n    function getMarketingVault() external view returns(address);\\n\\n    //get advisorsVault\\n    function getAdvisorsVault() external view returns(address);\\n\\n    //get burnReserveVault\\n    function getBurnReserveVault() external view returns(address);\\n\\n}\"\r\n    },\r\n    \"/contracts/utils/contract_controller/ContractController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../contract_controller/interface/IContractController.sol\\\";\\nimport \\\"../private_sale_vault/PrivateSaleVault.sol\\\";\\nimport \\\"../burn_reserve_vault/BurnReserveVault.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\n\\ncontract ContractController is Context ,IContractController{\\n\\n    //Vaults \\n    address private _privateSaleVault;\\n    address private _rewardBufferVault;\\n    address private _teamVault;\\n    address private _developmentVault;\\n    address private _marketingVault;\\n    address private _advisorsVault;\\n    address private _burnReserveVault; \\n\\n    //Taxes Vaults \\n    address private  _communityLotteryVault;\\n    address private  _lpAcquisitionVault;\\n    address private  _companyVault;\\n    address private  _growthFundVault; \\n\\n    //price in  the smallest unit of a BNB\\n    uint256 public constant IDO_PRICE =          4_000_000_000_000_000; //20% discount 0.004   BNB\\n    uint256 public constant PRIVATE_SALE_PRICE = 3_750_000_000_000_000; //25% discount 0.00375 BNB\\n    uint256 public constant LIQUIDITY_PRICE =    5_000_000_000_000_000; //0%  discount 0.005   BNB\\n\\n    //Time Lock DAO\\n    address private _timeLockDAO;\\n\\n    //Park Token\\n    address private _parkToken;\\n    mapping(address => bool) private _isExcludedFromFees;   \\n\\n\\n    //Is Transfer Tax Enabled\\n    bool private _isTaxEnabled = true;\\n\\n\\n    modifier onlyTimeLockDAO(){\\n        require(_msgSender()==_timeLockDAO,\\\"You do not have enough authority\\\");\\n        _;\\n    }\\n\\n    constructor(address parkTokenAddress_,address timeLockDAO_,address[] memory wallets_,address deployer){\\n\\n        _parkToken=parkTokenAddress_;\\n         \\n         //initialize vaults\\n        (bool isInitializedVaults)= _initializeVaults();\\n        require(isInitializedVaults,\\\"Unable to initialize vaults\\\");\\n\\n        //Initializing timeLock + dao\\n        (bool isTimeLockDAOInitialized)= _initializeTimeLockDAO(timeLockDAO_);\\n        require(isTimeLockDAOInitialized,\\\"Unable to initialize TimeLockDAO\\\");\\n\\n         //Excluded From Fees\\n        _isExcludedFromFees[deployer]=true;\\n\\n        //Exclude Wallets FromFee Wallets\\n        (bool isWalletsExcluedFromFee)= _excludeWalletsFromFee(wallets_);\\n        require(isWalletsExcluedFromFee,\\\"Unable to exclude wallets from fee\\\");\\n    }\\n\\n     //initialize wallets\\n    function _excludeWalletsFromFee(address[] memory wallets_) private returns(bool){\\n\\n        //Checking total no of wallets\\n        require(wallets_.length==6,\\\"Invalid wallets list length\\\");\\n        \\n        _isExcludedFromFees[wallets_[0]]=true;\\n        _isExcludedFromFees[wallets_[1]]=true;\\n        _isExcludedFromFees[wallets_[2]]=true;\\n        _isExcludedFromFees[wallets_[3]]=true;\\n        _isExcludedFromFees[wallets_[4]]=true;\\n        _isExcludedFromFees[wallets_[5]]=true;\\n        return true;\\n    }\\n    //initialize vaults\\n    function _initializeVaults() private returns(bool){\\n    \\n        _privateSaleVault=address(new PrivateSaleVault(_parkToken,address(this),PRIVATE_SALE_PRICE));\\n        _isExcludedFromFees[_privateSaleVault]=true;\\n\\n        _rewardBufferVault=address(new Vault(_parkToken,address(this),\\\"REWARD BUFFER VAULT\\\"));\\n        _isExcludedFromFees[_rewardBufferVault]=true;\\n    \\n        _teamVault=address(new Vault(_parkToken,address(this),\\\"TEAM VAULT\\\"));\\n        _isExcludedFromFees[_teamVault]=true;\\n\\n        _developmentVault=address(new Vault(_parkToken,address(this),\\\"DEVELOPMENT VAULT\\\"));\\n        _isExcludedFromFees[_developmentVault]=true;\\n        \\n        _marketingVault=address(new Vault(_parkToken,address(this),\\\"MARKETING VAULT\\\"));\\n        _isExcludedFromFees[_marketingVault]=true;\\n      \\n        _advisorsVault=address(new Vault(_parkToken,address(this),\\\"ADVISORS VAULT\\\"));\\n        _isExcludedFromFees[_advisorsVault]=true;\\n    \\n        _burnReserveVault=address(new BurnReserveVault(_parkToken,address(this)));\\n        _isExcludedFromFees[_burnReserveVault]=true; \\n        \\n\\n        //Taxes Vaults \\n        _communityLotteryVault=address(new Vault(_parkToken,address(this),\\\"COMMUNITY LOTTERY VAULT\\\"));\\n        _isExcludedFromFees[_communityLotteryVault]=true;\\n\\n        _lpAcquisitionVault=address(new Vault(_parkToken,address(this),\\\"LP ACQUISITION VAULT\\\"));\\n        _isExcludedFromFees[_lpAcquisitionVault]=true;\\n\\n        _companyVault=address(new Vault(_parkToken,address(this),\\\"COMPANY VAULT\\\"));\\n        _isExcludedFromFees[_companyVault]=true;\\n\\n        _growthFundVault=address(new Vault(_parkToken,address(this),\\\"GROWTH FUND VAULT\\\")); \\n        _isExcludedFromFees[_growthFundVault]=true;\\n        return true;\\n    }\\n\\n    //initialize TimeLock +DAO\\n    function _initializeTimeLockDAO(address newTimeLockDAO_) private  returns(bool){\\n        _timeLockDAO =newTimeLockDAO_;\\n        _isExcludedFromFees[_timeLockDAO]=true;\\n        return true;\\n    }\\n\\n    //get timeLockDAO\\n    function getTimeLockDAO() external view override returns(address){\\n       return _timeLockDAO;\\n    }\\n\\n    //set timeLockDAO\\n    function setNewTimeLockDAO(address timeLockDAO_) external override onlyTimeLockDAO  returns(bool){\\n\\n        require(timeLockDAO_!=address(0),\\\"Unable to initialize TimeLockDAO\\\");\\n        require(timeLockDAO_!=address(this),\\\"Unable to initialize TimeLockDAO\\\");\\n        require(timeLockDAO_!=_parkToken,\\\"Unable to initialize TimeLockDAO\\\");\\n\\n        //Initializing timeLock + dao\\n        (bool isTimeLockDAOInitialized)= _initializeTimeLockDAO(timeLockDAO_);\\n        require(isTimeLockDAOInitialized,\\\"Unable to initialize TimeLockDAO\\\");\\n        return true;\\n    }\\n\\n    //get isTaxEanbled\\n    function getIsTaxEnabled() external view returns(bool){\\n       return _isTaxEnabled;\\n    }\\n\\n    //set setIsTaxEnabled\\n    function setIsTaxEnabled(bool newStatus_) external override onlyTimeLockDAO returns(bool){\\n       _isTaxEnabled=newStatus_;\\n       return true;\\n    }\\n\\n    //get isExcludedFromFees\\n    function getIsExcludedFromFee(address accountAddress_) external view override returns(bool){\\n       return _isExcludedFromFees[accountAddress_];\\n    }\\n\\n    //set isExcludedFromFees\\n    function setIsExcludedFromFee(address accountAddress_,bool newStatus_) external override onlyTimeLockDAO returns(bool){\\n        _isExcludedFromFees[accountAddress_]=newStatus_;\\n        return true;\\n    }\\n\\n    //Taxes Vaults \\n    // communityLotteryVault;\\n    // lpAcquisitionVault;\\n    // companyVault;\\n    // growthFundVault; \\n\\n    //get communityLotteryVault\\n    function getCommunityLotteryVault() external view override returns(address){\\n       return _communityLotteryVault;\\n    }\\n\\n    //set communityLotteryVault\\n    function setcommunityLotteryVault(address newCommunityLotteryVaultAddress_) external override onlyTimeLockDAO returns(bool)\\n    {\\n        require(newCommunityLotteryVaultAddress_!=address(0),\\\"Unable to initialize to address(0)\\\");\\n        _communityLotteryVault =newCommunityLotteryVaultAddress_;\\n        _isExcludedFromFees[_communityLotteryVault]=true;\\n        return true;\\n    }\\n\\n    //get lpAcquisitionVault\\n    function getLpAcquisitionVault() external view override returns(address){\\n       return _lpAcquisitionVault;\\n    }\\n\\n    //set lpAcquisitionVault\\n    function setLpAcquisitionVault(address newLpAcquisitionVaultAddress_) external override onlyTimeLockDAO  returns(bool){\\n        require(newLpAcquisitionVaultAddress_!=address(0),\\\"Unable to initialize to address(0)\\\");\\n        _lpAcquisitionVault =newLpAcquisitionVaultAddress_;\\n        _isExcludedFromFees[_lpAcquisitionVault]=true;\\n        return true;\\n    }\\n\\n    //get companyVault\\n    function getCompanyVault() external view returns(address){\\n        return _companyVault;\\n    }\\n\\n    //set companyVault\\n    function setCompanyVault(address newCompanyVaultAddress_) external override onlyTimeLockDAO returns(bool){\\n        require(newCompanyVaultAddress_!=address(0),\\\"Unable to initialize to address(0)\\\");\\n        _companyVault =newCompanyVaultAddress_;\\n        _isExcludedFromFees[_companyVault]=true;\\n        return true;\\n    }\\n\\n    //get growthFundVault\\n    function getGrowthFundVault() external view override returns(address){\\n       return _growthFundVault;\\n    }\\n\\n    //set growthFundVault\\n    function setGrowthFundVault(address newGrowthFundVaultAddress_) external override onlyTimeLockDAO returns(bool){\\n        require(newGrowthFundVaultAddress_!=address(0),\\\"Unable to initialize to address(0)\\\");\\n        _growthFundVault =newGrowthFundVaultAddress_;\\n        _isExcludedFromFees[_growthFundVault]=true;\\n        return true;\\n    }    \\n\\n    // Company Vaults\\n    //  privateSaleVault\\n    //  rewardBufferVault\\n    //  teamVault\\n    //  developmentVault\\n    //  marketingVault\\n    //  advisorsVault\\n    //  burnReserveVault\\n\\n    //get privateSaleVault\\n    function getPrivateSaleVault() external view override returns(address){\\n       return _privateSaleVault;\\n    }\\n\\n    //get rewardBufferVault\\n    function getRewardBufferVault() external view override returns(address){\\n       return _rewardBufferVault;\\n    }\\n\\n    //get teamVault\\n    function getTeamVault() external view override returns(address){\\n       return _teamVault;\\n    }\\n\\n    //get developmentVault\\n    function getDevelopmentVault() external view override returns(address){\\n       return _developmentVault;\\n    }\\n\\n    //get marketingVault\\n    function getMarketingVault() external view override returns(address){\\n       return _marketingVault;\\n    }\\n\\n    //get advisorsVault\\n    function getAdvisorsVault() external view override returns(address){\\n       return _advisorsVault;\\n    }\\n\\n    //get burnReserveVault\\n    function getBurnReserveVault() external view override returns(address){\\n       return _burnReserveVault;      \\n    }\\n}\"\r\n    },\r\n    \"/contracts/utils/burn_reserve_vault/interface/IBurnReserveVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\ninterface IBurnReserveVault { \\n\\n   //Event when BNB gets withdraw\\n   event WithdrawBNBFromVault(uint256 indexed amount_,address indexed from_,address indexed to_,string vaultName_);\\n\\n   //Event When Tokens are burned\\n   event TokenBurned(uint256 indexed amount_,address indexed from_);\\n   \\n   //Returns name of Vault\\n   function getVaultName() external view returns(string memory);\\n\\n   //Burn Tokens\\n   function burnTokens(uint256 amount_) external returns(bool);\\n\\n    //Function to recive BNB \\n    receive() external payable;\\n\\n    //Function to withdraw BNB \\n    function withdrawBNB(uint amount_,address to_) external  returns(bool);\\n\\n    //Function to get balance BNB \\n    function getBalanceBNB() external view returns(uint256);\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceParkToken()  external view returns(uint256);\\n\\n    //Function to Transfer Other Token balance \\n    function transferToken(address tokenaddress_,address to_,uint256 amount_) external   returns(bool);\\n\\n    //Function to Check Tokens balance \\n    function getBalanceToken(address tokenAddress_)  external view  returns(uint256);\\n\\n    //get isLotteryLaunched\\n    function getIsLotteryLaunched() external view returns(bool);\\n\\n    //set isLotteryLaunched\\n    function setIsLotteryLaunched() external returns(bool);\\n\\n}\"\r\n    },\r\n    \"/contracts/utils/burn_reserve_vault/BurnReserveVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\n//Import required contracts\\nimport '../../utils/contract_controller/interface/IContractController.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../../interface/IParkToken.sol';\\nimport './interface/IBurnReserveVault.sol';\\n\\n\\n/// @title IBurnReserveVault Contract\\n/// @dev IBurnReserveVault are the smart contract which holds some park token but transfer of these tokens are governed by owner of this contract which may be followed by dao+time-lock\\n\\ncontract BurnReserveVault is Context,IBurnReserveVault{ \\n\\n    //Using Address for address\\n    using Address for address;\\n\\n    address private _parkToken;\\n\\n    //Contract Controller\\n    address public contractController;\\n\\n    //Lottery info\\n    bool private _isLotteryLaunched=false;\\n \\n    string private constant  _VAULT_NAME=\\\"BURN RESERVE VAULT\\\";\\n\\n   constructor(address parkToken_,address contractController_){\\n        _parkToken=parkToken_;\\n        contractController=contractController_;\\n   }\\n\\n    //get isLotteryLaunched\\n    function getIsLotteryLaunched() external view returns(bool){\\n       return _isLotteryLaunched;\\n    }\\n\\n    //set isLotteryLaunched\\n    function setIsLotteryLaunched() external returns(bool){\\n       IContractController controller = IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority.\\\");\\n       require(_isLotteryLaunched!=true,\\\"Can`t launch lottery again.\\\");\\n         \\n          IParkToken parkToken =IParkToken(_parkToken);\\n          uint256 balance=parkToken.balanceOf(address(this));\\n\\n          //Burn 33% at lottery launch\\n          uint256 burnAmount=(balance*330)/1000;\\n          parkToken.burn(burnAmount);\\n          _isLotteryLaunched=true;\\n\\n          emit TokenBurned(burnAmount,_msgSender());\\n          return true;\\n    }\\n\\n   //functions returns vault name\\n   function getVaultName() public pure override  returns(string memory){\\n       return _VAULT_NAME;\\n   }\\n\\n   //Burns token\\n   function burnTokens(uint256 amount_)public override  returns(bool){\\n        IContractController controller= IContractController(contractController);\\n        require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n        require(_isLotteryLaunched==true,\\\"Can`t Burn while lottery is not launched\\\");\\n        IParkToken parkToken =IParkToken(_parkToken);\\n        parkToken.burn(amount_);\\n        emit TokenBurned(amount_,_msgSender());\\n        return true;\\n   }\\n\\n\\n    //Function to recive BNB \\n    receive() external override payable {}\\n\\n    //Function to withdraw BNB \\n    function withdrawBNB(uint amount_,address to_) external override  returns(bool){\\n         IContractController controller= IContractController(contractController);\\n        require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n        require(address(this).balance>=amount_, \\\"contract does not have sufficient BNB\\\");\\n        payable(to_).transfer(amount_);\\n        emit WithdrawBNBFromVault(amount_,address(this),to_,_VAULT_NAME);\\n        return(true);\\n   }\\n\\n    //Function to Check BNB balance\\n    function getBalanceBNB()  external view override returns(uint256){\\n        return(address(this).balance);\\n   }\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceParkToken()  external view override returns(uint256){\\n        IParkToken parkToken =IParkToken(_parkToken);\\n        return(parkToken.balanceOf(address(this)));\\n   }\\n\\n   //Transfer other tokens\\n   function transferToken(address tokenAddress_,address to_,uint256 amount_) public override  returns(bool){\\n     \\n       IContractController controller= IContractController(contractController);\\n       require(_msgSender()==controller.getTimeLockDAO(),\\\"You does not have enough authority\\\");\\n       require(tokenAddress_!=_parkToken,\\\"Can not transfer reserved  park tokens\\\");\\n       IERC20 erc20Token =IERC20(tokenAddress_);\\n       erc20Token.transfer(to_, amount_);\\n       return true;\\n   }\\n\\n\\n    //Function to Check ParkTokens balance \\n    function getBalanceToken(address tokenAddress_)  external view override returns(uint256){\\n         IERC20 erc20Token =IERC20(tokenAddress_);\\n        return(erc20Token.balanceOf(address(this)));\\n   }\\n\\n}\"\r\n    },\r\n    \"/contracts/interface/IParkToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.12 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IParkToken is  IERC20, IERC20Metadata {\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must be burn reserve vault.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount_) external returns(bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"wallets_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"timeLockDAO_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"of_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageOfUnlock_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frequencyOfUnlock_\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FREQUENCY_OF_UNLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_OF_UNLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"calculateLockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageOfUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frequencyOfUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousUnlockDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"unLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"unlockBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ParkToken", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000037d13345d54a69abe5a000d8b2b4adacab1e77bf000000000000000000000000000000000000000000000000000000000000000a5061726b20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045041524b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000002578d5a6d00c3782b2fff8ef40c653466930b245000000000000000000000000c228171e2355ae096b351f2b571f6449d285824c000000000000000000000000ab568bf3369ace2f46d770737ef975546a8051f500000000000000000000000073bcd059d3ed9330246d9cbffc9aa1cbe95ba65200000000000000000000000062acfb5e66788bd60d82dd8b162ea6342678dc5f0000000000000000000000007041f489a083d5921508d2df6b1c09fec21c2d03", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}