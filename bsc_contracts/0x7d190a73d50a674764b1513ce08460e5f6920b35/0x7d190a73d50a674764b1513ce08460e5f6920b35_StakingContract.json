{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/earnusdc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StakingContract {\\n    IERC20 public tokenContract;\\n    address public owner;\\n    uint256 public nextStakingId;\\n    uint oneWeek = 1 weeks;\\n    uint ninetyDays = 90 days;\\n\\n    struct Stake {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 stakeTime;\\n        uint256 lastWithdrawalTime;\\n    }\\n\\n    mapping(address => Stake[]) public stakes;\\n\\n    event StakingCreated(address indexed user, uint256 indexed stakingId, uint256 amount);\\n    event CapitalWithdrawn(address indexed user, uint256 indexed stakingId, uint256 amount);\\n    event InterestWithdrawn(address indexed user, uint256 indexed stakingId, uint256 amount);\\n\\n    constructor(address _tokenContract) {\\n        tokenContract = IERC20(_tokenContract);\\n        owner = msg.sender;\\n        nextStakingId = 1;\\n    }\\n\\n    function stakeTokens(uint256 _amount) external {\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(tokenContract.balanceOf(msg.sender) >= _amount, \\\"Insufficient balance\\\");\\n\\n        tokenContract.transferFrom(msg.sender, address(this), _amount);\\n\\n        stakes[msg.sender].push(\\n            Stake({\\n                id: nextStakingId,\\n                amount: _amount,\\n                stakeTime: block.timestamp,\\n                lastWithdrawalTime: block.timestamp\\n            })\\n        );\\n\\n        emit StakingCreated(msg.sender, nextStakingId, _amount);\\n\\n        nextStakingId++;\\n    }\\n\\n    function withdrawCapital(uint256 _stakingId) external {\\n        require(_stakingId > 0 && _stakingId < nextStakingId, \\\"Invalid staking ID\\\");\\n\\n        Stake[] storage userStakes = stakes[msg.sender];\\n        Stake storage stakeToWithdraw = userStakes[_stakingId - 1];\\n\\n        require(stakeToWithdraw.amount > 0, \\\"No stake available\\\");\\n        require(stakeToWithdraw.stakeTime + ninetyDays <= block.timestamp, \\\"Withdrawal period not reached\\\");\\n\\n        uint256 capitalAmount = stakeToWithdraw.amount;\\n        stakeToWithdraw.amount = 0;\\n\\n        tokenContract.transfer(msg.sender, capitalAmount);\\n\\n        emit CapitalWithdrawn(msg.sender, _stakingId, capitalAmount);\\n    }\\n\\n    function withdrawInterest(uint256 _stakingId) external {\\n        require(_stakingId > 0 && _stakingId < nextStakingId, \\\"Invalid staking ID\\\");\\n\\n        Stake[] storage userStakes = stakes[msg.sender];\\n        Stake storage stakeToWithdraw = userStakes[_stakingId - 1];\\n\\n        require(stakeToWithdraw.amount > 0, \\\"No stake available\\\");\\n\\n        uint256 currentTime = block.timestamp;\\n        uint256 timeSinceLastWithdrawal = currentTime - stakeToWithdraw.lastWithdrawalTime;\\n        require(timeSinceLastWithdrawal >= oneWeek, \\\"Insufficient time elapsed\\\");\\n\\n        uint256 interestAmount = (stakeToWithdraw.amount * 8) / 100; // 1.5% of the stake\\n        stakeToWithdraw.lastWithdrawalTime = currentTime;\\n\\n        tokenContract.transfer(msg.sender, interestAmount);\\n\\n        emit InterestWithdrawn(msg.sender, _stakingId, interestAmount);\\n    }\\n\\n    function getStakingIds(address _address) external view returns (uint256[] memory) {\\n        Stake[] storage userStakes = stakes[_address];\\n        uint256[] memory stakingIds = new uint256[](userStakes.length);\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            stakingIds[i] = userStakes[i].id;\\n        }\\n\\n        return stakingIds;\\n    }\\n    function calmDownPeriod() public view returns (uint) {\\n        return oneWeek;\\n    }\\n    function maturityPeriod() public view returns (uint) {\\n        return ninetyDays;\\n    }\\n\\n\\n    function withdrawTokens(uint256 _amount) external {\\n        require(msg.sender == owner, \\\"Only the owner can withdraw tokens\\\");\\n        require(_amount <= tokenContract.balanceOf(address(this)), \\\"Insufficient balance\\\");\\n\\n        tokenContract.transfer(owner, _amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CapitalWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calmDownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakingIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStakingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"withdrawCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"withdrawInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}