{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\n// Basic interface for a BEP20 token on the Binance Smart Chain (BSC).\r\ninterface IBEP20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event ExecutedTransaction(address indexed target, uint256 value, bytes data);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n// Library to safely conduct arithmetic operations.\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Guard against reentrancy attacks.\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter = 1;\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// Agatech BEP20 token implementation on BSC.\r\ncontract Agatech is IBEP20, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Agatech\";\r\n    string public constant symbol = \"AGATA\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 private _totalSupply = 10000000 * (10 ** uint256(decimals));\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address public AgatechMultisig;\r\n\r\n    constructor() {\r\n    // Initialize addresses for various wallets used for fund distribution based on tokenomics.\r\n    // These wallets are presumably Gnosis multisig wallets for increased security and governance control.\r\n\r\n    // The main multisig wallet address for Agatech.\r\n    AgatechMultisig = 0xB21bB842f61A50dB973408becd78E597EfC4c910;\r\n    // Address of the Deployer\r\n    address deployerWallet = 0x6672134E8838468A10d10a1E4108a0F74D3a495E;\r\n    // Address for the team's vesting wallet.\r\n    address teamVestingWallet = 0xB633cc81E237ca386c1Ca192eFcdB00AB1AE75BB;\r\n    // Address for the development fund wallet.\r\n    address developmentFundWallet = 0x3d8f408991015cAbCC319c48CcfdD1Fe04e6c37e;\r\n    // Address for platform and features development.\r\n    address platformsFeaturesWallet = 0x6AB5bd5ba5E10EBd588b925B2a043A0b95Ed2895;\r\n    // Address for strategic alliances wallet.\r\n    address strategicAlliancesWallet = 0xc7D4Bb84ED88795cDA36fE1Fdd3814D4d54128c7;\r\n    // Address for the treasury reserves wallet.\r\n    address treasuryReservesWallet = 0xF78aA5c618b541927E91fF628C0dB74d230a694b;\r\n    // Address for the AgaPaid initiative wallet.\r\n    address agaPaidInitiativeWallet = 0x372788630a8fe0ee0aF4899359bCe1fc2D2CA4F6;\r\n\r\n    // Safety checks to ensure that none of the provided addresses are the zero address.\r\n    // Using the zero address could lead to irrecoverable tokens.\r\n    require(AgatechMultisig != address(0), \"AgatechMultisig: Zero address is not allowed\");\r\n    require(deployerWallet != address(0), \"deployerWallet: Zero address is not allowed\");\r\n    require(teamVestingWallet != address(0), \"TeamVestingWallet: Zero address is not allowed\");\r\n    require(developmentFundWallet != address(0), \"DevelopmentFundWallet: Zero address is not allowed\");\r\n    require(platformsFeaturesWallet != address(0), \"PlatformsFeaturesWallet: Zero address is not allowed\");\r\n    require(strategicAlliancesWallet != address(0), \"StrategicAlliancesWallet: Zero address is not allowed\");\r\n    require(treasuryReservesWallet != address(0), \"TreasuryReservesWallet: Zero address is not allowed\");\r\n    require(agaPaidInitiativeWallet != address(0), \"AgaPaidInitiativeWallet: Zero address is not allowed\");\r\n\r\n    // Token distribution according to predefined tokenomics. \r\n    // The token distribution percentages are multiplied and divided accordingly \r\n    // to ensure the right amount of tokens are sent to each address.\r\n    _balances[deployerWallet] = _totalSupply.mul(5).div(100); // 5% of the total supply goes to the deployer's address for liquidity purposes.\r\n    _balances[AgatechMultisig] = _totalSupply.mul(40).div(100); // 40% for the AgatechMultisig.\r\n    _balances[teamVestingWallet] = _totalSupply.mul(10).div(100); // 10% for team vesting.\r\n    _balances[developmentFundWallet] = _totalSupply.mul(10).div(100); // 10% for development fund.\r\n    _balances[platformsFeaturesWallet] = _totalSupply.mul(20).div(100); // 20% for platform and features.\r\n    _balances[strategicAlliancesWallet] = _totalSupply.mul(5).div(100); // 5% for strategic alliances.\r\n    _balances[treasuryReservesWallet] = _totalSupply.mul(5).div(100); // 5% for treasury reserves.\r\n    _balances[agaPaidInitiativeWallet] = _totalSupply.mul(5).div(100); // 5% for the AgaPaid initiative.\r\n\r\n    // Emitting transfer events for each distribution for transparency and ledger tracking.\r\n    // Each Transfer event indicates that a certain amount of tokens \r\n    // were minted and assigned to the respective address.\r\n    emit Transfer(address(0), deployerWallet, _balances[deployerWallet]); // Transfer event for the deployer's address.\r\n    emit Transfer(address(0), AgatechMultisig, _balances[AgatechMultisig]); // For AgatechMultisig.\r\n    emit Transfer(address(0), teamVestingWallet, _balances[teamVestingWallet]); // For team vesting.\r\n    emit Transfer(address(0), developmentFundWallet, _balances[developmentFundWallet]); // For development fund.\r\n    emit Transfer(address(0), platformsFeaturesWallet, _balances[platformsFeaturesWallet]); // For platforms and features.\r\n    emit Transfer(address(0), strategicAlliancesWallet, _balances[strategicAlliancesWallet]); // For strategic alliances.\r\n    emit Transfer(address(0), treasuryReservesWallet, _balances[treasuryReservesWallet]); // For treasury reserves.\r\n    emit Transfer(address(0), agaPaidInitiativeWallet, _balances[agaPaidInitiativeWallet]); // For AgaPaid initiative.\r\n}\r\n\r\n// Modifier to ensure that only the contract's owner can execute certain functions.\r\n    // Ensure that the caller is the owner of the contract.\r\n    // Continue with the function execution after the modifier.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == AgatechMultisig, \"Not the contract owner\");\r\n        _;  \r\n    }\r\n\r\n// Implementation of the standard BEP20 function to get the total supply of the token.\r\nfunction totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n}\r\n\r\n// Implementation of the standard BEP20 function to get the balance of a specific account.\r\nfunction balanceOf(address account) external view override returns (uint256) {\r\n    return _balances[account];\r\n}\r\n\r\n// Implementation of the standard BEP20 function that allows the transfer of tokens between addresses.\r\nfunction transfer(address recipient, uint256 amount) external override nonReentrant returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n}\r\n\r\n// Implementation of the standard BEP20 function to check the allowance set by an owner for a spender.\r\nfunction allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n}\r\n\r\n// Implementation of the standard BEP20 function that sets an allowance for a spender by the owner.\r\nfunction approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n}\r\n\r\n// Implementation of the standard BEP20 function to transfer tokens on behalf of someone, \r\n// taking into account the allowance set by the owner for the msg.sender.\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external override nonReentrant returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    uint256 currentAllowance = _allowances[sender][msg.sender];\r\n    require(currentAllowance >= amount, \"Transfer amount exceeds allowance\");\r\n    _approve(sender, msg.sender, currentAllowance.sub(amount));\r\n    return true;\r\n}\r\n\r\n// Internal utility function for transferring tokens from one address to another.\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"Cannot transfer from the zero address\");\r\n    require(recipient != address(0), \"Cannot transfer to the zero address\");\r\n    require(amount <= _balances[sender], \"Transfer amount exceeds balance\");\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n}\r\n\r\n// Internal utility function to set the allowance.\r\nfunction _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"Cannot approve from the zero address\");\r\n    require(spender != address(0), \"Cannot approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n}\r\n\r\n// Function that allows the multisig owner to execute arbitrary transactions.\r\n// This is presumably a function used for multisig governance.\r\nfunction executeTransaction(address target, uint256 value, bytes memory data) external onlyOwner {\r\n    (bool success,) = target.call{value: value}(data);\r\n    require(success, \"Failed to execute transaction\");\r\n    emit ExecutedTransaction(target, value, data);\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutedTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AgatechMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Agatech", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://547638affc7997308398eb5364cc1d33ffe6771b68c7165e4ac82e19dd8d0cd1"}