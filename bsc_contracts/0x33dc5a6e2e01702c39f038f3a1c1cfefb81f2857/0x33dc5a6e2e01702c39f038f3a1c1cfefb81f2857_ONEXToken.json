{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    mapping(address => bool) public addressAdmin;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function addAdmin(address _address) external onlyOwner {\r\n        addressAdmin[_address] = true;\r\n    }\r\n\r\n    function removeAdmin(address _address) external onlyOwner {\r\n        addressAdmin[_address] = false;\r\n    }\r\n\r\n    modifier admin() {\r\n        require(\r\n            addressAdmin[msg.sender] == true || owner() == _msgSender(),\r\n            \"You do not have auth to do this\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // modifier onlyOwner() {\r\n    //     require(owner() == _msgSender() || addressAdmin[msg.sender] == true, \"Ownable: caller is not the owner\");\r\n    //     _;\r\n    // }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ONEXToken is ERC20, Ownable {\r\n    uint256 public MAX_SUPPLY = 100000000 * 10 ** 18;\r\n    uint256 public MINT_PRICE = 0.00413 ether; // BNB has the same decimals as Ether\r\n    uint256 public USDT_MINT_PRICE = 1 ether; // BSC USDT has the same decimals as Ether\r\n    uint256 public REFERRAL_REWARD_PERCENT = 1;\r\n    uint256 public MINIMUM_MINT_FOR_REFERRAL = 0 * 10 ** 18;\r\n    uint256 public MIN_MINT = 100 * 10 ** 18;\r\n    uint256 public MAX_MINT = 1000000 * 10 ** 18;\r\n    uint256 public MAX_TOTAL_REWARDS = MAX_SUPPLY / 10; // 10% of MAX_SUPPLY\r\n    uint256 public totalRewards = 0;\r\n    mapping(address => address) public referrers;\r\n    address public paymentTokenAddress =\r\n        0x55d398326f99059fF775485246999027B3197955; // BSC USDT\r\n    bool public isUSDTMintingEnabled = false;\r\n    bool public isMintingEnabled = true;\r\n    uint256 public mintTime;\r\n    uint256 public RESTRICTED_TRANSFER_PERIOD = 30 days;\r\n    struct StakeInfo {\r\n        uint256 amount;\r\n        uint256 stakedAt;\r\n        uint256 claimableAt;\r\n        uint256 unstakeBalance;\r\n    }\r\n\r\n    uint256 public STAKING_DIRECTLY_REWARD_PERCENT = 0;\r\n    uint256 public MAX_STAKING_REWARD_PERCENT = 300000;\r\n    uint256 public INCREMENTAL_DAILY_REWARD_PERCENT = 550;\r\n    uint256 public MIN_STAKING = 100 * 10 ** 18;\r\n    uint256 public STAKING_LOCKED_TIME = 7 days;\r\n\r\n    mapping(address => StakeInfo) public stakes;\r\n    event UnstakeEvent(\r\n        address indexed user,\r\n        uint256 indexed amount,\r\n        uint256 indexed claimdate\r\n    );\r\n    event StakeEvent(\r\n        address indexed user,\r\n        uint256 indexed amount,\r\n        uint256 indexed stakedate\r\n    );\r\n    event ClaimUnstakeEvent(address indexed user, uint256 indexed amount);\r\n    event RestakeEvent(\r\n        address indexed user,\r\n        uint256 indexed restakedate,\r\n        uint256 indexed amount\r\n    );\r\n\r\n    constructor(address _initialOwner , address _firstAdmin) ERC20(\"OneX Token\", \"ONEX\") {\r\n        mintTime = block.timestamp; // The mintTime is set when the contract is deployed\r\n        transferOwnership(_initialOwner); // Set the owner of the contract to _initialOwner\r\n        addressAdmin[_firstAdmin] = true;\r\n    }\r\n\r\n    // The mint function allows a user to mint tokens by paying BNB\r\n    function mint(address _to, uint256 _amount) public payable {\r\n        require(isMintingEnabled, \"Minting is disabled\");\r\n        require(_amount >= MIN_MINT, \"Amount is less than minimum mint\");\r\n        require(_amount <= MAX_MINT, \"Amount is more than maximum mint\");\r\n        require(totalSupply() + _amount <= MAX_SUPPLY, \"Exceeds max supply\");\r\n        require(\r\n            msg.value == (_amount * MINT_PRICE) / 10 ** 18,\r\n            \"BNB value sent is not correct\"\r\n        );\r\n\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    // The mint function allows a user to mint tokens by paying BNB\r\n    function usdtMint(address _to, uint256 _amount) public payable {\r\n        require(totalSupply() + _amount <= MAX_SUPPLY, \"Exceeds max supply\");\r\n        require(_amount >= MIN_MINT, \"Amount is less than minimum mint\");\r\n        require(_amount <= MAX_MINT, \"Amount is more than maximum mint\");\r\n        uint256 paymentAmount = (_amount * USDT_MINT_PRICE) / 10 ** 18;\r\n        require(\r\n            IERC20(paymentTokenAddress).balanceOf(msg.sender) >= paymentAmount,\r\n            \"Insufficient token balance\"\r\n        );\r\n\r\n        // Transfer the payment amount from the caller to this contract\r\n        IERC20(paymentTokenAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            paymentAmount\r\n        );\r\n\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    // Referral mint\r\n    function referralMint(\r\n        address _to,\r\n        uint256 _amount,\r\n        address _referrer\r\n    ) external payable {\r\n        require(isMintingEnabled, \"Minting is disabled\");\r\n        require(_amount >= MIN_MINT, \"Amount is less than minimum mint\");\r\n        require(_amount <= MAX_MINT, \"Amount is more than maximum mint\");\r\n        // Create a mapping if there is no referrer yet.\r\n        if (referrers[_to] == address(0) && _to != _referrer) {\r\n            referrers[_to] = _referrer;\r\n        }\r\n\r\n        // Mint to the _to address regardless of the referrer status.\r\n        mint(_to, _amount);\r\n\r\n        // Get the mapped referrer.\r\n        address mappedReferrer = referrers[_to];\r\n\r\n        // If there is a valid referrer, and it meets the minimum mint requirement, reward them.\r\n        if (\r\n            mappedReferrer != address(0) &&\r\n            mappedReferrer != _to &&\r\n            balanceOf(mappedReferrer) >= MINIMUM_MINT_FOR_REFERRAL\r\n        ) {\r\n            StakeInfo storage stakeInfo = stakes[mappedReferrer];\r\n            uint256 reward = (_amount * REFERRAL_REWARD_PERCENT) / 100;\r\n            uint256 referralBalance = balanceOf(mappedReferrer) + stakeInfo.amount + stakeInfo.unstakeBalance;\r\n            if (referralBalance < reward) {\r\n                reward = referralBalance;\r\n            }\r\n            _mint(mappedReferrer, reward);\r\n        }\r\n    }\r\n\r\n    // The mint function allows a user to mint tokens by paying USDT\r\n    function usdtReferralMint(\r\n        address _to,\r\n        uint256 _amount,\r\n        address _referrer\r\n    ) public {\r\n        require(totalSupply() + _amount <= MAX_SUPPLY, \"Exceeds max supply\");\r\n        require(_amount >= MIN_MINT, \"Amount is less than minimum mint\");\r\n        require(_amount <= MAX_MINT, \"Amount is more than maximum mint\");\r\n        // Transfer USDT from sender to this contract\r\n        require(\r\n            IERC20(paymentTokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                (_amount * USDT_MINT_PRICE) / 10 ** 18\r\n            ),\r\n            \"USDT transfer failed\"\r\n        );\r\n\r\n        // Create a mapping if there is no referrer yet.\r\n        if (referrers[_to] == address(0) && _to != _referrer) {\r\n            referrers[_to] = _referrer;\r\n        }\r\n\r\n        // Mint to the _to address regardless of the referrer status.\r\n        _mint(_to, _amount);\r\n\r\n        // Get the mapped referrer.\r\n        address mappedReferrer = referrers[_to];\r\n\r\n        // If there is a valid referrer, and it meets the minimum mint requirement, reward them.\r\n        if (\r\n            mappedReferrer != address(0) &&\r\n            mappedReferrer != _to &&\r\n            balanceOf(mappedReferrer) >= MINIMUM_MINT_FOR_REFERRAL\r\n        ) {\r\n            uint256 reward = (_amount * REFERRAL_REWARD_PERCENT) / 100;\r\n            uint256 referralBalance = balanceOf(mappedReferrer);\r\n            if (referralBalance < reward) {\r\n                reward = referralBalance;\r\n            }\r\n            _mint(mappedReferrer, reward);\r\n        }\r\n    }\r\n\r\n    // Allow the contract owner to update the mint price\r\n    function setMintPrice(uint256 _newPrice) external admin {\r\n        MINT_PRICE = _newPrice;\r\n    }\r\n\r\n    // Function to increase max supply, can only be called by contract owner\r\n    function addMaxSupply(uint256 _amount) public admin {\r\n        MAX_SUPPLY = MAX_SUPPLY + _amount;\r\n    }\r\n\r\n    function editMinMint(uint256 _amount) public admin {\r\n        MIN_MINT = _amount;\r\n    }\r\n\r\n    function editMaxMint(uint256 _amount) public admin {\r\n        MAX_MINT = _amount;\r\n    }\r\n\r\n    // Function to burn tokens, can be called by any user with a balance\r\n    function burn(uint256 _amount) public {\r\n        require(balanceOf(msg.sender) >= _amount, \"Not enough tokens to burn\");\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    // Allow the contract owner to update the usdt mint price\r\n    function setUsdtMintPrice(uint256 _newPrice) external admin {\r\n        USDT_MINT_PRICE = _newPrice;\r\n    }\r\n\r\n    // Allow the contract owner to update the referral reward percentage\r\n    function setReferralRewardPercent(uint256 _newPercent) external admin {\r\n        REFERRAL_REWARD_PERCENT = _newPercent;\r\n    }\r\n\r\n    function setPaymentTokenAddress(\r\n        address _paymentTokenAddress\r\n    ) external admin {\r\n        paymentTokenAddress = _paymentTokenAddress;\r\n    }\r\n\r\n    function toggleMinting() external admin {\r\n        isMintingEnabled = !isMintingEnabled;\r\n    }\r\n\r\n    function toggleUSDTMinting() external admin {\r\n        isUSDTMintingEnabled = !isUSDTMintingEnabled;\r\n    }\r\n\r\n    // Allow the contract owner to update the minimum mint for referral\r\n    function setMinimumMintForReferral(uint256 _newMinimum) external admin {\r\n        MINIMUM_MINT_FOR_REFERRAL = _newMinimum;\r\n    }\r\n\r\n    // Allows a user to stake tokens\r\n    function stake(uint256 _amount) external {\r\n        require(balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\r\n        require(_amount >= MIN_STAKING, \"Amount is less than minimum staking\");\r\n\r\n        StakeInfo storage stakeInfo = stakes[msg.sender];\r\n\r\n        // Unstaking the previous staked tokens and staking rewards\r\n        if (stakeInfo.amount > 0) {\r\n            restake();\r\n        }\r\n\r\n        _transfer(msg.sender, address(this), _amount);\r\n\r\n        stakeInfo.amount += _amount;\r\n        stakeInfo.stakedAt = block.timestamp;\r\n        emit StakeEvent(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    //Check the balance of staked tokens and rewards\r\n    function checkStakeBalance(address _user) public view returns (uint256) {\r\n        StakeInfo storage stakeInfo = stakes[_user];\r\n        uint256 stakingDays = (block.timestamp - stakeInfo.stakedAt) / 1 days;\r\n        uint256 stakingRewardPercent = STAKING_DIRECTLY_REWARD_PERCENT +\r\n            INCREMENTAL_DAILY_REWARD_PERCENT *\r\n            stakingDays;\r\n        if (stakingRewardPercent > MAX_STAKING_REWARD_PERCENT) {\r\n            stakingRewardPercent = MAX_STAKING_REWARD_PERCENT;\r\n        }\r\n\r\n        uint256 stakingReward = (stakeInfo.amount * stakingRewardPercent) /\r\n            1000000;\r\n        return stakeInfo.amount + stakingReward;\r\n    }\r\n\r\n    // Allows a user to unstake tokens and claim rewards\r\n    function unstake() public {\r\n        StakeInfo storage stakeInfo = stakes[msg.sender];\r\n        require(stakeInfo.amount > 0, \"No staked tokens\");\r\n\r\n        // Calculate staking reward\r\n        uint256 stakingDays = (block.timestamp - stakeInfo.stakedAt) / 1 days;\r\n        uint256 stakingRewardPercent = STAKING_DIRECTLY_REWARD_PERCENT +\r\n            INCREMENTAL_DAILY_REWARD_PERCENT *\r\n            stakingDays;\r\n        if (stakingRewardPercent > MAX_STAKING_REWARD_PERCENT) {\r\n            stakingRewardPercent = MAX_STAKING_REWARD_PERCENT;\r\n        }\r\n\r\n        uint256 stakingReward = (stakeInfo.amount * stakingRewardPercent) /\r\n            1000000;\r\n\r\n        // Check if the total rewards exceed the max limit\r\n        require(\r\n            totalRewards + stakingReward <= MAX_TOTAL_REWARDS,\r\n            \"Total rewards limit reached\"\r\n        );\r\n\r\n        // Update total rewards\r\n        totalRewards += stakingReward;\r\n\r\n        // Transfer staked tokens and reward back to the staker\r\n        // _transfer(address(this), msg.sender, stakeInfo.amount + stakingReward);\r\n\r\n        // Reset staking info\r\n        stakeInfo.unstakeBalance += stakeInfo.amount + stakingReward;\r\n        stakeInfo.amount = 0;\r\n        stakeInfo.stakedAt = 0;\r\n        stakeInfo.claimableAt = block.timestamp + STAKING_LOCKED_TIME;\r\n        emit UnstakeEvent(\r\n            msg.sender,\r\n            stakeInfo.unstakeBalance,\r\n            stakeInfo.claimableAt\r\n        );\r\n    }\r\n\r\n    //Claim unstock tokens\r\n    function claimUnstake() public {\r\n        StakeInfo storage stakeInfo = stakes[msg.sender];\r\n        require(stakeInfo.unstakeBalance > 0, \"No unstaked tokens\");\r\n        require(\r\n            stakeInfo.claimableAt <= block.timestamp,\r\n            \"Unstake tokens are locked and only claimable after 7 days\"\r\n        );\r\n\r\n        // Transfer unstaked tokens back to the staker\r\n        _transfer(address(this), msg.sender, stakeInfo.unstakeBalance);\r\n        emit ClaimUnstakeEvent(msg.sender, stakeInfo.unstakeBalance);\r\n        // Reset unstake balance\r\n        stakeInfo.claimableAt = 0;\r\n        stakeInfo.unstakeBalance = 0;\r\n    }\r\n\r\n    //Restake unstaked tokens\r\n    function restake() public {\r\n        StakeInfo storage stakeInfo = stakes[msg.sender];\r\n        require(stakeInfo.amount > 0, \"No staked tokens\");\r\n\r\n        uint256 totalUserBalance = checkStakeBalance(msg.sender);\r\n\r\n        stakeInfo.amount = totalUserBalance;\r\n        stakeInfo.stakedAt = block.timestamp;\r\n        emit RestakeEvent(msg.sender, block.timestamp, totalUserBalance);\r\n    }\r\n\r\n    // Setters for owner to adjust staking parameters\r\n    function setStakingDirectlyRewardPercent(\r\n        uint256 _newPercent\r\n    ) external admin {\r\n        STAKING_DIRECTLY_REWARD_PERCENT = _newPercent;\r\n    }\r\n\r\n    function setMaxStakingRewardPercent(uint256 _newPercent) external admin {\r\n        MAX_STAKING_REWARD_PERCENT = _newPercent;\r\n    }\r\n\r\n    function setMinStaking(uint256 _amount) external admin {\r\n        MIN_STAKING = _amount;\r\n    }\r\n\r\n    function setIncrementalDailyRewardPercent(\r\n        uint256 _newPercent\r\n    ) external admin {\r\n        INCREMENTAL_DAILY_REWARD_PERCENT = _newPercent;\r\n    }\r\n\r\n    function setMaxTotalRewards(uint256 _newAmount) external admin {\r\n        MAX_TOTAL_REWARDS = _newAmount;\r\n    }\r\n\r\n    // Allows the owner to withdraw BNB from the contract\r\n    function withdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    // Allows the owner to withdraw any ERC20 token from the contract\r\n    function withdrawERC20(address _tokenAddress) external onlyOwner {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        token.transfer(owner(), token.balanceOf(address(this)));\r\n    }\r\n\r\n    function setMintTime(uint256 _timestamp) external admin {\r\n        mintTime = _timestamp;\r\n    }\r\n\r\n    function setMintTimeRestrict(uint256 _seconds) external admin {\r\n        RESTRICTED_TRANSFER_PERIOD = _seconds;\r\n    }\r\n\r\n    // Function to restrict token transfers during the restricted period\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        // Transfer restriction doesn't apply for minting (when from address is zero)\r\n        // Transfer restriction also doesn't apply for the contract owner\r\n        if (from != address(0) && from != owner() && to != address(this)) {\r\n            require(\r\n                block.timestamp >= mintTime + RESTRICTED_TRANSFER_PERIOD,\r\n                \"Token transfer restricted until the end of the period\"\r\n            );\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_firstAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimUnstakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"restakedate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RestakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedate\",\"type\":\"uint256\"}],\"name\":\"StakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimdate\",\"type\":\"uint256\"}],\"name\":\"UnstakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INCREMENTAL_DAILY_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKING_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_MINT_FOR_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESTRICTED_TRANSFER_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_DIRECTLY_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_LOCKED_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"editMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"editMinMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUSDTMintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"referralMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"setIncrementalDailyRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxStakingRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumMintForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setMintTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMintTimeRestrict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentTokenAddress\",\"type\":\"address\"}],\"name\":\"setPaymentTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"setReferralRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"setStakingDirectlyRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setUsdtMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUSDTMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdtMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"usdtReferralMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ONEXToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000051b4e941871e4fa8dd3df8a95b691464e2e19a600000000000000000000000000fea5da7ecffb55cc24289587533f572a84f9c70", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7adab77ef8056140d5e45099cff1d32437adb2e4534db499c0237f2272fe6e5a"}