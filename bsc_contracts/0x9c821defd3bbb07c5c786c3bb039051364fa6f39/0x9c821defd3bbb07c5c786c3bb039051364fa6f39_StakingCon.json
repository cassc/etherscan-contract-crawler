{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakingCon.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract StakingCon {\\n    using SafeMath for uint256;\\n\\n    //\u4e00\u5929\u7684\u79d2\u6570\\n    uint private constant secondsForOneDay = 86400;//86400;\\n\\n    //\u65f6\u533a\u8c03\u6574\\n    uint private constant timeZoneDiff = 28800;\\n\\n    //admin control\\n    //contract owner address\\n    address private _owner;\\n    address private _admin;\\n\\n    //contract switch\\n    bool private _switchOn = false;\\n\\n    //IERC FLT token Obj\\n    address public _fltTokenContract;\\n\\n    //fltTokenContract\\n    address public _filTokenContract;\\n\\n    struct maxMiningPowerType{\\n        uint256 canSell;\\n        uint256 canNotSell;\\n    }\\n    //mine pool info struct \\n    struct minePool{\\n        IERC20      tokenInterface;             \\n        address     tokenAddress;               \\n        uint        expireType;                 \\n        uint        actionType;         \\n\\n        maxMiningPowerType      maxMiningPower;\\n        address     earlyRedeemFundAccount;       \\n        address     redeemFundAccount;        \\n        address     minerAccount;\\n        uint256     stakingPrice;      \\n        uint256     tokenRate;          \\n        uint256     FILRate;       \\n        uint        tokenPrecision;\\n\\n        address     recievePaymentAccount;\\n        uint256     miniPurchaseAmount;\\n        uint256     hasSoldOutToken;\\n        uint        lockInterval;\\n        uint256[]   poolThredhold;\\n        uint[]    serviceFeePercent;\\n    }   \\n\\n    struct minePoolWrapper{\\n        minePool mPool;\\n        bool    isEntity;\\n    }\\n\\n    //minepool map\\n    mapping(uint => minePoolWrapper) public minePoolMap;\\n\\n    mapping(address => userOrder[]) public userData;\\n\\n    address[] public minerPool;\\n    \\n    /** \\n    * struct for hold the ratio info\\n    */\\n    struct ratioStruct {\\n        uint256 ostakingPrice;     \\n        uint  oserviceFeePercent;  \\n        uint256 oActiveInterest;\\n\\n        uint256 oFrozenInterest;\\n        uint256 oHasReceiveInterest;\\n        uint256 oNeedToPayGasFee;   \\n        uint256 admineUpdateTime;\\n    }\\n\\n    /**\\n     * @dev user order for mine\\n    */\\n    struct userOrder {\\n        address user;              \\n        uint256 amount;           \\n        uint    poolID;             \\n        bool    status;            \\n        uint256 cfltamount;        \\n        uint256 createTime;         \\n        address targetminer;       \\n        ratioStruct ratioInfo;\\n        uint    lastProfitEnd;     \\n        uint256 lastProfitPerGiB;  \\n        uint    stopDayTime;       \\n        uint  isPremium;      \\n\\n    }\\n\\n    /**\\n        add map for recording the user's vip level\\n     */\\n    struct userPremiumLevelInfoType {\\n        address userAddr;\\n        uint  levelIndex;\\n        uint256 levelThredholdValue;\\n        uint  levelServerFee;\\n    }\\n    mapping(address => userPremiumLevelInfoType) public userPremiumLevelInfo;\\n\\n    //event\\n    event OwnershipTransferred(\\n        address     owner,       \\n        address     newOwner   \\n    );\\n\\n    /**\\n     * @dev event for output some certain info about user order\\n    */\\n\\n    //minePool mPool\\n    event EventUserStaking(\\n        address     user,\\n        uint        orderID,\\n        uint256     amount,\\n        uint        poolID,\\n        uint256     cfltamount,\\n        address     tokenAddress,        \\n        uint        expireType,    \\n        uint        actionType,          \\n        uint        serviceFeePercent   \\n    );\\n\\n    /**\\n     * @dev event for redeem operating when expiring\\n    */\\n    event EventRedeem(address user,uint orderID,uint256 fee,bool isExpire,address mPool);\\n\\n    /**\\n     * @dev event for withdraw operating\\n    */\\n    event EventWithDraw(address user,uint poolID,uint orderID,uint256 profitAmount);\\n\\n    //parameters : HFIL token, \\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    //used for add admin control \\n    modifier onlyOwner() { // Modifier\\n        require(\\n            msg.sender == _owner,\\n            \\\"Only onwer can call this.\\\"\\n        );\\n        _;\\n    }\\n\\n    //used for add admin control \\n    modifier ownerAndAdmin() { // Modifier\\n        require(\\n            msg.sender == _owner || msg.sender == _admin,\\n            \\\"Only onwer or admin can call this.\\\"\\n        );\\n        _;\\n    }\\n\\n    //lock the contract for safing \\n    modifier switchOn() { // Modifier\\n        require(\\n            _switchOn,\\n            \\\"switch is off\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev event for setting a new admin account\\n    */\\n    event SetAdminEvent(address newAdminUser);\\n\\n    /**\\n     * @dev event for changing switch state\\n    */\\n    event SwitchOnContractEvent(bool operate);\\n\\n    /**\\n     * @dev event for adding FILE token contract address\\n    */\\n    event AddFLTTokenContractEvent(address fltToken);\\n\\n    /**\\n     * @dev event for adding FIL token contract address\\n    */\\n    event AddFILTokenContractEvent(address filTokenCon);\\n\\n    /**\\n     * @dev event for mark fee changes\\n    */\\n    event MarkingFeeChanges(address user,uint orderID,uint256 activeInterest, uint256 fee);\\n\\n    //owner set a admin permission\\n    function setAdmin(address newAdminUser) external onlyOwner returns (bool){\\n        require(newAdminUser != address(0), \\\"StakingCon:setAdmin: new admin user is the zero address\\\");\\n        emit SetAdminEvent(newAdminUser);\\n        _admin = newAdminUser;\\n        return true;\\n    }\\n\\n    //switch on or off the contract \\n    function switchOnContract(bool op) external ownerAndAdmin returns (bool){\\n        emit SwitchOnContractEvent(op);\\n        _switchOn = op;\\n        return true;\\n    }\\n\\n    // transfer current owner to a new owner account\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    \\n    //===================================user operate ==================================================\\n    //stake for user\\n\\n    function stake(uint256 amount,uint poolID) external switchOn returns(bool){\\n        //todo user need to be checked \\n        require(minePoolMap[poolID].isEntity,\\\"current pool does not exist\\\");\\n        require(minePoolMap[poolID].mPool.actionType == 1,\\\"current pool action type mismatch\\\");\\n\\n        minePool memory localPool = minePoolMap[poolID].mPool;\\n\\n        require(localPool.recievePaymentAccount != address(0), \\\"there is no such miner address in the contract\\\" );\\n        \\n        // ((minFILAmount / 10**18) * tokenRate / FilRate)* tokenPrecision \\n        uint256 miniTokenAmount = localPool.miniPurchaseAmount.mul(10**minePoolMap[poolID].mPool.tokenPrecision).mul(localPool.tokenRate).div(localPool.FILRate).div(10**18);\\n        require(miniTokenAmount <= amount, \\\"input amount must be larger than min amount\\\" );\\n        address minerAddr = localPool.recievePaymentAccount;\\n\\n        uint256 power = convertTokenToPower(amount,poolID);\\n       \\n        uint isPremiumLatest  = 0;\\n        if (userData[msg.sender].length > 0){\\n            isPremiumLatest = userData[msg.sender][userData[msg.sender].length - 1].isPremium;\\n        }else{\\n            //if current use is a new one ,just init a level info \\n            userPremiumLevelInfo[msg.sender] = userPremiumLevelInfoType({\\n                userAddr:               msg.sender,    \\n                levelIndex:             isPremiumLatest,\\n                levelThredholdValue:    localPool.poolThredhold[isPremiumLatest],\\n                levelServerFee:         localPool.serviceFeePercent[isPremiumLatest]\\n            });\\n        }\\n        //calculate the server fee level\\n        uint calcuResult = checkisPremium(amount ,minePoolMap[poolID].mPool.poolThredhold);\\n        if (isPremiumLatest < calcuResult ){\\n            isPremiumLatest = calcuResult;\\n\\n            //record the users level premium info, only update when isPremiumLatest has changed\\n            \\n            userPremiumLevelInfo[msg.sender] = userPremiumLevelInfoType({\\n                userAddr:               msg.sender,    \\n                levelIndex:             isPremiumLatest,\\n                levelThredholdValue:    localPool.poolThredhold[isPremiumLatest],\\n                levelServerFee:         localPool.serviceFeePercent[isPremiumLatest]\\n            });\\n        }\\n\\n        ratioStruct memory ratioInfo;\\n        ratioInfo.ostakingPrice    = localPool.stakingPrice.mul(localPool.tokenRate).div(localPool.FILRate);\\n        ratioInfo.oserviceFeePercent = localPool.serviceFeePercent[isPremiumLatest];\\n\\n        userData[msg.sender].push(\\n            userOrder({\\n                user:               msg.sender,\\n                amount :            amount,\\n                status :            false,\\n                cfltamount :        power,\\n                poolID :            poolID,\\n                createTime :        block.timestamp,\\n                targetminer :       minerAddr ,\\n                ratioInfo  :        ratioInfo,\\n                lastProfitEnd :     0,\\n                lastProfitPerGiB :  0,\\n                stopDayTime :       0,\\n                isPremium   :       isPremiumLatest\\n            })\\n        );\\n\\n        require(minePoolMap[poolID].mPool.maxMiningPower.canSell >= power ,\\\"the current pool have no enough token to be selled\\\");\\n\\n        minePoolMap[poolID].mPool.maxMiningPower.canSell = minePoolMap[poolID].mPool.maxMiningPower.canSell.sub(power);\\n\\n        require(minePoolMap[poolID].mPool.tokenInterface.transferFrom(msg.sender,address(this),amount),\\\"failed to transfer token to contract account for staking\\\");//minerAddress\\n\\n        minePoolMap[poolID].mPool.hasSoldOutToken = minePoolMap[poolID].mPool.hasSoldOutToken.add(amount);\\n\\n        emit EventUserStaking(\\n            msg.sender,\\n            userData[msg.sender].length - 1,\\n            amount,\\n            poolID,\\n            power,\\n            localPool.tokenAddress, \\n            localPool.expireType, \\n            localPool.actionType,    \\n            ratioInfo.oserviceFeePercent\\n        );\\n        return true;\\n    }\\n\\n    function redeem(uint orderID, bool withdrawType) external returns(bool){\\n\\n        require(userData[msg.sender].length > 0,\\\"cannot find this user from contract for redeem\\\");\\n        //calculate the rules\\n        require(userData[msg.sender][orderID].user!=address(0),\\\"stakingCon:redeem: cannot find the user order with current order id\\\");\\n        userOrder memory uOrder = userData[msg.sender][orderID];\\n\\n        require(minePoolMap[uOrder.poolID].isEntity,\\\"no pool can be found\\\");\\n        \\n        uint curDayTime = convertToDayTime(block.timestamp);\\n        uint userCreateDayTime = convertToDayTime(uOrder.createTime);\\n        //currentTime - createTime\\n        uint curSubDayTime = curDayTime.sub(userCreateDayTime);\\n\\n        require(userData[msg.sender][orderID].stopDayTime == 0,\\\"you have redeem already\\\");\\n        require(minePoolMap[uOrder.poolID].mPool.actionType == 1,\\\"only support redeem\\\");\\n        \\n        if (curSubDayTime < minePoolMap[uOrder.poolID].mPool.expireType){\\n            minePoolMap[uOrder.poolID].mPool.maxMiningPower.canSell = minePoolMap[uOrder.poolID].mPool.maxMiningPower.canSell.add(uOrder.cfltamount);\\n        }\\n\\n        userData[msg.sender][orderID].cfltamount = 0;\\n        //if file pool no any check\\n        if (minePoolMap[uOrder.poolID].mPool.tokenAddress == _fltTokenContract && _fltTokenContract != address(0)){\\n            require(IERC20(_fltTokenContract).transfer(msg.sender,uOrder.amount),\\\"failed to redeem from file pool in contract\\\");\\n            // require(IERC20(_fltTokenContract).transferFrom(minePoolMap[uOrder.poolID].mPool.redeemFundAccount,msg.sender,uOrder.amount),\\\"failed to redeem from file pool in contract\\\");\\n            userData[msg.sender][orderID].stopDayTime = curDayTime;\\n\\n            emit EventRedeem(msg.sender,orderID,0,false,_fltTokenContract);\\n            return true;\\n        }\\n\\n        require(curSubDayTime >= minePoolMap[uOrder.poolID].mPool.lockInterval ,\\\"not allow redeem within frozen days\\\");\\n        \\n        require(uOrder.ratioInfo.admineUpdateTime > 0,\\\"cannot redeem because no fee update\\\");\\n        uint updateDayTime = convertToDayTime(userData[msg.sender][orderID].ratioInfo.admineUpdateTime);\\n        updateDayTime = updateDayTime.sub(userCreateDayTime);\\n\\n        if(curSubDayTime < minePoolMap[uOrder.poolID].mPool.expireType){\\n            require(updateDayTime >= minePoolMap[uOrder.poolID].mPool.lockInterval.sub(1) ,\\\"not allow redeem because update fee has not come for LOCK days\\\"); \\n        }else{\\n            require(updateDayTime >= minePoolMap[uOrder.poolID].mPool.expireType.sub(1) ,\\\"not allow redeem because update fee has not come for EXP days\\\");    \\n        }\\n\\n        uint256 lastForTransfer = 0 ;\\n        bool isExpire = false;\\n        uint256 Fee = 0;\\n        if (curSubDayTime >= minePoolMap[uOrder.poolID].mPool.expireType){\\n            lastForTransfer = userData[msg.sender][orderID].amount;\\n            userData[msg.sender][orderID].stopDayTime = curDayTime;\\n            isExpire = true;\\n\\n        }else{\\n            //make sure user will not loss any staking money\\n            if (uOrder.ratioInfo.oActiveInterest < uOrder.ratioInfo.oNeedToPayGasFee ){\\n                emit MarkingFeeChanges(msg.sender,orderID,uOrder.ratioInfo.oActiveInterest,uOrder.ratioInfo.oNeedToPayGasFee);\\n                uOrder.ratioInfo.oNeedToPayGasFee = uOrder.ratioInfo.oActiveInterest;\\n            }\\n            \\n            //((gasFIL /10**18 )* tokenRate / FILRate) * 10 ** tokenPrecision \\n            uint256 partialCalc = uOrder.ratioInfo.oNeedToPayGasFee.mul(minePoolMap[uOrder.poolID].mPool.tokenRate).mul(10**minePoolMap[uOrder.poolID].mPool.tokenPrecision);\\n            Fee = partialCalc.div(minePoolMap[uOrder.poolID].mPool.FILRate).div(10**18) ;\\n      \\n            if (userData[msg.sender][orderID].amount > Fee ){\\n                lastForTransfer = userData[msg.sender][orderID].amount.sub(Fee);\\n            }\\n\\n            userData[msg.sender][orderID].stopDayTime = curDayTime;\\n        }\\n\\n        require(lastForTransfer > 0,\\\"not enough for paying for gas diff\\\");\\n        address forEvent = address(0);\\n        if (withdrawType ){\\n            minePoolMap[uOrder.poolID].mPool.tokenInterface.transferFrom(minePoolMap[uOrder.poolID].mPool.redeemFundAccount,msg.sender,lastForTransfer);\\n            forEvent = minePoolMap[uOrder.poolID].mPool.tokenAddress;\\n        }else {\\n            uint256 remainPower =convertTokenToPower(userData[msg.sender][orderID].amount,uOrder.poolID) ;\\n            require(_fltTokenContract != address(0),\\\"no flt contract in the system\\\");\\n            require(IERC20(_fltTokenContract).transfer(msg.sender,remainPower),\\\"failed to redeem from contract address\\\");\\n            forEvent = _fltTokenContract;\\n        }\\n\\n        emit EventRedeem(msg.sender,orderID,Fee,isExpire,forEvent);\\n        return true;\\n    }\\n\\n    function getProfit(uint plID,uint orderID) external returns ( bool ){\\n        require(userData[msg.sender].length > 0,\\\"cannot find this user from contract for withdraw\\\");\\n        require(userData[msg.sender][orderID].user!=address(0),\\\"stakingCon:getProfit: cannot find current user with order ID\\\");\\n\\n        require(userData[msg.sender][orderID].poolID == plID, \\\"pool id does not match with current order\\\");\\n        require(_filTokenContract != address(0),\\\"has not set fil token contract\\\");\\n\\n        require(userData[msg.sender][orderID].ratioInfo.oActiveInterest > 0, \\\"no TotalInterest for withdrawing\\\");\\n\\n        require(userData[msg.sender][orderID].ratioInfo.oActiveInterest > userData[msg.sender][orderID].ratioInfo.oHasReceiveInterest, \\\"you have gotten all the interest about this order\\\");\\n\\n        uint256 interestShouldSend = userData[msg.sender][orderID].ratioInfo.oActiveInterest.sub(userData[msg.sender][orderID].ratioInfo.oHasReceiveInterest);\\n\\n        require(IERC20(_filTokenContract).transferFrom(minePoolMap[plID].mPool.redeemFundAccount,msg.sender,interestShouldSend),\\\"failed to withdraw profit for current\\\");\\n        userData[msg.sender][orderID].ratioInfo.oHasReceiveInterest = userData[msg.sender][orderID].ratioInfo.oActiveInterest;\\n\\n        emit EventWithDraw( msg.sender,plID,orderID,interestShouldSend);\\n\\n        return true;\\n\\n    }//end function\\n\\n    //===================================admin operate==================================================\\n\\n    /**\\n     * @dev event for updating miner pool\\n    */\\n    event UpdateMinePoolEvent(uint poolID,address contr,uint256  hasSoldOutToken);\\n\\n    //add contract to contract and also add pool amount \\n    struct updateMineInput{\\n        uint        poolID;            \\n        address     contr;      \\n        address     redeemCon;             \\n        address     earlyRedeemFundAccount;    \\n        address     minerAccount;\\n        address     recievePaymentAccount;    \\n        uint        expiration;             \\n\\n        uint256     maxMiningPower;         \\n        uint256     stakingPrice;            \\n \\n        uint256     tokenRate;\\n        uint256     FILRate;\\n        uint        tokenPrecision;\\n\\n        uint        actionType;\\n        uint256     miniPurchaseAmount;\\n        uint256     hasSoldOutToken;\\n        uint        lockInterval;\\n    }\\n    function updateMinePool(\\n        updateMineInput memory updateParas,\\n        uint256[] memory poolThredhold,\\n        uint[] memory serviceFeePercent\\n    ) external ownerAndAdmin switchOn returns (bool){\\n        //update the amount of a certain contract\\n        if (minePoolMap[updateParas.poolID].isEntity){\\n            //an old one\\n            require(isContract(updateParas.contr),\\\"not the correct token contract address\\\");\\n            if (updateParas.actionType > 0){\\n                require(updateParas.actionType == 1 || updateParas.actionType == 2,\\\"need to set actionType correctly\\\");\\n                minePoolMap[updateParas.poolID].mPool.actionType = updateParas.actionType;\\n            }\\n\\n            if (updateParas.maxMiningPower > 0 ){\\n                minePoolMap[updateParas.poolID].mPool.maxMiningPower.canSell = updateParas.maxMiningPower; \\n            }\\n\\n            if (updateParas.expiration > 0){\\n                minePoolMap[updateParas.poolID].mPool.expireType = updateParas.expiration;\\n            }\\n            \\n            if (updateParas.stakingPrice > 0){\\n                minePoolMap[updateParas.poolID].mPool.stakingPrice = updateParas.stakingPrice;\\n            }\\n\\n            if (updateParas.tokenRate > 0 ){\\n                minePoolMap[updateParas.poolID].mPool.tokenRate = updateParas.tokenRate;\\n            }\\n\\n            if (updateParas.FILRate > 0 ){\\n                minePoolMap[updateParas.poolID].mPool.FILRate = updateParas.FILRate;\\n            }\\n\\n            if (updateParas.tokenPrecision > 0 ){\\n                minePoolMap[updateParas.poolID].mPool.tokenPrecision = updateParas.tokenPrecision;\\n            }\\n\\n            if (updateParas.miniPurchaseAmount > 0){\\n                minePoolMap[updateParas.poolID].mPool.miniPurchaseAmount = updateParas.miniPurchaseAmount;\\n            }\\n\\n            if (updateParas.hasSoldOutToken > 0){\\n                minePoolMap[updateParas.poolID].mPool.hasSoldOutToken = updateParas.hasSoldOutToken;\\n            }\\n\\n            if (updateParas.lockInterval > 0){\\n                minePoolMap[updateParas.poolID].mPool.lockInterval = updateParas.lockInterval;\\n            }\\n\\n            if (updateParas.contr != address(0)){\\n                minePoolMap[updateParas.poolID].mPool.tokenAddress = updateParas.contr;\\n                minePoolMap[updateParas.poolID].mPool.tokenInterface = IERC20(minePoolMap[updateParas.poolID].mPool.tokenAddress);\\n            }\\n            \\n            if (updateParas.redeemCon != address(0)){\\n                minePoolMap[updateParas.poolID].mPool.redeemFundAccount = updateParas.redeemCon;\\n            }\\n\\n            if (updateParas.earlyRedeemFundAccount != address(0)){\\n                minePoolMap[updateParas.poolID].mPool.earlyRedeemFundAccount = updateParas.earlyRedeemFundAccount;\\n            }\\n            \\n            if (updateParas.minerAccount != address(0)){\\n                minePoolMap[updateParas.poolID].mPool.minerAccount = updateParas.minerAccount;\\n            }            \\n            \\n            if (updateParas.recievePaymentAccount != address(0)){\\n                minePoolMap[updateParas.poolID].mPool.recievePaymentAccount = updateParas.recievePaymentAccount;\\n            }\\n\\n            if (poolThredhold.length > 0){\\n                minePoolMap[updateParas.poolID].mPool.poolThredhold = poolThredhold;\\n            }\\n\\n            if (serviceFeePercent.length > 0) {\\n                minePoolMap[updateParas.poolID].mPool.serviceFeePercent = serviceFeePercent;\\n            }\\n        }else{\\n            //a  new one \\n            //need to set ratio and maxMiningPower\\n            require(updateParas.maxMiningPower>0,\\\"this pool is new please add maxMiningPower for it\\\");\\n            require(updateParas.contr != address(0),\\\"this pool is new please add token adress for it\\\");\\n            require(updateParas.stakingPrice > 0,\\\"need to set stakingPrice \\\");\\n            // require(updateParas.serviceFeePercent > 0,\\\"need to set serviceFeePercent \\\");\\n\\n            require(updateParas.FILRate > 0,\\\"need to set FILRate\\\");\\n            require(updateParas.tokenRate > 0,\\\"need to set tokenRate\\\");\\n            require(updateParas.tokenPrecision > 0,\\\"need to set tokenPrecision\\\");\\n\\n            require(updateParas.actionType == 1 || updateParas.actionType == 2,\\\"need to set actionType correctly\\\");\\n            require(updateParas.miniPurchaseAmount > 0,\\\"need to set miniPurchaseAmount\\\");\\n            require(poolThredhold.length > 0, \\\"need to set levelThredhold for defi\\\");\\n            minePoolMap[updateParas.poolID].mPool.poolThredhold = poolThredhold;\\n\\n            require(serviceFeePercent.length > 0, \\\"need to set levelServiceFeePercent for defi\\\");\\n            minePoolMap[updateParas.poolID].mPool.serviceFeePercent = serviceFeePercent;\\n\\n            // require(updateParas.lockInterval > 0,\\\"need to set lockInterval\\\");\\n\\n            minePoolMap[updateParas.poolID].mPool.maxMiningPower.canSell = updateParas.maxMiningPower;\\n            minePoolMap[updateParas.poolID].mPool.stakingPrice = updateParas.stakingPrice; // fil / G \\n            minePoolMap[updateParas.poolID].mPool.FILRate = updateParas.FILRate;\\n            minePoolMap[updateParas.poolID].mPool.tokenRate = updateParas.tokenRate;\\n\\n            minePoolMap[updateParas.poolID].mPool.tokenAddress = updateParas.contr;\\n            minePoolMap[updateParas.poolID].mPool.tokenInterface = IERC20(updateParas.contr);\\n            minePoolMap[updateParas.poolID].isEntity = true;\\n            minePoolMap[updateParas.poolID].mPool.redeemFundAccount = updateParas.redeemCon;\\n            minePoolMap[updateParas.poolID].mPool.earlyRedeemFundAccount = updateParas.earlyRedeemFundAccount;\\n            minePoolMap[updateParas.poolID].mPool.expireType = updateParas.expiration;\\n            minePoolMap[updateParas.poolID].mPool.minerAccount = updateParas.minerAccount;\\n            minePoolMap[updateParas.poolID].mPool.recievePaymentAccount = updateParas.recievePaymentAccount;\\n\\n            minePoolMap[updateParas.poolID].mPool.actionType = updateParas.actionType;\\n            minePoolMap[updateParas.poolID].mPool.miniPurchaseAmount = updateParas.miniPurchaseAmount;\\n            minePoolMap[updateParas.poolID].mPool.lockInterval = updateParas.lockInterval;\\n            minePoolMap[updateParas.poolID].mPool.tokenPrecision = updateParas.tokenPrecision;\\n\\n        }\\n\\n        emit UpdateMinePoolEvent(updateParas.poolID,updateParas.contr,updateParas.hasSoldOutToken);\\n        return true;\\n\\n    }\\n\\n    /**\\n     * @dev event for updating user order fee\\n    */\\n    event UpdateOrderFeeEvent(\\n        address userAddress,\\n        uint    orderID,\\n        uint    updateTime,\\n        uint256 activeInterest,\\n        uint256 FrozenInterest,\\n        uint256 needToPayGasFee\\n    );\\n\\n    struct updateUserOrderType {\\n        address userAddress;\\n        uint    orderID;\\n        uint    updateTime;\\n        uint256 activeInterest;\\n        uint256 FrozenInterest;\\n        uint256 needToPayGasFee;\\n    }\\n\\n    function updateOrderFee(updateUserOrderType[] memory updateOrders) external ownerAndAdmin switchOn returns (bool){\\n        require(updateOrders.length > 0, \\\"please input the right data for updateOrderFee\\\");\\n        for (uint i = 0 ;i < updateOrders.length;i++){\\n   \\n            if (userData[updateOrders[i].userAddress].length > 0 && userData[updateOrders[i].userAddress][updateOrders[i].orderID].stopDayTime == 0 ){\\n                if (userData[updateOrders[i].userAddress][updateOrders[i].orderID].user == address(0)){\\n                    continue;\\n                }\\n       \\n                uint    cDayTime    = convertToDayTime(userData[updateOrders[i].userAddress][updateOrders[i].orderID].createTime);\\n                uint256 poolIDForex = userData[updateOrders[i].userAddress][updateOrders[i].orderID].poolID;\\n                if (updateOrders[i].updateTime > 0 && convertToDayTime(updateOrders[i].updateTime) < cDayTime.add(minePoolMap[poolIDForex].mPool.expireType).sub(1)){\\n                    userData[updateOrders[i].userAddress][updateOrders[i].orderID].ratioInfo.admineUpdateTime = updateOrders[i].updateTime;\\n                    userData[updateOrders[i].userAddress][updateOrders[i].orderID].ratioInfo.oActiveInterest = updateOrders[i].activeInterest;\\n                    userData[updateOrders[i].userAddress][updateOrders[i].orderID].ratioInfo.oFrozenInterest = updateOrders[i].FrozenInterest;\\n                    userData[updateOrders[i].userAddress][updateOrders[i].orderID].ratioInfo.oNeedToPayGasFee = updateOrders[i].needToPayGasFee;\\n                    emit UpdateOrderFeeEvent(updateOrders[i].userAddress,updateOrders[i].orderID,updateOrders[i].updateTime,updateOrders[i].activeInterest,updateOrders[i].FrozenInterest,updateOrders[i].needToPayGasFee);\\n                }\\n                else if (convertToDayTime(updateOrders[i].updateTime) >= cDayTime.add(minePoolMap[poolIDForex].mPool.expireType).sub(1)){\\n\\n                    minePoolMap[poolIDForex].mPool.maxMiningPower.canSell = minePoolMap[poolIDForex].mPool.maxMiningPower.canSell.add(userData[updateOrders[i].userAddress][updateOrders[i].orderID].cfltamount);\\n                    userData[updateOrders[i].userAddress][updateOrders[i].orderID].cfltamount = 0;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    //add flt token contract;\\n    function addFLTTokenContract(address fltToken) external ownerAndAdmin switchOn returns (bool){\\n        require(fltToken != address(0),\\\"stakingCon:addFLTTokenContract: fltToken address is zero\\\");\\n        _fltTokenContract = fltToken;\\n        emit AddFLTTokenContractEvent(fltToken);\\n        return true;\\n    }\\n\\n    //add fil token contract for profit;\\n    function addFILTokenContract(address filTokenCon) external ownerAndAdmin switchOn returns (bool){\\n        require(filTokenCon != address(0),\\\"stakingCon:addFILTokenContract: filToken address is zero\\\");\\n        _filTokenContract = filTokenCon;\\n        emit AddFILTokenContractEvent(filTokenCon);\\n        return true;\\n    }\\n\\n    //pledge for active the selling power;\\n    // function inputFLTForActivePower(uint poolID,uint256 amount) public switchOn returns (bool){\\n\\n    //     require(minePoolMap[poolID].isEntity,\\\"current pool does not exist\\\");\\n\\n    //     require(msg.sender == minePoolMap[poolID].mPool.minerAccount,\\\"user has not registered on the contract\\\");\\n    //     require(_fltTokenContract != address(0),\\\"need to set the file contract first\\\");\\n    //     require(IERC20(_fltTokenContract).transferFrom(msg.sender,address(this),amount),\\\"failed to transfer flt from user to contract\\\");\\n    //     minePoolMap[poolID].mPool.maxMiningPower.canSell += amount;\\n    //     require(minePoolMap[poolID].mPool.maxMiningPower.canNotSell >= amount,\\\"canNotSell not enough for activating\\\");\\n    //     minePoolMap[poolID].mPool.maxMiningPower.canNotSell -= amount;\\n    //     return true;\\n    // }\\n\\n    event MinerRetrieveTokenEvent(\\n        address user,\\n        uint    poolID,\\n        uint256 amount\\n    );\\n    // //miner get tokens from certain pool with flt \\n    function minerRetrieveToken(uint poolID,uint256 amount) external switchOn returns (bool){\\n\\n        require(minePoolMap[poolID].isEntity,\\\"current pool does not exist\\\");\\n\\n        require(msg.sender == minePoolMap[poolID].mPool.minerAccount,\\\"user has not registered on the contract\\\");\\n\\n        require(minePoolMap[poolID].mPool.actionType == 1,\\\"only staking pool can retrieval token \\\");\\n\\n        require(amount <= minePoolMap[poolID].mPool.hasSoldOutToken,\\\"not enough token to be back for miner\\\");\\n        minePoolMap[poolID].mPool.hasSoldOutToken = minePoolMap[poolID].mPool.hasSoldOutToken.sub(amount);\\n\\n        uint256 getPower = convertTokenToPower(amount,poolID);\\n        require(IERC20(_fltTokenContract).transferFrom(msg.sender,address(this),getPower),\\\"failed to transfer file from user to contract\\\");\\n        require(minePoolMap[poolID].mPool.tokenInterface.transfer(msg.sender,amount),\\\"failed to transfer flt from user to contract\\\");\\n        emit MinerRetrieveTokenEvent(msg.sender,poolID,amount);\\n        return true;        \\n    }\\n\\n    //miner get tokens from certain pool with flt \\n    // function minerRetrieveFILE(uint poolID,uint256 amount) public switchOn returns (bool){\\n\\n    //     require(minePoolMap[poolID].isEntity,\\\"current pool does not exist\\\");\\n\\n    //     require(msg.sender == minePoolMap[poolID].mPool.minerAccount,\\\"user has not registered on the contract\\\");\\n\\n    //     require(minePoolMap[poolID].mPool.actionType == 1,\\\"only staking pool can retrieval token \\\");\\n\\n    //     require(minePoolMap[poolID].mPool.maxMiningPower.canSell >= amount,\\\"not enough file to retrieve\\\");\\n\\n    //     minePoolMap[poolID].mPool.maxMiningPower.canSell = minePoolMap[poolID].mPool.maxMiningPower.canSell.sub(amount);\\n\\n    //     require(IERC20(_fltTokenContract).transfer(msg.sender,amount),\\\"failed to transfer FILE from contract\\\");\\n\\n    //     return true;\\n\\n    // }\\n\\n    //===================================tool function==================================================\\n    //check if address is contract\\n    function isContract(address _addr) view private  returns (bool){\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    //convert current time to day time\\n    function convertToDayTime(uint forConvertTime) internal view returns (uint){\\n        return forConvertTime.add(timeZoneDiff).div(secondsForOneDay);\\n    }\\n\\n    //check if it is Premium\\n\\n    function checkisPremium(uint256 amount,uint256[] memory levelThredhold) internal pure returns (uint){\\n        \\n        uint isPrem = 0;\\n        for (uint i = levelThredhold.length.sub(1);i >= 0 ; i--){\\n            // powerToToken = levelThredhold[i].mul(stakingPrice).mul(tokenToFILRate).div(10**18).div(10**18);\\n            if (amount >= levelThredhold[i]){\\n                isPrem = i;\\n                break;\\n            }\\n        }\\n        return isPrem;\\n    }\\n\\n    //convert token to power\\n   \\n    function convertTokenToPower(uint256 amount, uint poolID) internal view returns (uint256){\\n        // (( (tokenamount / (10**precision)) / (tokenRate / FILRate) ) / (stakingPrice / 10**18)) * (10**18)\\n        return amount.mul(10**18).mul(10**18).mul(minePoolMap[poolID].mPool.FILRate).div(minePoolMap[poolID].mPool.tokenRate).div(minePoolMap[poolID].mPool.stakingPrice).div(10**minePoolMap[poolID].mPool.tokenPrecision);\\n    }\\n\\n    //adjust time for test\\n    // function adjustDayTime(uint dayTime, uint TimeZone) internal returns (bool){\\n\\n    //     secondsForOneDay = dayTime;\\n    //     timeZoneDiff = TimeZone;\\n    //     return true ;\\n    // }\\n\\n    // function adjustUserOrder(userOrder memory uOrder,uint orderID) public returns(bool){\\n    //     // userData[user][orderID].createTime = createTime;\\n    //     require(userData[uOrder.user].length >0 ,\\\"no current user data\\\");\\n    //     userData[uOrder.user][orderID] = uOrder;\\n    // }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filTokenCon\",\"type\":\"address\"}],\"name\":\"AddFILTokenContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fltToken\",\"type\":\"address\"}],\"name\":\"AddFLTTokenContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExpire\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mPool\",\"type\":\"address\"}],\"name\":\"EventRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cfltamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFeePercent\",\"type\":\"uint256\"}],\"name\":\"EventUserStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"}],\"name\":\"EventWithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MarkingFeeChanges\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinerRetrieveTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdminUser\",\"type\":\"address\"}],\"name\":\"SetAdminEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"operate\",\"type\":\"bool\"}],\"name\":\"SwitchOnContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hasSoldOutToken\",\"type\":\"uint256\"}],\"name\":\"UpdateMinePoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FrozenInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"needToPayGasFee\",\"type\":\"uint256\"}],\"name\":\"UpdateOrderFeeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_filTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fltTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filTokenCon\",\"type\":\"address\"}],\"name\":\"addFILTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fltToken\",\"type\":\"address\"}],\"name\":\"addFLTTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minePoolMap\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"canSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canNotSell\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingCon.maxMiningPowerType\",\"name\":\"maxMiningPower\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"earlyRedeemFundAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemFundAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minerAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FILRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrecision\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recievePaymentAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miniPurchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasSoldOutToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"poolThredhold\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"serviceFeePercent\",\"type\":\"uint256[]\"}],\"internalType\":\"struct StakingCon.minePool\",\"name\":\"mPool\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isEntity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"minerRetrieveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawType\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminUser\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"op\",\"type\":\"bool\"}],\"name\":\"switchOnContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemCon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earlyRedeemFundAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minerAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recievePaymentAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMiningPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FILRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miniPurchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasSoldOutToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingCon.updateMineInput\",\"name\":\"updateParas\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"poolThredhold\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"serviceFeePercent\",\"type\":\"uint256[]\"}],\"name\":\"updateMinePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FrozenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needToPayGasFee\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingCon.updateUserOrderType[]\",\"name\":\"updateOrders\",\"type\":\"tuple[]\"}],\"name\":\"updateOrderFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cfltamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetminer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ostakingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oserviceFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oActiveInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oFrozenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oHasReceiveInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oNeedToPayGasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admineUpdateTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingCon.ratioStruct\",\"name\":\"ratioInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastProfitEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProfitPerGiB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopDayTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isPremium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPremiumLevelInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"levelIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelThredholdValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelServerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingCon", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}