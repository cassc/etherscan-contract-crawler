{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);    \r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Factory \r\n{\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ncontract ICO \r\n{\r\n    // Token being offered in the ICO\r\n    address public tokenAddress;\r\n    IBEP20  private token;\r\n    address public router;\r\n\r\n    // ICO parameters\r\n    uint256 public hardCap;\r\n    uint256 public softCap;\r\n    uint256 public startTimestamp;\r\n    uint256 public endTimestamp;\r\n    // State variables\r\n    uint256 public raisedAmount;\r\n    bool public isICOActive;\r\n    bool public softCapReached;\r\n    bool public ICOCompleted;\r\n\r\n    uint256 public timeUnit;\r\n\r\n    // Mapping to track contributors and their contributions\r\n    address[] public contributors;\r\n    mapping(address => uint256) public contributions;\r\n    mapping(address => uint256) public xtcBought;\r\n    address public admin;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    uint256[] public tokensPerWie;\r\n\r\n    constructor() \r\n    {\r\n        tokenAddress = 0x0af81ee0DDD28Adcc328ef30ab7334eDCfFfe120;\r\n        router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        admin =  0x19865Ffaa11cff00A094a5eBF66675C36E5e182b; \r\n\r\n        token = IBEP20(tokenAddress);\r\n        \r\n        softCap = 2 * 10**17;  // 0.2 BNB\r\n        hardCap = 4 * 10**18;  // 4 BNB\r\n\r\n        tokensPerWie.push(16000); //  Stage 1 - FIRST TWO DAY \r\n        tokensPerWie.push(10000); //  Stage 2 - THREE AND FOUR DAYS\r\n        tokensPerWie.push(6666);  //  Stage 3 - FIVE AND SIX DAYS\r\n        tokensPerWie.push(5000);  //  Stage 4 - SEVEN AND EIGHT DAYS\r\n\r\n        timeUnit = 1 days;\r\n        \r\n        raisedAmount = 0;\r\n        isICOActive = false;\r\n        softCapReached = false;\r\n        ICOCompleted = false;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n        address _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(tokenAddress, _uniswapV2Router.WETH());\r\n        if(_pair == address(0))\r\n        {\r\n            _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        }\r\n        uniswapV2Pair = _pair;\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n    }\r\n\r\n\r\n\r\n    // Function to contribute Ether to the ICO\r\n    function contribute() external payable onlyWhileICOActive \r\n    {\r\n        require(msg.value > 0, \"Contribution amount must be greater than 0\");\r\n        require(block.timestamp<endTimestamp, \"ICO Time is over\");\r\n\r\n        if( contributions[msg.sender]==0)\r\n        {\r\n            contributors.push(msg.sender);\r\n        }\r\n        contributions[msg.sender] = contributions[msg.sender]+msg.value;\r\n        raisedAmount = raisedAmount+msg.value;\r\n        uint256 stage = getStage();\r\n        xtcBought[msg.sender] += tokensPerWie[stage]*msg.value;\r\n        require(raisedAmount <= hardCap, \"Hard cap reached\");\r\n        if (raisedAmount >= softCap) \r\n        {\r\n            softCapReached = true;\r\n        }\r\n\r\n    }\r\n\r\n    // To show contribution of the contributor. \r\n    // returns eth deposited and tokens bought. \r\n    function contributionOf(address account) public view returns(uint256 value, uint256 tokens)\r\n    {\r\n        value = contributions[account];\r\n        tokens =xtcBought[account];\r\n        return (value, tokens);\r\n    }\r\n\r\n    //This function can provide a set of variables values for showing on website.\r\n    function getState1() public view returns(uint256, uint256, uint256, uint256)\r\n    {   \r\n        uint256 len = contributors.length;\r\n        return(len,  raisedAmount,  softCap,  hardCap);\r\n    }\r\n\r\n\r\n    //This function can provide a set of variables values for showing on website. \r\n    function getState2() public view returns(uint256, uint256, uint256, bool)\r\n    {    \r\n        uint256 stage = getStage();\r\n        return(endTimestamp, block.timestamp,  tokensPerWie[stage], ICOCompleted);\r\n    }\r\n\r\n    // Only admin can call this function. \r\n    // this function can withdraw remaining tokens in the ICO contract address. \r\n    function withdrawXTC(uint256 amount) public \r\n    {\r\n        require(msg.sender==admin, \"Only Admin is Authorize\");\r\n        token.transfer(admin, amount);\r\n    }\r\n\r\n\r\n    // Modifier to ensure the ICO is active\r\n    modifier onlyWhileICOActive() {\r\n        require(isICOActive, \"ICO is not active\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    // To open ICO\r\n    // Admin can trager this function. \r\n    event StartedICO(uint256);\r\n    function startICO() public \r\n    {\r\n        require(msg.sender==admin, \"Only Admin is Authorize\");\r\n        require(!ICOCompleted, \"ICO is already completed\");\r\n        require(!isICOActive, \"ICO is already started\");\r\n        isICOActive = true;\r\n        uint256 _periodInSeconds = 8 * timeUnit;\r\n        startTimestamp = block.timestamp;\r\n        endTimestamp = block.timestamp+(_periodInSeconds);\r\n        token.approve(router, token.totalSupply()); \r\n        emit StartedICO(block.timestamp);      \r\n    }\r\n\r\n\r\n\r\n    // this function determine the stage of ICO based on ICO start time. \r\n    function getStage() public view returns(uint256)\r\n    {\r\n        uint256 span = block.timestamp-startTimestamp;\r\n        uint fac = span/(2*timeUnit);\r\n        if(fac>3) { fac = 3; }\r\n        return fac;\r\n    }\r\n\r\n\r\n\r\n    // Function to end the ICO and transfer remaining tokens to the owner's wallet\r\n    event EndedICO(uint256);\r\n    function endICO() external \r\n    {\r\n        require(!ICOCompleted, \"ICO is already completed\");\r\n        require(block.timestamp > endTimestamp || raisedAmount > hardCap, \"ICO has not been ended yet\");\r\n\r\n        isICOActive = false;\r\n        ICOCompleted = true;\r\n        if (!softCapReached) \r\n        {\r\n            refundContributors();\r\n        } \r\n        else \r\n        {\r\n            sendTokensToContributors();\r\n            payable(admin).transfer(address(this).balance);\r\n        }\r\n        emit EndedICO(block.timestamp);\r\n    }\r\n\r\n\r\n    // internal function \r\n    // to distribute tokens to the contributors. \r\n    // The amount of tokens is pre-calculated \r\n    // this function will read that amount from xtcBought mapping \r\n    function sendTokensToContributors() internal  \r\n    {\r\n        for (uint256 i = 0; i < contributors.length; i++) \r\n        {\r\n            address contributor = contributors[i];\r\n            uint256 tokensToSend = xtcBought[contributor];\r\n            if (tokensToSend > 0) \r\n            {\r\n                token.transfer(contributor, tokensToSend);\r\n            }\r\n        }        \r\n    }\r\n\r\n\r\n\r\n    // Function to refund contributors if the soft cap is not reached\r\n    function refundContributors() internal \r\n    {\r\n        for (uint256 i = 0; i < contributors.length; i++) \r\n        {\r\n            address contributor = contributors[i];\r\n            uint256 contribution = contributions[contributor];\r\n            if (contribution > 0) \r\n            {\r\n                contributions[contributor] = 0;\r\n                payable(contributor).transfer(contribution);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Total number of investors contributed to the project. \r\n    function totalInvestors() public view returns(uint256)\r\n    {\r\n        return contributors.length;\r\n    }\r\n\r\n\r\n    // To show required number of tokens for distribution to all contributors. \r\n    function requiredTokens() public view returns(uint256)\r\n    {\r\n        uint256 totalTokens = 0;\r\n        for (uint256 i = 0; i < contributors.length; i++) \r\n        {\r\n            address contributor = contributors[i];\r\n            uint256 tokensToSend = xtcBought[contributor];\r\n            totalTokens += tokensToSend;\r\n        } \r\n        return totalTokens;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n        Function to add liquidity to a decentralized exchange (e.g., Uniswap)\r\n    */\r\n\r\n    function addLiquidity(uint256 ethAmount, uint256 tokenAmount) external \r\n    {\r\n        require(msg.sender==admin, \"Only Admin is Authorize\");\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount} (\r\n            tokenAddress, \r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            admin,\r\n            block.timestamp+30);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EndedICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StartedICO\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ICOCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"contributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isICOActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerWie\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawXTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xtcBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ICO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58a4d9ed280c64960f0eb2ccf0e33111059bce469c8c1f85737e03f9dba6ed84"}