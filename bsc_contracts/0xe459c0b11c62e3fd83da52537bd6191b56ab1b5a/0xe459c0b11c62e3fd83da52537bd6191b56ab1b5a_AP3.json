{"SourceCode": "pragma solidity ^0.6.12;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns(uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns(address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns(address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns(bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IPancakeV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IPancakeV2Router02 is IPancakeV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\n\r\n\r\ncontract AP3 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    \r\n    mapping(address => uint256) public earlyholders;\r\n    uint256 public earlyholdersTotal = 0;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _totalSupply = 900000 ether;\r\n    uint256 private _holdersFunds = 0;\r\n    \r\n    \r\n    uint8 private constant _decimals = 18;\r\n    string private constant _symbol = \"AP3\";\r\n    string private constant _name = \"AP3.TOWN\";\r\n    \r\n    // locks the contract for any transfers\r\n    bool private isTransferLocked = true;\r\n    mapping (address => bool) private _isExcludedFromPause;\r\n    \r\n    // presale\r\n    bool public isPresaleStart = false;\r\n    uint256 public constant tokensforbnb = 450;\r\n    uint256 private constant presale_min = 0.1 ether;\r\n    uint256 private constant presale_max = 10 ether;\r\n    uint256 private constant presale_hard_cap = 1000 ether; \r\n    uint256 private constant presale_soft_cap = 200 ether;\r\n    uint256 public presaleTimeout = 0;\r\n    \r\n    address private constant _marketing_address = 0x42814a3a9c0dc921c0Ca43d96E04e86f2a8Ed4e0;\r\n    \r\n    address private constant _marketing_CERBUL_addr = 0xE32b994a73568f546B0c75F17E51eb655afBF560; // twitter.com/CerbulBTC\r\n    uint256 private constant _marketing_CERBUL_amount = 2000 ether;\r\n    \r\n    address private constant _marketing_ROLLER_addr = 0xB823933f6BB2B18a3f2299737dc4Cb08c30B3176; // twitter.com/CryptoR0ller\r\n    uint256 private constant _marketing_ROLLER_amount = 4000 ether;\r\n    \r\n    address private constant _marketing_THEDEFIAPE_addr = 0xa2dFab4a289633E8D0c48db1F5f0481953f93318; // twitter.com/TheDefiApe\r\n    uint256 private constant _marketing_THEDEFIAPE_amount = 1200 ether;\r\n    \r\n    address private constant _marketing_CRYPTOCREW_addr = 0x98743927ff0f8b5E7A4cbe0f63578a9E984fb3b6; // twitter.com/CryptoTickers\r\n    uint256 private constant _marketing_CRYPTOCREW_amount = 1000 ether;\r\n    \r\n    address private constant _marketing_LFEDEFI_addr = 0x623ab856af9015f10A835b57958800194551C4A3; // tg @lfedefi\r\n    uint256 private constant _marketing_LFEDEFI_amount = 2000 ether;\r\n    \r\n    uint256 private _marketingFunds = 50000 ether; \r\n    \r\n    address private constant _team_address = 0x427bc3E93dfeb8cCA0c554279DC0c4e071A34e1F;\r\n    uint256 private _teamFunds = 100000 ether;\r\n    \r\n    uint256 private _servicenext = 0;\r\n    \r\n    uint256 private ap3vault = 0;\r\n    \r\n    address private constant pancake_swap_router = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F;\r\n    address public pancake_swap_pair = address(0); \r\n    uint256 private constant listingprice = 400;\r\n    \r\n    GORILLA private gorilla;\r\n    address private gorillainitiator = 0x16DcAa8eA7E653a868C5D0538516297d5fb9Fb8e;\r\n    uint256 private lastgorilla = 0;\r\n     \r\n    uint256 public farmingTotal = 0;\r\n    uint256 public totalDividends = 0;\r\n    uint256 private scaledRemainder = 0;\r\n    uint256 private constant scaling = 10**12;\r\n    uint public round = 1;\r\n\r\n    struct FARMER{\r\n        uint256 balance;\r\n        uint256 last;\r\n        uint256 total;\r\n        uint round;\r\n        uint256 remainder;\r\n    }\r\n\r\n    mapping(address => FARMER) farmers;\r\n    mapping(uint => uint256) public farmrounds;\r\n\r\n    event farmLpWithdrawEvent(address farmer, uint256 lptokens);\r\n    event GORILLAEvent(uint256 _percent);\r\n\r\n    constructor() public { \r\n        \r\n        _balances[address(this)] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n        \r\n        _isExcludedFromPause[msg.sender] = false; // dev is paused !!\r\n        _isExcludedFromPause[address(this)] = true;\r\n        _isExcludedFromPause[address(pancake_swap_router)] = true;\r\n        \r\n        // Create a uniswap pair for this new token\r\n        address pancake_weth = IPancakeV2Router02(pancake_swap_router).WETH();\r\n        address pancake_factory = IPancakeV2Router02(pancake_swap_router).factory();\r\n        pancake_swap_pair = IPancakeV2Factory( pancake_factory ).createPair(address(this), pancake_weth);\r\n        \r\n        _firsttimeservicepay();\r\n        \r\n        gorilla = new GORILLA(address(this), pancake_swap_router, _team_address);\r\n        \r\n    }\r\n    \r\n    \r\n    function servicepay() external {\r\n        require(block.timestamp > _servicenext.add(7 days), \"It is too early to call this function, at least 7 days must pass since the last use\");\r\n        _servicepay();\r\n    }\r\n    \r\n    function _firsttimeservicepay() internal {\r\n        \r\n        _lowlevel_transfer(address(this), _marketing_CERBUL_addr, _marketing_CERBUL_amount);\r\n        _marketingFunds = _marketingFunds.sub(_marketing_CERBUL_amount);\r\n        \r\n        _lowlevel_transfer(address(this), _marketing_ROLLER_addr, _marketing_ROLLER_amount);\r\n        _marketingFunds = _marketingFunds.sub(_marketing_ROLLER_amount);\r\n        \r\n        _lowlevel_transfer(address(this), _marketing_THEDEFIAPE_addr, _marketing_THEDEFIAPE_amount);\r\n        _marketingFunds = _marketingFunds.sub(_marketing_THEDEFIAPE_amount);\r\n        \r\n        _lowlevel_transfer(address(this), _marketing_CRYPTOCREW_addr, _marketing_CRYPTOCREW_amount);\r\n        _marketingFunds = _marketingFunds.sub(_marketing_CRYPTOCREW_amount);\r\n        \r\n        _lowlevel_transfer(address(this), _marketing_LFEDEFI_addr, _marketing_LFEDEFI_amount);\r\n        _marketingFunds = _marketingFunds.sub(_marketing_LFEDEFI_amount);\r\n        \r\n        _servicepay();\r\n    }\r\n    \r\n    function _servicepay() internal {\r\n        uint256 payamount = 5000 ether;\r\n        \r\n        _servicenext = block.timestamp;\r\n            \r\n        if(_teamFunds > 0){ \r\n            if(_teamFunds > payamount){\r\n                _teamFunds = _teamFunds.sub(payamount); \r\n                _lowlevel_transfer(address(this), _team_address, payamount);\r\n            }else{\r\n                _teamFunds = 0; \r\n                _lowlevel_transfer(address(this), _team_address, _teamFunds);\r\n            }\r\n        }\r\n        \r\n        if(_marketingFunds > 0){\r\n            if(_marketingFunds > payamount){\r\n                _marketingFunds = _marketingFunds.sub(payamount);\r\n                _lowlevel_transfer(address(this), _marketing_address, payamount); \r\n            }else{\r\n                _marketingFunds = 0;\r\n                _lowlevel_transfer(address(this), _marketing_address, _marketingFunds); \r\n            }\r\n            \r\n        }\r\n        \r\n    } \r\n    \r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view override returns(address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view override returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view override returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view override returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() external view override returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function _balanceOf(address account) internal view returns(uint256){\r\n        return _balances[account].mul(_getRate()).div(1 ether);\r\n    }\r\n    \r\n    function balanceOf(address account) external view override returns(uint256) {\r\n        return _balanceOf(account);\r\n    }\r\n    \r\n    function stakingRewardsOwing(address account) external view returns(uint256) {\r\n        uint256 _balance = _balanceOf(account);\r\n        if(_balance > _balances[account]){\r\n            return _balance.sub(_balances[account]);\r\n        }\r\n        return 0; \r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        uint256 stakingSupply = _totalSupply.sub(_marketingFunds).sub(_teamFunds);\r\n        uint256 incirculation = stakingSupply.sub(_holdersFunds);\r\n        return stakingSupply.div(incirculation.div(1 ether));\r\n    }\r\n    \r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) external view override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     */\r\n    function approve(address spender, uint256 amount) external override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(!isTransferLocked || _isExcludedFromPause[sender], \"Transfers are paused until the end of the presale\");\r\n        \r\n        uint256 _amount = 0;\r\n        \r\n        if(sender == address(gorilla) || recipient == address(gorilla)){ // gorilla mode fee less\r\n            _amount = amount;\r\n        }else if(recipient == pancake_swap_pair) { // is sell or normal transfer\r\n            if(sender == address(this)){ // setup liquidity without fee\r\n                _amount = amount;\r\n            }else{\r\n                _amount = transfer_sell_penalty(sender, amount);\r\n            }\r\n        }else{\r\n            _amount = transfer_transaction_fee(sender, amount);\r\n            \r\n            if ( sender == pancake_swap_pair ) {\r\n                transfer_from_ap3_vault(recipient, amount);\r\n            }\r\n        }\r\n        \r\n        _lowlevel_transfer(sender, recipient, _amount);\r\n        \r\n    }\r\n    \r\n    function transfer_sell_penalty( address sender, uint256 amount ) internal returns(uint256) {\r\n        \r\n        uint256 feeOne = amount.div(100);\r\n        uint256 feeTwo = amount.div(50);\r\n        \r\n        uint256 _amount = transfer_fees(sender, amount, feeOne, feeTwo, feeTwo, feeOne);\r\n        \r\n        // - 1% for ape vault\r\n        _amount = _amount.sub(feeOne);\r\n        ap3vault = ap3vault.add(feeOne);\r\n        _lowlevel_transfer(sender, address(this), feeOne);\r\n        \r\n        return _amount;\r\n        \r\n    }\r\n    \r\n    function transfer_transaction_fee(address sender, uint256 amount) internal returns(uint256) {\r\n        uint256 fee = amount.div(100);\r\n        return transfer_fees(sender, amount, fee, fee, fee, fee);\r\n    }\r\n    \r\n    function transfer_fees(address sender, uint256 amount, uint256 feeburn, uint256 feeholders, uint256 feelpholders, uint256 feemarketing) internal returns(uint256) {\r\n        // burned\r\n        amount = amount.sub(feeburn);\r\n        _burn(sender, feeburn);\r\n        \r\n        // goes to holders\r\n        amount = amount.sub(feeholders);\r\n        _holdersFunds = _holdersFunds.add(feeholders);\r\n        _lowlevel_transfer(sender, address(this), feeholders);\r\n        \r\n        // goes to LP farmers\r\n        if(farmingTotal > 0){\r\n            amount = amount.sub(feelpholders);\r\n            _lowlevel_transfer(sender, address(this), feelpholders);\r\n            _farmFunds(feelpholders);\r\n        }\r\n        \r\n        // - 1% marketing\r\n        amount = amount.sub(feemarketing);\r\n        _lowlevel_transfer(sender, _marketing_address, feemarketing);\r\n        \r\n        return amount;\r\n    }\r\n    \r\n    function transfer_from_ap3_vault( address recipient, uint256 amount ) internal {\r\n        if( ap3vault > 0 && amount > 100 ether){\r\n            uint256 ap3funds = 0;\r\n            \r\n            if(amount < 400 ether){\r\n                ap3funds = ap3vault.div(10);\r\n                \r\n            }else if(amount > 1600 ether){\r\n                ap3funds = ap3vault.mul(8).div(10);\r\n                \r\n            }else{ \r\n                ap3funds = ap3vault.mul(amount.div(20 ether)).div(100);\r\n                \r\n            }\r\n            if(ap3funds > 0){\r\n                ap3vault = ap3vault.sub(ap3funds);\r\n                _lowlevel_transfer(address(this), recipient, ap3funds);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _lowlevel_transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        uint256 _amount = amount.mul(10**18).div(_getRate());\r\n        \r\n        _balances[sender] = _balances[sender].sub(_amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(_amount);\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        require(amount > 0, \"Burn amount must be greater than zero\");\r\n        uint256 _amount = amount.mul(1 ether).div(_getRate());\r\n        _balances[msg.sender].sub(_amount, \"BEP20: transfer amount exceeds balance\");\r\n        \r\n        _burn(msg.sender, _amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        uint256 _amount = amount.mul(1 ether).div(_getRate());\r\n        _balances[account] = _balances[account].sub(_amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        \r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n    \r\n    \r\n    /* presale send directly to contract */\r\n    receive() external payable {\r\n        _presale(payable(_marketing_address), msg.value);\r\n    }\r\n    \r\n    function presale(address payable ref) public payable {\r\n        _presale(ref, msg.value);\r\n    }\r\n    \r\n    function _presale(address payable ref, uint256 amount ) private {\r\n        require(isTransferLocked, \"Presale is over\");\r\n        require(isPresaleStart, \"Presale is not yet started\");\r\n        require(amount <= presale_max, \"You have sent too much BNB, the maximum amount is 10 BNB\");\r\n        require(amount >= presale_min, \"You have sent too little BNB, the minimum amount is 0.1 BNB\");\r\n        require(earlyholders[msg.sender].add(amount) <= presale_max, \"You have reached the maximum amount for the address (max 10 BNB)\");\r\n        require(earlyholdersTotal.add(amount) <= presale_hard_cap, \"Transfer amount exceed hardcap\");\r\n        require(block.timestamp < presaleTimeout, \"Presale is over (timeout)\");\r\n        \r\n        if(msg.sender == ref){\r\n            ref = payable(_marketing_address);\r\n            \r\n        }else if(earlyholders[ref] == 0){\r\n            ref = payable(_marketing_address);\r\n            \r\n        }\r\n        \r\n        uint256 tokens = amount.mul(tokensforbnb);\r\n        uint256 _refferal_amount = amount.div(20);\r\n        \r\n        ref.transfer(_refferal_amount);\r\n        \r\n        earlyholdersTotal = earlyholdersTotal.add(amount);\r\n        earlyholders[msg.sender] = earlyholders[msg.sender].add(amount);\r\n        \r\n        _lowlevel_transfer(address(this), msg.sender, tokens);\r\n    }\r\n    \r\n    function presaleEnable() public onlyOwner {\r\n        isPresaleStart = true;\r\n        presaleTimeout = block.timestamp.add(7 days);\r\n    }\r\n    \r\n    function presaleRefund() public payable {\r\n        require(isTransferLocked, \"Presale is over\");\r\n        require(block.timestamp > presaleTimeout, \"Presale is still ongoing\");\r\n        require(earlyholdersTotal <= presale_soft_cap, \"Softcap has been reached, the refund option is no longer available\");\r\n        require(earlyholders[msg.sender] > 0, \"No refund is available for this address\");\r\n        \r\n        uint256 _amount = earlyholders[msg.sender].mul(95).div(100);\r\n    \r\n        earlyholders[msg.sender] = 0;\r\n        \r\n        payable(msg.sender).transfer(_amount); \r\n        \r\n    }\r\n    \r\n    function presaleSetupLp() public onlyOwner {\r\n        uint256 lpBnb = (address(this).balance).mul(75).div(100);\r\n        uint256 lpAmount = lpBnb.mul(listingprice);\r\n        uint256 lpSupply = 300000 ether;\r\n        \r\n        if(lpAmount >= lpSupply){\r\n            lpAmount = lpSupply;\r\n            lpBnb = lpSupply.div(listingprice);\r\n        }else{\r\n            _burn(address(this), lpSupply.sub(lpAmount));\r\n        }\r\n        \r\n        _approve(address(this), address(pancake_swap_router), lpAmount);\r\n        \r\n        IPancakeV2Router02(pancake_swap_router).addLiquidityETH{value: lpBnb}(\r\n                address( this ),\r\n                lpAmount,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                address( this ),\r\n                block.timestamp.add(10 minutes)\r\n        );\r\n        \r\n        payable(_team_address).transfer(address(this).balance); \r\n        \r\n        isTransferLocked = false;\r\n        \r\n        lastgorilla = block.timestamp;\r\n        \r\n    } \r\n    \r\n    function GORILLA(uint256 _percent) external {\r\n        require(msg.sender == gorillainitiator, \"This function can only be called by the gorilla initiator\");\r\n        require(block.timestamp > lastgorilla.add(1 hours) && lastgorilla > 0, \"It is too early to call this function, at least 1 hour must pass since the last use\");\r\n        require(_percent >= 1 && _percent <= 20, \"The percentage amount should be greater than or equal to 1 and less than or equal to 20.\");\r\n        \r\n        uint256 _amount = IBEP20(pancake_swap_pair).balanceOf(address(this)).sub(farmingTotal).mul(_percent).div(100);\r\n        \r\n        IPancakeV2Pair(pancake_swap_pair).sync();\r\n        \r\n        IBEP20(pancake_swap_pair).approve(pancake_swap_router, _amount);\r\n        IPancakeV2Router02(pancake_swap_router).removeLiquidityETHSupportingFeeOnTransferTokens( \r\n            address(this), \r\n            _amount, \r\n            0, \r\n            0, \r\n            address(gorilla), \r\n            block.timestamp.add(10 minutes)\r\n        );\r\n        \r\n        uint256 _fee_holders = gorilla.rebalance();\r\n        _holdersFunds = _holdersFunds.add(_fee_holders);\r\n        \r\n        lastgorilla = block.timestamp;\r\n        \r\n        emit GORILLAEvent(_percent);\r\n    }\r\n    \r\n    \r\n    function farmLp(uint256 lptokens) external {\r\n        require(lptokens > 0, \"Deposited lp tokens amount should be greater than 0\");\r\n        require(IBEP20(pancake_swap_pair).transferFrom(msg.sender, address(this), lptokens), \"Cannot transfer lp tokens\");\r\n\r\n        uint256 owing = _rewardsOwing(msg.sender);\r\n        farmers[msg.sender].remainder += owing;\r\n\r\n        farmers[msg.sender].balance = farmers[msg.sender].balance.add(lptokens);\r\n        farmers[msg.sender].last = owing;\r\n        farmers[msg.sender].total = totalDividends;\r\n        farmers[msg.sender].round = round;\r\n\r\n        farmingTotal = farmingTotal.add(lptokens);\r\n        \r\n        emit farmLpWithdrawEvent(msg.sender, lptokens);\r\n\r\n    }\r\n\r\n    function farmLpWithdraw(uint256 lptokens) external {\r\n        require(farmers[msg.sender].balance >= lptokens && lptokens > 0, \"Withdrawn amount should be greater than zero and smaller than the farming balance\");\r\n\r\n        uint256 owing = _rewardsOwing(msg.sender);\r\n        farmers[msg.sender].remainder += owing;\r\n\r\n        require(IBEP20(pancake_swap_pair).transfer(msg.sender, lptokens), \"Error unstaking lp tokens\");\r\n\r\n        farmers[msg.sender].balance = farmers[msg.sender].balance.sub(lptokens);\r\n        farmers[msg.sender].last = owing;\r\n        farmers[msg.sender].total = totalDividends;\r\n        farmers[msg.sender].round = round;\r\n\r\n        farmingTotal = farmingTotal.sub(lptokens);\r\n    }\r\n\r\n    function farmLpClaim() external {\r\n        if(totalDividends >= farmers[msg.sender].total){\r\n            uint256 owing = _rewardsOwing(msg.sender);\r\n\r\n            owing = owing.add(farmers[msg.sender].remainder);\r\n            farmers[msg.sender].remainder = 0;\r\n\r\n            _transfer(address(this), msg.sender, owing);\r\n\r\n            farmers[msg.sender].last = owing;\r\n            farmers[msg.sender].total = totalDividends;\r\n            farmers[msg.sender].round = round;\r\n        }\r\n    }\r\n\r\n    function farmLpRewardsOwing(address account) external view returns(uint256) {\r\n        uint256 remainder = _getremainder(account);\r\n        uint256 amount = remainder.div(scaling);\r\n        amount = amount.add(remainder.mod(scaling));\r\n        amount = amount.add(farmers[account].remainder);\r\n        return amount;\r\n    }\r\n\r\n    function farmLpBalance(address account) external view returns(uint256){\r\n        return farmers[account].balance;\r\n    }\r\n\r\n    function _farmFunds(uint256 _amount) internal {\r\n        uint256 available = (_amount.mul(scaling)).add(scaledRemainder);\r\n        uint256 dividendPerToken = available.div(farmingTotal);\r\n        scaledRemainder = available.mod(farmingTotal);\r\n\r\n        totalDividends = totalDividends.add(dividendPerToken);\r\n        farmrounds[round] = farmrounds[round.sub(1)].add(dividendPerToken);\r\n        round = round.add(1);\r\n    }\r\n\r\n\r\n    function _rewardsOwing(address account) private returns(uint256) {\r\n        uint256 remainder = _getremainder(account);\r\n        uint256 amount = remainder.div(scaling);\r\n        farmers[account].remainder = farmers[account].remainder.add(remainder.mod(scaling));\r\n        return amount;\r\n    }\r\n\r\n    function _getremainder(address account) internal view returns(uint256){\r\n        uint256 remainder = 0;\r\n        if(farmers[account].round >= 1){\r\n            uint lastround = (farmers[account].round).sub(1);\r\n            remainder = (totalDividends.sub(farmrounds[lastround])).mul(farmers[account].balance);\r\n        }\r\n        return remainder;\r\n    }\r\n    \r\n}\r\n\r\ncontract GORILLA {\r\n    using SafeMath for uint256;\r\n    \r\n    address payable private token;\r\n    address private router;\r\n    address private team;\r\n\r\n    constructor(address payable _token, address _router, address _team) public {\r\n        token = _token;\r\n        router = _router;\r\n        team = _team;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function rebalance() external returns (uint256) {\r\n        require(msg.sender == token, \"only AP3 token contract\");\r\n        uint256 _amount = address(this).balance;\r\n        \r\n        address[] memory pair = new address[](2);\r\n        pair[0] = IPancakeV2Router02(router).WETH();\r\n        pair[1] = address(token);\r\n\r\n        IPancakeV2Router02(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: _amount}(\r\n                0,\r\n                pair,\r\n                address(this),\r\n                block.timestamp.add(10 minutes)\r\n        );\r\n        \r\n        uint256 _balance = AP3(token).balanceOf(address(this));\r\n        uint256 _fee_holders = _balance.div(25);\r\n        uint256 _fee_team = _balance.div(50);\r\n        AP3(token).transfer(token, _fee_holders);\r\n        AP3(token).transfer(team, _fee_team);\r\n        \r\n        uint256 _burn_balance = AP3(token).balanceOf(address(this));\r\n        AP3(token).burn(_burn_balance);  \r\n        \r\n        return _fee_holders;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"GORILLAEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lptokens\",\"type\":\"uint256\"}],\"name\":\"farmLpWithdrawEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"GORILLA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyholdersTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lptokens\",\"type\":\"uint256\"}],\"name\":\"farmLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"farmLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmLpClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"farmLpRewardsOwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lptokens\",\"type\":\"uint256\"}],\"name\":\"farmLpWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmrounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancake_swap_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleSetupLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"servicepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakingRewardsOwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensforbnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AP3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e776f47cd4c12cbad5cfd26cca5d3343ec76804253e9786398d6cd85272ad38e"}