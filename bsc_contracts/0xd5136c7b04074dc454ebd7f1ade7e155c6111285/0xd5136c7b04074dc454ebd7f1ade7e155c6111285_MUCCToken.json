{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"MUCC_merge.sol\":{\"content\":\"pragma solidity 0.6.12;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./IBEP20.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WDCC() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// pragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract MUCCTokenCallbackSinglePool is Ownable {\\r\\n   using SafeMath for uint256;\\r\\n\\r\\n   IUniswapV2Router02 public router;\\r\\n   address public muccTokenAddress;\\r\\n   address public toAddress;\\r\\n   address public usdtAddress;\\r\\n   address public uniswapV2PairUsdt;\\r\\n\\r\\n   uint256 public  usdtRewardThreshlod; //100u\\r\\n\\r\\n\\r\\n   bool inSwapAndLiquify;\\r\\n   int public locki = 0;\\r\\n   modifier lockTheSwap() {\\r\\n       inSwapAndLiquify = true;\\r\\n       locki = locki + 1;\\r\\n       _;\\r\\n       inSwapAndLiquify = false;\\r\\n   }\\r\\n\\r\\n   constructor (\\r\\n       address _router,\\r\\n       address _muccToken,\\r\\n       address _usdtAddress,\\r\\n       address _toAddress,\\r\\n       address _uniswapV2PairUsdt\\r\\n   ) public {\\r\\n       router = IUniswapV2Router02(_router);\\r\\n       muccTokenAddress = _muccToken;\\r\\n       usdtAddress = _usdtAddress;\\r\\n       toAddress = _toAddress;\\r\\n       uniswapV2PairUsdt = _uniswapV2PairUsdt;\\r\\n       usdtRewardThreshlod = 500 * (10 ** uint256(IBEP20(usdtAddress).decimals()));\\r\\n       \\r\\n//        _usdtRewardThreshlod = 1 * (10 ** uint256(IBEP20(usdtAddress).decimals()));\\r\\n   }\\r\\n\\r\\n\\r\\n   function getNewPrice() public view returns (uint256 newPrice){\\r\\n       if (IBEP20(uniswapV2PairUsdt).totalSupply() \\u003e 0 \\u0026\\u0026 IBEP20(usdtAddress).balanceOf(uniswapV2PairUsdt) \\u003e 10 * 10 ** 18) {\\r\\n           address[] memory t = new address[](2);\\r\\n\\r\\n           t[0] = muccTokenAddress;\\r\\n           t[1] = usdtAddress;\\r\\n\\r\\n           uint256[] memory amounts = router.getAmountsOut(1 * (10 ** uint256(IBEP20(muccTokenAddress).decimals())), t);\\r\\n           newPrice = amounts[1];\\r\\n       }\\r\\n   }\\r\\n\\r\\n   function setOnSwap(bool _swapSwitch) public onlyOwner {\\r\\n       swapSwitch = _swapSwitch;\\r\\n\\r\\n   }\\r\\n\\r\\n   bool public  swapSwitch = true;\\r\\n\\r\\n\\r\\n   function swapAndLiquify() public {\\r\\n       if (!inSwapAndLiquify) {\\r\\n           uint256 contractTokenBalance = IBEP20(muccTokenAddress).balanceOf(address(this));\\r\\n\\r\\n           uint256 newPrice = getNewPrice();\\r\\n\\r\\n           uint256 tokenUsdtValue = contractTokenBalance.mul(newPrice).div(10 ** uint256(IBEP20(muccTokenAddress).decimals()));\\r\\n\\r\\n           // split the contract balance into halves\\r\\n           if (tokenUsdtValue \\u003e usdtRewardThreshlod) {\\r\\n\\r\\n               if (swapSwitch) {\\r\\n                    uint256 initialBalanceUsdt = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n                    swapTokensForUsdt(contractTokenBalance);\\r\\n                    uint256 usdtBalanceAll = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n                    uint256 newUsdtBalance = usdtBalanceAll.sub(initialBalanceUsdt);\\r\\n                    if(newUsdtBalance \\u003e 0){\\r\\n                        uint256 usdtBalanceFee = newUsdtBalance.div(7); //7\u5206\u4e4b\u4e00\u7ed9fee\\r\\n                        IBEP20(usdtAddress).transfer(toAddress, usdtBalanceFee);\\r\\n                        // toAddress\\r\\n                        \\r\\n                        uint256 usdtRewardAssign = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n                        if(usdtRewardAssign\\u003e0){\\r\\n                            IBEP20(usdtAddress).transfer(muccTokenAddress, usdtRewardAssign);\\r\\n                            MUCCToken(muccTokenAddress).assignUsdtRewardFromCallback(usdtRewardAssign);\\r\\n                        }\\r\\n                    }\\r\\n               }\\r\\n               \\r\\n           }\\r\\n       }\\r\\n   }\\r\\n\\r\\n\\r\\n   function swapTokensForUsdt(\\r\\n       uint256 tokenAmount\\r\\n   ) private lockTheSwap {\\r\\n       // generate the uniswap pair path of token -\\u003e weth\\r\\n       address[] memory path = new address[](2);\\r\\n       path[0] = address(muccTokenAddress);\\r\\n       path[1] = usdtAddress;\\r\\n       IBEP20(address(muccTokenAddress)).approve(address(router), tokenAmount);\\r\\n       // make the swap\\r\\n       router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n           tokenAmount,\\r\\n           0, // accept any amount of ETH\\r\\n           path,\\r\\n           address(this),\\r\\n           block.timestamp\\r\\n       );\\r\\n   }\\r\\n  \\r\\n   function setUsdtRewardThreshlod(uint256 _usdtRewardThreshlod) external onlyOwner {\\r\\n       usdtRewardThreshlod = _usdtRewardThreshlod;\\r\\n   }\\r\\n\\r\\n   function setToAddress(address _toAddress) external onlyOwner {\\r\\n       toAddress = _toAddress;\\r\\n   }\\r\\n\\r\\n   function transferToken(address token, address to) public onlyOwner {\\r\\n       require(token != address(0), \\u0027CallBack::transferToken::TOKEN_ZERO_ADDRESS\\u0027);\\r\\n       require(to != address(0), \\u0027CallBack::transferToken::TO_ZERO_ADDRESS\\u0027);\\r\\n       uint256 newBalanceToken0 = IBEP20(token).balanceOf(address(this));\\r\\n\\r\\n       IBEP20(token).transfer(to, newBalanceToken0);\\r\\n   }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\ncontract MUCCToken is IBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) internal _tOwned;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowances;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    uint256 internal _tTotal;\\r\\n\\r\\n    address public _owner;\\r\\n    address public foundationAddress = 0xcd0a64f01ECDF39BbCc09Da702Cc639102f752b9;\\r\\n    address public feeAddress = 0x50dbBbBe09A4C52470458169767058Ee30932a5A;\\r\\n    uint public feeRate = 7;\\r\\n\\r\\n    uint public foundationRate = 1;  //dao\\r\\n    uint public blackHoleRate = 1;\\r\\n    uint public addLiquidRate = 1;\\r\\n    uint public  stakeRewardRate = 35; //div 10\\r\\n    uint public tailBonusRate = 5; // div 10\\r\\n\\r\\n    address public uniswapV2PairUsdt;\\r\\n\\r\\n    address public lastBuyAddress = address(0);\\r\\n    uint256 public lastBuyTime = 0;\\r\\n\\r\\n    uint256 public _supply = 14905600;\\r\\n\\r\\n    address burnAddress = address(0);\\r\\n    mapping(address =\\u003e bool) public blackList;\\r\\n\\r\\n\\r\\n    mapping(address =\\u003e bool) public uniswapV2PairList;\\r\\n    bool public useWhiteListSwith = true;\\r\\n\\r\\n    address public  callback;\\r\\n    MUCCTokenCallbackSinglePool bfavTokenCallbackSinglePool;\\r\\n    IUniswapV2Router02 public router;\\r\\n      address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955; //TODO idc \\r\\n    // address public usdtAddress = 0xc9d9467a1D5Bf5736195059145d6aE924B69e209;\\r\\n    \\r\\n\\r\\n    uint256 internal _minSupply;\\r\\n    uint256 _burnedAmount;\\r\\n\\r\\n    address[] public nodeList;\\r\\n    mapping(address =\\u003e uint) public nodeRewardMap;\\r\\n    // mapping(address =\\u003e bool) public nodeListPushed;\\r\\n    mapping(address =\\u003e bool) public noFeeWhiteList;\\r\\n    mapping(address =\\u003e bool) public noNodeList;\\r\\n    // mapping(address =\\u003e bool) public whiteList;\\r\\n    // bool public start ;\\r\\n    mapping(address =\\u003e UserInfo) public userInfo;\\r\\n\\r\\n    uint256 public  distributePos = 0;\\r\\n    uint256 public  distributeLimitOneTime = 5; //TODO\\r\\n    uint256 public  muccRewardThreshlod; //10000\\r\\n\\r\\n    uint256 public  totalHoldForReward;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 nodePower;//\u76f4\u63a8\u7b97\u529b\\r\\n        uint256 nodeDebt;//\u8282\u70b9\u6536\u76ca\u8d1f\u8f7d\\r\\n    }\\r\\n\\r\\n    struct RewardNodePool {\\r\\n        uint256 totalReward;//\u5f53\u524d\u6536\u76ca\u603b\u91cf\\r\\n        uint256 lastReward;//\u4e0a\u6b21\u6536\u76ca\\r\\n        uint256 accRewardPerShare;//\u6bcf\u80a1\u6536\u76ca\\r\\n    }\\r\\n\\r\\n    RewardNodePool public rewardNodePool;\\r\\n\\r\\n    event blackUser(address indexed from, address indexed to, uint value);\\r\\n    event setUniswapPairListEvent(address indexed pairAddress, bool indexed isPair);\\r\\n    event setBlackListEvent(address indexed pairAddress, bool indexed isPair);\\r\\n    event setNoFeeWhiteListEvent(address indexed pairAddress, bool indexed isPair);\\r\\n    event setFeeRateEvent(uint indexed _feeRate);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"admin: wut?\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //\u6700\u540e\u9500\u6bc1\u81f33000\u679a\u3002\\r\\n    constructor (\\r\\n        // address _usdtAddress,\\r\\n        address _router\\r\\n    ) public {\\r\\n        router = IUniswapV2Router02(_router);\\r\\n//router test  0xce3a34b6b9b092f0f8c88063afe4aaa784a1a1a3\\r\\n//router id   0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        // usdtAddress = _usdtAddress;\\r\\n        _decimals = 18;\\r\\n        _tTotal = _supply * (10 ** uint256(_decimals));\\r\\n        _name = \\\"MUCC\\\";\\r\\n        _symbol = \\\"MUCC\\\";\\r\\n\\r\\n        _tOwned[msg.sender] = _tTotal;\\r\\n        emit Transfer(address(0), msg.sender, _tOwned[msg.sender]);\\r\\n\\r\\n        _minSupply = 3000 * (10 ** uint256(decimals()));\\r\\n\\r\\n       \\r\\n        uniswapV2PairUsdt = createPair(usdtAddress);  //usdt\\r\\n        \\r\\n        // createPair(0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd);//wbnb\\r\\n        // createPair(0xe0DF6C2738Ec5D9f46B065596B39Db8D2c51d828); //busd\\r\\n\\r\\n        createPair(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);//wbnb  - idc\\r\\n        createPair(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); //busd  - idc\\r\\n\\r\\n        _owner = msg.sender;\\r\\n       bfavTokenCallbackSinglePool = new MUCCTokenCallbackSinglePool(address(router), address(this), usdtAddress, feeAddress, uniswapV2PairUsdt);\\r\\n       callback = address(bfavTokenCallbackSinglePool);\\r\\n       noFeeWhiteList[0xba082f065Ca89e92e51bA57afE55f6B1E27b1edf] = true;\\r\\n       noFeeWhiteList[msg.sender] = true;\\r\\n       noFeeWhiteList[address(this)] = true;\\r\\n       noFeeWhiteList[callback] = true;\\r\\n       noNodeList[0xba082f065Ca89e92e51bA57afE55f6B1E27b1edf] = true;\\r\\n       noNodeList[msg.sender] = true;\\r\\n       noNodeList[address(this)] = true;\\r\\n       noNodeList[callback] = true;\\r\\n\\r\\n    //    whiteList[0xba082f065Ca89e92e51bA57afE55f6B1E27b1edf] = true;\\r\\n    //    whiteList[msg.sender] = true;\\r\\n\\r\\n    //    start = false;\\r\\n\\r\\n        muccRewardThreshlod = 10000 * (10 ** uint256(decimals()));\\r\\n    }\\r\\n\\r\\n    function createPair(address _pairBaseAddress) private returns(address) {\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(router.factory())\\r\\n        .createPair(address(this), _pairBaseAddress);\\r\\n\\r\\n        uniswapV2PairList[_uniswapV2Pair] = true;\\r\\n        return _uniswapV2Pair;\\r\\n    }\\r\\n\\r\\n    function minSupply() public view returns (uint256) {\\r\\n        return _minSupply;\\r\\n    }\\r\\n\\r\\n    function transferOwner(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"newOwner is zero address\\\");\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function getNodeList() view external returns(address[] memory){\\r\\n        return  nodeList;\\r\\n    }\\r\\n\\r\\n   function setMUCCTokenCallback(address _bfavTokenCallback) external onlyOwner {\\r\\n       callback = _bfavTokenCallback;\\r\\n   }\\r\\n   function setUsdtRewardThreshlod(uint256 _usdtRewardThreshlod) external onlyOwner {\\r\\n       bfavTokenCallbackSinglePool.setUsdtRewardThreshlod(_usdtRewardThreshlod);\\r\\n   }\\r\\n    function setMuccRewardThreshlod(uint256 _muccRewardThreshlod) external onlyOwner {\\r\\n       muccRewardThreshlod = _muccRewardThreshlod;\\r\\n   }\\r\\n\\r\\n    function setUniswapPairList(address pairAddress, bool isPair) external onlyOwner {\\r\\n        require(pairAddress != address(0), \\\"pairAddress is zero address\\\");\\r\\n        uniswapV2PairList[pairAddress] = isPair;\\r\\n        emit setUniswapPairListEvent(  pairAddress,  isPair);\\r\\n    }\\r\\n\\r\\n    function setBlackList(address userAddress, bool isBlock) external onlyOwner {\\r\\n        require(userAddress != address(0), \\\"userAddress is zero address\\\");\\r\\n        blackList[userAddress] = isBlock;\\r\\n        emit setBlackListEvent(  userAddress,  isBlock);\\r\\n    }\\r\\n    function setNoFeeWhiteList(address userAddress, bool isWhiteList) external onlyOwner {\\r\\n        require(userAddress != address(0), \\\"userAddress is zero address\\\");\\r\\n        noFeeWhiteList[userAddress] = isWhiteList;\\r\\n        emit setNoFeeWhiteListEvent(  userAddress,  isWhiteList);\\r\\n    }\\r\\n    function setNoNodeList(address userAddress, bool isNode) external onlyOwner {\\r\\n        require(userAddress != address(0), \\\"userAddress is zero address\\\");\\r\\n        noNodeList[userAddress] = isNode;\\r\\n    }\\r\\n    // function setWhiteList(address userAddress, bool isWhite) external onlyOwner {\\r\\n    //     require(userAddress != address(0), \\\"userAddress is zero address\\\");\\r\\n    //     whiteList[userAddress] = isWhite;\\r\\n    // }\\r\\n    // function setStart(bool _start) external onlyOwner {\\r\\n    //     start = _start;\\r\\n    // }\\r\\n    function setFeeRate(uint _feeRate) external onlyOwner {\\r\\n        feeRate = _feeRate;\\r\\n        emit setFeeRateEvent(  _feeRate);\\r\\n    }\\r\\n\\r\\n    function setDistributeLimitOneTime(uint _distributeLimitOneTime) external onlyOwner {\\r\\n        distributeLimitOneTime = _distributeLimitOneTime;\\r\\n    }\\r\\n\\r\\n    function setRouter(address _router) external onlyOwner {\\r\\n        router = IUniswapV2Router02(_router);\\r\\n        // emit setRouterEvent(  _router);\\r\\n    }\\r\\n    \\r\\n    function setNodeReward(address nodeAddress,uint _flag) external onlyOwner {\\r\\n        nodeRewardMap[nodeAddress] = _flag;\\r\\n        // emit setRouterEvent(  _router);\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\r\\n        feeAddress = _feeAddress;\\r\\n        bfavTokenCallbackSinglePool.setToAddress(feeAddress);\\r\\n    }\\r\\n\\r\\n    function setOnSwap(bool _swapSwitch) public onlyOwner {\\r\\n        bfavTokenCallbackSinglePool.setOnSwap(_swapSwitch);\\r\\n    }\\r\\n\\r\\n    function transferCallbackToken(address token, address to) external onlyOwner {\\r\\n        bfavTokenCallbackSinglePool.transferToken(token, to);\\r\\n    }\\r\\n\\r\\n   function transferToken(address token, address to) public onlyOwner {\\r\\n       require(token != address(0), \\u0027MuccToken::transferToken::TOKEN_ZERO_ADDRESS\\u0027);\\r\\n       require(to != address(0), \\u0027MuccToken::transferToken::TO_ZERO_ADDRESS\\u0027);\\r\\n       uint256 newBalanceToken0 = IBEP20(token).balanceOf(address(this));\\r\\n\\r\\n       IBEP20(token).transfer(to, newBalanceToken0);\\r\\n   }\\r\\n\\r\\n    function setFoundationAddress(address _foundationAddress) external onlyOwner {\\r\\n        foundationAddress = _foundationAddress;\\r\\n    }\\r\\n\\r\\n    function burnedAmount() public view returns (uint256) {\\r\\n        return _burnedAmount;\\r\\n    }\\r\\n\\r\\n    function setFoundationRate(uint _foundationRate) external onlyOwner {\\r\\n        foundationRate = _foundationRate;\\r\\n    }\\r\\n\\r\\n    function name() public override view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public override view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public override view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getOwner() public view override returns (address){\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _tOwned[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        address msgSender = msg.sender;\\r\\n        _approve(sender, msgSender, _allowances[sender][msgSender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function calculateFee(uint256 _amount) public view returns (uint256) {\\r\\n        return _amount.mul(uint256(feeRate)).div(\\r\\n            10 ** 2\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(address(callback) != address(0), \\\"callback can not be zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(feeRate \\u003e 0, \\\"fee rate must be greater than zero\\\");\\r\\n        uint256 leftAmount = _tTotal.sub(_burnedAmount);\\r\\n\\r\\n        require(!blackList[from] \\u0026\\u0026 !blackList[to], \\\"black transfer not allowed\\\");\\r\\n\\r\\n        // require(whiteList[tx.origin] || start, \\\"transfer not allowed\\\");\\r\\n\\r\\n        uint256 fee = 0;\\r\\n\\r\\n        if(lastBuyTime\\u003e0 \\u0026\\u0026 lastBuyAddress != address(0) \\u0026\\u0026 _tOwned[address(this)]\\u003e0 ){\\r\\n            uint256 diffTime = block.timestamp - lastBuyTime;\\r\\n            // TODO if(diffTime \\u003e= 20*60){\\r\\n            if(diffTime \\u003e= 20*60){\\r\\n                uint256 tailBonusReward = _tOwned[address(this)].div(2);\\r\\n                _tOwned[address(this)] = _tOwned[address(this)].sub(tailBonusReward);\\r\\n                _tOwned[lastBuyAddress] = _tOwned[lastBuyAddress].add(tailBonusReward);\\r\\n                emit Transfer(address(this),lastBuyAddress, tailBonusReward);\\r\\n\\r\\n                lastBuyTime = 0;\\r\\n                lastBuyAddress = address(0);\\r\\n            }\\r\\n        }\\r\\n            \\r\\n            // sell  or  buy\\r\\n            if ((uniswapV2PairList[to] || uniswapV2PairList[from]) \\u0026\\u0026 \\r\\n                 from != callback \\u0026\\u0026 to != callback\\r\\n                \\u0026\\u0026 noFeeWhiteList[tx.origin] != true\\r\\n                ) {\\r\\n\\r\\n                fee = calculateFee(amount);\\r\\n                if (fee \\u003e 0) {\\r\\n                    // address  uniswapV2Pair = from;\\r\\n                    if(leftAmount \\u003e _minSupply \\u0026\\u0026 leftAmount \\u003e fee){\\r\\n                        uint256 leftAmountSubFee = leftAmount.sub(fee);\\r\\n                        if (leftAmountSubFee \\u003c _minSupply) {\\r\\n                            fee = leftAmount.sub(_minSupply);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    uint256 foundationAmount = fee.mul(foundationRate).div(feeRate);\\r\\n\\r\\n                    _tOwned[foundationAddress] = _tOwned[foundationAddress].add(foundationAmount);\\r\\n                    emit Transfer(from, foundationAddress, foundationAmount);\\r\\n\\r\\n                    if(leftAmount \\u003e _minSupply ){\\r\\n                        uint256 blackHoleAmount = fee.mul(blackHoleRate).div(feeRate);\\r\\n                        _tOwned[burnAddress] = _tOwned[burnAddress].add(blackHoleAmount);\\r\\n                        _burnedAmount = _burnedAmount.add(blackHoleAmount);\\r\\n                        emit Transfer(from, burnAddress, blackHoleAmount);\\r\\n                    }\\r\\n\\r\\n                    uint256 addLiquidAmount = fee.mul(addLiquidRate).div(feeRate);\\r\\n                    _tOwned[uniswapV2PairUsdt] = _tOwned[uniswapV2PairUsdt].add(addLiquidAmount);\\r\\n                    emit Transfer(from, uniswapV2PairUsdt, addLiquidAmount);\\r\\n\\r\\n                    uint256 stakeRewardAmount = fee.mul(stakeRewardRate).div(10).div(feeRate);\\r\\n                    _tOwned[address(callback)] = _tOwned[address(callback)].add(stakeRewardAmount);\\r\\n                    emit Transfer(from, address(callback), stakeRewardAmount);\\r\\n\\r\\n                    uint256 tailBonusAmount = fee.mul(tailBonusRate).div(10).div(feeRate);\\r\\n                    _tOwned[address(this)] = _tOwned[address(this)].add(tailBonusAmount);\\r\\n                    emit Transfer(from, address(this), tailBonusAmount);\\r\\n\\r\\n                    // add liquidate   / buy\\r\\n                    if( uniswapV2PairList[from]\\r\\n                    ){\\r\\n                        uint256 newPrice = getNewPrice();\\r\\n                        uint256 newValue = newPrice.mul(amount).div(10 ** 18); \\r\\n\\r\\n                        if(newValue \\u003e  (10 ** uint256(IBEP20(usdtAddress).decimals()))){\\r\\n                            lastBuyAddress = to;\\r\\n                            lastBuyTime = block.timestamp;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                } else {\\r\\n                    fee = 0;\\r\\n                }\\r\\n            }\\r\\n        // enough  liquid\\r\\n        if (IBEP20(uniswapV2PairUsdt).totalSupply() \\u003e 0 \\u0026\\u0026 balanceOf(uniswapV2PairUsdt) \\u003e 10 * 10 ** 18) {\\r\\n            //\\u0026\\u0026 !uniswapV2PairList[to]  \u6b63\u5728\u5206\u7ea2\u7684\u65f6\u5019\u4e0d\u89e6\u53d1\uff0c\u514d\u5f97usdt \u7d2f\u8ba1  \\u0026\\u0026 distributePos == 0  \u901a\u8fc7defi\u7684\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u7528\u8fd9\u4e2a\u9650\u5236\\r\\n            if (!uniswapV2PairList[from] \\u0026\\u0026  balanceOf(address(callback)) \\u003e 0 \\u0026\\u0026 address(callback) != address(0)) {\\r\\n                MUCCTokenCallbackSinglePool(address(callback)).swapAndLiquify();\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        uint acceptAmount = amount - fee ;\\r\\n\\r\\n        uint256 originFromBalance = _tOwned[from]; \\r\\n        uint256 originToBalance = _tOwned[to]; \\r\\n\\r\\n        _tOwned[from] = _tOwned[from].sub(amount);\\r\\n        _tOwned[to] = _tOwned[to].add(acceptAmount);\\r\\n        emit Transfer(from, to, acceptAmount);\\r\\n\\r\\n            uint256 usdtBalanceAll = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n\\r\\n            // \u907f\u514dcallback\\r\\n            if( usdtBalanceAll\\u003e 0 \\u0026\\u0026 totalHoldForReward \\u003e0\\r\\n                \\u0026\\u0026 from != callback \\u0026\\u0026 to != callback\\r\\n                \\u0026\\u0026 from != address(this) \\u0026\\u0026 to != address(this)\\r\\n            )\\r\\n            {\\r\\n                uint256 usdtCurrent = usdtBalanceAll;\\r\\n                uint256 posTmp =distributePos;\\r\\n                uint256 posCurrentAmount;\\r\\n                bool isBreak = false;\\r\\n                for(;posTmp \\u003c nodeList.length \\u0026\\u0026 posCurrentAmount\\u003c (distributeLimitOneTime - 1) ; ){\\r\\n                    address nodeAddress = nodeList[posTmp];\\r\\n                    if(nodeRewardMap[nodeAddress] == 1){\\r\\n                        // uint256 usdtAssign = usdtBalanceAll.mul(balanceOf(nodeAddress)).div(totalHoldForReward);\\r\\n                        UserInfo storage nodeUserInfoAssign = userInfo[nodeAddress];\\r\\n                        updateNodePool(0);\\r\\n                        uint256 pendingNodeUser ;\\r\\n                        if (nodeUserInfoAssign.nodePower \\u003e 0) {\\r\\n                             pendingNodeUser = nodeUserInfoAssign.nodePower.mul(rewardNodePool.accRewardPerShare).div(1e12).sub(nodeUserInfoAssign.nodeDebt);\\r\\n                        }\\r\\n                        nodeUserInfoAssign.nodeDebt = nodeUserInfoAssign.nodePower.mul(rewardNodePool.accRewardPerShare).div(1e12);\\r\\n                        \\r\\n                        usdtCurrent = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n                        if(usdtCurrent==0){\\r\\n                            isBreak = true;\\r\\n                            break;\\r\\n                        }\\r\\n                        posCurrentAmount = posTmp - distributePos;\\r\\n                        if(pendingNodeUser\\u003e0){\\r\\n                            IBEP20(usdtAddress).transfer(nodeAddress, \\r\\n                                pendingNodeUser \\u003e usdtCurrent? usdtCurrent: pendingNodeUser);\\r\\n                        }\\r\\n                    }\\r\\n                    posTmp = posTmp+1;\\r\\n                }\\r\\n                distributePos = posTmp;\\r\\n\\r\\n                if(isBreak || posTmp \\u003e= nodeList.length ){\\r\\n                    distributePos = 0;\\r\\n                }\\r\\n            }\\r\\n        if(!uniswapV2PairList[to]  \\u0026\\u0026 noNodeList[to] != true  ){\\r\\n            \\r\\n            if(_tOwned[to] \\u003e= muccRewardThreshlod){\\r\\n                nodeRewardMap[to]  = 1;\\r\\n            }\\r\\n            if( nodeRewardMap[to] == 1){\\r\\n                uint originToPosition = nodeRewardMap[to]  ;\\r\\n                updateNodePool(0);\\r\\n                UserInfo storage nodeUserInfoTo = userInfo[to];\\r\\n                if(originToPosition == 0 || originToPosition == 2 ){\\r\\n                    // if(nodeListPushed[to]!=true){\\r\\n                    if(originToPosition == 0){ \\r\\n                        nodeList.push(to);\\r\\n                    }\\r\\n                        // nodeListPushed[to] =true;\\r\\n                    // }\\r\\n                    totalHoldForReward = totalHoldForReward.add(_tOwned[to]);\\r\\n                } else if(originToPosition == 1 ){\\r\\n                    uint256 usdtPendingTo = nodeUserInfoTo.nodePower.mul(rewardNodePool.accRewardPerShare).div(1e12).sub(nodeUserInfoTo.nodeDebt);\\r\\n                    if(usdtPendingTo\\u003e0){\\r\\n                        uint256 usdtCurrentTo = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n                        //from \u6301\u4ed3\u51cf\u6301\uff0c\u7ed9\u4ed6\u7ed3\u7b97\u6536\u76ca\\r\\n                        IBEP20(usdtAddress).transfer(to, \\r\\n                                    usdtPendingTo \\u003e usdtCurrentTo? usdtCurrentTo: usdtPendingTo);\\r\\n                    }\\r\\n                    if(totalHoldForReward\\u003e=originToBalance){\\r\\n                        totalHoldForReward = totalHoldForReward.sub(originToBalance);\\r\\n                    }\\r\\n                    totalHoldForReward = totalHoldForReward.add(_tOwned[to]);\\r\\n                }\\r\\n\\r\\n\\r\\n                nodeUserInfoTo.nodePower = _tOwned[to];\\r\\n                nodeUserInfoTo.nodeDebt = nodeUserInfoTo.nodePower.mul(rewardNodePool.accRewardPerShare).div(1e12);\\r\\n            }\\r\\n        }\\r\\n        if(!uniswapV2PairList[from] \\u0026\\u0026 noNodeList[from] != true ) {\\r\\n            updateNodePool(0);\\r\\n            // bool originFromPosition = nodeRewardMap[from]  ;\\r\\n            if(totalHoldForReward\\u003e=originFromBalance){\\r\\n                totalHoldForReward = totalHoldForReward.sub(originFromBalance);\\r\\n            }\\r\\n            // \u6301\u6709\u226510000\u679a\u6709\u6548\u6301\u4ed3 \u5206\u7ea2\\r\\n            if(_tOwned[from] \\u003c muccRewardThreshlod){\\r\\n                nodeRewardMap[from]  = 2;\\r\\n            }else{\\r\\n                totalHoldForReward = totalHoldForReward.add(_tOwned[from]);\\r\\n                // if(totalHoldForReward\\u003e _tTotal){\\r\\n                //     totalHoldForReward = _tTotal;\\r\\n                // }\\r\\n            }\\r\\n            UserInfo storage nodeUserInfoFrom = userInfo[from];\\r\\n\\r\\n\\r\\n            if (nodeUserInfoFrom.nodePower \\u003e 0) {\\r\\n                uint256 usdtPendingFrom = nodeUserInfoFrom.nodePower.mul(rewardNodePool.accRewardPerShare).div(1e12).sub(nodeUserInfoFrom.nodeDebt);\\r\\n                if(usdtPendingFrom\\u003e0){\\r\\n                    uint256 usdtCurrentFrom = IBEP20(usdtAddress).balanceOf(address(this));\\r\\n                    //from \u6301\u4ed3\u51cf\u6301\uff0c\u7ed9\u4ed6\u7ed3\u7b97\u6536\u76ca\\r\\n                    IBEP20(usdtAddress).transfer(from, \\r\\n                                usdtPendingFrom \\u003e usdtCurrentFrom? usdtCurrentFrom: usdtPendingFrom);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            nodeUserInfoFrom.nodePower = _tOwned[from];\\r\\n            nodeUserInfoFrom.nodeDebt = nodeUserInfoFrom.nodePower.mul(rewardNodePool.accRewardPerShare).div(1e12);\\r\\n          \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNewPrice() public view returns (uint256 newPrice){\\r\\n        if (IBEP20(uniswapV2PairUsdt).totalSupply() \\u003e 0 \\u0026\\u0026 balanceOf(uniswapV2PairUsdt) \\u003e 10 * 10 ** 18) {\\r\\n            address[] memory t = new address[](2);\\r\\n\\r\\n            t[0] = address(this);\\r\\n            t[1] = usdtAddress;\\r\\n\\r\\n            uint256[] memory amounts = router.getAmountsOut(1 * (10 ** uint256(_decimals)), t);\\r\\n            newPrice = amounts[1];\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateNodePool(uint256 amout) private {\\r\\n\\r\\n        if (totalHoldForReward == 0) {\\r\\n            rewardNodePool.lastReward = rewardNodePool.totalReward;\\r\\n            rewardNodePool.totalReward = rewardNodePool.totalReward.add(amout);\\r\\n            return;\\r\\n        }\\r\\n        rewardNodePool.totalReward = rewardNodePool.totalReward.add(amout);\\r\\n        rewardNodePool.accRewardPerShare = rewardNodePool.accRewardPerShare.add(rewardNodePool.totalReward.sub(rewardNodePool.lastReward).mul(1e12).div(totalHoldForReward));\\r\\n        rewardNodePool.lastReward = rewardNodePool.lastReward.add(amout);\\r\\n    }\\r\\n\\r\\n    function assignUsdtRewardFromCallback(uint256 amount) external   {\\r\\n        if (amount \\u003e 0 \\u0026\\u0026 address(msg.sender) == address(callback)) {\\r\\n            updateNodePool(amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\nimport \\u0027./Context.sol\\u0027;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\u0027Ownable: caller is not the owner\\u0027);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\u0027Ownable: new owner is the zero address\\u0027);\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x \\u003c y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y \\u003e 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x \\u003c z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"blackUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setBlackListEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setNoFeeWhiteListEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setUniswapPairListEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assignUsdtRewardFromCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHoleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeLimitOneTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBuyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBuyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muccRewardThreshlod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noNodeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeRewardMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardNodePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlock\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributeLimitOneTime\",\"type\":\"uint256\"}],\"name\":\"setDistributeLimitOneTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"}],\"name\":\"setFoundationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundationRate\",\"type\":\"uint256\"}],\"name\":\"setFoundationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bfavTokenCallback\",\"type\":\"address\"}],\"name\":\"setMUCCTokenCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_muccRewardThreshlod\",\"type\":\"uint256\"}],\"name\":\"setMuccRewardThreshlod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhiteList\",\"type\":\"bool\"}],\"name\":\"setNoFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNode\",\"type\":\"bool\"}],\"name\":\"setNoNodeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"setNodeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapSwitch\",\"type\":\"bool\"}],\"name\":\"setOnSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setUniswapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtRewardThreshlod\",\"type\":\"uint256\"}],\"name\":\"setUsdtRewardThreshlod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tailBonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferCallbackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV2PairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairUsdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhiteListSwith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nodePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MUCCToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b867d617dda40385fb47c3da1c9162ad11b3a413bea8aa919f4f809cf242bc8"}