{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swapper/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ISwapper {\\n\\tfunction swap(\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        address caller,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/swapper/MegaSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../utils/SafeMath.sol\\\";\\nimport \\\"../utils/RevertReasonParser.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract MegaSwapper {\\n    using SafeMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    address public constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant ZERO_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n\\n    event Swap(\\n        address indexed inToken,\\n        address indexed outToken,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address recipient\\n    );\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ZERO_ADDRESS || token == ETH_ADDRESS);\\n    }\\n\\n    function swap(\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        address caller,\\n        bytes calldata data\\n    ) external payable returns (uint256) {\\n        address recipient = msg.sender;\\n        if (isETH(inToken)) {\\n            (bool success, bytes memory result) = address(caller).call{\\n                value: msg.value\\n            }(data);\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"callBytes failed: \\\"));\\n            }\\n        } else {\\n            IERC20(inToken).approve(caller, type(uint256).max);\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory result) = address(caller).call(data);\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"callBytes failed: \\\"));\\n            }\\n            IERC20(inToken).approve(caller, 0);\\n        }\\n\\n        bool outETH = isETH(outToken);\\n        uint256 outAmount;\\n        if (!outETH) {\\n            outAmount = IERC20(outToken).balanceOf(address(this));\\n            if (outAmount > 0) {\\n                IERC20(outToken).safeTransfer(recipient, outAmount);\\n            }\\n        } else {\\n            outAmount = address(this).balance;\\n            if (outAmount > 0) {\\n                _transferOutETH(recipient, outAmount);\\n            }\\n        }\\n        emit Swap(inToken, outToken, inAmount, outAmount, recipient);\\n        return outAmount;\\n    }\\n\\n    receive() external payable {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender != tx.origin, \\\"ETH deposit rejected\\\");\\n    }\\n\\n    function _transferOutETH(address receiver, uint256 amountOut) internal {\\n        (bool success, ) = payable(receiver).call{value: amountOut}(\\\"\\\");\\n        require(success, \\\"vault: send ETH fail\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/update/IUpdateState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../utils/INameVersion.sol\\\";\\nimport \\\"../utils/IAdmin.sol\\\";\\n\\ninterface IUpdateState is INameVersion, IAdmin {\\n    function resetFreezeStart() external;\\n\\n    function balances(\\n        address account,\\n        address asset\\n    ) external view returns (int256);\\n\\n    struct AccountPosition {\\n        int64 volume;\\n        int64 lastCumulativeFundingPerVolume;\\n        int128 entryCost;\\n    }\\n\\n    function accountPositions(\\n        address account,\\n        bytes32 symbolId\\n    ) external view returns (AccountPosition memory);\\n}\\n\"\r\n    },\r\n    \"contracts/update/UpdateStateStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../utils/Admin.sol\\\";\\n\\nabstract contract UpdateStateStorage is Admin {\\n\\n    address public implementation;\\n\\n    bool internal _mutex;\\n\\n    modifier _reentryLock_() {\\n        require(!_mutex, \\\"update: reentry\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    uint256 public lastUpdateTimestamp;\\n\\n    uint256 public lastBatchId;\\n\\n    uint256 public lastEndTimestamp;\\n\\n    bool public isFreezed;\\n\\n    bool public isFreezeStart;\\n\\n    uint256 public freezeStartTimestamp;\\n\\n    modifier _notFreezed() {\\n        require(!isFreezed, \\\"update: freezed\\\");\\n        _;\\n    }\\n\\n    modifier _onlyOperator() {\\n        require(isOperator[msg.sender], \\\"update: only operator\\\");\\n        _;\\n    }\\n\\n    struct SymbolInfo {\\n        string symbolName;\\n        bytes32 symbolId;\\n        uint256 minVolume;\\n        uint256 pricePrecision;\\n        uint256 volumePrecision;\\n        address marginAsset;\\n        bool delisted;\\n    }\\n\\n    struct SymbolStats {\\n        int64 indexPrice;\\n        int64 cumulativeFundingPerVolume;\\n    }\\n\\n    struct AccountPosition {\\n        int64 volume;\\n        int64 lastCumulativeFundingPerVolume;\\n        int128 entryCost;\\n    }\\n\\n    mapping(address => bool) public isOperator;\\n\\n    // indexed symbols for looping\\n    SymbolInfo[] public indexedSymbols;\\n\\n    // symbolId => symbolInfo\\n    mapping (bytes32 => SymbolInfo) public symbols;\\n\\n    // symbolId => symbolStats\\n    mapping(bytes32 => SymbolStats) public symbolStats;\\n\\n    // user => asset => balance\\n    mapping(address => mapping(address => int256)) public balances;\\n\\n    // account => symbolId => AccountPosition\\n    mapping(address => mapping(bytes32 => AccountPosition)) public accountPositions;\\n\\n    // account => hold position #\\n    mapping(address => int256) public holdPositions;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IAdmin.sol\\\";\\n\\nabstract contract Admin is IAdmin {\\n    address public admin;\\n\\n    modifier _onlyAdmin_() {\\n        require(msg.sender == admin, \\\"Admin: only admin\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        admin = msg.sender;\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setAdmin(address newAdmin) external _onlyAdmin_ {\\n        require(newAdmin != address(0), \\\"Admin: set to zero address\\\");\\n        admin = newAdmin;\\n        emit NewAdmin(newAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IAdmin {\\n\\n    event NewAdmin(address indexed newAdmin);\\n\\n    function admin() external view returns (address);\\n\\n    function setAdmin(address newAdmin) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC20 {\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/INameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface INameVersion {\\n\\n    function nameId() external view returns (bytes32);\\n\\n    function versionId() external view returns (bytes32);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/NameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport './INameVersion.sol';\\n\\n/**\\n * @dev Convenience contract for name and version information\\n */\\nabstract contract NameVersion is INameVersion {\\n\\n    bytes32 public immutable nameId;\\n    bytes32 public immutable versionId;\\n\\n    constructor (string memory name, string memory version) {\\n        nameId = keccak256(abi.encodePacked(name));\\n        versionId = keccak256(abi.encodePacked(version));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevertReasonParser.sol\": {\r\n      \"content\": \"// File contracts/helpers/RevertReasonParser.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Library that allows to parse unsuccessful arbitrary calls revert reasons.\\n/// See https://solidity.readthedocs.io/en/latest/control-structures.html#revert for details.\\n/// Note that we assume revert reason being abi-encoded as Error(string) so it may fail to parse reason\\n/// if structured reverts appear in the future.\\n///\\n/// All unsuccessful parsings get encoded as Unknown(data) string\\nlibrary RevertReasonParser {\\n    bytes4 private constant _PANIC_SELECTOR =\\n        bytes4(keccak256(\\\"Panic(uint256)\\\"));\\n    bytes4 private constant _ERROR_SELECTOR =\\n        bytes4(keccak256(\\\"Error(string)\\\"));\\n\\n    function parse(\\n        bytes memory data,\\n        string memory prefix\\n    ) internal pure returns (string memory) {\\n        if (data.length >= 4) {\\n            bytes4 selector;\\n            assembly {\\n                // solhint-disable-line no-inline-assembly\\n                selector := mload(add(data, 0x20))\\n            }\\n\\n            // 68 = 4-byte selector + 32 bytes offset + 32 bytes length\\n            if (selector == _ERROR_SELECTOR && data.length >= 68) {\\n                uint256 offset;\\n                bytes memory reason;\\n                // solhint-disable no-inline-assembly\\n                assembly {\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    offset := mload(add(data, 36))\\n                    reason := add(data, add(36, offset))\\n                }\\n                /*\\n                    revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                    also sometimes there is extra 32 bytes of zeros padded in the end:\\n                    https://github.com/ethereum/solidity/issues/10170\\n                    because of that we can't check for equality and instead check\\n                    that offset + string length + extra 36 bytes is less than overall data length\\n                */\\n                require(\\n                    data.length >= 36 + offset + reason.length,\\n                    \\\"Invalid revert reason\\\"\\n                );\\n                return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n            }\\n            // 36 = 4-byte selector + 32 bytes integer\\n            else if (selector == _PANIC_SELECTOR && data.length == 36) {\\n                uint256 code;\\n                // solhint-disable no-inline-assembly\\n                assembly {\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    code := mload(add(data, 36))\\n                }\\n                return\\n                    string(\\n                        abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\")\\n                    );\\n            }\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns (string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns (string memory) {\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary SafeMath {\\n\\n    uint256 constant UMAX = 2 ** 255 - 1;\\n    int256  constant IMIN = -2 ** 255;\\n\\n    function utoi(uint256 a) internal pure returns (int256) {\\n        require(a <= UMAX, 'SafeMath.utoi: overflow');\\n        return int256(a);\\n    }\\n\\n    function itou(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, 'SafeMath.itou: underflow');\\n        return uint256(a);\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != IMIN, 'SafeMath.abs: overflow');\\n        return a >= 0 ? a : -a;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    // rescale a uint256 from base 10**decimals1 to 10**decimals2\\n    function rescale(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256) {\\n        return decimals1 == decimals2 ? a : a * 10**decimals2 / 10**decimals1;\\n    }\\n\\n    // rescale towards zero\\n    // b: rescaled value in decimals2\\n    // c: the remainder\\n    function rescaleDown(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256 b, uint256 c) {\\n        b = rescale(a, decimals1, decimals2);\\n        c = a - rescale(b, decimals2, decimals1);\\n    }\\n\\n    // rescale towards infinity\\n    // b: rescaled value in decimals2\\n    // c: the excessive\\n    function rescaleUp(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256 b, uint256 c) {\\n        b = rescale(a, decimals1, decimals2);\\n        uint256 d = rescale(b, decimals2, decimals1);\\n        if (d != a) {\\n            b += 1;\\n            c = rescale(b, decimals2, decimals1) - a;\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/vault/VaultImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../utils/IERC20.sol\\\";\\nimport \\\"../utils/NameVersion.sol\\\";\\nimport \\\"../utils/SafeMath.sol\\\";\\nimport \\\"../swapper/MegaSwapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../swapper/ISwapper.sol\\\";\\nimport \\\"../update/IUpdateState.sol\\\";\\nimport \\\"../update/UpdateStateStorage.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract VaultImplementation is VaultStorage, NameVersion {\\n    using SafeERC20 for IERC20;\\n\\n    event AddSigner(address signer);\\n\\n    event RemoveSigner(address signer);\\n\\n    event AddAsset(address asset);\\n\\n    event RemoveAsset(address asset);\\n\\n    event Deposit(\\n        address indexed token,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    event Withdraw(\\n        address indexed token,\\n        address indexed account,\\n        uint256 amount,\\n        uint256 expiry,\\n        uint256 nonce,\\n        bytes signatures\\n    );\\n\\n    using SafeMath for uint256;\\n\\n    using SafeMath for int256;\\n\\n    string public constant name = \\\"Vault\\\";\\n\\n    uint256 public immutable chainId;\\n\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 public constant WITHDRAW_TYPEHASH =\\n        keccak256(\\n            \\\"Withdraw(address token,address account,uint256 amount,uint256 expiry,uint256 nonce)\\\"\\n        );\\n\\n    ISwapper public immutable swapper;\\n\\n    address public immutable update;\\n\\n    address public immutable marketVault;\\n\\n    constructor(\\n        address _swapper,\\n        address _update,\\n        address _marketVault\\n    ) NameVersion(\\\"VaultImplementation\\\", \\\"1.0.0\\\") {\\n        uint256 _chainId;\\n        assembly {\\n            _chainId := chainid()\\n        }\\n        chainId = _chainId;\\n        swapper = ISwapper(_swapper);\\n        update = _update;\\n        marketVault = _marketVault;\\n    }\\n\\n    function initializeDomain() external {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // ========================================================\\n    // balance update\\n    // ========================================================\\n    function setOperator(\\n        address operator_,\\n        bool isActive\\n    ) external _onlyAdmin_ {\\n        isOperator[operator_] = isActive;\\n    }\\n\\n    // ONLY AVAILABLE ON ARBITRUM\\n    function transferOut(\\n        address account,\\n        address asset,\\n        uint256 amount\\n    ) external _notPaused_ _reentryLock_ {\\n        require(msg.sender == update, \\\"vault: only update contract\\\");\\n        if (asset == address(0)) {\\n            _transferOutETH(account, amount);\\n        } else {\\n            IERC20(asset).safeTransfer(account, amount);\\n        }\\n    }\\n\\n    function settleMarketVault(\\n        address asset,\\n        uint256 amount\\n    ) external _notPaused_ {\\n        require(msg.sender == marketVault, \\\"vault: only market maker vault\\\");\\n        if (asset == address(0)) {\\n            uint256 balance = address(this).balance;\\n            if (amount > balance) {\\n                _transferOutETH(marketVault, balance);\\n                uint256 debtAmount = amount - balance;\\n                debtToMarketVault[asset] += debtAmount;\\n            } else {\\n                _transferOutETH(marketVault, amount);\\n            }\\n        } else {\\n            uint256 balance = IERC20(asset).balanceOf(address(this));\\n            if (amount > balance) {\\n                IERC20(asset).safeTransfer(marketVault, balance);\\n                uint256 debtAmount = amount - balance;\\n                debtToMarketVault[asset] += debtAmount;\\n            } else {\\n                IERC20(asset).safeTransfer(marketVault, amount);\\n            }\\n        }\\n    }\\n\\n    function repayMarketVault(\\n        address asset\\n    ) external _notPaused_ _reentryLock_ {\\n        uint256 debtAmount = debtToMarketVault[asset];\\n        require(debtAmount > 0, \\\"vault: no debt\\\");\\n        if (asset == address(0)) {\\n            require(\\n                debtAmount <= address(this).balance,\\n                \\\"vault: transfer exceed balance\\\"\\n            );\\n            debtToMarketVault[asset] = 0;\\n            _transferOutETH(marketVault, debtAmount);\\n        } else {\\n            require(\\n                debtAmount <= IERC20(asset).balanceOf(address(this)),\\n                \\\"vault: transfer exceed balance\\\"\\n            );\\n            debtToMarketVault[asset] = 0;\\n            IERC20(asset).safeTransfer(marketVault, debtAmount);\\n        }\\n    }\\n\\n    function pause() external _onlyAdmin_ _notPaused_ {\\n        _paused = true;\\n    }\\n\\n    function unpause() external _onlyAdmin_ {\\n        _paused = false;\\n    }\\n\\n    // ========================================================\\n    // udpate signers\\n    // ========================================================\\n    function addSigner(address newSigner) external _onlyAdmin_ {\\n        require(!isValidSigner[newSigner], \\\"vault: duplicate signer\\\");\\n        validSigners.push(newSigner);\\n        isValidSigner[newSigner] = true;\\n        validatorIndex[newSigner] = validSigners.length;\\n        emit AddSigner(newSigner);\\n    }\\n\\n    function removeSigner(address removedSigner) external _onlyAdmin_ {\\n        require(isValidSigner[removedSigner], \\\"vault: not a valid signer\\\");\\n        uint256 length = validSigners.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (validSigners[i] == removedSigner) {\\n                validSigners[i] = validSigners[length - 1];\\n                break;\\n            }\\n        }\\n        validSigners.pop();\\n        validatorIndex[removedSigner] = 0;\\n        isValidSigner[removedSigner] = false;\\n\\n        uint256 len = validSigners.length;\\n        for (uint i = 0; i < len; ++i) {\\n            validatorIndex[validSigners[i]] = i + 1;\\n        }\\n        emit RemoveSigner(removedSigner);\\n    }\\n\\n    function setSignatureThreshold(\\n        uint256 newSignatureThreshold\\n    ) external _onlyAdmin_ {\\n        signatureThreshold = newSignatureThreshold;\\n    }\\n\\n    // ========================================================\\n    // Asset Management\\n    // ========================================================\\n    function addAsset(address asset) external {\\n        require(isOperator[msg.sender], \\\"vault: only operator\\\");\\n        require(!supportedAsset[asset], \\\"vault: asset already added\\\");\\n        indexedAssets.push(asset);\\n        supportedAsset[asset] = true;\\n        emit AddAsset(asset);\\n    }\\n\\n    function removeAsset(address asset) external {\\n        require(isOperator[msg.sender], \\\"vault: only operator\\\");\\n        require(supportedAsset[asset], \\\"vault: asset not found\\\");\\n        uint256 length = indexedAssets.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (indexedAssets[i] == asset) {\\n                indexedAssets[i] = indexedAssets[length - 1];\\n                break;\\n            }\\n        }\\n        indexedAssets.pop();\\n        supportedAsset[asset] = false;\\n        emit RemoveAsset(asset);\\n    }\\n\\n    // ========================================================\\n    // deposit&withdraw\\n    // ========================================================\\n    function swapAndDeposit(\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        address caller,\\n        bytes calldata data\\n    ) external payable _reentryLock_ _notPaused_ {\\n        require(supportedAsset[outToken], \\\"vault: unsupported asset\\\");\\n        address account = msg.sender;\\n        uint256 outAmount;\\n        if (inToken == address(0)) {\\n            require(\\n                msg.value > 0 && msg.value == inAmount,\\n                \\\"vault: wrong ETH amount\\\"\\n            );\\n            outAmount = swapper.swap{value: msg.value}(\\n                inToken,\\n                outToken,\\n                inAmount,\\n                caller,\\n                data\\n            );\\n        } else {\\n            require(inAmount > 0, \\\"vault: amount should be greater than 0\\\");\\n            IERC20(inToken).safeTransferFrom(\\n                account,\\n                address(swapper),\\n                inAmount\\n            );\\n            outAmount = swapper.swap(inToken, outToken, inAmount, caller, data);\\n        }\\n\\n        if (outToken == address(0)) {\\n            emit Deposit(address(0), account, outAmount);\\n        } else {\\n            emit Deposit(outToken, account, outAmount);\\n        }\\n    }\\n\\n    function deposit(\\n        address token,\\n        uint256 amount\\n    ) public payable _reentryLock_ _notPaused_ {\\n        address account = msg.sender;\\n        require(supportedAsset[token], \\\"vault: unsupported asset\\\");\\n        if (token == address(0)) {\\n            require(\\n                msg.value > 0 && msg.value == amount,\\n                \\\"vault: wrong ETH amount\\\"\\n            );\\n            emit Deposit(address(0), account, amount);\\n        } else {\\n            require(amount > 0, \\\"vault: amount should be greater than 0\\\");\\n            IERC20(token).safeTransferFrom(account, address(this), amount);\\n            emit Deposit(token, account, amount);\\n        }\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 expiry,\\n        uint256 nonce,\\n        bytes calldata signatures\\n    ) external _reentryLock_ _notPaused_ {\\n        address account = msg.sender;\\n        require(expiry >= block.timestamp, \\\"vault: withdraw expired\\\");\\n        _checkSignature(token, amount, expiry, nonce, signatures);\\n        // reset freeze start\\n        if (update != address(0)) IUpdateState(update).resetFreezeStart();\\n\\n        if (token == address(0)) {\\n            _transferOutETH(account, amount);\\n        } else {\\n            IERC20(token).safeTransfer(account, amount);\\n        }\\n        emit Withdraw(token, account, amount, expiry, nonce, signatures);\\n    }\\n\\n    function swapAndWithdraw(\\n        address inToken,\\n        uint256 inAmount,\\n        uint256 expiry,\\n        uint256 nonce,\\n        bytes calldata signatures,\\n        address outToken,\\n        address caller,\\n        bytes calldata data\\n    ) external _reentryLock_ _notPaused_ {\\n        address account = msg.sender;\\n        require(expiry >= block.timestamp, \\\"vault: withdraw expired\\\");\\n        _checkSignature(inToken, inAmount, expiry, nonce, signatures);\\n        // reset freeze start\\n        if (update != address(0)) IUpdateState(update).resetFreezeStart();\\n\\n        uint256 outAmount;\\n        if (inToken == address(0)) {\\n            outAmount = swapper.swap{value: inAmount}(\\n                inToken,\\n                outToken,\\n                inAmount,\\n                caller,\\n                data\\n            );\\n        } else {\\n            IERC20(inToken).safeTransfer(address(swapper), inAmount);\\n            outAmount = swapper.swap(inToken, outToken, inAmount, caller, data);\\n        }\\n        if (outToken == address(0)) {\\n            _transferOutETH(account, outAmount);\\n        } else {\\n            IERC20(outToken).safeTransfer(account, outAmount);\\n        }\\n        emit Withdraw(inToken, account, inAmount, expiry, nonce, signatures);\\n    }\\n\\n    function _checkSignature(\\n        address token,\\n        uint256 amount,\\n        uint256 expiry,\\n        uint256 nonce,\\n        bytes calldata signatures\\n    ) internal {\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                WITHDRAW_TYPEHASH,\\n                token,\\n                msg.sender,\\n                amount,\\n                expiry,\\n                nonce\\n            )\\n        );\\n        require(!usedHash[structHash], \\\"vault: withdraw replay\\\");\\n        usedHash[structHash] = true;\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        require(signatures.length % 65 == 0, \\\"vault: invalid signature length\\\");\\n        uint256 signatureCount = signatures.length / 65;\\n        require(\\n            signatureCount >= signatureThreshold,\\n            \\\"vault: wrong number of signatures\\\"\\n        );\\n\\n        address recovered;\\n        uint256 validCount;\\n        bool[] memory signerIndexVisited = new bool[](validSigners.length);\\n\\n        for (uint i = 0; i < signatureCount; ++i) {\\n            recovered = ECDSA.recover(digest, signatures[i * 65:(i + 1) * 65]);\\n            if (\\n                isValidSigner[recovered] &&\\n                !signerIndexVisited[_validatorRealIndex(recovered)]\\n            ) {\\n                validCount++;\\n                signerIndexVisited[_validatorRealIndex(recovered)] = true;\\n            }\\n        }\\n        require(\\n            validCount >= signatureThreshold,\\n            \\\"vault:number of signers not reach limit\\\"\\n        );\\n    }\\n\\n    function _transferOutETH(address receiver, uint256 amountOut) internal {\\n        (bool success, ) = payable(receiver).call{value: amountOut}(\\\"\\\");\\n        require(success, \\\"vault: send ETH fail\\\");\\n    }\\n\\n    function _validatorRealIndex(\\n        address validator\\n    ) internal view returns (uint256) {\\n        uint256 idx = validatorIndex[validator];\\n        require(idx > 0, \\\"validator is not valid\\\");\\n        return idx - 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vault/VaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../utils/Admin.sol\\\";\\n\\nabstract contract VaultStorage is Admin {\\n    address public implementation;\\n\\n    bool internal _mutex;\\n\\n    bool public _paused;\\n\\n    modifier _reentryLock_() {\\n        require(!_mutex, \\\"Vault: reentry\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _notPaused_() {\\n        require(!_paused, \\\"Vault: paused\\\");\\n        _;\\n    }\\n\\n    bytes32 public domainSeparator;\\n\\n    address[] public indexedAssets;\\n\\n    mapping(address => bool) public supportedAsset;\\n\\n    uint256 public signatureThreshold;\\n\\n    address[] public validSigners;\\n\\n    mapping(address => bool) public isValidSigner;\\n\\n    mapping(address => uint256) public validatorIndex;\\n\\n    mapping(bytes32 => bool) public usedHash;\\n\\n    mapping(address => bool) public isOperator;\\n\\n    mapping(address => uint256) public debtToMarketVault;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_update\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AddAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"AddSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"RemoveAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RemoveSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtToMarketVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexedAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedSigner\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"repayMarketVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSignatureThreshold\",\"type\":\"uint256\"}],\"name\":\"setSignatureThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"settleMarketVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validSigners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaultImplementation", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a55d96b2ec5c5899fc69886cacfcba65b91bf8b600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}