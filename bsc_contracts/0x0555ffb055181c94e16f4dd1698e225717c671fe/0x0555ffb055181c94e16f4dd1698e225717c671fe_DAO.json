{"SourceCode": "// File: intdaofork-smartcontract/intdaofork-smartcontract/contracts/ManagedAccount.sol\r\n\r\n\r\n\r\n/*\r\nThis file is part of the DAO.\r\n\r\nThe DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/*\r\nBasic account, used by the DAO contract to separately manage both the rewards \r\nand the extraBalance accounts. \r\n*/\r\npragma solidity 0.8.0;\r\n\r\nabstract contract ManagedAccountInterface {\r\n    // The only address with permission to withdraw from this account\r\n    address public owner;\r\n    // If true, only the owner of the account can receive ether from it\r\n    bool public payOwnerOnly;\r\n    // The sum of ether (in wei) which has been sent to this contract\r\n    uint public accumulatedInput;\r\n\r\n    /// @notice Sends `_amount` of wei to _recipient\r\n    /// @param _amount The amount of wei to send to `_recipient`\r\n    /// @param _recipient The address to receive `_amount` of wei\r\n    /// @return True if the send completed\r\n    // function payOut(address _recipient, uint _amount) virtual external returns (bool);\r\n\r\n    event PayOut(address indexed _recipient, uint _amount);\r\n}\r\n\r\n\r\ncontract ManagedAccount is ManagedAccountInterface{\r\n\r\n    // The constructor sets the owner of the account\r\n    constructor(address _owner, bool _payOwnerOnly) {\r\n        require(_owner != address(0), \"Owner Address can't be zero address\");\r\n        owner = _owner;\r\n        payOwnerOnly = _payOwnerOnly;\r\n    }\r\n\r\n    // When the contract receives a transaction without data this is called. \r\n    // It counts the amount of ether it receives and stores it in \r\n    // accumulatedInput.\r\n    receive() external payable {\r\n        accumulatedInput += msg.value;\r\n    }\r\n\r\n    fallback() external payable {\r\n        accumulatedInput += msg.value;\r\n    }\r\n\r\n    function payOut(address _recipient, uint _amount) external payable returns(bool){\r\n        if (msg.sender != owner || msg.value > 0 || (payOwnerOnly && _recipient != owner))\r\n            revert(\"Not Authorised, No BNB required to call, Recipient address cant be Owner address, Owner can call only call this\");\r\n        (bool success, ) = address(_recipient).call{value: _amount}(\"\");\r\n        require(success, \"Call Failed at Payout\");\r\n        if(success) {\r\n            emit PayOut(_recipient, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getAccumulatedInput() public view returns(uint) {\r\n        return accumulatedInput;\r\n    }\r\n}\r\n\r\n// File: intdaofork-smartcontract/intdaofork-smartcontract/contracts/Token.sol\r\n\r\n\r\n\r\n/*\r\nThis file is part of the DAO.\r\n\r\nThe DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/*\r\nBasic, standardized Token contract with no \"premine\". Defines the functions to\r\ncheck token balances, send tokens, send tokens on behalf of a 3rd party and the\r\ncorresponding approval process. Tokens need to be created by a derived\r\ncontract (e.g. TokenCreation.sol).\r\n\r\nThank you ConsenSys, this contract originated from:\r\nhttps://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/Standard_Token.sol\r\nWhich is itself based on the Ethereum standardized contract APIs:\r\nhttps://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\r\n*/\r\n\r\n// @title Standard Token Contract.\r\n\r\npragma solidity 0.8.0;\r\n\r\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n//this contract calls the imported AggregatorV3Interface contract \r\n//we map imported contract code to a particular contract address to get the live BNB price.\r\ncontract DAITOBNB {\r\n\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    /**\r\n     * Network: Binance Smart Chain\r\n     * Aggregator: BNB/USD\r\n     * Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n     */\r\n    constructor()  {\r\n        //priceFeed = AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526); // BNB / USD\r\n        priceFeed = AggregatorV3Interface(0x0630521aC362bc7A19a4eE44b57cE72Ea34AD01c); // DAI / BNB\r\n    }\r\n\r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getLatestPrice() public view returns (int, uint80, uint, uint, uint80) {\r\n        (\r\n            uint80 roundID,\r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return (price,roundID, startedAt, timeStamp, answeredInRound);\r\n    }\r\n\r\n    //shows decimals\r\n    function decimals() external view returns (uint8) {\r\n        return priceFeed.decimals();\r\n    }\r\n \r\n}\r\n\r\nabstract contract TokenInterface {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) public _allowances;\r\n\r\n    // Total amount of tokens\r\n    uint256  _totalSupply;\r\n\r\n    uint256  _tTotal = 1 * 10**9 * 10**18;\r\n    // @param _owner The address from which the balance will be retrieved\r\n    // @return The balance\r\n    function balanceOf(address _owner) virtual external returns (uint256 balance);\r\n\r\n    // @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transferred\r\n    // @return Whether the transfer was successful  or not\r\n    // function transfer(address _to, uint256 _amount) virtual public returns (bool success);\r\n\r\n    // @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    // is approved by `_from`\r\n    // @param _from The address of the origin of the transfer\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transferred\r\n    // @return Whether the transfer was successful or not\r\n    // function transferFrom(address _from, address _to, uint256 _amount)  virtual external returns (bool success);\r\n\r\n    // @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    // its behalf\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @param _amount The amount of tokens to be approved for transfer\r\n    // @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _amount)  virtual external returns (bool success);\r\n\r\n    // @param _owner The address of the account owning tokens\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @return Amount of remaining tokens of _owner that _spender is allowed\r\n    // to spend\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )  virtual external returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n    );\r\n}\r\n\r\n\r\nabstract contract Token is TokenInterface {\r\n     address public curators;\r\n  \r\n    constructor( address _curator) {\r\n        curators = _curator;\r\n    \r\n    }\r\n \r\n}\r\n\r\n// File: intdaofork-smartcontract/intdaofork-smartcontract/contracts/TokenCreation.sol\r\n\r\n\r\n\r\n/*\r\nThis file is part of the DAO.\r\n\r\nThe DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/*\r\n * Token Creation contract, used by the DAO to create its tokens and initialize\r\n * its ether. Feel free to modify the divisor method to implement different\r\n * Token Creation parameters\r\n*/\r\npragma solidity 0.8.0;\r\n\r\n\r\n\r\nabstract contract TokenCreationInterface {\r\n\r\n    // End of token creation, in Unix time\r\n    uint public closingTime;\r\n    // Minimum fueling goal of the token creation, denominated in tokens to\r\n    // be created\r\n    uint public minTokensToCreate;\r\n    // True if the DAO reached its minimum fueling goal, false otherwise\r\n    bool public isFueled;\r\n    // For DAO splits - if privateCreation is 0, then it is a public token\r\n    // creation, otherwise only the address stored in privateCreation is\r\n    // allowed to create tokens\r\n    address public privateCreation;\r\n    // tracks the amount of wei given from each contributor (used for refund)\r\n    mapping (address => uint256) weiGiven;\r\n\r\n    // @dev Constructor setting the minimum fueling goal and the\r\n    // end of the Token Creation\r\n    // @param _minTokensToCreate Minimum fueling goal in number of\r\n    //        Tokens to be created\r\n    // @param _closingTime Date (in Unix time) of the end of the Token Creation\r\n    // @param _privateCreation Zero means that the creation is public.  A\r\n    // non-zero address represents the only address that can create Tokens\r\n    // (the address can also create Tokens on behalf of other accounts)\r\n    // This is the constructor: it can not be overloaded so it is commented out\r\n    //  function TokenCreation(\r\n        //  uint _minTokensTocreate,\r\n        //  uint _closingTime,\r\n        //  address _privateCreation\r\n    //  );\r\n\r\n    // @notice Create Token with `_tokenHolder` as the initial owner of the Token\r\n    // @param _tokenHolder The address of the Tokens's recipient\r\n    // @return Whether the token creation was successful\r\n     function createTokenProxy(address  _tokenHolder) virtual public payable returns (bool success);\r\n    \r\n\r\n    // @notice Refund `msg.sender` in the case the Token Creation did\r\n    // not reach its minimum fueling goal\r\n    function refund() virtual  external;\r\n\r\n    // @return The divisor used to calculate the token creation rate during\r\n    // the creation phase\r\n    function divisor() virtual internal returns (uint _divisor);\r\n\r\n    event FuelingToDate(uint value);\r\n    event CreatedToken(address indexed to, uint amount);\r\n    event Refund(address indexed to, uint value);\r\n}\r\n\r\n\r\nabstract contract TokenCreation is TokenCreationInterface, Token {\r\n\r\n    // hold extra ether which has been sent after the DAO token\r\n    // creation rate has increased\r\n    ManagedAccount public extraBalance;\r\n    constructor(\r\n        uint _minTokensToCreate,\r\n        uint _closingTime,\r\n        address _privateCreation) {\r\n        closingTime = _closingTime;\r\n        minTokensToCreate = _minTokensToCreate;\r\n        privateCreation = _privateCreation;\r\n        extraBalance = new ManagedAccount(address(this), true);\r\n        \r\n    }\r\n\r\n     function initialTransfer(address from, address _to, uint256 _amount) internal returns (bool success) {\r\n        if (balances[from] >= _amount && _amount > 0) {\r\n            balances[from] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(from, _to, _amount);\r\n            return true;\r\n        } else {\r\n           return false;\r\n        }\r\n    }\r\n\r\n\r\n    function createTokenProxy(address  _tokenHolder) override public payable returns (bool success) {\r\n        uint token;\r\n        if (block.timestamp < closingTime && msg.value > 0\r\n            && (privateCreation == address(0) || privateCreation == msg.sender)) {\r\n\r\n            token = (msg.value * 20) / divisor();\r\n            (bool succes,) = address(extraBalance).call{value: msg.value - token}(\"\");\r\n            require(succes, \"failed to send at createTokenProxy\");\r\n            balances[curators] += token;\r\n            require(initialTransfer(curators, _tokenHolder, token), \"Failed at InitialTransfer\");\r\n            balances[_tokenHolder] += token;\r\n            balances[curators] -= token;\r\n            _tTotal += token;\r\n            weiGiven[_tokenHolder] += msg.value;\r\n            emit CreatedToken(_tokenHolder, token);\r\n            if (_tTotal >= minTokensToCreate && !isFueled) {\r\n                isFueled = true;\r\n                emit FuelingToDate(_tTotal);\r\n            }\r\n            return true;\r\n            \r\n        }\r\n        \r\n        revert();\r\n       \r\n    }\r\n\r\n    function refund()  override external  {\r\n        if (block.timestamp > closingTime && !isFueled) {\r\n            // Get extraBalance - will only succeed when called for the first time\r\n            if (address(extraBalance).balance >= extraBalance.getAccumulatedInput()) {\r\n                extraBalance.payOut(address(this), extraBalance.getAccumulatedInput());\r\n            }\r\n\r\n            // Execute refund\r\n\r\n            // if (msg.sender.call{ value: (weiGiven[msg.sender]) }(\"\")) {\r\n            (bool success,) = msg.sender.call{ value: (weiGiven[msg.sender]) }(\"\");\r\n            if(success) {\r\n                emit Refund(msg.sender, weiGiven[msg.sender]);\r\n                _totalSupply -= balances[msg.sender];\r\n                balances[msg.sender] = 0;\r\n                weiGiven[msg.sender] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function divisor() override internal view  returns (uint _divisor) {\r\n        // The number of (base unit) tokens per wei is calculated\r\n        // as `msg.value` * 20 / `divisor`\r\n        // The fueling period starts with a 1:1 ratio\r\n        if (closingTime - 2 weeks > block.timestamp) {\r\n            return 20;\r\n        // Followed by 10 days with a daily creation rate increase of 5%\r\n        } else if (closingTime - 4 days > block.timestamp) {\r\n            return (20 + (block.timestamp - (closingTime - 2 weeks)) / (1 days));\r\n        // The last 4 days there is a virtual creation rate ratio of 1:1.5\r\n        } else {\r\n            return 30;\r\n        }\r\n    }\r\n\r\n    function getClosingTime() public view returns(uint) {\r\n        return closingTime;\r\n    }\r\n\r\n\r\n  \r\n}\r\n\r\n// File: intdaofork-smartcontract/intdaofork-smartcontract/contracts/DAO.sol\r\n\r\n\r\n/*\r\nThis file is part of the DAO.\r\n\r\nThe DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n/*\r\nStandard smart contract for a Decentralized Autonomous Organization (DAO)\r\nto automate organizational governance and decision-making.\r\n*/\r\npragma solidity 0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IpancakeV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IpancakeV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_Swapping() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint Swapping);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IpancakeV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n  \r\n    \r\n   \r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IpancakeV2Router02 is IpancakeV2Router01 {\r\n    function removeSwappingETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint Swapping,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeSwappingETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint Swapping,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\nabstract contract DAOInterface {\r\n\r\n    // The amount of days for which people who try to participate in the\r\n    // creation by calling the fallback function will still get their ether back\r\n    uint constant CREATION_GRACE_PERIOD = 40 days;\r\n    // The minimum debate period that a generic proposal can have\r\n    uint constant MIN_PROPOSAL_DEBATE_PERIOD = 2 weeks;\r\n    // The minimum debate period that a split proposal can have\r\n    uint constant MIN_SPLIT_DEBATE_PERIOD = 1 weeks;\r\n    // Period of days inside which it's possible to execute a DAO split\r\n    uint constant SPLIT_EXECUTION_PERIOD = 27 days;\r\n    // Period of time after which the minimum Quorum is halved\r\n    uint constant QUORUM_HALVING_PERIOD = 25 weeks;\r\n    // Period after which a proposal is closed\r\n    // (used in the case `executeProposal` fails because it revert()s)\r\n    uint constant EXECUTE_PROPOSAL_PERIOD = 10 days;\r\n    // Denotes the maximum proposal deposit that can be given. It is given as\r\n    // a fraction of total Ether spent plus balance of the DAO\r\n    uint constant MAX_DEPOSIT_DIVISOR = 100;\r\n\r\n    // Proposals to spend the DAO's ether or to choose a new Curator\r\n    // Proposal[] public proposals;\r\n    uint public proposalsTotal;\r\n    // The quorum needed for each proposal is partially calculated by\r\n    // _totalSupply / minQuorumDivisor\r\n    uint  minQuorumDivisor;\r\n    // The unix time of the last time quorum was reached on a proposal\r\n    uint  lastTimeMinQuorumMet;\r\n\r\n    // Address of the curator\r\n    address public curator;\r\n    // The whitelist: List of addresses the DAO is allowed to send ether to\r\n    mapping (address => bool) public allowedRecipients;\r\n\r\n    // Tracks the addresses that own Reward Tokens. Those addresses can only be\r\n    // DAOs that have split from the original DAO. Conceptually, Reward Tokens\r\n    // represent the proportion of the rewards that the DAO has the right to\r\n    // receive. These Reward Tokens are generated when the DAO spends ether.\r\n    mapping (address => uint) public rewardToken;\r\n    // Total supply of rewardToken\r\n    uint public totalRewardToken;\r\n\r\n    // The account used to manage the rewards which are to be distributed to the\r\n    // DAO Token Holders of this DAO\r\n    ManagedAccount public rewardAccount;\r\n\r\n    // The account used to manage the rewards which are to be distributed to\r\n    // any DAO that holds Reward Tokens\r\n    ManagedAccount public DAOrewardAccount;\r\n\r\n    // Amount of rewards (in wei) already paid out to a certain DAO\r\n    mapping (address => uint) public DAOpaidOut;\r\n\r\n    // Amount of rewards (in wei) already paid out to a certain address\r\n    mapping (address => uint) public paidOut;\r\n    // Map of addresses blocked during a vote (not allowed to transfer DAO\r\n    // tokens). The address points to the proposal ID.\r\n    mapping (address => uint) public blocked;\r\n\r\n    // The minimum deposit (in wei) required to submit any proposal that is not\r\n    // requesting a new Curator (no deposit is required for splits)\r\n    uint public proposalDeposit;\r\n\r\n    // the accumulated sum of all current proposal deposits\r\n    uint sumOfProposalDeposits;\r\n\r\n    // Contract that is able to create a new DAO (with the same code as\r\n    // this one), used for splits\r\n    DAO_Creator public daoCreator;\r\n\r\n    // A proposal with `newCurator == false` represents a transaction\r\n    // to be issued by this DAO\r\n    // A proposal with `newCurator == true` represents a DAO split\r\n    mapping(uint => Proposal) public proposals;\r\n    struct Proposal {\r\n        // The address where the `amount` will go to if the proposal is accepted\r\n        // or if `newCurator` is true, the proposed Curator of\r\n        // the new DAO).\r\n        address recipient;\r\n        // The amount to transfer to `recipient` if the proposal is accepted.\r\n        uint amount;\r\n        // A plain text description of the proposal\r\n        string description;\r\n        // A unix timestamp, denoting the end of the voting period\r\n        uint votingDeadline;\r\n        // True if the proposal's votes have yet to be counted, otherwise False\r\n        bool open;\r\n        // True if quorum has been reached, the votes have been counted, and\r\n        // the majority said yes\r\n        bool proposalPassed;\r\n        // A hash to check validity of a proposal\r\n        bytes32 proposalHash;\r\n        // Deposit in wei the creator added when submitting their proposal. It\r\n        // is taken from the msg.value of a newProposal call.\r\n        uint proposalDeposit;\r\n        // True if this proposal is to assign a new Curator\r\n        bool newCurator;\r\n        // Data needed for splitting the DAO\r\n        SplitData[] splitData;\r\n        // Number of Tokens in favor of the proposal\r\n        uint yea;\r\n        // Number of Tokens opposed to the proposal\r\n        uint nay;\r\n        // Simple mapping to check if a shareholder has voted for it\r\n        mapping (address => bool) votedYes;\r\n        // Simple mapping to check if a shareholder has voted against it\r\n        mapping (address => bool) votedNo;\r\n        // Address of the shareholder who created the proposal\r\n        address creator;\r\n    }\r\n\r\n    // Used only in the case of a newCurator proposal.\r\n    struct SplitData {\r\n        // The balance of the current DAO minus the deposit at the time of split\r\n        uint splitBalance;\r\n        // The total amount of DAO Tokens in existence at the time of split.\r\n        uint _totalSupply;\r\n        // Amount of Reward Tokens owned by the DAO at the time of split.\r\n        uint rewardToken;\r\n        // The new DAO contract created at the time of split.\r\n        DAO newDAO;\r\n    }\r\n\r\n    // Used to restrict access to certain functions to only DAO Token Holders\r\n   // modifier onlyTokenholders virtual {_;}\r\n\r\n    // @dev Constructor setting the Curator and the address\r\n    // for the contract able to create another DAO as well as the parameters\r\n    // for the DAO Token Creation\r\n    // @param _curator The Curator\r\n    // @param _daoCreator The contract able to (re)create this DAO\r\n    // @param _proposalDeposit The deposit to be paid for a regular proposal\r\n    // @param _minTokensToCreate Minimum required wei-equivalent tokens\r\n    //        to be created for a successful DAO Token Creation\r\n    // @param _closingTime Date (in Unix time) of the end of the DAO Token Creation\r\n    // @param _privateCreation If zero the DAO Token Creation is open to public, a\r\n    // non-zero address means that the DAO Token Creation is only for the address\r\n    // This is the constructor: it can not be overloaded so it is commented out\r\n    //  function DAO(\r\n        //  address _curator,\r\n        //  DAO_Creator _daoCreator,\r\n        //  uint _proposalDeposit,\r\n        //  uint _minTokensToCreate,\r\n        //  uint _closingTime,\r\n        //  address _privateCreation\r\n    //  );\r\n\r\n    // @notice Create Token with `msg.sender` as the beneficiary\r\n    // @return Whether the token creation was successful\r\n    // function () external returns (bool success);\r\n\r\n\r\n    // @dev This function is used to send ether back\r\n    // to the DAO, it can also be used to receive payments that should not be\r\n    // counted as rewards (donations, grants, etc.)\r\n    // @return Whether the DAO received the ether successfully\r\n    function receiveEther() virtual external payable returns(bool);\r\n\r\n    // @notice `msg.sender` creates a proposal to send `_amount` Wei to\r\n    // `_recipient` with the transaction data `_transactionData`. If\r\n    // `_newCurator` is true, then this is a proposal that splits the\r\n    // DAO and sets `_recipient` as the new DAO's Curator.\r\n    // @param _recipient Address of the recipient of the proposed transaction\r\n    // @param _amount Amount of wei to be sent with the proposed transaction\r\n    // @param _description String describing the proposal\r\n    // @param _transactionData Data of the proposed transaction\r\n    // @param _debatingPeriod Time used for debating a proposal, at least 2\r\n    // weeks for a regular proposal, 10 days for new Curator proposal\r\n    // @param _newCurator Bool defining whether this proposal is about\r\n    // a new Curator or not\r\n    // @return The proposal ID. Needed for voting on the proposal\r\n    function newProposal(\r\n        address _recipient,\r\n        uint _amount,\r\n        string memory _description,\r\n        bytes memory _transactionData,\r\n        uint _debatingPeriod,\r\n        bool _newCurator\r\n    )  virtual external payable returns (uint); //use modifier tokenHolders\r\n\r\n    // @notice Check that the proposal with the ID `_proposalID` matches the\r\n    // transaction which sends `_amount` with data `_transactionData`\r\n    // to `_recipient`\r\n    // @param _proposalID The proposal ID\r\n    // @param _recipient The recipient of the proposed transaction\r\n    // @param _amount The amount of wei to be sent in the proposed transaction\r\n    // @param _transactionData The data of the proposed transaction\r\n    // @return Whether the proposal ID matches the transaction data or not\r\n    function checkProposalCode(\r\n        uint _proposalID,\r\n        address _recipient,\r\n        uint _amount,\r\n        bytes memory _transactionData\r\n    ) virtual external  returns (bool _codeChecksOut);\r\n\r\n    // @notice Vote on proposal `_proposalID` with `_supportsProposal`\r\n    // @param _proposalID The proposal ID\r\n    // @param _supportsProposal Yes/No - support of the proposal\r\n    // @return The vote ID.\r\n    function vote(\r\n        uint _proposalID,\r\n        bool _supportsProposal\r\n    )virtual external  ;//use tokenHolders modifier\r\n\r\n    // @notice Checks whether proposal `_proposalID` with transaction data\r\n    // `_transactionData` has been voted for or rejected, and executes the\r\n    // transaction in the case it has been voted for.\r\n    // @param _proposalID The proposal ID\r\n    // @param _transactionData The data of the proposed transaction\r\n    // @return Whether the proposed transaction has been executed or not\r\n    function executeProposal(\r\n        uint _proposalID,\r\n        bytes memory _transactionData\r\n    )virtual external  returns (bool _success);\r\n\r\n    // @notice ATTENTION! I confirm to move my remaining ether to a new DAO\r\n    // with `_newCurator` as the new Curator, as has been\r\n    // proposed in proposal `_proposalID`. This will burn my tokens. This can\r\n    // not be undone and will split the DAO into two DAO's, with two\r\n    // different underlying tokens.\r\n    // @param _proposalID The proposal ID\r\n    // @param _newCurator The new Curator of the new DAO\r\n    // @dev This function, when called for the first time for this proposal,\r\n    // will create a new DAO and send the sender's portion of the remaining\r\n    // ether and Reward Tokens to the new DAO. It will also burn the DAO Tokens\r\n    // of the sender.\r\n    function splitDAO(\r\n        uint _proposalID,\r\n        address _newCurator\r\n    )virtual external   returns (bool _success);\r\n\r\n    // @dev can only be called by the DAO itself through a proposal\r\n    // updates the contract of the DAO by sending all ether and rewardTokens\r\n    // to the new DAO. The new DAO needs to be approved by the Curator\r\n    // @param _newContract the address of the new contract\r\n    function newContract(address _newContract) virtual internal;\r\n\r\n\r\n    // @notice Add a new possible recipient `_recipient` to the whitelist so\r\n    // that the DAO can send transactions to them (using proposals)\r\n    // @param _recipient New recipient address\r\n    // @dev Can only be called by the current Curator\r\n    // @return Whether successful or not\r\n    function changeAllowedRecipients(address _recipient, bool _allowed) virtual external  returns (bool _success);\r\n\r\n\r\n    // @notice Change the minimum deposit required to submit a proposal\r\n    // @param _proposalDeposit The new proposal deposit\r\n    // @dev Can only be called by this DAO (through proposals with the\r\n    // recipient being this DAO itself)\r\n    function changeProposalDeposit(uint _proposalDeposit) virtual external ;\r\n\r\n    // @notice Move rewards from the DAORewards managed account\r\n    // @param _toMembers If true rewards are moved to the actual reward account\r\n    //                   for the DAO. If not then it's moved to the DAO itself\r\n    // @return Whether the call was successful\r\n    function retrieveDAOReward(bool _toMembers) virtual external  returns (bool _success);\r\n\r\n    // @notice Get my portion of the reward that was sent to `rewardAccount`\r\n    // @return Whether the call was successful\r\n    function getMyReward() virtual internal  returns(bool _success);\r\n\r\n    // @notice Withdraw `_account`'s portion of the reward from `rewardAccount`\r\n    // to `_account`'s balance\r\n    // @return Whether the call was successful\r\n    function withdrawRewardFor(address _account) virtual internal returns (bool _success);\r\n\r\n    // @notice Send `_amount` tokens to `_to` from `msg.sender`. Prior to this\r\n    // getMyReward() is called.\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transfered\r\n    // @return Whether the transfer was successful or not\r\n    function transferWithoutReward(address _to, uint256 _amount) virtual external  returns (bool success);\r\n\r\n    // @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    // is approved by `_from`. Prior to this getMyReward() is called.\r\n    // @param _from The address of the sender\r\n    // @param _to The address of the recipient\r\n    // @param _amount The amount of tokens to be transfered\r\n    // @return Whether the transfer was successful or not\r\n    function transferFromWithoutReward(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) virtual external  returns (bool success);\r\n\r\n    // @notice Doubles the 'minQuorumDivisor' in the case quorum has not been\r\n    // achieved in 52 weeks\r\n    // @return Whether the change was successful or not\r\n    function halveMinQuorum() virtual internal  returns (bool _success);\r\n\r\n    // @return total number of proposals ever created\r\n    function numberOfProposals() virtual external  returns (uint _numberOfProposals);\r\n\r\n    // @param _proposalID Id of the new curator proposal\r\n    // @return Address of the new DAO\r\n    function getNewDAOAddress(uint _proposalID) virtual external  returns (address _newDAO);\r\n\r\n    // @param _account The address of the account which is checked.\r\n    // @return Whether the account is blocked (not allowed to transfer tokens) or not.\r\n    function isBlocked(address _account) virtual internal returns (bool);\r\n\r\n    // @notice If the caller is blocked by a proposal whose voting deadline\r\n    // has exprired then unblock him.\r\n    // @return Whether the account is blocked (not allowed to transfer tokens) or not.\r\n    function unblockMe() virtual external returns (bool);\r\n\r\n    event ProposalAdded(\r\n        uint indexed proposalID,\r\n        address recipient,\r\n        uint amount,\r\n        bool newCurator,\r\n        string description\r\n    );\r\n    event Voted(uint indexed proposalID, bool position, address indexed voter);\r\n    event ProposalTallied(uint indexed proposalID, bool result, uint quorum);\r\n    event NewCurator(address indexed _newCurator);\r\n    event AllowedRecipientChanged(address indexed _recipient, bool _allowed);\r\n}\r\n\r\n// The DAO contract itself\r\ncontract DAO is DAOInterface, Token, TokenCreation {\r\n    bool private lock;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => uint256)  private feesValues;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcludedFromAntiwhale;\r\n    mapping (address => bool) private _isExcludedFromSellMax;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string constant NAME = \"Instinct\"; \r\n    string constant SYMBOL = \"INS\";\r\n    uint constant DECIMALS = 18;\r\n\r\n    uint private thValue;\r\n    uint private rThValue;\r\n\r\n  \r\n    uint256 public buyRewardfee = 2;\r\n    uint256 private previousbuyRewardfee = buyRewardfee;\r\n    uint256 public buyTreasuryFee = 3;\r\n    uint256 public buyTournamentFee = 1;\r\n    uint256 public totalBuyFees =  buyTreasuryFee + buyTournamentFee;\r\n    uint256 private previoustotalBuyFees = totalBuyFees;\r\n\r\n    uint256 public sellRewardfee = 3;\r\n    uint256 private previoussellRewardfee = sellRewardfee;\r\n    uint256 public sellTreasuryFee = 3;\r\n    uint256 public sellTournamentFee = 1;\r\n    uint256 public sellCharityFee = 1;\r\n    uint256 public totalSellFees =  sellTreasuryFee + sellTournamentFee + sellCharityFee;\r\n    uint256 private previoustotalSellFees = totalSellFees;\r\n\r\n    uint256 public transferRewardfee = 2;\r\n    uint256 private previoustransferRewardfee = transferRewardfee;\r\n    uint256 public transferTreasuryFee = 2;\r\n    uint256 public transferTournamentFee = 1;\r\n    uint256 public totalTransferFees =  transferTreasuryFee + transferTournamentFee;\r\n    uint256 private previoustotalTranferFees = totalTransferFees;\r\n\r\n\r\n    IpancakeV2Router02 public  pancakeV2Router;\r\n    address public  pancakeV2Pair;\r\n    \r\n    uint256 private _maxTxAmount = (_tTotal * 500) / 10000;\r\n\r\n    uint private sellMaxTxAmount = (_tTotal * 500) / 10000;\r\n   \r\n    address public  treasuryAddress;\r\n    address public tournamentAddress;\r\n    address public charityAddress;\r\n    constructor(\r\n        address _curator,\r\n        DAO_Creator _daoCreator,\r\n        uint _proposalDeposit,\r\n        uint _minTokensToCreate,\r\n        uint _closingTime,\r\n        address _privateCreation,\r\n        address routerAddress,\r\n        address _treasuryAddress,\r\n        address _tournamentAddress,\r\n        address _charityAddress\r\n    ) TokenCreation(_minTokensToCreate, _closingTime, _privateCreation) Token(_curator)  {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        require(_curator != address(0), \"Curator address can't be zero address\");\r\n        curator = _curator;\r\n        daoCreator = _daoCreator;\r\n        proposalDeposit = _proposalDeposit;\r\n        rewardAccount = new ManagedAccount(address(this), false);\r\n        DAOrewardAccount = new ManagedAccount(address(this), false);\r\n        lastTimeMinQuorumMet = block.timestamp;\r\n        minQuorumDivisor = 5; // sets the minimal quorum to 20%\r\n        //proposalsTotal += 1; // avoids a proposal with ID 0 because it is used\r\n        allowedRecipients[address(this)] = true;\r\n        allowedRecipients[curator] = true;\r\n        IpancakeV2Router02 _pancakeV2Router = IpancakeV2Router02(routerAddress);\r\n        //swap\r\n        pancakeV2Pair = IpancakeV2Factory(_pancakeV2Router.factory())\r\n            .createPair(address(this), _pancakeV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        pancakeV2Router = _pancakeV2Router;\r\n        require(_treasuryAddress != address(0), \"Treasury address can't be zero address\");\r\n        treasuryAddress = _treasuryAddress;\r\n\r\n        require(_tournamentAddress != address(0), \"Tournament address can't be zero address\");\r\n        tournamentAddress = _tournamentAddress;\r\n\r\n        require(_charityAddress != address(0), \"Charity address can't be zero address\");\r\n        charityAddress = _charityAddress;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[curator] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_treasuryAddress] = true;\r\n        _isExcludedFromFee[_tournamentAddress] = true;\r\n        _isExcludedFromFee[_charityAddress] = true;\r\n        _isExcludedFromAntiwhale[curator] = true;\r\n        _isExcludedFromAntiwhale[address(this)] = true;\r\n        _isExcludedFromSellMax[address(this)] = true;\r\n        _isExcludedFromSellMax[curator] = true;\r\n\r\n        excludeFromReward(address(pancakeV2Pair));\r\n        excludeFromReward(msg.sender);\r\n\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n\r\n    receive() external payable {\r\n        createTokenProxy(msg.sender);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure returns (uint) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function totalSupply() public view  returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function isExcludedFromAntiwhale(address acc) public view returns(bool) {\r\n        return _isExcludedFromAntiwhale[acc];\r\n    }\r\n    function setExcludeFromAntiwhale(address acc, bool value) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        _isExcludedFromAntiwhale[acc] = value;\r\n    }\r\n\r\n    function isExcludedFromMaxSell(address acc) public view returns(bool) {\r\n        return _isExcludedFromSellMax[acc];\r\n    }\r\n    function setExcludeFromMaxSell(address acc, bool value) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        _isExcludedFromSellMax[acc] = value;\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public  returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        allowedRecipients[recipient] = true;\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        allowedRecipients[recipient] = true;\r\n        return true;\r\n    }\r\n\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    // function deliver(uint256 tAmount,uint256 _type) public {\r\n    //     address sender = msg.sender;\r\n    //     require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n    //     (uint256 rAmount,,,,,) = _getValues(tAmount, _type);\r\n    //     _rOwned[sender] = _rOwned[sender] - rAmount;\r\n    //     _rTotal = _rTotal - rAmount;\r\n    //     _tFeeTotal = _tFeeTotal + tAmount;\r\n    // }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee, uint256 _type) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount, _type);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount,_type);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return (rAmount/currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude pancake router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount, uint256 _type) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSwapping) = _getValues(tAmount, _type);\r\n        thValue = tFee;\r\n        rThValue = rFee;\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;        \r\n        _takeSwapping(tSwapping);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function excludeFromFee(address account) external {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function setBuyFeePercent(uint256 BuyFee) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(buyTreasuryFee + buyTournamentFee + BuyFee <= 25, \"Exceeds Max Fee Limit\");\r\n        buyRewardfee = BuyFee;\r\n    }\r\n\r\n    function setSellFeePercent(uint256 SellFee) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(sellTreasuryFee + sellTournamentFee + sellCharityFee + SellFee <= 25, \"Exceeds Max Fee Limit\");\r\n        sellRewardfee = SellFee;\r\n    }\r\n\r\n    function setTransferFeePercent(uint256 TransferFee) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(transferTreasuryFee + transferTournamentFee + TransferFee <= 25, \"Exceeds Max Fee Limit\");\r\n        transferRewardfee = TransferFee;\r\n    }\r\n    \r\n    function setBuySwappingFeePercent(uint256 _buyTreasuryFee, uint256 _buyTournamentFee) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_buyTreasuryFee + _buyTournamentFee + buyRewardfee <= 25, \"Exceeds Max Fee Limit\");\r\n        buyTreasuryFee = _buyTreasuryFee;\r\n        buyTournamentFee = _buyTournamentFee;\r\n        totalBuyFees = buyTreasuryFee + buyTournamentFee;\r\n    }\r\n\r\n    function setSellSwappingFeePercent(uint256 _sellTreasuryFee, uint256 _sellTournamentFee, uint256 _sellCharityFee) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_sellTreasuryFee + _sellTournamentFee + _sellCharityFee + sellRewardfee <= 25, \"Exceeds Max Fee Limit\");\r\n        sellTreasuryFee = _sellTreasuryFee;\r\n        sellTournamentFee = _sellTournamentFee;\r\n        sellCharityFee = _sellCharityFee;\r\n        totalSellFees = sellTreasuryFee + sellTournamentFee + sellCharityFee;\r\n    }\r\n\r\n    function setTransferSwappingFeePercent(uint256 _transferTreasuryFee, uint256 _transferTournamentFee) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_transferTreasuryFee + _transferTournamentFee + transferRewardfee <= 25, \"Exceeds Max Fee Limit\");\r\n        transferTreasuryFee = _transferTreasuryFee;\r\n        transferTournamentFee = _transferTournamentFee;\r\n        totalTransferFees = transferTreasuryFee + transferTournamentFee;\r\n    }\r\n\r\n    function setTreasuryAddress(address payable _treasury) external {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_treasury != address(0), \"Treasury address can't zero address\");\r\n        treasuryAddress = _treasury;\r\n    }\r\n\r\n    function setTournamentAddress(address payable _tournament) external {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_tournament != address(0), \"Tournament address can't zero address\");\r\n        tournamentAddress = _tournament;\r\n    }\r\n\r\n    function setCharityAddress(address payable _charity) external {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(_charity != address(0), \"Charity address can't zero address\");\r\n        charityAddress = _charity;\r\n    }\r\n\r\n   \r\n    function setMaxTxPercent(uint256 maxTxPercent) external  {\r\n        require(msg.sender == curator, \"Only a curator can do this\");\r\n        require(maxTxPercent > 0 && maxTxPercent <= 500, \"max 5%\");\r\n        _maxTxAmount = ((_tTotal * maxTxPercent) / 10000);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount,uint256 _type) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tSwapping) = _getTValues(tAmount,_type);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tSwapping, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tSwapping);\r\n    }\r\n\r\n    function tokenHolderRewards() public view returns(uint256, uint256) {\r\n        return(thValue, rThValue);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 _type) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount,_type);\r\n        uint256 tSwapping = calculateSwappingFee(tAmount,_type);\r\n        uint256 tTransferAmount = tAmount - tFee - tSwapping;\r\n        return (tTransferAmount, tFee, tSwapping);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tSwapping, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rSwapping = tSwapping * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rSwapping;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return (rSupply / tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < (_rTotal/ _tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeSwapping(uint256 tSwapping) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rSwapping = tSwapping * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rSwapping;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tSwapping;\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount, uint256 _type) private view returns (uint256) {\r\n        uint256 fees;\r\n        if(_type == 1) {\r\n            fees = buyRewardfee;\r\n        }\r\n        else if(_type == 2) {\r\n             fees = sellRewardfee;\r\n        }\r\n        else{\r\n             fees = transferRewardfee;\r\n        }\r\n        return ((_amount * fees) / (10**2));\r\n    }\r\n\r\n    function calculateSwappingFee(uint256 _amount, uint256 _type) private view returns (uint256) {\r\n       uint256 fees;\r\n        if(_type == 1) {\r\n            fees = totalBuyFees;\r\n        }\r\n        else if(_type == 2) {\r\n             fees = totalSellFees;\r\n        }\r\n        else{\r\n             fees = totalTransferFees;\r\n        }\r\n        return ((_amount * fees) / (10**2));\r\n    }\r\n    \r\n    function removeAllFee(uint256 _type) private {\r\n        if(_type == 1){\r\n            previousbuyRewardfee = buyRewardfee;\r\n            buyRewardfee = 0;\r\n            previoustotalBuyFees = totalBuyFees;\r\n            totalBuyFees = 0;\r\n        }\r\n        else if(_type == 2){\r\n            previoussellRewardfee =  sellRewardfee;\r\n            sellRewardfee = 0;\r\n            previoustotalSellFees = totalSellFees;\r\n            totalSellFees = 0;\r\n        }\r\n        else{\r\n            previoustransferRewardfee = transferRewardfee;\r\n            transferRewardfee = 0;\r\n            previoustotalTranferFees = totalTransferFees;\r\n            totalTransferFees = 0;\r\n        }\r\n       \r\n    }\r\n    \r\n   function restoreAllFee(uint256 _type) private {\r\n        if(_type == 1){\r\n            buyRewardfee = previousbuyRewardfee;\r\n            totalBuyFees = previoustotalBuyFees;\r\n        }\r\n        else if(_type == 2){\r\n            sellRewardfee = previoussellRewardfee;\r\n            totalSellFees = previoustotalSellFees;\r\n        }\r\n        else{\r\n            transferRewardfee = previoustransferRewardfee;\r\n            totalTransferFees = previoustotalTranferFees;\r\n        }\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setMaxSellAmount(uint val) external {\r\n        require(val > 0 && val <= 500, \"max 5%\");\r\n        sellMaxTxAmount = (totalSupply() * val) / 10000;\r\n    }\r\n\r\n   function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(!_isExcludedFromAntiwhale[from] && !_isExcludedFromAntiwhale[to]) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n      \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        uint256 _type;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        if((from == address(pancakeV2Pair)) && to != curator){ // Buy\r\n            _type = 1;\r\n        }\r\n        else if((to == address(pancakeV2Pair)) && !_isExcludedFromSellMax[from]){ // Sell\r\n            require(amount <= sellMaxTxAmount, \"BEP20 : Sell Amount Exceed\");\r\n            _type = 2;\r\n        }\r\n        else{   // Transfer\r\n            _type = 3;\r\n        }\r\n\r\n        if(takeFee){\r\n            _feeDistribution(amount,_type);\r\n        }\r\n        \r\n        //transfer amount, it will take Buy, Sell and Transfer\r\n        _tokenTransfer(from,to,amount,takeFee , _type);\r\n    }\r\n\r\n    function _feeDistribution(uint256 _amount, uint256 _type) private {\r\n        uint256 treasuryFees;\r\n        uint256 tournamentFees;\r\n        uint charityFees;\r\n        if(_type == 1 ) {\r\n            treasuryFees    =    _amount * buyTreasuryFee / 100;\r\n            tournamentFees =    _amount * buyTournamentFee / 100;\r\n        }\r\n        else if (_type == 2) {\r\n            treasuryFees    =    _amount * sellTreasuryFee / 100;\r\n            tournamentFees =    _amount * sellTournamentFee / 100;\r\n            charityFees   =   _amount * sellCharityFee / 100;\r\n            \r\n            feesValues[charityAddress] = feesValues[charityAddress] + charityFees;\r\n            _tOwned[charityAddress] += charityFees;\r\n            emit Transfer(address(0), charityAddress, charityFees);\r\n        }\r\n        else{\r\n            treasuryFees    =    _amount * transferTreasuryFee / 100;\r\n            tournamentFees =    _amount * transferTournamentFee / 100;\r\n        }\r\n        feesValues[treasuryAddress]= feesValues[treasuryAddress] + treasuryFees;\r\n        _tOwned[treasuryAddress] += treasuryFees;\r\n        \r\n        feesValues[tournamentAddress] = feesValues[tournamentAddress] + tournamentFees;\r\n        _tOwned[tournamentAddress] += tournamentFees;\r\n        emit Transfer(address(0), tournamentAddress, tournamentFees);\r\n        emit Transfer(address(0), treasuryAddress, treasuryFees);\r\n       \r\n\r\n    }\r\n\r\n    function swapping()external payable{\r\n        require(treasuryAddress == msg.sender || tournamentAddress == msg.sender , \"BEP20 : Only Treasury and Development Address\");\r\n        require(feesValues[msg.sender] > 0 , \"BEP20 : Invalid Amount\");\r\n        uint256 swapAmount;\r\n\r\n        swapAmount = feesValues[msg.sender];\r\n        feesValues[msg.sender] = 0;\r\n        swapTokensForETH(msg.sender,swapAmount);\r\n    }\r\n   \r\n\r\n    function swapTokensForETH(address to,uint256 tokenAmount) private {\r\n        // generate the pancake pair path of token -> wETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeV2Router.WETH();\r\n\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            1, // accept any amount of ETH\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee, uint256 _type) private {\r\n        if(!takeFee)\r\n            removeAllFee(_type);\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount, _type);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount, _type);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount, _type);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount, _type);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount , _type);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee(_type);\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount,uint256 _type) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSwapping) = _getValues(tAmount,_type);\r\n        thValue = tFee;\r\n        rThValue = rFee;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeSwapping(tSwapping);\r\n        _reflectFee(rFee, tFee);\r\n        // _tTotal -= tFee;\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount,uint256 _type) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSwapping) = _getValues(tAmount,_type);\r\n        thValue = tFee;\r\n        rThValue = rFee;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;           \r\n        _takeSwapping(tSwapping);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount,uint256 _type) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSwapping) = _getValues(tAmount,_type);\r\n        thValue = tFee;\r\n        rThValue = rFee;\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;   \r\n        _takeSwapping(tSwapping);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n\r\n    function viewFee(address _user) external view returns(uint256){\r\n        return feesValues[_user];\r\n    }\r\n\r\n    function receiveEther() override payable external  returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    function newProposal(\r\n        address _recipient,\r\n        uint _amount,\r\n        string memory _description,\r\n        bytes memory _transactionData,\r\n        uint _debatingPeriod,\r\n        bool _newCurator\r\n    )   override payable external returns (uint) {\r\n        require(balanceOf(msg.sender) != 0, \"Only a TokenHolders can create proposals\");\r\n        \r\n        if (_newCurator && (\r\n             _debatingPeriod < MIN_SPLIT_DEBATE_PERIOD)) {\r\n            revert(\"Failed at 1\");\r\n        } \r\n        if (!isRecipientAllowed(_recipient) || (_debatingPeriod <  MIN_PROPOSAL_DEBATE_PERIOD)) {\r\n            revert(\"Failed at 2\");\r\n        }\r\n\r\n        if (_debatingPeriod > 8 weeks){\r\n            revert(\"Failed at 3\");\r\n        }\r\n\r\n        if (msg.value != proposalDeposit) {\r\n            revert(\"Failed at 4\");\r\n        }\r\n\r\n        if (block.timestamp + _debatingPeriod < block.timestamp) {// prevents overflow\r\n            revert(\"Failed at 5\");\r\n        }\r\n\r\n        //to prevent a 51% attacker to convert the ether into deposit\r\n        if (msg.sender == address(this)) {\r\n            revert(\"Failed at 6\");\r\n        }\r\n\r\n        uint _proposalID = proposalsTotal + 1;\r\n        Proposal storage p = proposals[_proposalID];\r\n        p.recipient = _recipient;\r\n        p.amount = _amount;\r\n        p.description = _description;\r\n        p.proposalHash = keccak256(abi.encode(_recipient, _amount, _transactionData));\r\n        p.votingDeadline = block.timestamp + _debatingPeriod;\r\n        p.open = true;\r\n        //p.proposalPassed = False; // that's default\r\n        p.newCurator = _newCurator;\r\n        // if (_newCurator)\r\n        //     p.splitData.length  =  p.splitData.length + 1;\r\n        p.creator = msg.sender;\r\n        p.proposalDeposit = msg.value;\r\n        proposalsTotal += 1;\r\n\r\n        sumOfProposalDeposits += msg.value;\r\n    \r\n        emit ProposalAdded(\r\n            _proposalID,\r\n            _recipient,\r\n            _amount,\r\n            _newCurator,\r\n            _description\r\n        );\r\n        return _proposalID;\r\n    }\r\n\r\n\r\n    function checkProposalCode(\r\n        uint _proposalID,\r\n        address _recipient,\r\n        uint _amount,\r\n        bytes memory _transactionData\r\n    )  override external view returns (bool _codeChecksOut) {\r\n        Proposal storage p = proposals[_proposalID];\r\n        return p.proposalHash == keccak256(abi.encode(_recipient, _amount, _transactionData));\r\n    }\r\n\r\n\r\n    function vote(\r\n        uint _proposalID,\r\n        bool _supportsProposal\r\n    ) override external {\r\n        require(balanceOf(msg.sender) != 0, \"Only a Token Holders can vote!\" );\r\n\r\n        Proposal storage p = proposals[_proposalID];\r\n        if (p.votedYes[msg.sender]\r\n            || p.votedNo[msg.sender]\r\n            || block.timestamp >= p.votingDeadline) {\r\n\r\n            revert(\"At vote\");\r\n        }\r\n        if (_supportsProposal) {\r\n            p.yea += balances[msg.sender];\r\n            p.votedYes[msg.sender] = true;\r\n        } else {\r\n            p.nay += balances[msg.sender];\r\n            p.votedNo[msg.sender] = true;\r\n        }\r\n\r\n        if (blocked[msg.sender] == 0) {\r\n            blocked[msg.sender] = _proposalID;\r\n        } else if (p.votingDeadline > proposals[blocked[msg.sender]].votingDeadline) {\r\n            // this proposal's voting deadline is further into the future than\r\n            // the proposal that blocks the sender so make it the blocker\r\n            blocked[msg.sender] = _proposalID;\r\n        }\r\n\r\n        emit Voted(_proposalID, _supportsProposal, msg.sender);\r\n    }\r\n\r\n\r\n    function executeProposal(\r\n        uint _proposalID,\r\n        bytes memory _transactionData\r\n    )  override external returns (bool _success) {\r\n    \r\n\r\n        Proposal storage p = proposals[_proposalID];\r\n        address payable creator =  payable(p.creator);//created an payable adddress. \r\n\r\n        uint waitPeriod = p.newCurator\r\n            ? SPLIT_EXECUTION_PERIOD\r\n            : EXECUTE_PROPOSAL_PERIOD;\r\n        // If we are over deadline and waiting period, assert proposal is closed\r\n        if (p.open && block.timestamp > p.votingDeadline + waitPeriod) {\r\n            closeProposal(_proposalID);\r\n            revert();\r\n        }\r\n        \r\n\r\n        // Check if the proposal can be executed\r\n        if (block.timestamp < p.votingDeadline  // has the voting deadline arrived?\r\n            // Have the votes been counted?\r\n            || !p.open\r\n            // Does the transaction code match the proposal?\r\n            || p.proposalHash != keccak256(abi.encode(p.recipient, p.amount, _transactionData))) {\r\n\r\n            revert();\r\n        }\r\n\r\n\r\n        // If the curator removed the recipient from the whitelist, close the proposal\r\n        // in order to free the deposit and allow unblocking of voters\r\n        if (!isRecipientAllowed(p.recipient)) {\r\n            closeProposal(_proposalID);\r\n            creator.transfer(p.proposalDeposit);\r\n            revert();\r\n        }\r\n\r\n        bool proposalCheck = true;\r\n\r\n        if (p.amount > actualBalance())\r\n            proposalCheck = false;\r\n\r\n        uint quorum = p.yea + p.nay;\r\n\r\n        // require 53% for calling newContract()\r\n        if (_transactionData.length >= 4 && _transactionData[0] == 0x68\r\n            && _transactionData[1] == 0x37 && _transactionData[2] == 0xff\r\n            && _transactionData[3] == 0x1e\r\n            && quorum < minQuorum(actualBalance() + rewardToken[address(this)])) {\r\n\r\n                proposalCheck = false;\r\n        }\r\n\r\n        if (quorum >= minQuorum(p.amount)) {\r\n\r\n            // if (!creator.transfer(p.proposalDeposit))\r\n            //     revert();\r\n            //changed to met above conditon\r\n            require(creator.send(p.proposalDeposit) == true, \"Transfer Not Done\");\r\n\r\n            lastTimeMinQuorumMet = block.timestamp;\r\n            // set the minQuorum to 20% again, in the case it has been reached\r\n            if (quorum > _tTotal / 5)\r\n                minQuorumDivisor = 5;\r\n        }\r\n\r\n        // Execute result\r\n        if (quorum >= minQuorum(p.amount) && p.yea > p.nay && proposalCheck) {\r\n            // if (!p.recipient.call.value(p.amount)(_transactionData))\r\n            //     revert();\r\n            //changed for \r\n            (bool success, bytes memory data) = p.recipient.call{value: (p.amount)}(_transactionData);\r\n            require(success == true && data.length != 0, \"Transfer failed at excute result 580\"); \r\n\r\n            p.proposalPassed = true;\r\n            _success = true;\r\n\r\n            // only create reward tokens when ether is not sent to the DAO itself and\r\n            // related addresses. Proxy addresses should be forbidden by the curator.\r\n            if (p.recipient != address(this) && p.recipient != address(rewardAccount)\r\n                && p.recipient != address(DAOrewardAccount)\r\n                && p.recipient != address(extraBalance)\r\n                && p.recipient != address(curator)) {\r\n\r\n                rewardToken[address(this)] += p.amount;\r\n                totalRewardToken += p.amount;\r\n            }\r\n        }\r\n\r\n        closeProposal(_proposalID);\r\n\r\n        // Initiate event\r\n        emit ProposalTallied(_proposalID, _success, quorum);\r\n    }\r\n\r\n\r\n    function closeProposal(uint _proposalID) internal {\r\n        Proposal storage p = proposals[_proposalID];\r\n        if (p.open)\r\n            sumOfProposalDeposits -= p.proposalDeposit;\r\n        p.open = false;\r\n    }\r\n\r\n    function splitDAO(\r\n        uint _proposalID,\r\n        address _newCurator\r\n    ) override external returns (bool _success) {\r\n        require(balanceOf(msg.sender) != 0, \"Only a TokenHolders can split dao\");\r\n        require(!lock);\r\n        lock = true;\r\n        Proposal storage p = proposals[_proposalID];\r\n\r\n        // Sanity check\r\n\r\n        if (block.timestamp < p.votingDeadline  // has the voting deadline arrived?\r\n            //The request for a split expires XX days after the voting deadline\r\n            || block.timestamp > p.votingDeadline + SPLIT_EXECUTION_PERIOD\r\n            // Does the new Curator address match?\r\n            || p.recipient != _newCurator\r\n            // Is it a new curator proposal?\r\n            || !p.newCurator\r\n            // Have you voted for this split?\r\n            || !p.votedYes[msg.sender]\r\n            // Did you already vote on another proposal?\r\n            || (blocked[msg.sender] != _proposalID && blocked[msg.sender] != 0) )  {\r\n\r\n            revert(\"Voting Deadline reached\");\r\n        }\r\n\r\n        // If the new DAO doesn't exist yet, create the new DAO and store the\r\n        // current split data\r\n        if (address(p.splitData[0].newDAO) == address(0)) {\r\n            p.splitData[0].newDAO = createNewDAO(_newCurator);\r\n            // Call depth limit reached, etc.\r\n            if (address(p.splitData[0].newDAO) == address(0))\r\n                revert();\r\n            // should never happen\r\n            if (address(this).balance < sumOfProposalDeposits)\r\n                revert();\r\n            p.splitData[0].splitBalance = actualBalance();\r\n            p.splitData[0].rewardToken = rewardToken[address(this)];\r\n            p.splitData[0]._totalSupply = _tTotal;\r\n            p.proposalPassed = true;\r\n        }\r\n\r\n        // Move ether and assign new Tokens\r\n        uint fundsToBeMoved =\r\n            (balances[msg.sender] * p.splitData[0].splitBalance) /\r\n            p.splitData[0]._totalSupply;\r\n\r\n        bool isTokensCreated = p.splitData[0].newDAO.createTokenProxy{value : fundsToBeMoved}(msg.sender);\r\n        require(isTokensCreated, \"Tokens Not Created at Split DAO\");\r\n        // Assign reward rights to new DAO\r\n        uint rewardTokenToBeMoved =\r\n            (balances[msg.sender] * p.splitData[0].rewardToken) /\r\n            p.splitData[0]._totalSupply;\r\n\r\n        uint paidOutToBeMoved = DAOpaidOut[address(this)] * rewardTokenToBeMoved /\r\n            rewardToken[address(this)];\r\n\r\n        rewardToken[address(p.splitData[0].newDAO)] += rewardTokenToBeMoved;\r\n        if (rewardToken[address(this)] < rewardTokenToBeMoved)\r\n            revert();\r\n        rewardToken[address(this)] -= rewardTokenToBeMoved;\r\n\r\n        DAOpaidOut[address(p.splitData[0].newDAO)] += paidOutToBeMoved;\r\n        if (DAOpaidOut[address(this)] < paidOutToBeMoved)\r\n            revert();\r\n        DAOpaidOut[address(this)] -= paidOutToBeMoved;\r\n\r\n        // Burn DAO Tokens\r\n        emit Transfer(msg.sender, address(0), balances[msg.sender]); // need to check again the scenarios for this\r\n        withdrawRewardFor(msg.sender); // be nice, and get his rewards\r\n        _tTotal -= balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        paidOut[msg.sender] = 0;\r\n        lock = false;\r\n        return true;\r\n    }\r\n\r\n    function newContract(address _newContract) override internal {\r\n        if (msg.sender != address(this) || !allowedRecipients[_newContract]) return;\r\n        // move all ether\r\n        // if (!_newContract.call{value : address(this).balance}(\"\") ) {\r\n        //     revert();\r\n        // }\r\n        (bool success,) = _newContract.call{value : address(this).balance}(\"\");\r\n        require(success, \"failed at newContract()\");\r\n\r\n        //move all reward tokens\r\n        rewardToken[_newContract] += rewardToken[address(this)];\r\n        rewardToken[address(this)] = 0;\r\n        DAOpaidOut[_newContract] += DAOpaidOut[address(this)];\r\n        DAOpaidOut[address(this)] = 0;\r\n    }\r\n\r\n\r\n    function retrieveDAOReward(bool _toMembers) override external returns (bool _success) {\r\n        DAO dao =  DAO(payable(msg.sender));\r\n\r\n        if ((rewardToken[msg.sender] * DAOrewardAccount.getAccumulatedInput()) /\r\n            totalRewardToken < DAOpaidOut[msg.sender])\r\n            revert();\r\n\r\n        uint reward =\r\n            (rewardToken[msg.sender] * DAOrewardAccount.getAccumulatedInput()) /\r\n            totalRewardToken - DAOpaidOut[msg.sender];\r\n        if(_toMembers) {\r\n            if (!DAOrewardAccount.payOut(dao.rewardAccount.address, reward))\r\n                revert();\r\n            }\r\n        else {\r\n            if (!DAOrewardAccount.payOut(address(dao), reward))\r\n                revert();\r\n        }\r\n        DAOpaidOut[msg.sender] += reward;\r\n        return true;\r\n    }\r\n\r\n    function getMyReward() override internal returns (bool _success) {\r\n        return withdrawRewardFor(msg.sender);\r\n    }\r\n\r\n\r\n    function withdrawRewardFor(address _account)  override internal returns (bool _success) {\r\n        require(!lock);\r\n        lock = true;\r\n        if ((balanceOf(_account) * rewardAccount.accumulatedInput()) / _tTotal < paidOut[_account])\r\n            revert();\r\n\r\n        uint reward =\r\n            (balanceOf(_account) * rewardAccount.accumulatedInput()) / _tTotal - paidOut[_account];\r\n        if (!rewardAccount.payOut(_account, reward))\r\n            revert();\r\n        paidOut[_account] += reward;\r\n        lock = false;\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferWithoutReward(address _to, uint256 _value) override public returns (bool success) {\r\n        if (!getMyReward())\r\n            revert();\r\n        return transfer(_to, _value);\r\n    }\r\n\r\n\r\n    function transferFromWithoutReward(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )override external returns (bool success) {\r\n        require(!lock);\r\n        lock = true;\r\n        if (!withdrawRewardFor(_from))\r\n            revert();\r\n        bool result = transferFrom(_from, _to, _value);\r\n        lock = false;\r\n        return result;\r\n    }\r\n\r\n\r\n    // function transferPaidOut(\r\n    //     address _from,\r\n    //     address _to,\r\n    //     uint256 _value\r\n    // ) internal returns (bool success) {\r\n\r\n    //     uint transfersPaidOut = paidOut[_from] * _value / balanceOf(_from);\r\n    //     if (transfersPaidOut > paidOut[_from])\r\n    //         revert();\r\n    //     paidOut[_from] -= transfersPaidOut;\r\n    //     paidOut[_to] += transfersPaidOut;\r\n    //     return true;\r\n    // }\r\n\r\n\r\n    function changeProposalDeposit(uint _proposalDeposit) override  external  {\r\n        if (msg.sender != address(this) || _proposalDeposit > (actualBalance() + rewardToken[address(this)])\r\n            / MAX_DEPOSIT_DIVISOR) {\r\n\r\n            revert(\"changeProposal deposit function failed\");\r\n        }\r\n        proposalDeposit = _proposalDeposit;\r\n    }\r\n\r\n\r\n    function changeAllowedRecipients(address _recipient, bool _allowed)override  external  returns (bool _success) {\r\n        if (msg.sender != curator)\r\n            revert();\r\n        allowedRecipients[_recipient] = _allowed;\r\n        emit AllowedRecipientChanged(_recipient, _allowed);\r\n        return true;\r\n    }\r\n\r\n\r\n    function isRecipientAllowed(address _recipient) internal view returns (bool _isAllowed) {\r\n        if (allowedRecipients[_recipient]\r\n            || (_recipient == address(extraBalance)\r\n                // only allowed when at least the amount held in the\r\n                // extraBalance account has been spent from the DAO\r\n                && totalRewardToken > extraBalance.getAccumulatedInput()))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function actualBalance()  public view returns (uint _actualBalance) {\r\n        return address(this).balance - sumOfProposalDeposits;\r\n    }\r\n\r\n\r\n    function minQuorum(uint _value) internal view returns (uint _minQuorum) {\r\n        // minimum of 20% and maximum of 53.33%\r\n        return _tTotal / minQuorumDivisor +\r\n            (_value * _tTotal) / (3 * (actualBalance() + rewardToken[address(this)]));\r\n    }\r\n\r\n\r\n    function halveMinQuorum()override internal returns (bool _success) {\r\n        // this can only be called after `QUORUM_HALVING_PERIOD` has passed or at anytime\r\n        // by the curator with a delay of at least `MIN_PROPOSAL_DEBATE_PERIOD` between the calls\r\n        if ((lastTimeMinQuorumMet < (block.timestamp - QUORUM_HALVING_PERIOD) || msg.sender == curator)\r\n            && lastTimeMinQuorumMet < (block.timestamp - MIN_PROPOSAL_DEBATE_PERIOD)) {\r\n            lastTimeMinQuorumMet = block.timestamp;\r\n            minQuorumDivisor *= 2;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function createNewDAO(address _newCurator) internal returns (DAO _newDAO) {\r\n        emit NewCurator(_newCurator);\r\n        return daoCreator.createDAO(_newCurator, 0, 0, (block.timestamp + SPLIT_EXECUTION_PERIOD), address(0), address(0), address(0), address(0) );\r\n    }\r\n\r\n    function numberOfProposals() override public view returns (uint _numberOfProposals) {\r\n        // Don't count index 0. It's used by isBlocked() and exists from start\r\n        return proposalsTotal;\r\n    }\r\n\r\n    function getNewDAOAddress(uint _proposalID) public view override returns (address _newDAO) {\r\n        // Proposal storage p = proposals[_proposalID];\r\n\r\n        return address(proposals[_proposalID].splitData[0].newDAO);\r\n        // address newDAOAddress = p.splitData[0].newDAO;\r\n        // return (newDAOAddress);\r\n    }\r\n\r\n    function isBlocked(address _account) override internal returns (bool) {\r\n        if (blocked[_account] == 0)\r\n            return false;\r\n        Proposal storage p = proposals[blocked[_account]];\r\n        if (block.timestamp > p.votingDeadline) {\r\n            blocked[_account] = 0;\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function unblockMe() override external returns (bool) {\r\n        return isBlocked(msg.sender);\r\n    }\r\n    \r\n}\r\n\r\nabstract contract DAO_Creator {\r\n    function createDAO(\r\n        address _curator,\r\n        uint _proposalDeposit,\r\n        uint _minTokensToCreate,\r\n        uint _closingTime,\r\n        address routerAddress,\r\n        address _treasuryAddress,\r\n        address _tournamentAddress,\r\n        address _charityAddress\r\n    ) external returns (DAO _newDAO) {\r\n        return new DAO(\r\n            _curator,\r\n            DAO_Creator(this),\r\n            _proposalDeposit,\r\n            _minTokensToCreate,\r\n            _closingTime,\r\n            msg.sender,\r\n            routerAddress,\r\n            _treasuryAddress,\r\n            _tournamentAddress,\r\n            _charityAddress\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"contract DAO_Creator\",\"name\":\"_daoCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensToCreate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_privateCreation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tournamentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"AllowedRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FuelingToDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"NewCurator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newCurator\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DAOpaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOrewardAccount\",\"outputs\":[{\"internalType\":\"contract ManagedAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actualBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRecipients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTournamentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeAllowedRecipients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalDeposit\",\"type\":\"uint256\"}],\"name\":\"changeProposalDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_codeChecksOut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createTokenProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCreator\",\"outputs\":[{\"internalType\":\"contract DAO_Creator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraBalance\",\"outputs\":[{\"internalType\":\"contract ManagedAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClosingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getNewDAOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_newDAO\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"isExcludedFromAntiwhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFueled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensToCreate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_transactionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_debatingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newCurator\",\"type\":\"bool\"}],\"name\":\"newProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfProposals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IpancakeV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateCreation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"proposalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newCurator\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"yea\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toMembers\",\"type\":\"bool\"}],\"name\":\"retrieveDAOReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"internalType\":\"contract ManagedAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTournamentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BuyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTournamentFee\",\"type\":\"uint256\"}],\"name\":\"setBuySwappingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromAntiwhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTournamentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellCharityFee\",\"type\":\"uint256\"}],\"name\":\"setSellSwappingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tournament\",\"type\":\"address\"}],\"name\":\"setTournamentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TransferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferTournamentFee\",\"type\":\"uint256\"}],\"name\":\"setTransferSwappingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"splitDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolderRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRewardfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTournamentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithoutReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unblockMe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DAO", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000084b30aac7f5abb0b5447eb1ab9f54ffb0d5b1efb00000000000000000000000084b30aac7f5abb0b5447eb1ab9f54ffb0d5b1efb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000062d6b87100000000000000000000000084b30aac7f5abb0b5447eb1ab9f54ffb0d5b1efb00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000006c199d58b3d4dd7071ebd43cd50c2a78047f604f000000000000000000000000ddc00696fb41e03c278a7ae50ebac1bd0ddebc940000000000000000000000009dc772af0a916a094091edb70b32bd7a46a1e323", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bbf8ad78ed1302024de6d4855b1c2c8fea88d6ca183254bd851205fc18749b39"}