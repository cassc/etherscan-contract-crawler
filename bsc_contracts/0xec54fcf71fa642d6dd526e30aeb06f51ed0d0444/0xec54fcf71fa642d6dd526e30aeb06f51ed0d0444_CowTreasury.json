{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\npragma solidity 0.7.5;\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IERC20Mintable {\r\n  function mint( uint256 amount_ ) external;\r\n\r\n  function mint( address account_, uint256 ammount_ ) external;\r\n}\r\n\r\npragma solidity 0.7.5;\r\n\r\n// ICOWERC20\r\ninterface ICOW20 {\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IBondCalculator {\r\n\r\n    function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\r\n    \r\n    function markdown( address pair_ ) external view returns ( uint );\r\n}\r\n\r\npragma solidity 0.7.5;\r\n\r\ncontract CowTreasury is Ownable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Deposit( address indexed token, uint amount, uint value );\r\n    event Withdrawal( address indexed token, uint amount, uint value );\r\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\r\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\r\n    event ReservesManaged( address indexed token, uint amount );\r\n    event ReservesUpdated( uint indexed totalReserves );\r\n    event ReservesAudited( uint indexed totalReserves );\r\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\r\n    event ChangeQueued( MANAGING indexed managing, address queued );\r\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\r\n\r\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SCOW }\r\n\r\n    address public immutable COW;\r\n    uint public immutable blocksNeededForQueue;\r\n\r\n    address[] public reserveTokens; // Push only, beware false-positives.\r\n    mapping( address => bool ) public isReserveToken;\r\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\r\n\r\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveDepositor;\r\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\r\n\r\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveSpender;\r\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityTokens; // Push only, beware false-positives.\r\n    mapping( address => bool ) public isLiquidityToken;\r\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isLiquidityDepositor;\r\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\r\n\r\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\r\n\r\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveManager;\r\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isLiquidityManager;\r\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\r\n\r\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isDebtor;\r\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\r\n    mapping( address => uint ) public debtorBalance;\r\n\r\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isRewardManager;\r\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\r\n\r\n    address public sCOW;\r\n    uint public sCOWQueue; // Delays change to sCOW address\r\n    \r\n    uint public totalReserves; // Risk-free value of all assets\r\n    uint public totalDebt;\r\n \r\n    constructor (\r\n        address _COW,\r\n        address _BUSD,\r\n        uint _blocksNeededForQueue\r\n    ) {\r\n        require( _COW != address(0) );\r\n        COW = _COW;\r\n\r\n        isReserveToken[ _BUSD ] = true;\r\n        reserveTokens.push( _BUSD );\r\n\r\n        blocksNeededForQueue = _blocksNeededForQueue;\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to deposit an asset for COW\r\n        @param _amount uint\r\n        @param _token address\r\n        @param _profit uint\r\n        @return send_ uint\r\n     */\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\r\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \"Not accepted\" );\r\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        if ( isReserveToken[ _token ] ) {\r\n            require( isReserveDepositor[ msg.sender ], \"Not approved\" );\r\n        } else {\r\n            require( isLiquidityDepositor[ msg.sender ], \"Not approved\" );\r\n        }\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        // mint COW needed and store amount of rewards for distribution\r\n        send_ = value.sub( _profit );\r\n        IERC20Mintable( COW ).mint( msg.sender, send_ );\r\n\r\n        totalReserves = totalReserves.add( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        emit Deposit( _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to burn COW for reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function withdraw( uint _amount, address _token ) external {\r\n        require( isReserveToken[ _token ], \"Not accepted\" ); // Only reserves can be used for redemptions\r\n        require( isReserveSpender[ msg.sender ] == true, \"Not approved\" );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        ICOW20( COW ).burnFrom( msg.sender, value );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\r\n\r\n        emit Withdrawal( _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to borrow reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function incurDebt( uint _amount, address _token ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n        require( isReserveToken[ _token ], \"Not accepted\" );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n\r\n        uint maximumDebt = IERC20( sCOW ).balanceOf( msg.sender ); // Can only borrow against sCOW held\r\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\r\n        require( value <= availableDebt, \"Exceeds debt limit\" );\r\n\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\r\n        totalDebt = totalDebt.add( value );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).transfer( msg.sender, _amount );\r\n        \r\n        emit CreateDebt( msg.sender, _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to repay borrowed reserves with reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function repayDebtWithReserve( uint _amount, address _token ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n        require( isReserveToken[ _token ], \"Not accepted\" );\r\n\r\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\r\n        totalDebt = totalDebt.sub( value );\r\n\r\n        totalReserves = totalReserves.add( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        emit RepayDebt( msg.sender, _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to repay borrowed reserves with COW\r\n        @param _amount uint\r\n     */\r\n    function repayDebtWithCOW( uint _amount ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n\r\n        ICOW20( COW ).burnFrom( msg.sender, _amount );\r\n\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\r\n        totalDebt = totalDebt.sub( _amount );\r\n\r\n        emit RepayDebt( msg.sender, COW, _amount, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to withdraw assets\r\n        @param _token address\r\n        @param _amount uint\r\n     */\r\n    function manage( address _token, uint _amount ) external {\r\n        if( isLiquidityToken[ _token ]) {\r\n            require( isLiquidityManager[ msg.sender ], \"Not approved\" );\r\n        } else {\r\n            require( isReserveManager[ msg.sender ], \"Not approved\" );\r\n        }\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        require( value <= excessReserves(), \"Insufficient reserves\" );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\r\n\r\n        emit ReservesManaged( _token, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice send epoch reward to staking contract\r\n     */\r\n    function mintRewards( address _recipient, uint _amount ) external {\r\n        require( isRewardManager[ msg.sender ], \"Not approved\" );\r\n        require( _amount <= excessReserves(), \"Insufficient reserves\" );\r\n\r\n        IERC20Mintable( COW ).mint( _recipient, _amount );\r\n\r\n        emit RewardsMinted( msg.sender, _recipient, _amount );\r\n    } \r\n\r\n    /**\r\n        @notice returns excess reserves not backing tokens\r\n        @return uint\r\n     */\r\n    function excessReserves() public view returns ( uint ) {\r\n        return totalReserves.sub( IERC20( COW ).totalSupply().sub( totalDebt ) );\r\n    }\r\n\r\n    /**\r\n        @notice takes inventory of all tracked assets\r\n        @notice always consolidate to recognized reserves before audit\r\n     */\r\n    function auditReserves() external onlyManager() {\r\n        uint reserves;\r\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\r\n            reserves = reserves.add ( \r\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\r\n            );\r\n        }\r\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\r\n            reserves = reserves.add (\r\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\r\n            );\r\n        }\r\n        totalReserves = reserves;\r\n        emit ReservesUpdated( reserves );\r\n        emit ReservesAudited( reserves );\r\n    }\r\n\r\n    /**\r\n        @notice returns COW valuation of asset\r\n        @param _token address\r\n        @param _amount uint\r\n        @return value_ uint\r\n     */\r\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\r\n        if ( isReserveToken[ _token ] ) {\r\n            // convert amount to match COW decimals\r\n            value_ = _amount.mul( 10 ** ICOW20( COW ).decimals() ).div( 10 ** ICOW20( _token ).decimals() );\r\n        } else if ( isLiquidityToken[ _token ] ) {\r\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice queue address to change boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @return bool\r\n     */\r\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\r\n        require( _address != address(0) );\r\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\r\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\r\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\r\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\r\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\r\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\r\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\r\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\r\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\r\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\r\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\r\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.SCOW ) { // 9\r\n            sCOWQueue = block.number.add( blocksNeededForQueue );\r\n        } else return false;\r\n\r\n        emit ChangeQueued( _managing, _address );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice verify queue then set boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @param _calculator address\r\n        @return bool\r\n     */\r\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\r\n        require( _address != address(0) );\r\n        bool result;\r\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0 \r\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\r\n                reserveDepositorQueue[ _address ] = 0;\r\n                if( !listContains( reserveDepositors, _address ) ) {\r\n                    reserveDepositors.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveDepositor[ _address ];\r\n            isReserveDepositor[ _address ] = result;\r\n            \r\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\r\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\r\n                reserveSpenderQueue[ _address ] = 0;\r\n                if( !listContains( reserveSpenders, _address ) ) {\r\n                    reserveSpenders.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveSpender[ _address ];\r\n            isReserveSpender[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\r\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\r\n                reserveTokenQueue[ _address ] = 0;\r\n                if( !listContains( reserveTokens, _address ) ) {\r\n                    reserveTokens.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveToken[ _address ];\r\n            isReserveToken[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\r\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\r\n                reserveManagers.push( _address );\r\n                ReserveManagerQueue[ _address ] = 0;\r\n                if( !listContains( reserveManagers, _address ) ) {\r\n                    reserveManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveManager[ _address ];\r\n            isReserveManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\r\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\r\n                liquidityDepositors.push( _address );\r\n                LiquidityDepositorQueue[ _address ] = 0;\r\n                if( !listContains( liquidityDepositors, _address ) ) {\r\n                    liquidityDepositors.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityDepositor[ _address ];\r\n            isLiquidityDepositor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\r\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\r\n                LiquidityTokenQueue[ _address ] = 0;\r\n                if( !listContains( liquidityTokens, _address ) ) {\r\n                    liquidityTokens.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityToken[ _address ];\r\n            isLiquidityToken[ _address ] = result;\r\n            bondCalculator[ _address ] = _calculator;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\r\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\r\n                LiquidityManagerQueue[ _address ] = 0;\r\n                if( !listContains( liquidityManagers, _address ) ) {\r\n                    liquidityManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityManager[ _address ];\r\n            isLiquidityManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\r\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\r\n                debtorQueue[ _address ] = 0;\r\n                if( !listContains( debtors, _address ) ) {\r\n                    debtors.push( _address );\r\n                }\r\n            }\r\n            result = !isDebtor[ _address ];\r\n            isDebtor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\r\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\r\n                rewardManagerQueue[ _address ] = 0;\r\n                if( !listContains( rewardManagers, _address ) ) {\r\n                    rewardManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isRewardManager[ _address ];\r\n            isRewardManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.SCOW ) { // 9\r\n            sCOWQueue = 0;\r\n            sCOW = _address;\r\n            result = true;\r\n\r\n        } else return false;\r\n\r\n        emit ChangeActivated( _managing, _address, result );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice checks requirements and returns altered structs\r\n        @param queue_ mapping( address => uint )\r\n        @param status_ mapping( address => bool )\r\n        @param _address address\r\n        @return bool \r\n     */\r\n    function requirements( \r\n        mapping( address => uint ) storage queue_, \r\n        mapping( address => bool ) storage status_, \r\n        address _address \r\n    ) internal view returns ( bool ) {\r\n        if ( !status_[ _address ] ) {\r\n            require( queue_[ _address ] != 0, \"Must queue\" );\r\n            require( queue_[ _address ] <= block.number, \"Queue not expired\" );\r\n            return true;\r\n        } return false;\r\n    }\r\n\r\n    /**\r\n        @notice checks array to ensure against duplicate\r\n        @param _list address[]\r\n        @param _token address\r\n        @return bool\r\n     */\r\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\r\n        for( uint i = 0; i < _list.length; i++ ) {\r\n            if( _list[ i ] == _token ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_COW\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BUSD\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CowTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CowTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ReserveManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDebtor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveSpender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CowTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithCOW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveSpenderQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSpenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sCOW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sCOWQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CowTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CowTreasury", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b149dd64ea4b173e5fc9ecf77bd380418695185d000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000258", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9721ae638bbf63418d12c561779753fdf838664ba93d6c86f95b97de66fa1a04"}