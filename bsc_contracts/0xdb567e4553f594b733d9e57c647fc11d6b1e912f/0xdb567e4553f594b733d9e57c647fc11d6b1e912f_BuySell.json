{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface BEP20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BuySell{\r\n    \r\n    BEP20 public buytoken;       \r\n    BEP20 public saletoken;       \r\n    \r\n    address private admin;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 public buyRatePerToken;\r\n    uint256 public ratePerToken;\r\n    uint256 public rateDiv;\r\n    uint256 public amnt;\r\n    uint256 public Sellstatus;\r\n    uint256 public Buystatus;\r\n\r\n    modifier onlyActiveStatusForBuy() {\r\n        require(Buystatus != 0, \"Function can only be called when status is non-zero\");\r\n        _;\r\n    }\r\n    modifier onlyActiveStatusForSell() {\r\n        require(Sellstatus != 0, \"Function can only be called when status is non-zero\");\r\n        _;\r\n    }\r\n\r\n    function setSellStatus(uint256 _status) public onlyOwner returns(bool){\r\n        Sellstatus = _status;\r\n        return true;\r\n    }\r\n    function setBuyStatus(uint256 _status) public onlyOwner returns(bool){\r\n        Buystatus = _status;\r\n        return true;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin, \"Message sender must be the contract's owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor ()  {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    event Sale(address indexed buyer, uint256 indexed spent, uint256 indexed recieved);\r\n    event Buy(address indexed buyer, uint256 indexed spent, uint256 indexed recieved);\r\n    \r\n    function init(address _buytoken, address _saletoken) public onlyOwner {\r\n        Sellstatus =1;\r\n        Buystatus=1;\r\n\r\n        buytoken = BEP20(_buytoken);            \r\n        saletoken = BEP20(_saletoken);       \r\n\r\n        ratePerToken = 35700;\r\n        buyRatePerToken = 11;\r\n        rateDiv = 10000;\r\n    }\r\n\r\n    \r\n\r\n    \r\n    function sale(uint256 amount) public onlyActiveStatusForSell returns (bool) {\r\n        _sale(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function buy(uint256 amount) public onlyActiveStatusForBuy returns (bool) {\r\n        _buy(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _sale(address sender, uint256 amount) internal {\r\n          \r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        \r\n        require(amount > 0, \"BEP20: Amount Should be greater then 0!\");        \r\n        require(amount <= saletoken.balanceOf(sender), \"BEP20: Insufficient Fund!\");   \r\n          \r\n        uint256 tokens =  (amount * ratePerToken)/rateDiv;\r\n        require(tokens <= buytoken.balanceOf(address(this)), \"BEP20: Insufficient token balance\");         \r\n       \r\n        saletoken.transferFrom(msg.sender, address(this), amount);\r\n       \r\n        //BEP20(b_token).transfer(msg.sender, amount);\r\n          buytoken.transfer(msg.sender, tokens);\r\n        \r\n       emit Sale(sender, amount, amount);\r\n    }\r\n\r\n\r\n    function _buy(address sender, uint256 amount) internal {\r\n          \r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n       require(amount > 0, \"BEP20: Amount Should be greater then 0!\");        \r\n        uint256 tokens = (amount * buyRatePerToken)/rateDiv;\r\n        require(tokens <= buytoken.balanceOf(sender), \"BEP20: Insufficient Fund!\");\r\n        require(buytoken.transferFrom(sender, address(this), tokens), \"BEP20: Transfer failed\");\r\n\r\n        saletoken.transfer(msg.sender, amount); \r\n       \r\n        \r\n       emit Buy(sender, amount, amount);\r\n    }\r\n\r\n    function buygetrate(uint256 rate,uint256 div)public onlyOwner returns(bool){\r\n        buyRatePerToken = rate;\r\n        rateDiv = div;\r\n        return true;\r\n    }\r\n    function salegetrate(uint256 rate,uint256 div)public onlyOwner returns(bool){\r\n        ratePerToken = rate;\r\n        rateDiv = div;\r\n        return true;\r\n    }\r\n\r\n    function withdraw(BEP20 BUSD, address userAddress, uint256 amt) external onlyOwner() returns(bool){\r\n        require(BUSD.balanceOf(address(this)) >= amt,\"ErrAmt\");\r\n        BUSD.transfer(userAddress, amt);\r\n        // emit Withdrawn(userAddress, amt);\r\n        return true;\r\n    }\r\n\r\n    function shareContribution(address payable[]  memory  _contributors, uint256[] memory _balances , BEP20 token) public payable {\r\n       \r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n           token.transferFrom(msg.sender,_contributors[i],_balances[i]);\r\n        }\r\n       \r\n    }\r\n\r\n    function shareSingleContribution(address payable  _contributors, uint256 _balances , BEP20 token) public payable {        \r\n           token.transferFrom(msg.sender,_contributors,_balances);      \r\n    }\r\n    function airDrop(address _address, uint _amount,  BEP20 token) external onlyOwner{\r\n        token.transfer(_address,_amount);\r\n    }\r\n\r\n    function contribute(uint256 amount, BEP20 token) public{\r\n        token.transferFrom(msg.sender, address(this), amount);                 \r\n    }\r\n\r\n    function changeToken(BEP20 _buytoken, BEP20 _saletoken)public onlyOwner returns(bool){\r\n        buytoken = BEP20(_buytoken);              \r\n        saletoken = BEP20(_saletoken);    \r\n        return true;\r\n    }\r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recieved\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Buystatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sellstatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRatePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"buygetrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytoken\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"_buytoken\",\"type\":\"address\"},{\"internalType\":\"contract BEP20\",\"name\":\"_saletoken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buytoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saletoken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"salegetrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saletoken\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"setBuyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"setSellStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shareContribution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contributors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balances\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shareSingleContribution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"BUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuySell", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2819a1a2ddfdcf4b100855d6e2245bd4b9ac05c7c4cc91507275e4f89d905ec7"}