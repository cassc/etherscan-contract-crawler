{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n/// @title Migration contract\r\n/// @author FreezyEx (https://github.com/FreezyEx)\r\n/// @notice A contract to migrate from old to new token version\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Migrate is ReentrancyGuard, Context, Ownable{\r\n\r\n    // we want to track who has already migrated to V2\r\n    mapping(address => bool) private claimed;\r\n\r\n    IERC20 public tokenV1; //address of the old version\r\n    IERC20 public tokenV2; //address of the new version\r\n    uint256 public rate; // 1 token V1 ---> 1 * rate token V2\r\n\r\n    bool public migrationStarted;\r\n\r\n    /// @notice Emits event every time someone migrates\r\n    event MigrateToV2(address addr, uint256 amount);\r\n\r\n    /// @param tokenAddressV1 The address of old version\r\n    /// @param tokenAddressV2 The address of new version\r\n    /// @param _rate The rate between old and new version\r\n    constructor(IERC20 tokenAddressV1, IERC20 tokenAddressV2, uint256 _rate) {\r\n        tokenV2 = tokenAddressV2;\r\n        tokenV1 = tokenAddressV1;\r\n        rate = _rate;\r\n    }\r\n\r\n    /// @notice Enables the migration\r\n    function startMigration() external onlyOwner{\r\n        require(migrationStarted == false, \"Migration is already enabled\");\r\n        migrationStarted = true;\r\n    }\r\n\r\n    /// @notice Disable the migration\r\n    function stopMigration() external onlyOwner{\r\n        require(migrationStarted == true, \"Migration is already disabled\");\r\n        migrationStarted = false;\r\n    }\r\n\r\n    /// @notice Updates \"tokenV1\", \"tokenV2\" and the \"rate\"\r\n    /// @param tokenV1addr The address of old version\r\n    /// @param tokenV2addr The address of new version\r\n    /// @param _rate The rate between old and new version\r\n    function setTokenV1andV2(IERC20 tokenV1addr, IERC20 tokenV2addr, uint256 _rate) external onlyOwner{\r\n        tokenV1 = tokenV1addr;\r\n        tokenV2 = tokenV2addr;\r\n        rate = _rate;\r\n    }\r\n\r\n    /// @notice Withdraws remaining tokens\r\n    function withdrawTokens(uint256 amount) external onlyOwner{\r\n        require(migrationStarted == false, \"Impossible to withdraw tokens if migration still enabled\");\r\n        tokenV2.transfer(msg.sender, amount * 10**(tokenV2.decimals()));\r\n    }\r\n\r\n    /// @param v1amount The amount of tokens to migrate\r\n    /// @notice Migrates from old version to new one\r\n    ///   User must call \"approve\" function on tokenV1 contract\r\n    ///   passing this contract address as \"sender\".\r\n    function migrateToV2(uint256 v1amount) public nonReentrant(){\r\n        require(migrationStarted == true, 'Migration not started yet');\r\n        uint256 amount = v1amount * 10 ** tokenV1.decimals();\r\n        uint256 userV1Balance = tokenV1.balanceOf(msg.sender);\r\n        require(userV1Balance >= amount, 'You must hold V1 tokens to migrate');\r\n        uint256 amtToMigrate = v1amount / rate * 10 ** tokenV2.decimals();\r\n        require(tokenV2.balanceOf(address(this)) >= amtToMigrate, 'No enough V2 liquidity');\r\n        tokenV1.transferFrom(msg.sender, owner(), amount);\r\n        tokenV2.transfer(msg.sender, amtToMigrate);\r\n        emit MigrateToV2(msg.sender, amtToMigrate);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddressV1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddressV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MigrateToV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1amount\",\"type\":\"uint256\"}],\"name\":\"migrateToV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenV1addr\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenV2addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setTokenV1andV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenV1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenV2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Migrate", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b703378f52f54394e30d465d2eb1d2146d0d685a00000000000000000000000007515f6d56879040b02c4d355df62ec5aede4c7e000000000000000000000000000000000000000000000000000000001dcd6500", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a6d455a277223daf6602665b768541e2c8d2c46f8c17b610bab15f942a54422e"}