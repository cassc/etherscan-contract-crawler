{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n/**\r\n * @dev Implementation of the Owned Contract.\r\n *\r\n */\r\ncontract Owned is Context {\r\n\r\n    address public _owner;\r\n    address public _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(_msgSender() == _owner, \"HaggleX Token: Only Owner can perform this task\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"HaggleX Token: approve to the zero address\");\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(_msgSender() == _newOwner, \"HaggleX Token: Token Contract Ownership has not been set for the address\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n        _newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    bool private _paused;\r\n\r\n    mapping(address => bool) private _blacklists;\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the paused state of transfers.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the frozen state of transfers.\r\n     */\r\n    function blacklisted(address _address) external view returns (bool) {\r\n        return _blacklists[_address];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"HaggleX Token: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"HaggleX Token: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    /* Freeze transfer of tokens from the contract  \r\n     *\r\n     */\r\n     function _pause() internal virtual  {\r\n        require(_paused == false, \"HaggleX Token: token transfer is unavailable\");\r\n        _paused = true;\r\n    }\r\n\r\n    /* Unfreeze transfer of tokens from the contract  \r\n     *\r\n     */\r\n    function _unpause() internal virtual  {\r\n        require(_paused == true, \"HaggleX Token: token transfer is available\");\r\n        _paused = false;\r\n    }\r\n\r\n    /* Blacklist address from making transfer of tokens.\r\n     *\r\n     */\r\n    function _blacklist(address _address) internal virtual {\r\n        require(_blacklists[_address] == false, \"HaggleX Token: account already blacklisted\");\r\n        _blacklists[_address] = true;\r\n    }\r\n\r\n    /* Whitelist address to make transfer of tokens.\r\n     *\r\n     */\r\n    function _whitelist(address _address) internal virtual {\r\n        require(_blacklists[_address] == true, \"HaggleX Token: account already whitelisted\");\r\n        _blacklists[_address] = false;\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"HaggleX Token: transfer from the zero address\");\r\n        require(recipient != address(0), \"HaggleX Token: transfer to the zero address\");\r\n        require(_paused == false, \"HaggleX Token: token contract is not available\");\r\n        require(_blacklists[sender] == false,\"HaggleX Token: sender account already blacklisted\");\r\n        require(_blacklists[recipient] == false,\"HaggleX Token: sender account already blacklisted\");\r\n\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"HaggleX Token: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"HaggleX Token: mint to the zero address\");\r\n        require(_paused == false, \"HaggleX Token: token contract is not available\");\r\n        require(_blacklists[account] == false,\"HaggleX Token: account to mint to already blacklisted\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(_paused == false, \"HaggleX Token: token contract is not available\");\r\n        require(_blacklists[account] == false,\"HaggleX Token: account to burn from already blacklisted\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"HaggleX Token: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"HaggleX Token: approve from the zero address\");\r\n        require(spender != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_paused == false, \"HaggleX Token: token contract approve is not available\");\r\n        require(_blacklists[owner] == false,\"HaggleX Token: owner account already blacklisted\");\r\n        require(_blacklists[spender] == false,\"HaggleX Token: spender account already blacklisted\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\n\r\ncontract HaggleXToken is ERC20, Owned {\r\n    using SafeMath for uint;\r\n    \r\n    event staked(address sender, uint amount, uint lockedTime);\r\n    event unstaked(address sender, uint amount);\r\n    \r\n    address private _minter;\r\n\r\n    uint private stakedSupply = 0;\r\n\r\n    \r\n    uint8 constant STAKERS_PERCENTAGE = 60;\r\n    uint8 constant LEADERSHIP_BOARD_PERCENTAGE = 20;\r\n    uint8 constant UNIVERSAL_BASIC_INCOME_PERCENTAGE = 5;\r\n    uint8 constant DEVELOPMENT_PERCENTAGE = 15;\r\n\r\n    \r\n    address public CORE_TEAM;\r\n    address public ADVISORS;\r\n    address public CORE_INVESTORS;\r\n    address public RESERVE;\r\n    address public CHARITY;\r\n    address public FOUNDING_STAFF;\r\n    address public AIRGRAB;\r\n    address public ICO;\r\n    \r\n    address public LEADERSHIP_BOARD;\r\n    address public UNIVERSAL_BASIC_INCOME;\r\n    address public DEVELOPMENT;\r\n    \r\n    \r\n    \r\n\r\n    struct StakeType {\r\n        uint rewardPercent; // Percent reward to get each period\r\n        uint lockedTime; // How long the stake is locked before allowed to withdraw\r\n        uint totalStaked; //Total amount staked for a particular StakeType\r\n    }\r\n    \r\n    mapping(uint => StakeType) private _stakingOptions;\r\n    \r\n    struct Stake {\r\n        uint amount; // Amount staked\r\n        uint startTime; // When staking started\r\n        uint stakeType; // Type of stake\r\n        uint lastWithdrawTime; // Track the last lastWithdrawTime time\r\n        uint noOfWithdrawals; // Number of Withdrawals made\r\n        bool stakeActive; //Tracks whether a stake is still active\r\n    }\r\n    \r\n    //Each stake owned by an address\r\n    mapping(address => mapping(uint => Stake)) private _staking;\r\n    \r\n    //Number of stakes owned by an address\r\n    mapping(address => uint) private _stakesCount;\r\n\r\n    //deployment time\r\n    uint private deploymentTime;\r\n\r\n    \r\n    constructor () public  ERC20(\"HaggleX Token\", \"HAG\", 8){\r\n                \r\n        //STAKING PLANS\r\n        //staking for 3months \r\n        _stakingOptions[0].rewardPercent = 15;\r\n        _stakingOptions[0].lockedTime = 12 weeks;\r\n        _stakingOptions[0].totalStaked = 0;\r\n        \r\n        //staking for 6months \r\n        _stakingOptions[1].rewardPercent = 30;\r\n        _stakingOptions[1].lockedTime = 24 weeks;\r\n        _stakingOptions[1].totalStaked = 0;\r\n\r\n        \r\n        //staking for 12months \r\n        _stakingOptions[2].rewardPercent = 55;\r\n        _stakingOptions[2].lockedTime = 48 weeks;\r\n        _stakingOptions[2].totalStaked = 0;\r\n\r\n    \r\n        //OWNER\r\n        _owner = _msgSender();\r\n        \r\n        //Time Contract was deployed\r\n        deploymentTime = block.timestamp;\r\n        \r\n        \r\n       \r\n        \r\n        setAddresses(0xdA3D2fdd872327E5705ad6de147DaBeDdf2FA0C0,\r\n                    0x221Cb04Ff55Eee92111DAC6003b7C54C2A0F8904,\r\n                    0xA05bc45454e487367e5509073d9B194611f4CF96,\r\n                    0xD2EcB7331012646CDE72c02142d4Cdf2Ad5083bd,\r\n                    0x40B016E3e79aFf31619b9d69b2b71376e5Ce7350,\r\n                    0xb87990338482286E00dF045188a74f90aB8c8B53,\r\n                    0x4432dC2390CBDA319b7F0C2d9600c6C478D29261,\r\n                    0x08c6DDDE074fe8c60730c5c079815728Bfbb1041);\r\n        \r\n        set_LB_UBI_DEV_Address(0x2b09F7e6Bc0336BF5160c631c7ed73F34373Edc7,\r\n                            0x6FD3b168478cdebA8b8C2AB12776C6B83e992007,\r\n                            0x0cEdEAd442a381AD321ea944e30B09d340638B56);\r\n        \r\n        \r\n        _mint(CORE_TEAM, 10000 gwei);\r\n        _mint(ADVISORS, 4000 gwei);\r\n        _mint(CORE_INVESTORS, 6000 gwei);\r\n        _mint(RESERVE, 10000 gwei);\r\n        _mint(CHARITY, 2000 gwei);\r\n        _mint(FOUNDING_STAFF, 8000 gwei);\r\n        _mint(AIRGRAB, 10000 gwei);\r\n        _mint(ICO, 50000 gwei);\r\n\r\n\r\n        _blacklist(CORE_TEAM);\r\n        _blacklist(ADVISORS);\r\n        _blacklist(CORE_INVESTORS);\r\n        _blacklist(RESERVE);\r\n        _blacklist(CHARITY);\r\n        _blacklist(FOUNDING_STAFF);\r\n        _blacklist(AIRGRAB);\r\n\r\n    }\r\n    \r\n    /* Sets the addresses that holds the of different groups in the team\r\n     *\r\n     */\r\n    function setAddresses(address _CORE_TEAM, \r\n                            address _ADVISORS, \r\n                            address _CORE_INVESTORS, \r\n                            address _RESERVE, \r\n                            address _CHARITY, \r\n                            address _FOUNDING_STAFF, \r\n                            address _AIRGRAB, \r\n                            address _ICO)\r\n        public onlyOwner{\r\n        require(_CORE_TEAM != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_ADVISORS != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_CORE_INVESTORS != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_RESERVE != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_CHARITY != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_FOUNDING_STAFF != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_AIRGRAB != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(_ICO != address(0), \"HaggleX Token: approve to the zero address\");\r\n\r\n        CORE_TEAM = _CORE_TEAM;\r\n        ADVISORS = _ADVISORS;\r\n        CORE_INVESTORS = _CORE_INVESTORS;\r\n        RESERVE = _RESERVE;\r\n        CHARITY = _CHARITY;\r\n        FOUNDING_STAFF = _FOUNDING_STAFF;\r\n        AIRGRAB = _AIRGRAB;\r\n        ICO = _ICO;\r\n\r\n    }\r\n    \r\n   \r\n    \r\n    /* Sets the addresses that holds the daily token rewards\r\n         *\r\n         */\r\n         \r\n    function set_LB_UBI_DEV_Address(address LB, address UBI, address DEV) public onlyOwner {\r\n        require(LB != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(UBI != address(0), \"HaggleX Token: approve to the zero address\");\r\n        require(DEV != address(0), \"HaggleX Token: approve to the zero address\");\r\n        \r\n        LEADERSHIP_BOARD = LB;\r\n        UNIVERSAL_BASIC_INCOME = UBI;\r\n        DEVELOPMENT = DEV;\r\n    }\r\n    \r\n    \r\n    \r\n    /* Set the token contract for which to call for the stake reward\r\n     *\r\n     */\r\n    function getTotalSupply() public view returns(uint) {\r\n        return totalSupply() + stakedSupply;\r\n    }\r\n    \r\n    /* Get available tokens\r\n     *\r\n     */\r\n    function getMyBalance() external view returns(uint) {\r\n        return balanceOf(_msgSender());\r\n    }\r\n\r\n    \r\n    /* Get all tokens including staked\r\n     *\r\n     */\r\n    function getMyFullBalance() external view returns(uint) {\r\n        uint balance = balanceOf(_msgSender());\r\n        for (uint i = 1; i < _stakesCount[_msgSender()]; i++){\r\n            balance += getStakeAmount(i);\r\n        } \r\n        return balance;\r\n    }\r\n\r\n\r\n\r\n      /* Get all stakes a address holds\r\n     */\r\n    function getStakes() external view returns (uint[3][] memory) {\r\n        uint[3][] memory tempStakeList = new uint[3][](_stakesCount[_msgSender()]+1);\r\n        for (uint i = 1; i <= _stakesCount[_msgSender()]; i++){\r\n            tempStakeList[i][0] = getStakeAmount(i);\r\n            tempStakeList[i][1] = getRemainingLockTime(i);\r\n            tempStakeList[i][2] = calculateDailyStakeReward(i);\r\n        } \r\n        return tempStakeList;\r\n    }\r\n    \r\n\r\n    \r\n    /* Sets the address allowed to mint\r\n     *\r\n     */\r\n    function setMinter(address minter_) external onlyOwner {\r\n        require(minter_ != address(0), \"HaggleX Token: approve to the zero address\");\r\n        _minter = minter_;\r\n    }\r\n\r\n    /* Puts a hold on token movement in the contract\r\n    *\r\n    */\r\n    function pause() external onlyOwner  {\r\n        _pause();\r\n    }\r\n    \r\n    /* Release the hold on token movement in the contract\r\n    *\r\n    */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n      /* Blacklist address from making transfer of tokens.\r\n     *\r\n     */\r\n    function blacklist(address _address) external onlyOwner {\r\n        _blacklist(_address);\r\n    }    \r\n\r\n    /* Whitelist address to make transfer of tokens.\r\n     *\r\n     */\r\n    function whitelist(address _address) external onlyOwner {\r\n        _whitelist(_address);\r\n    } \r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account, deducting from the sender's allowance for said account. Uses the\r\n    * internal burn function.\r\n    * - account The account whose tokens will be burnt.\r\n    * - amount The amount that will be burnt.\r\n        */\r\n    function burnFrom(address account, uint256 amount) external {\r\n         uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"HaggleX Token: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n    /* Mint an amount of tokens to an address\r\n     *\r\n     */\r\n    function mint(address address_, uint256 amount_) external {\r\n        require(_msgSender() == _minter || _msgSender() == _owner, \"HaggleX Token: Only minter and owner can mint tokens!\");\r\n        _mint(address_, amount_);\r\n    }\r\n    \r\n    /*Mint to multiple addresses in an array.\r\n     *\r\n     */\r\n    function mintToMultipleAddresses(address[] memory _addresses, uint[] memory _amount) external onlyOwner {\r\n        uint addressSize = _addresses.length;\r\n        uint amountSize = _amount.length;\r\n        require(addressSize == amountSize, \"HaggleX Token: Inconsistency in array sizes\");\r\n        for(uint i = 0; i < addressSize; i++){\r\n            _mint(_addresses[i],  _amount[i]);\r\n        }\r\n    }\r\n    \r\n    \r\n  \r\n   \r\n     /* returns true or false depending on if a stake is locked\r\n     * or free to withdraw.\r\n     */\r\n    function isStakeLocked(uint stake_) private view returns (bool) {\r\n        uint stakingTime = block.timestamp - _staking[_msgSender()][stake_].startTime;\r\n        return stakingTime < _stakingOptions[_staking[_msgSender()][stake_].stakeType].lockedTime;\r\n    }\r\n    \r\n    \r\n    /* Returns the remaining lock time of a stake, if unlocked\r\n     * returns 0.\r\n     */\r\n    function getRemainingLockTime(uint stake_) public view returns (uint) {\r\n        uint stakingTime = block.timestamp - _staking[_msgSender()][stake_].startTime;\r\n        if (stakingTime < _stakingOptions[_staking[_msgSender()][stake_].stakeType].lockedTime) {\r\n            return _stakingOptions[_staking[_msgSender()][stake_].stakeType].lockedTime - stakingTime;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n   /* Returns the last Withdrawal time.\r\n     */\r\n    function getLastWithdrawalTime(uint stake_) external view returns (uint) {\r\n       return _staking[_msgSender()][stake_].lastWithdrawTime;\r\n    }\r\n    \r\n    /* Gets the number of withdrawals made already.\r\n     */\r\n    function getNoOfWithdrawals(uint stake_) external view returns (uint) {\r\n        return _staking[_msgSender()][stake_].noOfWithdrawals;\r\n    }\r\n    \r\n    \r\n      /* Returns the amount of token provided with a stake.\r\n     *\r\n     */\r\n    function getStakeAmount(uint stake_) public view returns (uint) {\r\n        return _staking[_msgSender()][stake_].amount;\r\n    } \r\n\r\n\r\n    /* Returns the Total number of staked amount for a particular stake option\r\n    *\r\n    */\r\n    function getTotalStakedAmount(uint stakeType_) public view returns (uint) {\r\n        return _stakingOptions[stakeType_].totalStaked;\r\n    }\r\n\r\n\r\n\r\n    \r\n    \r\n    /* Gets the Rewards from minted Tokens.\r\n     */\r\n    function getStakePercentageReward(uint stakeType_) private view returns (uint) {\r\n        uint rewardPerc = getHalvedReward().mul(STAKERS_PERCENTAGE).mul(_stakingOptions[stakeType_].rewardPercent);\r\n        return  rewardPerc.div(10000);\r\n    }\r\n    \r\n    function getLeadershipBoardPercentageReward() private view returns (uint) {\r\n        uint rewardPerc = getHalvedReward().mul(LEADERSHIP_BOARD_PERCENTAGE);\r\n        return  rewardPerc.div(100);\r\n    }\r\n    \r\n    function getUBIPercentageReward() private view returns (uint) {\r\n        uint rewardPerc = getHalvedReward().mul(UNIVERSAL_BASIC_INCOME_PERCENTAGE);\r\n        return  rewardPerc.div(100);\r\n    }\r\n    \r\n    function getDevelopmentPercentageReward() private view returns (uint) {\r\n        uint rewardPerc = getHalvedReward().mul(DEVELOPMENT_PERCENTAGE);\r\n        return  rewardPerc.div(100);\r\n    }\r\n    \r\n\r\n\r\n    /* Calculates the halved reward of a staking.\r\n    */\r\n    function getHalvedReward() public view returns (uint) {\r\n            \r\n            uint reward;\r\n\r\n            if (getTotalSupply() >= 100000 gwei && getTotalSupply() <= 111680 gwei) {//halvening 1\r\n               reward =  8 gwei;\r\n            }\r\n            else if (getTotalSupply() > 111680 gwei && getTotalSupply() <= 117520 gwei) {//halvening 2\r\n               \r\n               reward =  4 gwei;\r\n            }\r\n            else if (getTotalSupply() > 117520 gwei && getTotalSupply() <= 120440 gwei) { //halvening 3\r\n               \r\n               reward =  2 gwei;\r\n            }\r\n            else if (getTotalSupply() > 120440 gwei && getTotalSupply() <= 121900 gwei) { //halvening 4\r\n               \r\n               reward =  1 gwei;\r\n            }\r\n            else if (getTotalSupply() > 121900 gwei && getTotalSupply() <= 122630 gwei) { //halvening 5\r\n               \r\n               reward =  0.5 gwei;\r\n            }\r\n            else if (getTotalSupply() > 122630 gwei && getTotalSupply() <= 122995 gwei) { //halvening 6\r\n               \r\n               reward =  0.25 gwei;\r\n            }\r\n            else if (getTotalSupply() > 122995 gwei && getTotalSupply() <= 123177.5 gwei) { //halvening 7\r\n               \r\n               reward =  0.125 gwei;\r\n            }\r\n            else if (getTotalSupply() > 123177.5 gwei) { //halvening 8\r\n               \r\n               reward =  0.0625 gwei;\r\n            }\r\n            else {\r\n\r\n               reward =  0 gwei;\r\n            }\r\n            \r\n            return reward;\r\n        }\r\n\r\n    \r\n    \r\n    \r\n    /* Calculates the Daily Reward of the of a particular stake\r\n    *\r\n     */\r\n    function calculateDailyStakeReward(uint stake_) public view returns (uint) {\r\n        uint reward = getStakeAmount(stake_).mul(getStakePercentageReward(_staking[_msgSender()][stake_].stakeType));\r\n        return reward.div(getTotalStakedAmount(_staking[_msgSender()][stake_].stakeType));\r\n    }\r\n    \r\n    \r\n            //WITHDRAWALS\r\n    /* Withdraw the staked reward delegated\r\n    *\r\n     */\r\n    function withdrawStakeReward(uint stake_) external {\r\n        require(isStakeLocked(stake_), \"HaggleX Token: Withdrawal no longer available, you can only Unstake now!\");\r\n        require(block.timestamp >= _staking[_msgSender()][stake_].lastWithdrawTime + 24 hours, \"Hagglex Token: Not yet time to withdraw reward\");\r\n        _staking[_msgSender()][stake_].noOfWithdrawals++;\r\n        _staking[_msgSender()][stake_].lastWithdrawTime = block.timestamp;\r\n        uint _amount = calculateDailyStakeReward(stake_);\r\n        _mint(_msgSender(), _amount);    \r\n    }\r\n    \r\n    \r\n    //tracks the last time a withdrawal was made on the other rewards\r\n    uint private lastOtherRewardWithdrawalTime = deploymentTime + 8 weeks;\r\n    \r\n    function withdrawOtherRewards() external onlyOwner{\r\n        require(block.timestamp >= lastOtherRewardWithdrawalTime + 24 hours, \"HaggleX Token: Not yet time to withdraw Leadership Board reward\");\r\n        lastOtherRewardWithdrawalTime = block.timestamp;\r\n        _mint(DEVELOPMENT, getDevelopmentPercentageReward());\r\n        _mint(UNIVERSAL_BASIC_INCOME, getUBIPercentageReward()); \r\n        _mint(LEADERSHIP_BOARD, getLeadershipBoardPercentageReward());   \r\n    }\r\n    \r\n    \r\n     /* Stake\r\n     *\r\n     */\r\n    function stake(uint _amount, uint stakeType_) external {\r\n        _burn(_msgSender(), _amount);\r\n        stakedSupply += _amount;\r\n        Stake memory temp;\r\n        temp.amount = _amount;\r\n        temp.startTime = block.timestamp;\r\n        temp.stakeType = stakeType_;    \r\n        temp.lastWithdrawTime = block.timestamp;\r\n        temp.noOfWithdrawals = 0;\r\n        temp.stakeActive = true;\r\n        _stakesCount[_msgSender()]++;\r\n        _staking[_msgSender()][_stakesCount[_msgSender()]] = temp;\r\n        _stakingOptions[stakeType_].totalStaked += _amount;\r\n        emit staked(_msgSender(), _amount, _stakingOptions[stakeType_].lockedTime);\r\n    }\r\n    \r\n    \r\n    \r\n    /* Unstake previous stake, mints back the original tokens,\r\n     * sends mint function call to reward contract to mint the\r\n     * reward to the sender address.\r\n     */\r\n    function unstake(uint stake_) external {\r\n        require(!isStakeLocked(stake_), \"HaggleX Token:Stake still locked!\");\r\n        uint _amount = _staking[_msgSender()][stake_].amount;\r\n        _mint(_msgSender(), _amount);\r\n        stakedSupply -= _amount;\r\n        _stakingOptions[_staking[_msgSender()][stake_].stakeType].totalStaked -= _amount;\r\n        _staking[_msgSender()][stake_].stakeActive = false;        \r\n        emit unstaked(_msgSender(), _amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTime\",\"type\":\"uint256\"}],\"name\":\"staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADVISORS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AIRGRAB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHARITY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE_INVESTORS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE_TEAM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEVELOPMENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDING_STAFF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEADERSHIP_BOARD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIVERSAL_BASIC_INCOME\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"calculateDailyStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHalvedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getLastWithdrawalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyFullBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getNoOfWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getRemainingLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakes\",\"outputs\":[{\"internalType\":\"uint256[3][]\",\"name\":\"\",\"type\":\"uint256[3][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeType_\",\"type\":\"uint256\"}],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"mintToMultipleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CORE_TEAM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ADVISORS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CORE_INVESTORS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RESERVE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CHARITY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FOUNDING_STAFF\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_AIRGRAB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ICO\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"UBI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DEV\",\"type\":\"address\"}],\"name\":\"set_LB_UBI_DEV_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOtherRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"withdrawStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HaggleXToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f2210444191dd02f6d1a63c42078d0fc9132562f604013b2ecaaad812f9e16d1"}