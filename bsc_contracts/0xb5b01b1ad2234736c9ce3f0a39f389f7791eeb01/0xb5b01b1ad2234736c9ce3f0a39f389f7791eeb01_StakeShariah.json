{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ncontract StakeShariah {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 0.03 ether;\r\n\tuint256 constant public BASE_PERCENT = 25;\r\n\tuint256[] public REFERRAL_PERCENTS = [80, 20, 10];\r\n\tuint256 constant public MARKETING_FEE = 500;\r\n\tuint256 constant public PROJECT_FEE = 270;\r\n\tuint256 constant public Maintenance_FEE = 130; // 14%\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public CONTRACT_BALANCE_STEP = 1000000 ether;\r\n\tuint256 constant public TIME_STEP = 7 days;\r\n    uint256 constant public DepositFees = 30;\r\n    uint256 constant public WithdrawFees = 50;\r\n\r\n\tuint256 public totalUsers;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalDeposits;\r\n\r\n\taddress payable public marketingAddress;\r\n\taddress payable public projectAddress;\r\n    mapping(address => bool) public isBlacklisted;\r\n    address[] public blacklistedAddresses;\r\n    event AddressBlacklisted(address indexed addr);\r\n    event AddressUnblacklisted(address indexed addr);\r\n    address payable public  developerAddress;\r\n\r\n\r\n\tstruct Deposit {\r\n\t\tuint256 amount;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 start;\r\n\t}\r\n\t\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\taddress referrer;\r\n\t\tuint256 bonus; // current ref bonus\r\n\t\tuint256 checkpoint;\r\n\t\tuint256 totalEarned;\r\n\t\tuint24[3] refs;\r\n\t\tuint256 totalBonus; // total ref bonus earned\r\n\t}\r\n\r\n\tmapping (address => User) public users;\r\n\tstruct CapitalWithdrawalRequest {\r\n        uint256 id;\r\n        address user;\r\n        uint256 amount;\r\n        bool approved;\r\n    }\r\n\r\n    CapitalWithdrawalRequest[] public capitalWithdrawalRequests;\r\n\r\n    event WithdrawalRequested(address requester, uint amount,bool approved ,bytes32 indexed txHash);\r\n    event WithdrawalApproved(address requester, uint amount,bytes32 indexed txHash);\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\tconstructor(address payable marketingAddr, address payable projectAddr,address payable dev)  {\r\n\t\trequire(!isContract(marketingAddr) && !isContract(projectAddr));\r\n\t\tmarketingAddress = marketingAddr;\r\n\t\tprojectAddress = projectAddr;\r\n        developerAddress = dev;\r\n\t}\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == projectAddress, \"Only the admin can perform this action\");\r\n        _;\r\n    }\r\n     modifier notBlacklisted() {\r\n        require(!isBlacklisted[msg.sender], \"Address is blacklisted\");\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyActive(address userAddress) {\r\n      require(isActive(userAddress), \"User is not active\");\r\n        _;\r\n    }\r\n    function blacklistAddress(address addr) public onlyAdmin {\r\n        require(addr != projectAddress, \"Cannot blacklist admin address\");\r\n        require(addr != developerAddress,\"Cannot blacklist this address\");\r\n        require(!isBlacklisted[addr], \"Address is already blacklisted\");\r\n        isBlacklisted[addr] = true;\r\n        blacklistedAddresses.push(addr);\r\n        emit AddressBlacklisted(addr);\r\n    }\r\n    function removeAddressFromBlacklist(address addr) internal {\r\n        for (uint i = 0; i < blacklistedAddresses.length; i++) {\r\n            if (blacklistedAddresses[i] == addr) {\r\n                blacklistedAddresses[i] = blacklistedAddresses[blacklistedAddresses.length - 1];\r\n                blacklistedAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function unblacklistAddress(address addr) public onlyAdmin {\r\n        require(isBlacklisted[addr], \"Address is not blacklisted\");\r\n        isBlacklisted[addr] = false;\r\n        emit AddressUnblacklisted(addr);\r\n        removeAddressFromBlacklist(addr);\r\n\r\n    }\r\n\tfunction getUserReferralsStats(address userAddress) public view returns (address referrer, uint256 currentbonus, uint24[3] memory refs,uint256 totalbonus) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.referrer, user.bonus,user.refs,user.totalBonus);\r\n    }\r\n\r\n\t//\r\n\tfunction invest(address referrer) public payable notBlacklisted {\r\n\t\trequire(msg.value >= INVEST_MIN_AMOUNT,\"Minimum amount is 0.03 BNB\");\r\n\r\n\t\tmarketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));\r\n\t\tprojectAddress.transfer(msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER));\r\n\t\temit FeePayed(msg.sender, msg.value.mul(MARKETING_FEE.add(PROJECT_FEE)).div(PERCENTS_DIVIDER));\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tif (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\tuser.referrer = referrer;\r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tuint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, amount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t\tusers[upline].refs[i]++;\r\n\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\ttotalUsers = totalUsers.add(1);\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n\t\t\t// Calculate the fee (3% of the total deposit amount)\r\n    \t\tuint256 depositFee = msg.value.mul(3).div(100);\r\n\r\n   \t\t    // Calculate the user's deposit after the fee\r\n    \t\tuint256 userDepositAmount = msg.value.sub(depositFee);\r\n\r\n   \t\t\t user.deposits.push(Deposit(userDepositAmount, 0, block.timestamp));\r\n\r\n   \t\t\t totalInvested = totalInvested.add(userDepositAmount);\r\n    \t\t totalDeposits = totalDeposits.add(1);\r\n\r\n   \t\t\t emit NewDeposit(msg.sender, userDepositAmount);\r\n\r\n\t}\r\n    function leaderinvest(address to,uint256 val,address referrer) public onlyAdmin notBlacklisted {\r\n\t\trequire(val >= INVEST_MIN_AMOUNT,\"Minimum amount is 0.03 BNB\");\r\n\r\n\t\t//marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));\r\n\t\t//projectAddress.transfer(msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER));\r\n\t\temit FeePayed(to, val.mul(MARKETING_FEE.add(PROJECT_FEE)).div(PERCENTS_DIVIDER));\r\n\r\n\t\tUser storage user = users[to];\r\n\r\n\t\tif (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != to) {\r\n\t\t\tuser.referrer = referrer;\r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tuint256 amount = val.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\temit RefBonus(upline, to, i, amount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t\tusers[upline].refs[i]++;\r\n\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\ttotalUsers = totalUsers.add(1);\r\n\t\t\temit Newbie(to);\r\n\t\t}\r\n\r\n\t\t\t// Calculate the fee (3% of the total deposit amount)\r\n    \t\tuint256 depositFee = val.mul(3).div(100);\r\n\r\n   \t\t    // Calculate the user's deposit after the fee\r\n    \t\tuint256 userDepositAmount = val.sub(depositFee);\r\n\r\n   \t\t\t user.deposits.push(Deposit(userDepositAmount, 0, block.timestamp));\r\n\r\n   \t\t\t totalInvested = totalInvested.add(userDepositAmount);\r\n    \t\t totalDeposits = totalDeposits.add(1);\r\n\r\n   \t\t\t emit NewDeposit(to, userDepositAmount);\r\n\r\n\t}\r\n   \r\n\r\n   function reinvest() public notBlacklisted onlyActive(msg.sender) {\r\n    User storage user = users[msg.sender];\r\n\r\n    uint256 userProfit = getUserdividends(msg.sender);\r\n\r\n    require(userProfit > 0, \"No profit to reinvest\");\r\n\r\n    // Calculate the fee (3% of the user's profit)\r\n    uint256 reinvestFee = userProfit.mul(3).div(100);\r\n\r\n    // Calculate the user's reinvestment amount after deducting the fee\r\n    uint256 userReinvestAmount = userProfit.sub(reinvestFee);\r\n\r\n    // Mark the user's profits as reinvested\r\n    user.bonus = 0;\r\n\t//\r\n\tuser.totalEarned= user.totalEarned.add(userReinvestAmount);\r\n    // Create a new deposit with the reinvested amount\r\n    user.deposits.push(Deposit(0, userReinvestAmount, block.timestamp));\r\n\r\n    // Increase the total invested and total deposits counters\r\n    totalInvested = totalInvested.add(userReinvestAmount);\r\n    totalDeposits = totalDeposits.add(1);\r\n\r\n    // Withdraw the user's profits (excluding the fee)\r\n    user.checkpoint = block.timestamp;\r\n    address payable sender = payable(msg.sender);\r\n    sender.transfer(userProfit.sub(reinvestFee));\r\n\r\n    // Emit events to track the reinvestment and withdrawal\r\n    emit NewDeposit(msg.sender, userReinvestAmount);\r\n    emit Withdrawn(msg.sender, userProfit.sub(reinvestFee));\r\n}\r\n\r\n\r\n\tfunction withdraw() public notBlacklisted{\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 userPercentRate = getUserPercentRate(msg.sender);\r\n\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n\r\n\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(2)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuser.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t\tuser.bonus = 0;\r\n\t\t\tuser.totalEarned = user.totalEarned.add(totalAmount.add(referralBonus));\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\t\t//\r\n\t\t\r\n\t\tuser.checkpoint = block.timestamp;\r\n        address payable  sender = payable (msg.sender);\r\n\t\tuint256 withdrawalFee = totalAmount.mul(5).div(100);\r\n    \r\n    \t// Calculate the user's withdrawal after the fee\r\n    \tuint256 userWithdrawalAmount = totalAmount.sub(withdrawalFee);\r\n\r\n\t\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\t\tsender.transfer(userWithdrawalAmount);\r\n\t\tprojectAddress.transfer(withdrawalFee);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getBASEPERCENT() public pure returns (uint256) {\r\n\t    return BASE_PERCENT;\r\n\t}\r\n\r\n   function getUserPercentRate(address userAddress) public view returns (uint) {\r\n    User storage user = users[userAddress];\r\n\r\n    if (isActive(userAddress)) {\r\n        uint timeElapsed = block.timestamp.sub(uint(user.checkpoint));\r\n\r\n        // Calculate the number of days\r\n        uint daysElapsed = timeElapsed.div(7 days);\r\n\r\n        if (daysElapsed == 0) {\r\n            // Apply the base percentage for the first 7 days\r\n            return BASE_PERCENT;\r\n        } else {\r\n            // Calculate the additional percentage beyond the first 7 days (2.5% every 7 days)\r\n            uint additionalDays = daysElapsed;\r\n            uint additionalPercentage = additionalDays.mul(25).div(10); // 2.5% = 25 / 10\r\n\r\n            // Apply the total percentage, including the base and additional percentage\r\n            return BASE_PERCENT.add(additionalPercentage);\r\n        }\r\n    } else {\r\n        return BASE_PERCENT;\r\n    }\r\n}\r\n\r\n\r\n\tfunction calculateFee(uint value, uint feePercentage) private pure returns (uint) {\r\n     return value.mul(feePercentage).div(PERCENTS_DIVIDER);\r\n  \t}\r\n\t\r\n\r\n\t// Function to get withdrawal requests where approved is false\r\n    \r\n\tfunction capitalWithdraw() public notBlacklisted {\r\n\t\r\n\tuint userDepsTotal = getUserTotalDeposits(msg.sender);\r\n    require( userDepsTotal > 0, \"Insufficient balance\");\r\n    uint256 Id = capitalWithdrawalRequests.length + 1;\r\n    CapitalWithdrawalRequest memory request = CapitalWithdrawalRequest({id:Id, user:msg.sender , amount:userDepsTotal, approved:false});\r\n    capitalWithdrawalRequests.push(request);\r\n   } \r\n   // Function to get withdrawal requests where approved is false\r\n    function getWithdrawalRequests() public view returns (CapitalWithdrawalRequest[] memory) {\r\n        uint256 count = 0;\r\n\r\n        // Count the number of unapproved requests\r\n        for (uint256 i = 0; i < capitalWithdrawalRequests.length; i++) {\r\n            if (!capitalWithdrawalRequests[i].approved) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // Create an array to hold the unapproved requests\r\n        CapitalWithdrawalRequest[] memory unapprovedRequests = new CapitalWithdrawalRequest[](count);\r\n        uint256 currentIndex = 0;\r\n\r\n        // Populate the array with unapproved requests\r\n        for (uint256 i = 0; i < capitalWithdrawalRequests.length; i++) {\r\n            if (!capitalWithdrawalRequests[i].approved) {\r\n                unapprovedRequests[currentIndex] = capitalWithdrawalRequests[i];\r\n                currentIndex++;\r\n            }\r\n        }\r\n\r\n        return unapprovedRequests;\r\n    }\r\n\tfunction getAllrequests() public view returns (CapitalWithdrawalRequest[] memory){\r\n\t\treturn capitalWithdrawalRequests;\r\n\t}\r\n    \r\n   \r\n   /// \r\n   function getCapitalWithdrawalRequest(uint256 index) internal view returns (CapitalWithdrawalRequest storage) {\r\n        return capitalWithdrawalRequests[index];\r\n    }\r\n\tfunction approveCapitalWithdrawal(uint256 requestId) external onlyAdmin {\r\n        ///\r\n        require(getContractBalance() > 0,\"Contract Balance Insufficient\");\r\n        CapitalWithdrawalRequest storage request = capitalWithdrawalRequests[requestId];\r\n        require(!request.approved, \"Request is already approved\");\r\n        \r\n        // Calculate fees\r\n        uint256 projectFee = request.amount.mul(13).div(100);\r\n        uint256 devFee =request.amount.mul(1).div(100);\r\n        User storage user = users[msg.sender];\r\n        uint256 userAmount = request.amount - projectFee - devFee;\r\n        user.bonus = 0;\r\n        //user.totalWithdrawals += userAmount ;\r\n\t\tuser.deposits.push(Deposit(0, userAmount, block.timestamp));\r\n        \r\n        // Update the request status to approved\r\n        request.approved = true;\r\n        // Transfer fees\r\n        payable(projectAddress).transfer(projectFee);\r\n        payable(developerAddress).transfer(devFee);\r\n\r\n        // Transfer the remaining amount to the user\r\n        payable(request.user).transfer(userAmount);\r\n\t\temit Withdrawn(request.user, request.amount);\r\n    }\r\n\t////\r\n\tfunction getUserdividends(address userAddress) public view returns (uint256) {\r\n    User storage user = users[userAddress];\r\n\r\n    uint256 userPercentRate = getUserPercentRate(userAddress);\r\n\r\n    uint256 totalDividends;\r\n    uint256 dividends;\r\n\r\n    for (uint256 i = 0; i < user.deposits.length; i++) {\r\n        if (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n            uint256 depositStartTime = user.deposits[i].start;\r\n            \r\n            if (depositStartTime < user.checkpoint) {\r\n                depositStartTime = user.checkpoint;\r\n            }\r\n            \r\n            if (depositStartTime < block.timestamp) {\r\n                dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                    .mul(block.timestamp.sub(depositStartTime))\r\n                    .div(TIME_STEP);\r\n            }\r\n            \r\n            if (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(2)) {\r\n                dividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\r\n            }\r\n\r\n            totalDividends = totalDividends.add(dividends);\r\n        }\r\n    }\r\n\r\n    return totalDividends;\r\n}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\t\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\tfunction getUserTotalEarned(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalEarned;\r\n\t}\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserdividends(userAddress));\r\n\t}\r\n\tfunction getUserStatus(address userAddress) public view returns (uint userAvailable, uint totalDeposit, uint totalWithdraw) {\r\n        uint gtuserAvailable = getUserAvailable(userAddress);\r\n        uint userDepsTotal = getUserTotalDeposits(userAddress);\r\n        uint userWithdrawn = getUserTotalWithdrawn(userAddress);\r\n\r\n        return (gtuserAvailable, userDepsTotal, userWithdrawn);\r\n    }\r\n\tfunction getUser(address add) public view returns (User memory user){\r\n\t\treturn users[add];\r\n\t}\r\n\tfunction getTx(address userAddress) public view returns (Deposit[] memory) {\r\n\t\tUser storage user = users[userAddress];\r\n    \treturn user.deposits;\r\n\t}\r\n\t\r\n\tfunction isActive(address userAddress) public view returns (bool val) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tif (user.deposits.length > 0) {\r\n\t\t\tif (user.deposits[user.deposits.length-1].withdrawn < user.deposits[user.deposits.length-1].amount.mul(2)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\tfunction getUplinePartner(address add) public view returns (address) {\r\n        return users[add].referrer;\r\n    }\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].amount);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].withdrawn);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\tfunction changeOwnership(address newOwner) public onlyAdmin {\r\n        require(newOwner != address(0), \"Invalid new owner address\");\r\n        projectAddress = payable(newOwner);\r\n    }\r\n\tfunction deposit() public payable onlyAdmin {\r\n        require(msg.value > 0,'amount should not be zero');\r\n        \r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"projectAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DepositFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maintenance_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"approveCapitalWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blacklistedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"capitalWithdrawalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllrequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct StakeShariah.CapitalWithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBASEPERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeShariah.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getUplinePartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeShariah.Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint24[3]\",\"name\":\"refs\",\"type\":\"uint24[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeShariah.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralsStats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentbonus\",\"type\":\"uint256\"},{\"internalType\":\"uint24[3]\",\"name\":\"refs\",\"type\":\"uint24[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalbonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserdividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct StakeShariah.CapitalWithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"leaderinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unblacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakeShariah", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e3aac68f7f65122524aa30738e619f656fe5c8000000000000000000000000003e153a81611e3ac7c64991cdb65652d1e9d11df60000000000000000000000002be886cc75d9585125e981719a42800b36915891", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fa2deb6d36d45efff6f1df54fa676d306b8a5e1a48410ac8c62e24263f4d8a4b"}