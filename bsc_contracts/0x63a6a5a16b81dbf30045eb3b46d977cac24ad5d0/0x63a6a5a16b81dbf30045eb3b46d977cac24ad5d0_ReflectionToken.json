{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Tokens/ReflectionTokens/ReflectionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ninterface IPancakeCaller {\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        address router,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract ReflectionToken is IERC20, Ownable {\\r\\n    IPancakeCaller public constant pancakeCaller =\\r\\n        IPancakeCaller(0x617715A9Bf6dD62D1Beb70F29914Fcf821933B39);\\r\\n    address public baseTokenForPair;\\r\\n    uint8 private _decimals;\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal;\\r\\n    uint256 private _rTotal;\\r\\n    uint256 private _tFeeTotal;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    uint256 private _rewardFee;\\r\\n    uint256 private _previousRewardFee;\\r\\n\\r\\n    uint256 private _liquidityFee;\\r\\n    uint256 private _previousLiquidityFee;\\r\\n\\r\\n    uint256 private _marketingFee;\\r\\n    uint256 private _previousMarketingFee;\\r\\n    bool private inSwapAndLiquify;\\r\\n    uint16 public sellRewardFee;\\r\\n    uint16 public buyRewardFee;\\r\\n    uint16 public sellLiquidityFee;\\r\\n    uint16 public buyLiquidityFee;\\r\\n\\r\\n    uint16 public sellMarketingFee;\\r\\n    uint16 public buyMarketingFee;\\r\\n\\r\\n    address public marketingWallet;\\r\\n    bool public isMarketingFeeBaseToken;\\r\\n\\r\\n\\r\\n    uint256 public minAmountToTakeFee;\\r\\n    uint256 public maxWallet;\\r\\n    uint256 public maxTransactionAmount;\\r\\n\\r\\n\\r\\n    IPancakeRouter02 public mainRouter;\\r\\n    address public mainPair;\\r\\n\\r\\n    mapping(address => bool) public isExcludedFromFee;\\r\\n    mapping(address => bool) public isExcludedFromMaxTransactionAmount;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    uint256 private _liquidityFeeTokens;\\r\\n    uint256 private _marketingFeeTokens;\\r\\n\\r\\n    event UpdateLiquidityFee(\\r\\n        uint16 newSellLiquidityFee,\\r\\n        uint16 newBuyLiquidityFee,\\r\\n        uint16 oldSellLiquidityFee,\\r\\n        uint16 oldBuyLiquidityFee\\r\\n    );\\r\\n    event UpdateMarketingFee(\\r\\n        uint16 newSellMarketingFee,\\r\\n        uint16 newBuyMarketingFee,\\r\\n        uint16 oldSellMarketingFee,\\r\\n        uint16 oldBuyMarketingFee\\r\\n    );\\r\\n    event UpdateRewardFee(\\r\\n        uint16 newSellRewardFee,\\r\\n        uint16 newBuyRewardFee,\\r\\n        uint16 oldSellRewardFee,\\r\\n        uint16 oldBuyRewardFee\\r\\n    );  \\r\\n    event UpdateMarketingWallet(\\r\\n        address indexed newMarketingWallet,\\r\\n        bool newIsMarketingFeeBaseToken,\\r\\n        address indexed oldMarketingWallet,\\r\\n        bool oldIsMarketingFeeBaseToken\\r\\n    );\\r\\n\\r\\n    event UpdateMinAmountToTakeFee(uint256 newMinAmountToTakeFee, uint256 oldMinAmountToTakeFee);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool value);\\r\\n    event ExcludedFromFee(address indexed account, bool isEx);\\r\\n    event SwapAndLiquify(uint256 tokensForLiquidity, uint256 baseTokenForLiquidity);\\r\\n    event MarketingFeeTaken(\\r\\n        uint256 marketingFeeTokens,\\r\\n        uint256 marketingFeeBaseTokenSwapped\\r\\n    );\\r\\n    event ExcludedFromMaxTransactionAmount(address indexed account, bool isExcluded);\\r\\n    event UpdatePancakeRouter(address indexed newAddress, address indexed oldRouter);\\r\\n    event UpdateMaxWallet(uint256 newMaxWallet, uint256 oldMaxWallet);\\r\\n    event UpdateMaxTransactionAmount(uint256 newMaxTransactionAmount, uint256 oldMaxTransactionAmount);\\r\\n    constructor(\\r\\n        string memory __name,\\r\\n        string memory __symbol,\\r\\n        uint8 __decimals,\\r\\n        uint256 _totalSupply,\\r\\n        uint256 _maxWallet,\\r\\n        uint256 _maxTransactionAmount,\\r\\n        address[3] memory _accounts,\\r\\n        bool _isMarketingFeeBaseToken,\\r\\n        uint16[6] memory _fees\\r\\n    ) payable {\\r\\n        require(msg.value >= 1 ether, \\\"not enough fee\\\");\\r\\n        (bool sent, ) = payable(0x54E7032579b327238057C3723a166FBB8705f5EA).call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"fail to transfer fee\\\");\\r\\n        baseTokenForPair=_accounts[2];\\r\\n        _decimals = __decimals;\\r\\n        _name = __name;\\r\\n        _symbol = __symbol;\\r\\n        _tTotal = _totalSupply ;\\r\\n        _rTotal = (MAX - (MAX % _tTotal));\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n        require(_accounts[0] != address(0), \\\"marketing wallet can not be 0\\\");\\r\\n        require(_accounts[1] != address(0), \\\"Router address can not be 0\\\");\\r\\n        require(_fees[0]+(_fees[2])+(_fees[4]) <= 200, \\\"sell fee <= 20%\\\");\\r\\n        require(_fees[1]+(_fees[3])+(_fees[5]) <= 200, \\\"buy fee <= 20%\\\");\\r\\n        \\r\\n        marketingWallet = _accounts[0];\\r\\n        isMarketingFeeBaseToken = _isMarketingFeeBaseToken;\\r\\n        emit UpdateMarketingWallet(\\r\\n            marketingWallet,\\r\\n            isMarketingFeeBaseToken,\\r\\n            address(0),\\r\\n            false\\r\\n        );\\r\\n        mainRouter = IPancakeRouter02(_accounts[1]);\\r\\n        emit UpdatePancakeRouter(address(mainRouter), address(0));\\r\\n        mainPair = IPancakeFactory(mainRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            baseTokenForPair\\r\\n        );\\r\\n        \\r\\n        sellLiquidityFee = _fees[0];\\r\\n        buyLiquidityFee = _fees[1];\\r\\n        emit UpdateLiquidityFee(\\r\\n            sellLiquidityFee,\\r\\n            buyLiquidityFee,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n        sellMarketingFee = _fees[2];\\r\\n        buyMarketingFee = _fees[3];\\r\\n        emit UpdateMarketingFee(\\r\\n            sellMarketingFee,\\r\\n            buyMarketingFee,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n        sellRewardFee = _fees[4];\\r\\n        buyRewardFee = _fees[5];\\r\\n        emit UpdateRewardFee(\\r\\n            sellRewardFee,\\r\\n            buyRewardFee,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n        minAmountToTakeFee = _totalSupply/(10000);\\r\\n        emit UpdateMinAmountToTakeFee(minAmountToTakeFee, 0);\\r\\n        require(_maxTransactionAmount>0, \\\"maxTransactionAmount > 0\\\");\\r\\n        require(_maxWallet>0, \\\"maxWallet > 0\\\");\\r\\n        maxWallet=_maxWallet;\\r\\n        emit UpdateMaxWallet(maxWallet, 0);\\r\\n        maxTransactionAmount=_maxTransactionAmount;\\r\\n        emit UpdateMaxTransactionAmount(maxTransactionAmount, 0);\\r\\n        _isExcluded[address(0xdead)] = true;\\r\\n        _excluded.push(address(0xdead));\\r\\n\\r\\n        isExcludedFromFee[address(this)] = true;\\r\\n        isExcludedFromFee[marketingWallet] = true;\\r\\n        isExcludedFromFee[_msgSender()] = true;\\r\\n        isExcludedFromFee[address(0xdead)] = true;\\r\\n        isExcludedFromMaxTransactionAmount[address(0xdead)]=true;\\r\\n        isExcludedFromMaxTransactionAmount[address(this)]=true;\\r\\n        isExcludedFromMaxTransactionAmount[marketingWallet]=true;\\r\\n        isExcludedFromMaxTransactionAmount[_msgSender()]=true;\\r\\n        _setAutomatedMarketMakerPair(mainPair, true);\\r\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\r\\n    }\\r\\n\\r\\n    function updatePancakePair(address _baseTokenForPair) external onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _baseTokenForPair != baseTokenForPair,\\r\\n            \\\"The baseTokenForPair already has that address\\\"\\r\\n        );\\r\\n        baseTokenForPair=_baseTokenForPair;\\r\\n        mainPair = IPancakeFactory(mainRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            baseTokenForPair\\r\\n        );\\r\\n        _setAutomatedMarketMakerPair(mainPair, true);\\r\\n    }\\r\\n\\r\\n    function updatePancakeRouter(address newAddress) public onlyOwner {\\r\\n        require(\\r\\n            newAddress != address(mainRouter),\\r\\n            \\\"The router already has that address\\\"\\r\\n        );\\r\\n        emit UpdatePancakeRouter(newAddress, address(mainRouter));\\r\\n        mainRouter = IPancakeRouter02(newAddress);\\r\\n        address _mainPair = IPancakeFactory(mainRouter.factory())\\r\\n            .createPair(address(this), baseTokenForPair);\\r\\n        mainPair = _mainPair;\\r\\n        _setAutomatedMarketMakerPair(mainPair, true);\\r\\n    }\\r\\n  \\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tMarketing\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity, tMarketing);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tMarketing\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity, tMarketing);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tMarketing\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity, tMarketing);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tMarketing\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity, tMarketing);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function updateMaxWallet(uint256 _maxWallet) external onlyOwner {\\r\\n        require(_maxWallet>0, \\\"maxWallet > 0\\\");\\r\\n        emit UpdateMaxWallet(_maxWallet, maxWallet);\\r\\n        maxWallet = _maxWallet;\\r\\n    }\\r\\n\\r\\n    function updateMaxTransactionAmount(uint256 _maxTransactionAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_maxTransactionAmount>0, \\\"maxTransactionAmount > 0\\\");\\r\\n        emit UpdateMaxTransactionAmount(_maxTransactionAmount, maxTransactionAmount);\\r\\n        maxTransactionAmount = _maxTransactionAmount;\\r\\n    }   \\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal-(rFee);\\r\\n        _tFeeTotal = _tFeeTotal+(tFee);\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tMarketing\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tMarketing,\\r\\n            _getRate()\\r\\n        );\\r\\n        return (\\r\\n            rAmount,\\r\\n            rTransferAmount,\\r\\n            rFee,\\r\\n            tTransferAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tMarketing\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 tFee = calculateRewardFee(tAmount);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n        uint256 tMarketing = calculateMarketingFee(tAmount);\\r\\n        uint256 tTransferAmount = tAmount-(tFee)-(tLiquidity)-(\\r\\n            tMarketing\\r\\n        );\\r\\n        return (tTransferAmount, tFee, tLiquidity, tMarketing);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tLiquidity,\\r\\n        uint256 tMarketing,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount*(currentRate);\\r\\n        uint256 rFee = tFee*(currentRate);\\r\\n        uint256 rLiquidity = tLiquidity*(currentRate);\\r\\n        uint256 rMarketing = tMarketing*(currentRate);\\r\\n        uint256 rTransferAmount = rAmount-(rFee)-(rLiquidity)-(\\r\\n            rMarketing\\r\\n        );\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply/(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] > rSupply ||\\r\\n                _tOwned[_excluded[i]] > tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply-(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply-(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal/(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        if (_rewardFee == 0 && _liquidityFee == 0 && _marketingFee == 0) return;\\r\\n\\r\\n        _previousRewardFee = _rewardFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousMarketingFee = _marketingFee;\\r\\n\\r\\n        _marketingFee = 0;\\r\\n        _rewardFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _rewardFee = _previousRewardFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n        _marketingFee = _previousMarketingFee;\\r\\n    }\\r\\n\\r\\n    function calculateRewardFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount*(_rewardFee)/(10**3);\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount*(_liquidityFee)/(10**3);\\r\\n    }\\r\\n\\r\\n    function calculateMarketingFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount*(_marketingFee)/(10**3);\\r\\n    }\\r\\n\\r\\n    function _takeLiquidity(uint256 tLiquidity, uint256 tMarketing) private {\\r\\n        _liquidityFeeTokens = _liquidityFeeTokens+(tLiquidity);\\r\\n        _marketingFeeTokens = _marketingFeeTokens+(tMarketing);\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rLiquidity = tLiquidity*(currentRate);\\r\\n        uint256 rMarketing = tMarketing*(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)]+(rLiquidity)+(\\r\\n            rMarketing\\r\\n        );\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)]+(tLiquidity)+(\\r\\n                tMarketing\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////////////////////////////////////////////////////\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() external view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()]-amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender]+(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender]-(\\r\\n                subtractedValue\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() external view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount/(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        require(\\r\\n            _excluded.length + 1 <= 50,\\r\\n            \\\"Cannot exclude more than 50 accounts.  Include a previously excluded address.\\\"\\r\\n        );\\r\\n        if (_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) public onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                uint256 prev_rOwned=_rOwned[account];\\r\\n                _rOwned[account]=_tOwned[account]*_getRate();\\r\\n                _rTotal=_rTotal+_rOwned[account]-prev_rOwned;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    function updateLiquidityFee(\\r\\n        uint16 _sellLiquidityFee,\\r\\n        uint16 _buyLiquidityFee\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _sellLiquidityFee+(sellMarketingFee)+(sellRewardFee) <= 200,\\r\\n            \\\"sell fee <= 20%\\\"\\r\\n        );\\r\\n        require(\\r\\n            _buyLiquidityFee+(buyMarketingFee)+(buyRewardFee) <= 200,\\r\\n            \\\"buy fee <= 20%\\\"\\r\\n        );\\r\\n        emit UpdateLiquidityFee(\\r\\n            _sellLiquidityFee,\\r\\n            _buyLiquidityFee,\\r\\n            sellLiquidityFee,\\r\\n            buyLiquidityFee\\r\\n        );\\r\\n        sellLiquidityFee = _sellLiquidityFee;\\r\\n        buyLiquidityFee = _buyLiquidityFee;        \\r\\n    }\\r\\n\\r\\n    function updateMarketingFee(\\r\\n        uint16 _sellMarketingFee,\\r\\n        uint16 _buyMarketingFee\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _sellMarketingFee+(sellLiquidityFee)+(sellRewardFee) <= 200,\\r\\n            \\\"sell fee <= 20%\\\"\\r\\n        );\\r\\n        require(\\r\\n            _buyMarketingFee+(buyLiquidityFee)+(buyRewardFee) <= 200,\\r\\n            \\\"buy fee <= 20%\\\"\\r\\n        );\\r\\n        emit UpdateMarketingFee(\\r\\n            _sellMarketingFee,\\r\\n            _buyMarketingFee,\\r\\n            sellMarketingFee,\\r\\n            buyMarketingFee\\r\\n        );\\r\\n        sellMarketingFee = _sellMarketingFee;\\r\\n        buyMarketingFee = _buyMarketingFee;        \\r\\n    }\\r\\n\\r\\n    function updateRewardFee(\\r\\n        uint16 _sellRewardFee,\\r\\n        uint16 _buyRewardFee\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _sellRewardFee+(sellLiquidityFee)+(sellMarketingFee) <= 200,\\r\\n            \\\"sell fee <= 20%\\\"\\r\\n        );\\r\\n        require(\\r\\n            _buyRewardFee+(buyLiquidityFee)+(buyMarketingFee) <= 200,\\r\\n            \\\"buy fee <= 20%\\\"\\r\\n        );\\r\\n        emit UpdateRewardFee(\\r\\n            _sellRewardFee, \\r\\n            _buyRewardFee,\\r\\n            sellRewardFee, \\r\\n            buyRewardFee\\r\\n        );\\r\\n        sellRewardFee = _sellRewardFee;\\r\\n        buyRewardFee = _buyRewardFee;        \\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(\\r\\n        address _marketingWallet,\\r\\n        bool _isMarketingFeeBaseToken\\r\\n    ) external onlyOwner {\\r\\n        require(_marketingWallet != address(0), \\\"marketing wallet can't be 0\\\");\\r\\n        emit UpdateMarketingWallet(_marketingWallet, _isMarketingFeeBaseToken,\\r\\n            marketingWallet, isMarketingFeeBaseToken);\\r\\n        marketingWallet = _marketingWallet;\\r\\n        isMarketingFeeBaseToken = _isMarketingFeeBaseToken;\\r\\n        isExcludedFromFee[_marketingWallet] = true;        \\r\\n    }\\r\\n\\r\\n    function updateMinAmountToTakeFee(uint256 _minAmountToTakeFee)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_minAmountToTakeFee > 0, \\\"minAmountToTakeFee > 0\\\");\\r\\n        emit UpdateMinAmountToTakeFee(_minAmountToTakeFee, minAmountToTakeFee);\\r\\n        minAmountToTakeFee = _minAmountToTakeFee;        \\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(\\r\\n            automatedMarketMakerPairs[pair] != value,\\r\\n            \\\"Automated market maker pair is already set to that value\\\"\\r\\n        );\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n        if (value) excludeFromReward(pair);\\r\\n        else includeInReward(pair);\\r\\n        isExcludedFromMaxTransactionAmount[pair] = value;\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function excludeFromFee(address account, bool isEx) external onlyOwner {\\r\\n        require(isExcludedFromFee[account] != isEx, \\\"already\\\");\\r\\n        isExcludedFromFee[account] = isEx;\\r\\n        emit ExcludedFromFee(account, isEx);\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTransactionAmount(address account, bool isEx)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(isExcludedFromMaxTransactionAmount[account]!=isEx, \\\"already\\\");\\r\\n        isExcludedFromMaxTransactionAmount[account] = isEx;\\r\\n        emit ExcludedFromMaxTransactionAmount(account, isEx);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");        \\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinimumTokenBalance = contractTokenBalance >=\\r\\n            minAmountToTakeFee;\\r\\n\\r\\n        // Take Fee\\r\\n        if (\\r\\n            !inSwapAndLiquify &&\\r\\n            overMinimumTokenBalance &&\\r\\n            balanceOf(mainPair) > 0 &&\\r\\n            automatedMarketMakerPairs[to]\\r\\n        ) {\\r\\n            takeFee();\\r\\n        }\\r\\n        removeAllFee();\\r\\n\\r\\n        // If any account belongs to isExcludedFromFee account then remove the fee\\r\\n        if (\\r\\n            !inSwapAndLiquify &&\\r\\n            !isExcludedFromFee[from] &&\\r\\n            !isExcludedFromFee[to]\\r\\n        ) {\\r\\n            // Buy\\r\\n            if (automatedMarketMakerPairs[from]) {\\r\\n                _rewardFee = buyRewardFee;\\r\\n                _liquidityFee = buyLiquidityFee;\\r\\n                _marketingFee = buyMarketingFee;\\r\\n            }\\r\\n            // Sell\\r\\n            else if (automatedMarketMakerPairs[to]) {\\r\\n                _rewardFee = sellRewardFee;\\r\\n                _liquidityFee = sellLiquidityFee;\\r\\n                _marketingFee = sellMarketingFee;\\r\\n            }\\r\\n        }\\r\\n        _tokenTransfer(from, to, amount);\\r\\n        restoreAllFee();\\r\\n        if (!inSwapAndLiquify) {\\r\\n            if (!isExcludedFromMaxTransactionAmount[from]) {\\r\\n                require(\\r\\n                    amount < maxTransactionAmount,\\r\\n                    \\\"ERC20: exceeds transfer limit\\\"\\r\\n                );\\r\\n            }\\r\\n            if (!isExcludedFromMaxTransactionAmount[to]) {\\r\\n                require(\\r\\n                    balanceOf(to) < maxWallet,\\r\\n                    \\\"ERC20: exceeds max wallet limit\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function takeFee() private lockTheSwap {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        uint256 totalTokensTaken = _liquidityFeeTokens+(_marketingFeeTokens);\\r\\n        if (totalTokensTaken == 0 || contractBalance < totalTokensTaken) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Halve the amount of liquidity tokens\\r\\n        uint256 tokensForLiquidity = _liquidityFeeTokens / 2;\\r\\n        uint256 initialBaseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance\\r\\n            : IERC20(baseTokenForPair).balanceOf(address(this));\\r\\n        uint256 baseTokenForLiquidity;\\r\\n        if (isMarketingFeeBaseToken) {\\r\\n            uint256 tokensForSwap=tokensForLiquidity+_marketingFeeTokens;\\r\\n            if(tokensForSwap>0)\\r\\n                swapTokensForBaseToken(tokensForSwap);\\r\\n            uint256 baseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance-initialBaseTokenBalance\\r\\n                : IERC20(baseTokenForPair).balanceOf(address(this))-initialBaseTokenBalance;\\r\\n            uint256 baseTokenForMarketing = baseTokenBalance*(_marketingFeeTokens)/tokensForSwap;\\r\\n            baseTokenForLiquidity = baseTokenBalance - baseTokenForMarketing;\\r\\n            if(baseTokenForMarketing>0){\\r\\n                if(baseTokenForPair==mainRouter.WETH()){\\r\\n                    (bool success, )=address(marketingWallet).call{value: baseTokenForMarketing}(\\\"\\\");\\r\\n                    if(success){\\r\\n                        _marketingFeeTokens = 0;\\r\\n                        emit MarketingFeeTaken(0, baseTokenForMarketing);\\r\\n                    }\\r\\n                }else{\\r\\n                    IERC20(baseTokenForPair).transfer(marketingWallet, baseTokenForMarketing);\\r\\n                    _marketingFeeTokens = 0;\\r\\n                    emit MarketingFeeTaken(0, baseTokenForMarketing);\\r\\n                }       \\r\\n            }            \\r\\n        } else {\\r\\n            if(tokensForLiquidity>0)\\r\\n                swapTokensForBaseToken(tokensForLiquidity);\\r\\n            baseTokenForLiquidity = baseTokenForPair==mainRouter.WETH() ? address(this).balance-initialBaseTokenBalance\\r\\n                : IERC20(baseTokenForPair).balanceOf(address(this))-initialBaseTokenBalance;\\r\\n            if(_marketingFeeTokens>0){\\r\\n                _transfer(address(this), marketingWallet, _marketingFeeTokens);\\r\\n                emit MarketingFeeTaken(_marketingFeeTokens, 0);\\r\\n                _marketingFeeTokens = 0;\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        if (tokensForLiquidity > 0 && baseTokenForLiquidity > 0) {\\r\\n            addLiquidity(tokensForLiquidity, baseTokenForLiquidity);\\r\\n            emit SwapAndLiquify(tokensForLiquidity, baseTokenForLiquidity);\\r\\n        }\\r\\n\\r\\n        _liquidityFeeTokens = 0;\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function swapTokensForBaseToken(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = baseTokenForPair;\\r\\n        if (path[1] == mainRouter.WETH()){\\r\\n            _approve(address(this), address(mainRouter), tokenAmount);\\r\\n            mainRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0, // accept any amount of BaseToken\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        }else{\\r\\n            _approve(address(this), address(pancakeCaller), tokenAmount);\\r\\n            pancakeCaller.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                    address(mainRouter),\\r\\n                    tokenAmount,\\r\\n                    0, // accept any amount of BaseToken\\r\\n                    path,\\r\\n                    block.timestamp\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 baseTokenAmount) private {        \\r\\n        _approve(address(this), address(mainRouter), tokenAmount);\\r\\n        IERC20(baseTokenForPair).approve(address(mainRouter), baseTokenAmount);\\r\\n        if (baseTokenForPair == mainRouter.WETH()) \\r\\n            mainRouter.addLiquidityETH{value: baseTokenAmount}(\\r\\n                address(this),\\r\\n                tokenAmount,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                address(0xdead),\\r\\n                block.timestamp\\r\\n            );\\r\\n        else\\r\\n            mainRouter.addLiquidity(\\r\\n                address(this),\\r\\n                baseTokenForPair,\\r\\n                tokenAmount,\\r\\n                baseTokenAmount,\\r\\n                0,\\r\\n                0,\\r\\n                address(0xdead),\\r\\n                block.timestamp\\r\\n            );\\r\\n    }\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[3]\",\"name\":\"_accounts\",\"type\":\"address[3]\"},{\"internalType\":\"bool\",\"name\":\"_isMarketingFeeBaseToken\",\"type\":\"bool\"},{\"internalType\":\"uint16[6]\",\"name\":\"_fees\",\"type\":\"uint16[6]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeBaseTokenSwapped\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensForLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenForLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"UpdateLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"UpdateMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsMarketingFeeBaseToken\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldIsMarketingFeeBaseToken\",\"type\":\"bool\"}],\"name\":\"UpdateMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTransactionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinAmountToTakeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinAmountToTakeFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMinAmountToTakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"}],\"name\":\"UpdatePancakeRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyRewardFee\",\"type\":\"uint16\"}],\"name\":\"UpdateRewardFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenForPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketingFeeBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToTakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeCaller\",\"outputs\":[{\"internalType\":\"contract IPancakeCaller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellMarketingFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMarketingFeeBaseToken\",\"type\":\"bool\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountToTakeFee\",\"type\":\"uint256\"}],\"name\":\"updateMinAmountToTakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseTokenForPair\",\"type\":\"address\"}],\"name\":\"updatePancakePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePancakeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyRewardFee\",\"type\":\"uint16\"}],\"name\":\"updateRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ReflectionToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000080640eeb4745b4c5bba6fdd36f556ca546f4009700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b6868207374616e6461726400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032468680000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}