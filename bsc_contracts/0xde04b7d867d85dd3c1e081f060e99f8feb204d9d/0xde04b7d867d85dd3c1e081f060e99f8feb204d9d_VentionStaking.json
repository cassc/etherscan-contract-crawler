{"SourceCode": "pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n        \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ncontract VentionStaking is Ownable {\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    event RewardsTransferred(address holder, uint amount);\r\n    \r\n    // Vention Token Contract Address\r\n    address public constant tokenAddress = 0x2f053e33bd590830858161d42C67e9E8A9390019;\r\n    \r\n    // reward rate 100.00% per year\r\n    uint public constant rewardRate = 10000;\r\n    uint public constant rewardInterval = 365 days;     \r\n    \r\n    //   staking fee 1 %\r\n    uint public constant stakingFeeRate   = 100;\r\n    \r\n    // unstaking fee 2 %\r\n    uint public constant unstakingFeeRate = 200;\r\n    \r\n    // unstaking possible after 30 Days\r\n    uint public constant cliffTime = 30 days;   \r\n    \r\n    uint public totalClaimedRewards = 0;\r\n    \r\n    EnumerableSet.AddressSet private holders;\r\n    \r\n    mapping (address => uint) public depositedTokens;\r\n    mapping (address => uint) public stakingTime;\r\n    mapping (address => uint) public lastClaimedTime;\r\n    mapping (address => uint) public totalEarnedTokens;\r\n    \r\n    function updateAccount(address account) private {\r\n        uint pendingDivs = getPendingDivs(account);\r\n        if (pendingDivs > 0) {\r\n            require(Token(tokenAddress).transfer(account, pendingDivs), \"Could not transfer tokens.\");\r\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\r\n            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\r\n            emit RewardsTransferred(account, pendingDivs);\r\n        }\r\n        lastClaimedTime[account] = now;\r\n    }\r\n    \r\n    function getPendingDivs(address _holder) public view returns (uint) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0) return 0;\r\n\r\n        uint timeDiff = now.sub(lastClaimedTime[_holder]);\r\n        uint stakedAmount = depositedTokens[_holder];\r\n        \r\n        uint pendingDivs = stakedAmount\r\n                            .mul(rewardRate)\r\n                            .mul(timeDiff)\r\n                            .div(rewardInterval)\r\n                            .div(1e4);\r\n            \r\n        return pendingDivs;\r\n    }\r\n    \r\n    function getNumberOfHolders() public view returns (uint) {\r\n        return holders.length();\r\n    }\r\n    \r\n    \r\n    function deposit(uint amountToStake) public {\r\n        require(amountToStake > 0, \"Cannot deposit 0 Tokens\");\r\n        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), \"Insufficient Token Allowance\");\r\n        \r\n        updateAccount(msg.sender);\r\n        \r\n        uint fee = amountToStake.mul(stakingFeeRate).div(1e4);\r\n        uint amountAfterFee = amountToStake.sub(fee);\r\n        require(Token(tokenAddress).transfer(owner, fee), \"Could not transfer deposit fee.\");\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\r\n        \r\n        if (!holders.contains(msg.sender)) {\r\n            holders.add(msg.sender);\r\n            stakingTime[msg.sender] = now;\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint amountToWithdraw) public {\r\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \"Invalid amount to withdraw\");\r\n        \r\n        require(now.sub(stakingTime[msg.sender]) > cliffTime, \"You recently staked, please wait before withdrawing.\");\r\n        \r\n        updateAccount(msg.sender);\r\n        \r\n        uint fee = amountToWithdraw.mul(unstakingFeeRate).div(1e4);\r\n        uint amountAfterFee = amountToWithdraw.sub(fee);\r\n        \r\n        require(Token(tokenAddress).transfer(owner, fee), \"Could not transfer withdraw fee.\");\r\n        require(Token(tokenAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\r\n        \r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n        }\r\n    }\r\n    \r\n    function claimDivs() public {\r\n        updateAccount(msg.sender);\r\n    }\r\n    \r\n    \r\n    uint private constant stakingAndDaoTokens = 1000e18;   // 1,000 Vention Token will be staked by owner\r\n    \r\n    function getStakingAndDaoAmount() public view returns (uint) {\r\n        if (totalClaimedRewards >= stakingAndDaoTokens) {\r\n            return 0;\r\n        }\r\n        uint remaining = stakingAndDaoTokens.sub(totalClaimedRewards);\r\n        return remaining;\r\n    }\r\n    \r\n    // function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        if (_tokenAddr == tokenAddress) {\r\n            if (_amount > getStakingAndDaoAmount()) {\r\n                revert();\r\n            }\r\n            totalClaimedRewards = totalClaimedRewards.add(_amount);\r\n        }\r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimDivs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAndDaoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VentionStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e293814b4e9eacf670815276f2f780f949a44f8a172bf9fcef2082ded1c4cb59"}