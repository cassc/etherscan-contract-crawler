{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./MozBridge.sol\\\";\\r\\nimport \\\"./MozaicLP.sol\\\";\\r\\nimport \\\"./interfaces/IPlugin.sol\\\";\\r\\n\\r\\n/// @title  Vault\\r\\n/// @notice Vault Contract\\r\\n/// @dev    Vault Contract is responsible for accepting deposit and withdraw requests and interact with the plugins and controller.\\r\\ncontract Vault is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Used to define the config of the plugins.\\r\\n    struct PluginConfig {\\r\\n        address pluginAddr;\\r\\n        address pluginReward;\\r\\n    }\\r\\n\\r\\n    uint16 internal constant TYPE_REQUEST_SNAPSHOT = 1;\\r\\n    uint16 internal constant TYPE_REPORT_SNAPSHOT  = 2;\\r\\n    uint16 internal constant TYPE_REQUEST_SETTLE   = 3;\\r\\n    uint16 internal constant TYPE_REPORT_SETTLE    = 4;\\r\\n\\r\\n    uint16 internal constant TYPE_SNAPSHOT_RETRY        = 5;\\r\\n    uint16 internal constant TYPE_SETTLE_RETRY          = 6;\\r\\n    uint16 internal constant TYPE_REPORT_SNAPSHOT_RETRY = 7;\\r\\n    uint16 internal constant TYPE_REPORT_SETTLE_RETRY   = 8;\\r\\n\\r\\n\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @notice The mozaic bridge contract address that is used to implement cross chain operations.\\r\\n    address public mozBridge;\\r\\n\\r\\n    /// @notice The mozaic LP token contract that is used to mint LP tokens to liquidity providers.\\r\\n    address public mozLP;\\r\\n\\r\\n    /// @notice Address of master\\r\\n    address public master;\\r\\n\\r\\n    /// @notice The address of the treasury\\r\\n    address payable public treasury;\\r\\n    \\r\\n    /// @notice The chain identifier of this vault.\\r\\n    uint16 public immutable chainId;\\r\\n\\r\\n    /// @notice The total amount of satablecoin with mozaic decimal.\\r\\n    uint256 public totalCoinMD;\\r\\n\\r\\n    /// @notice The total amount of mozaic LP token.\\r\\n    uint256 public totalMLP;\\r\\n\\r\\n    /// @notice Array of tokens accepted in this vault.\\r\\n    address[] public acceptingTokens;\\r\\n\\r\\n    /// @notice Return whether a token is accepted. If token is accepted, return true.\\r\\n    mapping (address => bool) public tokenMap;\\r\\n\\r\\n    /// @notice Return the plugin config for a plugin id \\r\\n    mapping (uint8 => PluginConfig) public supportedPlugins;\\r\\n\\r\\n    /// @notice Supported plugin ids.\\r\\n    uint8[] public pluginIds;\\r\\n\\r\\n    /// @notice Return the revertLookup payload for chain id, srcAddress and nonce\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => bytes))) public revertLookup; //[chainId][srcAddress][nonce]\\r\\n\\r\\n    /// @notice The snapshot of the local vault\\r\\n    MozBridge.Snapshot public localSnapshot;\\r\\n\\r\\n    /// @notice Current updated Number\\r\\n    uint256 public updateNum;\\r\\n\\r\\n    /// @notice Mozaic token decimal.\\r\\n    uint8 public constant MOZAIC_DECIMALS = 6;\\r\\n\\r\\n    uint256 public constant SLIPPAGE = 1;\\r\\n\\r\\n    uint256 public constant BP_DENOMINATOR = 10000;\\r\\n\\r\\n    /// @notice The Address of lifi contract\\r\\n    address public constant LIFI_CONTRACT = 0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE;\\r\\n\\r\\n    /// @notice The flag to lock the vault\\r\\n    bool public lockVault;\\r\\n\\r\\n    /* ========== EVENTS =========== */\\r\\n    event Deposit (\\r\\n        address indexed depositor,\\r\\n        address indexed token,\\r\\n        uint256 amountLD\\r\\n    );\\r\\n\\r\\n    event Withdraw (\\r\\n        address indexed withdrawer,\\r\\n        address indexed token,\\r\\n        uint256 amountMLP,\\r\\n        uint256 amountLD\\r\\n    );\\r\\n\\r\\n    event TakeSnapshot(\\r\\n        uint256 totalStablecoin,\\r\\n        uint256 totalMozaicLp\\r\\n    );\\r\\n\\r\\n    event SetBridge(address mozBridge);\\r\\n\\r\\n    event SetMozaicLP(address mozLP);\\r\\n\\r\\n    event SetMaster(address master);\\r\\n\\r\\n    event SetTreasury(address payable treasury);\\r\\n    \\r\\n    event AddPlugin(\\r\\n        uint8 indexed pluginId,\\r\\n        address indexed pluginAddr,\\r\\n        address indexed pluginReward\\r\\n    );\\r\\n\\r\\n    event RemovePlugin(\\r\\n        uint8 indexed pluginId\\r\\n    );\\r\\n\\r\\n    event AddToken(address token);\\r\\n\\r\\n    event RemoveToken(address token);\\r\\n\\r\\n    event ActionExecuted(uint8 pluginId, IPlugin.ActionType actionType);\\r\\n\\r\\n    event SnapshotReported(uint16 srcChainId, bytes indexed srcAddress, uint64 nonce, MozBridge.Snapshot snapshot, uint256 updateNum);\\r\\n    \\r\\n    event SettleReported(uint16 srcChainId, bytes indexed srcAddress, uint64 nonce, uint256 updateNum);\\r\\n\\r\\n    event Revert(uint16 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\\r\\n\\r\\n    event RetryRevert(uint16 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\\r\\n\\r\\n    event ClaimReward();\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /// @notice Modifier to check if caller is the bridge.\\r\\n    modifier onlyBridge() {\\r\\n        require(msg.sender == mozBridge, \\\"Vault: Invalid bridge\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Modifier to check if caller is the master.\\r\\n    modifier onlyMaster() {\\r\\n        require(msg.sender == master, \\\"Vault: Invalid caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONFIGURATION ========== */\\r\\n    constructor(uint16 _chainId)  {\\r\\n        require(_chainId > 0, \\\"Vault: Invalid chainid\\\");\\r\\n        chainId = _chainId;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the master of the vault\\r\\n    function setMaster(address _master) public onlyOwner {\\r\\n        require(_master != address(0), \\\"Vault: Invalid address\\\");\\r\\n        master = _master;\\r\\n        emit SetMaster(_master);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the mozaic bridge of the vault.\\r\\n    /// @param  _mozBridge - The address of the bridge.\\r\\n    function setBridge(address _mozBridge) public onlyOwner {\\r\\n        require(_mozBridge != address(0) && mozBridge == address(0), \\\"Vault: Invalid address\\\");\\r\\n        mozBridge = _mozBridge;\\r\\n        emit SetBridge(_mozBridge);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the mozaic LP token contract of the vault.\\r\\n    /// @param  _mozLP - The address of the mozaic LP token contract.\\r\\n    function setMozaicLP(address _mozLP) public onlyOwner {\\r\\n        require(_mozLP != address(0) && mozLP == address(0), \\\"Vault: Invalid address\\\");\\r\\n        mozLP = _mozLP;\\r\\n        emit SetMozaicLP(_mozLP);\\r\\n    }\\r\\n    \\r\\n    /// @notice Set the treasury of the controller.\\r\\n    /// @param _treasury - The address of the treasury.\\r\\n    function setTreasury(address payable _treasury) public onlyOwner {\\r\\n        require(_treasury != address(0), \\\"Controller: Invalid address\\\");\\r\\n        treasury = _treasury;\\r\\n        emit SetTreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    /// @notice Add the plugin with it's config to the vault.\\r\\n    /// @param  _pluginId - The id of the plugin.\\r\\n    /// @param  _pluginAddr - The address of plugin.\\r\\n    /// @param  _pluginReward - The address of plugin reward token.\\r\\n    function addPlugin(uint8 _pluginId, address _pluginAddr, address _pluginReward) public onlyOwner {\\r\\n        require(_pluginId > 0, \\\"Vault: Invalid id\\\");\\r\\n        require(_pluginAddr != address(0x0), \\\"Vault: Invalid address\\\");\\r\\n        require(_pluginReward != address(0x0), \\\"Vault: Invalid address\\\");\\r\\n        for(uint256 i = 0; i < pluginIds.length; ++i) {\\r\\n            if(pluginIds[i] == _pluginId) revert(\\\"Vault: Plugin id already exists\\\");\\r\\n            if(supportedPlugins[pluginIds[i]].pluginAddr == _pluginAddr) revert(\\\"Vault: Plugin already exists\\\");\\r\\n        }\\r\\n        pluginIds.push(_pluginId);\\r\\n        supportedPlugins[_pluginId].pluginAddr = _pluginAddr;\\r\\n        supportedPlugins[_pluginId].pluginReward = _pluginReward;\\r\\n\\r\\n        emit AddPlugin(_pluginId, _pluginAddr, _pluginReward);\\r\\n    }\\r\\n\\r\\n    /// @notice Remove the plugin with it's id.\\r\\n    /// @param  _pluginId - The id of the plugin being removed.\\r\\n    function removePlugin(uint8 _pluginId) public onlyOwner {\\r\\n        require(_pluginId > 0, \\\"Vault: Invalid id\\\");\\r\\n        for(uint256 i = 0; i < pluginIds.length; ++i) {\\r\\n            if(pluginIds[i] == _pluginId) {\\r\\n                pluginIds[i] = pluginIds[pluginIds.length - 1]; \\r\\n                pluginIds.pop();\\r\\n                delete supportedPlugins[_pluginId];\\r\\n                emit RemovePlugin(_pluginId);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Vault: Plugin id doesn't exist.\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Add the token address to the list of accepted token addresses.\\r\\n    function addToken(address _token) external onlyOwner {\\r\\n        if(tokenMap[_token] == false) {\\r\\n            tokenMap[_token] = true;\\r\\n            acceptingTokens.push(_token);\\r\\n            emit AddToken(_token);\\r\\n        } else {\\r\\n            revert(\\\"Vault: Token already exists.\\\");\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @notice Remove the token address from the list of accepted token addresses.\\r\\n    function removeToken(address _token) external onlyOwner {\\r\\n        if(tokenMap[_token] == true) {\\r\\n            tokenMap[_token] = false;\\r\\n            for(uint256 i = 0; i < acceptingTokens.length; ++i) {\\r\\n                if(acceptingTokens[i] == _token) {\\r\\n                    acceptingTokens[i] = acceptingTokens[acceptingTokens.length - 1];\\r\\n                    acceptingTokens.pop();\\r\\n                    emit RemoveToken(_token);\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Vault: Non-accepted token.\\\");\\r\\n    }\\r\\n\\r\\n    function bridgeViaLifi(\\r\\n        address _srcToken,\\r\\n        uint256 _amount,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external onlyMaster {\\r\\n        require(\\r\\n            address(LIFI_CONTRACT) != address(0),\\r\\n            \\\"Lifi: zero address\\\"\\r\\n        );\\r\\n        bool isNative = (_srcToken == address(0));\\r\\n        if (!isNative) {\\r\\n            IERC20(_srcToken).safeApprove(address(LIFI_CONTRACT), 0);\\r\\n            IERC20(_srcToken).safeApprove(address(LIFI_CONTRACT), _amount);\\r\\n        }\\r\\n        (bool success,) = LIFI_CONTRACT.call{value: _value}(_data);\\r\\n        require(success, \\\"Lifi: call failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Execute actions of the certain plugin.\\r\\n    /// @param _pluginId - the destination plugin identifier\\r\\n    /// @param _actionType -  the action identifier of plugin action\\r\\n    /// @param _payload - a custom bytes payload to send to the destination contract\\r\\n    function execute(uint8 _pluginId, IPlugin.ActionType _actionType, bytes memory _payload) public onlyMaster {\\r\\n        address pluginAddress = supportedPlugins[_pluginId].pluginAddr;\\r\\n        address pluginReward = supportedPlugins[_pluginId].pluginReward;\\r\\n        require(_pluginId > 0 && pluginAddress != address(0x0) && pluginReward!= address(0x0), \\\"Vault: Invalid id\\\");\\r\\n        if(_actionType == IPlugin.ActionType.Stake) {\\r\\n            (uint256 _amountLD, address _token) = abi.decode(_payload, (uint256, address));\\r\\n            uint256 balance = IERC20(_token).balanceOf(address(this));\\r\\n            require(balance >= _amountLD, \\\"Vault: Invalid amount\\\");\\r\\n            IERC20(_token).safeApprove(pluginAddress, 0);\\r\\n            IERC20(_token).approve(pluginAddress, _amountLD);\\r\\n        } else if (_actionType == IPlugin.ActionType.SwapRemote) {\\r\\n            (uint256 _amountLD, address _token, uint16 _dstChainId, ) = abi.decode(_payload, (uint256, address, uint16, uint256));\\r\\n            IERC20(_token).safeApprove(pluginAddress, 0);\\r\\n            IERC20(_token).approve(pluginAddress, _amountLD);\\r\\n            uint256 _nativeFee =  IPlugin(pluginAddress).quoteSwapFee(_dstChainId);\\r\\n            IPlugin(pluginAddress).execute{value: _nativeFee}(_actionType, _payload);\\r\\n            emit ActionExecuted(_pluginId, _actionType);\\r\\n            return;\\r\\n        }\\r\\n        IPlugin(pluginAddress).execute(_actionType, _payload);\\r\\n        emit ActionExecuted(_pluginId, _actionType);\\r\\n    }\\r\\n\\r\\n    /// @notice Claim rewards from the plugins.\\r\\n    function claimReward() public onlyMaster {\\r\\n        bytes memory _payload = abi.encode(acceptingTokens);\\r\\n        for(uint256 i = 0; i < pluginIds.length; ++i) {\\r\\n            address plugin = supportedPlugins[pluginIds[i]].pluginAddr;\\r\\n            IPlugin(plugin).execute(IPlugin.ActionType.ClaimReward, _payload);\\r\\n        }\\r\\n        emit ClaimReward();\\r\\n    }\\r\\n\\r\\n    /* ========== BRIDGE FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Report snapshot of the vault to the controller.\\r\\n    function reportSnapshot(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        uint256 _updateNum\\r\\n    ) public onlyBridge {\\r\\n        MozBridge.Snapshot memory _snapshot;\\r\\n        if(updateNum == _updateNum) {\\r\\n            _snapshot = localSnapshot;\\r\\n        } else {\\r\\n            _snapshot = _takeSnapshot();\\r\\n            localSnapshot = _snapshot;\\r\\n            updateNum = _updateNum;\\r\\n        }\\r\\n        bytes memory payload = abi.encode(_snapshot, _updateNum);\\r\\n        (uint256 _nativeFee, ) = MozBridge(mozBridge).quoteLayerZeroFee(MozBridge(mozBridge).mainChainId(), TYPE_REPORT_SNAPSHOT, MozBridge.LzTxObj(0, 0, \\\"0x\\\"), payload);\\r\\n        try MozBridge(mozBridge).reportSnapshot{value: _nativeFee}(_snapshot, _updateNum, payable(address(this))) {\\r\\n            emit SnapshotReported(_srcChainId, _srcAddress, _nonce, _snapshot, _updateNum);\\r\\n        } catch {\\r\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REPORT_SNAPSHOT_RETRY, _snapshot, _updateNum);\\r\\n            emit Revert(TYPE_REPORT_SNAPSHOT_RETRY, _srcChainId, _srcAddress, _nonce);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Report that the vault is settled.\\r\\n    function reportSettled(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        uint256 _totalCoinMD,\\r\\n        uint256 _totalMLP,\\r\\n        uint256 _updateNum\\r\\n    ) public onlyBridge {\\r\\n        _settle(_totalCoinMD, _totalMLP);\\r\\n        bytes memory payload = abi.encode(_updateNum);\\r\\n        (uint256 _nativeFee, ) = MozBridge(mozBridge).quoteLayerZeroFee(MozBridge(mozBridge).mainChainId(), TYPE_REPORT_SETTLE, MozBridge.LzTxObj(0, 0, \\\"0x\\\"), payload);\\r\\n        try MozBridge(mozBridge).reportSettled{value: _nativeFee}(_updateNum, payable(address(this))) {\\r\\n            emit SettleReported(_srcChainId, _srcAddress, _nonce, _updateNum);\\r\\n        } catch {\\r\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REPORT_SETTLE_RETRY, _updateNum);\\r\\n            emit Revert(TYPE_REPORT_SETTLE_RETRY, _srcChainId, _srcAddress, _nonce);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Retry reverted actions.\\r\\n    function retryRevert(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        uint64 _nonce\\r\\n    ) external payable {\\r\\n        bytes memory payload = revertLookup[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payload.length > 0, \\\"Vault: no retry revert\\\");\\r\\n\\r\\n        // empty it\\r\\n        revertLookup[_srcChainId][_srcAddress][_nonce] = \\\"\\\";\\r\\n\\r\\n        uint16 functionType;\\r\\n        assembly {\\r\\n            functionType := mload(add(payload, 32))\\r\\n        }\\r\\n\\r\\n        if (functionType == TYPE_REPORT_SNAPSHOT_RETRY) {\\r\\n            (, MozBridge.Snapshot memory _snapshot, uint256 _updateNum) = abi.decode(\\r\\n                payload,\\r\\n                (uint16, MozBridge.Snapshot, uint256)\\r\\n            );\\r\\n            require(_updateNum == updateNum, \\\"Vault: Old request\\\");\\r\\n            MozBridge(mozBridge).reportSnapshot{value: msg.value}(_snapshot, _updateNum, payable(address(msg.sender)));\\r\\n        } else if (functionType == TYPE_REPORT_SETTLE_RETRY){\\r\\n            (, uint256 _updateNum) = abi.decode(\\r\\n                payload,\\r\\n                (uint16, uint256)\\r\\n            );\\r\\n            require(_updateNum == updateNum, \\\"Vault: Old request\\\");\\r\\n            MozBridge(mozBridge).reportSettled{value: msg.value}(_updateNum, payable(address(msg.sender)));\\r\\n        } else if (functionType == TYPE_SNAPSHOT_RETRY){\\r\\n            (, uint256 _updateNum) = abi.decode(\\r\\n                payload,\\r\\n                (uint16, uint256)\\r\\n            );\\r\\n            require(_updateNum > updateNum, \\\"Vault: Old request\\\");\\r\\n            MozBridge.Snapshot memory _snapshot = _takeSnapshot();\\r\\n            localSnapshot = _snapshot;\\r\\n            updateNum = _updateNum;\\r\\n            MozBridge(mozBridge).reportSnapshot{value: msg.value}(_snapshot, _updateNum, payable(address(msg.sender)));\\r\\n        } else if (functionType == TYPE_SETTLE_RETRY) {\\r\\n            (, uint256 _totalCoinMD, uint256 _totalMLP, uint256 _updateNum) = abi.decode(\\r\\n                payload,\\r\\n                (uint16, uint256, uint256, uint256)\\r\\n            );\\r\\n            require(_updateNum == updateNum, \\\"Vault: Old request\\\");\\r\\n            _settle(_totalCoinMD, _totalMLP);\\r\\n            MozBridge(mozBridge).reportSettled{value: msg.value}(_updateNum, payable(address(msg.sender)));\\r\\n        } else {\\r\\n            revert(\\\"Vault: invalid function type\\\");\\r\\n        }\\r\\n        emit RetryRevert(functionType, _srcChainId, _srcAddress, _nonce);\\r\\n    }\\r\\n\\r\\n    /// @notice set the Revert Lookup\\r\\n    function setRevertLookup(        \\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint256 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) public onlyBridge {\\r\\n        revertLookup[_srcChainId][_srcAddress][_nonce] = _payload;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the snapshot of current vault and return the snapshot.\\r\\n    /// @dev Only used in main chain Vault\\r\\n    function takeSnapshot() public onlyBridge returns (MozBridge.Snapshot memory snapshot) {\\r\\n        return _takeSnapshot();\\r\\n    }\\r\\n\\r\\n    /// @notice Settle the requests with the total amount of the stablecoin and total amount of mozaic LP token.\\r\\n    /// @dev Only used in main chain Vault\\r\\n    function settleRequests(uint256 _totalCoinMD, uint256 _totalMLP) public onlyBridge {\\r\\n        _settle(_totalCoinMD, _totalMLP);\\r\\n    }\\r\\n    /* ========== USER FUNCTIONS ========== */\\r\\n    \\r\\n    /// @notice Add deposit request to the vault.\\r\\n    /// @param _amountLD - The amount of the token to be deposited.\\r\\n    /// @param _token - The address of the token  to be deposited.\\r\\n    function addDepositRequest(uint256 _amountLD, address _token, address _depositor) external {\\r\\n        require(lockVault == false, \\\"Vault: vault locked\\\");\\r\\n        require(isAcceptingToken(_token), \\\"Vault: Invalid token\\\");\\r\\n        require(_amountLD != 0, \\\"Vault: Invalid amount\\\");\\r\\n        // Transfer token from msg.sender to vault.\\r\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amountLD);\\r\\n        uint256 _amountMLPToMint =  amountMDtoMLP(convertLDtoMD(_token, _amountLD));\\r\\n        require(_amountMLPToMint > 0, \\\"Vault: Invalid fund\\\");\\r\\n        // Mint moazic LP token.\\r\\n        MozaicLP(mozLP).mint(_depositor, _amountMLPToMint);\\r\\n        emit Deposit(_depositor, _token, _amountLD);\\r\\n    }\\r\\n\\r\\n    /// @notice Add withdraw request to the vault.\\r\\n    /// @param _amountMLP - The amount of the mozaic LP token.\\r\\n    /// @param _token - The address of the token.\\r\\n    function addWithdrawRequest(uint256 _amountMLP, address _token) external {\\r\\n        require(lockVault == false, \\\"Vault: vault locked\\\");\\r\\n        require(isAcceptingToken(_token), \\\"Vault: Invalid token\\\");\\r\\n        require(_amountMLP != 0, \\\"Vault: Invalid amount\\\");\\r\\n\\r\\n        address _withdrawer = msg.sender;\\r\\n        require(MozaicLP(mozLP).balanceOf(_withdrawer) >= _amountMLP, \\\"Vault: Low LP token balance\\\");\\r\\n        IERC20(mozLP).safeTransferFrom(_withdrawer, address(this), _amountMLP);\\r\\n\\r\\n        uint256 _amountMDtoGive = amountMLPtoMD(_amountMLP);\\r\\n        uint256 _amountLDtoGive = convertMDtoLD(_token, _amountMDtoGive);\\r\\n        uint256 _vaultBalanceLD = IERC20(_token).balanceOf(address(this));\\r\\n        uint256 _totalStakedAmount = getStakedAmountPerToken(_token);\\r\\n        require(_totalStakedAmount + _vaultBalanceLD >= _amountLDtoGive, \\\"Vault: Not Enough Token.\\\");\\r\\n        uint256 delta = _amountLDtoGive > _vaultBalanceLD ? _amountLDtoGive -  _vaultBalanceLD: 0;\\r\\n        for(uint256 i = 0; i < pluginIds.length; ++i) {\\r\\n            if(delta == 0) break;\\r\\n            address plugin = supportedPlugins[pluginIds[i]].pluginAddr;\\r\\n            (uint256 _stakedAmountLD, uint256 _stakedAmountLP) = IPlugin(plugin).getStakedAmount(_token);\\r\\n            if(_stakedAmountLD == 0 || _stakedAmountLP == 0) continue;\\r\\n            bytes memory _payload;\\r\\n            if(_stakedAmountLD > delta) {\\r\\n                uint256 unstakeAmount = delta * _stakedAmountLP / _stakedAmountLD;\\r\\n                _payload = abi.encode(unstakeAmount, _token);\\r\\n                delta = 0;\\r\\n            } else {\\r\\n                delta -= _stakedAmountLD;\\r\\n                _payload = abi.encode(_stakedAmountLP, _token);\\r\\n            }\\r\\n            IPlugin(plugin).execute(IPlugin.ActionType.Unstake, _payload);\\r\\n        }\\r\\n        _vaultBalanceLD = IERC20(_token).balanceOf(address(this));\\r\\n        require(_vaultBalanceLD >= _amountLDtoGive.mul(BP_DENOMINATOR - SLIPPAGE).div(BP_DENOMINATOR), \\\"Vault: Not Enough Token.\\\");\\r\\n        _amountLDtoGive = _vaultBalanceLD >= _amountLDtoGive ? _amountLDtoGive : _vaultBalanceLD; \\r\\n        // Burn moazic LP token.\\r\\n        MozaicLP(mozLP).burn(address(this), _amountMLP);\\r\\n\\r\\n        // Transfer token to the user.\\r\\n        if(_amountLDtoGive > 0) IERC20(_token).safeTransfer(_withdrawer, _amountLDtoGive);\\r\\n        emit Withdraw(_withdrawer, _token, _amountMLP, _amountLDtoGive);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n    \\r\\n    /// @notice Take snapshot from the vault and return the snapshot.\\r\\n    function _takeSnapshot() internal returns (MozBridge.Snapshot memory snapshot) {\\r\\n        lockVault = true;\\r\\n        // Get the total amount of stablecoin in vault with mozaic decimal.\\r\\n        uint256 _totalAssetMD;\\r\\n        for(uint256 i = 0; i < acceptingTokens.length; ++i) { \\r\\n            uint256 amountLD = IERC20(acceptingTokens[i]).balanceOf(address(this));\\r\\n            uint256 amountMD = convertLDtoMD(acceptingTokens[i], amountLD);\\r\\n            _totalAssetMD = _totalAssetMD + amountMD; \\r\\n        }\\r\\n\\r\\n        // Get total amount of stablecoin of plugin.\\r\\n        uint256 _totalStakedMD;\\r\\n        for(uint256 i = 0; i < pluginIds.length; ++i) {\\r\\n            address plugin = supportedPlugins[pluginIds[i]].pluginAddr;\\r\\n            bytes memory _payload = abi.encode(acceptingTokens);\\r\\n            bytes memory response = IPlugin(plugin).execute(IPlugin.ActionType.GetTotalAssetsMD, _payload);\\r\\n            _totalStakedMD = _totalStakedMD + abi.decode(response, (uint256));\\r\\n        }\\r\\n        // Configure and return snapshot.\\r\\n        snapshot.totalStablecoin = _totalAssetMD + _totalStakedMD;\\r\\n        snapshot.totalMozaicLp = IERC20(mozLP).totalSupply();\\r\\n        emit TakeSnapshot(\\r\\n            snapshot.totalStablecoin,\\r\\n            snapshot.totalMozaicLp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Set the total amount of stablecoin and total amount of mozaic LP token.\\r\\n    function _settle(uint256 _totalCoinMD, uint256 _totalMLP) internal {\\r\\n        lockVault = false;\\r\\n        totalCoinMD = _totalCoinMD;\\r\\n        totalMLP = _totalMLP;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Get the available LD and LP amount per token.\\r\\n    function getAvailbleAmountPerToken(address _token) public view returns (uint256, uint256) {\\r\\n        uint256 _stakedAmount = getStakedAmountPerToken(_token);\\r\\n        uint256 _tokenBalance = IERC20(_token).balanceOf(address(this));\\r\\n        uint256 _totalAmount = _stakedAmount + _tokenBalance;\\r\\n        uint256 _amountMD = convertLDtoMD(_token, _totalAmount);\\r\\n        uint256 _amountMLP = amountMDtoMLP(_amountMD);\\r\\n        return (_totalAmount, _amountMLP);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the staked amount per token.\\r\\n    function getStakedAmountPerToken(address _token) public view returns(uint256 _totalAmount) {\\r\\n        for(uint256 i = 0; i < pluginIds.length; ++i) {\\r\\n            address plugin = supportedPlugins[pluginIds[i]].pluginAddr;\\r\\n            (uint256 stakedAmount, ) = IPlugin(plugin).getStakedAmount(_token);\\r\\n            _totalAmount = _totalAmount + stakedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Whether the token is accepted token or not.\\r\\n    /// @param _token - The address of token.\\r\\n    function isAcceptingToken(address _token) public view returns (bool) {\\r\\n        return tokenMap[_token];\\r\\n    }\\r\\n\\r\\n    /// @notice Get the address of plugin with it's id\\r\\n    function getPluginAddress(uint8 id) public view returns (address) {\\r\\n        return supportedPlugins[id].pluginAddr;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the address of plugin reward with it's id\\r\\n    function getPluginReward(uint8 id) public view returns (address) {\\r\\n        return supportedPlugins[id].pluginReward;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the number of plugins.\\r\\n    function getNumberOfPlugins() public view returns (uint256) {\\r\\n        return pluginIds.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the number of tokens.\\r\\n    function getNumberOfTokens() public view returns (uint256) {\\r\\n        return acceptingTokens.length;\\r\\n    }\\r\\n\\r\\n    function getAcceptingTokens() public view returns(address[] memory) {\\r\\n        return acceptingTokens;\\r\\n    }\\r\\n\\r\\n    function getPluginIds() public view returns (uint8[] memory) {\\r\\n        return pluginIds;\\r\\n    }\\r\\n    \\r\\n    /// Convert functions\\r\\n\\r\\n    /// @notice Convert local decimal to mozaic decimal.\\r\\n    /// @param _token - The address of the token to be converted.\\r\\n    /// @param _amountLD - the token amount represented with local decimal.\\r\\n    function convertLDtoMD(address _token, uint256 _amountLD) public view returns (uint256) {\\r\\n        uint8 _localDecimals = IERC20Metadata(_token).decimals();\\r\\n        if (MOZAIC_DECIMALS >= _localDecimals) {\\r\\n            return _amountLD * (10**(MOZAIC_DECIMALS - _localDecimals));\\r\\n        } else {\\r\\n            return _amountLD / (10**(_localDecimals - MOZAIC_DECIMALS));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Convert mozaic decimal to local decimal.\\r\\n    /// @param _token - The address of the token to be converted.\\r\\n    /// @param _amountMD - the token amount represented with mozaic decimal.\\r\\n    function convertMDtoLD(address _token, uint256 _amountMD) public view returns (uint256) {\\r\\n        uint8 _localDecimals = IERC20Metadata(_token).decimals();\\r\\n        if (MOZAIC_DECIMALS >= _localDecimals) {\\r\\n            return _amountMD / (10**(MOZAIC_DECIMALS - _localDecimals));\\r\\n        } else {\\r\\n            return _amountMD * (10**(_localDecimals - MOZAIC_DECIMALS));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Convert Mozaic decimal amount to mozaic LP decimal amount.\\r\\n    /// @param _amountMD - the token amount represented with mozaic decimal.\\r\\n    function amountMDtoMLP(uint256 _amountMD) public view returns (uint256) {\\r\\n        if (totalCoinMD == 0) {\\r\\n            return _amountMD;\\r\\n        } else {\\r\\n            return _amountMD * totalMLP / totalCoinMD;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @notice Convert mozaic LP decimal amount to Mozaic decimal amount.\\r\\n    /// @param _amountMLP - the mozaic LP token amount.\\r\\n    function amountMLPtoMD(uint256 _amountMLP) public view returns (uint256) {\\r\\n        if (totalMLP == 0) {\\r\\n            return _amountMLP;\\r\\n        } else {\\r\\n            return _amountMLP * totalCoinMD / totalMLP;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    receive() external payable {}\\r\\n    // Fallback function is called when msg.data is not empty\\r\\n    fallback() external payable {}\\r\\n    function getBalance() public view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) public onlyOwner {\\r\\n        // get the amount of Ether stored in this contract\\r\\n        uint amount = address(this).balance;\\r\\n        require(amount >= _amount, \\\"Vault: Invalid withdraw amount.\\\");\\r\\n        // send Ether to treasury\\r\\n        // Treasury can receive Ether since the address of treasury is payable\\r\\n        require(treasury != address(0), \\\"Vault: Invalid treasury\\\");\\r\\n        (bool success, ) = treasury.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Vault: Failed to send Ether\\\");\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/MozBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport \\\"./Controller.sol\\\";\\r\\nimport \\\"./interfaces/IPlugin.sol\\\";\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\n\\r\\ncontract MozBridge is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    //---------------------------------------------------------------------------\\r\\n    // CONSTANTS\\r\\n    uint16 internal constant TYPE_REQUEST_SNAPSHOT = 1;\\r\\n    uint16 internal constant TYPE_REPORT_SNAPSHOT  = 2;\\r\\n    uint16 internal constant TYPE_REQUEST_SETTLE   = 3;\\r\\n    uint16 internal constant TYPE_REPORT_SETTLE    = 4;\\r\\n\\r\\n    uint16 internal constant TYPE_SNAPSHOT_RETRY        = 5;\\r\\n    uint16 internal constant TYPE_SETTLE_RETRY          = 6;\\r\\n    uint16 internal constant TYPE_REPORT_SNAPSHOT_RETRY = 7;\\r\\n    uint16 internal constant TYPE_REPORT_SETTLE_RETRY   = 8;\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // STRUCTS\\r\\n    struct LzTxObj {\\r\\n        uint256 dstGasForCall;\\r\\n        uint256 dstNativeAmount;\\r\\n        bytes dstNativeAddr;\\r\\n    }\\r\\n\\r\\n    struct Snapshot {\\r\\n        uint256 totalStablecoin;\\r\\n        uint256 totalMozaicLp; // Mozaic \\\"LP\\\"\\r\\n    }\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // VARIABLES\\r\\n    ILayerZeroEndpoint public immutable layerZeroEndpoint;\\r\\n    \\r\\n    uint16 public immutable mainChainId;\\r\\n\\r\\n    Vault public vault;\\r\\n    \\r\\n    Controller public controller;\\r\\n    \\r\\n    mapping(uint16 => bytes) public bridgeLookup;\\r\\n    \\r\\n    mapping(uint16 => mapping(uint16 => uint256)) public gasLookup;\\r\\n    \\r\\n    bool public useLayerZeroToken;\\r\\n    \\r\\n    //---------------------------------------------------------------------------\\r\\n    // EVENTS\\r\\n    event ReceiveMsg(\\r\\n        uint16 srcChainId,\\r\\n        address from,\\r\\n        uint16 funType,\\r\\n        bytes payload\\r\\n    );\\r\\n\\r\\n    event SendMsg(\\r\\n        uint16 chainId,\\r\\n        uint16 funType,\\r\\n        bytes lookup\\r\\n    );\\r\\n\\r\\n    event Revert(\\r\\n        uint16 bridgeFunctionType,\\r\\n        uint16 chainId,\\r\\n        bytes srcAddress,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // MODIFIERS\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == address(vault), \\\"MozBridge: Not vault\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyController() {\\r\\n        require(msg.sender == address(controller), \\\"MozBridge: Not controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // CONSTRUCTOR\\r\\n    constructor(\\r\\n        address _lzEndpoint,\\r\\n        uint16 _mainchainId\\r\\n    ) {\\r\\n        require(_mainchainId > 0, \\\"MozBridge: Invalid chainID\\\");\\r\\n        require(_lzEndpoint != address(0x0), \\\"MozBridge: _lzEndpoint cannot be 0x0\\\");\\r\\n        layerZeroEndpoint = ILayerZeroEndpoint(_lzEndpoint);\\r\\n        mainChainId = _mainchainId;\\r\\n    }\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    function lzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) external override {\\r\\n        require(msg.sender == address(layerZeroEndpoint), \\\"MozBridge: only LayerZero endpoint can call lzReceive\\\");\\r\\n        require(\\r\\n            _srcAddress.length == bridgeLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(bridgeLookup[_srcChainId]),\\r\\n            \\\"MozBridge: bridge does not match\\\"\\r\\n        );\\r\\n\\r\\n        address from;\\r\\n        assembly {\\r\\n            from := mload(add(_srcAddress, 20))\\r\\n        }\\r\\n\\r\\n        uint16 functionType;\\r\\n        assembly {\\r\\n            functionType := mload(add(_payload, 32))\\r\\n        }\\r\\n\\r\\n        if (functionType == TYPE_REQUEST_SNAPSHOT) {\\r\\n            require(_srcChainId == mainChainId, \\\"MozBridge: message must come from main chain\\\");\\r\\n            ( ,uint256 _updateNum) = abi.decode(_payload, (uint16,  uint256));\\r\\n            try vault.reportSnapshot(_srcChainId, _srcAddress, _nonce, _updateNum) {\\r\\n            } catch {\\r\\n                bytes memory payload = abi.encode(TYPE_SNAPSHOT_RETRY, _updateNum);\\r\\n                vault.setRevertLookup(_srcChainId, _srcAddress, _nonce, payload);\\r\\n                emit Revert(TYPE_SNAPSHOT_RETRY, _srcChainId, _srcAddress, _nonce);\\r\\n            }\\r\\n        } else if (functionType == TYPE_REPORT_SNAPSHOT) {\\r\\n            ( , MozBridge.Snapshot memory _snapshot, uint256 _updateNum) = abi.decode(_payload, (uint16, MozBridge.Snapshot, uint256));\\r\\n            controller.updateSnapshot(_srcChainId, _snapshot, _updateNum);\\r\\n        } else if(functionType == TYPE_REQUEST_SETTLE) {\\r\\n            require(_srcChainId == mainChainId, \\\"MozBridge: message must come from main chain\\\");\\r\\n            ( , uint256 _totalCoinMD, uint256 _totalMLP, uint256 _updateNum) = abi.decode(_payload, (uint16, uint256, uint256, uint256));\\r\\n            try vault.reportSettled(_srcChainId, _srcAddress, _nonce, _totalCoinMD, _totalMLP, _updateNum) {\\r\\n            } catch {\\r\\n                bytes memory payload = abi.encode(TYPE_SETTLE_RETRY, _totalCoinMD, _totalMLP, _updateNum);\\r\\n                vault.setRevertLookup(_srcChainId, _srcAddress, _nonce, payload);\\r\\n                emit Revert(TYPE_SETTLE_RETRY, _srcChainId, _srcAddress, _nonce);\\r\\n            }\\r\\n        } else if(functionType == TYPE_REPORT_SETTLE) {\\r\\n            ( , uint256 _updateNum) = abi.decode(_payload, (uint16, uint256));\\r\\n            controller.settleReport(_srcChainId, _updateNum);\\r\\n        }\\r\\n\\r\\n        emit ReceiveMsg(_srcChainId, from, functionType, _payload);\\r\\n    }\\r\\n\\r\\n    //------------------------------------CONFIGURATION------------------------------------\\r\\n    \\r\\n    // Set Local Vault\\r\\n    function setVault(address _vault) external onlyOwner {\\r\\n        require(_vault != address(0x0) && address(vault) == address(0), \\\"ERROR: Invalid address\\\");\\r\\n        vault = Vault(payable (_vault));\\r\\n    }\\r\\n    \\r\\n    // Set Controller    \\r\\n    function setController(address payable _controller) public onlyOwner {\\r\\n        require(_controller != address(0), \\\"ERROR: Invalid address\\\");\\r\\n        controller =  Controller(_controller);\\r\\n    }\\r\\n\\r\\n    //Set gas amount\\r\\n    function setGasAmount(\\r\\n        uint16 _chainId,\\r\\n        uint16 _functionType,\\r\\n        uint256 _gasAmount\\r\\n    ) external onlyOwner {\\r\\n        require(_functionType >= 1 && _functionType <= 4, \\\"MozBridge: invalid _functionType\\\");\\r\\n        gasLookup[_chainId][_functionType] = _gasAmount;\\r\\n    }\\r\\n\\r\\n    // Set BridgeLookups\\r\\n    function setBridge(uint16 _chainId, bytes calldata _bridgeAddress) external onlyOwner {\\r\\n        require(_chainId > 0, \\\"MozBridge: Set bridge error\\\");\\r\\n        require(bridgeLookup[_chainId].length == 0, \\\"MozBridge: Bridge already set!\\\");\\r\\n        bridgeLookup[_chainId] = _bridgeAddress;\\r\\n    }\\r\\n\\r\\n    // Clear the stored payload and resume\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        layerZeroEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // set if use layerzero token\\r\\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\\r\\n        useLayerZeroToken = enable;\\r\\n    }\\r\\n\\r\\n    // generic config for user Application\\r\\n    function setConfig(\\r\\n        uint16 _version,\\r\\n        uint16 _chainId,\\r\\n        uint256 _configType,\\r\\n        bytes calldata _config\\r\\n    ) external override onlyOwner {\\r\\n        layerZeroEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 version) external override onlyOwner {\\r\\n        layerZeroEndpoint.setSendVersion(version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 version) external override onlyOwner {\\r\\n        layerZeroEndpoint.setReceiveVersion(version);\\r\\n    }\\r\\n\\r\\n    //---------------------------------LOCAL CHAIN FUNCTIONS--------------------------------\\r\\n\\r\\n    // Send snapshot request to local chains (Only called on Mainchain)\\r\\n    function requestSnapshot(uint16 _dstChainId, uint256 _updateNum, address payable _refundAddress ) external payable onlyController {\\r\\n        require(_dstChainId > 0, \\\"MozBridge: Invalid ChainId\\\");\\r\\n        require(_refundAddress != address(0x0), \\\"MozBridge: Invalid address\\\");\\r\\n        \\r\\n        bytes memory payload = abi.encode(TYPE_REQUEST_SNAPSHOT, _updateNum);\\r\\n        LzTxObj memory lzTxObj = LzTxObj(0, 0, \\\"0x\\\");\\r\\n        _call(_dstChainId, TYPE_REQUEST_SNAPSHOT, _refundAddress, lzTxObj, payload);\\r\\n    }\\r\\n\\r\\n    // Report snapshot details to Controller (Olny called on Localchains)\\r\\n    function reportSnapshot(\\r\\n        MozBridge.Snapshot memory _snapshot,\\r\\n        uint256 _updateNum,\\r\\n        address payable _refundAddress\\r\\n        // Vault.Snapshot memory _snapshot\\r\\n    ) external payable onlyVault {\\r\\n        bytes memory payload = abi.encode(TYPE_REPORT_SNAPSHOT, _snapshot, _updateNum);\\r\\n        LzTxObj memory lzTxObj = LzTxObj(0, 0, \\\"0x\\\");\\r\\n        _call(mainChainId, TYPE_REPORT_SNAPSHOT, _refundAddress, lzTxObj, payload);\\r\\n    }\\r\\n\\r\\n    // Send settle request to local chains (Only called on Mainchain)\\r\\n    function requestSettle(uint16 _dstChainId, uint256  _totalCoinMD, uint256 _totalMLP, uint256 _updateNum, address payable _refundAddress ) external payable onlyController {\\r\\n        require(_dstChainId > 0, \\\"MozBridge: Invalid ChainId\\\");\\r\\n        require(_refundAddress != address(0x0), \\\"MozBridge: Invalid address\\\");\\r\\n        \\r\\n        bytes memory payload = abi.encode(TYPE_REQUEST_SETTLE, _totalCoinMD, _totalMLP, _updateNum);\\r\\n        LzTxObj memory lzTxObj = LzTxObj(0, 0, \\\"0x\\\");\\r\\n        _call(_dstChainId, TYPE_REQUEST_SETTLE, _refundAddress, lzTxObj, payload);\\r\\n    }\\r\\n\\r\\n    // Send settle report to Controller (Only called on Localchains)\\r\\n    function reportSettled(uint256 _updateNum, address payable _refundAddress ) external payable onlyVault {\\r\\n        require(_refundAddress != address(0x0), \\\"MozBridge: Invalid address\\\");\\r\\n        bytes memory payload = abi.encode(TYPE_REPORT_SETTLE, _updateNum);\\r\\n        LzTxObj memory lzTxObj = LzTxObj(0, 0, \\\"0x\\\");\\r\\n        _call(mainChainId, TYPE_REPORT_SETTLE, _refundAddress, lzTxObj, payload);\\r\\n    }\\r\\n\\r\\n    // Get and return the snapshot of the local vault\\r\\n    // Used to get the snapshot of main chain\\r\\n    // Only used in main chain Bridge\\r\\n    function takeSnapshot() external onlyController returns (Snapshot memory) {\\r\\n        return vault.takeSnapshot();\\r\\n    }\\r\\n\\r\\n    // Settle the deposit and withdraw requests of the main chain vault\\r\\n    // Used to settle requests of main chain\\r\\n    // Only used in main chain Bridge\\r\\n    function setSettle(uint256 _totalCoinMD, uint256 _totalMLP) external onlyController {\\r\\n        vault.settleRequests(_totalCoinMD, _totalMLP);\\r\\n    }\\r\\n    \\r\\n    //---------------------------------------------------------------------------\\r\\n    // PUBLIC FUNCTIONS\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _chainId,\\r\\n        uint16 _msgType,\\r\\n        LzTxObj memory _lzTxParams,\\r\\n        bytes memory _payload\\r\\n    ) public view returns (uint256 _nativeFee, uint256 _zroFee) {   \\r\\n        bytes memory payload = \\\"\\\";\\r\\n        if (_msgType == TYPE_REQUEST_SNAPSHOT) {\\r\\n            payload = abi.encode(TYPE_REQUEST_SNAPSHOT, _payload);\\r\\n        }\\r\\n        else if (_msgType == TYPE_REPORT_SNAPSHOT) {\\r\\n            payload = abi.encode(TYPE_REPORT_SNAPSHOT, _payload);\\r\\n        }\\r\\n        else if (_msgType == TYPE_REQUEST_SETTLE) {\\r\\n            payload = abi.encode(TYPE_REQUEST_SETTLE, _payload);\\r\\n        }\\r\\n        else if (_msgType == TYPE_REPORT_SETTLE) {\\r\\n            payload = abi.encode(TYPE_REPORT_SETTLE, _payload);\\r\\n        }\\r\\n        else {\\r\\n            revert(\\\"MozBridge: unsupported function type\\\");\\r\\n        }\\r\\n        \\r\\n        bytes memory _adapterParams = _txParamBuilder(_chainId, _msgType, _lzTxParams);\\r\\n        return layerZeroEndpoint.estimateFees(_chainId, address(this), payload, useLayerZeroToken, _adapterParams);\\r\\n    }\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // INTERNAL FUNCTIONS\\r\\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\\r\\n        uint16 txType = 1;\\r\\n        return abi.encodePacked(txType, _gasAmount);\\r\\n    }\\r\\n\\r\\n    function txParamBuilderType2(\\r\\n        uint256 _gasAmount,\\r\\n        uint256 _dstNativeAmount,\\r\\n        bytes memory _dstNativeAddr\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        uint16 txType = 2;\\r\\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount, _dstNativeAddr);\\r\\n    }\\r\\n\\r\\n    function _txParamBuilder(\\r\\n        uint16 _chainId,\\r\\n        uint16 _type,\\r\\n        LzTxObj memory _lzTxParams\\r\\n    ) internal view returns (bytes memory) {\\r\\n        bytes memory lzTxParam;\\r\\n        address dstNativeAddr;\\r\\n        {\\r\\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\\r\\n            assembly {\\r\\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalGas = gasLookup[_chainId][_type] + _lzTxParams.dstGasForCall;\\r\\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\\r\\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\\r\\n        } else {\\r\\n            lzTxParam = txParamBuilderType1(totalGas);\\r\\n        }\\r\\n\\r\\n        return lzTxParam;\\r\\n    }\\r\\n\\r\\n    function _call(\\r\\n        uint16 _dstChainId,\\r\\n        uint16 _type,\\r\\n        address payable _refundAddress,\\r\\n        LzTxObj memory _lzTxParams,\\r\\n        bytes memory _payload\\r\\n    ) internal {\\r\\n        bytes memory bridge = bridgeLookup[_dstChainId];\\r\\n        require(bridge.length > 0, \\\"MozBridge: Invalid bridgeLookup\\\");\\r\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_dstChainId, _type, _lzTxParams);\\r\\n        layerZeroEndpoint.send{value: msg.value}(\\r\\n            _dstChainId,\\r\\n            bridge,\\r\\n            _payload,\\r\\n            _refundAddress,\\r\\n            address(this),\\r\\n            lzTxParamBuilt\\r\\n        );\\r\\n        emit SendMsg(_dstChainId, _type, bridge);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MozaicLP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// imports\\r\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MozaicLP is Ownable, OFTV2 {\\r\\n    address public vault;\\r\\n\\r\\n    constructor(\\r\\n        address _layerZeroEndpoint,\\r\\n        uint8 _sharedDecimals\\r\\n    ) OFTV2(\\\"Mozaic LPToken\\\", \\\"mozLP\\\", _sharedDecimals, _layerZeroEndpoint) {\\r\\n    }\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        require(vault == _msgSender(), \\\"OnlyVault: caller is not the vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setVault(address _vault) public onlyOwner {\\r\\n        require(_vault != address(0) && vault == address(0), \\\"ERROR: Invalid address\\\");\\r\\n        vault = _vault;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n    function mint(address _account, uint256 _amount) public onlyVault {\\r\\n        _mint(_account, _amount);\\r\\n    }\\r\\n    \\r\\n    function burn(address _account, uint256 _amount) public onlyVault {\\r\\n        _burn(_account, _amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPlugin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPlugin {\\r\\n    enum ActionType {\\r\\n        // Action types\\r\\n        Stake,\\r\\n        Unstake,\\r\\n        GetTotalAssetsMD,\\r\\n        ClaimReward,\\r\\n        SwapRemote\\r\\n    }\\r\\n\\r\\n    struct lzTxObj {\\r\\n        uint256 dstGasForCall;\\r\\n        uint256 dstNativeAmount;\\r\\n        bytes dstNativeAddr;\\r\\n    }\\r\\n\\r\\n    function execute(ActionType _actionType, bytes calldata _payload) external payable returns (bytes memory);\\r\\n\\r\\n    function getStakedAmount(address _token) external view returns (uint256, uint256);\\r\\n\\r\\n    function quoteSwapFee(uint16 _dstChainId) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n// imports\\r\\nimport \\\"./MozBridge.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport \\\"./interfaces/IPlugin.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title  Mozaic Controller\\r\\n/// @notice Mozaic Controller Contract\\r\\n/// @dev    The Mozaic Controller performs Mozaic operations to enforce the Archimedes's guidance\\r\\n///         against the APY(Annual Percentage Yield) of the pools.\\r\\ncontract Controller is Ownable {\\r\\n    \\r\\n    /// @notice The main status of the protocol \\r\\n    enum ProtocolStatus {\\r\\n        IDLE,\\r\\n        SNAPSHOTTING,\\r\\n        OPTIMIZING,\\r\\n        SETTLING\\r\\n    }\\r\\n\\r\\n    uint16 internal constant TYPE_REQUEST_SNAPSHOT = 1;\\r\\n    uint16 internal constant TYPE_REPORT_SNAPSHOT  = 2;\\r\\n    uint16 internal constant TYPE_REQUEST_SETTLE   = 3;\\r\\n    uint16 internal constant TYPE_REPORT_SETTLE    = 4;\\r\\n\\r\\n    /// @notice Address that is responsible for executing main actions.\\r\\n    address public master;\\r\\n    \\r\\n    /// @notice Address that is used to implement the cross chain operations.\\r\\n    MozBridge public mozBridge;\\r\\n    \\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @notice Array of the all supported chain ids.\\r\\n    uint16[] public supportedChainIds;\\r\\n\\r\\n    /// @notice Main chain identifier of this protocol.\\r\\n    uint16 public immutable mainChainId;\\r\\n    \\r\\n    /// @notice The total amount of satable coin with mozaic decimal.\\r\\n    uint256 public totalCoinMD;\\r\\n\\r\\n    /// @notice The total amount of mozaic LP token.\\r\\n    uint256 public totalMLP;\\r\\n\\r\\n    /// @notice Return a snapshot data from given chain id.\\r\\n    mapping (uint16 => MozBridge.Snapshot) public snapshotReported;\\r\\n\\r\\n    /// @notice The current activated status.\\r\\n    ProtocolStatus public protocolStatus;\\r\\n\\r\\n    /// @notice Returns the flag if snapshot reported. (updateNum -> chainId -> flag)\\r\\n    mapping(uint256 => mapping(uint16 => bool)) public snapshotFlag;\\r\\n\\r\\n    /// @notice Returns the flag if settle reported. (updateNum -> chainId -> flag)\\r\\n    mapping(uint256 => mapping(uint16 => bool)) public settleFlag;\\r\\n\\r\\n    /// @notice Returns the flag if all snapshot reported. (updateNum -> flag)\\r\\n    mapping(uint256 => bool) checkedSnapshot;\\r\\n\\r\\n    /// @notice Returns the flag if all settle reported. (updateNum -> flag)\\r\\n    mapping(uint256 => bool) checkedSettle;\\r\\n\\r\\n    /// @notice Current updated state number.\\r\\n    uint256 public updateNum;\\r\\n\\r\\n    /// @notice The address of the treasury\\r\\n    address payable public treasury;\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /// @notice Modifier to check if caller is the master.\\r\\n    modifier onlyMaster() {\\r\\n        require(msg.sender == master, \\\"Controller: Invalid caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Modifier to check if caller is the bridge.\\r\\n    modifier onlyBridge() {\\r\\n        require(msg.sender == address(mozBridge), \\\"Controller: Invalid caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event SetChainId(uint16 chainId);\\r\\n    event RemoveChainId(uint16 chainId);\\r\\n    event SetBridge(address mozBridge);\\r\\n    event SetMaster(address master);\\r\\n    event SetTreasury(address payable treasury);\\r\\n    event RequestSnapshot(uint16 chainId, uint256 updateNum);\\r\\n    event RequestSettle(uint16 chainId, uint256 updateNum);\\r\\n    event SnapshotReported(uint16 chainId, uint256 updateNum);\\r\\n    event SettleReported(uint16 chainId, uint256 updateNum);\\r\\n    event UpdateAssetState(uint256 updateNum);\\r\\n    event SettleAllVaults(uint256 updateNum);\\r\\n    event UpdatedTotalAsset(uint256 totalCoinMD, uint256 totalMLP);\\r\\n    event ProtolcolStatusUpdated(ProtocolStatus status);\\r\\n    event Withdraw(uint256 amount);\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n    \\r\\n    constructor(\\r\\n        uint16 _mainChainId\\r\\n    ) {\\r\\n        require(_mainChainId > 0, \\\"Controller: Invalid chainid\\\");\\r\\n        mainChainId = _mainChainId;\\r\\n        supportedChainIds.push(mainChainId);\\r\\n    }\\r\\n\\r\\n    /* ========== CONFIGURATION ========== */\\r\\n\\r\\n    /// @notice Set the bridge of the controller\\r\\n    /// @param _mozBridge - The address of the bridge being setted.\\r\\n    function setBridge(address _mozBridge) public onlyOwner {\\r\\n        require(_mozBridge != address(0), \\\"Controller: Invalid address\\\");\\r\\n        require(address(mozBridge) == address(0), \\\"Controller: The bridge has been already set.\\\");\\r\\n        mozBridge = MozBridge(_mozBridge);\\r\\n        emit SetBridge(_mozBridge);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the master of the controller.\\r\\n    /// @param _master - The address of the master being setted.\\r\\n    function setMaster(address _master) public onlyOwner {\\r\\n        require(_master != address(0), \\\"Controller: Invalid address\\\");\\r\\n        master = _master;\\r\\n        emit SetMaster(_master);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the treasury of the controller.\\r\\n    /// @param _treasury - The address of the treasury being setted.\\r\\n    function setTreasury(address payable _treasury) public onlyOwner {\\r\\n        require(_treasury != address(0), \\\"Controller: Invalid address\\\");\\r\\n        treasury = _treasury;\\r\\n        emit SetTreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    /// @notice Add chain identifier to list of supported chain identifer.\\r\\n    /// @param  _chainId - The identifier of the chain being added.\\r\\n    function setChainId(uint16 _chainId) public onlyOwner {\\r\\n        require(_chainId > 0, \\\"Controller: Invalid chainID\\\");\\r\\n        require(protocolStatus == ProtocolStatus.IDLE, \\\"Controller: Protocol status must be IDLE\\\");\\r\\n        if(isAcceptingChainId(_chainId)) revert(\\\"Controller: chainId already exist\\\");\\r\\n        supportedChainIds.push(_chainId);\\r\\n        emit SetChainId(_chainId);\\r\\n    }\\r\\n\\r\\n    /// @notice Romove chain identifier from the list of chain identifier.\\r\\n    /// @param  _chainId - The identifier of the chain being removed.\\r\\n    function removeChainId(uint16 _chainId) public onlyOwner {\\r\\n        require(_chainId > 0, \\\"Controller: Invalid chainID\\\");\\r\\n        require(isAcceptingChainId(_chainId), \\\"Contoller: chainId doesn't exist.\\\");\\r\\n        for(uint256 i = 0; i < supportedChainIds.length; ++i) { \\r\\n            if(_chainId == supportedChainIds[i]) {\\r\\n                supportedChainIds[i] = supportedChainIds[supportedChainIds.length - 1];\\r\\n                supportedChainIds.pop();\\r\\n                emit RemoveChainId(_chainId);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== BRIDGE FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Update the snapshot of the certain chain.\\r\\n    /// @param  _srcChainId - The source chain identifier of snapshot being updated.\\r\\n    /// @param  _snapshot - The snapshot from the local chain.\\r\\n    function updateSnapshot(uint16 _srcChainId, MozBridge.Snapshot memory _snapshot, uint256 _updateNum) external onlyBridge {\\r\\n        if(!isAcceptingChainId(_srcChainId)) return;\\r\\n        _updateSnapshot(_srcChainId, _snapshot, _updateNum);\\r\\n    }\\r\\n\\r\\n    /// @notice Accept report from the vaults.\\r\\n    function settleReport(uint16 _srcChainId, uint256 _updateNum) external onlyBridge {\\r\\n        if(!isAcceptingChainId(_srcChainId)) return;\\r\\n        _settleReport(_srcChainId, _updateNum);\\r\\n    }\\r\\n\\r\\n    /* ========== MASTER FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Send the requsets to the local vaults to get the snapshot.\\r\\n    function updateAssetState() external onlyMaster {\\r\\n        require(protocolStatus == ProtocolStatus.IDLE, \\\"Controller: Protocal must be IDLE\\\");\\r\\n        require(supportedChainIds.length != 0, \\\"Controller: No supported chain\\\");\\r\\n        // update protocol status to `SNAPSHOTTING`\\r\\n        protocolStatus = ProtocolStatus.SNAPSHOTTING;\\r\\n        emit ProtolcolStatusUpdated(ProtocolStatus.SNAPSHOTTING);\\r\\n        for(uint16 i = 0; i < supportedChainIds.length; ++i) {\\r\\n            if(mainChainId == supportedChainIds[i]) {\\r\\n                MozBridge.Snapshot memory _snapshot = mozBridge.takeSnapshot();\\r\\n                _updateSnapshot(mainChainId, _snapshot, updateNum);\\r\\n            } else {\\r\\n                bytes memory payload = abi.encode(updateNum);\\r\\n                (uint256 _nativeFee, ) = mozBridge.quoteLayerZeroFee(supportedChainIds[i], TYPE_REQUEST_SNAPSHOT, MozBridge.LzTxObj(0, 0, \\\"0x\\\"), payload);\\r\\n                mozBridge.requestSnapshot{value: _nativeFee}(supportedChainIds[i], updateNum, payable(address(this)));\\r\\n            }\\r\\n        }\\r\\n        emit UpdateAssetState(updateNum);\\r\\n    }\\r\\n\\r\\n    /// @notice Settle the deposit and withdraw request in local vaults with total coin amount and total mozaic LP token amount.\\r\\n    function settleAllVaults() external onlyMaster {\\r\\n        require(protocolStatus == ProtocolStatus.OPTIMIZING, \\\"Controller: Protocal must be OPTIMIZING\\\");\\r\\n        require(supportedChainIds.length != 0, \\\"Controller: No supported chain\\\");\\r\\n        // update the protocol status to `SETTING`\\r\\n        protocolStatus = ProtocolStatus.SETTLING;\\r\\n        emit ProtolcolStatusUpdated(ProtocolStatus.SETTLING);\\r\\n        for(uint i = 0; i < supportedChainIds.length; ++i) { \\r\\n            // settle the vaults\\r\\n            if(supportedChainIds[i] == mainChainId) {\\r\\n                mozBridge.setSettle(totalCoinMD, totalMLP);\\r\\n                _settleReport(mainChainId, updateNum);\\r\\n            } else {\\r\\n                bytes memory payload = abi.encode(totalCoinMD, totalMLP, updateNum);\\r\\n                (uint256 _nativeFee, ) = mozBridge.quoteLayerZeroFee(supportedChainIds[i], TYPE_REQUEST_SETTLE, MozBridge.LzTxObj(0, 0, \\\"0x\\\"), payload);\\r\\n                mozBridge.requestSettle{value: _nativeFee}(supportedChainIds[i], totalCoinMD, totalMLP, updateNum, payable(address(this)));\\r\\n            }\\r\\n        }\\r\\n        emit SettleAllVaults(updateNum);\\r\\n    }\\r\\n\\r\\n    /// @notice Send the requsets to a certain local vault to get the snapshot.\\r\\n    function requestSnapshot(uint16 _chainId) external onlyMaster {\\r\\n        require(protocolStatus == ProtocolStatus.SNAPSHOTTING, \\\"Controller: Protocal must be SNAPSHOTTING\\\");\\r\\n        require(isAcceptingChainId(_chainId),\\\"Controller: Invalid chainId\\\");\\r\\n        if(_chainId == mainChainId) {\\r\\n            MozBridge.Snapshot memory _snapshot = mozBridge.takeSnapshot();\\r\\n            _updateSnapshot(mainChainId, _snapshot, updateNum);\\r\\n        } else {\\r\\n            bytes memory payload = abi.encode(updateNum);\\r\\n            (uint256 _nativeFee, ) = mozBridge.quoteLayerZeroFee(_chainId, TYPE_REQUEST_SNAPSHOT, MozBridge.LzTxObj(0, 0, \\\"0x\\\"), payload);\\r\\n            mozBridge.requestSnapshot{value: _nativeFee}(_chainId, updateNum, payable(address(this)));\\r\\n        }\\r\\n        emit RequestSnapshot(_chainId, updateNum);\\r\\n    }\\r\\n\\r\\n    /// @notice Settle the deposit and withdraw request in a certain local vault with total coin amount and total mozaic LP token amount.\\r\\n    function requestSettle(uint16 _chainId) external onlyMaster {\\r\\n        require(protocolStatus == ProtocolStatus.SETTLING, \\\"Controller: Protocal must be SETTLING\\\");\\r\\n        require(isAcceptingChainId(_chainId),\\\"Controller: Invalid chainId\\\");\\r\\n        if(_chainId == mainChainId) {\\r\\n            mozBridge.setSettle(totalCoinMD, totalMLP);\\r\\n            _settleReport(mainChainId, updateNum);\\r\\n        } else {\\r\\n            bytes memory payload = abi.encode(totalCoinMD, totalMLP, updateNum);\\r\\n            (uint256 _nativeFee, ) = mozBridge.quoteLayerZeroFee(_chainId, TYPE_REQUEST_SETTLE, MozBridge.LzTxObj(0, 0, \\\"0x\\\"), payload);\\r\\n            mozBridge.requestSettle{value: _nativeFee}(_chainId, totalCoinMD, totalMLP, updateNum, payable(address(this)));\\r\\n        }\\r\\n        emit RequestSettle(_chainId, updateNum);\\r\\n    }\\r\\n\\r\\n    ///  @notice Check the protocol status and the change the protocol status if it is necessary.\\r\\n    function checkProtocolStatus() external onlyMaster {\\r\\n        if(protocolStatus == ProtocolStatus.SNAPSHOTTING) {\\r\\n            if(_checkSnapshot()) {\\r\\n                _updateStats();\\r\\n                checkedSnapshot[updateNum] = true;\\r\\n                // update protocol status to `OPTIMIZING`\\r\\n                protocolStatus = ProtocolStatus.OPTIMIZING;\\r\\n                emit ProtolcolStatusUpdated(ProtocolStatus.OPTIMIZING);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(protocolStatus == ProtocolStatus.SETTLING) {\\r\\n            if(_checkSettle()) {\\r\\n                checkedSettle[updateNum] = true;\\r\\n                // update protocol status to `IDLE`\\r\\n                protocolStatus = ProtocolStatus.IDLE;\\r\\n                emit ProtolcolStatusUpdated(ProtocolStatus.IDLE);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    /// @notice Return the snapshot for a chain identifier.\\r\\n    /// @dev    Used to return & access the certain snapshot struct in solidity\\r\\n    function getSnapshotData(uint16 _chainId) public view returns (MozBridge.Snapshot memory ){\\r\\n        return snapshotReported[_chainId];\\r\\n    }\\r\\n\\r\\n    /// @notice Whether chain identifer is supported.\\r\\n    function isAcceptingChainId(uint16 _chainId) public view returns (bool) {\\r\\n        for(uint256 i = 0; i < supportedChainIds.length; ++i) {\\r\\n            if(_chainId == supportedChainIds[i]) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if snapshop of a certain chainId is reported .\\r\\n    function isSnapshotReported(uint16 _chainId) public view returns (bool) {\\r\\n        require(isAcceptingChainId(_chainId), \\\"Controller: Invalid chainId\\\");\\r\\n        return snapshotFlag[updateNum][_chainId];\\r\\n    }\\r\\n\\r\\n    /// @notice Check if certain chainId is settled.\\r\\n    function isSettleReported(uint16 _chainId) public view returns (bool) {\\r\\n        require(isAcceptingChainId(_chainId), \\\"Controller: Invalid chainId\\\");\\r\\n        return settleFlag[updateNum][_chainId];\\r\\n    }\\r\\n\\r\\n    /// @notice Get the length of supported chains.\\r\\n    function getNumberOfChains() public view returns (uint256) {\\r\\n        return supportedChainIds.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the array of supported chain ids.\\r\\n    function getSupportedChainIds() public view returns (uint16[] memory) {\\r\\n        return supportedChainIds;\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n    \\r\\n    /// @notice Update the snapshot of the certain chain.\\r\\n    /// @param  _srcChainId - The source chain identifier of snapshot being updated.\\r\\n    /// @param  _snapshot - The snapshot to be setted.\\r\\n    /// @param  _updateNum - The updated number.\\r\\n    function _updateSnapshot(uint16 _srcChainId, MozBridge.Snapshot memory _snapshot, uint256 _updateNum) internal {\\r\\n        if(updateNum != _updateNum) return;\\r\\n        if(snapshotFlag[_updateNum][_srcChainId] == true) return;\\r\\n        if(checkedSnapshot[_updateNum] == true) return;\\r\\n\\r\\n        snapshotFlag[_updateNum][_srcChainId] = true;\\r\\n        snapshotReported[_srcChainId] = _snapshot;\\r\\n        emit SnapshotReported(_srcChainId, _updateNum);\\r\\n        // check if all vaults reported their snapshot\\r\\n        if(_checkSnapshot()) {\\r\\n            checkedSnapshot[_updateNum] = true;\\r\\n            _updateStats();\\r\\n            // update protocol status to `OPTIMIZING`\\r\\n            protocolStatus = ProtocolStatus.OPTIMIZING;\\r\\n            emit ProtolcolStatusUpdated(ProtocolStatus.OPTIMIZING);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Accept settle reports from the local vaults.\\r\\n    function _settleReport(uint16 _srcchainId, uint256 _updateNum) internal {\\r\\n        if(updateNum != _updateNum) return;\\r\\n        if(settleFlag[updateNum][_srcchainId] == true) return;\\r\\n        if(checkedSettle[_updateNum] == true) return;\\r\\n        \\r\\n        settleFlag[updateNum][_srcchainId] = true;\\r\\n        emit SettleReported(_srcchainId, _updateNum);\\r\\n        // check if all vaults are settled\\r\\n        if(_checkSettle()) {\\r\\n            checkedSettle[_updateNum] = true;\\r\\n            updateNum++;\\r\\n            // update protocol status to `IDLE`\\r\\n            protocolStatus = ProtocolStatus.IDLE;\\r\\n            emit ProtolcolStatusUpdated(ProtocolStatus.IDLE);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @notice Update stats with the snapshots from all local vaults.\\r\\n    function _updateStats() internal {\\r\\n        uint256 _totalCoinMD = 0;\\r\\n        uint256 _totalMLP = 0;\\r\\n        // Calculate the total amount of stablecoin and mozaic LP token.\\r\\n        for (uint i; i < supportedChainIds.length; ++i) {\\r\\n            MozBridge.Snapshot memory report = snapshotReported[supportedChainIds[i]];\\r\\n            _totalCoinMD = _totalCoinMD + report.totalStablecoin;\\r\\n            _totalMLP = _totalMLP + report.totalMozaicLp;\\r\\n        }\\r\\n        totalCoinMD = _totalCoinMD;\\r\\n        totalMLP = _totalMLP;\\r\\n        emit UpdatedTotalAsset(_totalCoinMD, _totalMLP);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if get shapshots from all supported chains.\\r\\n    function _checkSnapshot() internal view returns (bool) {\\r\\n      for(uint256 i = 0; i < supportedChainIds.length; ++i) {\\r\\n        if(snapshotFlag[updateNum][supportedChainIds[i]] == false) return false;\\r\\n      }\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if get settle reports from all supported chains.\\r\\n    function _checkSettle() internal view returns (bool) {\\r\\n      for(uint256 i = 0; i < supportedChainIds.length; ++i) {\\r\\n        if(settleFlag[updateNum][supportedChainIds[i]] == false) return false;\\r\\n      }\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    // Fallback function is called when msg.data is not empty\\r\\n    fallback() external payable {}\\r\\n    function getBalance() public view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    function withdraw(uint256 _amount) public onlyOwner {\\r\\n        // get the amount of Ether stored in this contract\\r\\n        uint amount = address(this).balance;\\r\\n        require(amount >= _amount, \\\"Controller: Invalid withdraw amount.\\\");\\r\\n        // send Ether to treasury\\r\\n        // Treasury can receive Ether since the address of treasury is payable\\r\\n        require(treasury != address(0), \\\"Controller: Invalid treasury\\\");\\r\\n        (bool success, ) = treasury.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Controller: Failed to send Ether\\\");\\r\\n        emit Withdraw(_amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BaseOFTV2.sol\\\";\\n\\ncontract OFTV2 is BaseOFTV2, ERC20 {\\n\\n    uint internal immutable ld2sdRate;\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _sharedDecimals, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\\n        uint8 decimals = decimals();\\n        require(_sharedDecimals <= decimals, \\\"OFT: sharedDecimals must be <= decimals\\\");\\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        // if transfer from this contract, no need to check allowance\\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\\n        _transfer(_from, _to, _amount);\\n        return _amount;\\n    }\\n\\n    function _ld2sdRate() internal view virtual override returns (uint) {\\n        return ld2sdRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/BaseOFTV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OFTCoreV2.sol\\\";\\nimport \\\"./IOFTV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\\n\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\\n        _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    /************************************************************************\\n    * public view functions\\n    ************************************************************************/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint);\\n\\n    function token() public view virtual override returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTCoreV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../../../util/ExcessivelySafeCall.sol\\\";\\nimport \\\"./ICommonOFT.sol\\\";\\nimport \\\"./IOFTReceiverV2.sol\\\";\\n\\nabstract contract OFTCoreV2 is NonblockingLzApp {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint8 public constant PT_SEND = 0;\\n    uint8 public constant PT_SEND_AND_CALL = 1;\\n\\n    uint8 public immutable sharedDecimals;\\n\\n    bool public useCustomAdapterParams;\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event NonContractAddress(address _address);\\n\\n    // _sharedDecimals should be the minimum decimals on all chains\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        sharedDecimals = _sharedDecimals;\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\\n        require(_msgSender() == address(this), \\\"OFTCore: caller must be OFTCore\\\");\\n\\n        // send\\n        _amount = _transferFrom(address(this), _to, _amount);\\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\\n\\n        // call\\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendAndCall()\\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint8 packetType = _payload.toUint8(0);\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else if (packetType == PT_SEND_AND_CALL) {\\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\\n        if (to == address(0)) {\\n            to = address(0xdead);\\n        }\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        // encode the msg.sender into the payload instead of _from\\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\\n\\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\\n        uint amount = _sd2ld(amountSD);\\n\\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\\n        if (!credited) {\\n            amount = _creditTo(_srcChainId, address(this), amount);\\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\\n        }\\n\\n        if (!_isContract(to)) {\\n            emit NonContractAddress(to);\\n            return;\\n        }\\n\\n        // workaround for stack too deep\\n        uint16 srcChainId = _srcChainId;\\n        bytes memory srcAddress = _srcAddress;\\n        uint64 nonce = _nonce;\\n        bytes memory payload = _payload;\\n        bytes32 from_ = from;\\n        address to_ = to;\\n        uint amount_ = amount;\\n        bytes memory payloadForCall_ = payloadForCall;\\n\\n        // no gas limit for the call if retry\\n        uint gas = credited ? gasleft() : gasForCall;\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas));\\n\\n        if (success) {\\n            bytes32 hash = keccak256(payload);\\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\\n        } else {\\n            // store the failed message into the nonblockingLzApp\\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\\n        }\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _ld2sd(uint _amount) internal virtual view returns (uint64) {\\n        uint amountSD = _amount / _ld2sdRate();\\n        require(amountSD <= type(uint64).max, \\\"OFTCore: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _sd2ld(uint64 _amountSD) internal virtual view returns (uint) {\\n        return _amountSD * _ld2sdRate();\\n    }\\n\\n    function _removeDust(uint _amount) internal virtual view returns (uint amountAfter, uint dust) {\\n        dust = _amount % _ld2sdRate();\\n        amountAfter = _amount - dust;\\n    }\\n\\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\\n    }\\n\\n    function _decodeSendPayload(bytes memory _payload) internal virtual view returns (address to, uint64 amountSD) {\\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n    }\\n\\n    function _encodeSendAndCallPayload(address _from, bytes32 _toAddress, uint64 _amountSD, bytes memory _payload, uint64 _dstGasForCall) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(\\n            PT_SEND_AND_CALL,\\n            _toAddress,\\n            _amountSD,\\n            _addressToBytes32(_from),\\n            _dstGasForCall,\\n            _payload\\n        );\\n    }\\n\\n    function _decodeSendAndCallPayload(bytes memory _payload) internal virtual view returns (bytes32 from, address to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n        from = _payload.toBytes32(41);\\n        dstGasForCall = _payload.toUint64(73);\\n        payload = _payload.slice(81, _payload.length - 81);\\n    }\\n\\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\\n\\n    function _ld2sdRate() internal view virtual returns (uint);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ICommonOFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTReceiverV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IPlugin.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"name\":\"ActionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pluginId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pluginAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pluginReward\",\"type\":\"address\"}],\"name\":\"AddPlugin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pluginId\",\"type\":\"uint8\"}],\"name\":\"RemovePlugin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bridgeFunctionType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RetryRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bridgeFunctionType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Revert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mozBridge\",\"type\":\"address\"}],\"name\":\"SetBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"name\":\"SetMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mozLP\",\"type\":\"address\"}],\"name\":\"SetMozaicLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateNum\",\"type\":\"uint256\"}],\"name\":\"SettleReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStablecoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMozaicLp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MozBridge.Snapshot\",\"name\":\"snapshot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateNum\",\"type\":\"uint256\"}],\"name\":\"SnapshotReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStablecoin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMozaicLp\",\"type\":\"uint256\"}],\"name\":\"TakeSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIFI_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOZAIC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"addDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_pluginAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pluginReward\",\"type\":\"address\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountMLP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountMD\",\"type\":\"uint256\"}],\"name\":\"amountMDtoMLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountMLP\",\"type\":\"uint256\"}],\"name\":\"amountMLPtoMD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bridgeViaLifi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"convertLDtoMD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountMD\",\"type\":\"uint256\"}],\"name\":\"convertMDtoLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"enum IPlugin.ActionType\",\"name\":\"_actionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAvailbleAmountPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlugins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getPluginAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPluginIds\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getPluginReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getStakedAmountPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isAcceptingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStablecoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMozaicLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mozBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mozLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pluginIds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_totalCoinMD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalMLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updateNum\",\"type\":\"uint256\"}],\"name\":\"reportSettled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_updateNum\",\"type\":\"uint256\"}],\"name\":\"reportSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"retryRevert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revertLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mozBridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mozLP\",\"type\":\"address\"}],\"name\":\"setMozaicLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"setRevertLookup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalCoinMD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalMLP\",\"type\":\"uint256\"}],\"name\":\"settleRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"supportedPlugins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pluginAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pluginReward\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStablecoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMozaicLp\",\"type\":\"uint256\"}],\"internalType\":\"struct MozBridge.Snapshot\",\"name\":\"snapshot\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinMD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000066", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}