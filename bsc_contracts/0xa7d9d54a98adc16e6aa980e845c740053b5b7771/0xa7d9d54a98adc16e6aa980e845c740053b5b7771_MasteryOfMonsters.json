{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\n    Welcome to the immersive and \r\n    action-packed world of Mastery of Monsters, \r\n    an innovative game that offers players the opportunity \r\n    to become true Masters of Monsters. In this \r\n    whitepaper, we will explore in detail all \r\n    aspects of this universe, from the game's \r\n    overview to the economy, technology, \r\n    game mechanics and community interaction.\r\n\r\n\r\n    Mastery of Monsters is more than just \r\n    a game, it's an immersive experience that \r\n    combines strategy, action and the \r\n    possibility of making real profits through \r\n    trading valuable digital assets. Embark on this \r\n    fascinating journey where the \r\n    line between virtual achievements and \r\n    real-world profits blurs.\r\n\r\n    https://masteryofmonsters.com/\r\n    https://mastery-of-monsters.gitbook.io/whitepaper-en/\r\n    https://masteryofmonsters.com/whitepaper-en\r\n    https://twitter.com/MasteryMonsters\r\n    https://t.me/MasteryOfMonsters\r\n\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface ITeamWallet {\r\n    function setDistribution() external;\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n   function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n    function _create(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: create to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract MasteryOfMonsters is ERC20, Ownable  {\r\n\r\n    struct Buy {\r\n        uint256 marketing;\r\n        uint256 dev;\r\n        uint256 team;\r\n        uint256 p2e;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    struct Sell {\r\n        uint256 marketing;\r\n        uint256 dev;\r\n        uint256 team;\r\n        uint256 p2e;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    struct TransferFees {\r\n        uint256 marketing;\r\n        uint256 dev;\r\n        uint256 team;\r\n        uint256 p2e;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    Buy public buy;\r\n    Sell public sell;\r\n    TransferFees public transferFees;\r\n\r\n    uint256 public totalBuy;\r\n    uint256 public totalSell;\r\n    uint256 public totalFees;\r\n    uint256 public totalTransferFees;\r\n\r\n    uint256 public maxBuy;\r\n    uint256 public maxWallet;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapping;\r\n\r\n    uint256 public _decimals;\r\n\r\n    uint256 public triggerSwapTokensToUSD;\r\n\r\n    address private addressPCVS2    = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address private addressWBNB     = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n    address private addressUSDT     = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    address public devWallet        = address(0x904d1de8D72ebB368D5e85aa0F3DD97d23016B9d);\r\n    address public teamWallet       = address(0x4F9B5E85AE117086B122c02E4a2991d08a45123b);\r\n    address public marketingWallet  = address(0x6f70139c4379bbe9e6DfF0766fF85A5cAD440Fb0);\r\n    address public p2eWallet        = address(0x653e96b10F94094D9Ef1DaEb9b1D8a45D870799D);\r\n\r\n    //Fees on transact\r\n    mapping(address => bool) public _isExcept;\r\n    mapping(address => bool) public mappingAuth;\r\n    address[] allAddressesAuth;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SendToWhiteList(uint256 sendToWhiteList);\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExceptEvent(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event UpdatedBuyFees(\r\n        uint256 buyMarketing, \r\n        uint256 buyDev, \r\n        uint256 buyTeam, \r\n        uint256 buyP2E, \r\n        uint256 buyLiquidity\r\n        );\r\n\r\n    event UpdatedSellFees(\r\n        uint256 sellMarketing, \r\n        uint256 sellDev, \r\n        uint256 sellTeam, \r\n        uint256 sellP2E, \r\n        uint256 sellLiquidity\r\n        );\r\n        \r\n    event UpdatedTransferFees(\r\n        uint256 transferMarketing, \r\n        uint256 transferDev, \r\n        uint256 transferTeam, \r\n        uint256 transferP2E, \r\n        uint256 transferLiquidity\r\n        );\r\n\r\n    event UpdatedWallets(\r\n        address _devWallet,\r\n        address _teamWallet,\r\n        address _marketingWallet,\r\n        address _p2eWallet\r\n        );\r\n\r\n    event SendToMarketingWallet(uint256 fundsToMarketing);\r\n    event SendToDevWallet(uint256 fundsToDev);\r\n    event SendToP2EWallet(uint256 fundsToP2E);\r\n    event SendToTeamWallet(uint256 fundsToTeam);\r\n    \r\n    event AddLiquidity(uint256 tokensToLiquidity);\r\n\r\n    event SettedAuthWallet(address indexed account, bool boolean);\r\n\r\n    event SettedTriggerSwapTokensToUSD(uint256 _triggerSwapTokensToUSD);\r\n\r\n    event SettedMaxBuy(uint256 _maxBuy);\r\n    event SettedMaxWallet(uint256 _maxWallet);\r\n\r\n    constructor() ERC20(\"Mastery Of Monsters\", \"MOM\") Ownable(_msgSender()) {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addressPCVS2);\r\n\r\n        // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair      = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router     = _uniswapV2Router;\r\n        uniswapV2Pair   = _uniswapV2Pair;\r\n\r\n        buy.marketing = 250;\r\n        buy.dev = 250;\r\n        buy.team = 238;\r\n        buy.p2e = 100;\r\n        buy.liquidity = 50;\r\n        totalBuy = buy.marketing + buy.dev + buy.team + buy.p2e + buy.liquidity;\r\n\r\n        sell.marketing = 250;\r\n        sell.dev = 250;\r\n        sell.team = 238;\r\n        sell.p2e = 100;\r\n        sell.liquidity = 50;\r\n        totalSell = sell.marketing + sell.dev + sell.team + sell.p2e + sell.liquidity;\r\n\r\n        totalFees = totalBuy + totalSell;\r\n\r\n        transferFees.marketing = 250;\r\n        transferFees.dev = 250;\r\n        transferFees.team = 238;\r\n        transferFees.p2e = 100;\r\n        transferFees.liquidity = 50;\r\n\r\n        totalTransferFees = \r\n        transferFees.marketing + transferFees.dev + transferFees.team + transferFees.p2e + transferFees.liquidity;\r\n\r\n        _decimals = 18;\r\n\r\n        maxBuy = 500000 * 10 ** _decimals;\r\n        maxWallet = 2000000 * 10 ** _decimals;\r\n\r\n        triggerSwapTokensToUSD = 10000 * (10** _decimals);\r\n\r\n        setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        except(owner(), true);\r\n        except(address(this), true);\r\n\r\n        mappingAuth[owner()] = true;\r\n\r\n        /*\r\n            _create is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n\r\n        */\r\n        _create(owner(), 10000000 * (10 ** _decimals));\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    modifier onlyAuth() {\r\n        require(_msgSender() == owner() || mappingAuth[_msgSender()], \"Without permission\");\r\n        _;\r\n    }\r\n\r\n    function uncheckedI (uint256 i) private pure returns (uint256) {\r\n        unchecked { return i + 1; }\r\n    }\r\n\r\n    function whiteList (\r\n        address[] memory addresses, \r\n        uint256[] memory tokens) external onlyOwner() {\r\n        uint256 totalTokens = 0;\r\n        for (uint i = 0; i < addresses.length; i = uncheckedI(i)) {  \r\n            unchecked { _balances[addresses[i]] += tokens[i]; }\r\n            unchecked { totalTokens += tokens[i]; }\r\n            emit Transfer(msg.sender, addresses[i], tokens[i]);\r\n        }\r\n        //Will never result in overflow because solidity >= 0.8.0 reverts to overflow\r\n        _balances[msg.sender] -= totalTokens;\r\n\r\n        emit SendToWhiteList(totalTokens);\r\n    }\r\n\r\n    //Update uniswap v2 address when needed\r\n    //address(this) and tokenBpair are the tokens that form the pair\r\n    function updateUniswapV2Router(address newAddress, address tokenBpair) external onlyOwner() {\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n\r\n        address addressPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this),tokenBpair);\r\n        \r\n        if (addressPair == address(0)) {\r\n            uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), tokenBpair);\r\n        } else {\r\n            uniswapV2Pair = addressPair;\r\n\r\n        }\r\n    }\r\n\r\n    function balanceBNB(address to, uint256 amount) external onlyOwner() {\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function balanceERC20 (address token, address to, uint256 amount) external onlyOwner() {\r\n        require(token != address(this), \"Cannot claim native tokens\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function except(address account, bool isExcept) public onlyOwner() {\r\n        _isExcept[account] = isExcept;\r\n\r\n        emit ExceptEvent(account, isExcept);\r\n    }\r\n\r\n    function getIsExcept(address account) external view returns (bool) {\r\n        return _isExcept[account];\r\n    }\r\n\r\n    function getAllAddressesAuthLength() external view returns (uint256) {\r\n        return allAddressesAuth.length;\r\n    }\r\n\r\n    function getAllAddressesAuth() external view returns (address[] memory) {\r\n        return allAddressesAuth;\r\n    }\r\n\r\n    function setMappingAuth(address account, bool boolean) external onlyOwner() {\r\n        mappingAuth[account] = boolean;\r\n\r\n        // Stores all addresses that at some point have already been set as Auth\r\n        if (boolean)\r\n        allAddressesAuth.push(account);\r\n\r\n        except(account,boolean);\r\n\r\n        emit SettedAuthWallet(account,boolean);\r\n    }\r\n\r\n    //Percentage on tokens charged for each transaction\r\n    function setBuy(\r\n        uint256 buyMarketing,\r\n        uint256 buyDev,\r\n        uint256 buyTeam,\r\n        uint256 buyP2E,\r\n        uint256 buyLiquidity\r\n    ) external onlyOwner() {\r\n\r\n        buy.marketing = buyMarketing;\r\n        buy.dev = buyDev;\r\n        buy.team = buyTeam;\r\n        buy.p2e = buyP2E;\r\n        buy.liquidity = buyLiquidity;\r\n        totalBuy = buy.marketing + buy.dev + buy.team + buy.p2e + buy.liquidity;\r\n\r\n        totalFees = totalBuy + totalSell;\r\n\r\n        require(totalBuy <= 888 + 112);\r\n\r\n        emit UpdatedBuyFees(buyMarketing, buyDev, buyTeam, buyP2E, buyLiquidity);\r\n    }\r\n\r\n    //Percentage on tokens charged for each transaction\r\n    function setSell(\r\n        uint256 sellMarketing,\r\n        uint256 sellDev,\r\n        uint256 sellTeam,\r\n        uint256 sellP2E,\r\n        uint256 sellLiquidity\r\n        ) external onlyOwner() {\r\n\r\n        sell.marketing = sellMarketing;\r\n        sell.dev = sellDev;\r\n        sell.team = sellTeam;\r\n        sell.p2e = sellP2E;\r\n        sell.liquidity = sellLiquidity;\r\n        totalSell = sell.marketing + sell.dev + sell.team + sell.p2e + sell.liquidity;\r\n\r\n        totalFees = totalBuy + totalSell;\r\n\r\n        require(totalSell <= 888 + 112);\r\n\r\n        emit UpdatedSellFees(sellMarketing, sellDev, sellTeam, sellP2E, sellLiquidity);\r\n\r\n    }\r\n\r\n    //Percentage on tokens charged for each transaction\r\n    function setTransferFees(\r\n        uint256 transferMarketing,\r\n        uint256 transferDev,\r\n        uint256 transferTeam,\r\n        uint256 transferP2E,\r\n        uint256 transferLiquidity\r\n        ) external onlyOwner() {\r\n\r\n        transferFees.marketing = transferMarketing;\r\n        transferFees.dev = transferDev;\r\n        transferFees.team = transferTeam;\r\n        transferFees.p2e = transferP2E;\r\n        transferFees.liquidity = transferLiquidity;\r\n\r\n        totalTransferFees = \r\n        transferFees.marketing + transferFees.dev + transferFees.team + transferFees.p2e + transferFees.liquidity;\r\n\r\n        require(totalTransferFees <= 888 + 112);\r\n\r\n        emit UpdatedTransferFees(transferMarketing, transferDev, transferTeam, transferP2E, transferLiquidity);\r\n\r\n    }\r\n\r\n    //Transaction payable to test that the new addresses will not revert\r\n    function setProjectWallets(\r\n        address _devWallet,\r\n        address _teamWallet,\r\n        address _marketingWallet,\r\n        address _p2eWallet\r\n        ) external onlyOwner() {\r\n\r\n            devWallet           = _devWallet;\r\n            teamWallet          = _teamWallet;\r\n            marketingWallet     = _marketingWallet;\r\n            p2eWallet           = _p2eWallet;\r\n\r\n            emit UpdatedWallets (\r\n                _devWallet, \r\n                _teamWallet, \r\n                _marketingWallet, \r\n                _p2eWallet);\r\n\r\n    }\r\n\r\n    function setMax(uint256 _maxBuy, uint256 _maxWallet) external onlyOwner() {\r\n        maxBuy = _maxBuy;\r\n        maxWallet = _maxWallet;\r\n        require(_maxBuy >= totalSupply() / 500, \"maxBuy invalid\");\r\n        require(_maxWallet >= totalSupply() / 500, \"maxWallet invalid\");\r\n\r\n        emit SettedMaxBuy(_maxBuy);\r\n        emit SettedMaxWallet(_maxWallet);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner() {\r\n        require(automatedMarketMakerPairs[pair] != value,\r\n        \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function settriggerSwapTokensToUSD(uint256 _triggerSwapTokensToUSD) external onlyOwner() {\r\n\r\n        require(_triggerSwapTokensToUSD >= 1000 && \r\n        _triggerSwapTokensToUSD <= 1000000, \"triggerSwapTokensToUSD invalid\");\r\n\r\n        _triggerSwapTokensToUSD = _triggerSwapTokensToUSD * 10 ** _decimals;\r\n\r\n        triggerSwapTokensToUSD = _triggerSwapTokensToUSD;\r\n\r\n        emit SettedTriggerSwapTokensToUSD(triggerSwapTokensToUSD);\r\n    }\r\n\r\n    function _transfer(address from,address to,uint256 amount) internal override {\r\n        require(amount > 0 && amount <= totalSupply() , \"Invalid amount transferred\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        bool canSwap = balanceOf(address(this)) >= triggerSwapTokensToUSD;\r\n\r\n        if (\r\n            canSwap &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            automatedMarketMakerPairs[to] &&\r\n            !_isExcept[from]\r\n            ) {\r\n            swapping = true;\r\n\r\n            //Avoiding division by zero in swapAndSend\r\n            // uint256 _totalFees = totalFees + totalTransferFees, never reverts\r\n            if ((totalFees + totalTransferFees) != 0) {\r\n                swapTokens();\r\n            }\r\n                \r\n            swapping = false;\r\n\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcept[from] || _isExcept[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        uint256 fees;\r\n        if (takeFee  && !swapping) {\r\n\r\n            //buy tokens\r\n            if (automatedMarketMakerPairs[from]) {\r\n                fees = amount * (totalBuy) / (10000);\r\n                require(maxBuy >= amount, \"It exceeds the max buy\");\r\n                require(maxWallet >= _balances[to] + amount, \"It exceeds the max wallet\");\r\n\r\n            //sell tokens\r\n            } else if (automatedMarketMakerPairs[to]) {\r\n                fees = amount * (totalSell) / (10000);\r\n\r\n            //transfer tokens\r\n            } else {\r\n                fees = amount * (totalTransferFees) / (10000);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            \r\n            _balances[from] = senderBalance - amount;\r\n            //When we calculate fees in the previous conditional we guarantee that amount > fees\r\n            _balances[to] += (amount - fees);\r\n            _balances[address(this)] += fees;\r\n            amount = amount - fees;\r\n\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        if (fees != 0) {\r\n            emit Transfer(from, address(this), fees);\r\n        }\r\n\r\n    }\r\n\r\n    //Special function to be used by the game's backend\r\n    //Organized to avoid gas costs\r\n    function transferAuthProject(address to,uint256 amount) external onlyAuth() {\r\n        require(amount > 0 && amount <= totalSupply() , \"Invalid amount transferred\");\r\n\r\n        require(_balances[_msgSender()] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        //Never overflow\r\n        unchecked {\r\n            \r\n            _balances[_msgSender()] -= amount;\r\n            _balances[to] += (amount);\r\n\r\n        }\r\n\r\n        emit Transfer(_msgSender(), to, amount);\r\n\r\n    }\r\n\r\n\r\n    function swapTokens() internal {\r\n\r\n        //Instruction unchecked helps to avoid gas expenses\r\n        unchecked {\r\n\r\n            _approve(address(this), address(addressPCVS2), triggerSwapTokensToUSD);\r\n\r\n            uint256 _totalFees = totalFees + totalTransferFees;\r\n            uint256 _totalFeesLiquidity = buy.liquidity + sell.liquidity + transferFees.liquidity;\r\n            uint256 _fessToUsdt = _totalFees - _totalFeesLiquidity;\r\n\r\n            //totalFees is greater than or equal to (buy.liquidity + sell.liquidity)\r\n            //totalTransferFees is greater than or equal to (transferFees.liquidity)\r\n            //So _totalFees >= _totalFeesLiquidity\r\n            //So (_totalFees - _totalFeesLiquidity) >= 0\r\n            //Never revert by errors\r\n            uint256 tokensToSelltoUSDT = (_fessToUsdt * triggerSwapTokensToUSD) / _totalFees;\r\n            uint256 tokensToSelltoLiquidity = (_totalFeesLiquidity * triggerSwapTokensToUSD) / _totalFees;\r\n\r\n            //Verification required to avoid reverting to variables equal to zero in the Pool LP contract\r\n            if (tokensToSelltoUSDT != 0) {\r\n\r\n                //Selling tokens to distribute\r\n                address[] memory pathUSDT = new address[](3);\r\n                pathUSDT[0]  = address(this);\r\n                pathUSDT[1]  = address(addressWBNB);\r\n                pathUSDT[2]  = address(addressUSDT);\r\n\r\n                uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    tokensToSelltoUSDT,\r\n                    0,\r\n                    pathUSDT,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n\r\n                uint256 balanceUSDT = IERC20(addressUSDT).balanceOf(address(this));\r\n\r\n                uint256 fundsToMarketing = (buy.marketing + sell.marketing + transferFees.marketing) * balanceUSDT / _fessToUsdt;\r\n                uint256 fundsToDev = (buy.dev + sell.dev + transferFees.dev) * balanceUSDT / _fessToUsdt;\r\n                uint256 fundsToP2E = (buy.p2e + sell.p2e + transferFees.p2e) * balanceUSDT / _fessToUsdt;\r\n                // uint256 fundsToTeam = (buy.team + sell.team + transferFees.team) * balanceUSDT / _fessToUsdt;\r\n\r\n                if (fundsToMarketing != 0) {\r\n                    IERC20(addressUSDT).transfer(marketingWallet, fundsToMarketing);      \r\n                    emit SendToMarketingWallet(fundsToMarketing);\r\n                }\r\n\r\n                if (fundsToDev != 0) {\r\n                    IERC20(addressUSDT).transfer(devWallet, fundsToDev);\r\n                    emit SendToDevWallet(fundsToDev);\r\n                }\r\n\r\n                if (fundsToP2E != 0) {\r\n                    IERC20(addressUSDT).transfer(p2eWallet, fundsToP2E);\r\n                    emit SendToP2EWallet(fundsToP2E);\r\n                }\r\n                \r\n                uint256 fundsToTeam = IERC20(addressUSDT).balanceOf(address(this));\r\n\r\n                if (fundsToTeam != 0) {\r\n                    IERC20(addressUSDT).transfer(teamWallet, fundsToTeam);\r\n\r\n                    //Avoids reversal and the possibility of locking sales in this contract\r\n                    //Makes contract security better for the user\r\n                    try ITeamWallet(teamWallet).setDistribution() {\r\n\r\n                    } catch {\r\n\r\n                    }\r\n\r\n                    emit SendToTeamWallet(fundsToTeam);\r\n                }\r\n\r\n            }\r\n\r\n            addLiquidityPool(tokensToSelltoLiquidity);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function addLiquidityPool(uint256 tokensToSelltoLiquidity) internal {\r\n\r\n        //Instruction unchecked helps to avoid gas expenses\r\n        unchecked {\r\n\r\n            //Adding liquidity\r\n            _approve(address(this), address(addressPCVS2), tokensToSelltoLiquidity);\r\n\r\n            if (tokensToSelltoLiquidity != 0) {\r\n\r\n                tokensToSelltoLiquidity = tokensToSelltoLiquidity / 2;\r\n\r\n                uint256 initialBalance = address(this).balance;\r\n\r\n                address[] memory pathLP = new address[](2);\r\n                pathLP[0] = address(this);\r\n                pathLP[1] = address(addressWBNB);\r\n\r\n                uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    tokensToSelltoLiquidity,\r\n                    0,\r\n                    pathLP,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n\r\n                uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n                uniswapV2Router.addLiquidityETH{value: newBalance}(\r\n                    address(this),\r\n                    tokensToSelltoLiquidity,\r\n                    0,\r\n                    0,\r\n                    owner(),\r\n                    block.timestamp\r\n                );\r\n\r\n            }\r\n\r\n            emit AddLiquidity(tokensToSelltoLiquidity);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToLiquidity\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExceptEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsToDev\",\"type\":\"uint256\"}],\"name\":\"SendToDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsToMarketing\",\"type\":\"uint256\"}],\"name\":\"SendToMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsToP2E\",\"type\":\"uint256\"}],\"name\":\"SendToP2EWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsToTeam\",\"type\":\"uint256\"}],\"name\":\"SendToTeamWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendToWhiteList\",\"type\":\"uint256\"}],\"name\":\"SendToWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"boolean\",\"type\":\"bool\"}],\"name\":\"SettedAuthWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"}],\"name\":\"SettedMaxBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"SettedMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_triggerSwapTokensToUSD\",\"type\":\"uint256\"}],\"name\":\"SettedTriggerSwapTokensToUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMarketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyDev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyP2E\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLiquidity\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellDev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellP2E\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferMarketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferDev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTeam\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferP2E\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferLiquidity\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransferFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_p2eWallet\",\"type\":\"address\"}],\"name\":\"UpdatedWallets\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcept\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"balanceBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"balanceERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcept\",\"type\":\"bool\"}],\"name\":\"except\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAddressesAuth\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAddressesAuthLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcept\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappingAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2eWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyP2E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidity\",\"type\":\"uint256\"}],\"name\":\"setBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"boolean\",\"type\":\"bool\"}],\"name\":\"setMappingAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_p2eWallet\",\"type\":\"address\"}],\"name\":\"setProjectWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellP2E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"setSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferP2E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferLiquidity\",\"type\":\"uint256\"}],\"name\":\"setTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_triggerSwapTokensToUSD\",\"type\":\"uint256\"}],\"name\":\"settriggerSwapTokensToUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAuthProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSwapTokensToUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBpair\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"whiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MasteryOfMonsters", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d1889c48252f0d84261df7605592b13be68453d373e1a018e658ca961ad07c3"}