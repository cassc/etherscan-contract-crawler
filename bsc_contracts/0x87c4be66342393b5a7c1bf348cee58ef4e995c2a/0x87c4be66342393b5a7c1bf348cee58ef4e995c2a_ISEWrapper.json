{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IISE.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IISE  {\\n    struct StakerInfo {\\n        uint256 cakeAmount;\\n        bool claimed;\\n        uint256 lastKey;\\n        bool squadNFTBonusClaimed;\\n        uint256 userNFTbalance;\\n    }\\n\\n    struct GainsInfo {\\n        uint256 cakeAmount;\\n        bool claimed;\\n        address[] referrers;\\n    }\\n\\n    function stakerInfo(address) external view returns(StakerInfo memory);\\n    function gainsInfo(address) external view returns(GainsInfo memory);\\n    function totalStakedCake() external view returns(uint256);\\n    function totalNFTHolds() external view returns(uint256);\\n    function startTime() external view returns(uint256);\\n    function period() external view returns(uint256);\\n    function isOver() external view returns(bool);\\n    function claimStartTime() external view returns(uint256);\\n    function claimPeriod() external view returns(uint256);\\n    function claimedAmountForISE() external view returns(uint256);\\n    function claimedAmountForReferral() external view returns(uint256);\\n    function claimedAmountForNFTHolders() external view returns(uint256);\\n    function threshold() external view returns(uint256);\\n    function getClaimAmount(\\n        address user\\n    ) external view returns (uint256 stakedAmount, uint256 referralAmount);\\n    function getClaimForNFTBonus(address user) external view returns (uint256 reward);\\n    function getReferrerInfo(address user) external view returns(address[] memory);\\n    function isValidUser(uint256 key, address user) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interface/IPancakeProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeProfile {\\n    function getUserProfile(address _userAddress)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            bool\\n        );\\n}\"\r\n    },\r\n    \"contracts/interface/ISquadNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ISquadNFT is IERC721 {\\n    function maxSupply() external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interface/IStakeNftUpgradeAble.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakeNftUpgradeAble {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n    function userInfo(uint256 id, address user) external view returns(UserInfo memory);\\n}\"\r\n    },\r\n    \"contracts/ISEWrapper.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at bscscan.com on 2020-09-22\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interface/ISquadNFT.sol\\\";\\nimport \\\"./interface/IStakeNftUpgradeAble.sol\\\";\\nimport \\\"./interface/IPancakeProfile.sol\\\";\\nimport \\\"./interface/IISE.sol\\\";\\n\\ncontract ISEWrapper is Ownable {\\n\\n    struct ClaimInfo {\\n        bool claimed;\\n        bool squadNFTBonusClaimed;\\n        bool referrerClaimed;\\n    }\\n\\n    mapping(address => ClaimInfo) public claimInfo;\\n\\n    IERC20 public constant SQUAD = IERC20(0x6D2d8AD6f7c044fBF7Bbd3677D40FbBA732f8ae1);\\n    ISquadNFT public constant SquadNFT = ISquadNFT(0x0a8901b0E25DEb55A87524f0cC164E9644020EBA);\\n\\n    address public cakeWallet;\\n    address public squadNFTWallet;\\n    address public devWallet;\\n\\n    uint256 public constant ISEbalance = 50_000_000 * (10 ** 18);       // 5% of total amount;\\n    uint256 public constant referralBalance = 5_000_000 * (10 ** 18);   // 0.5% of total amount;\\n    uint256 public constant squadNFTBonus = 10_000_000 * (10 ** 18);    // 1%;\\n\\n    uint256 public claimedAmountForISE;\\n    uint256 public claimedAmountForReferral;\\n    uint256 public claimedAmountForNFTHolders;\\n\\n    uint256 public threshold = 10 ** 18;\\n\\n    address public constant stakeNftUpgradeAble = 0xc7b92e4a5983DeA5751B9cb027b2478388dE353c; \\n    address public constant pancakeProfile = 0xDf4dBf6536201370F95e06A0F8a7a70fE40E388a;\\n    IISE public ise;\\n\\n    bool public enableClaim;\\n    uint256 public stakedNFTAmounts;\\n\\n    event Claim(address indexed user, uint256 amount);\\n    event AirDrop(address indexed user, uint256 amount);\\n    event ClaimForNFTHoldBonus(address indexed user, uint256 amount);\\n\\n    mapping (address => bool) public blackListForNFTBonus;\\n\\n    constructor(address _ISE) {\\n        ise = IISE(_ISE);\\n    }\\n\\n    function startTime() external view returns(uint256) {\\n        return ise.startTime();\\n    }\\n\\n    function claimStartTime() external view returns(uint256) {\\n        return ise.claimStartTime();\\n    }\\n\\n    function claimPeriod() external view returns(uint256) {\\n        return ise.claimPeriod();\\n    }\\n\\n    function isOver() public view returns (bool) {\\n        return ise.isOver();\\n    }\\n\\n    function claim() external {\\n        require(enableClaim, \\\"pause\\\");\\n        require(ise.isOver(), \\\"still ISE\\\");\\n        require(ise.claimStartTime() + ise.claimPeriod() > block.timestamp, \\\"is over claim\\\");\\n        require(!claimInfo[msg.sender].claimed, \\\"claimed\\\");\\n\\n        (uint256 claimAmount, ) = getClaimAmount(msg.sender);\\n        require(claimAmount > 0, \\\"no claim\\\");\\n        claimInfo[msg.sender].claimed = true;\\n        claimedAmountForISE = claimedAmountForISE + claimAmount;\\n\\n        SQUAD.transfer(msg.sender, claimAmount);\\n\\n        emit Claim(msg.sender, claimAmount);\\n    }\\n\\n    function airDropForReferral() external {\\n        require(enableClaim, \\\"pause\\\");\\n        require(ise.isOver(), \\\"still ISE\\\");\\n        require(ise.claimStartTime() + ise.claimPeriod() > block.timestamp, \\\"is over claim\\\");\\n        require(!claimInfo[msg.sender].referrerClaimed, \\\"claimed\\\");\\n\\n        (, uint256 claimAmount) = getClaimAmount(msg.sender);\\n        require(claimAmount > 0, \\\"no claim\\\");\\n        claimInfo[msg.sender].referrerClaimed = true;\\n        claimedAmountForReferral += claimAmount;\\n\\n        SQUAD.transfer(msg.sender, claimAmount);\\n\\n        emit AirDrop(msg.sender, claimAmount);\\n    }\\n\\n    function claimForNFTHoldBonus() external {\\n        require(enableClaim, \\\"pause\\\");\\n        require(ise.isOver(), \\\"still ISE\\\");\\n        require(blackListForNFTBonus[msg.sender] == false, \\\"blacklist\\\");\\n        require(ise.claimStartTime() + ise.claimPeriod() > block.timestamp, \\\"is over claim\\\");\\n        require(!claimInfo[msg.sender].squadNFTBonusClaimed, \\\"claimed\\\");\\n\\n        uint256 claimAmount = getClaimForNFTBonus(msg.sender);\\n        require(claimAmount > 0, \\\"no claim\\\");\\n        claimInfo[msg.sender].squadNFTBonusClaimed = true;\\n        claimedAmountForNFTHolders += claimAmount;\\n        SQUAD.transfer(msg.sender, claimAmount);\\n\\n        emit ClaimForNFTHoldBonus(msg.sender, claimAmount);\\n    }\\n\\n    function getClaimAmount(\\n        address user\\n    ) public view returns (uint256 stakedAmount, uint256 referralAmount) {\\n        (stakedAmount, referralAmount) = ise.getClaimAmount(user);\\n    }\\n\\n    function getClaimForNFTBonus(address user) public view returns (uint256 reward) {\\n        if (ise.stakerInfo(user).squadNFTBonusClaimed == true || ise.totalNFTHolds() == 0) return 0;\\n        uint256 amt = ise.stakerInfo(user).userNFTbalance;\\n        IStakeNftUpgradeAble.UserInfo memory info = IStakeNftUpgradeAble(stakeNftUpgradeAble).userInfo(3, user);\\n        amt += info.amount;\\n        try IPancakeProfile(pancakeProfile).getUserProfile(user) returns(uint256, uint256, uint256, address nft, uint256, bool isActive) {\\n            if (isActive && nft == address(SquadNFT)) amt ++;\\n        } catch {}\\n        \\n        reward = squadNFTBonus * amt / (ise.totalNFTHolds() + stakedNFTAmounts);\\n    }\\n\\n    function getReferrerInfo(address user) external view returns(address[] memory) {\\n        return ise.gainsInfo(user).referrers;\\n    }\\n\\n    function setEnable() external onlyOwner {\\n        require(enableClaim==false, \\\"running\\\");\\n        stakedNFTAmounts = SquadNFT.balanceOf(stakeNftUpgradeAble) + SquadNFT.balanceOf(pancakeProfile);\\n        enableClaim = true;\\n    }\\n\\n    function disable() external onlyOwner {\\n        enableClaim = false;\\n    }\\n\\n    function recoverISERewardToken() external onlyOwner {\\n        require(ise.claimStartTime() + ise.claimPeriod() < block.timestamp, \\\"still claiming\\\");\\n        uint256 balance = ISEbalance - claimedAmountForISE;\\n        claimedAmountForISE = ISEbalance;\\n        SQUAD.transfer(squadNFTWallet, balance / 2);\\n        SQUAD.transfer(devWallet, (balance - balance / 2));\\n    }\\n\\n    function recoverReferralToken() external onlyOwner {\\n        require(ise.claimStartTime() + ise.claimPeriod() < block.timestamp, \\\"still claiming\\\");\\n        uint256 balance = referralBalance - claimedAmountForReferral;\\n        claimedAmountForReferral = referralBalance;\\n        SQUAD.transfer(squadNFTWallet, balance / 2);\\n        SQUAD.transfer(devWallet, balance - balance / 2);\\n    }\\n\\n    function recoverSquadNFTBonusToken() external onlyOwner {\\n        require(ise.claimStartTime() + ise.claimPeriod() < block.timestamp, \\\"still claiming\\\");\\n        uint256 balance = squadNFTBonus - claimedAmountForNFTHolders;\\n        claimedAmountForNFTHolders = squadNFTBonus;\\n        SQUAD.transfer(squadNFTWallet, balance / 2);\\n        SQUAD.transfer(devWallet, balance - balance / 2);\\n    }\\n\\n    function setSquadNFTWallet(address _wallet) external onlyOwner {\\n        squadNFTWallet = _wallet;\\n    }\\n\\n    function setDevWallet(address _wallet) external onlyOwner {\\n        devWallet = _wallet;\\n    }\\n\\n    function setThreshold(uint256 _amount) external onlyOwner {\\n        threshold = _amount;\\n    }\\n\\n    function isValidUser(uint256 key, address user) public view returns (bool) {\\n        return ise.isValidUser(key, user);\\n    }\\n\\n    function editBlackList(address[] memory users, bool flag) onlyOwner external {\\n        for (uint i = 0; i < users.length; i++) {\\n            blackListForNFTBonus[users[i]] = flag;\\n        }\\n    }\\n\\n    function recoverAlltoken() onlyOwner external {\\n        SQUAD.transfer(msg.sender, SQUAD.balanceOf(address(this)));\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ISE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimForNFTHoldBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ISEbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SQUAD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SquadNFT\",\"outputs\":[{\"internalType\":\"contract ISquadNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListForNFTBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimForNFTHoldBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"squadNFTBonusClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"referrerClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmountForISE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmountForNFTHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmountForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"editBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimForNFTBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferrerInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isValidUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ise\",\"outputs\":[{\"internalType\":\"contract IISE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverAlltoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverISERewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverReferralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverSquadNFTBonusToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setSquadNFTWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadNFTBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadNFTWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeNftUpgradeAble\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedNFTAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ISEWrapper", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000047051ac7de314f3844fb76b338f21a834b6bab74", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}