{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-22\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n//\r\n// Badonkadonkeykong ($DONG) is a reflections token with the ability to change its reflected token at any time\r\n// Total Tax: 9% (Reflections: 6% | Liquidity: 3%)\r\n//\r\n// Website: Under Construction\r\n// Telegram: https://t.me/Badonkadonkeykong\r\n\r\npragma solidity ^0.8.11;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    } \r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function process(uint256 gas) external;\r\n    function claimDividend() external;\r\n    function deposit() external payable;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n\tfunction decideCoin(address coinAddress) external;\r\n\tfunction setDistributionCriteriaNoPeriod(uint256 _minTokens, uint8 _decimalPlaces) external;\r\n\tfunction setDistributionCriteriaTokens(uint256 _minPeriod, uint256 _minTokens, uint8 _decimalPlaces) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n    IBEP20 reflectingToken = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); // Mainnet - BUSD Token\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Mainnet - WBNB Token\r\n    address private _reflectingTokenAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Mainnet - BUSD Token\r\n//    IBEP20 reflectingToken = IBEP20(0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee); // Testnet - BUSD Token\r\n//    address WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // Testnet - WBNB Token\r\n//    address private _reflectingTokenAddress = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee; // Testnet - BUSD Token\r\n\r\n    IDEXRouter router;\r\n    mapping (address => Share) public shares;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    uint256 public totalShares;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    address[] shareholders;\r\n    function getShareholdersCount() external view onlyToken returns (uint256){\r\n        return shareholders.length;\r\n    }\r\n    uint256 public minPeriod = 1 hours; // min 1 hour delay\r\n    uint256 public minDistribution = 1 * (10 ** 18); // 1 coin worth minimum auto send, 18 decimal places - try to make this equate to $1 worth\r\n    uint256 public maxReflectionsWallet = 0; // Able to set max wallet size for tokens which support it, default to 0, call outside of setRewardsCoin\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 currentIndex;\r\n    bool initialized;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    function decideCoin(address coinAddress) external override onlyToken {\r\n        IBEP20 newCoin = IBEP20(coinAddress);\r\n        _reflectingTokenAddress = coinAddress;\r\n        reflectingToken = newCoin;\r\n    }\r\n\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    // In case BNB needs to be injected to the distributor for gas for any reason\r\n    receive() external payable { }\r\n\r\n    constructor(address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n//  \t\t: IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // Testnet\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteriaNoPeriod(uint256 _minTokens, uint8 _decimalPlaces) external override onlyToken {\r\n        minDistribution = uint256(_minTokens * (10 ** _decimalPlaces));\r\n    }\r\n\r\n    function setDistributionCriteriaTokens(uint256 _minPeriod, uint256 _minTokens, uint8 _decimalPlaces) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = uint256(_minTokens * (10 ** _decimalPlaces));\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    // Allows the distributor contract to get paid bnb, which it then uses to wrap to the reflecting token\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = reflectingToken.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(reflectingToken);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = reflectingToken.balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n    \r\n    // Goes through the list of shareholders to determine which should be distributed dividends, does this until it runs out of its allocated gas\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) { return; }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            reflectingToken.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend() external override {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    // Debug function - clears reflections tokens of too small an amount to be reflected to holders\r\n    function clearStuckRewards(address _address) external onlyToken {\r\n        reflectingToken.transfer(_address, reflectingToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function checkForMaxHold() external onlyToken view returns (bool) {\r\n        if ( reflectingToken.balanceOf(address(this)) > maxReflectionsWallet.sub(maxReflectionsWallet.div(4)) ){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Can set the amount of tokens required for a maxxi, would have to distribute after this amount\r\n    function setMaxWallet(uint256 _maxTokens) external onlyToken {\r\n        maxReflectionsWallet = _maxTokens;\r\n    }\r\n\r\n}\r\n\r\ncontract Badonkadonkeykong is IBEP20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string _name = \"Badonkadonkeykong\";\r\n    string _symbol = \"DONG\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 constant _totalSupply = 10 ** 9 * (10 ** _decimals); // 1B tokens\r\n    uint256 constant _maxHold = _totalSupply / 100; // 1% max wallet\r\n    uint256 constant _feeDenominator = 1000;\r\n    uint256 public liquidityFee = 30;\r\n    uint256 public reflectionFee = 60;\r\n    uint256 public totalFee = liquidityFee + reflectionFee; // Reflections fee - 6%, Liquidity fee - 3%\r\n    uint256 _maxReflectionsWallet = 0; // Able to set max wallet size for tokens which support it, default to 0, call outside of setRewardsCoin\r\n    uint256 distributorGas = 600000;\r\n    uint256 launchedAt;\r\n    uint256 private _swapThreshold = _totalSupply / 5000; // 0.02% - This will be gas heavy at launch but be much less so over time\r\n    function getSwapThreshold() public view returns (uint256) { return _swapThreshold; }\r\n    address public autoLiquidityReceiver;\r\n    address public reflectingTokenAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Mainnet - BUSD Token\r\n//    address public reflectingTokenAddress = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee; // Testnet - BUSD Token\r\n\taddress constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Mainnet - WBNB Token\r\n//    address constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // Testnet - WBNB Token\r\n    address public coinDecider;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isMaxHoldExempt;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n    address[] pairs;\r\n    address pancakeV2BNBPair;\r\n    IDEXRouter router;\r\n    DividendDistributor distributor;\r\n    bool liquifyEnabled = true;\r\n    bool feesOnNormalTransfers = false;\r\n    bool swapEnabled = true;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    event AutoLiquify(uint256 amountToLiquify, uint256 amountBNBLiquidity);\r\n\r\n    receive() external payable { }\r\n\r\n    // IBEP20 implementation\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\r\n    constructor() Ownable() {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n\t//\trouter = IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // Testnet\r\n        pancakeV2BNBPair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n    \tautoLiquidityReceiver = DEAD;\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n        pairs.push(pancakeV2BNBPair);\r\n        distributor = new DividendDistributor(address(router));\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[pancakeV2BNBPair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isMaxHoldExempt[DEAD] = true;\r\n        isMaxHoldExempt[pancakeV2BNBPair] = true;\r\n        isMaxHoldExempt[address(this)] = true;\r\n        isMaxHoldExempt[msg.sender] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        coinDecider = msg.sender;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function getTotalFee() public view returns (uint256) {\r\n        if(launchedAt + 1 >= block.number){ return _feeDenominator.sub(1); }\r\n        return totalFee;\r\n    }\r\n\r\n    function setSwapThresholdDiv(uint256 _div) public onlyDecider {\r\n        _swapThreshold = _totalSupply / _div;\r\n    }\r\n\r\n    // Set without affecting anything else just the address, for when decimals and price remain the same (such as when changing between stablecoins)\r\n    function setRewardsCoin(address coinAddress, bool clear) public onlyDecider {\r\n        if (clear) {\r\n            clearDistributor();\r\n        }\r\n        distributor.decideCoin(coinAddress);\r\n        reflectingTokenAddress = coinAddress;\r\n    }\r\n\r\n    function setTokenDistributionCriteria(uint256 _minTokens, uint8 _decimalPlaces) public onlyDecider {\r\n        distributor.setDistributionCriteriaNoPeriod(_minTokens, _decimalPlaces);\r\n    }\r\n    \r\n    function setRewardsCoin(address coinAddress, uint256 _minTokens, uint8 _decimalPlaces, bool clear) public onlyDecider {\r\n        if (clear) {\r\n            clearDistributor();\r\n        }\r\n        distributor.decideCoin(coinAddress);\r\n        distributor.setDistributionCriteriaNoPeriod(_minTokens, _decimalPlaces);\r\n        reflectingTokenAddress = coinAddress;\r\n    }\r\n\r\n    function setRewardsCoin(address coinAddress, uint256 _minPeriod, uint256 _minTokens, uint8 _decimalPlaces, bool clear) public onlyDecider {\r\n        if (clear) {\r\n            clearDistributor();\r\n        }\r\n        distributor.decideCoin(coinAddress);\r\n        distributor.setDistributionCriteriaTokens(_minPeriod, _minTokens, _decimalPlaces);\r\n        reflectingTokenAddress = coinAddress;\r\n    }\r\n\r\n    function setMaxWallet(uint256 _maxTokens) public onlyDecider {\r\n        _maxReflectionsWallet = _maxTokens;\r\n        distributor.setMaxWallet(_maxTokens);\r\n    }\r\n\r\n    function setDistributorGasSettings(uint256 gas) public onlyDecider {\r\n        require(gas <= 5000000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setTokenName(string memory _newName, bool append) public onlyDecider {\r\n        if (append) {\r\n            _name = appendName(_newName);\r\n        }\r\n        else {\r\n            _name = _newName;\r\n        }\r\n    }\r\n\r\n    function appendName(string memory _rewardTokenName) internal view returns (string memory) {\r\n        return string(abi.encodePacked(_name, \": \", _rewardTokenName));\r\n    }\r\n\r\n    event DeciderTransferred (address oldDecider, address newDecider);\r\n\r\n    // No, this is not a fake renounce. OnlyDecider functions allow the deployer to set the reflected coin and acccess debug functions\r\n    // Taxes, supply, and anything else that can be used to scam people are unable to be changed post-deployment\r\n    modifier onlyDecider {\r\n        require(_isCoinDecider(msg.sender), \"Only the coin decider can do this.\"); _;\r\n    }\r\n\r\n    function _isCoinDecider(address account) internal view returns (bool) {\r\n        return account == coinDecider;\r\n    }\r\n\r\n    // Can be used to change the person who decides the coin besides the deployer, and can be used to delegate it to a separate contract in the future\r\n    function transferCoinDecider(address newDecider) public onlyDecider {\r\n        address oldDecider = coinDecider;\r\n        coinDecider = newDecider;\r\n        emit DeciderTransferred(oldDecider, newDecider);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != ~uint256(0)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        if(shouldSwapBack()){ swapBack(); } // This is what engages the \"reflections\" token sell mechanism\r\n        if(!launched() && recipient == pancakeV2BNBPair){ require(_balances[sender] > 0); launch(); }\r\n        if(!isMaxHoldExempt[recipient]){\r\n            require((_balances[recipient] + (amount - amount * totalFee / _feeDenominator)) <= _maxHold, \"Wallet cannot hold more than 1%\");\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n        try distributor.process(distributorGas) {} catch {}\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, ~uint256(0));\r\n    }\r\n\r\n    // Checking if the sender is a liqpair controls whether fees are taken on buy or sell (in this case it's both)\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient] || !launched()) return false;\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (sender == liqPairs[i] || recipient == liqPairs[i]) return true;\r\n        }\r\n        return feesOnNormalTransfers;\r\n    }\r\n\r\n    // Refers to taking tax on buys and sells\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee()).div(_feeDenominator);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n    \r\n    // Determines if the transaction is a sell from pcs or a transfer of tokens, as well as whether the swapThreshold has been met\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pancakeV2BNBPair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= _swapThreshold;\r\n    }\r\n    \r\n    // Swapback refers to swapping token for BNB from the contract\r\n    function swapBack() internal swapping {\r\n        uint256 swapLiquidityFee = liquifyEnabled ? liquidityFee : 0;\r\n        uint256 amountToLiquify = _swapThreshold.mul(swapLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = _balances[address(this)].sub(amountToLiquify);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        uint256 balanceBefore = address(this).balance;\r\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        )\r\n        {\r\n            uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n            uint256 totalBNBFee = totalFee.sub(swapLiquidityFee.div(2));\r\n            uint256 amountBNBLiquidity = amountBNB.mul(swapLiquidityFee).div(totalBNBFee).div(2);\r\n            uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n            try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n            if(amountToLiquify > 0){\r\n                try router.addLiquidityETH{ value: amountBNBLiquidity }(\r\n                    address(this),\r\n                    amountToLiquify,\r\n                    0,\r\n                    0,\r\n                    autoLiquidityReceiver,\r\n                    block.timestamp\r\n                ) {\r\n                    emit AutoLiquify(amountToLiquify, amountBNBLiquidity);\r\n                } catch {\r\n                    emit AutoLiquify(0, 0);\r\n                }\r\n            }\r\n        } catch {}\r\n        if (_maxReflectionsWallet > 0 && distributor.checkForMaxHold()){\r\n            try distributor.process(distributorGas) {} catch {}\r\n        }\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    // Allows us to see how much supply is actually held outside of pcs and burn addresses, this can also be used for calculating a dynamic _swapThreshold\r\n    function getActiveSupply() public view returns (uint256) {\r\n        return getCirculatingSupply().sub(balanceOf(pancakeV2BNBPair));\r\n    }\r\n\r\n    function getShareholdersCount() public view onlyDecider returns (uint256) {\r\n        return distributor.getShareholdersCount();\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend();\r\n    }\r\n\r\n    // Debug function - Distributes stuck BNB to coin decider (I have yet to see this happen, but it's possible when switching between reflected coins)\r\n    function clearStuckBNB() public onlyDecider {\r\n        payable(coinDecider).transfer(address(this).balance);\r\n    }\r\n\r\n    // Debug function - In case the contract wallet still gets fat on accident and needs to be MILKED\r\n    function clearStuckToken() public onlyDecider {\r\n        if(shouldSwapBack()){\r\n            swapBack();\r\n        }\r\n    }\r\n\r\n    // Reflects the remaining token to holders, can be called before changing the reflected coin by passing bool clear as true\r\n    function clearDistributor() internal {\r\n        try distributor.process(distributorGas) {} catch {}\r\n    }\r\n\r\n    // Debug function - Manual processing of reflections distributor\r\n    function distributorProcess() public onlyDecider {\r\n        try distributor.process(distributorGas) {} catch {}\r\n    }\r\n\r\n    // Debug function - Manual processing of reflections distributor with gas override\r\n    function distributorProcessOverride(uint256 _gasOverride) public onlyDecider {\r\n        try distributor.process(_gasOverride) {} catch {}\r\n    }\r\n\r\n    // Debug function - Anything leftover from rewards that was too small to be distributed as reflections is moved to decider to help pay for gas fees on the calls\r\n    function clearStuckDistributorRewards() public onlyDecider {\r\n        distributor.clearStuckRewards(coinDecider);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNBLiquidity\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDecider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDecider\",\"type\":\"address\"}],\"name\":\"DeciderTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckDistributorRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinDecider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasOverride\",\"type\":\"uint256\"}],\"name\":\"distributorProcessOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareholdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorGasSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimalPlaces\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"clear\",\"type\":\"bool\"}],\"name\":\"setRewardsCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimalPlaces\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"clear\",\"type\":\"bool\"}],\"name\":\"setRewardsCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"clear\",\"type\":\"bool\"}],\"name\":\"setRewardsCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimalPlaces\",\"type\":\"uint8\"}],\"name\":\"setTokenDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"append\",\"type\":\"bool\"}],\"name\":\"setTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDecider\",\"type\":\"address\"}],\"name\":\"transferCoinDecider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Badonkadonkeykong", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5c45cbc4a1451e8885cf4a0cb5b9989bbc24c3083081dc44b8277f19e53e0b34"}