{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-08-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-28\r\n*/\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract PriceCalculator {\r\n    uint public dayPrice = 0;\r\n    address public admin ;\r\n    uint constant ONE = 10**18;\r\n\r\n    constructor(address _admin){\r\n        admin = _admin;\r\n    }\r\n\r\n    /**\r\n     * @dev setting price per day.\r\n     * @param _dayPrice uint price in DOME for 1 day rent\r\n     */\r\n    function setPricePerDay(uint _dayPrice) public {\r\n        require(\r\n            msg.sender == admin,\r\n            \"event-spaces-market/not-admin\"\r\n        );\r\n        require(\r\n            _dayPrice > ONE,\r\n            \"event-spaces-market/bad-price\"\r\n        );\r\n        dayPrice = _dayPrice;\r\n    }\r\n    \r\n     function changeAdmin(address newAdmin) public {\r\n        require(\r\n            msg.sender == admin || admin == address(0),\r\n            \"event-spaces-market/not-admin\"\r\n        );\r\n        admin = newAdmin;\r\n     }\r\n\r\n     function getPrice(uint numberOfDays) public  view returns (uint){\r\n         return numberOfDays * dayPrice;\r\n     }\r\n}\r\n\r\n/** \r\n * @title Ballot\r\n * @dev Implements voting process along with vote delegation\r\n */\r\ncontract EventSpacesMarket {\r\n\r\n    uint constant DAY = 24*3600;\r\n    uint constant ONE = 10**18;\r\n\r\n    struct EventSpace {\r\n        uint64 from; //starting time from when event is active\r\n        uint64 till; //finish time till when event is active\r\n        address owner; \r\n        bytes32 passwordHash; \r\n    }\r\n\r\n    struct EventIndex {\r\n        uint64 dayFromStart;\r\n        uint64 index;\r\n        uint64 userIndex;\r\n    }\r\n\r\n    struct UsersStats {\r\n        uint domeBalance;\r\n        uint allowance;\r\n        uint amountNeeded;\r\n    }\r\n\r\n    mapping(uint /*day from Start */ => EventSpace[]) public spacesForDay;\r\n    mapping(address => EventIndex[]) public  spacesOfUser;\r\n\r\n    uint public start;\r\n    address public priceCalculator;\r\n    uint public totalCounter = 0;\r\n\r\n    address public admin ;\r\n\r\n    IERC20 private domeToken;\r\n\r\n    /** \r\n     * @dev Create a new ballot to choose one of 'proposalNames'.\r\n     * @param token names of proposals\r\n     */\r\n    constructor(IERC20 token, uint _start) {\r\n        start = _start;\r\n        admin = msg.sender;\r\n        domeToken = token;\r\n        priceCalculator = address(new PriceCalculator(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * @dev allows Admin to withdraw earnings from sell\r\n     */\r\n    function withdrawTokens() public {\r\n        require(\r\n            msg.sender == admin,\r\n            \"event-spaces-market/not-admin\"\r\n        );\r\n        IERC20(domeToken).transfer(msg.sender, IERC20(domeToken).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev allows user to buy EventSpace from specified day for specified number of days\r\n     */\r\n    function getCurrentDay() public view returns(uint){\r\n        return (block.timestamp - start) / DAY + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev converts timestamp into spacesForDay index\r\n     * @param startTime timestamp to convert\r\n     */\r\n    function getDay(uint startTime) public view returns(uint64){\r\n        return uint64((startTime - start) / DAY) + 1;\r\n    }\r\n    \r\n    /**\r\n     * @dev allows user to buy EventSpace from specified day for specified number of days\r\n     * @param _startTime UTC timestamp when event should start\r\n     * @param numberOfDays how many days from now event starts\r\n     */\r\n     function buyEvent(uint _startTime, uint numberOfDays) public {\r\n         UsersStats memory stats = getUsersStats(msg.sender, numberOfDays);\r\n         require(domeToken.balanceOf(msg.sender) >= stats.amountNeeded, \"event-spaces-market/not-enough-tokens\");\r\n         require(domeToken.allowance(msg.sender, address(this)) >= stats.amountNeeded, \"event-spaces-market/incorrect-allowance\");\r\n         domeToken.transferFrom(msg.sender, address(this), stats.amountNeeded);\r\n         uint today = getCurrentDay();\r\n         uint startTime = _startTime;\r\n         uint endTime = _startTime + numberOfDays * DAY;\r\n         bytes32 hash = keccak256(abi.encodePacked(msg.sender, block.timestamp, spacesForDay[today].length));\r\n         spacesForDay[getDay(startTime)].push(EventSpace(uint64(startTime), uint64(endTime), msg.sender, hash));\r\n         spacesOfUser[msg.sender].push(EventIndex(getDay(startTime),uint64(spacesForDay[getDay(startTime)].length-1), uint64(spacesOfUser[msg.sender].length+1)));\r\n     }\r\n\r\n     function changeAdmin(address newAdmin) public {\r\n        require(\r\n            msg.sender == admin,\r\n            \"event-spaces-market/not-admin\"\r\n        );\r\n        admin = newAdmin;\r\n     }\r\n\r\n     function changePriceCalculator(address newCalculator) public {\r\n        require(\r\n            msg.sender == admin,\r\n            \"event-spaces-market/not-admin\"\r\n        );\r\n        priceCalculator = newCalculator;\r\n     }\r\n\r\n     function changeEventOwner(address newOwner, uint eventIndex) public{\r\n        require(spacesOfUser[msg.sender].length > eventIndex, \"event-spaces-market/alid-index\");\r\n        EventIndex memory ev = spacesOfUser[msg.sender][eventIndex];\r\n        ev.userIndex = uint64(spacesOfUser[newOwner].length);\r\n        spacesOfUser[newOwner].push(ev);\r\n        spacesOfUser[msg.sender][eventIndex] = spacesOfUser[msg.sender][spacesOfUser[msg.sender].length-1];\r\n        spacesOfUser[msg.sender].pop();\r\n\r\n        spacesForDay[ev.dayFromStart][ev.index].owner = newOwner;\r\n     }\r\n\r\n    /**\r\n     * @dev helper function, returns stats for a user\r\n     * @param user, address of a user we want to get information about\r\n     * @param numberOfDays number of days, user wants to rent specific EventSpace, used to calculate the price\r\n     * @return 3 properties: balance of user, allowence set by user to the contract, price that user needs to pay for numberOfDays rent of an event space\r\n     */\r\n     function getUsersStats(address user, uint numberOfDays) public view returns(UsersStats memory){\r\n         uint balance = domeToken.balanceOf(address(user));\r\n         uint allowance = domeToken.allowance(user, address(this));\r\n         uint amountNeeded = PriceCalculator(priceCalculator).getPrice(numberOfDays);\r\n         return UsersStats(balance, allowance, amountNeeded);\r\n     }\r\n\r\n    /**\r\n     * @dev helper function, returns array of Indexes for all EventSpaces of specific user that are future or ongoing\r\n     * @param user, address of a user we want to get information about\r\n     */\r\n     function getUserNotEndedIndexes(address user) public view returns (EventIndex[] memory data){\r\n         EventIndex[] memory initial = new EventIndex[](spacesOfUser[user].length);\r\n         uint total = 0;\r\n         for(uint i = 0; i< spacesOfUser[user].length; i++){\r\n             EventIndex memory el = spacesOfUser[user][i];\r\n             EventSpace memory ev = spacesForDay[el.dayFromStart][el.index];\r\n             if(ev.till > block.timestamp){\r\n                initial[total] = el;\r\n                total++;\r\n             }\r\n         }\r\n         data = new EventIndex[](total);\r\n         for(uint j = 0; j< total; j++){\r\n             data[j] = initial[j];\r\n         }\r\n     }\r\n\r\n    /**\r\n     * @dev helper function, returns array of EventSpaces of specific user that are future or ongoing\r\n     * @param user, address of a user we want to get information about\r\n     * return array of EventSpace records, each record described by from timestamp, till timestamp, owner, and eventId\r\n     */\r\n     function getUserNotEndedEvents(address user) public view returns (EventSpace[] memory data){  \r\n         EventSpace[] memory initial = new EventSpace[](spacesOfUser[user].length);\r\n         uint total = 0;\r\n         for(uint i = 0; i< spacesOfUser[user].length; i++){\r\n             EventIndex memory el = spacesOfUser[user][i];\r\n             EventSpace memory ev = spacesForDay[el.dayFromStart][el.index];\r\n             if(ev.till > block.timestamp){\r\n                initial[total] = ev;\r\n                total++;\r\n             }\r\n         }\r\n         data = new EventSpace[](total);\r\n         for(uint j = 0; j< total; j++){\r\n             data[j] = initial[j];\r\n         }\r\n     }\r\n\r\n     function getEventByIndex(uint dayFromStart, uint index) public view returns (EventSpace memory space){\r\n        space = spacesForDay[dayFromStart][index];\r\n        return  space;\r\n     }\r\n\r\n    /**\r\n     * @dev THIS FUNCTION SHOULDN'T BE CALLED ON PRODUCTION OR CLIENT-SIDE, for testing purposes only\r\n     * @param hash,  EventSpace.passwordHash of specific event\r\n     * @param secret,  secret server-side hash allowing to transform hash into password\r\n     * @return password - 12 digit hex code, user can use to enter event\r\n     */\r\n     function calculatePassword(bytes32 hash, bytes32 secret) public pure returns (bytes6 password) {\r\n        password = bytes6(keccak256(abi.encode(hash, secret)));\r\n        return password;\r\n     }\r\n\r\n    /**\r\n    List of all spaces that should be currently active\r\n    **/\r\n     function getSpacesForToday() public view returns (EventSpace[] memory spaces){\r\n        return spacesForDay[getCurrentDay()];\r\n     }\r\n\r\n     function getSpacesForDay(uint256 _time) public view returns (EventSpace[] memory spaces){\r\n        return spacesForDay[getDay(_time)];\r\n     }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDays\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayPrice\",\"type\":\"uint256\"}],\"name\":\"setPricePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceCalculator", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000AEB000B61E0dbb37DB114636B957c13BEfd0Df4D", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cab860800815faeea4b5a3fbdf1b2d19f4c31b8296069368038f90fe181704de"}