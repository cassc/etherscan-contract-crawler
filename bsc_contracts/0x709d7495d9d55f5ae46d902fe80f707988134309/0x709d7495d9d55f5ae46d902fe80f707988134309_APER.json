{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n//https://learnblockchain.cn/article/3152\r\n//https://github.com/liyue201/stock-contract/blob/main/stock.sol\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ninterface DD {\r\n    function updateUserSumB(address userAddress) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract APER{\r\n    using SafeMath for uint256;\r\n    string private m_name;\r\n    string private m_symbol;\r\n    uint256 private m_totalSupply;\r\n    mapping(uint8 => address) public _owners;\r\n    mapping(address => uint) m_balances;\r\n    mapping(address => PledgeOrder) _orders;//\u7528\u6237\u81ea\u5df1\u8d28\u62bc\u7684\u6570\u636e\r\n    mapping(address => Pledge) public pledges; // \u7528\u6237\u8d28\u62bc\u9501\u4ed3\u7684\u6570\u636e\r\n    uint256 public startTime; // \u8d28\u62bc\u5f00\u59cb\u7684\u65f6\u95f4\r\n\r\n    KeyFlag[] keys;\r\n\r\n    uint256 public size;\r\n\r\n    struct PledgeOrder {\r\n        bool isExist;\r\n        uint256 token;\r\n        uint256 index;\r\n    }\r\n\r\n\r\n\r\n    struct KeyFlag {\r\n        address key;\r\n        bool isExist;\r\n    }\r\n\r\n    struct Pledge {\r\n        uint256 amount; // \u8d28\u62bc\u7684\u4ee3\u5e01\u6570\u91cf\r\n        uint256 releasedAmount;\r\n        uint256 useAmount;\r\n    }\r\n\r\n    //mapping(address => time) m_balances;\r\n\r\n    address public lp_token;//\u5bf9\u5e94\u7684token\r\n    address public draw_token;//\u9886\u53d6\u5408\u7ea6\r\n    constructor()  {\r\n        m_name = \"LP Token\";\r\n        m_symbol = \"LP\";\r\n        m_totalSupply = 0;\r\n        _owners[0] = msg.sender;\r\n        startTime = block.timestamp;\r\n    }\r\n    /**\r\n     * \u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u64cd\u4f5c\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owners[0] , \"nodata\");\r\n        _;\r\n    }\r\n    function toOwner(address to) public onlyOwner{\r\n        _owners[0] = to;\r\n    }\r\n    function getSetinfo() public view returns(bool) {\r\n        if(address(0) ==_owners[0] ){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    function setLp(address _lp) public onlyOwner{\r\n        lp_token = _lp;\r\n    }\r\n    function setDraw(address _draw) public onlyOwner{\r\n        draw_token = _draw;\r\n    }\r\n\r\n    function set(address _lp,address _draw)public onlyOwner{\r\n        lp_token = _lp;\r\n        draw_token = _draw;\r\n    }\r\n\r\n    //\u521b\u5efa\u8ba2\u5355\r\n    function createOrder(address userAddress,uint tokenAmount,uint index) private {\r\n        _orders[userAddress]=PledgeOrder(\r\n            true,\r\n            tokenAmount,\r\n            index\r\n        );\r\n    }\r\n    //\u8d28\u62bc\r\n    function mint(uint tokenAmount) public {\r\n        require(tokenAmount > 0, \"invalid tokenAmount\");\r\n        m_balances[msg.sender] = m_balances[msg.sender].add(tokenAmount);\r\n        m_totalSupply = m_totalSupply.add(tokenAmount);\r\n\r\n        //\u67e5\u770b\u4e00\u4e0b\u7528\u6237\u662f\u5426\u8d28\u62bc\u4e86\r\n        if(_orders[msg.sender].isExist==false){\r\n            keys.push(KeyFlag(msg.sender,true));\r\n            size++;\r\n            createOrder(msg.sender, tokenAmount,keys.length.sub(1));\r\n        }else{\r\n            PledgeOrder storage order=_orders[msg.sender];\r\n            order.token=order.token.add(tokenAmount);\r\n            keys[order.index].isExist=true;\r\n        }\r\n        //\u66f4\u65b0\u6536\u76ca\u5408\u7ea6\r\n        if(draw_token != address(0)){\r\n            DD(draw_token).updateUserSumB(msg.sender);\r\n        }\r\n        require(IERC20(lp_token).transferFrom(msg.sender, address(this), tokenAmount), \"failed to Transfer token\");\r\n    }\r\n\r\n    //\u89e3\u9664\u8d28\u62bc\r\n    function burn() public {\r\n        uint lpAmount = getLpprofit(msg.sender);\r\n        require(lpAmount > 0, \"invalid lpAmount\");\r\n        require(lpAmount <= m_balances[msg.sender], \"lpAmount exceed range\");\r\n        PledgeOrder storage order=_orders[msg.sender];\r\n        require(order.token>0,\"no order\");\r\n        require(order.token>=lpAmount,\"less token\");\r\n        m_balances[msg.sender] = m_balances[msg.sender].sub(lpAmount);\r\n        m_totalSupply = m_totalSupply.sub(lpAmount);\r\n        if(order.token==lpAmount){\r\n            order.token=0;\r\n            keys[order.index].isExist=false;\r\n        }else{\r\n            order.token=order.token.sub(lpAmount);\r\n        }\r\n        require(IERC20(lp_token).transfer(msg.sender, lpAmount), \"failed to Transfer token\");\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return m_name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return m_symbol;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return m_totalSupply;\r\n    }\r\n    //\u83b7\u53d6\u7528\u6237\u81ea\u5df1\u8d28\u62bc\u52a0\u4e0a\u9501\u4ed3\u8d28\u62bc\u7684\u6570\u636e\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return m_balances[tokenOwner].add(pledges[tokenOwner].amount.sub(pledges[tokenOwner].releasedAmount));\r\n    }\r\n    //\u83b7\u53d6\u7528\u6237\u81ea\u5df1\u8d28\u62bc\u7684\u6570\u636e\r\n    function getPledgeToken(address tokenAddress) public view returns(uint256) {\r\n        PledgeOrder memory order=_orders[tokenAddress];\r\n        return order.token;\r\n    }\r\n    //\u83b7\u53d6\u7528\u6237\u81ea\u5df1\u8d28\u62bc\u7684\u6570\u636e\r\n    function getLpprofit(address userAddress) public view returns (uint){\r\n        PledgeOrder memory order=_orders[userAddress];\r\n        return order.token;\r\n    }\r\n    //\u8f6c\u8d26\r\n    function changeBanlance(address token, address userAddress,uint amountIn)  external onlyOwner virtual{\r\n        if (token == address(0)) {\r\n            payable(userAddress).transfer(amountIn);\r\n        }else {\r\n            IERC20(token).transfer(userAddress, amountIn);\r\n        }\r\n    }\r\n\r\n    //\u6279\u91cf\u8d28\u62bc\r\n    function amintallper(address[] memory addresses,uint tokenAmount ) onlyOwner public{\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address userAddress = addresses[i];\r\n            pledges[userAddress].amount = tokenAmount;\r\n            m_totalSupply = m_totalSupply.add(tokenAmount);\r\n        }\r\n    }\r\n    //\u6279\u91cf\u8d28\u62bc\u4e0d\u901a\u6570\u989d\r\n    function amintallperamount(address[] memory recipients, uint256[] memory amounts) onlyOwner public{\r\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            address userAddress = recipients[i];\r\n            uint256 amountIn = amounts[i];\r\n            pledges[userAddress].amount = amountIn;\r\n            m_totalSupply = m_totalSupply.add(amountIn);\r\n        }\r\n    }\r\n\r\n    //\u5355\u4e2a\u8d28\u62bc\r\n    function amintper(address userAddress,uint tokenAmount ) onlyOwner public{\r\n        pledges[userAddress].amount = tokenAmount;\r\n        m_totalSupply = m_totalSupply.add(tokenAmount);\r\n    }\r\n    //\u5e2e\u89e3\u9664\u8d28\u62bc\r\n    function aburnper(address userAddress) onlyOwner public{\r\n        if(pledges[msg.sender].releasedAmount ==0 && pledges[msg.sender].useAmount ==0){\r\n            m_totalSupply = m_totalSupply.sub(pledges[msg.sender].amount);\r\n        }else{\r\n            m_totalSupply = m_totalSupply.sub(pledges[msg.sender].useAmount);\r\n        }\r\n        pledges[userAddress].amount = 0;\r\n        pledges[userAddress].releasedAmount = 0;\r\n        pledges[userAddress].useAmount = 0;\r\n    }\r\n\r\n    //\u53ef\u9886\u53d6\u7684\u6570\u91cf\uff08\u9501\u4ed3\uff09\r\n    function getpledgeper(address userAddress) public view returns (uint256) {\r\n        uint256 eligibleAmount =0;\r\n        //\u7528\u6237\u5df2\u9886\u53d6\u548c\u5f85\u9886\u53d6\u52a0\u4e00\u8d77\u662f\u8d28\u62bc\u603b\u6570 \u6216\u8005\u6ca1\u6709\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\u5e76\u6ca1\u6709\u9886\u53d6\u6570\u91cf\r\n        if((pledges[userAddress].releasedAmount.add(pledges[userAddress].useAmount) == pledges[userAddress].amount) || (pledges[msg.sender].releasedAmount ==0 && pledges[msg.sender].useAmount ==0)){\r\n            uint256 elapsedTime = block.timestamp.sub(startTime); // \u5df2\u7ecf\u8fc7\u53bb\u7684\u65f6\u95f4\r\n            uint256 elapsedPeriods = elapsedTime.div(30 days); // \u5df2\u7ecf\u8fc7\u53bb\u7684\u5468\u671f\u6570\r\n            eligibleAmount = pledges[userAddress].amount.mul(elapsedPeriods).div(10).sub(pledges[userAddress].releasedAmount); // \u8ba1\u7b97\u53ef\u9886\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\uff0c\u6bcf30\u5929\u91ca\u653e10%\r\n            if(eligibleAmount>pledges[userAddress].amount.sub(pledges[userAddress].releasedAmount)){\r\n                eligibleAmount = pledges[userAddress].amount.sub(pledges[userAddress].releasedAmount);\r\n            }\r\n        }\r\n        return eligibleAmount;\r\n    }\r\n\r\n    //\u7528\u6237\u81ea\u5df1\u89e3\u62bc\u91ca\u653e\uff08\u9501\u4ed3\uff09\r\n    function burnper() public  {\r\n        uint lpAmount = getpledgeper(msg.sender);\r\n        require(lpAmount > 0, \"No tokens available for claiming.\"); // \u6ca1\u6709\u53ef\u9886\u53d6\u7684\u4ee3\u5e01\r\n        if(pledges[msg.sender].releasedAmount ==0 && pledges[msg.sender].useAmount ==0){\r\n            pledges[msg.sender].useAmount  =  pledges[msg.sender].amount;\r\n        }\r\n        pledges[msg.sender].releasedAmount  =  pledges[msg.sender].releasedAmount.add(lpAmount);\r\n        pledges[msg.sender].useAmount  =  pledges[msg.sender].useAmount.sub(lpAmount);\r\n        m_totalSupply = m_totalSupply.sub(lpAmount);\r\n        require(IERC20(lp_token).transfer(msg.sender, lpAmount), \"failed to Transfer token\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"aburnper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"amintallper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"amintallperamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"amintper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"changeBanlance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getLpprofit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPledgeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSetinfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getpledgeper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"useAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_draw\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_draw\",\"type\":\"address\"}],\"name\":\"setDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"setLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"toOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "APER", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7128c7bebeeab06a5195a74d85235e2f4e3ef56519655fc9f20d53149d467545"}