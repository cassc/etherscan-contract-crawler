{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n  function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n      address sender,\r\n      address recipient,\r\n      uint256 amount\r\n      ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n      _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n      _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n      address sender,\r\n      address recipient,\r\n      uint256 amount\r\n      ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n      _balances[sender] = senderBalance - amount;\r\n    }\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n\r\n    _afterTokenTransfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n      _balances[account] = accountBalance - amount;\r\n    }\r\n    _totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(\r\n      address owner,\r\n      address spender,\r\n      uint256 amount\r\n      ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n      address from,\r\n      address to,\r\n      uint256 amount\r\n      ) internal virtual {}\r\n\r\n  function _afterTokenTransfer(\r\n      address from,\r\n      address to,\r\n      uint256 amount\r\n      ) internal virtual {}\r\n}\r\n\r\ncontract BEP20Token is ERC20 {\r\n\r\n  uint8 private _decimals;\r\n  uint256 private _chainId;\r\n\r\n  address[] private _authorityAddresses;\r\n  uint256 private _authorityThreshold;\r\n  uint256 private _minBurnAmount;\r\n  uint256 private _configurationNonce;\r\n\r\n  mapping (address => mapping(string => uint256)) private _mintHistory;\r\n  mapping (address => uint256) private _mintNonce;\r\n  mapping (address => uint256[]) private _burnAmount;\r\n  mapping (address => string[]) private _burnDestination;\r\n\r\n  constructor() ERC20(\"Wrapped Dingocoin\", \"wDingocoin\") {\r\n    _decimals = 8;\r\n    _chainId = 56;\r\n\r\n    _authorityAddresses = [\r\n      0x0bee89d055Bc18250C71B72B2e24EcF723e9a8ef,\r\n      0xD14Bc59472b8f1fA5baA99a17855d06aD327dCae,\r\n      0x3279f7B244F0194fd359D5AC29359ca676193aDb,\r\n      0x9d046eDc2C80727259355E4CFBb8B72750348Ad9,\r\n      0x5234B6a4df31598dc4B26183ad7C452E47AB267F\r\n    ];\r\n    _authorityThreshold = 3;\r\n    _minBurnAmount = 1000000000;\r\n    _configurationNonce = 0;\r\n\r\n  }\r\n\r\n  function decimals() override public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function _verifyAuthority(bytes32 dataHash, uint8[] calldata signV, bytes32[] calldata signR, bytes32[] calldata signS) private view {\r\n    bytes32 prefixedHash = keccak256(abi.encodePacked(bytes(\"\\x19Ethereum Signed Message:\\n32\"), dataHash));\r\n    uint256 signatures = 0;\r\n    for (uint256 i = 0; i < _authorityAddresses.length; i++) {\r\n      if (ecrecover(prefixedHash, signV[i], signR[i], signS[i]) == _authorityAddresses[i]) {\r\n        signatures++;\r\n      }\r\n      if (signatures >= _authorityThreshold) {\r\n        break;\r\n      }\r\n    }\r\n    require(signatures >= _authorityThreshold);\r\n  }\r\n\r\n  function authorityAddresses() external view returns (address[] memory) {\r\n    return _authorityAddresses;\r\n  }\r\n\r\n  function authorityThreshold() external view returns (uint256) {\r\n    return _authorityThreshold;\r\n  }\r\n\r\n  function minBurnAmount() external view returns (uint256) {\r\n    return _minBurnAmount;\r\n  }\r\n\r\n  function configurationNonce() external view returns (uint256) {\r\n    return _configurationNonce;\r\n  }\r\n\r\n  function configure(address[] calldata newAuthorityAddresses, uint256 newAuthorityThreshold, uint256 newMinBurnAmount,\r\n      uint8[] calldata signV, bytes32[] calldata signR, bytes32[] calldata signS) external {\r\n\r\n    require(newAuthorityAddresses.length >= 1);\r\n    require(newAuthorityThreshold >= 1);\r\n    require(signV.length == _authorityAddresses.length);\r\n    require(signR.length == _authorityAddresses.length);\r\n    require(signS.length == _authorityAddresses.length);\r\n\r\n    _verifyAuthority(\r\n        keccak256(abi.encode(_chainId, _configurationNonce, newAuthorityAddresses, newAuthorityThreshold, newMinBurnAmount)),\r\n        signV, signR, signS);\r\n\r\n    _configurationNonce++;\r\n    _authorityAddresses = newAuthorityAddresses;\r\n    _authorityThreshold = newAuthorityThreshold;\r\n    _minBurnAmount = newMinBurnAmount;\r\n  }\r\n\r\n  function mintNonce(address addr) external view returns (uint256) {\r\n    return _mintNonce[addr];\r\n  }\r\n\r\n  function mintHistory(address addr, string calldata depositAddress) external view returns (uint256, uint256) {\r\n    return (_mintNonce[addr], _mintHistory[addr][depositAddress]);\r\n  }\r\n\r\n  function mint(string calldata depositAddress, uint256 amount,\r\n      uint8[] calldata signV, bytes32[] calldata signR, bytes32[] calldata signS) external {\r\n    require(signV.length == _authorityAddresses.length);\r\n    require(signR.length == _authorityAddresses.length);\r\n    require(signS.length == _authorityAddresses.length);\r\n\r\n    _verifyAuthority(\r\n        keccak256(abi.encode(_chainId, _msgSender(), _mintNonce[_msgSender()], depositAddress, amount)),\r\n        signV, signR, signS);\r\n\r\n    _mint(_msgSender(), amount);\r\n    _mintNonce[_msgSender()]++;\r\n    _mintHistory[_msgSender()][depositAddress] += amount;\r\n  }\r\n\r\n  function burnHistory(address addr) external view returns (string[] memory, uint256[] memory) {\r\n    require(_burnDestination[addr].length == _burnAmount[addr].length);\r\n    return (_burnDestination[addr], _burnAmount[addr]);\r\n  }\r\n\r\n  function burnHistory(address addr, uint256 index) external view returns (string memory, uint256) {\r\n    require(_burnDestination[addr].length == _burnAmount[addr].length);\r\n    return (_burnDestination[addr][index], _burnAmount[addr][index]);\r\n  }\r\n\r\n  function burnHistoryMultiple(address[] calldata addrs, uint256[] calldata indexes) external view returns (string[] memory, uint256[] memory) {\r\n    require(addrs.length == indexes.length);\r\n    string[] memory destinations = new string[](addrs.length);\r\n    uint256[] memory amounts= new uint256[](addrs.length);\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      destinations[i] = _burnDestination[addrs[i]][indexes[i]];\r\n      amounts[i] = _burnAmount[addrs[i]][indexes[i]];\r\n    }\r\n    return (destinations, amounts);\r\n  }\r\n\r\n  function burn(uint256 amount, string calldata destination) external {\r\n    require(amount >= _minBurnAmount);\r\n    _burn(_msgSender(), amount);\r\n    _burnAmount[_msgSender()].push(amount);\r\n    _burnDestination[_msgSender()].push(destination);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorityAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"burnHistory\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burnHistory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"burnHistoryMultiple\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newAuthorityAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newAuthorityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"signV\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"signR\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"signS\",\"type\":\"bytes32[]\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"signV\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"signR\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"signS\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"depositAddress\",\"type\":\"string\"}],\"name\":\"mintHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"mintNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4371f3d134ccf9190414fd8b958172ab76721f409505128cb725f8022083146a"}