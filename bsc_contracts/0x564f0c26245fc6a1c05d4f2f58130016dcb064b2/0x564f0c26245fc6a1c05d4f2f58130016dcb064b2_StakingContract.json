{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract StakingContract {\r\n    address public owner;\r\n    uint256 public coefficient = 570000;\r\n    ERC20 public tokenA;  // \u4ee3\u5e01A\u5730\u5740\r\n    ERC20 public tokenB;  // \u4ee3\u5e01B\u5730\u5740\r\n\r\n    struct StakeInfo {\r\n        uint256 lastUpdateTime;\r\n        uint256 unclaimedRewards;\r\n    }\r\n\r\n    mapping(address => StakeInfo) public userStakes;\r\n\r\n    constructor(address _tokenA, address _tokenB) {\r\n        require(_tokenA != address(0) && _tokenB != address(0), \"Token addresses cannot be zero\");\r\n        tokenA = ERC20(_tokenA);\r\n        tokenB = ERC20(_tokenB);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    // \u5185\u90e8\u51fd\u6570\uff1a\u8ba1\u7b97\u5e76\u66f4\u65b0\u7528\u6237\u7684\u672a\u9886\u53d6\u6536\u76ca\r\n    function _updateUnclaimedRewards(address user) internal {\r\n        StakeInfo storage userStake = userStakes[user];\r\n        uint256 userBalance = tokenA.balanceOf(user);\r\n\r\n        require(coefficient > 0, \"Coefficient must be greater than zero\");\r\n        \r\n        uint256 currentTime = block.timestamp;\r\n        uint256 secondsPassed = currentTime - userStake.lastUpdateTime;\r\n\r\n        // \u8ba1\u7b97\u6316\u77ff\u5956\u52b1\uff0c\u8fd9\u91cc\u7b80\u5355\u5730\u5c06\u4ee3\u5e01A\u7684\u4f59\u989d\u4f5c\u4e3a\u6316\u77ff\u6536\u76ca\r\n        uint256 miningReward = userBalance * secondsPassed / coefficient;\r\n\r\n        // \u5b58\u5165\u672a\u9886\u53d6\u6536\u76ca\u4e2d\r\n        userStake.unclaimedRewards += miningReward;\r\n        userStake.lastUpdateTime = currentTime;\r\n\r\n    }\r\n\r\n    function startMining() public {\r\n        // \u68c0\u67e5\u7528\u6237\u662f\u5426\u5df2\u6709\u6316\u77ff\u8bb0\u5f55\r\n        require(userStakes[msg.sender].lastUpdateTime == 0, \"User already has mining record\");\r\n\r\n        // \u521b\u5efa\u6316\u77ff\u8bb0\u5f55\r\n        userStakes[msg.sender] = StakeInfo({\r\n            lastUpdateTime: block.timestamp,\r\n            unclaimedRewards: 0\r\n        });\r\n\r\n        // \u8fdb\u884c\u6316\u77ff\u64cd\u4f5c\uff0c\u66f4\u65b0\u6316\u77ff\u8bb0\u5f55\u7b49\r\n        _updateUnclaimedRewards(msg.sender);\r\n\r\n    }\r\n\r\n\r\n    function claimRewards() public {\r\n    // \u5148\u66f4\u65b0\u672a\u9886\u53d6\u6536\u76ca\r\n        _updateUnclaimedRewards(msg.sender);\r\n\r\n        StakeInfo storage userStake = userStakes[msg.sender];\r\n        uint256 rewardsToClaim = userStake.unclaimedRewards;\r\n\r\n        // \u68c0\u67e5\u662f\u5426\u6709\u5956\u52b1\u53ef\u9886\u53d6\r\n        require(tokenB.balanceOf(address(this)) >= rewardsToClaim, \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n        // \u8f6c\u79fb\u672a\u9886\u53d6\u6536\u76ca\r\n        require(tokenB.transfer(msg.sender, rewardsToClaim), \"Transfer failed\");\r\n        \r\n        userStake.unclaimedRewards = 0;\r\n    }\r\n\r\n    // \u5916\u90e8\u51fd\u6570\uff1a\u66f4\u6539 owner\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // \u5916\u90e8\u51fd\u6570\uff1a\u66f4\u6539\u6316\u77ff\u5956\u52b1\u7cfb\u6570\r\n    function changeValueOfCoefficient(uint256 _coefficient) external onlyOwner {\r\n        coefficient = _coefficient;\r\n    }\r\n\r\n    //\u7ba1\u7406\u5458\u66f4\u65b0\u7528\u6237\u4f59\u989d\r\n    function refreshBalances(address[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            _updateUnclaimedRewards(users[i]);\r\n        }\r\n    }\r\n\r\n    //\u67e5\u770b\u7528\u6237\u6316\u77ff\u901f\u5ea6\r\n    function getMiningSpeed(address user) external view returns (uint256) {\r\n        uint256 userBalance = tokenA.balanceOf(user);\r\n        // \u8ba1\u7b97\u6316\u77ff\u5956\u52b1\uff0c\u8fd9\u91cc\u7b80\u5355\u5730\u5c06\u4ee3\u5e01A\u7684\u4f59\u989d\u4f5c\u4e3a\u6316\u77ff\u6536\u76ca\r\n        uint256 miningSpeed = userBalance / coefficient;\r\n\r\n        return miningSpeed;\r\n    }\r\n\r\n    //\u67e5\u770b\u7528\u6237\u5728A\u5408\u7ea6\u7684\u4f59\u989d\r\n    function getUserBalanceInTokenA(address user) external view returns (uint256) {\r\n        return tokenA.balanceOf(user);\r\n    }\r\n\r\n    // \u5916\u90e8\u51fd\u6570\uff1a\u7528\u6237\u67e5\u8be2\u672a\u9886\u53d6\u6536\u76ca\r\n    \r\n    function checkUnclaimedRewards(address user) external view returns (uint256) {\r\n        StakeInfo storage userStake = userStakes[user];\r\n        uint256 userBalance = tokenA.balanceOf(user);\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 secondsPassed = currentTime - userStake.lastUpdateTime;\r\n\r\n        // \u8ba1\u7b97\u6316\u77ff\u5956\u52b1\uff0c\u8fd9\u91cc\u7b80\u5355\u5730\u5c06\u4ee3\u5e01A\u7684\u4f59\u989d\u4f5c\u4e3a\u6316\u77ff\u6536\u76ca\r\n        uint256 miningReward = userBalance * secondsPassed / coefficient;\r\n\r\n        // \u8fd4\u56de\u7528\u6237\u7684\u672a\u9886\u53d6\u6536\u76ca\r\n        return userStake.unclaimedRewards + miningReward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coefficient\",\"type\":\"uint256\"}],\"name\":\"changeValueOfCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMiningSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBalanceInTokenA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"refreshBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000244a19454778152041313cd7548723daac91ec7c00000000000000000000000059cd90df8af3c8c6688038a6c028ddb5aa74d1e7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8db421bec2746eed020c01aa7dc0b835dca5b385bd354161bbee38182c8b1e89"}