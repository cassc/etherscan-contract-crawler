{"SourceCode": "// Sources flattened with hardhat v2.6.2 https://hardhat.org\r\n\r\n// File contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than contract itself or owner.\r\n    */\r\n    modifier onlyRelevantSender() {\r\n        // proxy owner if used through proxy, address(0) otherwise\r\n        require(\r\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\r\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\r\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\r\n        );\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function _setOwner(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/math/SafeMath.sol@v1.12.0\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgradeable_contracts/InitializableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract InitializableBridge is Initializable {\r\n    bytes32 internal constant DEPLOYED_AT_BLOCK = 0xb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b0; // keccak256(abi.encodePacked(\"deployedAtBlock\"))\r\n\r\n    function deployedAtBlock() external view returns (uint256) {\r\n        return uintStorage[DEPLOYED_AT_BLOCK];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgradeable_contracts/BaseBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract BaseBridgeValidators is InitializableBridge, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant F_ADDR = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\r\n    uint256 internal constant MAX_VALIDATORS = 50;\r\n    bytes32 internal constant REQUIRED_SIGNATURES = 0xd18ea17c351d6834a0e568067fb71804d2a588d5e26d60f792b1c724b1bd53b1; // keccak256(abi.encodePacked(\"requiredSignatures\"))\r\n    bytes32 internal constant VALIDATOR_COUNT = 0x8656d603d9f985c3483946a92789d52202f49736384ba131cb92f62c4c1aa082; // keccak256(abi.encodePacked(\"validatorCount\"))\r\n\r\n    event ValidatorAdded(address indexed validator);\r\n    event ValidatorRemoved(address indexed validator);\r\n    event RequiredSignaturesChanged(uint256 requiredSignatures);\r\n\r\n    function setRequiredSignatures(uint256 _requiredSignatures) external onlyOwner {\r\n        require(validatorCount() >= _requiredSignatures);\r\n        require(_requiredSignatures != 0);\r\n        uintStorage[REQUIRED_SIGNATURES] = _requiredSignatures;\r\n        emit RequiredSignaturesChanged(_requiredSignatures);\r\n    }\r\n\r\n    function getBridgeValidatorsInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (2, 3, 0);\r\n    }\r\n\r\n    function validatorList() external view returns (address[]) {\r\n        address[] memory list = new address[](validatorCount());\r\n        uint256 counter = 0;\r\n        address nextValidator = getNextValidator(F_ADDR);\r\n        require(nextValidator != address(0));\r\n\r\n        while (nextValidator != F_ADDR) {\r\n            list[counter] = nextValidator;\r\n            nextValidator = getNextValidator(nextValidator);\r\n            counter++;\r\n\r\n            require(nextValidator != address(0));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function _addValidator(address _validator) internal {\r\n        require(_validator != address(0) && _validator != F_ADDR);\r\n        require(!isValidator(_validator));\r\n\r\n        address firstValidator = getNextValidator(F_ADDR);\r\n        require(firstValidator != address(0));\r\n        setNextValidator(_validator, firstValidator);\r\n        setNextValidator(F_ADDR, _validator);\r\n        setValidatorCount(validatorCount().add(1));\r\n    }\r\n\r\n    function _removeValidator(address _validator) internal {\r\n        require(validatorCount() > requiredSignatures());\r\n        require(isValidator(_validator));\r\n        address validatorsNext = getNextValidator(_validator);\r\n        address index = F_ADDR;\r\n        address next = getNextValidator(index);\r\n        require(next != address(0));\r\n\r\n        while (next != _validator) {\r\n            index = next;\r\n            next = getNextValidator(index);\r\n\r\n            require(next != F_ADDR && next != address(0));\r\n        }\r\n\r\n        setNextValidator(index, validatorsNext);\r\n        deleteItemFromAddressStorage(\"validatorsList\", _validator);\r\n        setValidatorCount(validatorCount().sub(1));\r\n    }\r\n\r\n    function requiredSignatures() public view returns (uint256) {\r\n        return uintStorage[REQUIRED_SIGNATURES];\r\n    }\r\n\r\n    function validatorCount() public view returns (uint256) {\r\n        return uintStorage[VALIDATOR_COUNT];\r\n    }\r\n\r\n    function isValidator(address _validator) public view returns (bool) {\r\n        return _validator != F_ADDR && getNextValidator(_validator) != address(0);\r\n    }\r\n\r\n    function getNextValidator(address _address) public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"validatorsList\", _address))];\r\n    }\r\n\r\n    function deleteItemFromAddressStorage(string _mapName, address _address) internal {\r\n        delete addressStorage[keccak256(abi.encodePacked(_mapName, _address))];\r\n    }\r\n\r\n    function setValidatorCount(uint256 _validatorCount) internal {\r\n        require(_validatorCount <= MAX_VALIDATORS);\r\n        uintStorage[VALIDATOR_COUNT] = _validatorCount;\r\n    }\r\n\r\n    function setNextValidator(address _prevValidator, address _validator) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"validatorsList\", _prevValidator))] = _validator;\r\n    }\r\n\r\n    function isValidatorDuty(address _validator) external view returns (bool) {\r\n        uint256 counter = 0;\r\n        address next = getNextValidator(F_ADDR);\r\n        require(next != address(0));\r\n\r\n        while (next != F_ADDR) {\r\n            if (next == _validator) {\r\n                return (block.number % validatorCount() == counter);\r\n            }\r\n\r\n            next = getNextValidator(next);\r\n            counter++;\r\n\r\n            require(next != address(0));\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgradeable_contracts/BridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract BridgeValidators is BaseBridgeValidators {\r\n    function initialize(uint256 _requiredSignatures, address[] _initialValidators, address _owner)\r\n        external\r\n        onlyRelevantSender\r\n        returns (bool)\r\n    {\r\n        require(!isInitialized());\r\n        _setOwner(_owner);\r\n        require(_requiredSignatures != 0);\r\n        require(_initialValidators.length >= _requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < _initialValidators.length; i++) {\r\n            require(_initialValidators[i] != address(0) && _initialValidators[i] != F_ADDR);\r\n            require(!isValidator(_initialValidators[i]));\r\n\r\n            if (i == 0) {\r\n                setNextValidator(F_ADDR, _initialValidators[i]);\r\n                if (_initialValidators.length == 1) {\r\n                    setNextValidator(_initialValidators[i], F_ADDR);\r\n                }\r\n            } else if (i == _initialValidators.length - 1) {\r\n                setNextValidator(_initialValidators[i - 1], _initialValidators[i]);\r\n                setNextValidator(_initialValidators[i], F_ADDR);\r\n            } else {\r\n                setNextValidator(_initialValidators[i - 1], _initialValidators[i]);\r\n            }\r\n\r\n            emit ValidatorAdded(_initialValidators[i]);\r\n        }\r\n\r\n        setValidatorCount(_initialValidators.length);\r\n        uintStorage[REQUIRED_SIGNATURES] = _requiredSignatures;\r\n        uintStorage[DEPLOYED_AT_BLOCK] = block.number;\r\n        setInitialize();\r\n        emit RequiredSignaturesChanged(_requiredSignatures);\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function addValidator(address _validator) external onlyOwner {\r\n        _addValidator(_validator);\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    function removeValidator(address _validator) external onlyOwner {\r\n        _removeValidator(_validator);\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeValidatorsInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredSignatures\",\"type\":\"uint256\"},{\"name\":\"_initialValidators\",\"type\":\"address[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"setRequiredSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNextValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidatorDuty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"F_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"RequiredSignaturesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "BridgeValidators", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ac6cdc9fe0aa13f8968ed299ded1dd7d04f152672006695831c46a5400683804"}