{"SourceCode": "{\"Address.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Address {\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n}\\n\"},\"AffinityDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"./IAffinityDistributor.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapRouter02.sol\\\";\\n\\n/** Distributes SafeVault and SafeEarn To Holders Varied on Weight */\\ncontract AffinityDistributor is IAffinityDistributor {\\n    \\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    // SafeVault Contract\\n    address _token;\\n    // Share of SafeVault\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcludedVault;\\n        uint256 totalRealisedVault;\\n        uint256 totalExcludedEarn;\\n        uint256 totalRealisedEarn;\\n    }\\n    // SafeEarn contract address\\n    address SafeEarn = 0x099f551eA3cb85707cAc6ac507cBc36C96eC64Ff;\\n    // SafeVault\\n    address SafeVault = 0xe2e6e66551E5062Acd56925B48bBa981696CcCC2;\\n\\n    // Pancakeswap Router\\n    IUniswapV2Router02 router;\\n    // shareholder fields\\n    address[] shareholders;\\n    mapping (address =\\u003e uint256) shareholderIndexes;\\n    mapping (address =\\u003e uint256) shareholderClaims;\\n    mapping (address =\\u003e Share) public shares;\\n    // shares math and fields\\n    uint256 public totalShares;\\n    uint256 public totalDividendsEARN;\\n    uint256 public dividendsPerShareEARN;\\n\\n    uint256 public totalDividendsVAULT;\\n    uint256 public dividendsPerShareVAULT;\\n\\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\\n    // distributes twice per day\\n    uint256 public minPeriod = 4 hours;\\n    // auto claim\\n    uint256 public minAutoPeriod = 1 hours;\\n    // 20,000 Minimum Distribution\\n    uint256 public minDistribution = 2 * 10**4;\\n    // BNB Needed to Swap to SafeAffinity\\n    uint256 public swapToTokenThreshold = 5 * (10 ** 18);\\n    // current index in shareholder array \\n    uint256 currentIndexEarn;\\n    // current index in shareholder array \\n    uint256 currentIndexVault;\\n    \\n    bool earnsTurnPurchase = false;\\n    bool earnsTurnDistribute = true;\\n    \\n    modifier onlyToken() {\\n        require(msg.sender == _token); _;\\n    }\\n\\n    constructor (address _router) {\\n        router = _router != address(0)\\n        ? IUniswapV2Router02(_router)\\n        : IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        _token = msg.sender;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _bnbToTokenThreshold) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n        swapToTokenThreshold = _bnbToTokenThreshold;\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\\n        if(shares[shareholder].amount \\u003e 0){\\n            distributeVaultDividend(shareholder);\\n            distributeEarnDividend(shareholder);\\n        }\\n\\n        if(amount \\u003e 0 \\u0026\\u0026 shares[shareholder].amount == 0){\\n            addShareholder(shareholder);\\n        }else if(amount == 0 \\u0026\\u0026 shares[shareholder].amount \\u003e 0){\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcludedVault = getCumulativeVaultDividends(shares[shareholder].amount);\\n        shares[shareholder].totalExcludedEarn = getCumulativeEarnDividends(shares[shareholder].amount);\\n\\n    }\\n    \\n    function deposit() external override onlyToken {\\n        if (address(this).balance \\u003c swapToTokenThreshold) return;\\n        \\n        if (earnsTurnPurchase) {\\n            \\n            uint256 balanceBefore = IERC20(SafeEarn).balanceOf(address(this));\\n            \\n            address[] memory path = new address[](2);\\n            path[0] = router.WETH();\\n            path[1] = SafeEarn;\\n\\n            try router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: swapToTokenThreshold}(\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp.add(30)\\n            ) {} catch {return;}\\n\\n            uint256 amount = IERC20(SafeEarn).balanceOf(address(this)).sub(balanceBefore);\\n\\n            totalDividendsEARN = totalDividendsEARN.add(amount);\\n            dividendsPerShareEARN = dividendsPerShareEARN.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\\n            earnsTurnPurchase = false;\\n            \\n        } else {\\n            \\n            uint256 balanceBefore = IERC20(SafeVault).balanceOf(address(this));\\n            \\n            address[] memory path = new address[](2);\\n            path[0] = router.WETH();\\n            path[1] = SafeVault;\\n\\n            try router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: swapToTokenThreshold}(\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp.add(30)\\n            ) {} catch {return;}\\n\\n            uint256 amount = IERC20(SafeVault).balanceOf(address(this)).sub(balanceBefore);\\n\\n            totalDividendsVAULT = totalDividendsVAULT.add(amount);\\n            dividendsPerShareVAULT = dividendsPerShareVAULT.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\\n            earnsTurnPurchase = true;\\n        }\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if(shareholderCount == 0) { return; }\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        earnsTurnDistribute = !earnsTurnDistribute;\\n        uint256 iterations = 0;\\n        \\n        if (earnsTurnDistribute) {\\n            \\n            while(gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\n                if(currentIndexEarn \\u003e= shareholderCount){\\n                    currentIndexEarn = 0;\\n                }\\n\\n                if(shouldDistributeEarn(shareholders[currentIndexEarn])){\\n                    distributeEarnDividend(shareholders[currentIndexEarn]);\\n                }\\n            \\n                gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n                gasLeft = gasleft();\\n                currentIndexEarn++;\\n                iterations++;\\n            }\\n            \\n        } else {\\n            \\n            while(gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\n                if(currentIndexVault \\u003e= shareholderCount){\\n                    currentIndexVault = 0;\\n                }\\n\\n                if(shouldDistributeVault(shareholders[currentIndexVault])){\\n                    distributeVaultDividend(shareholders[currentIndexVault]);\\n                }\\n\\n                gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n                gasLeft = gasleft();\\n                currentIndexVault++;\\n                iterations++;\\n            }\\n            \\n        }\\n        \\n    }\\n    \\n    function processManually() external override returns(bool) {\\n        uint256 shareholderCount = shareholders.length;\\n        \\n        if(shareholderCount == 0) { return false; }\\n\\n        uint256 iterations = 0;\\n        uint256 index = 0;\\n\\n        while(iterations \\u003c shareholderCount) {\\n            if(index \\u003e= shareholderCount){\\n                index = 0;\\n            }\\n\\n            if(shouldDistributeVault(shareholders[index])){\\n                distributeVaultDividend(shareholders[index]);\\n            }\\n            index++;\\n            iterations++;\\n        }\\n        return true;\\n    }\\n\\n    function shouldDistributeVault(address shareholder) internal view returns (bool) {\\n        return shareholderClaims[shareholder] + minPeriod \\u003c block.timestamp\\n        \\u0026\\u0026 getUnpaidVaultEarnings(shareholder) \\u003e minDistribution;\\n    }\\n    \\n    function shouldDistributeEarn(address shareholder) internal view returns (bool) {\\n        return shareholderClaims[shareholder] + minPeriod \\u003c block.timestamp\\n        \\u0026\\u0026 getUnpaidEarnEarnings(shareholder) \\u003e minDistribution;\\n    }\\n\\n    function distributeVaultDividend(address shareholder) internal {\\n        if(shares[shareholder].amount == 0){ return; }\\n\\n        uint256 amount = getUnpaidVaultEarnings(shareholder);\\n        if(amount \\u003e 0){\\n            bool success = IERC20(SafeVault).transfer(shareholder, amount);\\n            if (success) {\\n                shareholderClaims[shareholder] = block.timestamp;\\n                shares[shareholder].totalRealisedVault = shares[shareholder].totalRealisedVault.add(amount);\\n                shares[shareholder].totalExcludedVault = getCumulativeVaultDividends(shares[shareholder].amount);\\n            }\\n        }\\n    }\\n    \\n    function distributeEarnDividend(address shareholder) internal {\\n        if(shares[shareholder].amount == 0){ return; }\\n\\n        uint256 amount = getUnpaidEarnEarnings(shareholder);\\n        if(amount \\u003e 0){\\n            bool success = IERC20(SafeEarn).transfer(shareholder, amount);\\n            if (success) {\\n                shareholderClaims[shareholder] = block.timestamp;\\n                shares[shareholder].totalRealisedEarn = shares[shareholder].totalRealisedEarn.add(amount);\\n                shares[shareholder].totalExcludedEarn = getCumulativeEarnDividends(shares[shareholder].amount);\\n            }\\n        }   \\n    }\\n    \\n    function claimEarnDividend(address claimer) external override onlyToken {\\n        require(shareholderClaims[claimer] + minAutoPeriod \\u003c block.timestamp, \\u0027must wait at least the minimum auto withdraw period\\u0027);\\n        distributeEarnDividend(claimer);\\n    }\\n    \\n    function claimVAULTDividend(address claimer) external override onlyToken {\\n        require(shareholderClaims[claimer] + minAutoPeriod \\u003c block.timestamp, \\u0027must wait at least the minimum auto withdraw period\\u0027);\\n        distributeVaultDividend(claimer);\\n    }\\n\\n    function getUnpaidVaultEarnings(address shareholder) public view returns (uint256) {\\n        if(shares[shareholder].amount == 0){ return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeVaultDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcludedVault;\\n\\n        if(shareholderTotalDividends \\u003c= shareholderTotalExcluded){ return 0; }\\n\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\n    }\\n    \\n    function getUnpaidEarnEarnings(address shareholder) public view returns (uint256) {\\n        if(shares[shareholder].amount == 0){ return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeEarnDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcludedEarn;\\n\\n        if(shareholderTotalDividends \\u003c= shareholderTotalExcluded){ return 0; }\\n\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\n    }\\n\\n    function getCumulativeVaultDividends(uint256 share) internal view returns (uint256) {\\n        return share.mul(dividendsPerShareVAULT).div(dividendsPerShareAccuracyFactor);\\n    }\\n    \\n    function getCumulativeEarnDividends(uint256 share) internal view returns (uint256) {\\n        return share.mul(dividendsPerShareEARN).div(dividendsPerShareAccuracyFactor);\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal { \\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder]; \\n        shareholders.pop();\\n        delete shareholderIndexes[shareholder]; \\n    }\\n\\n    /** Updates the Address of the PCS Router */\\n    function updatePancakeRouterAddress(address pcsRouter) external override onlyToken {\\n        router = IUniswapV2Router02(pcsRouter);\\n    }\\n    \\n    /** New Vault Address */\\n    function setSafeVaultAddress(address newSafeVault) external override onlyToken {\\n        SafeVault = newSafeVault;\\n    }\\n    \\n    /** New Earn Address */\\n    function setSafeEarnAddress(address newSafeEarn) external override onlyToken {\\n        SafeEarn = newSafeEarn;\\n    }\\n\\n    receive() external payable { \\n        \\n    }\\n\\n}\"},\"Context.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IAffinityDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IAffinityDistributor {\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _bnbToSafemoonThreshold) external;\\n    function setShare(address shareholder, uint256 amount) external;\\n    function deposit() external;\\n    function process(uint256 gas) external;\\n    function processManually() external returns(bool);\\n    function claimEarnDividend(address sender) external;\\n    function claimVAULTDividend(address sender) external;\\n    function updatePancakeRouterAddress(address pcs) external;\\n    function setSafeEarnAddress(address nSeth) external;\\n    function setSafeVaultAddress(address nSeth) external;\\n}\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapRouter02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    uint256 private _lockTime;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function geUnlockTime() public view returns (uint256) {\\n        return _lockTime;\\n    }\\n\\n    //Locks the contract for owner for the amount of time provided\\n    function lock(uint256 time) public virtual onlyOwner {\\n        _previousOwner = _owner;\\n        _owner = address(0);\\n        _lockTime = block.timestamp + time;\\n        emit OwnershipTransferred(_owner, address(0));\\n    }\\n\\n    //Unlocks the contract for owner when _lockTime is exceeds\\n    function unlock() public virtual {\\n        require(_previousOwner == msg.sender, \\\"You don\\u0027t have permission to unlock\\\");\\n        require(block.timestamp \\u003e _lockTime , \\\"Contract is locked\\\");\\n        emit OwnershipTransferred(_owner, _previousOwner);\\n        _owner = _previousOwner;\\n    }\\n}\\n\"},\"SafeAffinity.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"./AffinityDistributor.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapRouter02.sol\\\";\\n\\n/** \\n * Contract: SafeAffinity \\n * \\n *  This Contract Awards SafeVault and SafeEarn to holders\\n *  weighted by how much SafeAffinity you hold\\n * \\n *  Transfer Fee:  8%\\n *  Buy Fee:       8%\\n *  Sell Fee:     20%\\n * \\n *  Fees Go Toward:\\n *  43.75% SafeVault Distribution\\n *  43.75% SafeEarn Distribution\\n *  8.75% Burn\\n *  3.75% Marketing\\n */\\ncontract SafeAffinity is IERC20, Context, Ownable {\\n    \\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n    using Address for address;\\n\\n    // token data\\n    string constant _name = \\\"SafeAffinity\\\";\\n    string constant _symbol = \\\"AFFINITY\\\";\\n    uint8 constant _decimals = 9;\\n    // 1 Trillion Max Supply\\n    uint256 _totalSupply = 1 * 10**12 * (10 ** _decimals);\\n    uint256 public _maxTxAmount = _totalSupply.div(200); // 0.5% or 5 Billion\\n    // balances\\n    mapping (address =\\u003e uint256) _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\n    // exemptions\\n    mapping (address =\\u003e bool) isFeeExempt;\\n    mapping (address =\\u003e bool) isTxLimitExempt;\\n    mapping (address =\\u003e bool) isDividendExempt;\\n    // fees\\n    uint256 public burnFee = 175;\\n    uint256 public reflectionFee = 1750;\\n    uint256 public marketingFee = 75;\\n    // total fees\\n    uint256 totalFeeSells = 2000;\\n    uint256 totalFeeBuys = 800;\\n    uint256 feeDenominator = 10000;\\n    // Marketing Funds Receiver\\n    address public marketingFeeReceiver = 0x66cF1ef841908873C34e6bbF1586F4000b9fBB5D;\\n    // minimum bnb needed for distribution\\n    uint256 public minimumToDistribute = 5 * 10**18;\\n    // Pancakeswap V2 Router\\n    IUniswapV2Router02 router;\\n    address public pair;\\n    bool public allowTransferToMarketing = true;\\n    // gas for distributor\\n    AffinityDistributor public distributor;\\n    uint256 distributorGas = 500000;\\n    // in charge of swapping\\n    bool public swapEnabled = true;\\n    uint256 public swapThreshold = _totalSupply.div(300); // 0.03% = 300 Million\\n    // true if our threshold decreases with circulating supply\\n    bool public canChangeSwapThreshold = false;\\n    uint256 public swapThresholdPercentOfCirculatingSupply = 300;\\n    bool inSwap;\\n    bool isDistributing;\\n    // false to stop the burn\\n    bool burnEnabled = true;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n    modifier distributing() { isDistributing = true; _; isDistributing = false; }\\n    // Uniswap Router V2\\n    address private _dexRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    \\n    // initialize some stuff\\n    constructor (\\n    ) {\\n        // Pancakeswap V2 Router\\n        router = IUniswapV2Router02(_dexRouter);\\n        // Liquidity Pool Address for BNB -\\u003e Vault\\n        pair = IUniswapV2Factory(router.factory()).createPair(router.WETH(), address(this));\\n        _allowances[address(this)][address(router)] = _totalSupply;\\n        // our dividend Distributor\\n        distributor = new AffinityDistributor(_dexRouter);\\n        // exempt deployer and contract from fees\\n        isFeeExempt[msg.sender] = true;\\n        isFeeExempt[address(this)] = true;\\n        // exempt important addresses from TX limit\\n        isTxLimitExempt[msg.sender] = true;\\n        isTxLimitExempt[marketingFeeReceiver] = true;\\n        isTxLimitExempt[address(distributor)] = true;\\n        isTxLimitExempt[address(this)] = true;\\n        // exempt this important addresses  from receiving Rewards\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        // approve router of total supply\\n        approve(_dexRouter, _totalSupply);\\n        approve(address(pair), _totalSupply);\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable { }\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n    \\n    function internalApprove() private {\\n        _allowances[address(this)][address(router)] = _totalSupply;\\n        _allowances[address(this)][address(pair)] = _totalSupply;\\n    }\\n    \\n    /** Approve Total Supply */\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, _totalSupply);\\n    }\\n    \\n    /** Transfer Function */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n    \\n    /** Transfer Function */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != _totalSupply){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n    \\n    /** Internal Transfer */\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        // make standard checks\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n        // check if we have reached the transaction limit\\n        require(amount \\u003c= _maxTxAmount || isTxLimitExempt[sender], \\\"TX Limit Exceeded\\\");\\n        // whether transfer succeeded\\n        bool success;\\n        // amount of tokens received by recipient\\n        uint256 amountReceived;\\n        // if we\\u0027re in swap perform a basic transfer\\n        if(inSwap || isDistributing){ \\n            (amountReceived, success) = handleTransferBody(sender, recipient, amount); \\n            emit Transfer(sender, recipient, amountReceived);\\n            return success;\\n        }\\n        \\n        // limit gas consumption by splitting up operations\\n        if(shouldSwapBack()) { \\n            swapBack();\\n            (amountReceived, success) = handleTransferBody(sender, recipient, amount);\\n        } else if (shouldReflectAndDistribute()) {\\n            reflectAndDistribute();\\n            (amountReceived, success) = handleTransferBody(sender, recipient, amount);\\n        } else {\\n            (amountReceived, success) = handleTransferBody(sender, recipient, amount);\\n            try distributor.process(distributorGas) {} catch {}\\n        }\\n        \\n        emit Transfer(sender, recipient, amountReceived);\\n        return success;\\n    }\\n    \\n    /** Takes Associated Fees and sets holders\\u0027 new Share for the Safemoon Distributor */\\n    function handleTransferBody(address sender, address recipient, uint256 amount) internal returns (uint256, bool) {\\n        // subtract balance from sender\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n        // amount receiver should receive\\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(recipient, amount) : amount;\\n        // add amount to recipient\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n        // set shares for distributors\\n        if(!isDividendExempt[sender]){ \\n            distributor.setShare(sender, _balances[sender]);\\n        }\\n        if(!isDividendExempt[recipient]){ \\n            distributor.setShare(recipient, _balances[recipient]);\\n        }\\n        // return the amount received by receiver\\n        return (amountReceived, true);\\n    }\\n\\n    /** False if sender is Fee Exempt, True if not */\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n    \\n    /** Takes Proper Fee (8% buys / transfers, 20% on sells) and stores in contract */\\n    function takeFee(address receiver, uint256 amount) internal returns (uint256) {\\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n        return amount.sub(feeAmount);\\n    }\\n    \\n    /** True if we should swap from Vault =\\u003e BNB */\\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        \\u0026\\u0026 !inSwap\\n        \\u0026\\u0026 swapEnabled\\n        \\u0026\\u0026 _balances[address(this)] \\u003e= swapThreshold;\\n    }\\n    \\n    /**\\n     *  Swaps SafeAffinity for BNB if threshold is reached and the swap is enabled\\n     *  Burns 20% of SafeAffinity in Contract\\n     *  Swaps The Rest For BNB\\n     */\\n    function swapBack() private swapping {\\n        // path from token -\\u003e BNB\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        // tokens allocated to burning\\n        uint256 burnAmount = swapThreshold.mul(burnFee).div(totalFeeSells);\\n        // burn tokens\\n        burnTokens(burnAmount);\\n        // how many are left to swap with\\n        uint256 swapAmount = swapThreshold.sub(burnAmount);\\n        // swap tokens for BNB\\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            swapAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {} catch{return;}\\n        \\n        // Tell The Blockchain\\n        emit SwappedBack(swapAmount, burnAmount);\\n    }\\n    \\n    function shouldReflectAndDistribute() private view returns(bool) {\\n        return msg.sender != pair\\n        \\u0026\\u0026 !isDistributing\\n        \\u0026\\u0026 swapEnabled\\n        \\u0026\\u0026 address(this).balance \\u003e= minimumToDistribute;\\n    }\\n    \\n    function reflectAndDistribute() private distributing {\\n        \\n        bool success; bool successful;\\n        uint256 amountBNBMarketing; uint256 amountBNBReflection;\\n        // allocate bnb\\n        if (allowTransferToMarketing) {\\n            amountBNBMarketing = address(this).balance.mul(marketingFee).div(totalFeeSells);\\n            amountBNBReflection = address(this).balance.sub(amountBNBMarketing);\\n            // fund distributors\\n            (success,) = payable(address(distributor)).call{value: amountBNBReflection, gas: 26000}(\\\"\\\");\\n            distributor.deposit();\\n            // transfer to marketing\\n            if (allowTransferToMarketing) {\\n                (successful,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 26000}(\\\"\\\");\\n            }\\n        } else {\\n            amountBNBReflection = address(this).balance;\\n            // fund distributors\\n            (success,) = payable(address(distributor)).call{value: amountBNBReflection, gas: 26000}(\\\"\\\");\\n            distributor.deposit();\\n        }\\n        emit FundDistributors(amountBNBReflection, amountBNBMarketing);\\n    }\\n\\n    /** Removes Tokens From Circulation */\\n    function burnTokens(uint256 tokenAmount) private returns (bool) {\\n        if (!burnEnabled) {\\n            return false;\\n        }\\n        // update balance of contract\\n        _balances[address(this)] = _balances[address(this)].sub(tokenAmount, \\u0027cannot burn this amount\\u0027);\\n        // update Total Supply\\n        _totalSupply = _totalSupply.sub(tokenAmount, \\u0027total supply cannot be negative\\u0027);\\n        // approve Router for total supply\\n        internalApprove();\\n        // change Swap Threshold if we should\\n        if (canChangeSwapThreshold) {\\n            swapThreshold = _totalSupply.div(swapThresholdPercentOfCirculatingSupply);\\n        }\\n        // emit Transfer to Blockchain\\n        emit Transfer(address(this), address(0), tokenAmount);\\n        return true;\\n    }\\n   \\n    /** Claim Your Vault Rewards Early */\\n    function claimVaultDividend() external returns (bool) {\\n        distributor.claimVAULTDividend(msg.sender);\\n        return true;\\n    }\\n    \\n    /** Claim Your Earn Rewards Manually */\\n    function claimEarnDividend() external returns (bool) {\\n        distributor.claimEarnDividend(msg.sender);\\n        return true;\\n    }\\n\\n    /** Manually Depsoits To The Earn or Vault Contract */\\n    function manuallyDeposit() external returns (bool){\\n        distributor.deposit();\\n        return true;\\n    }\\n    \\n    /** Is Holder Exempt From Fees */\\n    function getIsFeeExempt(address holder) public view returns (bool) {\\n        return isFeeExempt[holder];\\n    }\\n    \\n    /** Is Holder Exempt From Earn Dividends */\\n    function getIsDividendExempt(address holder) public view returns (bool) {\\n        return isDividendExempt[holder];\\n    }\\n    \\n    /** Is Holder Exempt From Transaction Limit */\\n    function getIsTxLimitExempt(address holder) public view returns (bool) {\\n        return isTxLimitExempt[holder];\\n    }\\n        \\n    /** Get Fees for Buying or Selling */\\n    function getTotalFee(bool selling) public view returns (uint256) {\\n        if(selling){ return totalFeeSells; }\\n        return totalFeeBuys;\\n    }\\n    \\n    /** Sets Various Fees */\\n    function setFees(uint256 _burnFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _buyFee) external onlyOwner {\\n        burnFee = _burnFee;\\n        reflectionFee = _reflectionFee;\\n        marketingFee = _marketingFee;\\n        totalFeeSells = _burnFee.add(_reflectionFee).add(_marketingFee);\\n        totalFeeBuys = _buyFee;\\n        require(_buyFee \\u003c= 1000);\\n        require(totalFeeSells \\u003c feeDenominator/2);\\n    }\\n    \\n    /** Set Exemption For Holder */\\n    function setIsFeeAndTXLimitExempt(address holder, bool feeExempt, bool txLimitExempt) external onlyOwner {\\n        require(holder != address(0));\\n        isFeeExempt[holder] = feeExempt;\\n        isTxLimitExempt[holder] = txLimitExempt;\\n    }\\n    \\n    /** Set Holder To Be Exempt From Earn Dividends */\\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\\n        require(holder != address(this) \\u0026\\u0026 holder != pair);\\n        isDividendExempt[holder] = exempt;\\n        if(exempt) {\\n            distributor.setShare(holder, 0);\\n        } else {\\n            distributor.setShare(holder, _balances[holder]);\\n        }\\n    }\\n    \\n    /** Set Settings related to Swaps */\\n    function setSwapBackSettings(bool _swapEnabled, uint256 _swapThreshold, bool _canChangeSwapThreshold, uint256 _percentOfCirculatingSupply, bool _burnEnabled, uint256 _minimumBNBToDistribute) external onlyOwner {\\n        swapEnabled = _swapEnabled;\\n        swapThreshold = _swapThreshold;\\n        canChangeSwapThreshold = _canChangeSwapThreshold;\\n        swapThresholdPercentOfCirculatingSupply = _percentOfCirculatingSupply;\\n        burnEnabled = _burnEnabled;\\n        minimumToDistribute = _minimumBNBToDistribute;\\n    }\\n\\n    /** Set Criteria For SafeAffinity Distributor */\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _bnbToTokenThreshold) external onlyOwner {\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution, _bnbToTokenThreshold);\\n    }\\n\\n    /** Should We Transfer To Marketing */\\n    function setAllowTransferToMarketing(bool _canSendToMarketing, address _marketingFeeReceiver) external onlyOwner {\\n        allowTransferToMarketing = _canSendToMarketing;\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n    }\\n    \\n    /** Updates The Pancakeswap Router */\\n    function setDexRouter(address nRouter) external onlyOwner{\\n        require(nRouter != _dexRouter);\\n        _dexRouter = nRouter;\\n        router = IUniswapV2Router02(nRouter);\\n        address _uniswapV2Pair = IUniswapV2Factory(router.factory())\\n            .createPair(address(this), router.WETH());\\n        pair = _uniswapV2Pair;\\n        _allowances[address(this)][address(router)] = _totalSupply;\\n        distributor.updatePancakeRouterAddress(nRouter);\\n    }\\n\\n    /** Set Address For SafeAffinity Distributor */\\n    function setDistributor(address payable newDistributor) external onlyOwner {\\n        require(newDistributor != address(distributor), \\u0027Distributor already has this address\\u0027);\\n        distributor = AffinityDistributor(newDistributor);\\n        emit SwappedDistributor(newDistributor);\\n    }\\n\\n    /** Swaps SafeAffinity and SafeVault Addresses in case of migration */\\n    function setTokenAddresses(address nSafeEarn, address nSafeVault) external onlyOwner {\\n        distributor.setSafeEarnAddress(nSafeEarn);\\n        distributor.setSafeVaultAddress(nSafeVault);\\n        emit SwappedTokenAddresses(nSafeEarn, nSafeVault);\\n    }\\n    \\n    /** Deletes the entire bag from sender */\\n    function deleteBag(uint256 nTokens) external returns(bool){\\n        // make sure you are burning enough tokens\\n        require(nTokens \\u003e 0);\\n        // if the balance is greater than zero\\n        require(_balances[msg.sender] \\u003e= nTokens, \\u0027user does not own enough tokens\\u0027);\\n        // remove tokens from sender\\n        _balances[msg.sender] = _balances[msg.sender].sub(nTokens, \\u0027cannot have negative tokens\\u0027);\\n        // remove tokens from total supply\\n        _totalSupply = _totalSupply.sub(nTokens, \\u0027total supply cannot be negative\\u0027);\\n        // approve Router for the new total supply\\n        internalApprove();\\n        // set share in distributor\\n        distributor.setShare(msg.sender, _balances[msg.sender]);\\n        // tell blockchain\\n        emit Transfer(msg.sender, address(0), nTokens);\\n        return true;\\n    }\\n\\n    // Events\\n    event SwappedDistributor(address newDistributor);\\n    event SwappedBack(uint256 tokensSwapped, uint256 amountBurned);\\n    event SwappedTokenAddresses(address newSafeEarn, address newSafeVault);\\n    event FundDistributors(uint256 reflectionAmount, uint256 marketingAmount);\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingAmount\",\"type\":\"uint256\"}],\"name\":\"FundDistributors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"}],\"name\":\"SwappedBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"SwappedDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSafeEarn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSafeVault\",\"type\":\"address\"}],\"name\":\"SwappedTokenAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTransferToMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeSwapThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEarnDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVaultDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"deleteBag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract AffinityDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getIsDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getIsFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getIsTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manuallyDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canSendToMarketing\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setAllowTransferToMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nRouter\",\"type\":\"address\"}],\"name\":\"setDexRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bnbToTokenThreshold\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeAndTXLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canChangeSwapThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percentOfCirculatingSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burnEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBNBToDistribute\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nSafeEarn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nSafeVault\",\"type\":\"address\"}],\"name\":\"setTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdPercentOfCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafeAffinity", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4db611f3733bde48c957a8a760531fa1c145460021dddfe370620a8cd9c85a2"}