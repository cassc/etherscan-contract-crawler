{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FlourishingAIToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20VestableInTimestamp.sol\\\";\\r\\n\\r\\ncontract FlourishingAIToken is ERC20VestableInTimestamp {\\r\\n    uint8 private constant DECIMALS = 18;\\r\\n    uint256 private constant TOKEN_WEI = 10**uint256(DECIMALS);\\r\\n\\r\\n    uint256 private constant INITIAL_WHOLE_TOKENS = uint256(55 * (10**6)); // 55 million\\r\\n    uint256 private constant INITIAL_SUPPLY =\\r\\n        uint256(INITIAL_WHOLE_TOKENS) * uint256(TOKEN_WEI);\\r\\n\\r\\n    constructor(address admin) ERC20(\\\"Flourishing AI Token\\\", \\\"AI\\\") {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        _setupRole(GRANTOR_ROLE, admin);\\r\\n        addWhiteList(admin);\\r\\n\\r\\n        _mint(admin, INITIAL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) public onlyAdmin {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ERC20VestableInTimestamp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\nabstract contract ERC20VestableInTimestamp is ERC20Burnable, AccessControl {\\r\\n    bytes32 internal constant GRANTOR_ROLE = keccak256(\\\"GRANTOR_ROLE\\\");\\r\\n\\r\\n    // Date-related constants for sanity-checking dates to reject obvious erroneous inputs\\r\\n    // and conversions from seconds to days and years that are more or less leap year-aware.\\r\\n    uint256 private constant SECONDS_PER_DAY = 60 * 60 * 24; /* 86400 seconds in a day */\\r\\n    uint256 private constant TEN_YEARS_SECONDS = SECONDS_PER_DAY * 365 * 10; /* Seconds in ten years */\\r\\n    uint256 private constant JAN_1_2000 = 946684800; /* Saturday, January 1, 2000 0:00:00 (GMT) (see https://www.epochconverter.com/) */\\r\\n    uint256 private constant JAN_1_3000 = 32503680000;\\r\\n\\r\\n    /**\\r\\n     * Vesting Schedule\\r\\n     */\\r\\n    struct VestingSchedule {\\r\\n        string scheduleName; // Name of vesting schedule.\\r\\n        bool isActive; // Status of available.\\r\\n        uint256 startTimestamp; // Timestamp of vesting schedule beginning.\\r\\n        uint256 cliffDuration; // A period of time which token be locked.\\r\\n        uint256 duration; // A period of time which token be released from 0 to max vesting amount.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * User's vesting information in a schedule\\r\\n     */\\r\\n    struct VestingForAccount {\\r\\n        string scheduleName;\\r\\n        uint256 amountVested;\\r\\n        uint256 amountNotVested;\\r\\n        uint256 amountOfGrant;\\r\\n        uint256 vestStartTimestamp;\\r\\n        uint256 cliffDuration;\\r\\n        uint256 vestDuration;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    // Info of each vesting schedule.\\r\\n    mapping(uint256 => VestingSchedule) public vestingSchedules;\\r\\n    // Array of all active schedules, each element is an 'id' value from the vesting schedule rounds\\r\\n    uint256[] public allActiveSchedules;\\r\\n    // Vesting amount of user in a schedule.\\r\\n    mapping(address => mapping(uint256 => uint256)) public userVestingAmountInSchedule;\\r\\n\\t// Whether transfers are disabled or not\\r\\n    bool internal protected = true;\\r\\n    // Array of all addresses which are allowed to spend within locking period.\\r\\n    address[] whiteLists;\\r\\n    // Check an address is whiteList or not.\\r\\n    mapping(address => bool) public isWhiteList;\\r\\n\\r\\n\\r\\n    event VestingScheduleUpdated(\\r\\n        uint256 indexed id,\\r\\n        string indexed name,\\r\\n        bool indexed isActive,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 cliffDuration,\\r\\n        uint256 duration\\r\\n    );\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(_msgSender()), \\\"must have admin role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGrantor() {\\r\\n        require(isGrantor(_msgSender()), \\\"must have grantor role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGrantorOrSelf(address account) {\\r\\n        require(\\r\\n            isGrantor(_msgSender()) || _msgSender() == account,\\r\\n            \\\"must have grantor role or self\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address account) public view returns (bool) {\\r\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function isGrantor(address account) public view returns (bool) {\\r\\n        return hasRole(GRANTOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function getAllActiveSchedules() external view returns (uint256[] memory) {\\r\\n        return allActiveSchedules;\\r\\n    }\\r\\n\\r\\n    function getWhiteLists() external view onlyAdmin returns (address[] memory) {\\r\\n        return whiteLists;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This operation adds an address to the whiteLists list.\\r\\n     *\\r\\n     * @param _whiteListAddress = Address is being whiteList.\\r\\n     */\\r\\n    function addWhiteList(\\r\\n        address _whiteListAddress\\r\\n    ) internal {\\r\\n        isWhiteList[_whiteListAddress] = true;\\r\\n        // If we already have this address in our whiteLists, just bail out\\r\\n\\t\\tfor (uint256 i = 0; i < whiteLists.length; i++) {\\r\\n\\t\\t\\tif (whiteLists[i] == _whiteListAddress)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\twhiteLists.push(_whiteListAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This operation removes an address from the whiteLists list.\\r\\n     *\\r\\n     * @param _whiteListAddress = Address is being removed.\\r\\n     */\\r\\n    function removeWhiteList(\\r\\n        address _whiteListAddress\\r\\n    ) internal {\\r\\n        isWhiteList[_whiteListAddress] = false;\\r\\n        for (uint256 i = 0; i < whiteLists.length; i++) {\\r\\n            if (whiteLists[i] == _whiteListAddress) {\\r\\n\\t\\t\\t\\t// We found the element we need to remove\\r\\n\\t\\t\\t\\t// first copy the last item over where X is, then delete the last item of the array\\r\\n\\t\\t\\t\\twhiteLists[i] = whiteLists[whiteLists.length - 1];\\r\\n                whiteLists.pop();\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This operation removes a schedule from the active schedule list.\\r\\n     *\\r\\n     * @param _id = Vesting schedule ID.\\r\\n     */\\r\\n    function removeActiveSchedule(uint256 _id) internal {\\r\\n        for (uint256 i = 0; i < allActiveSchedules.length; i++) {\\r\\n            if (allActiveSchedules[i] == _id) {\\r\\n\\t\\t\\t\\t// We found the element we need to remove\\r\\n\\t\\t\\t\\t// first copy the last item over where X is, then delete the last item of the array\\r\\n\\t\\t\\t\\tallActiveSchedules[i] = allActiveSchedules[allActiveSchedules.length - 1];\\r\\n                allActiveSchedules.pop();\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\t/**\\r\\n     * @dev This operation adds a schedule to the active schedule list.\\r\\n     *\\r\\n     * @param _id = Vesting schedule ID.\\r\\n     */\\r\\n\\tfunction addActiveSchedule(uint256 _id) internal {\\r\\n\\t\\t// If we already have this id in our active schedules, just bail out\\r\\n\\t\\tfor (uint256 i = 0; i < allActiveSchedules.length; i++) {\\r\\n\\t\\t\\tif (allActiveSchedules[i] == _id)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tallActiveSchedules.push(_id);\\r\\n\\t}\\r\\n\\r\\n    // ===========================================================\\r\\n    // === Grantor's available functions.\\r\\n    // ===========================================================\\r\\n\\r\\n    // Set a batch of addresses as whitelists.\\r\\n    function setWhiteList(\\r\\n        address[] calldata _whiteListAddresses,\\r\\n        bool[] calldata _status\\r\\n    ) external onlyGrantor {\\r\\n        require(_whiteListAddresses.length > 0, \\\"invalid length\\\");\\r\\n        require(_whiteListAddresses.length == _status.length, \\\"invalid whiteListAddresses/status length\\\");\\r\\n        for (uint256 i = 0; i < _whiteListAddresses.length; i++) {\\r\\n            if (_status[i]) {\\r\\n                addWhiteList(_whiteListAddresses[i]);\\r\\n            } else {\\r\\n                removeWhiteList(_whiteListAddresses[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\tfunction getProtection() public view onlyGrantor returns (bool) {\\r\\n\\t\\treturn protected;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setProtection(bool _protected) public onlyGrantor {\\r\\n\\t\\tprotected = _protected;\\r\\n\\t}\\r\\n\\r\\n    // Update the vesting schedule definitions\\r\\n    function updateVestingSchedules(\\r\\n        string[] calldata _scheduleNames,\\r\\n        uint256[] calldata _ids,\\r\\n        bool[] calldata _isActives,\\r\\n        uint256[] calldata _startTimestamps,\\r\\n        uint256[] calldata _cliffDurations,\\r\\n        uint256[] calldata _durations\\r\\n    ) external onlyGrantor {\\r\\n        for (uint i = 0; i < _scheduleNames.length; i++) {\\r\\n            // Check for a valid vesting schedule give (disallow absurd values to reject likely bad input).\\r\\n            require(_ids[i] != 0 && _ids[i] < 1000, appendUintToString(\\\"invalid vesting schedule \\\", _ids[i]));\\r\\n            require(\\r\\n                _durations[i] > 0 &&\\r\\n                _durations[i] <= TEN_YEARS_SECONDS &&\\r\\n                _cliffDurations[i] < _durations[i],\\r\\n                appendUintToString(\\\"invalid vesting schedule \\\", _durations[i])\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                _startTimestamps[i] >= JAN_1_2000 && _startTimestamps[i] < JAN_1_3000,\\r\\n                appendUintToString(\\\"invalid start timestamp\\\", _startTimestamps[i])\\r\\n            );\\r\\n\\r\\n            VestingSchedule storage vestingSchedule = vestingSchedules[_ids[i]];\\r\\n\\t\\t\\t// update allActiveSchedules\\r\\n            if (vestingSchedule.isActive && !_isActives[i]) {\\r\\n\\t\\t\\t\\tremoveActiveSchedule(_ids[i]);\\r\\n            } else\\r\\n\\t\\t\\tif (!vestingSchedule.isActive && _isActives[i]) {\\r\\n\\t\\t\\t\\taddActiveSchedule(_ids[i]);\\r\\n            }\\r\\n            // update vestingSchedule\\r\\n            vestingSchedule.scheduleName = _scheduleNames[i];\\r\\n            vestingSchedule.isActive = _isActives[i];\\r\\n            vestingSchedule.startTimestamp = _startTimestamps[i];\\r\\n            vestingSchedule.cliffDuration = _cliffDurations[i];\\r\\n            vestingSchedule.duration = _durations[i];\\r\\n\\r\\n            emit VestingScheduleUpdated(\\r\\n                _ids[i],\\r\\n                _scheduleNames[i],\\r\\n                _isActives[i],\\r\\n                _startTimestamps[i],\\r\\n                _cliffDurations[i],\\r\\n                _durations[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\tfunction appendUintToString(string memory inStr, uint256 _i) internal pure returns (string memory str) {\\r\\n\\t\\tif (_i == 0)\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn \\\"0\\\";\\r\\n\\t\\t}\\r\\n\\t\\tuint256 j = _i;\\r\\n\\t\\tuint256 length = 0;\\r\\n\\t\\twhile (j != 0)\\r\\n\\t\\t{\\r\\n\\t\\t\\tlength++;\\r\\n\\t\\t\\tj /= 10;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tbytes memory inbstr= bytes(inStr);\\t\\t\\r\\n\\t\\tuint256 k = inbstr.length + length;\\r\\n\\t\\tbytes memory bstr = new bytes(k);\\r\\n\\t\\t// copy the string over\\r\\n\\t\\tj = 0;\\r\\n\\t\\twhile (j < inbstr.length) {\\r\\n\\t\\t\\tbstr[j] = inbstr[j];\\r\\n\\t\\t\\tj++;\\r\\n\\t\\t}\\r\\n        // now copy the stringified uint over\\r\\n\\t\\tj = _i;\\r\\n\\t\\twhile (j != 0)\\r\\n\\t\\t{\\r\\n\\t\\t\\tbstr[--k] = bytes1(uint8(48 + j % 10));\\r\\n\\t\\t\\tj /= 10;\\r\\n\\t\\t}\\r\\n\\t\\tstr = string(bstr);\\r\\n    }\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Immediately set multi vesting schedule to an address, the token in their wallet will vest over time\\r\\n     * according to this schedule.\\r\\n     *\\r\\n     * @param _beneficiaries = Addresses to which tokens will be vested.\\r\\n     * @param _vestingScheduleIDs = Vesting schedule IDs.\\r\\n     * @param _vestingAmounts = The amount of tokens that will be vested.\\r\\n     */\\r\\n    function applyMultiVestingSchedule(\\r\\n        address[] calldata _beneficiaries,\\r\\n        uint256[] calldata _vestingScheduleIDs,\\r\\n        uint256[] calldata _vestingAmounts\\r\\n    ) external onlyGrantor returns (bool ok) {\\r\\n        require(_beneficiaries.length == _vestingScheduleIDs.length, \\\"invalid schedules length\\\");\\r\\n        require(_vestingScheduleIDs.length == _vestingAmounts.length, \\\"invalid amounts length\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\r\\n            require(_vestingScheduleIDs[i] != 0, \\\"invalid vesting schedule\\\");\\r\\n\\t\\t\\trequire(_vestingAmounts[i] != 0, \\\"invalid vesting amount\\\");\\r\\n            require(\\r\\n                userVestingAmountInSchedule[_beneficiaries[i]][_vestingScheduleIDs[i]] == 0,\\r\\n                appendUintToString(\\\"already applied vesting schedule \\\", i)\\r\\n            );\\r\\n            require(\\r\\n                vestingSchedules[_vestingScheduleIDs[i]].isActive,\\r\\n                appendUintToString(\\\"vesting schedule is not active \\\", i)\\r\\n            );\\r\\n\\r\\n\\t\\t\\t// Actually set up the vesting schedule for the beneficiary\\r\\n\\t\\t\\tuserVestingAmountInSchedule[_beneficiaries[i]][_vestingScheduleIDs[i]] = _vestingAmounts[i];\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferVestingTokens(\\r\\n        address[] calldata _beneficiaries,\\r\\n        uint256[] calldata _vestingScheduleIDs\\r\\n    ) external onlyAdmin {\\r\\n        require(_beneficiaries.length == _vestingScheduleIDs.length, \\\"invalid schedules length\\\");\\r\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\r\\n            require(\\r\\n                userVestingAmountInSchedule[_beneficiaries[i]][_vestingScheduleIDs[i]] > 0,\\r\\n                appendUintToString(\\\"beneficiary has no tokens to transfer in this schedule \\\", i)\\r\\n            );\\r\\n\\r\\n            super.transfer(_beneficiaries[i], userVestingAmountInSchedule[_beneficiaries[i]][_vestingScheduleIDs[i]]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============================================================\\r\\n    // === Check vesting information.\\r\\n    // ============================================================\\r\\n\\r\\n    // Get the timestamp of the current day, in seconds since the UNIX epoch.\\r\\n    function today() public view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _effectiveDay(uint256 onDayOrToday)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return onDayOrToday == 0 ? today() : onDayOrToday;\\r\\n    }\\r\\n\\r\\n    // Get all of schedules user is having\\r\\n    function getAllSchedulesOfBeneficiary(address _beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory userActiveSchedules)\\r\\n    {\\r\\n        uint256 activeCount = 0;\\r\\n\\t\\t// Get the schedules which are active and the beneficiary also has tokens vesting in\\r\\n        uint256[] memory schedules = new uint256[](allActiveSchedules.length);\\r\\n        for (uint256 i = 0; i < allActiveSchedules.length; i++) {\\r\\n            if (userVestingAmountInSchedule[_beneficiary][allActiveSchedules[i]] > 0) {\\r\\n                schedules[activeCount] = allActiveSchedules[i];\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        userActiveSchedules = new uint256[](activeCount);\\r\\n        for (uint256 i = 0; i < activeCount; i++) {\\r\\n            userActiveSchedules[i] = schedules[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determines the amount of token that have not vested for 1 schedule in the give address.\\r\\n     *\\r\\n     * notVestAmount = vestingAmount * (endDate - onDate)/(endDate - startDate)\\r\\n     *\\r\\n     * @param _beneficiary = The address to check\\r\\n     * @param _onDayOrToday = The day to check, in seconds since the UNIX epoch.\\r\\n     * Pass `0` if indicate TODAY.\\r\\n     */\\r\\n    function _getNotVestedAmount(\\r\\n        address _beneficiary,\\r\\n        uint256 _vestingSchedule,\\r\\n        uint256 _onDayOrToday\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 userVestingAmount = userVestingAmountInSchedule[_beneficiary][_vestingSchedule];\\r\\n        if (userVestingAmount == 0) return uint256(0);\\r\\n        VestingSchedule storage vesting = vestingSchedules[_vestingSchedule];\\r\\n        uint256 onDay = _effectiveDay(_onDayOrToday);\\r\\n\\r\\n        // If there's no schedule, or before the vesting cliff, then the full amount is not vested.\\r\\n        if (\\r\\n            !vesting.isActive ||\\r\\n            onDay < vesting.startTimestamp + vesting.cliffDuration\\r\\n        ) {\\r\\n            // None are vested (all are not vested)\\r\\n            return userVestingAmount;\\r\\n        }\\r\\n        // If after end of cliff + vesting, then the not vested amount is zero (all are vested).\\r\\n        else if (\\r\\n            onDay >=\\r\\n            vesting.startTimestamp + (vesting.cliffDuration + vesting.duration)\\r\\n        ) {\\r\\n            // All are vested (none are not vested)\\r\\n            return uint256(0);\\r\\n        }\\r\\n        // Otherwise a fractional amount is vested.\\r\\n        else {\\r\\n            // Compute the exact number of days vested.\\r\\n            uint256 daysVested = onDay - (vesting.startTimestamp + vesting.cliffDuration);\\r\\n\\r\\n            // Compute the fraction vested from schedule using 224.32 fixed point math for date range ratio.\\r\\n            // Note: This is safe in 256-bit math because max value of X billion tokens = X*10^27 wei, and\\r\\n            // typical token amounts can fit into 90 bits. Scaling using a 32 bits value results in only 125\\r\\n            // bits before reducing back to 90 bits by dividing. There is plenty of room left, even for token\\r\\n            // amounts many orders of magnitude greater than mere billions.\\r\\n            uint256 vested = (userVestingAmount * daysVested) / vesting.duration;\\r\\n            return userVestingAmount - vested;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determines the all amount of token that have not vested in multiple schedules in the give account.\\r\\n     *\\r\\n     * notVestAmount = vestingAmount * (endDate - onDate)/(endDate - startDate)\\r\\n     *\\r\\n     * @param _beneficiary = The account to check\\r\\n     * @param _onDayOrToday = The day to check, in seconds since the UNIX epoch.\\r\\n     * Pass `0` if indicate TODAY.\\r\\n     */\\r\\n    function _getNotVestedAmountForAllSchedules(\\r\\n        address _beneficiary,\\r\\n        uint256 _onDayOrToday\\r\\n    ) internal view returns (uint256 notVestedAmount) {\\r\\n        uint256[] memory userSchedules = getAllSchedulesOfBeneficiary(_beneficiary);\\r\\n        if (userSchedules.length == 0) return uint256(0);\\r\\n\\r\\n        for (uint256 i = 0; i < userSchedules.length; i++) {\\r\\n            notVestedAmount += _getNotVestedAmount(\\r\\n                _beneficiary,\\r\\n                userSchedules[i],\\r\\n                _onDayOrToday\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the amount of funds in the given account which are available for use as of\\r\\n     * the given day. If there's no vesting schedule then 0 tokens are considered to be vested and\\r\\n     * this just returns the full account balance.\\r\\n     *\\r\\n     * availableAmount = totalFunds - notVestedAmount.\\r\\n     *\\r\\n     * @param _beneficiary = The account to check.\\r\\n     * @param _onDay = The day to check for, in seconds since the UNIX epoch.\\r\\n     */\\r\\n    function _getAvailableAmount(address _beneficiary, uint256 _onDay)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 totalTokens = balanceOf(_beneficiary);\\r\\n        uint256 vested = totalTokens - _getNotVestedAmountForAllSchedules(_beneficiary, _onDay);\\r\\n        return vested;\\r\\n    }\\r\\n\\r\\n    function vestingForBeneficiaryAsOf(address _beneficiary, uint256 _onDayOrToday)\\r\\n        public\\r\\n        view\\r\\n        onlyGrantorOrSelf(_beneficiary)\\r\\n        returns (VestingForAccount[] memory userVestingInfo)\\r\\n    {\\r\\n        uint256[] memory userSchedules = getAllSchedulesOfBeneficiary(_beneficiary);\\r\\n        if (userSchedules.length == 0) {\\r\\n            return userVestingInfo;\\r\\n        }\\r\\n\\r\\n        userVestingInfo = new VestingForAccount[](userSchedules.length);\\r\\n        for (uint256 i = 0; i < userSchedules.length; i++) {\\r\\n            uint256 userVestingAmount = userVestingAmountInSchedule[_beneficiary][userSchedules[i]];\\r\\n            VestingSchedule storage vesting = vestingSchedules[userSchedules[i]];\\r\\n            uint256 notVestedAmount = _getNotVestedAmount(\\r\\n                _beneficiary,\\r\\n                userSchedules[i],\\r\\n                _onDayOrToday\\r\\n            );\\r\\n\\r\\n            userVestingInfo[i] = VestingForAccount({\\r\\n                scheduleName: vesting.scheduleName,\\r\\n                amountVested: userVestingAmount - notVestedAmount,\\r\\n                amountNotVested: notVestedAmount,\\r\\n                amountOfGrant: userVestingAmount,\\r\\n                vestStartTimestamp: vesting.startTimestamp,\\r\\n                cliffDuration: vesting.cliffDuration,\\r\\n                vestDuration: vesting.duration,\\r\\n                isActive: vesting.isActive\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns all information about the grant's vesting as of the given day\\r\\n     * for the current account, to be called by the account holder.\\r\\n     *\\r\\n     * @param onDayOrToday = The day to check for, in seconds since the UNIX epoch. Can pass\\r\\n     *   the special value 0 to indicate today.\\r\\n     */\\r\\n    function vestingAsOf(uint256 onDayOrToday)\\r\\n        public\\r\\n        view\\r\\n        returns (VestingForAccount[] memory userVestingInfo)\\r\\n    {\\r\\n        return vestingForBeneficiaryAsOf(_msgSender(), onDayOrToday);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if the account has sufficient funds available to cover the given amount,\\r\\n     *   including consideration for vesting tokens.\\r\\n     *\\r\\n     * @param _account = The account to check.\\r\\n     * @param _amount = The required amount of vested funds.\\r\\n     * @param _onDay = The day to check for, in seconds since the UNIX epoch.\\r\\n     */\\r\\n    function _fundsAreAvailableOn(\\r\\n        address _account,\\r\\n        uint256 _amount,\\r\\n        uint256 _onDay\\r\\n    ) internal view returns (bool) {\\r\\n        return (_amount <= _getAvailableAmount(_account, _onDay));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the amount is sufficiently vested right now.\\r\\n     *\\r\\n     * @param account = The account to check.\\r\\n     * @param amount = The required amount of vested funds.\\r\\n     */\\r\\n    modifier onlyIfFundsAvailableNow(address account, uint256 amount) {\\r\\n        // Distinguish insufficient overall balance from insufficient vested funds balance in failure msg.\\r\\n        require(\\r\\n            _fundsAreAvailableOn(account, amount, today()),\\r\\n            balanceOf(account) < amount\\r\\n                ? \\\"insufficient funds\\\"\\r\\n                : \\\"insufficient vested funds\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // =========================================================================\\r\\n    // === Overridden ERC20 functionality\\r\\n    // =========================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Methods burn(), burnFrom(), mint(), transfer() and transferFrom() require an additional available funds check to\\r\\n     * prevent spending held but non-vested tokens.\\r\\n     */\\r\\n\\r\\n    function burn(uint256 value)\\r\\n        public\\r\\n        override\\r\\n        onlyIfFundsAvailableNow(_msgSender(), value)\\r\\n    {\\r\\n        super.burn(value);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 value)\\r\\n        public\\r\\n        override\\r\\n        onlyIfFundsAvailableNow(account, value)\\r\\n    {\\r\\n        super.burnFrom(account, value);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        public\\r\\n        override\\r\\n        onlyIfFundsAvailableNow(_msgSender(), value)\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (protected) {\\r\\n            require(\\r\\n                isWhiteList[_msgSender()],\\r\\n                \\\"sender is not allowed to transfer while token is locked\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return super.transfer(to, value);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) public override onlyIfFundsAvailableNow(from, value) returns (bool) {\\r\\n        if (protected) {\\r\\n            require(\\r\\n                isWhiteList[from],\\r\\n                \\\"sender is not allowed to transfer while token is locked\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return super.transferFrom(from, to, value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allActiveSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingScheduleIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingAmounts\",\"type\":\"uint256[]\"}],\"name\":\"applyMultiVestingSchedule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveSchedules\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getAllSchedulesOfBeneficiary\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userActiveSchedules\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteLists\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGrantor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_protected\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whiteListAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingScheduleIDs\",\"type\":\"uint256[]\"}],\"name\":\"transferVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_scheduleNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isActives\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cliffDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"}],\"name\":\"updateVestingSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVestingAmountInSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"onDayOrToday\",\"type\":\"uint256\"}],\"name\":\"vestingAsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct ERC20VestableInTimestamp.VestingForAccount[]\",\"name\":\"userVestingInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_onDayOrToday\",\"type\":\"uint256\"}],\"name\":\"vestingForBeneficiaryAsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct ERC20VestableInTimestamp.VestingForAccount[]\",\"name\":\"userVestingInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlourishingAIToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cc2af90e8332ae4ee8733cff5db535aac7545359", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}