{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport 'contracts/libraries/Math.sol';\\nimport 'contracts/interfaces/IBribe.sol';\\nimport 'contracts/interfaces/IERC20.sol';\\nimport 'contracts/interfaces/IGauge.sol';\\nimport 'contracts/interfaces/IPair.sol';\\nimport 'contracts/interfaces/IVoter.sol';\\nimport 'contracts/interfaces/IVotingEscrow.sol';\\n\\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\ncontract Gauge is IGauge {\\n\\n    address public immutable stake; // the LP token that needs to be staked for rewards\\n    address public immutable _ve; // the ve token used for gauges\\n    address public immutable internal_bribe;\\n    address public immutable external_bribe;\\n    address public immutable voter;\\n\\n    uint public derivedSupply;\\n    mapping(address => uint) public derivedBalances;\\n\\n    bool public isForPair;\\n\\n    uint internal constant DURATION = 7 days; // rewards are released over 7 days\\n    uint internal constant PRECISION = 10 ** 18;\\n    uint internal constant MAX_REWARD_TOKENS = 16;\\n\\n    // default snx staking contract implementation\\n    mapping(address => uint) public rewardRate;\\n    mapping(address => uint) public periodFinish;\\n    mapping(address => uint) public lastUpdateTime;\\n    mapping(address => uint) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(address => uint)) public lastEarn;\\n    mapping(address => mapping(address => uint)) public userRewardPerTokenStored;\\n\\n    mapping(address => uint) public tokenIds;\\n\\n    uint public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n\\n    address[] public rewards;\\n    mapping(address => bool) public isReward;\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint timestamp;\\n        uint balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking reward rate\\n    struct RewardPerTokenCheckpoint {\\n        uint timestamp;\\n        uint rewardPerToken;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint timestamp;\\n        uint supply;\\n    }\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping (address => mapping (uint => Checkpoint)) public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping (uint => SupplyCheckpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping (address => mapping (uint => RewardPerTokenCheckpoint)) public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping (address => uint) public rewardPerTokenNumCheckpoints;\\n\\n    uint public fees0;\\n    uint public fees1;\\n\\n    event Deposit(address indexed from, uint tokenId, uint amount);\\n    event Withdraw(address indexed from, uint tokenId, uint amount);\\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\\n    event ClaimFees(address indexed from, uint claimed0, uint claimed1);\\n    event ClaimRewards(address indexed from, address indexed reward, uint amount);\\n\\n    constructor(address _stake, address _internal_bribe, address _external_bribe, address  __ve, address _voter, bool _forPair, address[] memory _allowedRewardTokens) {\\n        stake = _stake;\\n        internal_bribe = _internal_bribe;\\n        external_bribe = _external_bribe;\\n        _ve = __ve;\\n        voter = _voter;\\n        isForPair = _forPair;\\n\\n        for (uint i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                isReward[_allowedRewardTokens[i]] = true;\\n                rewards.push(_allowedRewardTokens[i]);\\n            }\\n        }\\n    }\\n\\n    // simple re-entrancy check\\n    uint internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    function claimFees() external lock returns (uint claimed0, uint claimed1) {\\n        return _claimFees();\\n    }\\n\\n    function _claimFees() internal returns (uint claimed0, uint claimed1) {\\n        if (!isForPair) {\\n            return (0, 0);\\n        }\\n        (claimed0, claimed1) = IPair(stake).claimFees();\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            uint _fees0 = fees0 + claimed0;\\n            uint _fees1 = fees1 + claimed1;\\n            (address _token0, address _token1) = IPair(stake).tokens();\\n            if (_fees0 > 0) {\\n                fees0 = 0;\\n                _safeApprove(_token0, internal_bribe, _fees0);\\n                IBribe(internal_bribe).notifyRewardAmount(_token0, _fees0);\\n            } else {\\n                fees0 = _fees0;\\n            }\\n            if (_fees1 > 0) {\\n                fees1 = 0;\\n                _safeApprove(_token1, internal_bribe, _fees1);\\n                IBribe(internal_bribe).notifyRewardAmount(_token1, _fees1);\\n            } else {\\n                fees1 = _fees1;\\n            }\\n\\n            emit ClaimFees(msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    /**\\n    * @notice Determine the prior balance for an account as of a block number\\n    * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    * @param account The address of the account to check\\n    * @param timestamp The timestamp to get the balance at\\n    * @return The balance the account had as of the given block\\n    */\\n    function getPriorBalanceIndex(address account, uint timestamp) public view returns (uint) {\\n        uint nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorSupplyIndex(uint timestamp) public view returns (uint) {\\n        uint nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (supplyCheckpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorRewardPerToken(address token, uint timestamp) public view returns (uint, uint) {\\n        uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0,0);\\n        }\\n\\n        // First check most recent balance\\n        if (rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (rewardPerTokenCheckpoints[token][nCheckpoints - 1].rewardPerToken, rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\\n            return (0,0);\\n        }\\n\\n        uint lower = 0;\\n        uint upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[token][center];\\n            if (cp.timestamp == timestamp) {\\n                return (cp.rewardPerToken, cp.timestamp);\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return (rewardPerTokenCheckpoints[token][lower].rewardPerToken, rewardPerTokenCheckpoints[token][lower].timestamp);\\n    }\\n\\n    function _writeCheckpoint(address account, uint balance) internal {\\n        uint _timestamp = block.timestamp;\\n        uint _nCheckPoints = numCheckpoints[account];\\n\\n        if (_nCheckPoints > 0 && checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp) {\\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\\n        } else {\\n            checkpoints[account][_nCheckPoints] = Checkpoint(_timestamp, balance);\\n            numCheckpoints[account] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(address token, uint reward, uint timestamp) internal {\\n        uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (_nCheckPoints > 0 && rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp == timestamp) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].rewardPerToken = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints] = RewardPerTokenCheckpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint _nCheckPoints = supplyNumCheckpoints;\\n        uint _timestamp = block.timestamp;\\n\\n        if (_nCheckPoints > 0 && supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp) {\\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(_timestamp, derivedSupply);\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function rewardsListLength() external view returns (uint) {\\n        return rewards.length;\\n    }\\n\\n    // returns the last time the reward was modified or periodFinish if the reward has ended\\n    function lastTimeRewardApplicable(address token) public view returns (uint) {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    function getReward(address account, address[] memory tokens) external lock {\\n        require(msg.sender == account || msg.sender == voter);\\n        _unlocked = 1;\\n        IVoter(voter).distribute(address(this));\\n        _unlocked = 2;\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            (rewardPerTokenStored[tokens[i]], lastUpdateTime[tokens[i]]) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\n\\n            uint _reward = earned(tokens[i], account);\\n            lastEarn[tokens[i]][account] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[tokens[i]];\\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\\n        }\\n\\n        uint _derivedBalance = derivedBalances[account];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(account);\\n        derivedBalances[account] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(account, derivedBalances[account]);\\n        _writeSupplyCheckpoint();\\n    }\\n\\n\\n    function rewardPerToken(address token) public view returns (uint) {\\n        if (derivedSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return rewardPerTokenStored[token] + ((lastTimeRewardApplicable(token) - Math.min(lastUpdateTime[token], periodFinish[token])) * rewardRate[token] * PRECISION / derivedSupply);\\n    }\\n\\n    function derivedBalance(address account) public view returns (uint) {\\n        return balanceOf[account];\\n    }\\n\\n    function batchRewardPerToken(address token, uint maxRuns) external {\\n        (rewardPerTokenStored[token], lastUpdateTime[token])  = _batchRewardPerToken(token, maxRuns);\\n    }\\n\\n    function _batchRewardPerToken(address token, uint maxRuns) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints-1, maxRuns);\\n\\n        for (uint i = _startIndex; i < _endIndex; i++) {\\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n            if (sp0.supply > 0) {\\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i+1];\\n                (uint _reward, uint _endTime) = _calcRewardPerToken(token, sp1.timestamp, sp0.timestamp, sp0.supply, _startTimestamp);\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                _startTimestamp = _endTime;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(address token, uint timestamp1, uint timestamp0, uint supply, uint startTimestamp) internal view returns (uint, uint) {\\n        uint endTime = Math.max(timestamp1, startTimestamp);\\n        return (((Math.min(endTime, periodFinish[token]) - Math.min(Math.max(timestamp0, startTimestamp), periodFinish[token])) * rewardRate[token] * PRECISION / supply), endTime);\\n    }\\n\\n    /// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\n      (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n      uint length = rewards.length;\\n      for (uint i; i < length; i++) {\\n        address token = rewards[i];\\n        (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\n      }\\n    }\\n\\n    function _updateRewardPerToken(address token, uint maxRuns, bool actualLast) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.supply > 0) {\\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i+1];\\n                    (uint _reward, uint _endTime) = _calcRewardPerToken(token, sp1.timestamp, sp0.timestamp, sp0.supply, _startTimestamp);\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n\\n        // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\n        if (actualLast) {\\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.supply > 0) {\\n                (uint _reward,) = _calcRewardPerToken(token, lastTimeRewardApplicable(token), Math.max(sp.timestamp, _startTimestamp), sp.supply, _startTimestamp);\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function earned(address token, address account) public view returns (uint) {\\n        uint _startTimestamp = Math.max(lastEarn[token][account], rewardPerTokenCheckpoints[token][0].timestamp);\\n        if (numCheckpoints[account] == 0) {\\n            return 0;\\n        }\\n\\n        uint _startIndex = getPriorBalanceIndex(account, _startTimestamp);\\n        uint _endIndex = numCheckpoints[account]-1;\\n\\n        uint reward = 0;\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex-1; i++) {\\n                Checkpoint memory cp0 = checkpoints[account][i];\\n                Checkpoint memory cp1 = checkpoints[account][i+1];\\n                (uint _rewardPerTokenStored0,) = getPriorRewardPerToken(token, cp0.timestamp);\\n                (uint _rewardPerTokenStored1,) = getPriorRewardPerToken(token, cp1.timestamp);\\n                reward += cp0.balanceOf * (_rewardPerTokenStored1 - _rewardPerTokenStored0) / PRECISION;\\n            }\\n        }\\n\\n        Checkpoint memory cp = checkpoints[account][_endIndex];\\n        (uint _rewardPerTokenStored,) = getPriorRewardPerToken(token, cp.timestamp);\\n        reward += cp.balanceOf * (rewardPerToken(token) - Math.max(_rewardPerTokenStored, userRewardPerTokenStored[token][account])) / PRECISION;\\n\\n        return reward;\\n    }\\n\\n    function depositAll(uint tokenId) external {\\n        deposit(IERC20(stake).balanceOf(msg.sender), tokenId);\\n    }\\n\\n    function deposit(uint amount, uint tokenId) public lock {\\n        require(amount > 0);\\n        _updateRewardForAllTokens();\\n\\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\\n        totalSupply += amount;\\n        balanceOf[msg.sender] += amount;\\n\\n        if (tokenId > 0) {\\n            require(IVotingEscrow(_ve).ownerOf(tokenId) == msg.sender);\\n            if (tokenIds[msg.sender] == 0) {\\n                tokenIds[msg.sender] = tokenId;\\n                IVoter(voter).attachTokenToGauge(tokenId, msg.sender);\\n            }\\n            require(tokenIds[msg.sender] == tokenId);\\n        } else {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n\\n        uint _derivedBalance = derivedBalances[msg.sender];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(msg.sender);\\n        derivedBalances[msg.sender] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(msg.sender, _derivedBalance);\\n        _writeSupplyCheckpoint();\\n\\n        IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\n        emit Deposit(msg.sender, tokenId, amount);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(balanceOf[msg.sender]);\\n    }\\n\\n    function withdraw(uint amount) public {\\n        uint tokenId = 0;\\n        if (amount == balanceOf[msg.sender]) {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n        withdrawToken(amount, tokenId);\\n    }\\n\\n    function withdrawToken(uint amount, uint tokenId) public lock {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply -= amount;\\n        balanceOf[msg.sender] -= amount;\\n        _safeTransfer(stake, msg.sender, amount);\\n\\n        if (tokenId > 0) {\\n            require(tokenId == tokenIds[msg.sender]);\\n            tokenIds[msg.sender] = 0;\\n            IVoter(voter).detachTokenFromGauge(tokenId, msg.sender);\\n        } else {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n\\n        uint _derivedBalance = derivedBalances[msg.sender];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(msg.sender);\\n        derivedBalances[msg.sender] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\\n        _writeSupplyCheckpoint();\\n\\n        IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\n        emit Withdraw(msg.sender, tokenId, amount);\\n    }\\n\\n    function left(address token) external view returns (uint) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint _remaining = periodFinish[token] - block.timestamp;\\n        return _remaining * rewardRate[token];\\n    }\\n\\n    function notifyRewardAmount(address token, uint amount) external lock {\\n        require(token != stake);\\n        require(amount > 0);\\n        if (!isReward[token]) {\\n            require(IVoter(voter).isWhitelisted(token), \\\"rewards tokens must be whitelisted\\\");\\n            require(rewards.length < MAX_REWARD_TOKENS, \\\"too many rewards tokens\\\");\\n        }\\n        if (rewardRate[token] == 0) _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\n        _claimFees();\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = amount / DURATION;\\n        } else {\\n            uint _remaining = periodFinish[token] - block.timestamp;\\n            uint _left = _remaining * rewardRate[token];\\n            require(amount > _left);\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = (amount + _left) / DURATION;\\n        }\\n        require(rewardRate[token] > 0);\\n        uint balance = IERC20(token).balanceOf(address(this));\\n        require(rewardRate[token] <= balance / DURATION, \\\"Provided reward too high\\\");\\n        periodFinish[token] = block.timestamp + DURATION;\\n        if (!isReward[token]) {\\n            isReward[token] = true;\\n            rewards.push(token);\\n        }\\n\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    function swapOutRewardToken(uint i, address oldToken, address newToken) external {\\n        require(msg.sender == IVotingEscrow(_ve).team(), 'only team');\\n        require(rewards[i] == oldToken);\\n        isReward[oldToken] = false;\\n        isReward[newToken] = true;\\n        rewards[i] = newToken;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeApprove(address token, address spender, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.approve.selector, spender, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IBribe {\\n    function _deposit(uint amount, uint tokenId) external;\\n    function _withdraw(uint amount, uint tokenId) external;\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function left(address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function getReward(address account, address[] memory tokens) external;\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n    function left(address token) external view returns (uint);\\n    function isForPair() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPair {\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n    function governor() external view returns (address);\\n    function gauges(address _pair) external view returns (address);\\n    function factory() external view returns (address);\\n    function minter() external view returns(address);\\n    function emergencyCouncil() external view returns (address);\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n    function isWhitelisted(address token) external view returns (bool);\\n    function notifyRewardAmount(uint amount) external;\\n    function distribute(address _gauge) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function token() external view returns (address);\\n    function team() external returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function increase_amount(uint tokenId, uint value) external;\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n    \\n    function balanceOfNFT(uint) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n    function cbrt(uint256 n) internal pure returns (uint256) { unchecked {\\n        uint256 x = 0;\\n        for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n            x <<= 1;\\n            uint256 z = 3 * x * (x + 1) + 1;\\n            if (n / y >= z) {\\n                n -= y * z;\\n                x += 1;\\n            }\\n        }\\n        return x;\\n    }}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_internal_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_external_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_forPair\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"name\":\"ClaimFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRuns\",\"type\":\"uint256\"}],\"name\":\"batchRewardPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRuns\",\"type\":\"uint256\"}],\"name\":\"batchUpdateRewardPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"external_bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorBalanceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internal_bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isForPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerTokenCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"swapOutRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gauge", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cb369dbd43de4a5f1d4341cf6621076a6ce668cd000000000000000000000000039359f1628c3b56ebaa17e74088c242aafad04900000000000000000000000015d912e3b02a4452aa97324ee050cc4887f923a6000000000000000000000000d99706ac7c5641c7cd85d28518571ad45cc79480000000000000000000000000792ba5586e87005661c4e611b17e01de0de42599000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001e32b79d8203ac691499fbfbb02c07a9c9850dd700000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}