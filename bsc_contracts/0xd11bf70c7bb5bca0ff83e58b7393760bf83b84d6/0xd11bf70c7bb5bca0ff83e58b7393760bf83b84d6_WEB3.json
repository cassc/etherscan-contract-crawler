{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event TransferFrom(address indexed from, address indexed to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new owner is 0\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n//WEB3 ERC20 \u667a\u80fd\u5408\u7ea6\r\ncontract WEB3 is IERC20, Ownable {\r\n    string private _name; // \u4ee3\u5e01\u540d\u79f0\r\n    string private _symbol; // \u4ee3\u5e01\u7b26\u5408\r\n    uint256 private _decimals; // \u5c0f\u6570\u70b9\u4f4d\u6570\r\n    uint256 private _tTotal; // \u4ee3\u5e01\u53d1\u884c\u603b\u91cf\r\n    mapping(address => uint256) private _balanceOf; // \u4ee3\u5e01\u5b58\u653emap\r\n    mapping(address => mapping(address => uint256)) private _allowances; // \u6388\u6743\u8f6c\u8d26\u989d\u5ea6\r\n    mapping(address => uint256) public _lastLpToken; // \u6700\u540e\u4e00\u6b21\u4ee3\u5e01\u6570\u91cf\r\n\r\n    address public pancakeV2Pair;\r\n\r\n    address public USD = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address public _blackHoleAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    address private _mintAddress = address(0xE5276cDb3AAbB32Ee03358990AEADC5271BEcf5F);// \u6316\u77ff\r\n\r\n    address public _buyLpAddress = address(0xe75074366C1Ac549780FdE1Bf68E5F068aa92fAc);\r\n    address public _buyOneAddress = address(0x327173E0001cb09617f1c3175E172742DA89D931);\r\n    address public _buyTwoAddress = address(0x59499556d49F2907e39af89689aFA860f18c7566);\r\n\r\n    address public _sellLpAddress = address(0xAB7a9818916630A41Aa7Da7912c1D99083fe16c8);\r\n    address public _sellOneAddress = address(0x025349622abfbd756702dF794F8D287F7DEc249A);\r\n    address public _sellTwoAddress = address(0x965A53d3193DD0eDD4e81b99cA045233bE969294);\r\n\r\n    address public _sellControlAddress = address(0x017F7E7157e6f18a033902Af0eEB42C39367F5a9);\r\n\r\n    mapping(address => bool) private _escapeList;\r\n\r\n    uint256 public _buyLpFee = 20;\r\n    uint256 public _buyOneFee = 1;\r\n    uint256 public _buyTwoFee = 9;\r\n\r\n    uint256 public _sellLpFee = 20;\r\n    uint256 public _sellOneFee = 1;\r\n    uint256 public _sellTwoFee = 9;\r\n\r\n    uint256 public _sellALLFee = 300;\r\n\r\n    bool public _buyStatus = false;\r\n    bool public _sellStatus = true;\r\n\r\n    event _buyToken(address indexed from, address indexed to, uint256 value);\r\n    event _sellToken(address indexed from, address indexed to, uint256 value);\r\n    event _sellLpToken(address indexed from, address indexed to, uint256 value);\r\n    event _LpTokenLast(address indexed from, bool isLp, uint256 r0, uint256 r1, uint256 bal0, uint256 bal1);\r\n\r\n    constructor(address tokenOwner) {\r\n        _name = \"World Wide Web\";\r\n        _symbol = \"WEB3\";\r\n        _decimals = 18;\r\n        _tTotal = 210000 * 10**_decimals;\r\n        // \u603b\u91cf 21 \u4e07\r\n        _balanceOf[_mintAddress] = 210000 * 10**_decimals;\r\n\r\n        emit Transfer(_blackHoleAddress, _mintAddress, 210000 * 10**_decimals);\r\n        //\u8f6c\u79fb\u6240\u6709\u6743\r\n        transferOwnership(tokenOwner);\r\n    }\r\n\r\n    function changeRouter(address router) public onlyOwner {\r\n        require(router != address(0), \"transfer router to the zero address\");\r\n        pancakeV2Pair = router;\r\n    }\r\n\r\n    function openBuy() public onlyOwner {\r\n        _buyStatus = true;\r\n    }\r\n\r\n    function closeBuy() public onlyOwner {\r\n        _buyStatus = false;\r\n    }\r\n\r\n    function openSell() public onlyOwner {\r\n        _sellStatus = true;\r\n    }\r\n\r\n    function closeSell() public onlyOwner {\r\n        _sellStatus = false;\r\n    }\r\n\r\n    function setEscapeList(address escape) public onlyOwner {\r\n        _escapeList[escape] = true;\r\n    }\r\n\r\n    function unSetEscapeList(address escape) public onlyOwner {\r\n        _escapeList[escape] = false;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balanceOf[account];\r\n    }\r\n\r\n    //\u8f6c\u8d26\u4ea4\u6613\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        if (msg.sender == pancakeV2Pair) { // \u8d2d\u4e70\u548c\u4ea4\u6613\u64a4\u6c60\r\n            _transferBuy(msg.sender, recipient, amount);\r\n        } else {\r\n            // \u666e\u901a\u8f6c\u8d26\r\n            _transfer(msg.sender, recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //\u6388\u6743\u8f6c\u8d26\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"exceeds allowance\"); //\u5224\u65ad\u6388\u6743\u989d\u5ea6\u662f\u5426\u591f\r\n        require(_balanceOf[sender] >= amount, \"exceeds allowance\"); //\u5224\u65adsender\u8d26\u6237\u4f59\u989d\u662f\u5426\u591f\r\n        if (recipient == pancakeV2Pair) { // \u5356\u51fa\u548c\u4ea4\u6613\u6dfb\u6c60\r\n            _transferSell(sender, recipient, amount);\r\n        } else {\r\n            // \u666e\u901a\u8f6c\u8d26\r\n            _transfer(sender, recipient, amount);\r\n        }\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        emit TransferFrom(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        require(amount > 0, \"amount <= 0\");\r\n        require(_balanceOf[msg.sender] >= amount, \"exceeds allowance\");\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        require(_allowances[msg.sender][spender] >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    //to recieve ETH from pancakeV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function claimTokens() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    // \u666e\u901a\u4ea4\u6613\u8f6c\u8d26\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balanceOf[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balanceOf[from] = fromBalance - amount;\r\n        _balanceOf[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    //pancake \u4ea4\u6613\u8f6c\u8d26\r\n    function _transferBuy(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balanceOf[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        require((_buyLpFee + _buyOneFee + _buyTwoFee) < 1000, \"ERC20: transfer fee error\");\r\n        uint256 recipientRate = 1000 - (_buyLpFee + _buyOneFee + _buyTwoFee);\r\n        _balanceOf[from] = fromBalance - amount;\r\n        // \u6392\u9664\u64a4\u6c60\r\n        bool isDel = false;\r\n        (,isDel) = getLPStatus(from,to);\r\n        if (!_escapeList[from] && !_escapeList[to]) {\r\n            require(_buyStatus || isDel, \"ERC20: transfer status error\");\r\n        }\r\n        if (_escapeList[from] || _escapeList[to] || isDel) {\r\n            recipientRate = 1000;\r\n        } else {\r\n            if(_buyLpFee > 0){\r\n                _takeTransfer(from, _buyLpAddress, (amount * _buyLpFee) / 1000);\r\n            }\r\n            if(_buyOneFee > 0){\r\n                _takeTransfer(from, _buyOneAddress, (amount * _buyOneFee) / 1000);\r\n            }\r\n            if(_buyTwoFee > 0){\r\n                _takeTransfer(from, _buyTwoAddress, (amount * _buyTwoFee) / 1000);\r\n            }\r\n        }\r\n        _balanceOf[to] = _balanceOf[to] + ((amount * recipientRate) / 1000);\r\n\r\n        emit _buyToken(from, to, amount);\r\n        emit Transfer(from, to, ((amount * recipientRate) / 1000));\r\n    }\r\n\r\n    //pancake \u4ea4\u6613\u8f6c\u8d26\r\n    function _transferSell(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balanceOf[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        require((_sellLpFee + _sellOneFee + _sellTwoFee + _sellALLFee) < 1000, \"ERC20: transfer fee error\");\r\n        uint256 recipientRate = 1000 - (_sellLpFee + _sellOneFee + _sellTwoFee);\r\n        _balanceOf[from] = fromBalance - amount;\r\n        // \u6392\u9664\u6dfb\u6c60\r\n        bool isAdd = false;\r\n        (isAdd,) = getLPStatus(from,to);\r\n        if (_escapeList[from] || _escapeList[to] || isAdd) {\r\n            recipientRate = 1000;\r\n        } else {\r\n            if(_sellLpFee > 0){\r\n                _takeTransfer(from, _sellLpAddress, (amount * _sellLpFee) / 1000);\r\n            }\r\n            if(_sellOneFee > 0){\r\n                _takeTransfer(from, _sellOneAddress, (amount * _sellOneFee) / 1000);\r\n            }\r\n            if(_sellTwoFee > 0){\r\n                _takeTransfer(from, _sellTwoAddress, (amount * _sellTwoFee) / 1000);\r\n            }\r\n            if(_sellStatus && _sellALLFee > 0){\r\n                recipientRate = 1000 - (_sellLpFee + _sellOneFee + _sellTwoFee + _sellALLFee);\r\n                uint256 sell = (amount * _sellALLFee) / 1000;\r\n                _takeTransfer(from, _sellControlAddress, sell);\r\n                emit _sellLpToken(from, _sellControlAddress, sell);\r\n            }\r\n        }\r\n        _balanceOf[to] = _balanceOf[to] + ((amount * recipientRate) / 1000);\r\n        emit _sellToken(from, to, amount);\r\n        emit Transfer(from, to, ((amount * recipientRate) / 1000));\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balanceOf[to] = _balanceOf[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"owner:0\");\r\n        require(spender != address(0), \"spender:0\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getLPStatus(address from, address to) internal returns (bool isAdd, bool isDel){\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pancakeV2Pair);\r\n        address token = address(this);\r\n        isAdd = false;\r\n        isDel = false;\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        (uint r0,uint r1,) = pair.getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(pancakeV2Pair);\r\n        uint bal1 = IERC20(token1).balanceOf(pancakeV2Pair);\r\n\r\n        if (pancakeV2Pair == to) {\r\n            emit _LpTokenLast(from, isAdd, r0, r1, bal0, bal1);\r\n            if (token0 == token) {\r\n                if (bal1 > r1) {\r\n                    uint change1 = bal1 - r1;\r\n                    isAdd = change1 > 1000;\r\n                }\r\n            } else {\r\n                if (bal0 > r0) {\r\n                    uint change0 = bal0 - r0;\r\n                    isAdd = change0 > 1000;\r\n                }\r\n            }\r\n        } else {\r\n            emit _LpTokenLast(to, isDel, r0, r1, bal0, bal1);\r\n            if (token0 == token) {\r\n                if (r1 > 0) {\r\n                    isDel = r1 > bal1;\r\n                }\r\n            } else {\r\n                if (r0 > 0) {\r\n                    isDel = r0 > bal0;\r\n                }\r\n            }\r\n        }\r\n        return (isAdd, isDel);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bal0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bal1\",\"type\":\"uint256\"}],\"name\":\"_LpTokenLast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_buyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_sellLpToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_sellToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_blackHoleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyOneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyOneFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTwoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTwoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastLpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellALLFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellControlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellOneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellOneFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTwoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTwoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escape\",\"type\":\"address\"}],\"name\":\"setEscapeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escape\",\"type\":\"address\"}],\"name\":\"unSetEscapeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WEB3", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000714dc0e3acbbe7674184a6664b83e227eec4adbc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1264f5e8434b1ffedae8f5db8d363ea1f825600f8c9255a1fc9281360a9d8dca"}