{"SourceCode": "/*\r\n\u256d\u256e\u2571\u2571\u256d\u2533\u2501\u2501\u2501\u256e \u256d\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u256e\u256d\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u256e\r\n\u2503\u2570\u256e\u256d\u256f\u2503\u256d\u2501\u256e\u2503 \u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2503\u2503\u2503\u256d\u252b\u256d\u2501\u2501\u252b\u256d\u256e\u256d\u256e\u2503\r\n\u2570\u256e\u2570\u256f\u256d\u252b\u2503\u2571\u2503\u2503 \u2503\u2570\u2501\u256f\u2503\u2503\u2571\u2503\u2503\u2503\u2571\u2570\u252b\u2570\u256f\u256f\u2503\u2570\u2501\u2501\u254b\u256f\u2503\u2503\u2570\u256f\r\n\u2571\u2570\u256e\u256d\u256f\u2503\u2503\u2571\u2503\u2503 \u2503\u256d\u256e\u256d\u252b\u2503\u2571\u2503\u2503\u2503\u2571\u256d\u252b\u256d\u256e\u2503\u2503\u256d\u2501\u2501\u256f\u2571\u2503\u2503\r\n\u2571\u2571\u2503\u2503\u2571\u2503\u2570\u2501\u256f\u2503 \u2503\u2503\u2503\u2570\u252b\u2570\u2501\u256f\u2503\u2570\u2501\u256f\u2503\u2503\u2503\u2570\u252b\u2570\u2501\u2501\u256e\u2571\u2503\u2503\r\n\u2571\u2571\u2570\u256f\u2571\u2570\u2501\u2501\u2501\u256f \u2570\u256f\u2570\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u256f\u2570\u2501\u253b\u2501\u2501\u2501\u256f\u2571\u2570\u256f\r\n\r\n\r\n\ud83d\ude80 YoRocket Features:\r\n\r\n\u231a\ufe0f YoTime - For one hour per day, buy taxes will be reduced to 1% (added to LP). \r\n\r\n\ud83c\udf81 YoRaffle - biweekly prizes\r\n\r\nTop 19 holders 20 raffle tickets each \r\n20-250- holders 10 raffle tickets each \r\n251-500- holders 7 raffle tickets each \r\n501-750- holders 5 raffle tickets each \r\n751-last holder- holders 2 raffle tickets each \r\n\r\n\u267b\ufe0f YoStake- Investors can stake to earn double the YoRocket reflection tax! \r\n\r\n\ud83e\udd1d YoSell - Max 2% price impact per every 5 minutes. Min sell 0.01 BnB. \r\n\r\n\ud83d\uddbc YoNFT - Coming soon\u2026 \r\n\r\n\ud83c\udfc6 Buy 8.0%:\r\n\u267b\ufe0f 1% Reflection \r\n\ud83c\udf10 3% Marketing\r\n\ud83c\udf81 3% Raffle \r\n\ud83d\udca7 1% Liquidity Pool\r\n\r\n\ud83c\udfc6 Sell 12%:\r\n\u267b\ufe0f 3% Reflection \r\n\ud83c\udf10 4% Marketing\r\n\ud83c\udf81 4% Raffle \r\n\ud83d\udca7 1% Liquidity Pool\r\n\r\nSmart contract developed by Alex $Saint\r\nReach on telegram: @Alex_Saint_Dev\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract IERC20Extented is IERC20 {\r\n    function decimals() external view virtual returns (uint8);\r\n    function name() external view virtual returns (string memory);\r\n    function symbol() external view virtual returns (string memory);\r\n}\r\n\r\ncontract YoRocket is Context, IERC20, IERC20Extented, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"YoRocket\";\r\n    string private constant _symbol = \"$YO\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    \r\n    address[] internal stakeholders;\r\n    mapping(address => uint256) internal stakes;\r\n    mapping(address => uint256) internal rewards;\r\n    mapping(address => uint256) internal previousTransactionBlock;\r\n    mapping(address => uint256) internal dailyRewards;\r\n    mapping(address => uint256) internal firstReward;\r\n    uint256 public _rewardPercent = 5; // divided by 1000, so 0.5%\r\n    uint256 public stakesAndRewards = 0;\r\n\r\n    mapping(address => uint256) private sellcooldown;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000000 * 10**9; // 1 Trillion\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public _priceImpact = 2;\r\n    uint256 private _firstBlock;\r\n    uint256 private _botBlocks;\r\n    uint256 public _maxWalletAmount;\r\n    uint256 private _maxSellAmountBNB = 5000000000000000000; // 5 BNB\r\n    uint256 private _minBuyBNB = 10000000000000000; // 0.01 BNB\r\n    uint256 private _minSellBNB = 10000000000000000; // 0.01 BNB\r\n    uint256 private _yoTimeBlocks = 3600; // 1 hour\r\n    uint256 private _cooldownBlocks = 300; // 5 min\r\n    uint256 private _yoTimeWindowEnd; // block.timestamp + _taxFreeBlocks\r\n    uint256 public _yoTimeStartBlock = 0;\r\n    uint256 public _yoTimeStartTime = 56000; // 6pm est \r\n    bool public _yoTimeStarted = false;\r\n\r\n    //  buy fees\r\n    uint256 public _buyRaffleFee = 3;\r\n    uint256 private _previousBuyRaffleFee = _buyRaffleFee;\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 private _previousBuyMarketingFee = _buyMarketingFee;\r\n    uint256 public _buyReflectionFee = 1;\r\n    uint256 private _previousBuyReflectionFee = _buyReflectionFee;\r\n    uint256 public _buyLiquidityFee = 1;\r\n    uint256 private _previousBuyLiquidityFee = _buyLiquidityFee;\r\n    \r\n    // sell fees\r\n    uint256 public _sellRaffleFee = 4;\r\n    uint256 private _previousSellRaffleFee = _sellRaffleFee;\r\n    uint256 public _sellMarketingFee = 4;\r\n    uint256 private _previousSellMarketingFee = _sellMarketingFee;\r\n    uint256 public _sellReflectionFee = 3;\r\n    uint256 private _previousSellReflectionFee = _sellReflectionFee;\r\n    uint256 public _sellLiquidityFee = 1;\r\n    uint256 private _previousSellLiquidityFee = _sellLiquidityFee;\r\n  \r\n    struct DynamicTax {\r\n        uint256 buyRaffleFee;\r\n        uint256 buyMarketingFee;\r\n        uint256 buyReflectionFee;\r\n        uint256 buyLiquidityFee;\r\n        \r\n        uint256 sellRaffleFee;\r\n        uint256 sellMarketingFee;\r\n        uint256 sellReflectionFee;\r\n        uint256 sellLiquidityFee;\r\n    }\r\n    \r\n    uint256 constant private _projectMaintainencePercent = 3;\r\n    uint256 private _rafflePercent = 48;\r\n    uint256 private _marketingPercent = 49;\r\n\r\n    struct BuyBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tRaffle;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n    }\r\n\r\n    struct SellBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tRaffle;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n    }\r\n    \r\n    struct FinalFees {\r\n        uint256 tTransferAmount;\r\n        uint256 tRaffle;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n        uint256 tLiquidity;\r\n        uint256 rReflection;\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private _marketingAddress = payable(0x4e51bf85E4aEDE62205c8E5097B184e80bB13BCd);\r\n    address payable private _raffleAddress = payable(0xe2a11509bf856A97FF983A4E761a3F0e2b1DA15a);\r\n    address payable constant private _projectMaintainence = payable(0xe4c871834A8D4743aA6d6B62dE7A36a59C45b126);\r\n    address payable constant private _burnAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    address private presaleRouter;\r\n    address private presaleAddress;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    uint256 private _maxTxAmount;\r\n\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private presale = true;\r\n    bool private pairSwapped = false;\r\n    bool private autoYoTimeEnabled = false;\r\n    bool public _sellCoolDownEnabled = true;\r\n    bool public _priceImpactSellLimitEnabled = true;\r\n    bool public _BNBsellLimitEnabled = false;\r\n\r\n    event EndedPresale(bool presale);\r\n    event UpdatedAllowableDip(uint256 hundredMinusDipPercent);\r\n    event UpdatedHighLowWindows(uint256 GTblock, uint256 LTblock, uint256 blockWindow);\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    event SellOnlyUpdated(bool sellOnly);\r\n    event PercentsUpdated(uint256 _marketingPercent, uint256 _buybackPercent, uint256 _devPercent);\r\n    event FeesUpdated(uint256 _buyRaffleFee, uint256 _buyMarketingFee, uint256 _buyLiquidityFee, uint256 _buyReflectionFee, uint256 _sellRaffleFee, uint256 _sellMarketingFee, uint256 _sellLiquidityFee, uint256 _sellReflectionFee);\r\n    event PriceImpactUpdated(uint256 _priceImpact);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);//ropstenn 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //bsc test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1);//bsc main net 0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n\r\n        _maxTxAmount = _tTotal; // start off transaction limit at 100% of total supply\r\n        _maxWalletAmount = _tTotal.div(1); // 100%\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    // ---------- STAKES ----------\r\n\r\n    /**\r\n     * @notice A method for a stakeholder to create a stake.\r\n     * @param _stake The size of the stake to be created.\r\n     */\r\n    function createStake(uint256 _stake)\r\n        public\r\n    {\r\n        require(balanceOf(_msgSender()) >= _stake, \"Cannot stake more than your token balance!\");\r\n        //_rOwned[msg.sender] = _rOwned[msg.sender].sub(_stake);\r\n        //_rOwned[address(this)] = _rOwned[address(this)].add(_stake);\r\n        _transfer(_msgSender(), address(this), _stake);\r\n        if(stakes[_msgSender()] == 0) addStakeholder(_msgSender());\r\n        stakes[_msgSender()] = stakes[_msgSender()].add(_stake);\r\n        stakesAndRewards = stakesAndRewards.add(_stake);\r\n    }\r\n\r\n    /**\r\n     * @notice A method for a stakeholder to remove a stake.\r\n     * @param _stake The size of the stake to be removed.\r\n     */\r\n    function removeStake(uint256 _stake)\r\n        public\r\n    {\r\n        stakes[_msgSender()] = stakes[_msgSender()].sub(_stake);\r\n        if(stakes[_msgSender()] == 0) removeStakeholder(_msgSender());\r\n        //_rOwned[address(this)] = _rOwned[address(this)].sub(_stake);\r\n        //_rOwned[msg.sender] = _rOwned[msg.sender].add(_stake);\r\n        _transfer(address(this), _msgSender(), _stake);\r\n        stakesAndRewards = stakesAndRewards.sub(_stake);\r\n    }\r\n    \r\n    /**\r\n     * @notice A method to retrieve the stake for a stakeholder.\r\n     * @param _stakeholder The stakeholder to retrieve the stake for.\r\n     * @return uint256 The amount of wei staked.\r\n     */\r\n    function stakeOf(address _stakeholder)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return stakes[_stakeholder];\r\n    }\r\n\r\n    /**\r\n     * @notice A method to the aggregated stakes from all stakeholders.\r\n     * @return uint256 The aggregated stakes from all stakeholders.\r\n     */\r\n    function totalStakes()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            _totalStakes = _totalStakes.add(stakes[stakeholders[s]]);\r\n        }\r\n        return _totalStakes;\r\n    }\r\n    \r\n    // ---------- STAKEHOLDERS ----------\r\n\r\n    /**\r\n     * @notice A method to check if an address is a stakeholder.\r\n     * @param _address The address to verify.\r\n     * @return bool, uint256 Whether the address is a stakeholder, \r\n     * and if so its position in the stakeholders array.\r\n     */\r\n    function isStakeholder(address _address)\r\n        public\r\n        view\r\n        returns(bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice A method to add a stakeholder.\r\n     * @param _stakeholder The stakeholder to add.\r\n     */\r\n    function addStakeholder(address _stakeholder)\r\n        public\r\n    {\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n        if(!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n\r\n    /**\r\n     * @notice A method to remove a stakeholder.\r\n     * @param _stakeholder The stakeholder to remove.\r\n     */\r\n    function removeStakeholder(address _stakeholder)\r\n        public\r\n    {\r\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\r\n        if(_isStakeholder){\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n        } \r\n    }\r\n\r\n    // ---------- REWARDS ----------\r\n    \r\n    /**\r\n     * @notice A method to allow a stakeholder to check his rewards.\r\n     * @param _stakeholder The stakeholder to check rewards for.\r\n     */\r\n    function rewardOf(address _stakeholder) \r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return rewards[_stakeholder];\r\n    }\r\n\r\n    /**\r\n     * @notice A method to the aggregated rewards from all stakeholders.\r\n     * @return uint256 The aggregated rewards from all stakeholders.\r\n     */\r\n    function totalRewards()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalRewards = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            _totalRewards = _totalRewards.add(rewards[stakeholders[s]]);\r\n        }\r\n        return _totalRewards;\r\n    }\r\n    \r\n    /** \r\n     * @notice A simple method that calculates the rewards for each stakeholder.\r\n     * @param _stakeholder The stakeholder to calculate rewards for.\r\n     */\r\n    function calculateReward(address _stakeholder, uint256 amount, uint256 totalStaked)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return stakes[_stakeholder].mul(amount).div(totalStaked);\r\n    }\r\n\r\n    /**\r\n     * @notice A method to distribute rewards to all stakeholders.\r\n     */\r\n    function _distributeRewards(uint256 totalStaked) \r\n        private\r\n    {\r\n        uint256 rewarded = (totalRewards()).add(totalStaked);\r\n        uint256 toBeRewarded = stakesAndRewards.sub(rewarded);\r\n        \r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            address stakeholder = stakeholders[s];\r\n            uint256 reward = calculateReward(stakeholder, toBeRewarded, totalStaked);\r\n            if (block.timestamp > firstReward[stakeholder] + (1 days)) {\r\n                dailyRewards[stakeholder] = 0;\r\n                firstReward[stakeholder] = block.timestamp;\r\n            }\r\n            uint256 dailyRewardLeft = ((stakes[stakeholder]).mul(_rewardPercent)).div(1000);\r\n            if (dailyRewardLeft < dailyRewards[stakeholder]) {\r\n                dailyRewardLeft = 0;\r\n            } else {\r\n                dailyRewardLeft = dailyRewardLeft.sub(dailyRewards[stakeholder]);\r\n            }\r\n            if (dailyRewardLeft < reward) {\r\n                reward = dailyRewardLeft;\r\n            }\r\n            rewards[stakeholder] = rewards[stakeholder].add(reward);\r\n            dailyRewards[stakeholder] = dailyRewards[stakeholder].add(reward);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice A method to allow a stakeholder to withdraw his rewards.\r\n     */\r\n    function withdrawReward() \r\n        public\r\n    {\r\n        uint256 reward = rewards[_msgSender()];\r\n        rewards[_msgSender()] = 0;\r\n        // _rOwned[address(this)] = _rOwned[address(this)].sub(reward);\r\n        //_rOwned[_msgSender()] = _rOwned[_msgSender()].add(reward);\r\n        _transfer(address(this), _msgSender(), reward);\r\n        stakesAndRewards = stakesAndRewards.sub(reward);\r\n    }\r\n    \r\n    function name() override external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() override external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() override external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function isBot(address account) public view returns (bool) {\r\n        return bots[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_buyMarketingFee == 0 && _buyRaffleFee == 0 && _buyReflectionFee == 0 && _buyLiquidityFee == 0 && _sellMarketingFee == 0 && _sellRaffleFee == 0 && _sellReflectionFee == 0 && _sellLiquidityFee == 0) return;\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyRaffleFee = _buyRaffleFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        \r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellRaffleFee = _sellRaffleFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n\r\n        _buyMarketingFee = 0;\r\n        _buyRaffleFee = 0;\r\n        _buyReflectionFee = 0;\r\n        _buyLiquidityFee = 0;\r\n\r\n        _sellMarketingFee = 0;\r\n        _sellRaffleFee = 0;\r\n        _sellReflectionFee = 0;\r\n        _sellLiquidityFee = 0;\r\n    }\r\n\r\n    function setBotFee() private {\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyRaffleFee = _buyRaffleFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellRaffleFee = _sellRaffleFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n\r\n        _buyMarketingFee = 45;\r\n        _buyRaffleFee = 45;\r\n        _buyReflectionFee = 0;\r\n        _buyLiquidityFee = 0;\r\n\r\n        _sellMarketingFee = 45;\r\n        _sellRaffleFee = 45;\r\n        _sellReflectionFee = 0;\r\n        _sellLiquidityFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _buyMarketingFee = _previousBuyMarketingFee;\r\n        _buyRaffleFee = _previousBuyRaffleFee;\r\n        _buyReflectionFee = _previousBuyReflectionFee;\r\n        _buyLiquidityFee = _previousBuyLiquidityFee;\r\n\r\n        _sellMarketingFee = _previousSellMarketingFee;\r\n        _sellRaffleFee = _previousSellRaffleFee;\r\n        _sellReflectionFee = _previousSellReflectionFee;\r\n        _sellLiquidityFee = _previousSellLiquidityFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // calculate price based on pair reserves\r\n    function getTokenPriceBNB(uint256 amount) external view returns(uint256) {\r\n        IERC20Extented token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//$YO\r\n        IERC20Extented token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//bnb\r\n        (uint112 Res0, uint112 Res1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if(pairSwapped) {\r\n            token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//$YO\r\n            token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//bnb\r\n            (Res1, Res0,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        }\r\n\r\n        uint res1 = Res1*(10**token0.decimals());\r\n        return((amount*res1)/(Res0*(10**token0.decimals()))); // return amount of token1 needed to buy token0\r\n    }\r\n    \r\n    function updateFee() private returns(DynamicTax memory) {\r\n        \r\n        DynamicTax memory currentTax;\r\n        \r\n        currentTax.buyRaffleFee = _buyRaffleFee;\r\n        currentTax.buyMarketingFee = _buyMarketingFee;\r\n        currentTax.buyLiquidityFee = _buyLiquidityFee;\r\n        currentTax.buyReflectionFee = _buyReflectionFee;\r\n\r\n        currentTax.sellRaffleFee = _sellRaffleFee;\r\n        currentTax.sellMarketingFee = _sellMarketingFee;\r\n        currentTax.sellLiquidityFee = _sellLiquidityFee;\r\n        currentTax.sellReflectionFee = _sellReflectionFee;\r\n\r\n        if(block.timestamp >= _yoTimeStartBlock && block.timestamp <= _yoTimeWindowEnd) {\r\n            currentTax.buyRaffleFee = 0;\r\n            currentTax.buyMarketingFee = 0;\r\n            currentTax.buyLiquidityFee = 1;\r\n            currentTax.buyReflectionFee = 0;\r\n        }\r\n        if (block.timestamp > _yoTimeWindowEnd && _yoTimeStarted) {\r\n            _yoTimeStarted = false;\r\n        }\r\n        \r\n        return currentTax;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee = true;\r\n        \r\n        DynamicTax memory currentTax;\r\n\r\n        if (block.timestamp % 86400 >= _yoTimeStartTime && block.timestamp > _yoTimeStartBlock + (12 hours) && autoYoTimeEnabled) {\r\n            _startYoTime();\r\n        }\r\n        if (from != owner() && to != owner() && !presale && from != address(this) && to != address(this)) {\r\n            require(tradingOpen);\r\n            if (from != presaleRouter && from != presaleAddress) {\r\n                require(amount <= _maxTxAmount);\r\n            }\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {//buys\r\n                if (block.timestamp - previousTransactionBlock[to] <= _botBlocks) {\r\n                    bots[to] = true;\r\n                } else {\r\n                    previousTransactionBlock[to] = block.timestamp;\r\n                }\r\n\r\n                if (block.timestamp <= _firstBlock.add(_botBlocks) && from != presaleRouter && from != presaleAddress) {\r\n                    bots[to] = true;\r\n                }\r\n                \r\n                uint256 bnbAmount = this.getTokenPriceBNB(amount);\r\n                \r\n                require(bnbAmount >= _minBuyBNB, \"you must buy at least min BNB worth of token\");\r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n                \r\n                currentTax = updateFee();\r\n                \r\n            }\r\n            \r\n            if (!inSwap && from != uniswapV2Pair) { //sells, transfers\r\n                require(!bots[from] && !bots[to]);\r\n                \r\n                if (block.timestamp - previousTransactionBlock[from] <= _botBlocks) {\r\n                    bots[from] = true;\r\n                } else {\r\n                    previousTransactionBlock[from] = block.timestamp;\r\n                }\r\n                \r\n                if (to == uniswapV2Pair && _sellCoolDownEnabled) {\r\n                    require(sellcooldown[from] < block.timestamp);\r\n                    sellcooldown[from] = block.timestamp.add(_cooldownBlocks);\r\n                }\r\n                \r\n                uint256 bnbAmount = this.getTokenPriceBNB(amount);\r\n                require(bnbAmount >= _minSellBNB, \"you must buy at least the min BNB worth of token\");\r\n\r\n                if (_BNBsellLimitEnabled) {\r\n                    require(bnbAmount <= _maxSellAmountBNB, 'you cannot sell more than the max BNB amount per transaction');\r\n\r\n                }\r\n                \r\n                else if (_priceImpactSellLimitEnabled) {\r\n                    \r\n                    require(amount <= balanceOf(uniswapV2Pair).mul(_priceImpact).div(100)); // price impact limit\r\n\r\n                }\r\n                \r\n                if(to != uniswapV2Pair) {\r\n                    require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n                }\r\n\r\n                currentTax = updateFee();\r\n                \r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                // Don't liquidate tokens that are staked\r\n                if (contractTokenBalance > stakesAndRewards) {\r\n                    contractTokenBalance = contractTokenBalance.sub(stakesAndRewards);\r\n                } else {\r\n                    contractTokenBalance = 0;\r\n                }\r\n                if (contractTokenBalance > 0) {\r\n\r\n                    uint256 autoLPamount = _sellLiquidityFee.mul(contractTokenBalance).div(_sellRaffleFee.add(_sellMarketingFee).add(_sellLiquidityFee));\r\n                    swapAndLiquify(autoLPamount);\r\n                \r\n                    swapTokensForEth(contractTokenBalance.sub(autoLPamount));\r\n                }\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || presale) {\r\n            restoreAllFee();\r\n            takeFee = false;\r\n        }\r\n\r\n        else if (bots[from] || bots[to]) {\r\n            restoreAllFee();\r\n            setBotFee();\r\n            takeFee = true;\r\n        }\r\n\r\n        if (presale) {\r\n            require(from == owner() || from == presaleRouter || from == presaleAddress);\r\n        }\r\n        \r\n        _tokenTransfer(from, to, amount, takeFee, currentTax);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n              address(this),\r\n              tokenAmount,\r\n              0, // slippage is unavoidable\r\n              0, // slippage is unavoidable\r\n              owner(),\r\n              block.timestamp\r\n          );\r\n    }\r\n  \r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForEth(half); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to pancakeswap\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        if(block.timestamp < _firstBlock + (1 days)) {\r\n            address payable addr = payable(0x16D6037b9976bE034d79b8cce863fF82d2BBbC67); // dev fee lasts for one day only\r\n            addr.transfer(amount.mul(uint256(15)).div(100));\r\n            _marketingAddress.transfer(amount.mul(uint256(41)).div(100));\r\n            _raffleAddress.transfer(amount.mul(uint256(41)).div(100));\r\n            _projectMaintainence.transfer(amount.mul(uint256(3)).div(100));\r\n        }\r\n        else {\r\n            _marketingAddress.transfer(amount.mul(_marketingPercent).div(100));\r\n            _raffleAddress.transfer(amount.mul(_rafflePercent).div(100));\r\n            _projectMaintainence.transfer(amount.mul(_projectMaintainencePercent).div(100));\r\n        }\r\n    }\r\n\r\n    function openTrading(uint256 botBlocks) private {\r\n        _firstBlock = block.timestamp;\r\n        _botBlocks = botBlocks;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance.sub(stakesAndRewards));\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, DynamicTax memory currentTax) private {\r\n        if (!takeFee) { \r\n                currentTax.buyRaffleFee = 0;\r\n                currentTax.buyMarketingFee = 0;\r\n                currentTax.buyLiquidityFee = 0;\r\n                currentTax.buyReflectionFee = 0;\r\n\r\n                currentTax.sellRaffleFee = 0;\r\n                currentTax.sellMarketingFee = 0;\r\n                currentTax.sellLiquidityFee = 0;\r\n                currentTax.sellReflectionFee = 0;\r\n        }\r\n        if (sender == uniswapV2Pair){\r\n            _transferStandardBuy(sender, recipient, amount, currentTax);\r\n        }\r\n        else {\r\n            _transferStandardSell(sender, recipient, amount, currentTax);\r\n        }\r\n    }\r\n\r\n    function _transferStandardBuy(address sender, address recipient, uint256 tAmount, DynamicTax memory currentTax) private {\r\n        FinalFees memory buyFees;\r\n        buyFees = _getValuesBuy(tAmount, currentTax);\r\n        _rOwned[sender] = _rOwned[sender].sub(buyFees.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(buyFees.rTransferAmount);\r\n        _takeRaffle(buyFees.tRaffle);\r\n        _takeMarketing(buyFees.tMarketing);\r\n        uint256 totalStaked = totalStakes();\r\n        if(totalStaked > 0){\r\n            _reflectFee(buyFees.rReflection.div(uint256(3)), buyFees.tReflection.div(uint256(3)));\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(buyFees.rReflection.mul(uint256(2)).div(uint256(3)));\r\n            stakesAndRewards = stakesAndRewards.add(buyFees.tReflection.mul(uint256(2)).div(uint256(3)));\r\n            _distributeRewards(totalStaked);\r\n        }else{\r\n            _reflectFee(buyFees.rReflection.div(uint256(3)), buyFees.tReflection.div(uint256(3)));\r\n            _rOwned[_burnAddress] = _rOwned[_burnAddress].add(buyFees.rReflection.mul(uint256(2)).div(uint256(3)));\r\n        }\r\n        _takeLiquidity(buyFees.tLiquidity);\r\n        emit Transfer(sender, recipient, buyFees.tTransferAmount);\r\n    }\r\n\r\n    function _transferStandardSell(address sender, address recipient, uint256 tAmount, DynamicTax memory currentTax) private {\r\n        FinalFees memory sellFees;\r\n        sellFees = _getValuesSell(tAmount, currentTax);\r\n        _rOwned[sender] = _rOwned[sender].sub(sellFees.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(sellFees.rTransferAmount);\r\n        if (recipient == _burnAddress) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(sellFees.tTransferAmount);\r\n        }\r\n        _takeRaffle(sellFees.tRaffle);\r\n        _takeMarketing(sellFees.tMarketing);\r\n        uint256 totalStaked = totalStakes();\r\n        if(totalStaked > 0){\r\n            _reflectFee(sellFees.rReflection.div(uint256(3)), sellFees.tReflection.div(uint256(3)));\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(sellFees.rReflection.mul(uint256(2)).div(uint256(3)));\r\n            stakesAndRewards = stakesAndRewards.add(sellFees.tReflection.mul(uint256(2)).div(uint256(3)));\r\n            _distributeRewards(totalStaked);\r\n        }else{\r\n            _reflectFee(sellFees.rReflection.div(uint256(3)), sellFees.tReflection.div(uint256(3)));\r\n            _rOwned[_burnAddress] = _rOwned[_burnAddress].add(sellFees.rReflection.mul(uint256(2)).div(uint256(3)));\r\n        }\r\n        _takeLiquidity(sellFees.tLiquidity);\r\n        emit Transfer(sender, recipient, sellFees.tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rReflection, uint256 tReflection) private {\r\n        _rTotal = _rTotal.sub(rReflection);\r\n        _tFeeTotal = _tFeeTotal.add(tReflection);\r\n    }\r\n\r\n    function _takeRaffle(uint256 tRaffle) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rRaffle = tRaffle.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rRaffle);\r\n    }\r\n\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    // Sell GetValues\r\n    function _getValuesSell(uint256 tAmount, DynamicTax memory currentTax) private view returns (FinalFees memory) {\r\n        SellBreakdown memory sellFees = _getTValuesSell(tAmount, currentTax.sellRaffleFee, currentTax.sellMarketingFee, currentTax.sellReflectionFee, currentTax.sellLiquidityFee);\r\n        FinalFees memory finalFees;\r\n        uint256 currentRate = _getRate();\r\n        (finalFees.rAmount, finalFees.rTransferAmount, finalFees.rReflection) = _getRValuesSell(tAmount, sellFees.tRaffle, sellFees.tMarketing, sellFees.tReflection, sellFees.tLiquidity, currentRate);\r\n        finalFees.tRaffle = sellFees.tRaffle;\r\n        finalFees.tMarketing = sellFees.tMarketing;\r\n        finalFees.tReflection = sellFees.tReflection;\r\n        finalFees.tLiquidity = sellFees.tLiquidity;\r\n        finalFees.tTransferAmount = sellFees.tTransferAmount;\r\n        return (finalFees);\r\n    }\r\n\r\n    function _getTValuesSell(uint256 tAmount, uint256 raffleFee, uint256 marketingFee, uint256 reflectionFee, uint256 liquidityFee) private pure returns (SellBreakdown memory) {\r\n        SellBreakdown memory tsellFees;\r\n        tsellFees.tRaffle = tAmount.mul(raffleFee).div(100);\r\n        tsellFees.tMarketing = tAmount.mul(marketingFee).div(100);\r\n        tsellFees.tReflection = tAmount.mul(reflectionFee).div(100);\r\n        tsellFees.tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        tsellFees.tTransferAmount = tAmount.sub(tsellFees.tRaffle).sub(tsellFees.tMarketing);\r\n        tsellFees.tTransferAmount -= tsellFees.tReflection;\r\n        tsellFees.tTransferAmount -= tsellFees.tLiquidity;\r\n        return (tsellFees);\r\n    }\r\n\r\n    function _getRValuesSell(uint256 tAmount, uint256 tRaffle, uint256 tMarketing, uint256 tReflection, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rRaffle = tRaffle.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rRaffle).sub(rMarketing).sub(rReflection);\r\n        rTransferAmount -= rLiquidity;\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    // Buy GetValues\r\n    function _getValuesBuy(uint256 tAmount, DynamicTax memory currentTax) private view returns (FinalFees memory) {\r\n        BuyBreakdown memory buyFees = _getTValuesBuy(tAmount, currentTax.buyRaffleFee, currentTax.buyMarketingFee, currentTax.buyReflectionFee, currentTax.buyLiquidityFee);\r\n        FinalFees memory finalFees;\r\n        uint256 currentRate = _getRate();\r\n        (finalFees.rAmount, finalFees.rTransferAmount, finalFees.rReflection) = _getRValuesBuy(tAmount, buyFees.tRaffle, buyFees.tMarketing, buyFees.tReflection, buyFees.tLiquidity, currentRate);\r\n        finalFees.tRaffle = buyFees.tRaffle;\r\n        finalFees.tMarketing = buyFees.tMarketing;\r\n        finalFees.tReflection = buyFees.tReflection;\r\n        finalFees.tLiquidity = buyFees.tLiquidity;\r\n        finalFees.tTransferAmount = buyFees.tTransferAmount;\r\n        return (finalFees);\r\n    }\r\n\r\n    function _getTValuesBuy(uint256 tAmount, uint256 raffleFee, uint256 marketingFee, uint256 reflectionFee, uint256 liquidityFee) private pure returns (BuyBreakdown memory) {\r\n        BuyBreakdown memory tbuyFees;\r\n        tbuyFees.tRaffle = tAmount.mul(raffleFee).div(100);\r\n        tbuyFees.tMarketing = tAmount.mul(marketingFee).div(100);\r\n        tbuyFees.tReflection = tAmount.mul(reflectionFee).div(100);\r\n        tbuyFees.tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        tbuyFees.tTransferAmount = tAmount.sub(tbuyFees.tRaffle).sub(tbuyFees.tMarketing);\r\n        tbuyFees.tTransferAmount -= tbuyFees.tReflection;\r\n        tbuyFees.tTransferAmount -= tbuyFees.tLiquidity;\r\n        return (tbuyFees);\r\n    }\r\n\r\n    function _getRValuesBuy(uint256 tAmount, uint256 tRaffle, uint256 tMarketing, uint256 tReflection, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rRaffle = tRaffle.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rRaffle).sub(rMarketing).sub(rReflection);\r\n        rTransferAmount -= rLiquidity;\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (_rOwned[_burnAddress] > rSupply || _tOwned[_burnAddress] > tSupply) return (_rTotal, _tTotal);\r\n        rSupply = rSupply.sub(_rOwned[_burnAddress]);\r\n        tSupply = tSupply.sub(_tOwned[_burnAddress]);\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner() {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner() {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function removeBot(address account) external onlyOwner() {\r\n        bots[account] = false;\r\n    }\r\n\r\n    function addBot(address account) external onlyOwner() {\r\n        bots[account] = true;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(maxTxAmount > _tTotal.div(10000), \"Amount must be greater than 0.01% of supply\");\r\n        require(maxTxAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxTxAmount = maxTxAmount;\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwner() {\r\n        require(maxWalletAmount > 0, \"Amount must be greater than 0\");\r\n        require(maxWalletAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function setTaxes(uint256 buyMarketingFee, uint256 buyRaffleFee, uint256 buyReflectionFee, uint256 buyLiquidityFee, uint256 sellMarketingFee, uint256 sellRaffleFee, uint256 sellReflectionFee, uint256 sellLiquidityFee) external onlyOwner() {\r\n        uint256 buyTax = buyMarketingFee.add(buyRaffleFee).add(buyReflectionFee);\r\n        buyTax += buyLiquidityFee;\r\n        uint256 sellTax = sellMarketingFee.add(sellRaffleFee).add(sellReflectionFee);\r\n        sellTax += sellLiquidityFee;\r\n        require(buyTax < 50, \"Sum of sell fees must be less than 50\");\r\n        require(sellTax < 50, \"Sum of buy fees must be less than 50\");\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _buyRaffleFee = buyRaffleFee;\r\n        _buyReflectionFee = buyReflectionFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _sellRaffleFee = sellRaffleFee;\r\n        _sellReflectionFee = sellReflectionFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n\r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyRaffleFee = _buyRaffleFee;\r\n        _previousBuyReflectionFee = _buyReflectionFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellRaffleFee = _sellRaffleFee;\r\n        _previousSellReflectionFee = _sellReflectionFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n\r\n        emit FeesUpdated(_buyRaffleFee, _buyMarketingFee, _buyLiquidityFee, _buyReflectionFee, _sellRaffleFee, _sellMarketingFee, _sellLiquidityFee, _sellReflectionFee);\r\n    }\r\n\r\n    function setPriceImpact(uint256 priceImpact) external onlyOwner() {\r\n        require(priceImpact <= 100, \"max price impact must be less than or equal to 100\");\r\n        require(priceImpact > 0, \"cant prevent sells, choose value greater than 0\");\r\n        _priceImpact = priceImpact;\r\n        emit PriceImpactUpdated(_priceImpact);\r\n    }\r\n\r\n    function setPresaleRouterAndAddress(address router, address wallet) external onlyOwner() {\r\n        presaleRouter = router;\r\n        presaleAddress = wallet;\r\n        excludeFromFee(presaleRouter);\r\n        excludeFromFee(presaleAddress);\r\n    }\r\n\r\n    function endPresale(uint256 botBlocks) external onlyOwner() {\r\n        require(presale == true, \"presale already ended\");\r\n        presale = false;\r\n        openTrading(botBlocks);\r\n        emit EndedPresale(presale);\r\n    }\r\n    \r\n    function updateYoTimeBlocks(uint256 yoTimeBlocks) external onlyOwner() {\r\n        _yoTimeBlocks = yoTimeBlocks;\r\n    }\r\n\r\n    function updatePairSwapped(bool swapped) external onlyOwner() {\r\n        pairSwapped = swapped;\r\n    }\r\n    \r\n    function updateMinBuySellBNB(uint256 minBuyBNB, uint256 minSellBNB) external onlyOwner() {\r\n        require(minBuyBNB <= 100000000000000000, \"cant make the limit higher than 0.1 BNB\");\r\n        require(minSellBNB <= 100000000000000000, \"cant make the limit higher than 0.1 BNB\");\r\n        _minBuyBNB = minBuyBNB;\r\n        _minSellBNB = minSellBNB;\r\n    }\r\n    \r\n    function updateMaxSellAmountBNB(uint256 maxSellBNB) external onlyOwner() {\r\n        require(maxSellBNB >= 1000000000000000000, \"cant make the limit lower than 1 BNB\");\r\n        _maxSellAmountBNB = maxSellBNB;\r\n    }\r\n    \r\n    function _startYoTime() private {\r\n        _yoTimeStartBlock = block.timestamp;\r\n        _yoTimeStarted = true;\r\n        _yoTimeWindowEnd = block.timestamp.add(_yoTimeBlocks);\r\n    }\r\n    \r\n    function startYoTime() external onlyOwner() {\r\n        _yoTimeStartBlock = block.timestamp;\r\n        _yoTimeStarted = true;\r\n        _yoTimeWindowEnd = block.timestamp.add(_yoTimeBlocks);\r\n    }\r\n    \r\n    function manualStartYoTime() external onlyOwner() {\r\n        _yoTimeStartBlock = block.timestamp;\r\n        _yoTimeStarted = true;\r\n        _yoTimeWindowEnd = block.timestamp.add(_yoTimeBlocks);\r\n    }\r\n\r\n    function enableSellCoolDown() external onlyOwner() {\r\n        require(!_sellCoolDownEnabled, \"already enabled\");\r\n        _sellCoolDownEnabled = true;\r\n    }\r\n    \r\n    function disableSellCoolDown() external onlyOwner() {\r\n        require(_sellCoolDownEnabled, \"already disabled\");\r\n        _sellCoolDownEnabled = false;\r\n    }\r\n    \r\n    function setCoolDownBlocks(uint256 cooldownBlocks) external onlyOwner() {\r\n        require(cooldownBlocks <= 86400, \"cannot limit sells for longer than 1 day\");\r\n        _cooldownBlocks = cooldownBlocks;\r\n    }\r\n    \r\n    function updateRaffleAddress(address payable raffleAddress) external onlyOwner() {\r\n        _raffleAddress = raffleAddress;\r\n    }\r\n    \r\n    function updateMarketingAddress(address payable marketingAddress) external onlyOwner() {\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n    \r\n    function setYoStartTime(uint256 yoTimeStartTime) external onlyOwner() {\r\n        require(yoTimeStartTime <= 86400, \"Must be less than or equal to 86400 (1 day)\");\r\n        _yoTimeStartTime = yoTimeStartTime;\r\n    }\r\n    \r\n    function enableAutoYoTime() external onlyOwner() {\r\n        require(autoYoTimeEnabled == false, 'Already enabled');\r\n        autoYoTimeEnabled = true;\r\n    }\r\n    \r\n    function disableAutoYoTime() external onlyOwner() {\r\n        require(autoYoTimeEnabled == true, 'Alread disabled');\r\n        autoYoTimeEnabled = false;\r\n    }\r\n    \r\n    function updateRewardPercentage(uint256 rewardPercent) external onlyOwner() {\r\n        _rewardPercent = rewardPercent;\r\n    }\r\n    \r\n    function enableBNBsellLimit() external onlyOwner() {\r\n        require(_BNBsellLimitEnabled == false, \"already enabled\");\r\n        _BNBsellLimitEnabled = true;\r\n        _priceImpactSellLimitEnabled = false;\r\n    }\r\n    \r\n    function disableBNBsellLimit() external onlyOwner() {\r\n        require(_BNBsellLimitEnabled == true, \"already disabled\");\r\n        _BNBsellLimitEnabled = false;\r\n    }\r\n    \r\n    function enablePriceImpactSellLimit() external onlyOwner() {\r\n        require(_priceImpactSellLimitEnabled == false, \"already enabled\");\r\n        _priceImpactSellLimitEnabled = true;\r\n        _BNBsellLimitEnabled = false;\r\n    }\r\n    \r\n    function disablePriceImpactSellLimit() external onlyOwner() {\r\n        require(_priceImpactSellLimitEnabled == true, \"already disabled\");\r\n        _priceImpactSellLimitEnabled = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"presale\",\"type\":\"bool\"}],\"name\":\"EndedPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyRaffleFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyReflectionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellRaffleFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellReflectionFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buybackPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_devPercent\",\"type\":\"uint256\"}],\"name\":\"PercentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceImpact\",\"type\":\"uint256\"}],\"name\":\"PriceImpactUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellOnly\",\"type\":\"bool\"}],\"name\":\"SellOnlyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hundredMinusDipPercent\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllowableDip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"GTblock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LTblock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockWindow\",\"type\":\"uint256\"}],\"name\":\"UpdatedHighLowWindows\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BNBsellLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyRaffleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceImpactSellLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellCoolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellRaffleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_yoTimeStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_yoTimeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_yoTimeStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"addStakeholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAutoYoTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBNBsellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePriceImpactSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSellCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoYoTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBNBsellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePriceImpactSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSellCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"}],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualStartYoTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"removeStakeholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldownBlocks\",\"type\":\"uint256\"}],\"name\":\"setCoolDownBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setPresaleRouterAndAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"name\":\"setPriceImpact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyRaffleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRaffleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yoTimeStartTime\",\"type\":\"uint256\"}],\"name\":\"setYoStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesAndRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startYoTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellBNB\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmountBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBuyBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSellBNB\",\"type\":\"uint256\"}],\"name\":\"updateMinBuySellBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"name\":\"updatePairSwapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"raffleAddress\",\"type\":\"address\"}],\"name\":\"updateRaffleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"}],\"name\":\"updateRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yoTimeBlocks\",\"type\":\"uint256\"}],\"name\":\"updateYoTimeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YoRocket", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a50476c1b5f29fec01a164e0736bcf07e3f19e6847771ac5a376b00135ed443"}