{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.11;\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint a, uint b) internal pure returns (uint) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction mul(uint a, uint b) internal pure returns (uint) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns (uint) {\r\n\t\tuint c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract Lottery {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner; \r\n    address payable[] public players; \r\n    uint public lotteryId; \r\n    uint public adminFeePercentage; \r\n    address public tokenAddress; \r\n    uint public tokenAmount; \r\n    address payable public partner; \r\n    \r\n\r\n    mapping(uint => address payable) public lotteryHistory; \r\n    mapping(uint => address payable[]) public participants; \r\n    mapping(uint => address payable) public winners; \r\n\r\n    event LotteryWinner(uint lotteryId, address winner, uint prize); \r\n\r\n    constructor() {\r\n        owner = msg.sender; \r\n        lotteryId = 1; \r\n        adminFeePercentage = 10; \r\n        tokenAddress = address(0); \r\n        tokenAmount = 0; \r\n    }\r\n\r\n    function getRandomNumber() private view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.number, players.length))); \r\n    }\r\n \r\n    function getWinnerByLottery(uint lottery) public view returns (address payable) {\r\n        return lotteryHistory[lottery];\r\n    }\r\n \r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n \r\n    function getPlayers() public view returns (address payable[] memory) {\r\n        return players;\r\n    }\r\n\r\n    function setPartner(address payable _partner) public onlyOwner {\r\n        partner = _partner; \r\n    }\r\n \r\n    function enter() public payable {\r\n        require(msg.value >= .01 ether, \"Minimum amount not met\"); \r\n        players.push(payable(msg.sender)); \r\n    }\r\n \r\n    function setAdminFeePercentage(uint percentage) public onlyOwner {\r\n        require(percentage <= 100, \"Percentage should be less than or equal to 100\"); \r\n        adminFeePercentage = percentage; \r\n    }\r\n \r\n    function setTokenAddress(address _tokenAddress) public onlyOwner {\r\n        require(_tokenAddress != address(0), \"Invalid token address\"); \r\n        tokenAddress = _tokenAddress; \r\n    }\r\n \r\n    function setTokenAmount(uint _tokenAmount) public onlyOwner {\r\n        require(tokenAddress != address(0), \"Token address not set\"); \r\n        tokenAmount = _tokenAmount * 10 ** 18; \r\n    }\r\n \r\n    function pickWinner() public onlyOwner {\r\n        require(players.length > 0, \"No players in the lottery\"); \r\n        uint randomNumber = getRandomNumber(); \r\n        uint index = randomNumber % players.length; \r\n        address payable winner = players[index]; \r\n        players[index] = players[players.length - 1]; \r\n        players.pop(); \r\n\r\n        lotteryHistory[lotteryId] = winner; \r\n        winners[lotteryId] = winner; \r\n        participants[lotteryId] = players; \r\n\r\n        emit LotteryWinner(lotteryId, winner, address(this).balance); \r\n        lotteryId++; \r\n    }\r\n\r\n    function payWinner() public onlyOwner {\r\n        require(address(this).balance > 0, \"No balance in the contract\"); \r\n        require(tokenAddress != address(0), \"Invalid token address\"); \r\n\r\n        address payable winner = lotteryHistory[lotteryId - 1]; \r\n        uint totalBalance = address(this).balance; \r\n        uint adminFee = totalBalance.mul(adminFeePercentage).div(100); \r\n\r\n        uint ownerFee = adminFee.mul(4).div(10);\r\n        uint partnerFee = adminFee.mul(4).div(10);\r\n        uint poolFee = adminFee.sub(ownerFee).sub(partnerFee);\r\n\r\n        payable(owner).transfer(ownerFee); \r\n        partner.transfer(partnerFee); \r\n        payable(owner).transfer(poolFee); \r\n\r\n\r\n        winner.transfer(totalBalance.sub(adminFee)); \r\n        Token(tokenAddress).transfer(winner, tokenAmount.mul(10)); \r\n \r\n        for (uint i = 0; i < players.length; i++) {\r\n            if (players[i] != winner) {\r\n                Token(tokenAddress).transfer(players[i], tokenAmount); \r\n            }\r\n        }\r\n\r\n        emit LotteryWinner(lotteryId - 1, winner, totalBalance.sub(adminFee)); \r\n\r\n        players = new address payable[](0); \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\"); \r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LotteryWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lottery\",\"type\":\"uint256\"}],\"name\":\"getWinnerByLottery\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryHistory\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setAdminFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44e2e78d733d8bc58252489c554d6024c61e7a0d44eaea497f95c34ff9f0f850"}