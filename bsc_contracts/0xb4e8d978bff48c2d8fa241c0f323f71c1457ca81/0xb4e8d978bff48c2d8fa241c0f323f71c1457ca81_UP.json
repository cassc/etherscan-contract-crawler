{"SourceCode": "{\"AdminRole.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./OwnerRole.sol\\\";\\r\\n\\r\\ncontract AdminRole is OwnerRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event AdminAdded(address indexed account);\\r\\n    event AdminRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _admins;\\r\\n\\r\\n    constructor () internal {\\r\\n        _addAdmin(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(msg.sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address account) public view returns (bool) {\\r\\n        return _admins.has(account);\\r\\n    }\\r\\n\\r\\n    function addAdmin(address account) public onlyOwner {\\r\\n        _addAdmin(account);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address account) public onlyOwner {\\r\\n        _removeAdmin(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function renounceAdmin() public {\\r\\n        _removeAdmin(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addAdmin(address account) internal {\\r\\n        _admins.add(account);\\r\\n        emit AdminAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeAdmin(address account) internal {\\r\\n        _admins.remove(account);\\r\\n        emit AdminRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"IBEP20.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n/**\\r\\n * @title BEP20 interface \\r\\n * @dev see https://github.com/binance-chain/BEPs/blob/master/BEP20.md#52-implementation\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n\\r\\n}\\r\\n\"},\"MinterRole.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./AdminRole.sol\\\";\\r\\ncontract MinterRole is AdminRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _minters;\\r\\n\\r\\n    constructor () internal {\\r\\n        _addMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter(msg.sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return _minters.has(account);\\r\\n    }\\r\\n\\r\\n    function addMinter(address account) public onlyOwner {\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    function removeMinter(address account) public onlyAdmin {\\r\\n        _removeMinter(account);\\r\\n    }\\r\\n\\r\\n    function renounceMinter() public {\\r\\n        _removeMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addMinter(address account) internal {\\r\\n        _minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeMinter(address account) internal {\\r\\n        _minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"OwnerRole.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\ncontract OwnerRole {\\r\\n  \\r\\n\\r\\n\\r\\n    event OwnerRemoved(address indexed account);\\r\\n    event OwnershipTransferred(address indexed previousAccount,address indexed newAccount);\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n        \\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(msg.sender));\\r\\n         _;\\r\\n    }\\r\\n\\r\\n    function isOwner(address account) public view returns (bool) {\\r\\n        return _owner == account;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function transferOwnership(address account) public onlyOwner {\\r\\n        _transferOwnership(account);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner,newOwner);\\r\\n        _owner = newOwner ;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n       \\r\\n         emit OwnershipTransferred(address(0), _owner);\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\\r\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev give an account access to this role\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(!has(role, account));\\r\\n\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove an account\\u0027s access to this role\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(has(role, account));\\r\\n\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev check if an account has this role\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0));\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two numbers, reverts on overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0); // Solidity only automatically asserts when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two numbers, reverts on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\r\\n     * reverts when dividing by zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n      /**\\r\\n   * @dev Compute A to the power of B.\\r\\n   */\\r\\n    function pow(uint256 A, uint256 B) internal pure returns (uint256){ \\r\\n        return A**B;\\r\\n     }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"UnifiProtocolTokens.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n/**\\r\\n * @title UnifiProtocolTokens interface (compatible with ERC20 interface)\\r\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n */\\r\\ninterface UnifiProtocolTokens {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function updateFeeState(uint256 fee) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n    \\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n\\r\\n}\\r\\n\"},\"UP.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n\\r\\nimport \\\"./MinterRole.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./UnifiProtocolTokens.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\n\\r\\ncontract UP is IBEP20, MinterRole {\\r\\n    using SafeMath for uint256;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _percentFactor = 100000;\\r\\n    uint256 private _mintRate = 90000;\\r\\n    uint256 private _burnRate = 100000;\\r\\n    uint256 private _ulRate=50000;\\r\\n    uint256 private BaseFactor =10 ;\\r\\n    UnifiProtocolTokens FTToken;\\r\\n    UnifiProtocolTokens DexToken;\\r\\n    address FTAddress;\\r\\n    uint256 private totalUPBurnt = 0;\\r\\n    uint256 private totalFeesGiven = 0;\\r\\n    mapping (address =\\u003e uint256) private _balances;  \\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    constructor (uint8 decimals,address FTtoken) payable public {\\r\\n        _name = \\\"UP\\\";\\r\\n        _symbol = \\\"UP\\\";\\r\\n        _decimals = decimals;//set it same as blockchain decimals\\r\\n        FTToken = UnifiProtocolTokens(FTtoken);\\r\\n        BaseFactor =BaseFactor.pow(decimals) ;\\r\\n        require(msg.value\\u003e0 ,\\\"Invalid amount\\\");\\r\\n        _mint(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param to The address that will receive the minted tokens.\\r\\n     * @param amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public onlyMinter payable returns (bool) {\\r\\n       require(msg.value == amount);\\r\\n        uint256 Value = getVirtualPriceForMinting(amount);\\r\\n        uint256 MintAmount = amount.mul(_mintRate).mul(BaseFactor).div(Value.mul(_percentFactor));  \\r\\n        uint256 ULAmount = MintAmount.mul(_ulRate).div(_percentFactor);\\r\\n        uint256 FTAmount = MintAmount.mul(_percentFactor.sub(_ulRate)).div(_percentFactor);\\r\\n        _mint(to, ULAmount);\\r\\n        _mint(FTToken, FTAmount);\\r\\n        DexToken =  UnifiProtocolTokens(to);\\r\\n        DexToken.updateFeeState(ULAmount);\\r\\n        FTToken.updateFeeState( FTAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n        /**\\r\\n     * @dev Burns a specific amount of tokens and return the backed value\\r\\n     * @param value The amount of token to be burned.\\r\\n     */\\r\\n    function burn(uint256 value) public {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n            /**\\r\\n     * @dev Burns a specific amount of tokens.\\r\\n     * @param value The amount of token to be burned.\\r\\n     */\\r\\n    function justBurn(uint256 value) public {\\r\\n        _justBurn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param value uint256 The amount of token to be burned\\r\\n     */\\r\\n    function burnFrom(address from, uint256 value) public {\\r\\n        _burnFrom(from, value);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @return the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the symbol of the token.\\r\\n     */\\r\\n    function symbol() public view returns (string) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the number of decimals of the token.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the number of price of UP token\\r\\n     */\\r\\n    function getVirtualPrice() public view returns(uint256){\\r\\n        uint256 baseTokenbal = address(this).balance;\\r\\n        uint256 Value =(baseTokenbal.mul(BaseFactor)).div(_totalSupply); \\r\\n        return Value;\\r\\n    }\\r\\n\\r\\n    function getVirtualPriceForMinting(uint value) public view returns(uint256){\\r\\n        uint256 baseTokenbal = (address(this).balance).sub(value);\\r\\n        uint256 Value =(baseTokenbal.mul(BaseFactor)).div(_totalSupply); \\r\\n        return Value;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateFTToken(address account) public onlyOwner returns (address){\\r\\n        FTToken  = UnifiProtocolTokens(account);\\r\\n        FTAddress = account;\\r\\n        return FTToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens in existence\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner The address to query the balance of.\\r\\n     * @return An uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n    \\r\\n\\r\\n    function getTotalFeesGiven() public view returns (uint256) {\\r\\n        return totalFeesGiven;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTotalUPBurnt() public view returns (uint256) {\\r\\n        return totalUPBurnt;\\r\\n    }             \\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param owner address The address which owns the funds.\\r\\n     * @param spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    )\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified address\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transferMulti(address[] to, uint256[] value) public returns (bool) {\\r\\n\\r\\n        uint256 i = 0;\\r\\n        while (i \\u003c to.length) {\\r\\n             _transfer(msg.sender,to[i] , value[i]);\\r\\n            i++;\\r\\n         }\\r\\n         return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param to address The address which you want to transfer to\\r\\n     * @param value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    )\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when allowed_[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    )\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = (\\r\\n        _allowed[msg.sender][spender].add(addedValue));\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    )\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = (\\r\\n        _allowed[msg.sender][spender].sub(subtractedValue));\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified addresses\\r\\n     * @param from The address to transfer from.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0));\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that mints an amount of the token and assigns it to\\r\\n     * an account. This encapsulates the modification of balances such that the\\r\\n     * proper events are emitted.\\r\\n     * @param account The account that will receive the created tokens.\\r\\n     * @param value The amount that will be created.\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        _totalSupply = _totalSupply.add(value);\\r\\n        _balances[account] = _balances[account].add(value);\\r\\n        emit Transfer(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account and returns the backed value\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0));\\r\\n        uint256 virtualPrice = getVirtualPrice();\\r\\n        uint256 redeemValue = (virtualPrice.mul(value)).div(BaseFactor);\\r\\n        totalUPBurnt = totalUPBurnt.add(value);\\r\\n        totalFeesGiven = totalFeesGiven.add(redeemValue);\\r\\n        address(account).transfer(redeemValue);\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n\\r\\n        /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _justBurn(address account, uint256 value) internal {\\r\\n        require(account != address(0));\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\r\\n     * internal burn function.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 value) internal {\\r\\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\\r\\n        // this function needs to emit an event with the updated approval.\\r\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\\r\\n            value);\\r\\n        _burn(account, value);\\r\\n    }\\r\\n     \\r\\n    /**\\r\\n     * @dev Withdraw airdrop tokens or accidental transfer\\r\\n     * @param tokenAddress The aToken Address\\r\\n     * @param amount Amount to withdraw\\r\\n     */     \\r\\n    function transferOtherTokens(address tokenAddress,uint256 amount )public onlyOwner returns (bool){\\r\\n  \\r\\n        require(address(this) != tokenAddress);\\r\\n        IBEP20 otherTokens = IBEP20(tokenAddress);\\r\\n        otherTokens.transfer(msg.sender, amount);\\r\\n        return true;\\r\\n    \\r\\n    }\\r\\n    function updateValues(string fieldName,uint256 amount) public  returns (bool) {\\r\\n    require(isOwner(msg.sender) ,\\u0027UPToken: NOT_AUTHORIZED\\u0027);\\r\\n\\r\\n    if(compareStrings(fieldName,\\\"MintRate\\\")){\\r\\n      _mintRate = amount;\\r\\n      return true;\\r\\n    }\\r\\n    else if(compareStrings(fieldName,\\\"ULRate\\\")){\\r\\n      _ulRate = amount;\\r\\n      return true;\\r\\n    }\\r\\n    else if(compareStrings(fieldName,\\\"BurnRate\\\")){\\r\\n      _burnRate = amount;\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n   function compareStrings (string memory a, string memory b) internal pure   \\r\\n       returns (bool) {\\r\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))) );\\r\\n\\r\\n  }\\r\\n\\r\\n      function () public payable {}\\r\\n\\r\\n}\\r\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOtherTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFeesGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getVirtualPriceForMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"justBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fieldName\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateValues\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUPBurnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateFTToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"FTtoken\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "UP", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000b6c5c839cef46082a2b51164e8db649c121f147e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8a23af06df4b18f89a6481a39dc6a27da1998f4de5c6ddb58e5d37806e9a6779"}