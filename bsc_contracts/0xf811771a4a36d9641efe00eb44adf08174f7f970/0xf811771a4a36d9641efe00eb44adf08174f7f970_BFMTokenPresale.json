{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n//SPDX-License-Identifier: MIT Licensed\r\n\r\ninterface IToken {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract BFMTokenPresale is Ownable{\r\n    IToken public USDT = IToken(0x55d398326f99059fF775485246999027B3197955);\r\n    IToken public BFM = IToken(0x4e1C1BD35397042319Fe252d2e324ad439B19f1e);\r\n\r\n    AggregatorV3Interface public priceFeedEth;\r\n\r\n    uint public referrerPercentage = 5;\r\n    uint256 public minbuyToken = 100e8;\r\n    uint256 public maxbuyToken = 1000000e8;\r\n    uint256 public initialReleasePercentage = 50;\r\n\r\n    struct PresaleInfo{\r\n        uint256 totalTokens;\r\n        uint256 tokenPrice;\r\n        uint256 lockPeriod;\r\n        uint256 presaleTime;\r\n        uint256 amountRaisedBNB;\r\n        uint256 amountRaisedUSDT;\r\n        uint256 soldTokens;\r\n    }\r\n    \r\n    PresaleInfo public presaleInfo;\r\n\r\n    mapping(address => uint256) public userTokenBalance;\r\n    mapping (address => address) public referrers; \r\n\r\n    event BuyTokensBnb(address indexed _user, uint256 indexed _amount, uint256 indexed boughtTokens);\r\n    event BuyTokenUSDT(address indexed _user, uint256 indexed _amount, uint256 indexed boughtTokens);\r\n    event ClaimTokens(address indexed _user, uint256 indexed _amount);\r\n\r\n    constructor() {\r\n        priceFeedEth = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n        presaleInfo.totalTokens = 16000000 * 1e8;\r\n        presaleInfo.tokenPrice = 83 * 1e8;\r\n        presaleInfo.presaleTime = block.timestamp + 30 days;\r\n        presaleInfo.lockPeriod = presaleInfo.presaleTime + 45 days;\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // to get real time price of Eth\r\n    function getLatestPriceBnb() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeedEth.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n     function buyTokensWithReferral(\r\n        address referrer\r\n    ) external payable {\r\n        require(referrer != msg.sender, \"Cannot refer yourself\");\r\n        require(\r\n            referrers[msg.sender] == address(0),\r\n            \"You already have a referrer\"\r\n        );\r\n\r\n        buyTokensBnb();\r\n        referrers[msg.sender] = referrer;\r\n\r\n        if (referrer != address(0)) {\r\n            uint256 referralReward = (msg.value * referrerPercentage) / 100;\r\n            payable(referrer).transfer(referralReward);\r\n        }\r\n    }\r\n\r\n     function buyTokensUSDTWithReferral(\r\n        uint256 amount,\r\n        address referrer\r\n    ) external {\r\n        require(referrer != msg.sender, \"Cannot refer yourself\");\r\n        require(\r\n            referrers[msg.sender] == address(0),\r\n            \"You already have a referrer\"\r\n        );\r\n\r\n        buyTokensUSDT(amount);\r\n        referrers[msg.sender] = referrer;\r\n\r\n        if (referrer != address(0)) {\r\n            uint256 referralReward = (amount * referrerPercentage) / 100;\r\n            USDT.transfer(referrer, referralReward);\r\n        }\r\n    }\r\n\r\n    // to buy token during preSale time with Bnb => for web3 use\r\n    function buyTokensBnb() public payable {\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n        \r\n        require(block.timestamp < presaleInfo.presaleTime, \"Presale time over\");\r\n        uint256 tokensToBuy = bnbToToken(msg.value);\r\n        require(\r\n            tokensToBuy >= minbuyToken,\r\n            \"Minimum purchase limit!\"\r\n        );\r\n        require(\r\n            tokensToBuy <= maxbuyToken,\r\n            \"Maximum purchase limit!\"\r\n        );\r\n        require(\r\n            presaleInfo.soldTokens + tokensToBuy <= presaleInfo.totalTokens,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n        uint256 initalTokens = (tokensToBuy * initialReleasePercentage) / 100 ;\r\n        BFM.transferFrom(owner(), msg.sender, initalTokens);\r\n\r\n        userTokenBalance[msg.sender] += tokensToBuy - initalTokens;\r\n        presaleInfo.amountRaisedBNB += msg.value;\r\n        presaleInfo.soldTokens += tokensToBuy;\r\n\r\n        emit BuyTokensBnb(msg.sender,msg.value, tokensToBuy);\r\n    }\r\n\r\n     function claimTokens() external {\r\n        require(\r\n            block.timestamp >= presaleInfo.lockPeriod,\r\n            \"Locked period not over yet\"\r\n        );\r\n        uint256 _claimableAmount = userTokenBalance[msg.sender];\r\n        require(_claimableAmount > 0, \"No tokens to claim\");\r\n\r\n        userTokenBalance[msg.sender] -= _claimableAmount;\r\n        BFM.transferFrom(owner(), msg.sender, _claimableAmount);\r\n\r\n        emit ClaimTokens(msg.sender, _claimableAmount);\r\n    }\r\n\r\n    // to buy token during preSale time with USDT => for web3 use\r\n    function buyTokensUSDT(uint256 amount) public {\r\n        require(amount > 0 , \"Can't buy tokens\");\r\n        require(block.timestamp < presaleInfo.presaleTime, \"Presale time over\");\r\n        uint256 tokensToBuy = usdtToToken(amount);\r\n         require(\r\n            tokensToBuy >= minbuyToken,\r\n            \"Minimum purchase limit!\"\r\n        );\r\n        require(\r\n            tokensToBuy <= maxbuyToken,\r\n            \"Maximum purchase limit!\"\r\n        );\r\n        require(\r\n            presaleInfo.soldTokens + tokensToBuy <= presaleInfo.totalTokens,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n        USDT.transferFrom(msg.sender, address(this), amount);\r\n        uint256 initalTokens = (tokensToBuy * initialReleasePercentage) / 100 ;\r\n        BFM.transferFrom(owner(), msg.sender, initalTokens);\r\n\r\n        userTokenBalance[msg.sender] += tokensToBuy - initalTokens;\r\n        presaleInfo.amountRaisedUSDT += amount;\r\n        presaleInfo.soldTokens += tokensToBuy;\r\n        emit BuyTokenUSDT(msg.sender, amount, tokensToBuy);\r\n    }\r\n\r\n    // to check number of token for given BNB\r\n    function bnbToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 bnbToUsd = (_amount * (getLatestPriceBnb())) / (1 ether);\r\n        uint256 numberOfTokens = (bnbToUsd * (presaleInfo.tokenPrice)) / (1e8);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to check number of token for given usdt\r\n    function usdtToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 numberOfTokens = (_amount * (presaleInfo.tokenPrice)) /\r\n            10**(USDT.decimals());\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to change Price of the token\r\n    function changePrice(uint256 _price) external onlyOwner {\r\n        presaleInfo.tokenPrice = _price;\r\n    }\r\n\r\n    // change tokens\r\n    function changeBFMToken(address _token) external onlyOwner {\r\n        BFM = IToken(_token);\r\n    }\r\n\r\n    function setMinBuyToken(uint256 _newMinBuyToken) external onlyOwner {\r\n        minbuyToken = _newMinBuyToken;\r\n    }\r\n\r\n    function setMaxBuyToken(uint256 _newMaxBuyToken) external onlyOwner {\r\n        maxbuyToken = _newMaxBuyToken;\r\n    }\r\n\r\n    function setReferrerPercentage(uint256 _percentage) external onlyOwner {\r\n        require(\r\n            _percentage <= 100,\r\n            \"referrerPercentage must be less than 100\"\r\n        );\r\n        referrerPercentage = _percentage;\r\n    }\r\n\r\n\r\n    // change supply\r\n    function changeTotalTokens(uint256 _total) external onlyOwner {\r\n        presaleInfo.totalTokens = _total;\r\n    }\r\n\r\n    //change presale time\r\n    function setPresaleTime(\r\n        uint256 _presaleTime\r\n    ) external onlyOwner {\r\n        presaleInfo.presaleTime= block.timestamp + _presaleTime;\r\n    }\r\n\r\n    //change USDT\r\n    function changeUSDT(address _USDT) external onlyOwner {\r\n        USDT = IToken(_USDT);\r\n    }\r\n    //to change the locked period\r\n\r\n    function setLockedPeriod(uint _newLockedPeriod) external onlyOwner{\r\n        presaleInfo.lockPeriod = block.timestamp + _newLockedPeriod;\r\n    }\r\n\r\n    // to draw funds\r\n    function withdrawBNB() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    // to draw out tokens\r\n    function transferTokens(IToken token, uint256 _value) external onlyOwner {\r\n        require(\r\n            token.balanceOf(address(this)) > 0,\r\n            \"Not enough tokens to withdraw\"\r\n        );\r\n        token.transfer(msg.sender, _value);\r\n    }\r\n\r\n    //to change initialReleasePercentage \r\n    function changeInitialPercentage(uint256 _intialPercentage) external onlyOwner{\r\n     require(\r\n            _intialPercentage <= 100,\r\n            \"initialReleasePercentage must be less than 100\"\r\n        );\r\n        initialReleasePercentage = _intialPercentage;\r\n    }\r\n\r\n    // to get current UTC time\r\n    function getCurrentTime() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    // to get contract Eth balance\r\n    function contractBalanceBnb() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    //to get contract USDT balance\r\n    function contractBalanceUSDT() external view returns (uint256) {\r\n        return USDT.balanceOf(address(this));\r\n    }\r\n\r\n    //to get contract BFM balance\r\n    function contractBalanceBFM() external view returns (uint256) {\r\n        return BFM.balanceOf(address(this));\r\n    }\r\n\r\n    // to get contract token balance\r\n    function getContractTokenApproval() external view returns (uint256) {\r\n        return BFM.allowance(owner(), address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boughtTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokenUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boughtTokens\",\"type\":\"uint256\"}],\"name\":\"BuyTokensBnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BFM\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bnbToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokensUSDTWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokensWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeBFMToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intialPercentage\",\"type\":\"uint256\"}],\"name\":\"changeInitialPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"changeTotalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"changeUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceBFM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialReleasePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxbuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minbuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaisedBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaisedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedEth\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockedPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockedPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxBuyToken\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinBuyToken\",\"type\":\"uint256\"}],\"name\":\"setMinBuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setReferrerPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BFMTokenPresale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5efbf743048b1c0ad47aa28fae917bc280c38087cc20d813088945bb7eb8704"}