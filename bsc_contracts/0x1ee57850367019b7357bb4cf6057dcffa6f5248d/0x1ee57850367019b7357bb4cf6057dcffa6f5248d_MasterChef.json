{"SourceCode": "{\"EagleToken.sol\":{\"content\":\"// File: contracts\\\\libs\\\\SafeMath.sol\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity \\u003e=0.6.4;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\Address.sol\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\SafeBEP20.sol\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IBEP20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\Context.sol\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\Ownable.sol\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\BEP20.sol\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IBEP20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of BEP20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IBEP20-approve}.\\r\\n */\\r\\ncontract BEP20 is Context, IBEP20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external override view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public override view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public override view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the number of decimals used to get its user representation.\\r\\n    */\\r\\n    function decimals() public override view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom (address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(amount, \\u0027BEP20: transfer amount exceeds allowance\\u0027)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\u0027BEP20: decreased allowance below zero\\u0027));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `msg.sender` must be the token owner\\r\\n     */\\r\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n        _mint(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer (address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\u0027BEP20: transfer from the zero address\\u0027);\\r\\n        require(recipient != address(0), \\u0027BEP20: transfer to the zero address\\u0027);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\u0027BEP20: transfer amount exceeds balance\\u0027);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\u0027BEP20: mint to the zero address\\u0027);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\u0027BEP20: burn from the zero address\\u0027);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\u0027BEP20: burn amount exceeds balance\\u0027);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve (address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\u0027BEP20: approve from the zero address\\u0027);\\r\\n        require(spender != address(0), \\u0027BEP20: approve to the zero address\\u0027);\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\u0027BEP20: burn amount exceeds allowance\\u0027));\\r\\n    }\\r\\n}\\r\\n\\r\\n// EagleToken with Governance.\\r\\ncontract EagleToken is BEP20(\\u0027Eagle.Farm\\u0027, \\u0027EAGLE\\u0027) {\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\r\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\r\\n        _mint(_to, _amount);\\r\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\r\\n    }\\r\\n\\r\\n    // Copied and modified from YAM code:\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\r\\n    // Which is copied and modified from COMPOUND:\\r\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping (address =\\u003e address) internal _delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address =\\u003e mapping (uint32 =\\u003e Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address =\\u003e uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract\\u0027s domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address =\\u003e uint) public nonces;\\r\\n\\r\\n      /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account\\u0027s vote balance changes\\r\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegator The address to get delegatee for\\r\\n     */\\r\\n    function delegates(address delegator)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return _delegates[delegator];\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n    * @param delegatee The address to delegate votes to\\r\\n    */\\r\\n    function delegate(address delegatee) external {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint nonce,\\r\\n        uint expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name())),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(\\r\\n                DELEGATION_TYPEHASH,\\r\\n                delegatee,\\r\\n                nonce,\\r\\n                expiry\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                domainSeparator,\\r\\n                structHash\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"FHUB::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signatory]++, \\\"FHUB::delegateBySig: invalid nonce\\\");\\r\\n        require(now \\u003c= expiry, \\\"FHUB::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints \\u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(blockNumber \\u003c block.number, \\\"FHUB::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \\u003c= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock \\u003e blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper \\u003e lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock \\u003c blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee)\\r\\n        internal\\r\\n    {\\r\\n        address currentDelegate = _delegates[delegator];\\r\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying FHUBs (not scaled);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\r\\n        if (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                // decrease old representative\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld = srcRepNum \\u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                // increase new representative\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint256 dstRepOld = dstRepNum \\u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint256 oldVotes,\\r\\n        uint256 newVotes\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        uint32 blockNumber = safe32(block.number, \\\"FHUB::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n        if (nCheckpoints \\u003e 0 \\u0026\\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n \\u003c 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"MasterChefCobra.sol\":{\"content\":\"import \\\"VaultMaker.sol\\\";\\r\\n\\r\\n// CobraToken with Governance.\\r\\ncontract CobraToken is BEP20(\\u0027Cobra.Farm\\u0027, \\u0027COBRA\\u0027) {\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\r\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\r\\n        _mint(_to, _amount);\\r\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\r\\n    }\\r\\n\\r\\n    // Copied and modified from YAM code:\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\r\\n    // Which is copied and modified from COMPOUND:\\r\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping (address =\\u003e address) internal _delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address =\\u003e mapping (uint32 =\\u003e Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address =\\u003e uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract\\u0027s domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address =\\u003e uint) public nonces;\\r\\n\\r\\n      /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account\\u0027s vote balance changes\\r\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegator The address to get delegatee for\\r\\n     */\\r\\n    function delegates(address delegator)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return _delegates[delegator];\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n    * @param delegatee The address to delegate votes to\\r\\n    */\\r\\n    function delegate(address delegatee) external {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint nonce,\\r\\n        uint expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name())),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(\\r\\n                DELEGATION_TYPEHASH,\\r\\n                delegatee,\\r\\n                nonce,\\r\\n                expiry\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                domainSeparator,\\r\\n                structHash\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"COBRA::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signatory]++, \\\"COBRA::delegateBySig: invalid nonce\\\");\\r\\n        require(now \\u003c= expiry, \\\"COBRA::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints \\u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(blockNumber \\u003c block.number, \\\"COBRA::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \\u003c= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock \\u003e blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper \\u003e lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock \\u003c blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee)\\r\\n        internal\\r\\n    {\\r\\n        address currentDelegate = _delegates[delegator];\\r\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying COBRAs (not scaled);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\r\\n        if (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                // decrease old representative\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld = srcRepNum \\u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                // increase new representative\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint256 dstRepOld = dstRepNum \\u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint256 oldVotes,\\r\\n        uint256 newVotes\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        uint32 blockNumber = safe32(block.number, \\\"COBRA::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n        if (nCheckpoints \\u003e 0 \\u0026\\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n \\u003c 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File: contracts\\\\MasterChef.sol\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// MasterChef is the master of Cobra. He can make Cobra and he is a fair guy.\\r\\n//\\r\\n// Note that it\\u0027s ownable and the owner wields tremendous power. The ownership\\r\\n// will be transferred to a governance smart contract once COBRA is sufficiently\\r\\n// distributed and the community can show to govern itself.\\r\\n//\\r\\n// Have fun reading it. Hopefully it\\u0027s bug-free. God bless.\\r\\ncontract MasterChef is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;         // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt;     // Reward debt. See explanation below.\\r\\n        uint256 depositBlock;   // Block number when user deposited\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of COBRAs\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accCobraPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\\u0027s what happens:\\r\\n        //   1. The pool\\u0027s `accCobraPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User\\u0027s `amount` gets updated.\\r\\n        //   4. User\\u0027s `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBEP20 lpToken;           // Address of LP token contract.\\r\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. COBRAs to distribute per block.\\r\\n        uint256 lastRewardBlock;  // Last block number that COBRAs distribution occurs.\\r\\n        uint256 accCobraPerShare;   // Accumulated COBRAs per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP;      // Deposit fee in basis points\\r\\n        uint16 devFeeBP;          // Developer fee in basis points\\r\\n        uint16 nestFeeBP;         // Nest fee in basis points \\r\\n        uint16 communityFeeBP;         // Community investment fund fee in basis points \\r\\n        uint16 burnFeeBP;         // Burn fee for certain pools \\r\\n        uint256 stakeTimeLimit;   // Time limit to staking, 0 for regular farms and pools \\r\\n    }\\r\\n\\r\\n    // The COBRA TOKEN!\\r\\n    CobraToken public cobra;\\r\\n    // Dev address.\\r\\n    address public devaddr;\\r\\n    // COBRA tokens created per block.\\r\\n    uint256 public cobraPerBlock;\\r\\n    // Bonus muliplier for early cobra makers.\\r\\n    uint256 public constant BONUS_MULTIPLIER = 1;\\r\\n    // Deposit Fee address\\r\\n    address public feeAddress;\\r\\n    // Dev Fee address \\r\\n    address public devFeeAddress;\\r\\n    // Community investment fund address \\r\\n    address public communityFeeAddress;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping (uint256 =\\u003e mapping (address =\\u003e UserInfo)) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n    // The block number when COBRA mining starts.\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        CobraToken _cobra,\\r\\n        address _devaddr,\\r\\n        address _feeAddress,\\r\\n        address _devFeeAddress,\\r\\n        address _communityFeeAddress,\\r\\n        uint256 _cobraPerBlock,\\r\\n        uint256 _startBlock\\r\\n    ) public {\\r\\n        cobra = _cobra;\\r\\n        devaddr = _devaddr;\\r\\n        feeAddress = _feeAddress;\\r\\n        devFeeAddress = _devFeeAddress;\\r\\n        communityFeeAddress = _communityFeeAddress;\\r\\n        cobraPerBlock = _cobraPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n    }\\r\\n\\r\\n    address vaultMakerAddress = 0xf4f092d2FC1e28CE7954D3A38a739d05a33886e1;\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n    \\r\\n    function setDevFeeAddress( address _devFeeAddress ) public onlyOwner {\\r\\n        devFeeAddress = _devFeeAddress;\\r\\n    }\\r\\n    \\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    function add(uint256 _allocPoint, IBEP20 _lpToken, uint16 _depositFeeBP, uint16 _nestFeeBP, uint16 _devFeeBP, uint16 _communityFeeBP, uint16 _burnFeeBP, uint256 _stakeTimeLimit, bool _withUpdate) public onlyOwner {\\r\\n        require(_depositFeeBP \\u003c= 10000, \\\"add: invalid deposit fee basis points\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number \\u003e startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolInfo.push(PoolInfo({\\r\\n            lpToken: _lpToken,\\r\\n            allocPoint: _allocPoint,\\r\\n            lastRewardBlock: lastRewardBlock,\\r\\n            accCobraPerShare: 0,\\r\\n            depositFeeBP: _depositFeeBP,\\r\\n            devFeeBP: _devFeeBP,\\r\\n            nestFeeBP: _nestFeeBP,\\r\\n            communityFeeBP: _communityFeeBP,\\r\\n            burnFeeBP: _burnFeeBP,\\r\\n            stakeTimeLimit: _stakeTimeLimit\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // Update the given pool\\u0027s COBRA allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP, uint16 _nestFeeBP, uint16 _communityFeeBP, uint16 _burnFeeBP, uint256 _stakeTimeLimit, bool _withUpdate) public onlyOwner {\\r\\n        require(_depositFeeBP \\u003c= 10000, \\\"set: invalid deposit fee basis points\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].nestFeeBP = _nestFeeBP;\\r\\n        poolInfo[_pid].communityFeeBP = _communityFeeBP;\\r\\n        poolInfo[_pid].burnFeeBP = _burnFeeBP;\\r\\n        poolInfo[_pid].stakeTimeLimit = _stakeTimeLimit;\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\r\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    // View function to see pending COBRAs on frontend.\\r\\n    function pendingCobra(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accCobraPerShare = pool.accCobraPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (block.number \\u003e pool.lastRewardBlock \\u0026\\u0026 lpSupply != 0) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n            uint256 cobraReward = multiplier.mul(cobraPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n            accCobraPerShare = accCobraPerShare.add(cobraReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n        return user.amount.mul(accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid \\u003c length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number \\u003c= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        uint256 cobraReward = multiplier.mul(cobraPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n        cobra.mint(devaddr, cobraReward.div(10));\\r\\n        cobra.mint(address(this), cobraReward);\\r\\n        pool.accCobraPerShare = pool.accCobraPerShare.add(cobraReward.mul(1e12).div(lpSupply));\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for COBRA allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        updatePool(_pid);\\r\\n        \\r\\n        \\r\\n        if( pool.stakeTimeLimit \\u003e 0 ) {\\r\\n            // A time-limit staking pool\\r\\n            \\r\\n            // Check pending balance in pool \\r\\n            uint256 pending = user.amount.mul(pool.accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            // Do not allow a deposit if the user still has to withdraw\\r\\n            require(pending \\u003c 1, \\\"You may not deposit before unstaking\\\");\\r\\n            // Set the timestamp of stake deposit \\r\\n            user.depositBlock = block.number;\\r\\n            \\r\\n            address tokenAddress = address( pool.lpToken );\\r\\n            \\r\\n            // Calculate total supply of Deposited Token\\r\\n            uint256 tokenSupply = IBEP20(address(tokenAddress)).totalSupply();\\r\\n            \\r\\n            // The burn address \\r\\n            address burnAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n        \\r\\n            if( _pid == 0 ) {\\r\\n                // BUSD pool is 0, always add it first \\r\\n                \\r\\n                // Get the current accumulating vault address \\r\\n                VaultMaker vaultMaker = VaultMaker( vaultMakerAddress );\\r\\n                \\r\\n                address currentAccumulatingVault = vaultMaker.getCurrentVaultAddress();\\r\\n                \\r\\n                if( _amount \\u003e 0 ) {\\r\\n                    pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n                    uint256 vaultFee = _amount.mul(pool.nestFeeBP).div(10000);\\r\\n                    pool.lpToken.safeTransfer(currentAccumulatingVault, vaultFee);\\r\\n                    user.amount = user.amount.add(_amount).sub(vaultFee);\\r\\n                }\\r\\n            // end if pid == 0 \\r\\n            } else {\\r\\n                // Anything but BUSD\\r\\n                if( _amount \\u003e 0 ) {\\r\\n                    pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n                    // Since user.amount is always 0 for time limited staking pools (the user is forced to unstake all funds) we can just set the value here \\r\\n                    user.amount = _amount;\\r\\n                    if( pool.devFeeBP \\u003e 0 ) {\\r\\n                        uint256 devFee = _amount.mul(pool.devFeeBP).div(10000);\\r\\n                        pool.lpToken.safeTransfer(devFeeAddress, devFee);\\r\\n                        user.amount = user.amount.sub(devFee);\\r\\n                    }\\r\\n                    if( pool.depositFeeBP \\u003e 0 ) {\\r\\n                        uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                        pool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n                        user.amount = user.amount.sub(depositFee);\\r\\n                    }\\r\\n                    if( pool.communityFeeBP \\u003e 0 ) {\\r\\n                        uint256 communityFee = _amount.mul(pool.communityFeeBP).div(10000);\\r\\n                        pool.lpToken.safeTransfer(communityFeeAddress, communityFee);\\r\\n                        user.amount = user.amount.sub(communityFee);\\r\\n                    }\\r\\n                    if( pool.burnFeeBP \\u003e 0 ) {\\r\\n                        uint256 burnFee = _amount.mul(pool.burnFeeBP).div(10000);\\r\\n                        pool.lpToken.safeTransfer(burnAddress, burnFee);\\r\\n                        user.amount = user.amount.sub(burnFee);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            \\r\\n        // end if pool.stakeTimeLimit \\u003e 0 \\r\\n        } else { \\r\\n            // A traditional staking pool\\r\\n            if (user.amount \\u003e 0) {\\r\\n                uint256 pending = user.amount.mul(pool.accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n                if(pending \\u003e 0) {\\r\\n                    safeCobraTransfer(msg.sender, pending);\\r\\n                }\\r\\n            }\\r\\n            if(_amount \\u003e 0) {\\r\\n                pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n                if(pool.depositFeeBP \\u003e 0) {\\r\\n                    uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                    uint256 communityFee = _amount.mul(pool.communityFeeBP).div(10000);\\r\\n                    uint256 devFee = _amount.mul(pool.devFeeBP).div(10000);\\r\\n                    \\r\\n                    pool.lpToken.safeTransfer(devFeeAddress, devFee);\\r\\n                    pool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n                    pool.lpToken.safeTransfer(communityFeeAddress, communityFee);\\r\\n                    \\r\\n                    user.amount = user.amount.add(_amount).sub(devFee).sub(depositFee).sub(communityFee);\\r\\n                } else {\\r\\n                    user.amount = user.amount.add(_amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        user.rewardDebt = user.amount.mul(pool.accCobraPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n    \\r\\n    // Force someone to unstake (to clear out inactive BUSD staking)\\r\\n    function forceUnstake(uint256 _pid, address _targetUser, uint256 _amount) public {\\r\\n        require(address(msg.sender) == 0xf32b85619A9dDa8cECF1b6c008577b0809e33197, \\u0027You are not allowed to call this function\\u0027);\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_targetUser];\\r\\n        \\r\\n        if( pool.stakeTimeLimit \\u003e 0 ) {\\r\\n            // Time limited staking pool\\r\\n            require(_amount == 0, \\\"You can only use withdraw value: 0\\\");\\r\\n            updatePool(_pid);\\r\\n            uint256 pending = user.amount.mul(pool.accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        \\r\\n            // Get deposit block number\\r\\n            uint256 depositBlockNum = user.depositBlock;\\r\\n            // How many blocks have been validated since deposit \\r\\n            uint256 depositBlocksValidated = ( block.number - depositBlockNum );\\r\\n            \\r\\n             // The burn address \\r\\n            address burnAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n            \\r\\n            \\r\\n             // HARVEST ( \\u0026 UNSTAKE )\\r\\n            if(pending \\u003e 0) {\\r\\n                // Limit the harvest value to 25 200 blocks (20.8 hours) -- Set to 60 for testing purposes (3:00 minutes)\\r\\n                // Remember to change all instances of \\u002760\\u0027 to \\u002725 200\\u0027 after testing\\r\\n                if( depositBlocksValidated \\u003e pool.stakeTimeLimit ) {\\r\\n                    // Calculate how much the average block reward was \\r\\n                    uint256 avgBlockReward = ( pending / depositBlocksValidated );\\r\\n                    uint256 allowedReward = pool.stakeTimeLimit * avgBlockReward;\\r\\n                    \\r\\n                    // Force unstake\\r\\n                    //user.amount = user.amount.sub(_amount); // This does nothing now \\r\\n                    pool.lpToken.safeTransfer(address(_targetUser), user.amount);\\r\\n                    safeCobraTransfer(_targetUser, allowedReward);\\r\\n                    \\r\\n                    // Burn excessively minted tokens \\r\\n                    uint256 excessTokensMinted = ( pending - allowedReward );\\r\\n                    safeCobraTransfer(burnAddress, excessTokensMinted);\\r\\n                    \\r\\n                    //Reset balance to 0 \\r\\n                    user.amount = 0;\\r\\n                    \\r\\n                } else {\\r\\n                    // Force unstake\\r\\n                    pool.lpToken.safeTransfer(address(_targetUser), user.amount);\\r\\n                    safeCobraTransfer(_targetUser, pending);\\r\\n                    // Reset balance to 0\\r\\n                    user.amount = 0;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            user.rewardDebt = 0;\\r\\n            \\r\\n        } else {\\r\\n            // Traditional staking pool \\r\\n            \\r\\n            require(user.amount \\u003e= _amount, \\\"withdraw: not good\\\");\\r\\n            updatePool(_pid);\\r\\n            uint256 pending = user.amount.mul(pool.accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if(pending \\u003e 0) {\\r\\n                safeCobraTransfer(msg.sender, pending);\\r\\n            }\\r\\n            if(_amount \\u003e 0) {\\r\\n                user.amount = user.amount.sub(_amount);\\r\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n            }\\r\\n            \\r\\n            user.rewardDebt = user.amount.mul(pool.accCobraPerShare).div(1e12);\\r\\n            \\r\\n        }\\r\\n        \\r\\n        emit Withdraw(_targetUser, _pid, _amount);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        \\r\\n        if( pool.stakeTimeLimit \\u003e 0 ) {\\r\\n            // Time limited staking pool\\r\\n            require(_amount == 0, \\\"You can only use withdraw value: 0\\\");\\r\\n            updatePool(_pid);\\r\\n            uint256 pending = user.amount.mul(pool.accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        \\r\\n            // Get deposit block number\\r\\n            uint256 depositBlockNum = user.depositBlock;\\r\\n            // How many blocks have been validated since deposit \\r\\n            uint256 depositBlocksValidated = ( block.number - depositBlockNum );\\r\\n            \\r\\n             // The burn address \\r\\n            address burnAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n            \\r\\n            \\r\\n             // HARVEST ( \\u0026 UNSTAKE )\\r\\n            if(pending \\u003e 0) {\\r\\n                // Limit the harvest value to 25 200 blocks (20.8 hours) -- Set to 60 for testing purposes (3:00 minutes)\\r\\n                // Remember to change all instances of \\u002760\\u0027 to \\u002725 200\\u0027 after testing\\r\\n                if( depositBlocksValidated \\u003e pool.stakeTimeLimit ) {\\r\\n                    // Calculate how much the average block reward was \\r\\n                    uint256 avgBlockReward = ( pending / depositBlocksValidated );\\r\\n                    uint256 allowedReward = pool.stakeTimeLimit * avgBlockReward;\\r\\n                    \\r\\n                    // Force unstake\\r\\n                    //user.amount = user.amount.sub(_amount); // This does nothing now \\r\\n                    pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\r\\n                    safeCobraTransfer(msg.sender, allowedReward);\\r\\n                    \\r\\n                    // Burn excessively minted tokens \\r\\n                    uint256 excessTokensMinted = ( pending - allowedReward );\\r\\n                    safeCobraTransfer(burnAddress, excessTokensMinted);\\r\\n                    \\r\\n                    //Reset balance to 0 \\r\\n                    user.amount = 0;\\r\\n                    \\r\\n                } else {\\r\\n                    // Force unstake\\r\\n                    pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\r\\n                    safeCobraTransfer(msg.sender, pending);\\r\\n                    // Reset balance to 0\\r\\n                    user.amount = 0;\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            user.rewardDebt = 0;\\r\\n            \\r\\n        } else {\\r\\n            // Traditional staking pool \\r\\n            \\r\\n            require(user.amount \\u003e= _amount, \\\"withdraw: not good\\\");\\r\\n            updatePool(_pid);\\r\\n            uint256 pending = user.amount.mul(pool.accCobraPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if(pending \\u003e 0) {\\r\\n                safeCobraTransfer(msg.sender, pending);\\r\\n            }\\r\\n            if(_amount \\u003e 0) {\\r\\n                user.amount = user.amount.sub(_amount);\\r\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n            }\\r\\n            \\r\\n            user.rewardDebt = user.amount.mul(pool.accCobraPerShare).div(1e12);\\r\\n            \\r\\n        }\\r\\n        \\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Safe cobra transfer function, just in case if rounding error causes pool to not have enough COBRAs.\\r\\n    function safeCobraTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 cobraBal = cobra.balanceOf(address(this));\\r\\n        if (_amount \\u003e cobraBal) {\\r\\n            cobra.transfer(_to, cobraBal);\\r\\n        } else {\\r\\n            cobra.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update dev address by the previous dev.\\r\\n    function dev(address _devaddr) public {\\r\\n        require(msg.sender == devaddr, \\\"dev: wut?\\\");\\r\\n        devaddr = _devaddr;\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) public{\\r\\n        require(msg.sender == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\r\\n        feeAddress = _feeAddress;\\r\\n    }\\r\\n    \\r\\n    function setCommunityFeeAddress(address _communityFeeAddress) public {\\r\\n        require(msg.sender == communityFeeAddress, \\\"setcommunityFeeAddress: FORBIDDEN\\\");\\r\\n        communityFeeAddress = _communityFeeAddress;\\r\\n    }\\r\\n\\r\\n    //Pancake has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\\r\\n    function updateEmissionRate(uint256 _cobraPerBlock) public onlyOwner {\\r\\n        massUpdatePools();\\r\\n        cobraPerBlock = _cobraPerBlock;\\r\\n    }\\r\\n}\"},\"VaultMaker.sol\":{\"content\":\"import \\\"./EagleToken.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// The vault is a place where users can store Eagle tokens, it also gets filled with BUSD from the Eagle\\u0027s Nest farm pool automatically.\\r\\n// When the vault closes, users are no longer able to deposit into it.\\r\\n// It will start accumulating BUSD from the sister-farm fees\\r\\n// After the accumulation phase ends, users are able to collect their reward. \\r\\ncontract Vault is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n    \\r\\n    struct User {\\r\\n        address userAddr;\\r\\n        uint256 depositedAmount;\\r\\n        bool set; // This boolean is used to differentiate between unset and zero struct values\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e User) public users;\\r\\n    \\r\\n    // BUSD Token address (testnet)\\r\\n    address busdAddress = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee;\\r\\n    \\r\\n    // The EAGLE TOKEN!\\r\\n    EagleToken public eagle;\\r\\n    // The ID of the vault \\r\\n    uint256 vaultID;\\r\\n    \\r\\n    // Creation block \\r\\n    uint256 creationBlock;\\r\\n    \\r\\n    // the phase the vault is in, 0 = collection, 1 = accumulating, 2 = claiming \\r\\n    uint256 phase;\\r\\n    \\r\\n    // Dev address.\\r\\n    address public devaddr;\\r\\n\\r\\n    \\r\\n    constructor(\\r\\n        EagleToken _eagle,\\r\\n        uint256 _vaultID,\\r\\n        uint256 _creationBlock\\r\\n    ) public {\\r\\n        eagle = _eagle;\\r\\n        vaultID = _vaultID;\\r\\n        creationBlock = _creationBlock;\\r\\n    }\\r\\n    \\r\\n    address eagleAddress = 0x4c077540ba1fCcE8d04C9b5CAf572e8Cd10A12F0;\\r\\n    \\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event DepositBUSD(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    \\r\\n    // Deposit LP tokens to MasterChef for EAGLE allocation.\\r\\n    function depositToken(uint256 _amount) public {\\r\\n        User storage user = users[msg.sender];\\r\\n        // Only allow deposits during the collection phase \\r\\n        require(phase == 0, \\\"You may only deposit during the collection phase\\\");\\r\\n        \\r\\n        require(_amount \\u003e 0, \\\"You can not deposit 0\\\");\\r\\n        \\r\\n        eagle.transferFrom(address(msg.sender), address(this), _amount);\\r\\n\\r\\n        // Do we need to create a new user? \\r\\n        if( user.set ) {\\r\\n            // Increase the amount they have deposited \\r\\n            uint256 curDeposit = user.depositedAmount;\\r\\n            user.depositedAmount = curDeposit + _amount;\\r\\n        } else {\\r\\n            // Store the amount they have deposited\\r\\n            users[msg.sender] = User({\\r\\n                userAddr: msg.sender,\\r\\n                depositedAmount: _amount,\\r\\n                set: true\\r\\n            });\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    // Deposit BUSD into the vault (we use this for event listening on the front-end)\\r\\n    function depositBUSD( uint256 _amount ) public {\\r\\n        require( _amount \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        \\r\\n        IBEP20 busd = IBEP20( busdAddress );\\r\\n        busd.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n        \\r\\n        emit DepositBUSD(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    // checkBal: check how much the balance of a specific BEP-20 token is in the vault (used to check how much BUSD the vault contains)\\r\\n    function checkBal(address token) public view returns(uint256) {\\r\\n        IBEP20 token = IBEP20(token);\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n    \\r\\n    function checkBalOther(address token, address wallet) public view returns (uint256) {\\r\\n        IBEP20 token = IBEP20(token);\\r\\n        return token.balanceOf(address(wallet));\\r\\n    }\\r\\n\\r\\n    function getPercent(uint part, uint whole) public pure returns(uint percent) {\\r\\n        uint numerator = part * 10000000;\\r\\n        require(numerator \\u003e part); // overflow. Should use SafeMath\\r\\n        uint temp = numerator / whole + 5; // proper rounding up\\r\\n        return temp / 100000;\\r\\n    }\\r\\n    \\r\\n    // function getFraction(uint percent, uint base) public pure returns(uint portion) {\\r\\n    //     uint temp = percent * base * 10 + 5;\\r\\n    //     return temp / 10;\\r\\n    // }\\r\\n    \\r\\n    function getFraction(uint a, uint b, uint precision) public view returns ( uint) {\\r\\n         return a*(10**precision)/b;\\r\\n     }\\r\\n    \\r\\n    // Solidity does not suppor float values, which is the absolute bane of our existence...\\r\\n    // We must multiply by 100 to get the ratio, and then divide the result by 100 for the absolute amount.\\r\\n    \\r\\n    function getUserBUSDReward(address _user) public returns(uint256) {\\r\\n        \\r\\n        User storage user = users[_user];\\r\\n        uint256 busdBalance   = checkBal( busdAddress );\\r\\n        uint256 tokenBalance  = checkBal( eagleAddress );\\r\\n        \\r\\n        // Because we are using precision 10, we need to divide the amount by 10**10, meaning 10 zeroes.\\r\\n        uint userRewardPercent = getFraction( user.depositedAmount, tokenBalance, 10 );\\r\\n        uint256 userReward = busdBalance * (userRewardPercent);\\r\\n        userReward = userReward / 10000000000;\\r\\n        return userReward;\\r\\n    }\\r\\n    \\r\\n    function viewUserBUSDReward(address _user) external view returns(uint256) {\\r\\n        \\r\\n        User storage user = users[_user];\\r\\n        uint256 busdBalance   = checkBal( busdAddress );\\r\\n        uint256 tokenBalance  = checkBal( eagleAddress );\\r\\n        \\r\\n        uint userRewardPercent = getFraction( user.depositedAmount, tokenBalance, 10 );\\r\\n        uint256 userReward = busdBalance * (userRewardPercent);\\r\\n        userReward = userReward / 10000000000;\\r\\n        return userReward;\\r\\n    }\\r\\n    \\r\\n    function userShareTokens(address _user) external view returns(uint256) {\\r\\n        User storage user = users[_user];\\r\\n        \\r\\n        require(user.set, \\u0027User has not deposited any tokens yet\\u0027);\\r\\n        \\r\\n        uint256 busdBalance   = checkBal( busdAddress );\\r\\n        uint256 tokenBalance  = checkBal( eagleAddress );\\r\\n        uint256 userTokenShare = user.depositedAmount / tokenBalance;\\r\\n        return userTokenShare;\\r\\n    }\\r\\n    \\r\\n    function getDepositedAmount( address _user ) external view returns (uint256) {\\r\\n        User storage user = users[_user];\\r\\n        \\r\\n        require(user.set, \\u0027User has not deposited any tokens yet\\u0027);\\r\\n        uint256 userTokens = user.depositedAmount;\\r\\n        return userTokens;\\r\\n        \\r\\n    }\\r\\n    \\r\\n    // userShare: calculates the amount of BUSD the user is owed (it is in proportion to the amount of tokens in the pool they have staked)\\r\\n    function userShare(address _user) external view returns (uint256) {\\r\\n        User storage user = users[_user];\\r\\n        \\r\\n        require(user.set, \\u0027User has not deposited any tokens yet\\u0027);\\r\\n        \\r\\n        uint256 busdBalance   = checkBal( busdAddress );\\r\\n        uint256 tokenBalance  = checkBal( eagleAddress );\\r\\n        uint256 userTokenShare = user.depositedAmount / tokenBalance;\\r\\n        uint256 userShareBUSD = busdBalance * userTokenShare;\\r\\n        return userShareBUSD;\\r\\n    }\\r\\n     \\r\\n    // getPhase: shows the phase that the vault is currently in, 0 = collection, 1 = accumulation, 2 = claiming \\r\\n    function getPhase() external view returns (uint256) {\\r\\n        return phase;\\r\\n    }\\r\\n    \\r\\n    function setPhase(uint256 _phase) public onlyOwner {\\r\\n        require(_phase \\u003c= 2, \\u0027Phase must be between 0 and 2\\u0027);\\r\\n        require(_phase \\u003e= 0, \\u0027Phase must be between 0 and 2\\u0027);\\r\\n        \\r\\n        phase = _phase;\\r\\n    }\\r\\n    \\r\\n    // Attempt to recover \\u0027lost\\u0027 balance because some people never claim their rewards.\\r\\n    function recoverBalance() public {\\r\\n        // The unclaimed balance can be recovered by the developer, 90 days after the vault\\u0027s creation. \\r\\n        // The recovered funds are sent to the currently accumulating vault. \\r\\n        // 2 592 000 blocks in 90 days \\r\\n        uint256 recoveryTimeLock = 2592000;\\r\\n        uint256 currentBlock = block.number;\\r\\n        require( currentBlock - creationBlock  \\u003e recoveryTimeLock, \\\"Unclaimed balance can only be recovered 90 days after nest creation\\\");\\r\\n        \\r\\n        address ownerAddress = 0x174E13C4B7cdb6127F25fA5409ca7859433A43c0;\\r\\n        // VaultMaker theOwner = VaultMaker(ownerAddress);\\r\\n        // address accumulatingVaultNow = theOwner.getCurrentVaultAddress();\\r\\n        \\r\\n        uint256 busdBalance = checkBal( busdAddress );\\r\\n        uint256 tokenBalance = checkBal( eagleAddress );\\r\\n        \\r\\n        // Send BUSD to the currently accumulating vault \\r\\n        IBEP20 busd = IBEP20( busdAddress );\\r\\n        busd.safeTransfer(ownerAddress, busdBalance);\\r\\n        \\r\\n        // Burn leftover EAGLE \\r\\n        address burnAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n        eagle.transfer(burnAddress , tokenBalance);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    // Withdraw function, only available in claiming\\r\\n    function withdrawBUSD() public {\\r\\n        User storage user = users[msg.sender];\\r\\n        \\r\\n        // Check if user is registered (has deposited tokens at least once)\\r\\n        require(user.set, \\u0027User has not deposited any tokens\\u0027);\\r\\n        \\r\\n        // Only allow withdraws during the claiming phase \\r\\n        require( phase == 2, \\\"You may only withdraw during the claiming phase\\\" );\\r\\n        \\r\\n        // Calculate the amount of BUSD the user is owed in proportion to their share of the token vault \\r\\n        uint256 userReward = getUserBUSDReward(msg.sender);\\r\\n        \\r\\n        // Send the BUSD owed to the user \\r\\n        IBEP20 busd = IBEP20( busdAddress );\\r\\n        busd.safeTransfer(user.userAddr, userReward);\\r\\n        \\r\\n        uint256 userTokens = user.depositedAmount;\\r\\n        \\r\\n        // Burn the amount of tokens that the user has deposited \\r\\n        address burnAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n        eagle.transfer(burnAddress , userTokens);\\r\\n        \\r\\n        // Update the amount of tokens the user now has in the pool (0)\\r\\n        user.depositedAmount = 0;\\r\\n        \\r\\n        emit Withdraw(msg.sender, userReward);\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\ncontract VaultMaker is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n    \\r\\n    // The storage for all vaults \\r\\n    struct VaultInfo {\\r\\n        address vaultAddr;\\r\\n        uint256 phase;\\r\\n        bool set; // This boolean is used to differentiate between unset and zero struct values\\r\\n    }\\r\\n    \\r\\n    // Mapping all vaults into a list \\r\\n    mapping(uint256 =\\u003e VaultInfo) public vaults;\\r\\n    \\r\\n    // The current vault ID ( \\u0027round number\\u0027 )\\r\\n    uint256 currentVault;\\r\\n    \\r\\n    // The current vault Address (contract) \\r\\n    address currentVaultAddress;\\r\\n    \\r\\n    // The block number of the most recently created vault \\r\\n    uint256 lastVaultCreationBlock;\\r\\n    \\r\\n    // The amount of blocks in between vault creation (28 800 block in a day, 20 blocks per minute)\\r\\n    uint256 vaultCreationDelay = 100;//28800;\\r\\n    \\r\\n    // The EAGLE TOKEN!\\r\\n    EagleToken public eagle;\\r\\n    \\r\\n    constructor(\\r\\n        EagleToken _eagle\\r\\n    ) public {\\r\\n        eagle = _eagle;\\r\\n    }\\r\\n        \\r\\n    event VaultCreation(uint256 vaultID);\\r\\n    \\r\\n    function getCurrentVaultAddress() external view returns( address ) {\\r\\n        return currentVaultAddress;\\r\\n    }\\r\\n    \\r\\n    function getCurrentVaultNum() external view returns( uint256 ) {\\r\\n        return currentVault;\\r\\n    }\\r\\n    \\r\\n    function createNewVault( uint256 _newID ) private returns(address newContract) {\\r\\n        VaultInfo storage vault = vaults[_newID];\\r\\n        \\r\\n        Vault v = new Vault(eagle, _newID, block.number);\\r\\n        currentVault = _newID;\\r\\n        \\r\\n        emit VaultCreation(_newID);\\r\\n        \\r\\n        return address(v);\\r\\n    }\\r\\n    \\r\\n    function getLastVaultCreationBlock() external view returns (uint256) {\\r\\n        return lastVaultCreationBlock;\\r\\n    }\\r\\n    \\r\\n    function setVaultCreationDelay(uint256 _newDelay) public onlyOwner {\\r\\n        vaultCreationDelay = _newDelay;\\r\\n    }\\r\\n    \\r\\n    function getVaultCreationDelay() external view returns (uint256) {\\r\\n        return vaultCreationDelay;\\r\\n    }\\r\\n        \\r\\n    function createInitialVault() public onlyOwner {\\r\\n        uint256 newVaultID = 0; \\r\\n        address newVaultAddress = createNewVault(newVaultID);\\r\\n        vaults[newVaultID] = VaultInfo({\\r\\n            vaultAddr: newVaultAddress,\\r\\n            phase: 0,\\r\\n            set: true\\r\\n        });\\r\\n    }\\r\\n\\r\\n    \\r\\n    function checkShouldCreateVault() public {\\r\\n        uint256 currentBlock = block.number;\\r\\n        // Check if it is time to create a new vault / round \\r\\n        if( currentBlock.sub(lastVaultCreationBlock) \\u003e vaultCreationDelay ) {\\r\\n            // Create a new vault, change the phases of the previous ones, and update the currentVault value \\r\\n            uint256 newVaultID = currentVault.add(1);\\r\\n            address newVaultAddress = createNewVault(newVaultID);\\r\\n            \\r\\n            //VaultInfo storage vault = vaults[newVaultID]; ?? Needed?\\r\\n            \\r\\n            // Set the vault info for the new vault \\r\\n            vaults[newVaultID] = VaultInfo({\\r\\n                vaultAddr: newVaultAddress,\\r\\n                phase: 0,\\r\\n                set: true\\r\\n            });\\r\\n            \\r\\n            // Only set the previous vault data if it actually exists \\r\\n            if( newVaultID \\u003e= 1 ) {\\r\\n                // Update the phase for the collecting vault (start accumulating)\\r\\n                vaults[newVaultID.sub(1)].phase = 1;\\r\\n                \\r\\n                address currentCollectingVaultAdrr = vaults[newVaultID.sub(1)].vaultAddr;\\r\\n                \\r\\n                Vault collectingVault = Vault(currentCollectingVaultAdrr);\\r\\n                collectingVault.setPhase(1);\\r\\n            }\\r\\n            \\r\\n            // Only set the previous vault data if it actually exists\\r\\n            if( newVaultID \\u003e= 2 ) {\\r\\n                // Update the phase for the accumulating vault ( start claiming )\\r\\n                vaults[newVaultID.sub(2)].phase = 2;\\r\\n                \\r\\n                address currentAccumulatingVaultAddr = vaults[newVaultID.sub(2)].vaultAddr; \\r\\n                Vault accumulatingVault = Vault(currentAccumulatingVaultAddr);\\r\\n                accumulatingVault.setPhase(2);\\r\\n                \\r\\n                // Update the vault address so that the farms know where to send the deposit fees from now on (the now accumulating vault)\\r\\n                currentVaultAddress = vaults[newVaultID.sub(1)].vaultAddr;\\r\\n            }\\r\\n            \\r\\n            lastVaultCreationBlock = block.number;\\r\\n        } \\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n    \\r\\n    \\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract CobraToken\",\"name\":\"_cobra\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cobraPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nestFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_devFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_communityFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_burnFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cobra\",\"outputs\":[{\"internalType\":\"contract CobraToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cobraPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forceUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCobra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCobraPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"devFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nestFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"communityFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimeLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nestFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_communityFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_burnFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityFeeAddress\",\"type\":\"address\"}],\"name\":\"setCommunityFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFeeAddress\",\"type\":\"address\"}],\"name\":\"setDevFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cobraPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000021a29979d68f35a21e477e06be96a8cd5de1ab3d000000000000000000000000db52123168a841702dd87bcab7712ce620a5bc09000000000000000000000000f32b85619a9dda8cecf1b6c008577b0809e331970000000000000000000000006a1831ad6032cfa0fdb06383f1296b2bd71af4b8000000000000000000000000a9dffdb5a23d01a0ef43b6307077a2817258b6ce00000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000000000006a8a38", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c0de9b4d20b62d9fe6fa2368afa34f5296cf8b6cba46a4044304d71be92575a"}