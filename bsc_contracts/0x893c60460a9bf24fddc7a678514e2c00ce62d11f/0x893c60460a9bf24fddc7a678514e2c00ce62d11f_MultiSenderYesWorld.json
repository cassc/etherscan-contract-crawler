{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.12;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract MultiSenderYesWorld{\r\n  \r\n  address public owner ;\r\n  address public contractAddr = address(this);\r\n  event Withdraw(address user, uint amount);\r\n  event sendMultiTokenEv(address caller, uint addrCnt);\r\n  event sendMultiBnbEv(address caller, uint addrCnt);\r\n  \r\n  event OwnershipTransferred(address user);\r\n  \r\n\r\n    constructor() {\r\n     owner = msg.sender;\r\n    }\r\n    receive() external payable {\r\n\r\n    }\r\n    function sendMultibnb(address[] memory recipients, uint256[] memory amounts) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n      \r\n        require(recipients.length > 0,\"Invalid recipients\");\r\n        require(recipients.length == amounts.length,\"amount and recipients count should be same\");\r\n        \r\n        uint256 length = recipients.length;\r\n        uint256 currentSum = 0;\r\n        uint256 bnbBalance = contractAddr.balance;\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 amount = amounts[i];\r\n            amount = amount*(10**10);\r\n            currentSum = currentSum + amount;\r\n        }\r\n        \r\n        require(bnbBalance >= currentSum, \"Insufficient Fund\");\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 amount = amounts[i];\r\n            amount = amount*(10**10);\r\n            payable(recipients[i]).transfer(amount);\r\n        }\r\n\r\n        emit sendMultiBnbEv(msg.sender, recipients.length);\r\n    }\r\n\r\n    //Multi send different token amount from contract\r\n    function sendMultiToken(address tokenAddrNew, address[] memory recipients, uint256[] memory amounts) external {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        ERC20 tokenAddrObj    = ERC20(tokenAddrNew);\r\n        require(recipients.length > 0,\"Invalid recipients\");\r\n        require(recipients.length == amounts.length,\"amount and recipients count should be same\");\r\n        \r\n        uint256 length = recipients.length;\r\n        uint256 currentSum = 0;\r\n        uint256 currentTokenBalance = tokenAddrObj.balanceOf(contractAddr);\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 amount = amounts[i];\r\n            amount = amount*(10**10);\r\n            currentSum = currentSum + amount;\r\n        }\r\n        \r\n        require(currentTokenBalance >= currentSum, \"Insufficient Fund\");\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 amount = amounts[i];\r\n            amount = amount*(10**10);\r\n            tokenAddrObj.transfer(recipients[i], amount);\r\n        }\r\n\r\n        emit sendMultiTokenEv(msg.sender, recipients.length);\r\n    }\r\n    \r\n    // Owner Token Withdraw    \r\n    // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        ERC20 _token = ERC20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function withdrawBnb(address to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        payable(to).transfer(amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    // Ownership Transfer\r\n    // Only owner can call this function\r\n    function transferOwnership(address to) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addrCnt\",\"type\":\"uint256\"}],\"name\":\"sendMultiBnbEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addrCnt\",\"type\":\"uint256\"}],\"name\":\"sendMultiTokenEv\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddrNew\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendMultiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendMultibnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSenderYesWorld", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://561123816ef3635efec77a4e395597524810b6e80a4029012b27c8a3e3e2e314"}