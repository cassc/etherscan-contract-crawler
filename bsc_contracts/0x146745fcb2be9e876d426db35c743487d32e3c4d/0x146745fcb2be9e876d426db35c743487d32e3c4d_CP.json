{"SourceCode": "// File: contracts/lib/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant ONE2 = 10**36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10**18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(10**18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).divCeil(d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).divCeil(target);\r\n    }\r\n\r\n    function powFloor(uint256 target, uint256 e) internal pure returns (uint256) {\r\n        if (e == 0) {\r\n            return 10 ** 18;\r\n        } else if (e == 1) {\r\n            return target;\r\n        } else {\r\n            uint p = powFloor(target, e.div(2));\r\n            p = p.mul(p) / (10**18);\r\n            if (e % 2 == 1) {\r\n                p = p.mul(target) / (10**18);\r\n            }\r\n            return p;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IDVM {\r\n    function init(\r\n        address maintainer,\r\n        address baseTokenAddress,\r\n        address quoteTokenAddress,\r\n        uint256 lpFeeRate,\r\n        address mtFeeRateModel,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n\r\n    function _MT_FEE_RATE_MODEL_() external returns (address);\r\n\r\n    function getVaultReserve() external returns (uint256 baseReserve, uint256 quoteReserve);\r\n\r\n    function sellBase(address to) external returns (uint256);\r\n\r\n    function sellQuote(address to) external returns (uint256);\r\n\r\n    function buyShares(address to) external returns (uint256,uint256,uint256);\r\n\r\n    function addressToShortString(address _addr) external pure returns (string memory);\r\n\r\n    function getMidPrice() external view returns (uint256 midPrice);\r\n\r\n    function sellShares(\r\n        uint256 shareAmount,\r\n        address to,\r\n        uint256 baseMinAmount,\r\n        uint256 quoteMinAmount,\r\n        bytes calldata data,\r\n        uint256 deadline\r\n    ) external  returns (uint256 baseAmount, uint256 quoteAmount);\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IDVMFactory {\r\n    function createDODOVendingMachine(\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external returns (address newVendingMachine);\r\n}\r\n\r\n\r\n/**\r\n * @title DODO VendingMachine Factory\r\n * @author DODO Breeder\r\n *\r\n * @notice Create And Register DVM Pools \r\n */\r\ncontract DVMFactory is InitializableOwnable {\r\n    // ============ Templates ============\r\n\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\r\n    address public _DEFAULT_MAINTAINER_;\r\n    address public _DVM_TEMPLATE_;\r\n\r\n    // ============ Registry ============\r\n\r\n    // base -> quote -> DVM address list\r\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\r\n    // creator -> DVM address list\r\n    mapping(address => address[]) public _USER_REGISTRY_;\r\n\r\n    // ============ Events ============\r\n\r\n    event NewDVM(\r\n        address baseToken,\r\n        address quoteToken,\r\n        address creator,\r\n        address dvm\r\n    );\r\n\r\n    event RemoveDVM(address dvm);\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address dvmTemplate,\r\n        address defaultMaintainer,\r\n        address defaultMtFeeRateModel\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _DVM_TEMPLATE_ = dvmTemplate;\r\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\r\n        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\r\n    }\r\n\r\n    function createDODOVendingMachine(\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external returns (address newVendingMachine) {\r\n        newVendingMachine = ICloneFactory(_CLONE_FACTORY_).clone(_DVM_TEMPLATE_);\r\n        {\r\n            IDVM(newVendingMachine).init(\r\n                _DEFAULT_MAINTAINER_,\r\n                baseToken,\r\n                quoteToken,\r\n                lpFeeRate,\r\n                _DEFAULT_MT_FEE_RATE_MODEL_,\r\n                i,\r\n                k,\r\n                isOpenTWAP\r\n            );\r\n        }\r\n        _REGISTRY_[baseToken][quoteToken].push(newVendingMachine);\r\n        _USER_REGISTRY_[tx.origin].push(newVendingMachine);\r\n        emit NewDVM(baseToken, quoteToken, tx.origin, newVendingMachine);\r\n    }\r\n\r\n    // ============ Admin Operation Functions ============\r\n\r\n    function updateDvmTemplate(address _newDVMTemplate) external onlyOwner {\r\n        _DVM_TEMPLATE_ = _newDVMTemplate;\r\n    }\r\n    \r\n    function updateDefaultMaintainer(address _newMaintainer) external onlyOwner {\r\n        _DEFAULT_MAINTAINER_ = _newMaintainer;\r\n    }\r\n\r\n    function addPoolByAdmin(\r\n        address creator,\r\n        address baseToken, \r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        _REGISTRY_[baseToken][quoteToken].push(pool);\r\n        _USER_REGISTRY_[creator].push(pool);\r\n        emit NewDVM(baseToken, quoteToken, creator, pool);\r\n    }\r\n\r\n    function removePoolByAdmin(\r\n        address creator,\r\n        address baseToken, \r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        address[] memory registryList = _REGISTRY_[baseToken][quoteToken];\r\n        for (uint256 i = 0; i < registryList.length; i++) {\r\n            if (registryList[i] == pool) {\r\n                registryList[i] = registryList[registryList.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _REGISTRY_[baseToken][quoteToken] = registryList;\r\n        _REGISTRY_[baseToken][quoteToken].pop();\r\n        address[] memory userRegistryList = _USER_REGISTRY_[creator];\r\n        for (uint256 i = 0; i < userRegistryList.length; i++) {\r\n            if (userRegistryList[i] == pool) {\r\n                userRegistryList[i] = userRegistryList[userRegistryList.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _USER_REGISTRY_[creator] = userRegistryList;\r\n        _USER_REGISTRY_[creator].pop();\r\n        emit RemoveDVM(pool);\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function getDODOPool(address baseToken, address quoteToken)\r\n        external\r\n        view\r\n        returns (address[] memory machines)\r\n    {\r\n        return _REGISTRY_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getDODOPoolBidirection(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address[] memory baseToken0Machines, address[] memory baseToken1Machines)\r\n    {\r\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\r\n    }\r\n\r\n    function getDODOPoolByUser(address user)\r\n        external\r\n        view\r\n        returns (address[] memory machines)\r\n    {\r\n        return _USER_REGISTRY_[user];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ReentrancyGuard\r\n * @author DODO Breeder\r\n *\r\n * @notice Protect functions from Reentrancy Attack\r\n */\r\ncontract ReentrancyGuard {\r\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\r\n    // zero-state of _ENTERED_ is false\r\n    bool private _ENTERED_;\r\n\r\n    modifier preventReentrant() {\r\n        require(!_ENTERED_, \"REENTRANT\");\r\n        _ENTERED_ = true;\r\n        _;\r\n        _ENTERED_ = false;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IPermissionManager {\r\n    function initOwner(address) external;\r\n\r\n    function isAllowed(address) external view returns (bool);\r\n}\r\n\r\ncontract PermissionManager is InitializableOwnable {\r\n    bool public _WHITELIST_MODE_ON_;\r\n\r\n    mapping(address => bool) internal _whitelist_;\r\n    mapping(address => bool) internal _blacklist_;\r\n\r\n    function isAllowed(address account) external view returns (bool) {\r\n        if (_WHITELIST_MODE_ON_) {\r\n            return _whitelist_[account];\r\n        } else {\r\n            return !_blacklist_[account];\r\n        }\r\n    }\r\n\r\n    function openBlacklistMode() external onlyOwner {\r\n        _WHITELIST_MODE_ON_ = false;\r\n    }\r\n\r\n    function openWhitelistMode() external onlyOwner {\r\n        _WHITELIST_MODE_ON_ = true;\r\n    }\r\n\r\n    function addToWhitelist(address account) external onlyOwner {\r\n        _whitelist_[account] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address account) external onlyOwner {\r\n        _whitelist_[account] = false;\r\n    }\r\n\r\n    function addToBlacklist(address account) external onlyOwner {\r\n        _blacklist_[account] = true;\r\n    }\r\n\r\n    function removeFromBlacklist(address account) external onlyOwner {\r\n        _blacklist_[account] = false;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IFeeRateImpl {\r\n    function getFeeRate(address pool, address trader) external view returns (uint256);\r\n}\r\n\r\ninterface IFeeRateModel {\r\n    function getFeeRate(address trader) external view returns (uint256);\r\n}\r\n\r\ncontract FeeRateModel is InitializableOwnable {\r\n    address public feeRateImpl;\r\n\r\n    function setFeeProxy(address _feeRateImpl) public onlyOwner {\r\n        feeRateImpl = _feeRateImpl;\r\n    }\r\n    \r\n    function getFeeRate(address trader) external view returns (uint256) {\r\n        if(feeRateImpl == address(0))\r\n            return 0;\r\n        return IFeeRateImpl(feeRateImpl).getFeeRate(msg.sender,trader);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CPStorage is InitializableOwnable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constant ============\r\n    \r\n    uint256 internal constant _SETTLEMENT_EXPIRE_ = 86400 * 7;\r\n    uint256 internal constant _SETTEL_FUND_ = 200 finney;\r\n    bool public _IS_OPEN_TWAP_ = false;\r\n    bool public _IS_OVERCAP_STOP = false;\r\n\r\n    bool public _FORCE_STOP_ = false;\r\n\r\n    // ============ Timeline ============\r\n\r\n    uint256 public _PHASE_BID_STARTTIME_;\r\n    uint256 public _PHASE_BID_ENDTIME_;\r\n    uint256 public _PHASE_CALM_ENDTIME_;\r\n    uint256 public _SETTLED_TIME_;\r\n    bool public _SETTLED_;\r\n\r\n    // ============ Core Address ============\r\n\r\n    IERC20 public _BASE_TOKEN_;\r\n    IERC20 public _QUOTE_TOKEN_;\r\n\r\n    // ============ Distribution Parameters ============\r\n\r\n    uint256 public _TOTAL_BASE_;\r\n    uint256 public _POOL_QUOTE_CAP_;\r\n\r\n    // ============ Settlement ============\r\n\r\n    uint256 public _QUOTE_RESERVE_;\r\n\r\n    uint256 public _UNUSED_BASE_;\r\n    uint256 public _UNUSED_QUOTE_;\r\n\r\n    uint256 public _TOTAL_SHARES_;\r\n    mapping(address => uint256) internal _SHARES_;\r\n    mapping(address => bool) public _CLAIMED_QUOTE_;\r\n\r\n    address public _POOL_FACTORY_;\r\n    address public _POOL_;\r\n    uint256 public _POOL_FEE_RATE_;\r\n    uint256 public _AVG_SETTLED_PRICE_;\r\n\r\n    // ============ Advanced Control ============\r\n\r\n    address public _MAINTAINER_;\r\n    IFeeRateModel public _MT_FEE_RATE_MODEL_;\r\n    IPermissionManager public _BIDDER_PERMISSION_;\r\n\r\n    // ============ PMM Parameters ============\r\n\r\n    uint256 public _K_;\r\n    uint256 public _I_;\r\n\r\n    // ============ LP Token Vesting && Claim Params ============\r\n\r\n    uint256 public _TOTAL_LP_AMOUNT_;\r\n    uint256 public _FREEZE_DURATION_;\r\n    uint256 public _VESTING_DURATION_;\r\n    uint256 public _CLIFF_RATE_;\r\n\r\n    uint256 public _TOKEN_CLAIM_DURATION_;\r\n    uint256 public _TOKEN_VESTING_DURATION_;\r\n    uint256 public _TOKEN_CLIFF_RATE_;\r\n    mapping(address => uint256) public _CLAIMED_BASE_TOKEN_;\r\n\r\n    // ============ Modifiers ============\r\n    modifier isNotForceStop() {\r\n        require(!_FORCE_STOP_, \"FORCE_STOP\");\r\n        _;\r\n    }\r\n\r\n    modifier phaseBid() {\r\n        require(\r\n            block.timestamp >= _PHASE_BID_STARTTIME_ && block.timestamp < _PHASE_BID_ENDTIME_,\r\n            \"NOT_PHASE_BID\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier phaseCalm() {\r\n        require(\r\n            block.timestamp >= _PHASE_BID_ENDTIME_ && block.timestamp < _PHASE_CALM_ENDTIME_,\r\n            \"NOT_PHASE_CALM\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier phaseBidOrCalm() {\r\n        require(\r\n            block.timestamp >= _PHASE_BID_STARTTIME_ && block.timestamp < _PHASE_CALM_ENDTIME_,\r\n            \"NOT_PHASE_BID_OR_CALM\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier phaseSettlement() {\r\n        require(block.timestamp >= _PHASE_CALM_ENDTIME_, \"NOT_PHASE_EXE\");\r\n        _;\r\n    }\r\n\r\n    modifier phaseVesting() {\r\n        require(_SETTLED_, \"NOT_VESTING\");\r\n        _;\r\n    }\r\n\r\n    function forceStop() external onlyOwner {\r\n        require(block.timestamp < _PHASE_BID_STARTTIME_, \"CP_ALREADY_STARTED\");\r\n        _FORCE_STOP_ = true;\r\n        _TOTAL_BASE_ = 0;\r\n        uint256 baseAmount = _BASE_TOKEN_.balanceOf(address(this));\r\n        _BASE_TOKEN_.transfer(_OWNER_, baseAmount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title DODOMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for complex calculating. Including ONE Integration and TWO Quadratic solutions\r\n */\r\nlibrary DODOMath {\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n        Integrate dodo curve from V1 to V2\r\n        require V0>=V1>=V2>0\r\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\r\n        let V1-V2=delta\r\n        res = i*delta*(1-k+k(V0^2/V1/V2))\r\n\r\n        i is the price of V-res trading pair\r\n\r\n        support k=1 & k=0 case\r\n\r\n        [round down]\r\n    */\r\n    function _GeneralIntegrate(\r\n        uint256 V0,\r\n        uint256 V1,\r\n        uint256 V2,\r\n        uint256 i,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        require(V0 > 0, \"TARGET_IS_ZERO\");\r\n        uint256 fairAmount = i.mul(V1.sub(V2)); // i*delta\r\n        if (k == 0) {\r\n            return fairAmount.div(DecimalMath.ONE);\r\n        }\r\n        uint256 V0V0V1V2 = DecimalMath.divFloor(V0.mul(V0).div(V1), V2);\r\n        uint256 penalty = DecimalMath.mulFloor(k, V0V0V1V2); // k(V0^2/V1/V2)\r\n        return DecimalMath.ONE.sub(k).add(penalty).mul(fairAmount).div(DecimalMath.ONE2);\r\n    }\r\n\r\n    /*\r\n        Follow the integration function above\r\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\r\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\r\n\r\n        i is the price of delta-V trading pair\r\n        give out target of V\r\n\r\n        support k=1 & k=0 case\r\n\r\n        [round down]\r\n    */\r\n    function _SolveQuadraticFunctionForTarget(\r\n        uint256 V1,\r\n        uint256 delta,\r\n        uint256 i,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        if (k == 0) {\r\n            return V1.add(DecimalMath.mulFloor(i, delta));\r\n        }\r\n        // V0 = V1*(1+(sqrt-1)/2k)\r\n        // sqrt = \u221a(1+4kidelta/V1)\r\n        // premium = 1+(sqrt-1)/2k\r\n        // uint256 sqrt = (4 * k).mul(i).mul(delta).div(V1).add(DecimalMath.ONE2).sqrt();\r\n\r\n        if (V1 == 0) {\r\n            return 0;\r\n        }\r\n        uint256 sqrt;\r\n        uint256 ki = (4 * k).mul(i);\r\n        if (ki == 0) {\r\n            sqrt = DecimalMath.ONE;\r\n        } else if ((ki * delta) / ki == delta) {\r\n            sqrt = (ki * delta).div(V1).add(DecimalMath.ONE2).sqrt();\r\n        } else {\r\n            sqrt = ki.div(V1).mul(delta).add(DecimalMath.ONE2).sqrt();\r\n        }\r\n        uint256 premium =\r\n            DecimalMath.divFloor(sqrt.sub(DecimalMath.ONE), k * 2).add(DecimalMath.ONE);\r\n        // V0 is greater than or equal to V1 according to the solution\r\n        return DecimalMath.mulFloor(V1, premium);\r\n    }\r\n\r\n    /*\r\n        Follow the integration expression above, we have:\r\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\r\n        Given Q1 and deltaB, solve Q2\r\n        This is a quadratic function and the standard version is\r\n        aQ2^2 + bQ2 + c = 0, where\r\n        a=1-k\r\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\r\n        c=-kQ0^2 \r\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\r\n        note: another root is negative, abondan\r\n\r\n        if deltaBSig=true, then Q2>Q1, user sell Q and receive B\r\n        if deltaBSig=false, then Q2<Q1, user sell B and receive Q\r\n        return |Q1-Q2|\r\n\r\n        as we only support sell amount as delta, the deltaB is always negative\r\n        the input ideltaB is actually -ideltaB in the equation\r\n\r\n        i is the price of delta-V trading pair\r\n\r\n        support k=1 & k=0 case\r\n\r\n        [round down]\r\n    */\r\n    function _SolveQuadraticFunctionForTrade(\r\n        uint256 V0,\r\n        uint256 V1,\r\n        uint256 delta,\r\n        uint256 i,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        require(V0 > 0, \"TARGET_IS_ZERO\");\r\n        if (delta == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (k == 0) {\r\n            return DecimalMath.mulFloor(i, delta) > V1 ? V1 : DecimalMath.mulFloor(i, delta);\r\n        }\r\n\r\n        if (k == DecimalMath.ONE) {\r\n            // if k==1\r\n            // Q2=Q1/(1+ideltaBQ1/Q0/Q0)\r\n            // temp = ideltaBQ1/Q0/Q0\r\n            // Q2 = Q1/(1+temp)\r\n            // Q1-Q2 = Q1*(1-1/(1+temp)) = Q1*(temp/(1+temp))\r\n            // uint256 temp = i.mul(delta).mul(V1).div(V0.mul(V0));\r\n            uint256 temp;\r\n            uint256 idelta = i.mul(delta);\r\n            if (idelta == 0) {\r\n                temp = 0;\r\n            } else if ((idelta * V1) / idelta == V1) {\r\n                temp = (idelta * V1).div(V0.mul(V0));\r\n            } else {\r\n                temp = delta.mul(V1).div(V0).mul(i).div(V0);\r\n            }\r\n            return V1.mul(temp).div(temp.add(DecimalMath.ONE));\r\n        }\r\n\r\n        // calculate -b value and sig\r\n        // b = kQ0^2/Q1-i*deltaB-(1-k)Q1\r\n        // part1 = (1-k)Q1 >=0\r\n        // part2 = kQ0^2/Q1-i*deltaB >=0\r\n        // bAbs = abs(part1-part2)\r\n        // if part1>part2 => b is negative => bSig is false\r\n        // if part2>part1 => b is positive => bSig is true\r\n        uint256 part2 = k.mul(V0).div(V1).mul(V0).add(i.mul(delta)); // kQ0^2/Q1-i*deltaB\r\n        uint256 bAbs = DecimalMath.ONE.sub(k).mul(V1); // (1-k)Q1\r\n\r\n        bool bSig;\r\n        if (bAbs >= part2) {\r\n            bAbs = bAbs - part2;\r\n            bSig = false;\r\n        } else {\r\n            bAbs = part2 - bAbs;\r\n            bSig = true;\r\n        }\r\n        bAbs = bAbs.div(DecimalMath.ONE);\r\n\r\n        // calculate sqrt\r\n        uint256 squareRoot =\r\n            DecimalMath.mulFloor(\r\n                DecimalMath.ONE.sub(k).mul(4),\r\n                DecimalMath.mulFloor(k, V0).mul(V0)\r\n            ); // 4(1-k)kQ0^2\r\n        squareRoot = bAbs.mul(bAbs).add(squareRoot).sqrt(); // sqrt(b*b+4(1-k)kQ0*Q0)\r\n\r\n        // final res\r\n        uint256 denominator = DecimalMath.ONE.sub(k).mul(2); // 2(1-k)\r\n        uint256 numerator;\r\n        if (bSig) {\r\n            numerator = squareRoot.sub(bAbs);\r\n        } else {\r\n            numerator = bAbs.add(squareRoot);\r\n        }\r\n\r\n        uint256 V2 = DecimalMath.divCeil(numerator, denominator);\r\n        if (V2 > V1) {\r\n            return 0;\r\n        } else {\r\n            return V1 - V2;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pricing\r\n * @author DODO Breeder\r\n *\r\n * @notice DODO Pricing model\r\n */\r\n\r\nlibrary PMMPricing {\r\n    using SafeMath for uint256;\r\n\r\n    enum RState {ONE, ABOVE_ONE, BELOW_ONE}\r\n\r\n    struct PMMState {\r\n        uint256 i;\r\n        uint256 K;\r\n        uint256 B;\r\n        uint256 Q;\r\n        uint256 B0;\r\n        uint256 Q0;\r\n        RState R;\r\n    }\r\n\r\n    // ============ buy & sell ============\r\n\r\n    function sellBaseToken(PMMState memory state, uint256 payBaseAmount)\r\n        internal\r\n        pure\r\n        returns (uint256 receiveQuoteAmount, RState newR)\r\n    {\r\n        if (state.R == RState.ONE) {\r\n            // case 1: R=1\r\n            // R falls below one\r\n            receiveQuoteAmount = _ROneSellBaseToken(state, payBaseAmount);\r\n            newR = RState.BELOW_ONE;\r\n        } else if (state.R == RState.ABOVE_ONE) {\r\n            uint256 backToOnePayBase = state.B0.sub(state.B);\r\n            uint256 backToOneReceiveQuote = state.Q.sub(state.Q0);\r\n            // case 2: R>1\r\n            // complex case, R status depends on trading amount\r\n            if (payBaseAmount < backToOnePayBase) {\r\n                // case 2.1: R status do not change\r\n                receiveQuoteAmount = _RAboveSellBaseToken(state, payBaseAmount);\r\n                newR = RState.ABOVE_ONE;\r\n                if (receiveQuoteAmount > backToOneReceiveQuote) {\r\n                    // [Important corner case!] may enter this branch when some precision problem happens. And consequently contribute to negative spare quote amount\r\n                    // to make sure spare quote>=0, mannually set receiveQuote=backToOneReceiveQuote\r\n                    receiveQuoteAmount = backToOneReceiveQuote;\r\n                }\r\n            } else if (payBaseAmount == backToOnePayBase) {\r\n                // case 2.2: R status changes to ONE\r\n                receiveQuoteAmount = backToOneReceiveQuote;\r\n                newR = RState.ONE;\r\n            } else {\r\n                // case 2.3: R status changes to BELOW_ONE\r\n                receiveQuoteAmount = backToOneReceiveQuote.add(\r\n                    _ROneSellBaseToken(state, payBaseAmount.sub(backToOnePayBase))\r\n                );\r\n                newR = RState.BELOW_ONE;\r\n            }\r\n        } else {\r\n            // state.R == RState.BELOW_ONE\r\n            // case 3: R<1\r\n            receiveQuoteAmount = _RBelowSellBaseToken(state, payBaseAmount);\r\n            newR = RState.BELOW_ONE;\r\n        }\r\n    }\r\n\r\n    function sellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\r\n        internal\r\n        pure\r\n        returns (uint256 receiveBaseAmount, RState newR)\r\n    {\r\n        if (state.R == RState.ONE) {\r\n            receiveBaseAmount = _ROneSellQuoteToken(state, payQuoteAmount);\r\n            newR = RState.ABOVE_ONE;\r\n        } else if (state.R == RState.ABOVE_ONE) {\r\n            receiveBaseAmount = _RAboveSellQuoteToken(state, payQuoteAmount);\r\n            newR = RState.ABOVE_ONE;\r\n        } else {\r\n            uint256 backToOnePayQuote = state.Q0.sub(state.Q);\r\n            uint256 backToOneReceiveBase = state.B.sub(state.B0);\r\n            if (payQuoteAmount < backToOnePayQuote) {\r\n                receiveBaseAmount = _RBelowSellQuoteToken(state, payQuoteAmount);\r\n                newR = RState.BELOW_ONE;\r\n                if (receiveBaseAmount > backToOneReceiveBase) {\r\n                    receiveBaseAmount = backToOneReceiveBase;\r\n                }\r\n            } else if (payQuoteAmount == backToOnePayQuote) {\r\n                receiveBaseAmount = backToOneReceiveBase;\r\n                newR = RState.ONE;\r\n            } else {\r\n                receiveBaseAmount = backToOneReceiveBase.add(\r\n                    _ROneSellQuoteToken(state, payQuoteAmount.sub(backToOnePayQuote))\r\n                );\r\n                newR = RState.ABOVE_ONE;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ============ R = 1 cases ============\r\n\r\n    function _ROneSellBaseToken(PMMState memory state, uint256 payBaseAmount)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 // receiveQuoteToken\r\n        )\r\n    {\r\n        // in theory Q2 <= targetQuoteTokenAmount\r\n        // however when amount is close to 0, precision problems may cause Q2 > targetQuoteTokenAmount\r\n        return\r\n            DODOMath._SolveQuadraticFunctionForTrade(\r\n                state.Q0,\r\n                state.Q0,\r\n                payBaseAmount,\r\n                state.i,\r\n                state.K\r\n            );\r\n    }\r\n\r\n    function _ROneSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 // receiveBaseToken\r\n        )\r\n    {\r\n        return\r\n            DODOMath._SolveQuadraticFunctionForTrade(\r\n                state.B0,\r\n                state.B0,\r\n                payQuoteAmount,\r\n                DecimalMath.reciprocalFloor(state.i),\r\n                state.K\r\n            );\r\n    }\r\n\r\n    // ============ R < 1 cases ============\r\n\r\n    function _RBelowSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 // receiveBaseToken\r\n        )\r\n    {\r\n        return\r\n            DODOMath._GeneralIntegrate(\r\n                state.Q0,\r\n                state.Q.add(payQuoteAmount),\r\n                state.Q,\r\n                DecimalMath.reciprocalFloor(state.i),\r\n                state.K\r\n            );\r\n    }\r\n\r\n    function _RBelowSellBaseToken(PMMState memory state, uint256 payBaseAmount)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 // receiveQuoteToken\r\n        )\r\n    {\r\n        return\r\n            DODOMath._SolveQuadraticFunctionForTrade(\r\n                state.Q0,\r\n                state.Q,\r\n                payBaseAmount,\r\n                state.i,\r\n                state.K\r\n            );\r\n    }\r\n\r\n    // ============ R > 1 cases ============\r\n\r\n    function _RAboveSellBaseToken(PMMState memory state, uint256 payBaseAmount)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 // receiveQuoteToken\r\n        )\r\n    {\r\n        return\r\n            DODOMath._GeneralIntegrate(\r\n                state.B0,\r\n                state.B.add(payBaseAmount),\r\n                state.B,\r\n                state.i,\r\n                state.K\r\n            );\r\n    }\r\n\r\n    function _RAboveSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 // receiveBaseToken\r\n        )\r\n    {\r\n        return\r\n            DODOMath._SolveQuadraticFunctionForTrade(\r\n                state.B0,\r\n                state.B,\r\n                payQuoteAmount,\r\n                DecimalMath.reciprocalFloor(state.i),\r\n                state.K\r\n            );\r\n    }\r\n\r\n    // ============ Helper functions ============\r\n\r\n    function adjustedTarget(PMMState memory state) internal pure {\r\n        if (state.R == RState.BELOW_ONE) {\r\n            state.Q0 = DODOMath._SolveQuadraticFunctionForTarget(\r\n                state.Q,\r\n                state.B.sub(state.B0),\r\n                state.i,\r\n                state.K\r\n            );\r\n        } else if (state.R == RState.ABOVE_ONE) {\r\n            state.B0 = DODOMath._SolveQuadraticFunctionForTarget(\r\n                state.B,\r\n                state.Q.sub(state.Q0),\r\n                DecimalMath.reciprocalFloor(state.i),\r\n                state.K\r\n            );\r\n        }\r\n    }\r\n\r\n    function getMidPrice(PMMState memory state) internal pure returns (uint256) {\r\n        if (state.R == RState.BELOW_ONE) {\r\n            uint256 R = DecimalMath.divFloor(state.Q0.mul(state.Q0).div(state.Q), state.Q);\r\n            R = DecimalMath.ONE.sub(state.K).add(DecimalMath.mulFloor(state.K, R));\r\n            return DecimalMath.divFloor(state.i, R);\r\n        } else {\r\n            uint256 R = DecimalMath.divFloor(state.B0.mul(state.B0).div(state.B), state.B);\r\n            R = DecimalMath.ONE.sub(state.K).add(DecimalMath.mulFloor(state.K, R));\r\n            return DecimalMath.mulFloor(state.i, R);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IDODOCallee {\r\n    function DVMSellShareCall(\r\n        address sender,\r\n        uint256 burnShareAmount,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function DVMFlashLoanCall(\r\n        address sender,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function DPPFlashLoanCall(\r\n        address sender,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function DSPFlashLoanCall(\r\n        address sender,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function CPCancelCall(\r\n        address sender,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n\tfunction CPClaimBidCall(\r\n        address sender,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function NFTRedeemCall(\r\n        address payable assetTo,\r\n        uint256 quoteAmount,\r\n        bytes calldata\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CPFunding is CPStorage {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    // ============ Events ============\r\n    \r\n    event Bid(address to, uint256 amount, uint256 fee);\r\n    event Cancel(address to,uint256 amount);\r\n    event Settle();\r\n\r\n    // ============ BID & CALM PHASE ============\r\n    \r\n    modifier isBidderAllow(address bidder) {\r\n        require(_BIDDER_PERMISSION_.isAllowed(bidder), \"BIDDER_NOT_ALLOWED\");\r\n        if(_IS_OVERCAP_STOP) {\r\n            require(_QUOTE_TOKEN_.balanceOf(address(this)) <= _POOL_QUOTE_CAP_, \"ALREADY_OVER_CAP\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function bid(address to) external isNotForceStop phaseBid preventReentrant isBidderAllow(to) {\r\n        uint256 input = _getQuoteInput();\r\n        uint256 mtFee = DecimalMath.mulFloor(input, _MT_FEE_RATE_MODEL_.getFeeRate(to));\r\n        _transferQuoteOut(_MAINTAINER_, mtFee);\r\n        _mintShares(to, input.sub(mtFee));\r\n        _sync();\r\n        emit Bid(to, input, mtFee);\r\n    }\r\n\r\n    function cancel(address to, uint256 amount, bytes calldata data) external phaseBidOrCalm preventReentrant {\r\n        require(_SHARES_[msg.sender] >= amount, \"SHARES_NOT_ENOUGH\");\r\n        _burnShares(msg.sender, amount);\r\n        _transferQuoteOut(to, amount);\r\n        _sync();\r\n\r\n        if(data.length > 0){\r\n            IDODOCallee(to).CPCancelCall(msg.sender,amount,data);\r\n        }\r\n\r\n        emit Cancel(msg.sender,amount);\r\n    }\r\n\r\n    function _mintShares(address to, uint256 amount) internal {\r\n        _SHARES_[to] = _SHARES_[to].add(amount);\r\n        _TOTAL_SHARES_ = _TOTAL_SHARES_.add(amount);\r\n    }\r\n\r\n    function _burnShares(address from, uint256 amount) internal {\r\n        _SHARES_[from] = _SHARES_[from].sub(amount);\r\n        _TOTAL_SHARES_ = _TOTAL_SHARES_.sub(amount);\r\n    }\r\n\r\n    // ============ SETTLEMENT ============\r\n\r\n    function settle() external isNotForceStop phaseSettlement preventReentrant {\r\n        _settle();\r\n\r\n        (uint256 poolBase, uint256 poolQuote, uint256 poolI, uint256 unUsedBase, uint256 unUsedQuote) = getSettleResult();\r\n        _UNUSED_BASE_ = unUsedBase;\r\n        _UNUSED_QUOTE_ = unUsedQuote;\r\n\r\n        address _poolBaseToken;\r\n        address _poolQuoteToken;\r\n\r\n        if (_UNUSED_BASE_ > poolBase) {\r\n            _poolBaseToken = address(_QUOTE_TOKEN_);\r\n            _poolQuoteToken = address(_BASE_TOKEN_);\r\n        } else {\r\n            _poolBaseToken = address(_BASE_TOKEN_);\r\n            _poolQuoteToken = address(_QUOTE_TOKEN_);\r\n        }\r\n\r\n        _POOL_ = IDVMFactory(_POOL_FACTORY_).createDODOVendingMachine(\r\n            _poolBaseToken,\r\n            _poolQuoteToken,\r\n            _POOL_FEE_RATE_,\r\n            poolI,\r\n            DecimalMath.ONE,\r\n            _IS_OPEN_TWAP_\r\n        );\r\n\r\n        uint256 avgPrice = unUsedBase == 0 ? _I_ : DecimalMath.divCeil(poolQuote, unUsedBase);\r\n        _AVG_SETTLED_PRICE_ = avgPrice;\r\n\r\n        _transferBaseOut(_POOL_, poolBase);\r\n        _transferQuoteOut(_POOL_, poolQuote);\r\n\r\n        (_TOTAL_LP_AMOUNT_, ,) = IDVM(_POOL_).buyShares(address(this));\r\n\r\n        msg.sender.transfer(_SETTEL_FUND_);\r\n\r\n        emit Settle();\r\n    }\r\n\r\n    // in case something wrong with base token contract\r\n    function emergencySettle() external isNotForceStop phaseSettlement preventReentrant {\r\n        require(block.timestamp >= _PHASE_CALM_ENDTIME_.add(_SETTLEMENT_EXPIRE_), \"NOT_EMERGENCY\");\r\n        _settle();\r\n        _UNUSED_QUOTE_ = _QUOTE_TOKEN_.balanceOf(address(this));\r\n    }\r\n\r\n    function _settle() internal {\r\n        require(!_SETTLED_, \"ALREADY_SETTLED\");\r\n        _SETTLED_ = true;\r\n        _SETTLED_TIME_ = block.timestamp;\r\n    }\r\n\r\n    // ============ Pricing ============\r\n\r\n    function getSettleResult() public view returns (uint256 poolBase, uint256 poolQuote, uint256 poolI, uint256 unUsedBase, uint256 unUsedQuote) {\r\n        poolQuote = _QUOTE_TOKEN_.balanceOf(address(this));\r\n        if (poolQuote > _POOL_QUOTE_CAP_) {\r\n            poolQuote = _POOL_QUOTE_CAP_;\r\n        }\r\n        (uint256 soldBase,) = PMMPricing.sellQuoteToken(_getPMMState(), poolQuote);\r\n        poolBase = _TOTAL_BASE_.sub(soldBase);\r\n\r\n        unUsedQuote = _QUOTE_TOKEN_.balanceOf(address(this)).sub(poolQuote);\r\n        unUsedBase = _BASE_TOKEN_.balanceOf(address(this)).sub(poolBase);\r\n\r\n        // Try to make midPrice equal to avgPrice\r\n        // k=1, If quote and base are not balanced, one side must be cut off\r\n        // DVM truncated quote, but if more quote than base entering the pool, we need set the quote to the base\r\n\r\n        // m = avgPrice\r\n        // i = m (1-quote/(m*base))\r\n        // if quote = m*base i = 1\r\n        // if quote > m*base reverse\r\n        uint256 avgPrice = unUsedBase == 0 ? _I_ : DecimalMath.divCeil(poolQuote, unUsedBase);\r\n        uint256 baseDepth = DecimalMath.mulFloor(avgPrice, poolBase);\r\n\r\n        if (poolQuote == 0) {\r\n            // ask side only DVM\r\n            poolI = _I_;\r\n        } else if (unUsedBase== poolBase) {\r\n            // standard bonding curve\r\n            poolI = 1;\r\n        } else if (unUsedBase < poolBase) {\r\n            // poolI up round\r\n            uint256 ratio = DecimalMath.ONE.sub(DecimalMath.divFloor(poolQuote, baseDepth));\r\n            poolI = avgPrice.mul(ratio).mul(ratio).divCeil(DecimalMath.ONE2);\r\n        } else if (unUsedBase > poolBase) {\r\n            // poolI down round\r\n            uint256 ratio = DecimalMath.ONE.sub(DecimalMath.divCeil(baseDepth, poolQuote));\r\n            poolI = ratio.mul(ratio).div(avgPrice);\r\n        }\r\n    }\r\n\r\n    function _getPMMState() internal view returns (PMMPricing.PMMState memory state) {\r\n        state.i = _I_;\r\n        state.K = _K_;\r\n        state.B = _TOTAL_BASE_;\r\n        state.Q = 0;\r\n        state.B0 = state.B;\r\n        state.Q0 = 0;\r\n        state.R = PMMPricing.RState.ONE;\r\n    }\r\n\r\n    function getExpectedAvgPrice() external view returns (uint256) {\r\n        require(!_SETTLED_, \"ALREADY_SETTLED\");\r\n        (uint256 poolBase, uint256 poolQuote, , , ) = getSettleResult();\r\n        return DecimalMath.divCeil(poolQuote, _BASE_TOKEN_.balanceOf(address(this)).sub(poolBase));\r\n    }\r\n\r\n    // ============ Asset In ============\r\n\r\n    function _getQuoteInput() internal view returns (uint256 input) {\r\n        return _QUOTE_TOKEN_.balanceOf(address(this)).sub(_QUOTE_RESERVE_);\r\n    }\r\n\r\n    // ============ Set States ============\r\n\r\n    function _sync() internal {\r\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\r\n        if (quoteBalance != _QUOTE_RESERVE_) {\r\n            _QUOTE_RESERVE_ = quoteBalance;\r\n        }\r\n    }\r\n\r\n    // ============ Asset Out ============\r\n\r\n    function _transferBaseOut(address to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            _BASE_TOKEN_.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function _transferQuoteOut(address to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            _QUOTE_TOKEN_.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function getShares(address user) external view returns (uint256) {\r\n        return _SHARES_[user];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CPVesting\r\n * @author DODO Breeder\r\n *\r\n * @notice Lock Token and release it linearly\r\n */\r\n\r\ncontract CPVesting is CPFunding {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ============ Events ============\r\n    \r\n    event ClaimBaseToken(address user, uint256 baseAmount);\r\n    event ClaimQuoteToken(address user, uint256 quoteAmount);\r\n    event ClaimLP(uint256 amount);\r\n\r\n\r\n    // ================ Modifiers ================\r\n\r\n    modifier afterSettlement() {\r\n        require(_SETTLED_, \"NOT_SETTLED\");\r\n        _;\r\n    }\r\n\r\n    modifier afterFreeze() {\r\n        require(_SETTLED_ && block.timestamp >= _SETTLED_TIME_.add(_FREEZE_DURATION_), \"FREEZED\");\r\n        _;\r\n    }\r\n\r\n    modifier afterClaimFreeze() {\r\n        require(_SETTLED_ && block.timestamp >= _SETTLED_TIME_.add(_TOKEN_CLAIM_DURATION_), \"CLAIM_FREEZED\");\r\n        _;\r\n    }\r\n\r\n    // ============ Bidder Functions ============\r\n\r\n    function bidderClaim(address to, bytes calldata data) external {\r\n        if(_SETTLED_) {\r\n            _claimQuoteToken(to, data);\r\n        }\r\n\r\n        if(_SETTLED_ && block.timestamp >= _SETTLED_TIME_.add(_TOKEN_CLAIM_DURATION_)) {\r\n            _claimBaseToken(to);\r\n        }\r\n    }\r\n\r\n    function _claimQuoteToken(address to,bytes calldata data) internal {\r\n        // require(!_CLAIMED_QUOTE_[msg.sender], \"ALREADY_CLAIMED_FUND\");\r\n        if(_CLAIMED_QUOTE_[msg.sender]) return;\r\n\r\n        _CLAIMED_QUOTE_[msg.sender] = true;\r\n\r\n\t\tuint256 quoteAmount = _UNUSED_QUOTE_.mul(_SHARES_[msg.sender]).div(_TOTAL_SHARES_);\r\n\r\n        _transferQuoteOut(to, quoteAmount);\r\n\r\n\t\tif(data.length>0){\r\n\t\t\tIDODOCallee(to).CPClaimBidCall(msg.sender,0,quoteAmount,data);\r\n\t\t}\r\n\r\n        emit ClaimQuoteToken(msg.sender, quoteAmount);\r\n    }\r\n\r\n    function _claimBaseToken(address to) internal {\r\n        uint256 claimableBaseAmount = getClaimableBaseToken(msg.sender);\r\n        _CLAIMED_BASE_TOKEN_[msg.sender] = _CLAIMED_BASE_TOKEN_[msg.sender].add(claimableBaseAmount);\r\n        _transferBaseOut(to, claimableBaseAmount);\r\n        emit ClaimBaseToken(msg.sender, claimableBaseAmount);\r\n    }\r\n\r\n    function getClaimableBaseToken(address user) public view afterClaimFreeze returns (uint256) {\r\n        uint256 baseTotalAmount = _UNUSED_BASE_.mul(_SHARES_[user]).div(_TOTAL_SHARES_);\r\n\r\n        uint256 remainingBaseToken = DecimalMath.mulFloor(\r\n            getRemainingBaseTokenRatio(block.timestamp),\r\n            baseTotalAmount\r\n        );\r\n        return baseTotalAmount.sub(remainingBaseToken).sub(_CLAIMED_BASE_TOKEN_[user]);\r\n    }\r\n\r\n    function getRemainingBaseTokenRatio(uint256 timestamp) public view afterClaimFreeze returns (uint256) {\r\n        uint256 timePast = timestamp.sub(_SETTLED_TIME_.add(_TOKEN_CLAIM_DURATION_));\r\n        if (timePast < _TOKEN_VESTING_DURATION_) {\r\n            uint256 remainingTime = _TOKEN_VESTING_DURATION_.sub(timePast);\r\n            return DecimalMath.ONE.sub(_TOKEN_CLIFF_RATE_).mul(remainingTime).div(_TOKEN_VESTING_DURATION_);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // ============ Owner Functions ============\r\n\r\n    function claimLPToken() external onlyOwner afterFreeze {\r\n        uint256 lpAmount = getClaimableLPToken();\r\n        IERC20(_POOL_).safeTransfer(_OWNER_, lpAmount);\r\n        emit ClaimLP(lpAmount);\r\n    }\r\n\r\n    function getClaimableLPToken() public view afterFreeze returns (uint256) {\r\n        uint256 remainingLPToken = DecimalMath.mulFloor(\r\n            getRemainingLPRatio(block.timestamp),\r\n            _TOTAL_LP_AMOUNT_\r\n        );\r\n        return IERC20(_POOL_).balanceOf(address(this)).sub(remainingLPToken);\r\n    }\r\n\r\n    function getRemainingLPRatio(uint256 timestamp) public view afterFreeze returns (uint256) {\r\n        uint256 timePast = timestamp.sub(_SETTLED_TIME_.add(_FREEZE_DURATION_));\r\n        if (timePast < _VESTING_DURATION_) {\r\n            uint256 remainingTime = _VESTING_DURATION_.sub(timePast);\r\n            return DecimalMath.ONE.sub(_CLIFF_RATE_).mul(remainingTime).div(_VESTING_DURATION_);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DODO CrowdPooling\r\n * @author DODO Breeder\r\n *\r\n * @notice CrowdPooling initialization\r\n */\r\ncontract CP is CPVesting {\r\n    using SafeMath for uint256;\r\n\r\n    receive() external payable {\r\n        require(_INITIALIZED_ == false, \"WE_NOT_SAVE_ETH_AFTER_INIT\");\r\n    }\r\n\r\n    function init(\r\n        address[] calldata addressList,\r\n        uint256[] calldata timeLine,\r\n        uint256[] calldata valueList,\r\n        bool[] calldata switches //0 isOverCapStop 1 isOpenTWAP\r\n    ) external {\r\n        /*\r\n        Address List\r\n        0. owner\r\n        1. maintainer\r\n        2. baseToken\r\n        3. quoteToken\r\n        4. permissionManager\r\n        5. feeRateModel\r\n        6. poolFactory\r\n      */\r\n\r\n        require(addressList.length == 7, \"LIST_LENGTH_WRONG\");\r\n\r\n        initOwner(addressList[0]);\r\n        _MAINTAINER_ = addressList[1];\r\n        _BASE_TOKEN_ = IERC20(addressList[2]);\r\n        _QUOTE_TOKEN_ = IERC20(addressList[3]);\r\n        _BIDDER_PERMISSION_ = IPermissionManager(addressList[4]);\r\n        _MT_FEE_RATE_MODEL_ = IFeeRateModel(addressList[5]);\r\n        _POOL_FACTORY_ = addressList[6];\r\n\r\n        /*\r\n        Time Line\r\n        0. phase bid starttime\r\n        1. phase bid duration\r\n        2. phase calm duration\r\n        3. freeze duration\r\n        4. vesting duration\r\n        5. claim freeze duration\r\n        6. claim vesting duration\r\n        */\r\n\r\n        require(timeLine.length == 7, \"LIST_LENGTH_WRONG\");\r\n\r\n        _PHASE_BID_STARTTIME_ = timeLine[0];\r\n        _PHASE_BID_ENDTIME_ = _PHASE_BID_STARTTIME_.add(timeLine[1]);\r\n        _PHASE_CALM_ENDTIME_ = _PHASE_BID_ENDTIME_.add(timeLine[2]);\r\n\r\n        _FREEZE_DURATION_ = timeLine[3];\r\n        _VESTING_DURATION_ = timeLine[4];\r\n        _TOKEN_CLAIM_DURATION_ = timeLine[5];\r\n        _TOKEN_VESTING_DURATION_ = timeLine[6];\r\n        require(block.timestamp <= _PHASE_BID_STARTTIME_, \"TIMELINE_WRONG\");\r\n\r\n        /*\r\n        Value List\r\n        0. pool quote cap\r\n        1. k\r\n        2. i\r\n        3. lp cliff rate\r\n        4. base token cliff rate\r\n        5. lp fee rate\r\n        */\r\n\r\n        require(valueList.length == 6, \"LIST_LENGTH_WRONG\");\r\n\r\n        _POOL_QUOTE_CAP_ = valueList[0];\r\n        _K_ = valueList[1];\r\n        _I_ = valueList[2];\r\n        _CLIFF_RATE_ = valueList[3];\r\n        _TOKEN_CLIFF_RATE_ = valueList[4];\r\n        _POOL_FEE_RATE_ = valueList[5];\r\n\r\n        require(_I_ > 0 && _I_ <= 1e36, \"I_VALUE_WRONG\");\r\n        require(_K_ <= 1e18, \"K_VALUE_WRONG\");\r\n        require(_CLIFF_RATE_ <= 1e18, \"CLIFF_RATE_WRONG\");\r\n        require(_TOKEN_CLIFF_RATE_ <= 1e18, \"TOKEN_CLIFF_RATE_WRONG\");\r\n\r\n        _TOTAL_BASE_ = _BASE_TOKEN_.balanceOf(address(this));\r\n\r\n        require(switches.length == 2, \"SWITCHES_LENGTH_WRONG\");\r\n\r\n        _IS_OVERCAP_STOP = switches[0];\r\n        _IS_OPEN_TWAP_ = switches[1];\r\n\r\n        require(address(this).balance == _SETTEL_FUND_, \"SETTLE_FUND_NOT_MATCH\");\r\n    }\r\n\r\n    // ============ Version Control ============\r\n\r\n    function version() virtual external pure returns (string memory) {\r\n        return \"CP 2.0.0\";\r\n    }\r\n\r\n    \r\n    // ============= View =================\r\n    function getCpInfoHelper(address user) external view returns (\r\n        bool isSettled,\r\n        uint256 settledTime,\r\n        uint256 claimableBaseToken,\r\n        uint256 claimedBaseToken,\r\n        bool isClaimedQuoteToken,\r\n        uint256 claimableQuoteToken,\r\n        address pool,\r\n        uint256 claimableLpToken,\r\n        uint256 myShares,\r\n        bool isOverCapStop\r\n    ) {\r\n        isSettled = _SETTLED_;\r\n        settledTime = _SETTLED_TIME_;\r\n        if(_SETTLED_ && block.timestamp >= _SETTLED_TIME_.add(_TOKEN_CLAIM_DURATION_)) {\r\n            claimableBaseToken = getClaimableBaseToken(user);\r\n            claimedBaseToken = _CLAIMED_BASE_TOKEN_[user];\r\n        }else {\r\n            claimableBaseToken = 0;\r\n            claimedBaseToken = 0;\r\n        }\r\n\r\n        if(_SETTLED_) {\r\n            if(_CLAIMED_QUOTE_[msg.sender]) {\r\n                isClaimedQuoteToken = true;\r\n                claimableQuoteToken = 0;\r\n            } else {\r\n                isClaimedQuoteToken = false;\r\n                claimableQuoteToken = _UNUSED_QUOTE_.mul(_SHARES_[user]).div(_TOTAL_SHARES_);\r\n            }\r\n        } else {\r\n            isClaimedQuoteToken = false;\r\n            claimableQuoteToken = 0;\r\n        }\r\n\r\n        pool = _POOL_;\r\n\r\n        if(_SETTLED_ && block.timestamp >= _SETTLED_TIME_.add(_FREEZE_DURATION_)) {\r\n            if(user == _OWNER_) {\r\n                claimableLpToken = getClaimableLPToken();\r\n            }else {\r\n                claimableLpToken = 0;\r\n            }\r\n        }else {\r\n            claimableLpToken = 0;\r\n        }\r\n\r\n        myShares = _SHARES_[user];\r\n\r\n        isOverCapStop = _IS_OVERCAP_STOP;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimBaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimQuoteToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Settle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_AVG_SETTLED_PRICE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BIDDER_PERMISSION_\",\"outputs\":[{\"internalType\":\"contract IPermissionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_CLAIMED_BASE_TOKEN_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_CLAIMED_QUOTE_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CLIFF_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FORCE_STOP_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FREEZE_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_IS_OPEN_TWAP_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_IS_OVERCAP_STOP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_K_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MT_FEE_RATE_MODEL_\",\"outputs\":[{\"internalType\":\"contract IFeeRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PHASE_BID_ENDTIME_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PHASE_BID_STARTTIME_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PHASE_CALM_ENDTIME_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_POOL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_POOL_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_POOL_FEE_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_POOL_QUOTE_CAP_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_RESERVE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SETTLED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SETTLED_TIME_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOKEN_CLAIM_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOKEN_CLIFF_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOKEN_VESTING_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_BASE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_LP_AMOUNT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_SHARES_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UNUSED_BASE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UNUSED_QUOTE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_VESTING_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bidderClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCpInfoHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"settledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBaseToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBaseToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimedQuoteToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimableQuoteToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimableLpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverCapStop\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedAvgPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getRemainingBaseTokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getRemainingLPRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettleResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unUsedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unUsedQuote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeLine\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valueList\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"switches\",\"type\":\"bool[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CP", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef7b0ca5af98efe92ac9d00b9cfa23f1c4d06818358527a02e71c6d8acb91ac4"}