{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract GRDToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public currency;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _rewardTokenDistributor;\r\n\r\n    uint256 public _buyFundFee;\r\n    uint256 public _buyLPFee;\r\n    uint256 public _buyRewardFee;\r\n    uint256 public buy_burnFee;\r\n    uint256 public _sellFundFee;\r\n    uint256 public _sellLPFee;\r\n    uint256 public _sellRewardFee;\r\n    uint256 public sell_burnFee;\r\n\r\n    mapping(address => uint256) public user2blocks;\r\n    uint256 public batchBots;\r\n\r\n    bool public currencyIsEth;\r\n    bool public enableTrade;\r\n    address public ETH;\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    address[] public rewardPath;\r\n\r\n    constructor() {\r\n        _name = \"GRD\";\r\n        _symbol = \"GRD\";\r\n        _decimals = 18;\r\n        uint256 total = 1000000 * (10 ** 18);\r\n        _tTotal = total;\r\n\r\n        fundAddress = 0xE6Cfce512E801a69bD36e46a6F46C18BBf79C0df;\r\n\r\n        currency = 0x55d398326f99059fF775485246999027B3197955;\r\n        ETH = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        address ReceiveAddress = fundAddress;\r\n        enableTrade = true;\r\n        currencyIsEth = false;\r\n        enableTransferFee = true;\r\n\r\n        rewardPath = [address(this), currency];\r\n        if (currency != ETH) {\r\n            if (currencyIsEth == false) {\r\n                rewardPath.push(swapRouter.WETH());\r\n            }\r\n            if (ETH != swapRouter.WETH()) rewardPath.push(ETH);\r\n        }\r\n\r\n        IERC20(currency).approve(address(swapRouter), MAX);\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), currency);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        _buyFundFee = 100;\r\n        _buyLPFee = 0;\r\n        _buyRewardFee = 0;\r\n        buy_burnFee = 0;\r\n\r\n        _sellFundFee = 100;\r\n        _sellLPFee = 0;\r\n        _sellRewardFee = 0;\r\n        sell_burnFee = 200;\r\n        transferFee = 0;\r\n        // require(\r\n        //     _buyFundFee + _buyLPFee + _buyRewardFee + buy_burnFee < 2500,\r\n        //     \"fee too high\"\r\n        // );\r\n        // require(\r\n        //     _sellFundFee + _sellLPFee + _sellRewardFee + sell_burnFee < 2500,\r\n        //     \"fee too high\"\r\n        // );\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        _allowances[ReceiveAddress][address(swapRouter)] = MAX;\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(currency);\r\n        _rewardTokenDistributor = new TokenDistributor(ETH);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    bool public enableTransferFee = true;\r\n\r\n    function setEnableTransferFee(bool status) public onlyOwner {\r\n        enableTransferFee = status;\r\n    }\r\n\r\n    bool public isAddV2;\r\n    bool public isRemoveV2;\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = currency;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = currency;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        bool isTransfer;\r\n        bool isRemove;\r\n        bool isAdd;\r\n\r\n        if (_swapPairList[to]) {\r\n            isAdd = _isAddLiquidity();\r\n            isAddV2 = isAdd;\r\n        } else if (_swapPairList[from]) {\r\n            isRemove = _isRemoveLiquidity();\r\n            isRemoveV2 = isRemove;\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(enableTrade, \"pausing\");\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap && !isAdd) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > 0) {\r\n                            uint256 swapFee = _buyFundFee +\r\n                                _buyRewardFee +\r\n                                _buyLPFee +\r\n                                _sellFundFee +\r\n                                _sellRewardFee +\r\n                                _sellLPFee;\r\n                            uint256 numTokensSellToFund = (amount * swapFee) /\r\n                                5000;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                if (!isAdd && !isRemove) takeFee = true; // just swap fee\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        if (!_swapPairList[from] && !_swapPairList[to]) {\r\n            isTransfer = true;\r\n        }\r\n\r\n        _tokenTransfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            takeFee,\r\n            isSell,\r\n            isTransfer,\r\n            isAdd,\r\n            isRemove\r\n        );\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * 90) / 100;\r\n        _takeTransfer(sender, fundAddress, feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    uint256 public transferFee;\r\n    uint256 public addLiquidityFee;\r\n    uint256 public removeLiquidityFee;\r\n\r\n    function setTransferFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 2500, \"transfer > 25 !\");\r\n        transferFee = newValue;\r\n    }\r\n\r\n    function setAddLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 2500, \"add Lp > 25 !\");\r\n        addLiquidityFee = newValue;\r\n    }\r\n\r\n    function setRemoveLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 5000, \"remove Lp> 50 !\");\r\n        removeLiquidityFee = newValue;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isTransfer,\r\n        bool isAdd,\r\n        bool isRemove\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellRewardFee + _sellLPFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPFee + _buyRewardFee;\r\n            }\r\n\r\n            uint256 swapAmount = (tAmount * swapFee) / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender, address(this), swapAmount);\r\n            }\r\n\r\n            uint256 burnAmount;\r\n            if (!isSell) {\r\n                //buy\r\n                burnAmount = (tAmount * buy_burnFee) / 10000;\r\n            } else {\r\n                //sell\r\n                burnAmount = (tAmount * sell_burnFee) / 10000;\r\n            }\r\n            if (burnAmount > 0) {\r\n                feeAmount += burnAmount;\r\n                _takeTransfer(sender, address(0xdead), burnAmount);\r\n            }\r\n        }\r\n\r\n        if (isTransfer && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 transferFeeAmount;\r\n            transferFeeAmount = (tAmount * transferFee) / 10000;\r\n\r\n            if (transferFeeAmount > 0) {\r\n                feeAmount += transferFeeAmount;\r\n                _takeTransfer(sender, address(0xdead), transferFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isAdd && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 addLiquidityFeeAmount;\r\n            addLiquidityFeeAmount = (tAmount * addLiquidityFee) / 10000;\r\n\r\n            if (addLiquidityFeeAmount > 0) {\r\n                feeAmount += addLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(this), addLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isRemove && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 removeLiquidityFeeAmount;\r\n            removeLiquidityFeeAmount = (tAmount * removeLiquidityFee) / 10000;\r\n\r\n            if (removeLiquidityFeeAmount > 0) {\r\n                feeAmount += removeLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(this), removeLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n    event Failed_addLiquidityETH();\r\n    event Failed_addLiquidity();\r\n\r\n    function swapTokenForFund(\r\n        uint256 tokenAmount,\r\n        uint256 swapFee\r\n    ) private lockTheSwap {\r\n        if (swapFee == 0) {\r\n            return;\r\n        }\r\n        uint256 rewardAmount = (tokenAmount *\r\n            (_buyRewardFee + _sellRewardFee)) / swapFee;\r\n        if (rewardAmount > 0) {\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        rewardAmount,\r\n                        0,\r\n                        rewardPath,\r\n                        address(_rewardTokenDistributor),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    0\r\n                );\r\n            }\r\n        }\r\n\r\n        swapFee -= (_buyRewardFee + _sellRewardFee);\r\n        tokenAmount -= rewardAmount;\r\n\r\n        if (swapFee == 0 || tokenAmount == 0) {\r\n            return;\r\n        }\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = (tokenAmount * lpFee) / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = currency;\r\n        if (currencyIsEth) {\r\n            try\r\n                _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    tokenAmount - lpAmount, // - rewardAmount,\r\n                    0,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n            }\r\n        } else {\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        tokenAmount - lpAmount, // - rewardAmount,\r\n                        0,\r\n                        path,\r\n                        address(_tokenDistributor),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    1\r\n                );\r\n            }\r\n        }\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 FIST = IERC20(currency);\r\n\r\n        uint256 fistBalance = 0;\r\n        uint256 lpFist = 0;\r\n        uint256 fundAmount = 0;\r\n\r\n        if (currencyIsEth) {\r\n            fistBalance = address(this).balance;\r\n            lpFist = (fistBalance * lpFee) / swapFee;\r\n            fundAmount = fistBalance - lpFist;\r\n            if (fundAmount > 0 && fundAddress != address(0)) {\r\n                payable(fundAddress).transfer(fundAmount);\r\n            }\r\n            if (lpAmount > 0 && lpFist > 0) {\r\n                // add the liquidity\r\n                try\r\n                    _swapRouter.addLiquidityETH{value: lpFist}(\r\n                        address(this),\r\n                        lpAmount,\r\n                        0,\r\n                        0,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n                {} catch {\r\n                    emit Failed_addLiquidityETH();\r\n                }\r\n            }\r\n        } else {\r\n            fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n            lpFist = (fistBalance * lpFee) / swapFee;\r\n            fundAmount = fistBalance - lpFist;\r\n\r\n            if (lpFist > 0) {\r\n                FIST.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    address(this),\r\n                    lpFist\r\n                );\r\n            }\r\n\r\n            if (fundAmount > 0) {\r\n                FIST.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    fundAddress,\r\n                    fundAmount\r\n                );\r\n            }\r\n\r\n            if (lpAmount > 0 && lpFist > 0) {\r\n                try\r\n                    _swapRouter.addLiquidity(\r\n                        address(this),\r\n                        currency,\r\n                        lpAmount,\r\n                        lpFist,\r\n                        0,\r\n                        0,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n                {} catch {\r\n                    emit Failed_addLiquidity();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(\r\n        address[] calldata addr,\r\n        bool enable\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function completeCustoms(uint256[] calldata customs) external onlyOwner {\r\n        _buyFundFee = customs[0];\r\n        _buyLPFee = customs[1];\r\n        _buyRewardFee = customs[2];\r\n        buy_burnFee = customs[3];\r\n\r\n        _sellFundFee = customs[4];\r\n        _sellLPFee = customs[5];\r\n        _sellRewardFee = customs[6];\r\n        sell_burnFee = customs[7];\r\n\r\n        require(\r\n            _buyRewardFee + _buyLPFee + _buyFundFee + buy_burnFee < 2500,\r\n            \"fee too high\"\r\n        );\r\n        require(\r\n            _sellRewardFee + _sellLPFee + _sellFundFee + sell_burnFee < 2500,\r\n            \"fee too high\"\r\n        );\r\n    }\r\n\r\n    function setenableTrade(bool enable) external onlyOwner {\r\n        enableTrade = enable;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchBots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"customs\",\"type\":\"uint256[]\"}],\"name\":\"completeCustoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyIsEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRemoveV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEnableTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRemoveLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setenableTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GRDToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5e908dcf8cd52d1f21c6d1737837ae9b7ecc7c200eb430aa895237841a33a0f"}