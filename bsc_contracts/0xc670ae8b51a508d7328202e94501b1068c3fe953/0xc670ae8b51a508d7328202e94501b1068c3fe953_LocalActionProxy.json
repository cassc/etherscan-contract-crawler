{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BalanceManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ITokenBalance } from './interfaces/ITokenBalance.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\nimport './helpers/TransferHelper.sol' as TransferHelper;\\nimport './Constants.sol' as Constants;\\n\\n/**\\n * @title BalanceManagement\\n * @notice Base contract for the withdrawal of tokens, except for reserved ones\\n */\\nabstract contract BalanceManagement is ManagerRole {\\n    /**\\n     * @notice Emitted when the specified token is reserved\\n     */\\n    error ReservedTokenError();\\n\\n    /**\\n     * @notice Performs the withdrawal of tokens, except for reserved ones\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @param _tokenAmount The amount of the token\\n     */\\n    function cleanup(address _tokenAddress, uint256 _tokenAmount) external onlyManager {\\n        if (isReservedToken(_tokenAddress)) {\\n            revert ReservedTokenError();\\n        }\\n\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferNative(msg.sender, _tokenAmount);\\n        } else {\\n            TransferHelper.safeTransfer(_tokenAddress, msg.sender, _tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the token balance of the current contract\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @return The token balance of the current contract\\n     */\\n    function tokenBalance(address _tokenAddress) public view returns (uint256) {\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return ITokenBalance(_tokenAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the reserved token flag\\n     * @dev Override to add reserved token addresses\\n     * @param _tokenAddress The address of the token\\n     * @return The reserved token flag\\n     */\\n    function isReservedToken(address _tokenAddress) public view virtual returns (bool) {\\n        // The function returns false by default.\\n        // The explicit return statement is omitted to avoid the unused parameter warning.\\n        // See https://github.com/ethereum/solidity/issues/5295\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CallerGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\nimport './helpers/AddressHelper.sol' as AddressHelper;\\nimport './Constants.sol' as Constants;\\nimport './DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title CallerGuard\\n * @notice Base contract to control access from other contracts\\n */\\nabstract contract CallerGuard is ManagerRole {\\n    /**\\n     * @dev Caller guard mode enumeration\\n     */\\n    enum CallerGuardMode {\\n        ContractForbidden,\\n        ContractList,\\n        ContractAllowed\\n    }\\n\\n    /**\\n     * @dev Caller guard mode value\\n     */\\n    CallerGuardMode public callerGuardMode = CallerGuardMode.ContractForbidden;\\n\\n    /**\\n     * @dev Registered contract list for \\\"ContractList\\\" mode\\n     */\\n    address[] public listedCallerGuardContractList;\\n\\n    /**\\n     * @dev Registered contract list indices for \\\"ContractList\\\" mode\\n     */\\n    mapping(address /*account*/ => DataStructures.OptionalValue /*index*/)\\n        public listedCallerGuardContractIndexMap;\\n\\n    /**\\n     * @notice Emitted when the caller guard mode is set\\n     * @param callerGuardMode The caller guard mode\\n     */\\n    event SetCallerGuardMode(CallerGuardMode indexed callerGuardMode);\\n\\n    /**\\n     * @notice Emitted when a registered contract for \\\"ContractList\\\" mode is added or removed\\n     * @param contractAddress The contract address\\n     * @param isListed The registered contract list inclusion flag\\n     */\\n    event SetListedCallerGuardContract(address indexed contractAddress, bool indexed isListed);\\n\\n    /**\\n     * @notice Emitted when the caller is not allowed to perform the intended action\\n     */\\n    error CallerGuardError(address caller);\\n\\n    /**\\n     * @dev Modifier to check if the caller is allowed to perform the intended action\\n     */\\n    modifier checkCaller() {\\n        if (msg.sender != tx.origin) {\\n            bool condition = (callerGuardMode == CallerGuardMode.ContractAllowed ||\\n                (callerGuardMode == CallerGuardMode.ContractList &&\\n                    isListedCallerGuardContract(msg.sender)));\\n\\n            if (!condition) {\\n                revert CallerGuardError(msg.sender);\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the caller guard mode\\n     * @param _callerGuardMode The caller guard mode\\n     */\\n    function setCallerGuardMode(CallerGuardMode _callerGuardMode) external onlyManager {\\n        callerGuardMode = _callerGuardMode;\\n\\n        emit SetCallerGuardMode(_callerGuardMode);\\n    }\\n\\n    /**\\n     * @notice Updates the list of registered contracts for the \\\"ContractList\\\" mode\\n     * @param _items The addresses and flags for the contracts\\n     */\\n    function setListedCallerGuardContracts(\\n        DataStructures.AccountToFlag[] calldata _items\\n    ) external onlyManager {\\n        for (uint256 index; index < _items.length; index++) {\\n            DataStructures.AccountToFlag calldata item = _items[index];\\n\\n            if (item.flag) {\\n                AddressHelper.requireContract(item.account);\\n            }\\n\\n            DataStructures.uniqueAddressListUpdate(\\n                listedCallerGuardContractList,\\n                listedCallerGuardContractIndexMap,\\n                item.account,\\n                item.flag,\\n                Constants.LIST_SIZE_LIMIT_DEFAULT\\n            );\\n\\n            emit SetListedCallerGuardContract(item.account, item.flag);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the registered contract count\\n     * @return The registered contract count\\n     */\\n    function listedCallerGuardContractCount() external view returns (uint256) {\\n        return listedCallerGuardContractList.length;\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of registered contracts\\n     * @return The complete list of registered contracts\\n     */\\n    function fullListedCallerGuardContractList() external view returns (address[] memory) {\\n        return listedCallerGuardContractList;\\n    }\\n\\n    /**\\n     * @notice Getter of a listed contract flag\\n     * @param _account The contract address\\n     * @return The listed contract flag\\n     */\\n    function isListedCallerGuardContract(address _account) public view returns (bool) {\\n        return listedCallerGuardContractIndexMap[_account].isSet;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev The default token decimals value\\n */\\nuint256 constant DECIMALS_DEFAULT = 18;\\n\\n/**\\n * @dev The maximum uint256 value for swap amount limit settings\\n */\\nuint256 constant INFINITY = type(uint256).max;\\n\\n/**\\n * @dev The default limit of account list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_DEFAULT = 100;\\n\\n/**\\n * @dev The limit of swap router list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_ROUTERS = 200;\\n\\n/**\\n * @dev The factor for percentage settings. Example: 100 is 0.1%\\n */\\nuint256 constant MILLIPERCENT_FACTOR = 100_000;\\n\\n/**\\n * @dev The de facto standard address to denote the native token\\n */\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Optional value structure\\n * @dev Is used in mappings to allow zero values\\n * @param isSet Value presence flag\\n * @param value Numeric value\\n */\\nstruct OptionalValue {\\n    bool isSet;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure\\n * @dev Is used as an array parameter item to perform multiple key-value settings\\n * @param key Numeric key\\n * @param value Numeric value\\n */\\nstruct KeyToValue {\\n    uint256 key;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure for address values\\n * @dev Is used as an array parameter item to perform multiple key-value settings with address values\\n * @param key Numeric key\\n * @param value Address value\\n */\\nstruct KeyToAddressValue {\\n    uint256 key;\\n    address value;\\n}\\n\\n/**\\n * @notice Address-to-flag structure\\n * @dev Is used as an array parameter item to perform multiple settings\\n * @param account Account address\\n * @param flag Flag value\\n */\\nstruct AccountToFlag {\\n    address account;\\n    bool flag;\\n}\\n\\n/**\\n * @notice Emitted when a list exceeds the size limit\\n */\\nerror ListSizeLimitError();\\n\\n/**\\n * @notice Sets or updates a value in a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @param _value The address value\\n * @param _sizeLimit The map and list size limit\\n * @return isNewKey True if the key was just added, otherwise false\\n */\\nfunction combinedMapSet(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isNewKey) {\\n    isNewKey = !_keyIndexMap[_key].isSet;\\n\\n    if (isNewKey) {\\n        uniqueListAdd(_keyList, _keyIndexMap, _key, _sizeLimit);\\n    }\\n\\n    _map[_key] = _value;\\n}\\n\\n/**\\n * @notice Removes a value from a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @return isChanged True if the combined map was changed, otherwise false\\n */\\nfunction combinedMapRemove(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key\\n) returns (bool isChanged) {\\n    isChanged = _keyIndexMap[_key].isSet;\\n\\n    if (isChanged) {\\n        delete _map[_key];\\n        uniqueListRemove(_keyList, _keyIndexMap, _key);\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListAdd(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListRemove(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            uint256 lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListAdd(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListRemove(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            address lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds or removes a value to/from a unique address value list (a list with value index mapping)\\n * @dev The list size limit is checked on items adding only\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _flag The value inclusion flag\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListUpdate(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    bool _flag,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    return\\n        _flag\\n            ? uniqueAddressListAdd(_list, _indexMap, _value, _sizeLimit)\\n            : uniqueAddressListRemove(_list, _indexMap, _value);\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an attempt to burn a token fails\\n */\\nerror TokenBurnError();\\n\\n/**\\n * @notice Emitted when an attempt to mint a token fails\\n */\\nerror TokenMintError();\\n\\n/**\\n * @notice Emitted when a zero address is specified where it is not allowed\\n */\\nerror ZeroAddressError();\\n\"\r\n    },\r\n    \"contracts/helpers/AddressHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when the account is not a contract\\n * @param account The account address\\n */\\nerror NonContractAddressError(address account);\\n\\n/**\\n * @notice Function to check if the account is a contract\\n * @return The account contract status flag\\n */\\nfunction isContract(address _account) view returns (bool) {\\n    return _account.code.length > 0;\\n}\\n\\n/**\\n * @notice Function to require an account to be a contract\\n */\\nfunction requireContract(address _account) view {\\n    if (!isContract(_account)) {\\n        revert NonContractAddressError(_account);\\n    }\\n}\\n\\n/**\\n * @notice Function to require an account to be a contract or a zero address\\n */\\nfunction requireContractOrZeroAddress(address _account) view {\\n    if (_account != address(0)) {\\n        requireContract(_account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/RefundHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport './TransferHelper.sol' as TransferHelper;\\n\\n/**\\n * @notice Refunds the extra balance of the native token\\n * @dev Reverts on subtraction if the actual balance is less than expected\\n * @param _self The address of the executing contract\\n * @param _expectedBalance The expected native token balance value\\n * @param _to The refund receiver's address\\n */\\nfunction refundExtraBalance(address _self, uint256 _expectedBalance, address payable _to) {\\n    uint256 extraBalance = _self.balance - _expectedBalance;\\n\\n    if (extraBalance > 0) {\\n        TransferHelper.safeTransferNative(_to, extraBalance);\\n    }\\n}\\n\\n/**\\n * @notice Refunds the extra balance of the native token\\n * @dev Reverts on subtraction if the actual balance is less than expected\\n * @param _self The address of the executing contract\\n * @param _expectedBalance The expected native token balance value\\n * @param _to The refund receiver's address\\n * @return extraBalance The extra balance of the native token\\n */\\nfunction refundExtraBalanceWithResult(\\n    address _self,\\n    uint256 _expectedBalance,\\n    address payable _to\\n) returns (uint256 extraBalance) {\\n    extraBalance = _self.balance - _expectedBalance;\\n\\n    if (extraBalance > 0) {\\n        TransferHelper.safeTransferNative(_to, extraBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an approval action fails\\n */\\nerror SafeApproveError();\\n\\n/**\\n * @notice Emitted when a transfer action fails\\n */\\nerror SafeTransferError();\\n\\n/**\\n * @notice Emitted when a transferFrom action fails\\n */\\nerror SafeTransferFromError();\\n\\n/**\\n * @notice Emitted when a transfer of the native token fails\\n */\\nerror SafeTransferNativeError();\\n\\n/**\\n * @notice Safely approve the token to the account\\n * @param _token The token address\\n * @param _to The token approval recipient address\\n * @param _value The token approval amount\\n */\\nfunction safeApprove(address _token, address _to, uint256 _value) {\\n    // 0x095ea7b3 is the selector for \\\"approve(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x095ea7b3, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeApproveError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token to the account\\n * @param _token The token address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransfer(address _token, address _to, uint256 _value) {\\n    // 0xa9059cbb is the selector for \\\"transfer(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0xa9059cbb, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token between the accounts\\n * @param _token The token address\\n * @param _from The token transfer source address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransferFrom(address _token, address _from, address _to, uint256 _value) {\\n    // 0x23b872dd is the selector for \\\"transferFrom(address,address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x23b872dd, _from, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferFromError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the native token to the account\\n * @param _to The native token transfer recipient address\\n * @param _value The native token transfer amount\\n */\\nfunction safeTransferNative(address _to, uint256 _value) {\\n    (bool success, ) = _to.call{ value: _value }(new bytes(0));\\n\\n    if (!success) {\\n        revert SafeTransferNativeError();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IActionDataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IActionDataStructures\\n * @notice Action data structure declarations\\n */\\ninterface IActionDataStructures {\\n    /**\\n     * @notice Single-chain action data structure\\n     * @param fromTokenAddress The address of the input token\\n     * @param toTokenAddress The address of the output token\\n     * @param swapInfo The data for the single-chain swap\\n     * @param recipient The address of the recipient\\n     */\\n    struct LocalAction {\\n        address fromTokenAddress;\\n        address toTokenAddress;\\n        SwapInfo swapInfo;\\n        address recipient;\\n    }\\n\\n    /**\\n     * @notice Cross-chain action data structure\\n     * @param gatewayType The numeric type of the cross-chain gateway\\n     * @param vaultType The numeric type of the vault\\n     * @param sourceTokenAddress The address of the input token on the source chain\\n     * @param sourceSwapInfo The data for the source chain swap\\n     * @param targetChainId The action target chain ID\\n     * @param targetTokenAddress The address of the output token on the destination chain\\n     * @param targetSwapInfoOptions The list of data options for the target chain swap\\n     * @param targetRecipient The address of the recipient on the target chain\\n     * @param gatewaySettings The gateway-specific settings data\\n     */\\n    struct Action {\\n        uint256 gatewayType;\\n        uint256 vaultType;\\n        address sourceTokenAddress;\\n        SwapInfo sourceSwapInfo;\\n        uint256 targetChainId;\\n        address targetTokenAddress;\\n        SwapInfo[] targetSwapInfoOptions;\\n        address targetRecipient;\\n        bytes gatewaySettings;\\n    }\\n\\n    /**\\n     * @notice Token swap data structure\\n     * @param fromAmount The quantity of the token\\n     * @param routerType The numeric type of the swap router\\n     * @param routerData The data for the swap router call\\n     */\\n    struct SwapInfo {\\n        uint256 fromAmount;\\n        uint256 routerType;\\n        bytes routerData;\\n    }\\n\\n    /**\\n     * @notice Cross-chain message data structure\\n     * @param actionId The unique identifier of the cross-chain action\\n     * @param sourceSender The address of the sender on the source chain\\n     * @param vaultType The numeric type of the vault\\n     * @param targetTokenAddress The address of the output token on the target chain\\n     * @param targetSwapInfo The data for the target chain swap\\n     * @param targetRecipient The address of the recipient on the target chain\\n     */\\n    struct TargetMessage {\\n        uint256 actionId;\\n        address sourceSender;\\n        uint256 vaultType;\\n        address targetTokenAddress;\\n        SwapInfo targetSwapInfo;\\n        address targetRecipient;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ITokenBalance\\n * @notice Token balance interface\\n */\\ninterface ITokenBalance {\\n    /**\\n     * @notice Getter of the token balance by the account\\n     * @param _account The account address\\n     * @return Token balance\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/local-action-proxy/LocalActionProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { IActionDataStructures } from '../interfaces/IActionDataStructures.sol';\\nimport { BalanceManagement } from '../BalanceManagement.sol';\\nimport { CallerGuard } from '../CallerGuard.sol';\\nimport { Pausable } from '../Pausable.sol';\\nimport { SystemVersionId } from '../SystemVersionId.sol';\\nimport { ZeroAddressError } from '../Errors.sol';\\nimport '../helpers/AddressHelper.sol' as AddressHelper;\\nimport '../helpers/RefundHelper.sol' as RefundHelper;\\nimport '../helpers/TransferHelper.sol' as TransferHelper;\\nimport '../Constants.sol' as Constants;\\n\\n/**\\n * @title LocalActionProxy\\n * @notice Local action proxy contract\\n */\\ncontract LocalActionProxy is\\n    SystemVersionId,\\n    Pausable,\\n    CallerGuard,\\n    BalanceManagement,\\n    IActionDataStructures\\n{\\n    /**\\n     * @dev The address of the action executor contract\\n     */\\n    ILocalActionExecutor public actionExecutor;\\n\\n    /**\\n     * @dev The address of the fee collector\\n     */\\n    address public feeCollector;\\n\\n    /**\\n     * @notice Emitted when the action executor contract reference is set\\n     * @param actionExecutor The action executor contract address\\n     */\\n    event SetActionExecutor(address indexed actionExecutor);\\n\\n    /**\\n     * @notice Emitted when the address of the fee collector is set\\n     * @param feeCollector The address of the fee collector\\n     */\\n    event SetFeeCollector(address indexed feeCollector);\\n\\n    /**\\n     * @notice Emitted when the extra balance is refunded\\n     * @param actionId The ID of the action\\n     * @param sender The address of the user\\n     */\\n    event LocalActionExecuted(uint256 indexed actionId, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when the extra balance is refunded\\n     * @param to The refund receiver's address\\n     * @param extraBalance The extra balance of the native token\\n     */\\n    event ExtraBalanceRefunded(address indexed to, uint256 extraBalance);\\n\\n    /**\\n     * @notice Emitted when the native token value of the transaction does not correspond to the swap amount\\n     */\\n    error NativeTokenValueError();\\n\\n    /**\\n     * @notice Initializes the LocalActionProxy contract\\n     * @param _actionExecutor The address of the action executor contract\\n     * @param _feeCollector The address of the fee collector\\n     * @param _owner The address of the initial owner of the contract\\n     * @param _managers The addresses of initial managers of the contract\\n     * @param _addOwnerToManagers The flag to optionally add the owner to the list of managers\\n     */\\n    constructor(\\n        ILocalActionExecutor _actionExecutor,\\n        address _feeCollector,\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) {\\n        _setActionExecutor(_actionExecutor);\\n        _setFeeCollector(_feeCollector);\\n\\n        _initRoles(_owner, _managers, _addOwnerToManagers);\\n    }\\n\\n    /**\\n     * @notice The standard \\\"receive\\\" function\\n     * @dev Is payable to allow receiving native token funds from the action executor\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Executes a single-chain action\\n     * @param _localAction The parameters of the action\\n     * @param _processingFee The processing fee value\\n     */\\n    function executeLocal(\\n        LocalAction memory _localAction,\\n        uint256 _processingFee\\n    ) external payable whenNotPaused checkCaller {\\n        uint256 initialBalance = address(this).balance - msg.value;\\n\\n        address fromTokenAddress = _localAction.fromTokenAddress;\\n        uint256 fromAmount = _localAction.swapInfo.fromAmount;\\n\\n        bool fromNative = fromTokenAddress == Constants.NATIVE_TOKEN_ADDRESS;\\n\\n        uint256 requiredNativeTokenValue = fromNative\\n            ? fromAmount + _processingFee\\n            : _processingFee;\\n\\n        if (msg.value < requiredNativeTokenValue) {\\n            revert NativeTokenValueError();\\n        }\\n\\n        if (!fromNative) {\\n            TransferHelper.safeTransferFrom(\\n                fromTokenAddress,\\n                msg.sender,\\n                address(this),\\n                fromAmount\\n            );\\n\\n            TransferHelper.safeApprove(fromTokenAddress, address(actionExecutor), fromAmount);\\n        }\\n\\n        if (_localAction.recipient == address(0)) {\\n            _localAction.recipient = msg.sender;\\n        }\\n\\n        uint256 actionId = actionExecutor.executeLocal{ value: fromNative ? fromAmount : 0 }(\\n            _localAction\\n        );\\n\\n        emit LocalActionExecuted(actionId, msg.sender);\\n\\n        if (!fromNative) {\\n            TransferHelper.safeApprove(fromTokenAddress, address(actionExecutor), 0);\\n        }\\n\\n        TransferHelper.safeTransferNative(feeCollector, _processingFee);\\n\\n        uint256 extraBalance = RefundHelper.refundExtraBalanceWithResult(\\n            address(this),\\n            initialBalance,\\n            payable(msg.sender)\\n        );\\n\\n        if (extraBalance > 0) {\\n            emit ExtraBalanceRefunded(msg.sender, extraBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the action executor contract reference\\n     * @param _actionExecutor The action executor contract address\\n     */\\n    function setActionExecutor(ILocalActionExecutor _actionExecutor) external onlyManager {\\n        _setActionExecutor(_actionExecutor);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the fee collector\\n     * @param _feeCollector The address of the fee collector\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyManager {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    function _setActionExecutor(ILocalActionExecutor _actionExecutor) private {\\n        AddressHelper.requireContract(address(_actionExecutor));\\n\\n        actionExecutor = _actionExecutor;\\n\\n        emit SetActionExecutor(address(_actionExecutor));\\n    }\\n\\n    function _setFeeCollector(address _feeCollector) private {\\n        if (_feeCollector == address(0)) {\\n            revert ZeroAddressError();\\n        }\\n\\n        feeCollector = _feeCollector;\\n\\n        emit SetFeeCollector(_feeCollector);\\n    }\\n}\\n\\ninterface ILocalActionExecutor is IActionDataStructures {\\n    function executeLocal(\\n        LocalAction calldata _localAction\\n    ) external payable returns (uint256 actionId);\\n}\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Pausable as PausableBase } from '@openzeppelin/contracts/security/Pausable.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\n\\n/**\\n * @title Pausable\\n * @notice Base contract that implements the emergency pause mechanism\\n */\\nabstract contract Pausable is PausableBase, ManagerRole {\\n    /**\\n     * @notice Enter pause state\\n     */\\n    function pause() external onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Exit pause state\\n     */\\n    function unpause() external onlyManager whenPaused {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/ManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { RoleBearers } from './RoleBearers.sol';\\n\\n/**\\n * @title ManagerRole\\n * @notice Base contract that implements the Manager role.\\n * The manager role is a high-permission role for core team members only.\\n * Managers can set vaults and routers addresses, fees, cross-chain protocols,\\n * and other parameters for Interchain (cross-chain) swaps and single-network swaps.\\n * Please note, the manager role is unique for every contract,\\n * hence different addresses may be assigned as managers for different contracts.\\n */\\nabstract contract ManagerRole is Ownable, RoleBearers {\\n    bytes32 private constant ROLE_KEY = keccak256('Manager');\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is updated\\n     * @param account The account address\\n     * @param value The Manager role status flag\\n     */\\n    event SetManager(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is renounced\\n     * @param account The account address\\n     */\\n    event RenounceManagerRole(address indexed account);\\n\\n    /**\\n     * @notice Emitted when the caller is not a Manager role bearer\\n     */\\n    error OnlyManagerError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is a Manager role bearer\\n     */\\n    modifier onlyManager() {\\n        if (!isManager(msg.sender)) {\\n            revert OnlyManagerError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the Manager role status for the account\\n     * @param _account The account address\\n     * @param _value The Manager role status flag\\n     */\\n    function setManager(address _account, bool _value) public onlyOwner {\\n        _setRoleBearer(ROLE_KEY, _account, _value);\\n\\n        emit SetManager(_account, _value);\\n    }\\n\\n    /**\\n     * @notice Renounces the Manager role\\n     */\\n    function renounceManagerRole() external onlyManager {\\n        _setRoleBearer(ROLE_KEY, msg.sender, false);\\n\\n        emit RenounceManagerRole(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer count\\n     * @return The Manager role bearer count\\n     */\\n    function managerCount() external view returns (uint256) {\\n        return _roleBearerCount(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of the Manager role bearers\\n     * @return The complete list of the Manager role bearers\\n     */\\n    function fullManagerList() external view returns (address[] memory) {\\n        return _fullRoleBearerList(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer status\\n     * @param _account The account address\\n     */\\n    function isManager(address _account) public view returns (bool) {\\n        return _isRoleBearer(ROLE_KEY, _account);\\n    }\\n\\n    function _initRoles(\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) internal {\\n        address ownerAddress = _owner == address(0) ? msg.sender : _owner;\\n\\n        for (uint256 index; index < _managers.length; index++) {\\n            setManager(_managers[index], true);\\n        }\\n\\n        if (_addOwnerToManagers && !isManager(ownerAddress)) {\\n            setManager(ownerAddress, true);\\n        }\\n\\n        if (ownerAddress != msg.sender) {\\n            transferOwnership(ownerAddress);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RoleBearers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../Constants.sol' as Constants;\\nimport '../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title RoleBearers\\n * @notice Base contract that implements role-based access control\\n * @dev A custom implementation providing full role bearer lists\\n */\\nabstract contract RoleBearers {\\n    mapping(bytes32 /*roleKey*/ => address[] /*roleBearers*/) private roleBearerTable;\\n    mapping(bytes32 /*roleKey*/ => mapping(address /*account*/ => DataStructures.OptionalValue /*status*/))\\n        private roleBearerIndexTable;\\n\\n    function _setRoleBearer(bytes32 _roleKey, address _account, bool _value) internal {\\n        DataStructures.uniqueAddressListUpdate(\\n            roleBearerTable[_roleKey],\\n            roleBearerIndexTable[_roleKey],\\n            _account,\\n            _value,\\n            Constants.LIST_SIZE_LIMIT_DEFAULT\\n        );\\n    }\\n\\n    function _isRoleBearer(bytes32 _roleKey, address _account) internal view returns (bool) {\\n        return roleBearerIndexTable[_roleKey][_account].isSet;\\n    }\\n\\n    function _roleBearerCount(bytes32 _roleKey) internal view returns (uint256) {\\n        return roleBearerTable[_roleKey].length;\\n    }\\n\\n    function _fullRoleBearerList(bytes32 _roleKey) internal view returns (address[] memory) {\\n        return roleBearerTable[_roleKey];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SystemVersionId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title SystemVersionId\\n * @notice Base contract providing the system version identifier\\n */\\nabstract contract SystemVersionId {\\n    /**\\n     * @dev The system version identifier\\n     */\\n    uint256 public constant SYSTEM_VERSION_ID = uint256(keccak256('Initial'));\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILocalActionExecutor\",\"name\":\"_actionExecutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_addOwnerToManagers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerGuardError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListSizeLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenValueError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NonContractAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservedTokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeApproveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferNativeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraBalance\",\"type\":\"uint256\"}],\"name\":\"ExtraBalanceRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LocalActionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RenounceManagerRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actionExecutor\",\"type\":\"address\"}],\"name\":\"SetActionExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CallerGuard.CallerGuardMode\",\"name\":\"callerGuardMode\",\"type\":\"uint8\"}],\"name\":\"SetCallerGuardMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"SetFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"SetListedCallerGuardContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SYSTEM_VERSION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionExecutor\",\"outputs\":[{\"internalType\":\"contract ILocalActionExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callerGuardMode\",\"outputs\":[{\"internalType\":\"enum CallerGuard.CallerGuardMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"cleanup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.SwapInfo\",\"name\":\"swapInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IActionDataStructures.LocalAction\",\"name\":\"_localAction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_processingFee\",\"type\":\"uint256\"}],\"name\":\"executeLocal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullListedCallerGuardContractList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullManagerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isListedCallerGuardContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listedCallerGuardContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listedCallerGuardContractIndexMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedCallerGuardContractList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILocalActionExecutor\",\"name\":\"_actionExecutor\",\"type\":\"address\"}],\"name\":\"setActionExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CallerGuard.CallerGuardMode\",\"name\":\"_callerGuardMode\",\"type\":\"uint8\"}],\"name\":\"setCallerGuardMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"internalType\":\"struct AccountToFlag[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"setListedCallerGuardContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LocalActionProxy", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007b2e3fc7510d1a51b3bef735f985446589219354000000000000000000000000933579532530d4740baf09fb551d3eb57e8ee51100000000000000000000000072e28c7f34100afefc399fcc0ae041b8fe5841ae00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}