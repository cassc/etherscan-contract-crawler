{"SourceCode": "//SPDX-License-Identifier: None\r\npragma solidity ^0.6.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract BitVersArena {\r\n    IERC20 public usdt;\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint unstake;\r\n        mapping(uint => bool) activeSelfLevels;\r\n        mapping(uint => bool) activeGlobalLevels;\r\n    }\r\n    struct OrderInfo {\r\n        uint256 amount; \r\n        uint256 deposit_time;\r\n        bool unstake;\r\n    }\r\n    mapping(address => User) public users;\r\n    mapping(address => OrderInfo[]) public orderInfos;\r\n    uint public lastUserId = 2;\r\n    uint256 public mindeposit=100e18;\r\n    uint256 public selfPackagePriceIndex=14;\r\n    uint256 public globalPackagePriceIndex=13;\r\n    address public id1=0x416693F191B69B492975CD868B30D6483A7299bA;\r\n    address public admin=0x44c94AD0bd0102b567b2E0b97D5ddeF7db528fC5;\r\n    address public creater;\r\n    event Stake(address indexed user, address indexed referrer,uint256 _amount);\r\n    event Upgrade(address indexed user,uint256 _amount);\r\n    event UnStake(address indexed user,uint256 _amount);\r\n    event BuySlot(address indexed user,uint _level,uint _matrix);\r\n    event Withdraw(address indexed user,uint256 _amount);\r\n    uint256 private constant timeStepdaily =15*30 days;  \r\n    mapping(uint => uint) public selfPackagePrice;  \r\n    mapping(uint => uint) public globalPackagePrice;   \r\n    constructor(address _usdtAddr) public { \r\n        usdt = IERC20(_usdtAddr);  \r\n        creater=msg.sender;\r\n        selfPackagePrice[1] = 5e18;\r\n        selfPackagePrice[2] = 10e18;\r\n        selfPackagePrice[3] = 20e18;\r\n        selfPackagePrice[4] = 40e18;\r\n        selfPackagePrice[5] = 80e18;\r\n        selfPackagePrice[6] = 160e18;\r\n        selfPackagePrice[7] = 320e18;\r\n        selfPackagePrice[8] = 640e18;\r\n        selfPackagePrice[9] = 1280e18;\r\n        selfPackagePrice[10] = 2560e18;\r\n        selfPackagePrice[11] = 5120e18;\r\n        selfPackagePrice[12] = 10240e18;\r\n        selfPackagePrice[13] = 20480e18;\r\n        selfPackagePrice[14] = 40960e18;\r\n\r\n        globalPackagePrice[1] = 10e18;\r\n        globalPackagePrice[2] = 20e18;\r\n        globalPackagePrice[3] = 40e18;\r\n        globalPackagePrice[4] = 80e18;\r\n        globalPackagePrice[5] = 160e18;\r\n        globalPackagePrice[6] = 320e18;\r\n        globalPackagePrice[7] = 640e18;\r\n        globalPackagePrice[8] = 1280e18;\r\n        globalPackagePrice[9] = 2560e18;\r\n        globalPackagePrice[10] = 5120e18;\r\n        globalPackagePrice[11] = 10240e18;\r\n        globalPackagePrice[12] = 20480e18;\r\n        globalPackagePrice[13] = 40960e18;\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: address(0),\r\n            unstake:0\r\n        });\r\n        users[id1] = user;\r\n    }\r\n    function stakeExt(address referrerAddress,uint256 _amount) external {       \r\n        require(_amount >= (mindeposit+15e18), \"less than min\");\r\n        usdt.transferFrom(msg.sender, address(this), _amount);\r\n        uint256 _stakeamount=_amount-15e18;\r\n        usdt.transfer(admin,(_stakeamount*85/100+15e18));\r\n        stake(msg.sender, referrerAddress,_stakeamount);\r\n    }\r\n    function stakeUpgrade(uint256 _amount) external {       \r\n        require(_amount >= mindeposit, \"less than min\");\r\n        require(isUserExists(msg.sender), \"user exists\");\r\n        usdt.transferFrom(msg.sender, address(this), _amount);\r\n        usdt.transfer(admin,_amount*85/100);\r\n        orderInfos[msg.sender].push(OrderInfo(\r\n            _amount*15/100, \r\n            block.timestamp, \r\n            false\r\n        ));\r\n        emit Upgrade(msg.sender,_amount);\r\n    }\r\n    function buySelfSlot(uint _level) external {       \r\n        \r\n        require(isUserExists(msg.sender), \"user exists\");\r\n        require(_level > 1 && _level <= selfPackagePriceIndex, \"invalid level\");\r\n        require(!users[msg.sender].activeSelfLevels[_level], \"level already activated\");\r\n        usdt.transferFrom(msg.sender, admin, selfPackagePrice[_level]);\r\n        users[msg.sender].activeSelfLevels[_level]=true;\r\n        emit BuySlot(msg.sender,_level,1);\r\n    }\r\n    function buyGlobalSlot(uint _level) external {       \r\n        \r\n        require(isUserExists(msg.sender), \"user exists\");\r\n        require(_level > 1 && _level <= 4, \"invalid level\");\r\n        require(!users[msg.sender].activeGlobalLevels[_level], \"level already activated\");\r\n        usdt.transferFrom(msg.sender, admin, globalPackagePrice[_level]);\r\n        users[msg.sender].activeGlobalLevels[_level]=true;\r\n        emit BuySlot(msg.sender,_level,2);\r\n    }\r\n    function stake(address userAddress, address referrerAddress,uint256 _amount) private {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            unstake:0\r\n        });\r\n        users[userAddress] = user;\r\n        lastUserId++;\r\n        users[msg.sender].activeSelfLevels[1]=true;\r\n        users[msg.sender].activeGlobalLevels[1]=true;\r\n        orderInfos[userAddress].push(OrderInfo(\r\n            _amount*15/100, \r\n            block.timestamp, \r\n            false\r\n        ));\r\n        emit Stake(userAddress, referrerAddress,_amount);\r\n    }\r\n    function UnStakeAmount() external {\r\n        uint256 payableamount = stakePayoutOf(msg.sender);\r\n        require(payableamount > 0, \"StakingInsurance: ZERO_AMOUNT\");    \r\n        users[msg.sender].unstake += payableamount;\r\n        usdt.transfer(users[msg.sender].referrer,payableamount*10/100);\r\n        usdt.transfer(admin,payableamount*5/100);\r\n        usdt.transfer(msg.sender,payableamount*85/100); \r\n        emit UnStake(msg.sender,payableamount);\r\n    }\r\n    function stakePayoutOf(address _user) public returns(uint256){\r\n        uint256 unstakeamount=0;\r\n        for(uint8 i = 0; i < orderInfos[_user].length; i++){\r\n            OrderInfo storage order = orderInfos[_user][i];           \r\n            if(block.timestamp>order.deposit_time+timeStepdaily && !order.unstake){ \r\n                unstakeamount +=order.amount;\r\n                order.unstake=true;\r\n            }\r\n        }\r\n        return (unstakeamount);\r\n    }\r\n    function setMinDeposit(uint256 _mindeposit) external {  \r\n        require(msg.sender==creater,\"Only contract owner\");      \r\n        mindeposit=_mindeposit;\r\n    }\r\n    function setHolder(address _owner) external {  \r\n        require(msg.sender==creater,\"Only contract owner\");      \r\n        admin=_owner;\r\n    }\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    function updateGWEI(uint256 _amount) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        require(_amount>0, \"Insufficient reward to withdraw!\");\r\n        usdt.transfer(msg.sender, _amount);  \r\n    }\r\n    function addSelfPackage(uint256 _amount) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        selfPackagePrice[selfPackagePriceIndex]=_amount;  \r\n        selfPackagePriceIndex=selfPackagePriceIndex+1;\r\n    }\r\n    function addGlobalPackage(uint256 _amount) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        globalPackagePrice[globalPackagePriceIndex]=_amount;  \r\n        globalPackagePriceIndex=globalPackagePriceIndex+1;\r\n    }\r\n    function updateSelfPackage(uint256 _amount,uint _index) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        selfPackagePrice[_index]=_amount;\r\n    }\r\n    function updateGlobalPackage(uint256 _amount,uint _index) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        globalPackagePrice[_index]=_amount; \r\n    }\r\n    function otherWithdraw(address _user,uint256 _amount) public    {\r\n        usdt.transferFrom(msg.sender,_user,_amount);   \r\n        emit Withdraw(_user,_amount);\r\n    }\r\n    function stakeExtFor(address referrerAddress,address userAddress) external { \r\n        require(msg.sender==creater,\"Only contract owner\");         \r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            unstake:0\r\n        });\r\n        users[userAddress] = user;\r\n        lastUserId++;\r\n    }\r\n    function stakeUpgradeFor(address userAddress,uint256 _amount) external { \r\n        require(msg.sender==creater,\"Only contract owner\");         \r\n        require(_amount >= mindeposit, \"less than min\");\r\n        require(isUserExists(userAddress), \"user exists\");        \r\n        orderInfos[userAddress].push(OrderInfo(\r\n            _amount*15/100, \r\n            block.timestamp, \r\n            false\r\n        ));\r\n    }\r\n    function buySelfSlotFor(address userAddress,uint _level) external {       \r\n        require(msg.sender==creater,\"Only contract owner\");   \r\n        require(isUserExists(userAddress), \"user exists\");\r\n        require(_level > 0 && _level <= selfPackagePriceIndex, \"invalid level\");\r\n        require(!users[userAddress].activeSelfLevels[_level], \"level already activated\");\r\n        users[userAddress].activeSelfLevels[_level]=true;\r\n    }\r\n    function buyGlobalSlotFor(address userAddress,uint _level) external {       \r\n        require(msg.sender==creater,\"Only contract owner\");   \r\n        require(isUserExists(userAddress), \"user exists\");\r\n        require(_level > 0 && _level <= 4, \"invalid level\");\r\n        require(!users[userAddress].activeGlobalLevels[_level], \"level already activated\");\r\n        users[userAddress].activeGlobalLevels[_level]=true;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_matrix\",\"type\":\"uint256\"}],\"name\":\"BuySlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UnStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addGlobalPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addSelfPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyGlobalSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyGlobalSlotFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buySelfSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buySelfSlotFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalPackagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPackagePriceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mindeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"otherWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"selfPackagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfPackagePriceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mindeposit\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"stakeExtFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakePayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeUpgradeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"updateGlobalPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"updateSelfPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BitVersArena", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ee2200efb3400fabb9aacf31297cbdd1d435d47", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e071d6e878e3f5d7d28818d2b7f43ede8659882c4c022f2f964dd547ee14bb83"}