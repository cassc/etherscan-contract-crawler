{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-25\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.19;\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tif (c < a) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b > a) return (false, 0);\r\n\t\t\treturn (true, a - b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t\t// benefit is lost if 'b' is also tested.\r\n\t\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\t\tif (a == 0) return (true, 0);\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tif (c / a != b) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a / b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns(bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a % b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a * b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b <= a, errorMessage);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a / b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a % b;\r\n\t\t}\r\n\t}\r\n}\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\t_checkOwner();\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if the sender is not the owner.\r\n\t */\r\n\tfunction _checkOwner() internal view virtual {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `to`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address to, uint256 amount) external returns(bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `from` to `to` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external returns(bool);\r\n}\r\n\r\nlibrary Address {\r\n\t/**\r\n\t * @dev The ETH balance of the account is not enough to perform the operation.\r\n\t */\r\n\terror AddressInsufficientBalance(address account);\r\n\r\n\t/**\r\n\t * @dev There's no code at `target` (it is not a contract).\r\n\t */\r\n\terror AddressEmptyCode(address target);\r\n\r\n\t/**\r\n\t * @dev A call to an address target failed. The target may have reverted.\r\n\t */\r\n\terror FailedInnerCall();\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\tif (address(this).balance < amount) {\r\n\t\t\trevert AddressInsufficientBalance(address(this));\r\n\t\t}\r\n\r\n\t\t(bool success, ) = recipient.call {\r\n\t\t\tvalue: amount\r\n\t\t}(\"\");\r\n\t\tif (!success) {\r\n\t\t\trevert FailedInnerCall();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason or custom error, it is bubbled\r\n\t * up by this function (like regular Solidity function calls). However, if\r\n\t * the call reverted with no returned reason, this function reverts with a\r\n\t * {FailedInnerCall} error.\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns(bytes memory) {\r\n\t\tif (address(this).balance < value) {\r\n\t\t\trevert AddressInsufficientBalance(address(this));\r\n\t\t}\r\n\t\t(bool success, bytes memory returndata) = target.call {\r\n\t\t\tvalue: value\r\n\t\t}(data);\r\n\t\treturn verifyCallResultFromTarget(target, success, returndata);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns(bytes memory) {\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResultFromTarget(target, success, returndata);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns(bytes memory) {\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResultFromTarget(target, success, returndata);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n\t * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n\t * unsuccessful call.\r\n\t */\r\n\tfunction verifyCallResultFromTarget(\r\n\t\taddress target,\r\n\t\tbool success,\r\n\t\tbytes memory returndata\r\n\t) internal view returns(bytes memory) {\r\n\t\tif (!success) {\r\n\t\t\t_revert(returndata);\r\n\t\t} else {\r\n\t\t\t// only check if target is a contract if the call was successful and the return data is empty\r\n\t\t\t// otherwise we already know that it was a contract\r\n\t\t\tif (returndata.length == 0 && target.code.length == 0) {\r\n\t\t\t\trevert AddressEmptyCode(target);\r\n\t\t\t}\r\n\t\t\treturn returndata;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n\t * revert reason or with a default {FailedInnerCall} error.\r\n\t */\r\n\tfunction verifyCallResult(bool success, bytes memory returndata) internal pure returns(bytes memory) {\r\n\t\tif (!success) {\r\n\t\t\t_revert(returndata);\r\n\t\t} else {\r\n\t\t\treturn returndata;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n\t */\r\n\tfunction _revert(bytes memory returndata) private pure {\r\n\t\t// Look for revert reason and bubble it up if present\r\n\t\tif (returndata.length > 0) {\r\n\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\t\t\t/// @solidity memory-safe-assembly\r\n\t\t\tassembly {\r\n\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trevert FailedInnerCall();\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface IERC20Permit {\r\n\t/**\r\n\t * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n\t * given ``owner``'s signed approval.\r\n\t *\r\n\t * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n\t * ordering also apply here.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `deadline` must be a timestamp in the future.\r\n\t * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n\t * over the EIP712-formatted function arguments.\r\n\t * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n\t *\r\n\t * For more information on the signature format, see the\r\n\t * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n\t * section].\r\n\t *\r\n\t * CAUTION: See Security Considerations above.\r\n\t */\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Returns the current nonce for `owner`. This value must be\r\n\t * included whenever a signature is generated for {permit}.\r\n\t *\r\n\t * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n\t * prevents a signature from being used multiple times.\r\n\t */\r\n\tfunction nonces(address owner) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n\t */\r\n\t// solhint-disable-next-line func-name-mixedcase\r\n\tfunction DOMAIN_SEPARATOR() external view returns(bytes32);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\tusing Address\r\n\tfor address;\r\n\r\n\t/**\r\n\t * @dev An operation with an ERC20 token failed.\r\n\t */\r\n\terror SafeERC20FailedOperation(address token);\r\n\r\n\t/**\r\n\t * @dev Indicates a failed `decreaseAllowance` request.\r\n\t */\r\n\terror SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n\t/**\r\n\t * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n\t * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 oldAllowance = token.allowance(address(this), spender);\r\n\t\tforceApprove(token, spender, oldAllowance + value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful.\r\n\t */\r\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n\t\tunchecked {\r\n\t\t\tuint256 currentAllowance = token.allowance(address(this), spender);\r\n\t\t\tif (currentAllowance < requestedDecrease) {\r\n\t\t\t\trevert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n\t\t\t}\r\n\t\t\tforceApprove(token, spender, currentAllowance - requestedDecrease);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n\t * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n\t * to be set to zero before setting it to a non-zero value, such as USDT.\r\n\t */\r\n\tfunction forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\tbytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n\t\tif (!_callOptionalReturnBool(token, approvalCall)) {\r\n\t\t\t_callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n\t\t\t_callOptionalReturn(token, approvalCall);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data);\r\n\t\tif (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n\t\t\trevert SafeERC20FailedOperation(address(token));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t *\r\n\t * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n\t */\r\n\tfunction _callOptionalReturnBool(IERC20 token, bytes memory data) private returns(bool) {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n\t\t// and not revert is the subcall reverts.\r\n\r\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\r\n\t\treturn success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n\t}\r\n}\r\n\r\ninterface Referal {\r\n\tfunction getReferrer(address user) external view returns(address);\r\n\r\n\tfunction getAllRefrees(address user) external view returns(address[] memory);\r\n\r\n\tfunction isWhitelisted(address user) external view returns(bool);\r\n}\r\n\r\ninterface Vesting {\r\n\tfunction vestTokens(address user, uint256 amount) external;\r\n} \r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(\r\n\t\taddress indexed token0,\r\n\t\taddress indexed token1,\r\n\t\taddress pair,\r\n\t\tuint256\r\n\t);\r\n\r\n\tfunction feeTo() external view returns(address);\r\n\r\n\tfunction feeToSetter() external view returns(address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns(address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns(address pair);\r\n\r\n\tfunction allPairsLength() external view returns(uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns(address pair);\r\n\r\n\t// function setFeeTo(address) external;\r\n\t// function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction name() external pure returns(string memory);\r\n\r\n\tfunction symbol() external pure returns(string memory);\r\n\r\n\tfunction decimals() external pure returns(uint8);\r\n\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns(uint256);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns(uint256);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns(bool);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns(bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns(bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns(bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns(bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns(uint256);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\tevent Burn(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0,\r\n\t\tuint256 amount1,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0In,\r\n\t\tuint256 amount1In,\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns(uint256);\r\n\r\n\tfunction factory() external view returns(address);\r\n\r\n\tfunction token0() external view returns(address);\r\n\r\n\tfunction token1() external view returns(address);\r\n\r\n\tfunction getReserves()\r\n\texternal\r\n\tview\r\n\treturns(\r\n\t\tuint112 reserve0,\r\n\t\tuint112 reserve1,\r\n\t\tuint32 blockTimestampLast\r\n\t);\r\n\r\n\tfunction price0CumulativeLast() external view returns(uint256);\r\n\r\n\tfunction price1CumulativeLast() external view returns(uint256);\r\n\r\n\tfunction kLast() external view returns(uint256);\r\n\r\n\tfunction mint(address to) external returns(uint256 liquidity);\r\n\r\n\tfunction burn(address to)\r\n\texternal\r\n\treturns(uint256 amount0, uint256 amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns(address);\r\n\r\n\tfunction WETH() external pure returns(address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\treturns(\r\n\t\tuint256 amountA,\r\n\t\tuint256 amountB,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns(\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns(uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns(uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns(uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns(uint256[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns(uint256 amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns(uint256 amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns(uint256 amountIn);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\r\n\texternal\r\n\tview\r\n\treturns(uint256[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\r\n\texternal\r\n\tview\r\n\treturns(uint256[] memory amounts);\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns(uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\t/**\r\n\t * @dev Unauthorized reentrant call.\r\n\t */\r\n\terror ReentrancyGuardReentrantCall();\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and making it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t_nonReentrantBefore();\r\n\t\t_;\r\n\t\t_nonReentrantAfter();\r\n\t}\r\n\r\n\tfunction _nonReentrantBefore() private {\r\n\t\t// On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n\t\tif (_status == _ENTERED) {\r\n\t\t\trevert ReentrancyGuardReentrantCall();\r\n\t\t}\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\t}\r\n\r\n\tfunction _nonReentrantAfter() private {\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n\t * `nonReentrant` function in the call stack.\r\n\t */\r\n\tfunction _reentrancyGuardEntered() internal view returns(bool) {\r\n\t\treturn _status == _ENTERED;\r\n\t}\r\n}\r\n\r\ncontract BanqiroTokenICO is Ownable, ReentrancyGuard {\r\n\tusing SafeMath\r\n\tfor uint256;\r\n\tusing SafeERC20\r\n\tfor IERC20;\r\n\r\n\taddress public banqiro = 0xeb49A658D2bAB9567c872a7214B00D3895Ed3126;\r\n\tuint256 public seedSaleStartime = 1695643200;\r\n\tuint256 public preRegisterationStartTime = 1695988800;\r\n\tuint256 public phase1StartTime = 1696593600;\r\n\tuint256 public endTime = 1711843200;\r\n\tuint256 public seedSaleAmountRaised;\r\n\tuint256 public amountRaised;\r\n\taddress public referalContract = 0x32C6e5952867F7771a238f757b15cfF088f915C3;\r\n\taddress public vestingContract = 0x1dCb6B575Df8E2f1d5F15644E16c594D607C20e6;\r\n\tuint256 public tokenSoldSeedSale;\r\n\tuint256 public tokensSold;\r\n\taddress public usdc = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n\taddress public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n\taddress[] public investors;\r\n\tIUniswapV2Router02 public immutable uniswapV2Router; // uniswap dex router\r\n\tuint256 public slippageTolerance = 50;\r\n\r\n\tuint256 public phase0Supply = 3846154000000000000000000;\r\n\tuint256 public phase1Supply = 4500000000000000000000000;\r\n\tuint256 public phase2Supply = 9000000000000000000000000;\r\n\tuint256 public phase3Supply = 13750000000000000000000000;\r\n\tuint256 public phase4Supply = 20072917000000000000000000;\r\n\tuint256 public phase5Supply = 9803922000000000000000000;\r\n\tuint256 public phase6Supply = 9433962000000000000000000;\r\n\r\n\tmapping(address => uint256) public seedSaleTokenBoughtUser;\r\n\tmapping(address => uint256) public totalTokenBoughtUser;\r\n\tmapping(address => uint256) public saleTokenBoughtUser;\r\n\tmapping(address => uint256) public seedSaleUsdInvestedByUser;\r\n\tmapping(address => uint256) public preRegisterationUsdInvestedByUser;\r\n\tmapping(address => uint256) public totalUsdInvestedByUser;\r\n\tmapping(address => uint256) public saleUsdInvestedByUser;\r\n\tmapping(address => uint256) public bonusSaleUsdInvestedByUser;\r\n\tmapping(address => uint256) public bonusTokenBoughtUser;\r\n\tmapping(address => mapping(address => uint256)) public rewardFromUser;\r\n\r\n\r\n\tuint256 public minBuyAmount = 50000000000000000000;\r\n\tuint256 public maxBuyAmount = 50000000000000000000000;\r\n\tuint256 public seedSaleBuy = 50000000000000000000000;\r\n\tuint256 public preRegisterationBuyAmount = 50000000000000000000; \r\n\tuint256 public maxPurchaseByUser = 50000000000000000000000;\r\n\tuint256 public phase0Price = 130000000000000000;\r\n\tuint256 public phase1Price = 150000000000000000; //0.01\r\n\tuint256 public phase2Price = 180000000000000000;\r\n\tuint256 public phase3Price = 210000000000000000;\r\n\tuint256 public phase4Price = 240000000000000000;\r\n\tuint256 public phase5Price = 255000000000000000;\r\n\tuint256 public phase6Price = 265000000000000000;\r\n\tuint256 public poolAmount;\r\n\tuint256 public poolAmountDistributed; \r\n\tuint256 public unlockPrice = 50000000000000000000;\r\n\tuint256 public sepaCommision = 77000000000000000;\r\n\r\n\tmapping(uint256 => uint256) public levelToCommision;\r\n\tmapping(uint256 => uint256) public poolToSale;\r\n\tmapping(address => bool) public added;\r\n\tmapping(address => uint256) public poolReward;\r\n\tmapping(address => uint256) public referalIncome;\r\n\r\n\taddress public bnqEOOD = 0x67713F636194520f80f82b51a8BEb8491b0F7F9F;\r\n\taddress public bnqTechJSC = 0xf26543614F8F120206465378847bcbF805c87751;\r\n\taddress public salesWallet = 0xe26E0D089e3268c56e65Af54A448B670539E4294;\r\n\taddress public bnqMarketingJSC = 0x3929D65eCB648c0Da15A4FCf9e43A337D5047Ec1;\r\n\taddress public boardWallet = 0x683c7416A4ccD2AaD03e68faCCf4F766a7cfEA9c;\r\n\taddress public topAccount = 0x6BE66C9aF95F0E243731559B77Ab402638033d85;\r\n\taddress public sepaWallet = 0x710dFFF012707C378aC61dc1E206213a47a8724C; // sepa wallet**\r\n\r\n\tuint256 public seedEOODPercentage = 3000;\r\n\tuint256 public seedTechJSCPercentage = 5000;\r\n\tuint256 public seedMarketingJSCPercentage = 1000;\r\n\tuint256 public seedAffiliatePercentage = 1000;\r\n\r\n\tuint256 public EOODPercentage = 3000;\r\n\tuint256 public techJSCPercentage = 3000;\r\n\tuint256 public salesPercentage = 400;\r\n\tuint256 public boardPercentage = 250;\r\n\tuint256 public marketingJSCPercentage = 350;\r\n\tuint256 public affiliatePercentage = 2500;\r\n\tuint256 public poolPercentage = 500;\r\n\r\n\r\n\tuint256 public bonusEOODPercentage = 2000;\r\n\tuint256 public bonusTechJSCPercentage = 4000;\r\n\tuint256 public bonusSalesPercentage = 400;\r\n\tuint256 public bonusBoardPercentage = 350;\r\n\tuint256 public bonusMarketingJSCPercentage = 250;\r\n\r\n\r\n\r\n\tstruct Refer {\r\n\t\taddress user;\r\n\t\tuint256 amount;\r\n\r\n\t}\r\n\r\n\tstruct ReferUpdated {\r\n\t\taddress referrer;\r\n\t\taddress[] users;\r\n\t\tuint256[] amounts;\r\n\t}\r\n\r\n\tevent TokensBought(address indexed investor, uint256 indexed usdAmount,\r\n\t\tuint256 indexed tokenAmount, uint256 phase);\r\n\r\n\tevent SupplyEdited(uint256 phase0Supply, uint256 phase1Supply, uint256 phase2Supply,\r\n\t\tuint256 phase3Supply, uint256 phase4Supply, uint256 phase5Supply, uint256 phase6Supply);\r\n\r\n\tevent PriceUpdated(uint256 phase0Price, uint256 phase1Price, uint256 phase2Price,\r\n\t\tuint256 phase3Price, uint256 phase4Price, uint256 phase5Price, uint256 phase6Price);\r\n\r\n\tevent TreasuryUpdated(address treasury);\r\n\r\n\tevent ContractsUpdated(address referalContract, address vestingContract);\r\n\r\n\tevent ReferalIncomeDistributed(address user, address referrer, uint256 amountPurchased,\r\n\t\tuint256 referalAmount, uint256 levell, uint256 phase);\r\n\r\n\tevent WhitelistUpdated(address user, bool isWhitelisted);\r\n\r\n\tevent BuyAmountUpdated(uint256 min, uint256 max);\r\n\r\n\tevent SlippageToleranceUpdated(uint256 slippage);\r\n\r\n\r\n\tconstructor(\r\n\t\taddress banqiroToken\r\n\r\n\t) {\r\n\r\n\t\tbanqiro = (banqiroToken);\r\n\t\tlevelToCommision[1] = 1000;\r\n\t\tlevelToCommision[2] = 400;\r\n\t\tlevelToCommision[3] = 300;\r\n\t\tlevelToCommision[4] = 200;\r\n\t\tlevelToCommision[5] = 200;\r\n\t\tlevelToCommision[6] = 100;\r\n\t\tlevelToCommision[7] = 100;\r\n\t\tlevelToCommision[8] = 100;\r\n\t\tlevelToCommision[9] = 50;\r\n\t\tlevelToCommision[10] = 50;\r\n\t\tpoolToSale[1] = 100000000000000000000000;\r\n\t\tpoolToSale[2] = 250000000000000000000000;\r\n\t\tpoolToSale[3] = 500000000000000000000000;\r\n\t\tpoolToSale[4] = 1000000000000000000000000;\r\n\t\tpoolToSale[5] = 5000000000000000000000000;\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n\t\t\t0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n\t}\r\n\r\n\tfunction updateTime(uint256 _seedSaleStartime, uint256 _preRegisterationStartTime, uint256 _phase1StartTime, uint256 _endTime)\r\n\texternal onlyOwner {\r\n\t\tseedSaleStartime = _seedSaleStartime;\r\n\t\tpreRegisterationStartTime = _preRegisterationStartTime;\r\n\t\tphase1StartTime = _phase1StartTime;\r\n\t\tendTime = _endTime;\r\n\r\n\t}\r\n\r\n\tfunction updatebanqiroTokenAddress(address token) external onlyOwner {\r\n\t\tbanqiro = token;\r\n\t}\r\n\r\n\tfunction updateWallet(address _bnqEOOD,\r\n\t\taddress _bnqTechJSC,\r\n\t\taddress _salesWallet,\r\n\t\taddress _bnqMarketingJSC,\r\n\t\taddress _boardWallet,\r\n\t\taddress _topAccount, address _sepaWallet) external onlyOwner {\r\n\t\tbnqEOOD = _bnqEOOD;\r\n\t\tbnqTechJSC = _bnqTechJSC;\r\n\t\tsalesWallet = _salesWallet;\r\n\t\tbnqMarketingJSC = _bnqMarketingJSC;\r\n\t\tboardWallet = _boardWallet;\r\n\t\ttopAccount = _topAccount;\r\n\t\tsepaWallet = _sepaWallet;\r\n\t}\r\n\r\n\tfunction updateSeedPercentage(uint256 _seedEOODPercentage, uint256 _seedMarketingJSCPercentage,\r\n\t\tuint256 _seedTechJSCPercentage, uint256 _seedAffiliatePercentage) external onlyOwner {\r\n\t\trequire(_seedEOODPercentage + _seedMarketingJSCPercentage +\r\n\t\t\t_seedTechJSCPercentage + _seedAffiliatePercentage == 10000, \"Enter correct values\");\r\n\t\tseedEOODPercentage = _seedEOODPercentage;\r\n\t\tseedMarketingJSCPercentage = _seedMarketingJSCPercentage;\r\n\t\tseedTechJSCPercentage = _seedTechJSCPercentage;\r\n\t\tseedAffiliatePercentage = _seedAffiliatePercentage;\r\n\r\n\r\n\t}\r\n\r\n\tfunction updateSalePercentage(uint256 _EOODPercentage,\r\n\t\tuint256 _techJSCPercentage,\r\n\t\tuint256 _salesPercentage,\r\n\t\tuint256 _boardPercentage,\r\n\t\tuint256 _marketingJSCPercentage,\r\n\t\tuint256 _affiliatePercentage,\r\n\t\tuint256 _poolPercentage) external onlyOwner {\r\n\t\trequire(_EOODPercentage +\r\n\t\t\t_techJSCPercentage +\r\n\t\t\t_salesPercentage +\r\n\t\t\t_boardPercentage +\r\n\t\t\t_marketingJSCPercentage +\r\n\t\t\t_affiliatePercentage +\r\n\t\t\t_poolPercentage == 10000, \"Enter correct values\");\r\n\t\tEOODPercentage = _EOODPercentage;\r\n\t\ttechJSCPercentage = _techJSCPercentage;\r\n\t\tsalesPercentage = _salesPercentage;\r\n\t\tboardPercentage = _boardPercentage;\r\n\t\tmarketingJSCPercentage = _marketingJSCPercentage;\r\n\t\taffiliatePercentage = _affiliatePercentage;\r\n\t\tpoolPercentage = _poolPercentage;\r\n\r\n\r\n\t}\r\n\r\n\tfunction updateBonusPercentage(uint256 _EOODPercentage,\r\n\t\tuint256 _techJSCPercentage,\r\n\t\tuint256 _salesPercentage,\r\n\t\tuint256 _boardPercentage,\r\n\t\tuint256 _marketingJSCPercentage,\r\n\t\tuint256 _affiliatePercentage,\r\n\t\tuint256 _poolPercentage) external onlyOwner {\r\n\t\trequire(_EOODPercentage +\r\n\t\t\t_techJSCPercentage +\r\n\t\t\t_salesPercentage +\r\n\t\t\t_boardPercentage +\r\n\t\t\t_marketingJSCPercentage +\r\n\t\t\t_affiliatePercentage +\r\n\t\t\t_poolPercentage == 10000, \"Enter correct values\");\r\n\t\tbonusEOODPercentage = _EOODPercentage;\r\n\t\tbonusTechJSCPercentage = _techJSCPercentage;\r\n\t\tbonusSalesPercentage = _salesPercentage;\r\n\t\tbonusBoardPercentage = _boardPercentage;\r\n\t\tbonusMarketingJSCPercentage = _marketingJSCPercentage;\r\n\t\taffiliatePercentage = _affiliatePercentage;\r\n\t\tpoolPercentage = _poolPercentage;\r\n\t}\r\n\r\n\tfunction updateSupply(uint256 _phase0Supply, uint256 _phase1Supply, uint256 _phase2Supply,\r\n\t\tuint256 _phase3Supply, uint256 _phase4Supply, uint256 _phase5Supply, uint256 _phase6Supply) external onlyOwner {\r\n\t\tphase0Supply = _phase0Supply;\r\n\t\tphase1Supply = _phase1Supply;\r\n\t\tphase2Supply = _phase2Supply;\r\n\t\tphase3Supply = _phase3Supply;\r\n\t\tphase4Supply = _phase4Supply;\r\n\t\tphase5Supply = _phase5Supply;\r\n\t\tphase6Supply = _phase6Supply;\r\n\r\n\t\temit SupplyEdited(_phase0Supply, _phase1Supply, _phase2Supply,\r\n\t\t\t_phase3Supply, _phase4Supply, _phase5Supply, _phase6Supply);\r\n\r\n\t}\r\n\r\n\tfunction editPrice(uint256 _phase0Price, uint256 _phase1Price, uint256 _phase2Price,\r\n\t\tuint256 _phase3Price, uint256 _phase4Price, uint256 _phase5Price, uint256 _phase6Price) external onlyOwner {\r\n\t\tphase0Price = _phase0Price;\r\n\t\tphase1Price = _phase1Price;\r\n\t\tphase2Price = _phase2Price;\r\n\t\tphase3Price = _phase3Price;\r\n\t\tphase4Price = _phase4Price;\r\n\t\tphase5Price = _phase5Price;\r\n\t\tphase6Price = _phase6Price;\r\n\r\n\t\temit PriceUpdated(_phase0Price, _phase1Price, _phase2Price,\r\n\t\t\t_phase3Price, _phase4Price, _phase5Price, _phase6Price);\r\n\t}\r\n\r\n\tfunction updatePurchaseValue(uint256 minAmount, uint256 maxAmount) external onlyOwner {\r\n\t\tpreRegisterationBuyAmount = minAmount;\r\n\t\tmaxPurchaseByUser = maxAmount;\r\n\r\n\t}\r\n\r\n\r\n\tfunction updateMinMaxBuy(uint256 min, uint256 max) external onlyOwner {\r\n\t\tminBuyAmount = min;\r\n\t\tmaxBuyAmount = max;\r\n\r\n\t\temit BuyAmountUpdated(min, max);\r\n\t}\r\n\r\n\r\n\tfunction updateLevelToCommision(uint256 level, uint256 commision) external onlyOwner {\r\n\t\trequire(level >= 1 && level <= 10, \"Only 10 levels allowed\");\r\n\t\tlevelToCommision[level] = commision;\r\n\t}\r\n\r\n\r\n\tfunction updateSlippageTolerance(uint256 _slippage) external onlyOwner {\r\n\t\tslippageTolerance = _slippage;\r\n\t\temit SlippageToleranceUpdated(_slippage);\r\n\t}\r\n\r\n\r\n\tfunction updateContracts(address _referalContract, address _vestingContract) external onlyOwner {\r\n\t\treferalContract = _referalContract;\r\n\t\tvestingContract = _vestingContract;\r\n\r\n\t\temit ContractsUpdated(_referalContract, _vestingContract);\r\n\r\n\t}\r\n\r\n\tfunction getStage() public view returns(uint256 stage) {\r\n\t\trequire(block.timestamp > seedSaleStartime, \"Sale not started\");\r\n\t\trequire(block.timestamp < endTime, \"Sale Ended\");\r\n\r\n\t\tif (block.timestamp > seedSaleStartime && block.timestamp < phase1StartTime) {\r\n\t\t\treturn (0);\r\n\t\t} else if (tokensSold >= 0 && tokensSold < phase1Supply) {\r\n\t\t\treturn (1);\r\n\t\t} else if (tokensSold >= phase1Supply && tokensSold < phase2Supply) {\r\n\t\t\treturn (2);\r\n\t\t} else if (tokensSold >= phase2Supply && tokensSold < phase3Supply) {\r\n\t\t\treturn (3);\r\n\t\t} else if (tokensSold >= phase3Supply && tokensSold < phase4Supply) {\r\n\t\t\treturn (4);\r\n\t\t} else if (tokensSold >= phase4Supply && tokensSold < phase5Supply) {\r\n\t\t\treturn (5);\r\n\t\t} else if (tokensSold >= phase5Supply && tokensSold <= phase6Supply) {\r\n\t\t\treturn (6);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction buyToken(address token, uint256 amount) external nonReentrant {\r\n\t\tif (!added[msg.sender]) {\r\n\t\t\tinvestors.push(msg.sender);\r\n\t\t\tadded[msg.sender] = true;\r\n\t\t}\r\n\t\trequire(token == usdt || token == usdc, \"Invalid currency\");\r\n\t\trequire(block.timestamp > seedSaleStartime, \"Sale not started\");\r\n\t\trequire(block.timestamp < endTime, \"Sale Ended\");\r\n\t\trequire(Referal(referalContract).isWhitelisted(msg.sender) ||\r\n\t\t\t\tReferal(referalContract).getReferrer(msg.sender) != address(0), \"Not Eligible, try later\"); \r\n\t\tuint256 stage = getStage();\r\n\t\tuint256 price;\r\n\t\tif (stage == 0) {\r\n\t\t\tprice = phase0Price;\r\n\t\t\tif (preRegisterationStartTime > block.timestamp) {\r\n\t\t\t\trequire(seedSaleUsdInvestedByUser[msg.sender] + amount <= seedSaleBuy, \"50.000 worth of tokens bought\");\r\n\t\t\t} else {\r\n\t\t\t\trequire(preRegisterationUsdInvestedByUser[msg.sender] + amount <= preRegisterationBuyAmount, \"50 worth of tokens bought\");\r\n\t\t\t\tpreRegisterationUsdInvestedByUser[msg.sender] += amount;\r\n\t\t\t}\r\n\t\t} else if (stage == 1) {\r\n\t\t\tprice = phase1Price;\r\n\t\t} else if (stage == 2) {\r\n\t\t\tprice = phase2Price;\r\n\t\t} else if (stage == 3) {\r\n\t\t\tprice = phase3Price;\r\n\t\t} else if (stage == 4) {\r\n\t\t\tprice = phase4Price;\r\n\t\t} else if (stage == 5) {\r\n\t\t\tprice = phase5Price;\r\n\t\t} else if (stage == 6) {\r\n\t\t\tprice = phase6Price;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 tokenAmount = (amount * (10 ** 18)) / price;\r\n\t\trequire(amount >= minBuyAmount, \"Cannot buy less than minimum Buy Amount\"); \r\n\t\trequire(amount <= maxBuyAmount, \"Cannot buy more than Max Buy Amount\");\r\n\t\tif (stage == 0) {\r\n\t\t\ttokenSoldSeedSale += tokenAmount;\r\n\t\t\trequire(tokenSoldSeedSale <= phase0Supply, \"Seed Phase sold out\");\r\n\t\t\tseedSaleAmountRaised += amount;\r\n\t\t\tseedSaleUsdInvestedByUser[msg.sender] += amount;\r\n\t\t\tseedSaleTokenBoughtUser[msg.sender] += tokenAmount;\r\n\t\t\tif (token == usdc) {\r\n\t\t\t\tdistributeSeedSaleRevenue(amount, msg.sender, usdc);\r\n\t\t\t} else if (token == usdt) {\r\n\t\t\t\tdistributeSeedSaleRevenue(amount, msg.sender, usdt);\r\n\t\t\t}\r\n\t\t} else if (stage >= 1 && stage <= 4) {\r\n\t\t\ttokensSold += tokenAmount;\r\n\t\t\tamountRaised += amount;\r\n\t\t\tsaleUsdInvestedByUser[msg.sender] += amount;\r\n\t\t\tsaleTokenBoughtUser[msg.sender] += tokenAmount;\r\n\t\t\trequire(saleUsdInvestedByUser[msg.sender] <= maxPurchaseByUser, \"Cannot Purchase more than $50.000 worth of token\");\r\n\t\t\tif (token == usdc) {\r\n\t\t\t\tdistributeRevenue(amount, msg.sender, usdc);\r\n\t\t\t} else if (token == usdt) {\r\n\t\t\t\tdistributeRevenue(amount, msg.sender, usdt);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttokensSold += tokenAmount;\r\n\t\t\trequire(tokensSold <= phase6Supply, \"SOLD OUT!!\"); \r\n\t\t\tamountRaised += amount;\r\n\t\t\tsaleUsdInvestedByUser[msg.sender] += amount;\r\n\t\t\tsaleTokenBoughtUser[msg.sender] += tokenAmount;\r\n\t\t\tbonusSaleUsdInvestedByUser[msg.sender] += amount;\r\n\t\t\tbonusTokenBoughtUser[msg.sender] += tokenAmount;\r\n\t\t\trequire(bonusSaleUsdInvestedByUser[msg.sender] <= maxPurchaseByUser,\r\n\t\t\t\t\"Cannot Purchase more than $50.000 worth of token in bonus Sale\");\r\n\t\t\tif (token == usdc) {\r\n\t\t\t\tdistributeBonusRevenue(amount, msg.sender, usdc);\r\n\t\t\t} else if (token == usdt) {\r\n\t\t\t\tdistributeBonusRevenue(amount, msg.sender, usdt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttotalUsdInvestedByUser[msg.sender] += amount;\r\n\t\ttotalTokenBoughtUser[msg.sender] += tokenAmount;\r\n\t\tVesting(vestingContract).vestTokens(msg.sender, tokenAmount);\r\n\t\temit TokensBought(msg.sender, amount, tokenAmount, stage);\r\n\r\n\t}\r\n\r\n\tfunction distributeRevenue(uint256 amount, address user, address token) private {\r\n\t\tuint256 pool = (amount * poolPercentage) / 10000;\r\n\t\tif (token == usdt) {\r\n\t\t\tIERC20(token).safeTransferFrom(user, address(this), pool);\r\n\t\t\tIERC20(token).safeIncreaseAllowance(address(uniswapV2Router), pool);\r\n\t\t\tuint256 poolusdc = swapUsdtForUsdc(pool);\r\n\t\t\tpoolAmount += poolusdc;\r\n\t\t} else {\r\n\t\t\tpoolAmount += pool;\r\n\t\t\tIERC20(token).safeTransferFrom(user, address(this), pool);\r\n\t\t}\r\n\t\tuint256 EOODAmount = (amount * EOODPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, bnqEOOD, EOODAmount);\r\n\t\tuint256 techAmount = (amount * techJSCPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, sepaWallet, sepaCommision);\r\n\t\tIERC20(token).safeTransferFrom(user, bnqTechJSC, techAmount - sepaCommision);\r\n\t\tuint256 salesAmount = (amount * salesPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, salesWallet, salesAmount);\r\n\t\tuint256 marketingAmount = (amount * marketingJSCPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, bnqMarketingJSC, marketingAmount);\r\n\t\tuint256 board = (amount * boardPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, boardWallet, board);\r\n\t\tuint256 referalTotalAmount = (amount * affiliatePercentage) / 10000;\r\n\t\tuint256 referalAmount = distributeToken(user, amount, token);\r\n\t\tif (referalTotalAmount > referalAmount) {\r\n\t\t\tIERC20(token).safeTransferFrom(user, topAccount, referalTotalAmount - referalAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction distributeSeedSaleRevenue(uint256 amount, address user, address token) private {\r\n\r\n\t\tuint256 EOODAmount = (amount * seedEOODPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, bnqEOOD, EOODAmount);\r\n\t\tuint256 techAmount = (amount * seedTechJSCPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, sepaWallet, sepaCommision);\r\n\t\tIERC20(token).safeTransferFrom(user, bnqTechJSC, techAmount - sepaCommision);\r\n\t\tuint256 marketingAmount = (amount * seedMarketingJSCPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, bnqMarketingJSC, marketingAmount);\r\n\t\tuint256 referalTotalAmount = (amount * seedAffiliatePercentage) / 10000;\r\n\t\tuint256 referalAmount;\r\n\t\tif (Referal(referalContract).getReferrer(user) != address(0)) {\r\n\t\t\tif (totalUsdInvestedByUser[Referal(referalContract).getReferrer(user)] >= minBuyAmount) {\r\n\t\t\t\tIERC20(token).safeTransferFrom(user, Referal(referalContract).getReferrer(user), amount * (levelToCommision[1]) / 10000);\r\n\t\t\t\treferalIncome[Referal(referalContract).getReferrer(user)] += amount * (levelToCommision[1]) / 10000;\r\n\t\t\t\trewardFromUser[Referal(referalContract).getReferrer(user)][user] += amount * (levelToCommision[1]) / 10000;\r\n\t\t\t\temit ReferalIncomeDistributed(user, Referal(referalContract).getReferrer(user), amount,\r\n\t\t\t\t\tamount * (levelToCommision[1]) / 10000, 1, getStage());\r\n\t\t\t\treferalAmount = amount * (levelToCommision[1]) / 10000;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (referalTotalAmount > referalAmount) {\r\n\t\t\tIERC20(token).safeTransferFrom(user, topAccount, referalTotalAmount - referalAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction distributeBonusRevenue(uint256 amount, address user, address token) private {\r\n\t\tuint256 pool = (amount * poolPercentage) / 10000;\r\n\t\tif (token == usdt) {\r\n\t\t\tIERC20(token).safeTransferFrom(user, address(this), pool);\r\n\t\t\tIERC20(token).safeIncreaseAllowance(address(uniswapV2Router), pool);\r\n\t\t\tuint256 poolusdc = swapUsdtForUsdc(pool);\r\n\t\t\tpoolAmount += poolusdc;\r\n\t\t} else {\r\n\t\t\tpoolAmount += pool;\r\n\t\t\tIERC20(token).safeTransferFrom(user, address(this), pool);\r\n\t\t}\r\n\t\tuint256 EOODAmount = (amount * bonusEOODPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, bnqEOOD, EOODAmount);\r\n\t\tuint256 techAmount = (amount * bonusTechJSCPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, sepaWallet, sepaCommision);\r\n\t\tIERC20(token).safeTransferFrom(user, bnqTechJSC, techAmount - sepaCommision);\r\n\t\tuint256 salesAmount = (amount * bonusSalesPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, salesWallet, salesAmount);\r\n\t\tuint256 marketingAmount = (amount * bonusMarketingJSCPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, bnqMarketingJSC, marketingAmount);\r\n\t\tuint256 board = (amount * bonusBoardPercentage) / 10000;\r\n\t\tIERC20(token).safeTransferFrom(user, boardWallet, board);\r\n\t\tuint256 referalTotalAmount = (amount * affiliatePercentage) / 10000;\r\n\t\tuint256 referalAmount = distributeToken(user, amount, token);\r\n\t\tif (referalTotalAmount > referalAmount) {\r\n\t\t\tIERC20(token).safeTransferFrom(user, topAccount, referalTotalAmount - referalAmount);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction distributeToken(address user, uint256 amount, address token) private returns(uint256 total) {\r\n\t\tuint totalItemCount = 10;\r\n\t\taddress _user = user;\r\n\t\tfor (uint i = 1; i <= totalItemCount; i++) {\r\n\t\t\tif (Referal(referalContract).getReferrer(_user) != address(0)) {\r\n\t\t\t\tif (i == 1) {\r\n\t\t\t\t\tif (totalUsdInvestedByUser[Referal(referalContract).getReferrer(_user)] >= minBuyAmount) {\r\n\t\t\t\t\t\tIERC20(token).safeTransferFrom(user, Referal(referalContract).getReferrer(_user), amount * (levelToCommision[i]) / 10000);\r\n\t\t\t\t\t\treferalIncome[Referal(referalContract).getReferrer(_user)] += amount * (levelToCommision[i]) / 10000;\r\n\t\t\t\t\t\trewardFromUser[Referal(referalContract).getReferrer(_user)][_user] += amount * (levelToCommision[i]) / 10000;\r\n\t\t\t\t\t\temit ReferalIncomeDistributed(user, Referal(referalContract).getReferrer(_user), amount,\r\n\t\t\t\t\t\t\tamount * (levelToCommision[i]) / 10000, i, getStage());\r\n\t\t\t\t\t\ttotal += amount * (levelToCommision[i]) / 10000;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_user = Referal(referalContract).getReferrer(_user);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (getLevelsUnlocked(Referal(referalContract).getReferrer(_user)) >= i) {\r\n\t\t\t\t\t\tIERC20(token).safeTransferFrom(user, Referal(referalContract).getReferrer(_user), amount * (levelToCommision[i]) / 10000);\r\n\t\t\t\t\t\treferalIncome[Referal(referalContract).getReferrer(_user)] += amount * (levelToCommision[i]) / 10000;\r\n\t\t\t\t\t\trewardFromUser[Referal(referalContract).getReferrer(user)][user] += amount * (levelToCommision[i]) / 10000;\r\n\t\t\t\t\t\temit ReferalIncomeDistributed(user, Referal(referalContract).getReferrer(_user), amount,\r\n\t\t\t\t\t\t\tamount * (levelToCommision[i]) / 10000, i, getStage());\r\n\t\t\t\t\t\ttotal += amount * (levelToCommision[i]) / 10000;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_user = Referal(referalContract).getReferrer(_user);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn total;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction getStagePrice(uint256 stage) public view returns(uint256 price) {\r\n\t\tif (stage == 0) {\r\n\t\t\tprice = phase0Price;\r\n\t\t} else if (stage == 1) {\r\n\t\t\tprice = phase1Price;\r\n\t\t} else if (stage == 2) {\r\n\t\t\tprice = phase2Price;\r\n\t\t} else if (stage == 3) {\r\n\t\t\tprice = phase3Price;\r\n\t\t} else if (stage == 4) {\r\n\t\t\tprice = phase4Price;\r\n\t\t} else if (stage == 5) {\r\n\t\t\tprice = phase5Price;\r\n\t\t} else if (stage == 6) {\r\n\t\t\tprice = phase6Price;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getLevelsUnlocked(address user) public view returns(uint256 levels) {\r\n\t\tuint256 totalActivePartners = Referal(referalContract).getAllRefrees(user).length;\r\n\t\tfor (uint256 i = 0; i < totalActivePartners; i++) {\r\n\t\t\tif (totalUsdInvestedByUser[Referal(referalContract).getAllRefrees(user)[i]] >= unlockPrice) {\r\n\t\t\t\tlevels++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getEligibleLevel(address user) external view returns(uint256 level) {\r\n\t\taddress _user = user;\r\n\t\tfor (uint i = 1; i <= 10; i++) {\r\n\t\t\tif (Referal(referalContract).getReferrer(_user) != address(0)) {\r\n\t\t\t\t_user = Referal(referalContract).getReferrer(_user);\r\n\t\t\t} else {\r\n\t\t\t\treturn (i - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (10);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t/*\r\n\t@param token address of token to be withdrawn\r\n\t@param wallet wallet that gets the token\r\n\t*/\r\n\r\n\tfunction withdrawTokens(IERC20 token, address wallet) external onlyOwner {\r\n\t\tuint256 balanceOfContract = token.balanceOf(address(this));\r\n\t\ttoken.transfer(wallet, balanceOfContract);\r\n\t}\r\n\r\n\t/*\r\n    @param wallet address that gets the Eth\r\n     */\r\n\r\n\tfunction withdrawFunds(address wallet) external onlyOwner {\r\n\t\tuint256 balanceOfContract = address(this).balance;\r\n\t\tpayable(wallet).transfer(balanceOfContract);\r\n\t}\r\n\r\n\tfunction getEligibleAmount(address user) public view returns(uint256 amount, address highest, uint256 otherAmount,\r\n\t\tuint256 highestAmount) {\r\n\t\taddress[] memory getRefrees = Referal(referalContract).getAllRefrees(user);\r\n\t\tuint256 total = getRefrees.length;\r\n\t\tfor (uint256 i = 0; i < total; i++) {\r\n\t\t\tif (totalUsdInvestedByUser[getRefrees[i]] > totalUsdInvestedByUser[highest]) {\r\n\t\t\t\thighest = getRefrees[i];\r\n\t\t\t\totherAmount += highestAmount;\r\n\t\t\t\thighestAmount = totalUsdInvestedByUser[getRefrees[i]];\r\n\t\t\t} else {\r\n\t\t\t\totherAmount += totalUsdInvestedByUser[getRefrees[i]];\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (otherAmount < highestAmount) {\r\n\t\t\tamount = 2 * otherAmount;\r\n\t\t} else {\r\n\t\t\tamount = otherAmount + highestAmount;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getPoolAndAmount(address user) external view returns(uint256 pool, uint256 amountRemaining) {\r\n\t\t(uint256 amount, , , ) = getEligibleAmount(user);\r\n\t\tif (amount < poolToSale[1]) {\r\n\t\t\tpool = 1;\r\n\t\t\tamountRemaining = poolToSale[1] - amount;\r\n\t\t}\r\n\t\tif (amount >= poolToSale[1] && amount < poolToSale[2]) {\r\n\t\t\tpool = 2;\r\n\t\t\tamountRemaining = poolToSale[2] - amount;\r\n\t\t}\r\n\t\tif (amount >= poolToSale[2] && amount < poolToSale[3]) {\r\n\t\t\tpool = 3;\r\n\t\t\tamountRemaining = poolToSale[3] - amount;\r\n\t\t}\r\n\t\tif (amount >= poolToSale[3] && amount < poolToSale[4]) {\r\n\t\t\tpool = 4;\r\n\t\t\tamountRemaining = poolToSale[4] - amount;\r\n\t\t}\r\n\t\tif (amount >= poolToSale[4] && amount <= poolToSale[5]) {\r\n\t\t\tpool = 5;\r\n\t\t\tamountRemaining = poolToSale[5] - amount;\r\n\t\t}\r\n\t\tif (amount > poolToSale[5]) {\r\n\t\t\tpool = 5;\r\n\t\t\tamountRemaining = 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction distributePoolAmount() external onlyOwner {\r\n\t\tuint256 totalUsers = investors.length;\r\n\t\tuint256 poolShare = (poolAmount - poolAmountDistributed) / 5;\r\n\t\tfor (uint256 i = 1; i <= 5; i++) {\r\n\t\t\tuint256 poolAmountRaised = getUserAmountInvested(i);\r\n\t\t\tfor (uint256 j = 0; j < totalUsers; j++) {\r\n\t\t\t\taddress user = investors[j];\r\n\t\t\t\t(uint256 amount, , , ) = getEligibleAmount(user);\r\n\t\t\t\tif (amount >= poolToSale[i]) {\r\n\t\t\t\t\tuint256 userAmount = ((saleUsdInvestedByUser[user]) * poolShare) / poolAmountRaised;\r\n\t\t\t\t\tIERC20(usdc).transfer(user, userAmount);\r\n\t\t\t\t\tpoolAmountDistributed += userAmount;\r\n\t\t\t\t\tpoolReward[user] += userAmount;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserAmountInvested(uint256 pool) public view returns(uint256 _poolAmount){\r\n\t\t    uint256 totalUsers = investors.length;\r\n            for (uint256 j = 0; j < totalUsers; j++) {\r\n\t\t\t\t(uint256 amount, , , ) = getEligibleAmount(investors[j]);\r\n\t\t\t\tif (amount >= poolToSale[pool]) {\r\n\t\t\t\t\t_poolAmount += saleUsdInvestedByUser[investors[j]];\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t}\r\n\r\n\tfunction swapUsdtForUsdc(uint256 usdtAmount) private returns(uint256 usdcAmount) {\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = usdt;\r\n\t\tpath[1] = usdc;\r\n\t\tuint[] memory amounts = new uint[](2);\r\n\t\tuint[] memory estimatedAmounts = new uint[](2);\r\n\t\testimatedAmounts = uniswapV2Router.getAmountsOut(usdtAmount, path);\r\n\t\tamounts = uniswapV2Router.swapExactTokensForTokens(\r\n\t\t\tusdtAmount,\r\n\t\t\t(estimatedAmounts[1] * (10000 - slippageTolerance)) / 10000,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp + 1000\r\n\t\t);\r\n\t\treturn (amounts[1]);\r\n\t}\r\n\t\r\n\tfunction updateAmountRaised(uint256 _seedSaleAmountRaised, uint256 _amountRaised) external  onlyOwner{\r\n\t\tseedSaleAmountRaised = _seedSaleAmountRaised;\r\n\t\tamountRaised = _amountRaised;\r\n\t}\r\n\r\n\tfunction updateTokenSold(uint256 _tokenSoldSeedSale, uint256 _tokensSold) external onlyOwner{\r\n\t\ttokenSoldSeedSale = _tokenSoldSeedSale;\r\n\t\ttokensSold = _tokensSold;\r\n\t}\r\n\r\n\tfunction updateInvestors(address[] memory _investors) external onlyOwner{\r\n\t\tuint256 total = _investors.length;\r\n\t\tfor(uint256 i = 0; i < total ; i++){\r\n\t\t\tif(!added[_investors[i]]){\r\n\t\t\t\tadded[_investors[i]] = true;\r\n\t\t\t\tinvestors.push(_investors[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\r\n\tfunction updateSeedSaleTokenBoughtUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tseedSaleTokenBoughtUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n \r\n\tfunction updateTotalTokenBoughtUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\ttotalTokenBoughtUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateSeedSaleUsdInvestedByUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tseedSaleUsdInvestedByUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateSaleTokenBoughtUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tsaleTokenBoughtUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updatePreRegisterationUsdInvestedByUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tpreRegisterationUsdInvestedByUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateTotalUsdInvestedByUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\ttotalUsdInvestedByUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateSaleUsdInvestedByUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tsaleUsdInvestedByUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateBonusSaleUsdInvestedByUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tbonusSaleUsdInvestedByUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\r\n    function updateBonusTokenBoughtUser(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tbonusTokenBoughtUser[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n\r\n    function updatePoolReward(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\tpoolReward[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n\r\n    function updateReferalIncome(address[] memory users, uint256[] memory amounts) external onlyOwner{\r\n\t\tuint256 total = users.length;\r\n\t\tfor(uint256 i = 0; i< total; i++){\r\n\t\t\treferalIncome[users[i]] = amounts[i];\r\n\t\t}\r\n\t}\r\n    \t\r\n\r\n    function updateRewardFromUsers(ReferUpdated[] memory referDetails) external onlyOwner{\r\n\t\tuint256 total = referDetails.length;\r\n\t\tfor (uint256 i = 0; i < total; i++){\r\n\t\t\tuint256 totalUsers = referDetails[i].users.length;\r\n\t\t\tfor( uint256 j = 0; j < totalUsers; j++){\r\n               rewardFromUser[referDetails[i].referrer][referDetails[i].users[j]] = referDetails[i].amounts[j];\r\n\t\t\t}\r\n          \r\n\t\t}\r\n\t}\r\n\r\n\tfunction updatePoolAmount(uint256 _poolAmount, uint256 _poolAmountDistributed) external  onlyOwner{\r\n\t\tpoolAmount = _poolAmount;\r\n\t\tpoolAmountDistributed = _poolAmountDistributed;\r\n\t}\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"banqiroToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"BuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referalContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"ContractsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase0Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase1Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase2Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase3Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase4Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase5Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase6Price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"levell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"ReferalIncomeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"SlippageToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase0Supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase1Supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase2Supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase3Supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase4Supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase5Supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase6Supply\",\"type\":\"uint256\"}],\"name\":\"SupplyEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EOODPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"added\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliatePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banqiro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnqEOOD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnqMarketingJSC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnqTechJSC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusBoardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEOODPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMarketingJSCPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusSaleUsdInvestedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusSalesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusTechJSCPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusTokenBoughtUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase2Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase3Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase4Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase5Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase6Price\",\"type\":\"uint256\"}],\"name\":\"editPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEligibleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"otherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEligibleLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLevelsUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"levels\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolAndAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getStagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"getUserAmountInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelToCommision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingJSCPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase0Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase0Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase4Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase4Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase5Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase5Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase6Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase6Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAmountDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolToSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preRegisterationBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preRegisterationStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preRegisterationUsdInvestedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referalContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardFromUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleTokenBoughtUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleUsdInvestedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedAffiliatePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedEOODPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarketingJSCPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedSaleAmountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedSaleBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedSaleStartime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seedSaleTokenBoughtUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seedSaleUsdInvestedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedTechJSCPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sepaCommision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sepaWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techJSCPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSoldSeedSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokenBoughtUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUsdInvestedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seedSaleAmountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"updateAmountRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EOODPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_techJSCPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salesPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_boardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingJSCPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliatePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolPercentage\",\"type\":\"uint256\"}],\"name\":\"updateBonusPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateBonusSaleUsdInvestedByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateBonusTokenBoughtUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referalContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"updateInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commision\",\"type\":\"uint256\"}],\"name\":\"updateLevelToCommision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"updateMinMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmountDistributed\",\"type\":\"uint256\"}],\"name\":\"updatePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updatePoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updatePreRegisterationUsdInvestedByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateReferalIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct BanqiroTokenICO.ReferUpdated[]\",\"name\":\"referDetails\",\"type\":\"tuple[]\"}],\"name\":\"updateRewardFromUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EOODPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_techJSCPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salesPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_boardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingJSCPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliatePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolPercentage\",\"type\":\"uint256\"}],\"name\":\"updateSalePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateSaleTokenBoughtUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateSaleUsdInvestedByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seedEOODPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seedMarketingJSCPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seedTechJSCPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seedAffiliatePercentage\",\"type\":\"uint256\"}],\"name\":\"updateSeedPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateSeedSaleTokenBoughtUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateSeedSaleUsdInvestedByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"updateSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase0Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase1Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase2Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase3Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase4Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase5Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase6Supply\",\"type\":\"uint256\"}],\"name\":\"updateSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seedSaleStartime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preRegisterationStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase1StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSoldSeedSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"updateTokenSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateTotalTokenBoughtUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateTotalUsdInvestedByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bnqEOOD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnqTechJSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_salesWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnqMarketingJSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_topAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sepaWallet\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updatebanqiroTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BanqiroTokenICO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000eb49a658d2bab9567c872a7214b00d3895ed3126", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://811597c1307938290dc804efc46e0be7579bb01104c5818f7a2a521f8c4c09ce"}