{"SourceCode": "// Sources flattened with hardhat v2.9.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.6.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAutoBSW.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAutoBSW {\r\n    function balanceOf() external view returns(uint);\r\n    function totalShares() external view returns(uint);\r\n\r\n    struct UserInfo {\r\n        uint shares; // number of shares for a user\r\n        uint lastDepositedTime; // keeps track of deposited time for potential penalty\r\n        uint BswAtLastUserAction; // keeps track of Bsw deposited at the last user action\r\n        uint lastUserActionTime; // keeps track of the last user action time\r\n    }\r\n\r\n    function userInfo(address user) external view returns (UserInfo memory);\r\n}\r\n\r\n\r\n// File contracts/SmartChefV2.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract SmartChefV2 is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint public totalStakedSupply;\r\n    uint public lastRewardBlock;\r\n    address[] public listRewardTokens;\r\n    IERC20 public stakeToken;\r\n    uint256 public stakingEndBlock;\r\n\r\n    IAutoBSW autoBSW;\r\n    uint public holderPoolMinAmount;\r\n    uint public maxLimitPerUser;\r\n\r\n    struct RewardToken {\r\n        uint rewardPerBlock;\r\n        uint startBlock;\r\n        uint accTokenPerShare; // Accumulated Tokens per share, times 1e12.\r\n        uint rewardsForWithdrawal;\r\n        bool enabled; // true - enable; false - disable\r\n    }\r\n\r\n    struct UserInfo {\r\n        RewardToken[] rewardTokens;\r\n        uint[] pendingReward;\r\n        uint totalStakedSupply;\r\n        IERC20 stakeToken;\r\n        uint stakingEndBlock;\r\n        uint holderPoolAmount;\r\n        uint holderPoolMinAmount;\r\n        uint stakedAmount;\r\n        uint maxLimitPerUser;\r\n    }\r\n\r\n    mapping (address => uint) public stakedAmount; // Info of each user staked amount\r\n    mapping (address => mapping(address => uint)) public rewardDebt; //user => (rewardToken => rewardDebt);\r\n    mapping (address => RewardToken) public rewardTokens;\r\n\r\n    event AddNewTokenReward(address token);\r\n    event DisableTokenReward(address token);\r\n    event ChangeTokenReward(address indexed token, uint rewardPerBlock, uint startBlock);\r\n    event StakeToken(address indexed user, uint amount);\r\n    event UnstakeToken(address indexed user, uint amount);\r\n    event EmergencyWithdraw(address indexed user, uint amount);\r\n\r\n    constructor(IERC20 _stakeToken, uint _stakingEndBlock, IAutoBSW _autoBSW, uint _holderPoolMinAmount, uint _limitPerUser) {\r\n        require(address(_stakeToken) != address(0) && address(_autoBSW) != address(0), \"address cant be zero\");\r\n        require(_stakingEndBlock > block.number, \"bad end block\");\r\n        stakeToken = _stakeToken;\r\n        stakingEndBlock = _stakingEndBlock;\r\n        autoBSW = _autoBSW;\r\n        holderPoolMinAmount = _holderPoolMinAmount;\r\n        maxLimitPerUser = _limitPerUser;\r\n    }\r\n\r\n    modifier holderPoolCheck(address _user){\r\n        require(_getHolderPoolAmount(_user) >= holderPoolMinAmount, \"Need more stake in holder pool\");\r\n        _;\r\n    }\r\n\r\n    function isTokenInList(address _token) internal view returns(bool){\r\n        address[] memory _listRewardTokens = listRewardTokens;\r\n        for(uint i = 0; i < _listRewardTokens.length; i++){\r\n            if(_listRewardTokens[i] == _token){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getUserStakedAmount(address _user) public view returns(uint){\r\n        return stakedAmount[_user];\r\n    }\r\n\r\n    function getListRewardTokens() public view returns(address[] memory list){\r\n        list = new address[](listRewardTokens.length);\r\n        list = listRewardTokens;\r\n        return list;\r\n    }\r\n\r\n    function getHolderPoolAmount(address _user) public view returns(uint){\r\n        return _getHolderPoolAmount(_user);\r\n    }\r\n\r\n    function _getHolderPoolAmount(address _user) internal view returns(uint holderPoolAmount){\r\n        holderPoolAmount = autoBSW.balanceOf() * autoBSW.userInfo(_user).shares / autoBSW.totalShares();\r\n    }\r\n\r\n    function addNewTokenReward(address _newToken, uint _startBlock, uint _rewardPerBlock) public onlyOwner {\r\n        require(_newToken != address(0), \"Address shouldn't be 0\");\r\n        require(isTokenInList(_newToken) == false, \"Token is already in the list\");\r\n        listRewardTokens.push(_newToken);\r\n        if(_startBlock == 0){\r\n            rewardTokens[_newToken].startBlock = block.number + 1;\r\n        } else {\r\n            rewardTokens[_newToken].startBlock = _startBlock;\r\n        }\r\n        rewardTokens[_newToken].rewardPerBlock = _rewardPerBlock;\r\n        rewardTokens[_newToken].enabled = true;\r\n\r\n        emit AddNewTokenReward(_newToken);\r\n    }\r\n\r\n    function disableTokenReward(address _token) public onlyOwner {\r\n        require(isTokenInList(_token), \"Token not in the list\");\r\n        require(rewardTokens[_token].enabled, \"Taken already disabled\");\r\n        updatePool();\r\n        rewardTokens[_token].enabled = false;\r\n        emit DisableTokenReward(_token);\r\n    }\r\n\r\n    function enableTokenReward(address _token, uint _startBlock, uint _rewardPerBlock) public onlyOwner {\r\n        require(isTokenInList(_token), \"Token not in the list\");\r\n        require(!rewardTokens[_token].enabled, \"Reward token is enabled\");\r\n        if(_startBlock == 0){\r\n            _startBlock = block.number + 1;\r\n        }\r\n        require(_startBlock >= block.number, \"Start block Must be later than current\");\r\n        rewardTokens[_token].enabled = true;\r\n        rewardTokens[_token].startBlock = _startBlock;\r\n        rewardTokens[_token].rewardPerBlock = _rewardPerBlock;\r\n        updatePool();\r\n\r\n        emit ChangeTokenReward(_token, _rewardPerBlock, _startBlock);\r\n    }\r\n\r\n    function changeRewardPerBlock(address _token, uint _newRewardPerBlock) public onlyOwner {\r\n        require(isTokenInList(_token), \"Token not in the list\");\r\n        require(rewardTokens[_token].enabled, \"Reward token not enabled\");\r\n        updatePool();\r\n        rewardTokens[_token].rewardPerBlock = _newRewardPerBlock;\r\n        emit ChangeTokenReward(_token, _newRewardPerBlock, block.timestamp);\r\n    }\r\n\r\n    function changeStakingEndBlock(uint _newStakingEndBlock) public onlyOwner {\r\n        require(_newStakingEndBlock >= block.number, \"Must be greater than current block number\");\r\n        stakingEndBlock = _newStakingEndBlock;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint _from, uint _to) public view returns (uint) {\r\n        if(_to <= stakingEndBlock){\r\n            return _to - _from;\r\n        } else if(_from >= stakingEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return stakingEndBlock - _from;\r\n        }\r\n    }\r\n    // View function to see user info on frontend\r\n    function getUserInfo(address _user) external view returns(UserInfo memory info){\r\n        uint tokensLength = listRewardTokens.length;\r\n        info.rewardTokens = new RewardToken[](tokensLength);\r\n        for(uint i = 0; i < tokensLength; i++){\r\n            info.rewardTokens[i] = rewardTokens[listRewardTokens[i]];\r\n        }\r\n        (, info.pendingReward) = this.pendingReward(_user);\r\n        info.totalStakedSupply = totalStakedSupply;\r\n        info.stakeToken = stakeToken;\r\n        info.stakingEndBlock = stakingEndBlock;\r\n        info.holderPoolAmount = getHolderPoolAmount(_user);\r\n        info.holderPoolMinAmount = holderPoolMinAmount;\r\n        info.stakedAmount = stakedAmount[_user];\r\n        info.maxLimitPerUser = maxLimitPerUser;\r\n        return info;\r\n    }\r\n\r\n    // View function to see pending Reward on frontend\r\n    function pendingReward(address _user) external view returns (address[] memory, uint[] memory) {\r\n        uint _stakedAmount = stakedAmount[_user];\r\n        uint[] memory rewards = new uint[](listRewardTokens.length);\r\n        if(_stakedAmount == 0){\r\n            return (listRewardTokens, rewards);\r\n        }\r\n        uint _totalSupply = totalStakedSupply;\r\n        uint _multiplier = getMultiplier(lastRewardBlock, block.number);\r\n        uint _accTokenPerShare = 0;\r\n        for(uint i = 0; i < listRewardTokens.length; i++){\r\n            address curToken = listRewardTokens[i];\r\n            RewardToken memory curRewardToken = rewardTokens[curToken];\r\n            if (_multiplier != 0 && _totalSupply != 0 && curRewardToken.enabled == true) {\r\n                uint curMultiplier;\r\n                if(getMultiplier(curRewardToken.startBlock, block.number) < _multiplier){\r\n                    curMultiplier = getMultiplier(curRewardToken.startBlock, block.number);\r\n                } else {\r\n                    curMultiplier = _multiplier;\r\n                }\r\n                _accTokenPerShare = curRewardToken.accTokenPerShare +\r\n                (curMultiplier * curRewardToken.rewardPerBlock * 1e12 / _totalSupply);\r\n            } else {\r\n                _accTokenPerShare = curRewardToken.accTokenPerShare;\r\n            }\r\n            rewards[i] = (_stakedAmount * _accTokenPerShare / 1e12) - rewardDebt[_user][curToken];\r\n        }\r\n        return (listRewardTokens, rewards);\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool() public {\r\n        uint multiplier = getMultiplier(lastRewardBlock, block.number);\r\n        uint _totalSupply = totalStakedSupply; //Gas safe\r\n\r\n        lastRewardBlock = block.number;\r\n\r\n        if(multiplier == 0){\r\n            return;\r\n        }\r\n        if(_totalSupply == 0){\r\n            return;\r\n        }\r\n        for(uint i = 0; i < listRewardTokens.length; i++){\r\n            address curToken = listRewardTokens[i];\r\n            RewardToken memory curRewardToken = rewardTokens[curToken];\r\n            if(curRewardToken.enabled == false || curRewardToken.startBlock >= block.number){\r\n                continue;\r\n            } else {\r\n                uint curMultiplier;\r\n                if(getMultiplier(curRewardToken.startBlock, block.number) < multiplier){\r\n                    curMultiplier = getMultiplier(curRewardToken.startBlock, block.number);\r\n                } else {\r\n                    curMultiplier = multiplier;\r\n                }\r\n                uint tokenReward = curRewardToken.rewardPerBlock * curMultiplier;\r\n                rewardTokens[curToken].rewardsForWithdrawal += tokenReward;\r\n                rewardTokens[curToken].accTokenPerShare += (tokenReward * 1e12) / _totalSupply;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawReward() external {\r\n        _withdrawReward();\r\n    }\r\n\r\n    function _updateRewardDebt(address _user) internal {\r\n        for(uint i = 0; i < listRewardTokens.length; i++){\r\n            rewardDebt[_user][listRewardTokens[i]] = stakedAmount[_user] * rewardTokens[listRewardTokens[i]].accTokenPerShare / 1e12;\r\n        }\r\n    }\r\n\r\n    //SCN-01, SFR-02\r\n    function _withdrawReward() internal holderPoolCheck(msg.sender){\r\n        updatePool();\r\n        uint _stakedAmount = stakedAmount[msg.sender];\r\n        address[] memory _listRewardTokens = listRewardTokens;\r\n        if(_stakedAmount == 0){\r\n            return;\r\n        }\r\n        for(uint i = 0; i < _listRewardTokens.length; i++){\r\n            RewardToken storage curRewardToken = rewardTokens[_listRewardTokens[i]];\r\n            uint pending = _stakedAmount * curRewardToken.accTokenPerShare / 1e12 - rewardDebt[msg.sender][_listRewardTokens[i]];\r\n            if(pending > 0){\r\n                curRewardToken.rewardsForWithdrawal -= pending;\r\n                rewardDebt[msg.sender][_listRewardTokens[i]] = _stakedAmount * curRewardToken.accTokenPerShare / 1e12;\r\n                IERC20(_listRewardTokens[i]).safeTransfer(address(msg.sender), pending);\r\n            }\r\n        }\r\n    }\r\n\r\n    //stake tokens to the pool\r\n    function stake(uint _amount) external nonReentrant {\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        _withdrawReward();\r\n        stakeToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        stakedAmount[msg.sender] += _amount;\r\n        require(stakedAmount[msg.sender] <= maxLimitPerUser, \"limit reached\");\r\n        totalStakedSupply += _amount;\r\n        _updateRewardDebt(msg.sender);\r\n        emit StakeToken(msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw tokens from pool\r\n    function unstake(uint _amount) external nonReentrant {\r\n        uint _stakedAmount = stakedAmount[msg.sender];\r\n        require(_stakedAmount >= _amount && _amount > 0, \"Wrong token amount given\");\r\n        _withdrawReward();\r\n        stakedAmount[msg.sender] -= _amount;\r\n        totalStakedSupply -= _amount;\r\n        _updateRewardDebt(msg.sender);\r\n        stakeToken.safeTransfer(msg.sender, _amount);\r\n        emit UnstakeToken(msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyUnstake() external holderPoolCheck(msg.sender){\r\n        uint _stakedAmount = stakedAmount[msg.sender];\r\n        totalStakedSupply -= _stakedAmount;\r\n        delete stakedAmount[msg.sender];\r\n        for(uint i = 0; i < listRewardTokens.length; i++){\r\n            delete rewardDebt[msg.sender][listRewardTokens[i]];\r\n        }\r\n        stakeToken.safeTransfer(msg.sender, _stakedAmount);\r\n        emit EmergencyWithdraw(msg.sender, _stakedAmount);\r\n    }\r\n\r\n    // Withdraw reward token. EMERGENCY ONLY.\r\n    function emergencyRewardTokenWithdraw() external onlyOwner {\r\n//        require(address(stakeToken) != _token, \"Cant withdraw stake token\");\r\n//        require(IERC20(_token).balanceOf(address(this)) >= _amount, \"Not enough balance\");\r\n        for(uint i = 0; i < listRewardTokens.length; i++){\r\n            address _token = listRewardTokens[i];\r\n            uint _amount = address(stakeToken) != _token ?\r\n                IERC20(_token).balanceOf(address(this)) :\r\n                IERC20(_token).balanceOf(address(this)) - totalStakedSupply;\r\n            if(_amount > 0) IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IAutoBSW\",\"name\":\"_autoBSW\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_holderPoolMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerUser\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddNewTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"name\":\"ChangeTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DisableTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"addNewTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"changeRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakingEndBlock\",\"type\":\"uint256\"}],\"name\":\"changeStakingEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"disableTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRewardTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"enableTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHolderPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsForWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct SmartChefV2.RewardToken[]\",\"name\":\"rewardTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingReward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderPoolMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimitPerUser\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartChefV2.UserInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderPoolMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsForWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartChefV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000965f527d9159dce6288a2219db51fc6eef120dd100000000000000000000000000000000000000000000000000000000016dbf29000000000000000000000000a4b20183039b2f9881621c3a03732fbf0bfdff1000000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000005150ae84a8cdf00000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a343b122c75a74ea29190b843b43e657bae93427824896492568c8ef0628de60"}