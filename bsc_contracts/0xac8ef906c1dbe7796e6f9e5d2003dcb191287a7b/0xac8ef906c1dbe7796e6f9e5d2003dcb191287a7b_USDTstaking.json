{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function burn(address recipient, uint256 amount) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"},\"StakingValues (6).sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\n contract USDTstaking  is Ownable {\\r\\n     using SafeMath for uint256;\\r\\n     using SafeERC20 for IERC20;\\r\\n     address public  staking;\\r\\n     address public  Insurance;\\r\\n     address private  fees;\\r\\n     uint128 public  incomeWithoutref = 150;\\r\\n     uint128 public incomeWithref = 180;\\r\\n     uint128 public  PrWithoutRef= 40;\\r\\n     uint128 public PrWithRef = 60;\\r\\n     uint256 private rate = 20;\\r\\n     uint256 public MinDep = 30*10**18; \\r\\n     uint256 public MaxDep = 500*10**18;\\r\\n     uint256 constant MAXRLIMIT = 1000;\\r\\n     bool eranCld = true;\\r\\n\\r\\n\\r\\n        uint256 public Min1 = 100*10**18;\\r\\n        uint256 public Min2 = 200*10**18;\\r\\n        uint256 public Min3 = 300*10**18;\\r\\n        uint256 public Min4 = 400*10**18;\\r\\n\\r\\n    struct Plan {\\r\\n        uint256 overallStaked;\\r\\n        uint256 overallWithdral;\\r\\n        uint256 stakesCount;\\r\\n        uint256 stakeDuration;\\r\\n        uint256 depositDeduction;\\r\\n        uint256 withdrawDeduction;\\r\\n        bool conclude;\\r\\n    }\\r\\n\\r\\n    struct Staking {\\r\\n        uint256 amount;\\r\\n        uint256 stakeAt;\\r\\n        uint256 endstakeAt;\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e Staking[])) public stakes;\\r\\n    mapping(uint256 =\\u003e Plan) public plans;\\r\\n    \\r\\n    struct ReferralStake {\\r\\n        uint256 stakedAmount;\\r\\n        uint256 stakeAt;\\r\\n        address[] claimers;\\r\\n    }\\r\\n    struct Referral {\\r\\n        address referrer;\\r\\n        address[] referees;\\r\\n        mapping(address =\\u003e ReferralStake[]) referralStakes;\\r\\n    }\\r\\n    mapping(address =\\u003e Referral) public referrals; \\r\\n    struct Records{\\r\\n      //  both of these values are responsible for handle the restaking situations\\r\\n        uint128 L;      \\r\\n        uint128 W;\\r\\n        uint256 TotalStaked;\\r\\n        uint256 Count180;\\r\\n        uint256 cliamAmount;\\r\\n        uint256 claimDaily;\\r\\n        uint256 claimLevel;\\r\\n        uint256 claimDirect;\\r\\n        uint256 lastUpdate;\\r\\n\\r\\n    }\\r\\n  \\r\\n    uint128 constant referralLevels = 5;\\r\\n    uint128  level = 3;\\r\\n    mapping(address =\\u003e Records) public record;\\r\\n    mapping(uint256 =\\u003e uint256) public referralLevelEarnings;\\r\\n    mapping(uint256 =\\u003e uint256) public referralEarnings;\\r\\n\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        plans[0].stakeDuration = 365 days;\\r\\n        \\r\\n        referralEarnings[0] = 800;        \\r\\n        referralEarnings[1] = 200;\\r\\n        referralEarnings[2] = 100;\\r\\n\\r\\n         referralLevelEarnings[0] = 1000;\\r\\n         referralLevelEarnings[1] = 800;\\r\\n         referralLevelEarnings[2] = 500;\\r\\n         referralLevelEarnings[3] = 300;\\r\\n         referralLevelEarnings[4] = 200;\\r\\n    \\r\\n    }\\r\\n\\r\\nfunction referralStake(address _referrer,uint256 amount) public   {\\r\\n    require(_referrer != msg.sender \\u0026\\u0026 _referrer != address(0), \\\"You can\\u0027t refer yourself\\\");\\r\\n    if (referrals[msg.sender].referrer == address(0)) {\\r\\n        Records storage referrerRecord = record[_referrer]; \\r\\n        if (!hasReferees(_referrer)) {\\r\\n            referrerRecord.lastUpdate =  block.timestamp;\\r\\n        }\\r\\n        if (referrerRecord.L \\u003c referrerRecord.W) {\\r\\n            referrerRecord.L++;\\r\\n        }\\r\\n        referrals[msg.sender].referrer = _referrer;\\r\\n        referrals[_referrer].referees.push(msg.sender);      \\r\\n    }\\r\\n   stake(amount);  \\r\\n    }\\r\\n    function stake(uint256 amount)  public   {\\r\\n        require(amount \\u003e 0,\\\"amount should be greater than zero\\\");\\r\\n         Records storage re =  record[msg.sender];\\r\\n        uint256 amt = getTotalStakedAmount(msg.sender);\\r\\n        require(amt == 0,\\\"you can not restake when your plan is still active\\\");\\r\\n        require(amount \\u003e= MinDep \\u0026\\u0026 amount \\u003c= MaxDep ,\\\"Enter the correct amount\\\"); \\r\\n        Plan storage plan = plans[0];\\r\\n        require(!plan.conclude, \\\"Staking in this pool is concluded\\\");\\r\\n        require(IERC20(staking).transferFrom(msg.sender, address(this), amount),\\\"transfer failed\\\");  \\r\\n        uint256 sub = amount.mul(plan.depositDeduction).div(1000);\\r\\n        uint256 pooldeduction = amount.mul(100).div(1000);\\r\\n        IERC20(staking).transfer(Insurance,pooldeduction);\\r\\n         if(sub \\u003e 0){\\r\\n        IERC20(staking).transfer(fees,sub);\\r\\n         }\\r\\n        uint256 stakelength = stakes[0][msg.sender].length;\\r\\n        if(stakelength == 0) {\\r\\n            plan.stakesCount += 1;\\r\\n        }\\r\\n         stakes[0][msg.sender].push();\\r\\n        Staking storage _staking = stakes[0][msg.sender][stakelength];\\r\\n        if(amt == 0) {\\r\\n             re.lastUpdate = block.timestamp;\\r\\n        }      \\r\\n         re.TotalStaked += amount.sub(sub);\\r\\n         _staking.amount = amount.sub(sub);\\r\\n         _staking.stakeAt = block.timestamp;\\r\\n        _staking.endstakeAt =  block.timestamp + plan.stakeDuration;\\r\\n        plan.overallStaked = plan.overallStaked.add(\\r\\n            amount.sub(sub)\\r\\n        );\\r\\n        if(referrals[msg.sender].referrer != address(0)) {\\r\\n            address _referrer = referrals[msg.sender].referrer;\\r\\n            ReferralStake storage _referralStake = referrals[_referrer].referralStakes[msg.sender].push();\\r\\n            _referralStake.stakedAmount = _staking.amount;\\r\\n            _referralStake.stakeAt = block.timestamp;\\r\\n    }\\r\\n    }\\r\\n       function earnedToken(address user)public  view returns(uint256) {\\r\\n           uint256 amount = 0;\\r\\n           uint256 income = 0;\\r\\n           uint256 pr = 0;\\r\\n            if (getuserRefLenght(user) \\u003e= 2 \\u0026\\u0026 record[user].Count180 \\u003c= 5) {\\r\\n                income = incomeWithref;\\r\\n                pr = PrWithRef;\\r\\n            }\\r\\n            else{\\r\\n                income = incomeWithoutref;\\r\\n                pr = PrWithoutRef;\\r\\n            }\\r\\n         for (uint256 i = 0; i \\u003c stakes[0][user].length; i++) {\\r\\n           Staking memory _staking = stakes[0][user][i];\\r\\n           if(_staking.amount \\u003e 0) {\\r\\n              uint256 stakingDays = countBusinessDays2(_staking.stakeAt,block.timestamp);\\r\\n                  uint256  amts  = (_staking.amount * pr)/10000;          \\r\\n                        amount = amount.add(amts.mul(stakingDays));  \\r\\n           }     \\r\\n         } \\r\\n          if(amount \\u003e 0){\\r\\n            uint256 remainingRewards = ((balanceInfo()? getTotalStakedAmount(user) : (getTotalStakedAmount(user).mul(income)).div(100)) - record[user].cliamAmount);\\r\\n            if (amount \\u003e remainingRewards) {\\r\\n                amount = remainingRewards;\\r\\n            }\\r\\n           } \\r\\n         if(amount \\u003e 0){\\r\\n            return (amount);\\r\\n         }\\r\\n         else{\\r\\n            return (0)  ;\\r\\n         } \\r\\n        }\\r\\n  function countBusinessDays2 (uint256 startDate, uint256 endDate) internal pure returns (uint256) {\\r\\n        return  (endDate - startDate)/1 days;\\r\\n    }\\r\\n    function balanceInfo() public view returns(bool) {\\r\\n        uint256 rem = 0;\\r\\n        if(plans[0].overallStaked \\u003e plans[0].overallWithdral){\\r\\n        rem =  plans[0].overallStaked.sub(plans[0].overallWithdral);\\r\\n        }\\r\\n       if((rem.mul(rate)).div(1000) \\u003c (IERC20(staking).balanceOf(address(this)))){\\r\\n        return false;\\r\\n       }\\r\\n       else return true;\\r\\n    }\\r\\n    function claimEarned()  public {\\r\\n        Records storage re =  record[msg.sender];\\r\\n              uint256 income = 0;\\r\\n           uint256 pr = 0;\\r\\n                 if (getuserRefLenght(msg.sender) \\u003e= 2  \\u0026\\u0026 re.Count180 \\u003c= 5) {\\r\\n                 income = incomeWithref;\\r\\n                 pr = PrWithRef;\\r\\n            }\\r\\n            else{\\r\\n                income = incomeWithoutref;\\r\\n                pr = PrWithoutRef;\\r\\n            }\\r\\n        uint256 claim = 0;\\r\\n        require(eranCld,\\\"claim is stop\\\");\\r\\n         for (uint256 i = 0; i \\u003c stakes[0][_msgSender()].length; i++) {\\r\\n           Staking storage _staking = stakes[0][_msgSender()][i];\\r\\n           if(_staking.amount \\u003e 0) {\\r\\n              uint256 stakingDays = countBusinessDays2(_staking.stakeAt,block.timestamp);\\r\\n                  uint256  amts  = (_staking.amount * pr)/10000;          \\r\\n                        claim = claim.add(amts.mul(stakingDays)); \\r\\n                        _staking.stakeAt = block.timestamp;\\r\\n           }    \\r\\n         } \\r\\n          if(claim \\u003e 0){\\r\\n            uint256 remainingRewards = ((balanceInfo() ? getTotalStakedAmount(msg.sender) : (getTotalStakedAmount(msg.sender).mul(income)).div(100)) - re.cliamAmount);\\r\\n            if (claim \\u003e remainingRewards) {\\r\\n                claim = remainingRewards;\\r\\n            }\\r\\n           }\\r\\n             re.cliamAmount +=claim;\\r\\n             re.claimDaily +=claim;\\r\\n               if (getTotalStakedAmount(msg.sender).mul(income).div(100) \\u003c= (re.cliamAmount)) {\\r\\n                          for(uint256 j = 0; j \\u003c stakes[0][_msgSender()].length; j++) {\\r\\n                        Staking storage _stakings = stakes[0][_msgSender()][j];\\r\\n                          _stakings.amount = 0;\\r\\n            }\\r\\n            if(income == incomeWithref){\\r\\n                 re.Count180 ++;\\r\\n            }\\r\\n                  re.cliamAmount = 0;\\r\\n                  re.W ++;\\r\\n            }    \\r\\n \\r\\n        require(claim \\u003e 0, \\\"There is no amount to claim\\\");\\r\\n                 plans[0].overallWithdral += claim;\\r\\n                 uint256 _sub = claim.mul(plans[0].withdrawDeduction).div(1000);\\r\\n                 IERC20(staking).transfer(_msgSender(), claim.sub(_sub));   \\r\\n               if(_sub \\u003e 0){\\r\\n                IERC20(staking).transfer(fees, _sub);  \\r\\n                }\\r\\n                \\r\\n    }\\r\\n    function claimReferralEarnings() public {\\r\\n     uint256 income = 0;\\r\\n            Records storage re =  record[msg.sender];\\r\\n                 if (getuserRefLenght(msg.sender) \\u003e= 2 \\u0026\\u0026 re.Count180 \\u003c= 5 ) {\\r\\n                income = incomeWithref;\\r\\n            }\\r\\n            else{\\r\\n                income = incomeWithoutref;\\r\\n            }\\r\\n    require(!balanceInfo(),\\\"balance is not sufficient\\\");\\r\\n    require( re.L ==  re.W,\\\"If you want to earn again so you must have one direct referal\\\");\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n        (_earned, _claimable) = getEarnings(msg.sender);\\r\\n             if(_claimable \\u003e 0) {\\r\\n          uint256 remainingRewards = ((getTotalStakedAmount(_msgSender()).mul(income)).div(100)).sub(re.cliamAmount);\\r\\n            if (_claimable \\u003e remainingRewards) {\\r\\n                _claimable = remainingRewards;\\r\\n            }\\r\\n            }\\r\\n             re.cliamAmount += _claimable;\\r\\n             re.claimDirect +=  _claimable;\\r\\n               if ((getTotalStakedAmount(msg.sender).mul(income)).div(100) \\u003c= (re.cliamAmount)) {\\r\\n                          for(uint256 j = 0; j \\u003c stakes[0][msg.sender].length; j++) {\\r\\n                        Staking storage _stakings = stakes[0][msg.sender][j];\\r\\n                          _stakings.amount = 0;\\r\\n            }\\r\\n              if(income == incomeWithref){\\r\\n                 re.Count180 ++;\\r\\n            }\\r\\n               re.cliamAmount = 0;\\r\\n               re.W ++;\\r\\n    \\r\\n            }\\r\\n        require(_claimable \\u003e 0, \\\"No amount to claim\\\");\\r\\n        claimLevelsReferralEarnings(msg.sender, 0);\\r\\n            plans[0].overallWithdral += _claimable;\\r\\n            uint256 _sub = _claimable.mul(plans[0].withdrawDeduction).div(1000);\\r\\n           IERC20(staking).transfer(_msgSender(), _claimable.sub(_sub));\\r\\n           if(_sub \\u003e 0){\\r\\n           IERC20(staking).transfer(fees, _sub);  \\r\\n           }\\r\\n    }\\r\\n\\r\\n    function claimLevelsReferralEarnings(address _account, uint256 _level) internal {\\r\\n        \\r\\n        if(_level == level) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address[] memory _referees = getReferees(_account);\\r\\n        for(uint256 i = 0; i \\u003c _referees.length; i++) {\\r\\n            address _referee = _referees[i];\\r\\n            claimLevelsReferralEarnings(_referee, _level + 1);\\r\\n            claimSingleLevelReferralEarnings(_account, _referee);\\r\\n        }  \\r\\n    }\\r\\n\\r\\n    function claimSingleLevelReferralEarnings(address _referrer, address _referee) internal {\\r\\n        for(uint256 j = 0; j \\u003c referrals[_referrer].referralStakes[_referee].length; j++) {\\r\\n            if(!addressExists(msg.sender, referrals[_referrer].referralStakes[_referee][j].claimers)) {\\r\\n                referrals[_referrer].referralStakes[_referee][j].claimers.push(msg.sender);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n        function getEarnings(address _account) public view returns(uint256, uint256) {\\r\\n        return getReferralEarning(_account, _account, 0);         \\r\\n    }\\r\\n\\r\\n    function getReferralEarning(address _account, address _referrer, uint256 _level) public view returns(uint256, uint256) {\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n        \\r\\n        if(_level == level) {\\r\\n            return (_earned, _claimable);\\r\\n        }\\r\\n\\r\\n        address[] memory _referees = getReferees(_referrer);\\r\\n        for(uint256 i = 0; i \\u003c _referees.length; i++) {\\r\\n            address _referee = _referees[i];\\r\\n            uint256 _nexEarned;\\r\\n\\r\\n            uint256 _nextClaimable;\\r\\n            (_nexEarned, _nextClaimable) = getReferralEarning(_account, _referee, _level + 1);\\r\\n            _earned = _earned.add(_nexEarned);\\r\\n            _claimable = _claimable.add(_nextClaimable);\\r\\n            \\r\\n            (_nexEarned, _nextClaimable) = getSingleReferralEarning(_account, _referrer, _referee, _level);\\r\\n            _earned = _earned.add(_nexEarned);\\r\\n            _claimable = _claimable.add(_nextClaimable);\\r\\n\\r\\n        }\\r\\n        return (_earned, _claimable);     \\r\\n    }\\r\\n\\r\\n    function getSingleReferralEarning(address _account, address _referrer, address _referee, uint256 _level) public view returns (uint256, uint256) {\\r\\n        ReferralStake[] memory _referralStakes = getReferralStakes(_referrer, _referee);\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n\\r\\n        for(uint256 j = 0; j \\u003c _referralStakes.length; j++) {\\r\\n            uint256 _referralValue = _referralStakes[j].stakedAmount\\r\\n                    .mul(referralEarnings[_level])\\r\\n                    .div(100);\\r\\n            \\r\\n            if(!addressExists(_account, _referralStakes[j].claimers)) {\\r\\n                _claimable = _claimable.add(_referralValue);\\r\\n            }\\r\\n            _earned = _earned.add(_referralValue);\\r\\n        }\\r\\n\\r\\n        return (_earned/100, _claimable/100);\\r\\n    }\\r\\n\\r\\n    function claimLevelEarnings() public {\\r\\n         require(!balanceInfo(),\\\"balance is not sufficient\\\");\\r\\n        Records storage re =  record[msg.sender];\\r\\n      require( re.L ==  re.W,\\\"If you want to earn again so you must have one direct referal\\\");\\r\\n          uint256 income = 0;\\r\\n                 if (getuserRefLenght(msg.sender) \\u003e= 2 \\u0026\\u0026 re.Count180 \\u003c= 5 ) {\\r\\n                income = incomeWithref;\\r\\n            }\\r\\n            else{\\r\\n                income = incomeWithoutref;\\r\\n            }\\r\\n        uint256 _claimable = 0;\\r\\n        uint256 amt = 0 ;\\r\\n        uint256 StakingDay = countBusinessDays2(re.lastUpdate,block.timestamp);\\r\\n        (,_claimable) = getReferralEarnings(msg.sender);\\r\\n           amt =  _claimable * StakingDay;\\r\\n            if(amt \\u003e 0) { \\r\\n       \\r\\n          uint256 remainingRewards = ((getTotalStakedAmount(msg.sender).mul(income)).div(100)).sub(re.cliamAmount);\\r\\n            if (amt \\u003e remainingRewards) {\\r\\n                amt = remainingRewards;\\r\\n            }\\r\\n            }  \\r\\n             re.cliamAmount += amt;          \\r\\n             re.claimLevel += amt;\\r\\n               if ((getTotalStakedAmount(msg.sender).mul(income)).div(100) \\u003c= (re.cliamAmount)) {\\r\\n                          for(uint256 j = 0; j \\u003c stakes[0][msg.sender].length; j++) {\\r\\n                        Staking storage _stakings = stakes[0][msg.sender][j];\\r\\n                          _stakings.amount = 0;\\r\\n            }\\r\\n              if(income == incomeWithref){\\r\\n                 re.Count180 ++;\\r\\n            }\\r\\n               re.cliamAmount = 0;\\r\\n               re.W ++;\\r\\n    \\r\\n            }  \\r\\n        re.lastUpdate =  block.timestamp;\\r\\n        require(amt \\u003e 0, \\\"No amount to claim\\\");\\r\\n            plans[0].overallWithdral += amt;\\r\\n         uint256 _sub = amt.mul(plans[0].withdrawDeduction).div(1000);\\r\\n           IERC20(staking).transfer(_msgSender(), amt.sub(_sub));\\r\\n            if(_sub \\u003e 0){\\r\\n           IERC20(staking).transfer(fees, _sub);  \\r\\n           }\\r\\n    }\\r\\n    function getClaimLevelIncome(address user) public view returns (uint256){\\r\\n        uint256  _earned = 0;\\r\\n        uint256 amounts = 0 ;\\r\\n              uint256 income = 0;\\r\\n                 if (getuserRefLenght(user) \\u003e= 2 \\u0026\\u0026 record[user].Count180 \\u003c= 5) {\\r\\n                income = incomeWithref;\\r\\n            }\\r\\n            else{\\r\\n                income = incomeWithoutref;\\r\\n            }\\r\\n         uint256 StakingDay = countBusinessDays2(record[user].lastUpdate,block.timestamp);\\r\\n        (,_earned) = getReferralEarnings(user);\\r\\n           amounts =  _earned * StakingDay;\\r\\n           if(amounts \\u003e 0){\\r\\n          uint256 remainingRewards = (getTotalStakedAmount(user).mul(income).div(100)).sub(record[user].cliamAmount);\\r\\n            if (amounts \\u003e remainingRewards) {\\r\\n                amounts = remainingRewards;\\r\\n            }\\r\\n            }\\r\\n            if(amounts \\u003e 0 ){\\r\\n                return amounts;\\r\\n            }\\r\\n            else{\\r\\n                return 0 ;\\r\\n            }            \\r\\n    }\\r\\n\\r\\n    function getTotalStakedAmount(address _account) public view returns(uint256){\\r\\n        uint256 _totalStakedAmount = 0;\\r\\n        \\r\\n            for(uint256 j = 0; j \\u003c stakes[0][_account].length; j++) {\\r\\n                Staking memory _staking = stakes[0][_account][j];\\r\\n                _totalStakedAmount = _totalStakedAmount.add(_staking.amount);\\r\\n            }\\r\\n        \\r\\n        return _totalStakedAmount;\\r\\n    }\\r\\n    function getlengthofstake(address _account)public view returns(uint256){\\r\\n         return stakes[0][_account].length;\\r\\n    }\\r\\n\\r\\n    function getReferees(address _account) public view returns (address[] memory) {\\r\\n        return referrals[_account].referees;\\r\\n    }\\r\\n    // testing this part of code\\r\\n    function getDailyEran(address _account)public view returns(uint256){\\r\\n         uint256 amount = 0;\\r\\n         uint256 income = 0;\\r\\n           uint256 pr = 0;\\r\\n            if (getuserRefLenght(_account) \\u003e= 2 \\u0026\\u0026 record[_account].Count180 \\u003c= 5) {\\r\\n                income = incomeWithref;\\r\\n                pr = PrWithRef;\\r\\n            }\\r\\n            else{\\r\\n                income = incomeWithoutref;\\r\\n                pr = PrWithoutRef;\\r\\n            }\\r\\n            for(uint256 j = 0; j \\u003c stakes[0][_account].length; j++) {\\r\\n                Staking memory _staking = stakes[0][_account][j];\\r\\n                if(_staking.amount \\u003e 0 \\u0026\\u0026 block.timestamp \\u003c _staking.endstakeAt){\\r\\n                  amount += ((_staking.amount * pr ).div(10000));\\r\\n                }\\r\\n            }\\r\\n        return amount;\\r\\n    }\\r\\n    function getuserRefLenght(address user)public view returns(uint256){\\r\\n        return referrals[user].referees.length;\\r\\n    }\\r\\n\\r\\n     function getUserLevel(address user) public view returns (uint256) {\\r\\n        uint256 length = getuserRefLenght(user);\\r\\n         uint256 TotalStake = AmountStaked(user);\\r\\n         if(length \\u003e= 1){\\r\\n            if(length \\u003e= 2){\\r\\n                if(TotalStake\\u003e= Min1){\\r\\n                    if(length \\u003e= 3){\\r\\n                        if(TotalStake \\u003e= Min2){\\r\\n                            if(length \\u003e= 4){\\r\\n                                if(TotalStake \\u003e= Min3){\\r\\n                                    if(length \\u003e= 5){\\r\\n                                        if(TotalStake \\u003e= Min4){\\r\\n                                            return 5;\\r\\n                                        }\\r\\n                                        else{\\r\\n                                          return 4;\\r\\n                                        }\\r\\n                                    }\\r\\n                                    else{\\r\\n                                        return 4;\\r\\n                                    }\\r\\n                                }\\r\\n                                else{\\r\\n                                    return 3;\\r\\n                                }\\r\\n                            }\\r\\n                            else{\\r\\n                                return 3;\\r\\n                            }\\r\\n                        }\\r\\n                         else{\\r\\n                          return 2;\\r\\n                    }\\r\\n                    }\\r\\n                    else{\\r\\n                        return 2;\\r\\n                    }\\r\\n                }\\r\\n                 else{\\r\\n                  return 1;\\r\\n            }\\r\\n            }\\r\\n            else{\\r\\n              return 1;\\r\\n            }\\r\\n         }\\r\\n         else {\\r\\n          return 0;\\r\\n         }\\r\\n     }\\r\\n    function AmountStaked(address user) internal view returns (uint256) {\\r\\n       uint256 total = 0;\\r\\n       address[] memory referees = getReferees(user);\\r\\n      for (uint256 i = 0; i \\u003c referees.length; i++) {\\r\\n         total += record[referees[i]].TotalStaked;\\r\\n    }   \\r\\n    return total;\\r\\n    }\\r\\n\\r\\n    function hasReferees(address _account) public view returns (bool flag) {\\r\\n        return ( referrals[_account].referees.length\\u003e0?true:false);\\r\\n    }\\r\\n     function getReferral(address _account) public view returns(address){\\r\\n       return  referrals[_account].referrer;\\r\\n     }\\r\\n    function getReferralStakes(address _referrer, address _referee) public view returns (ReferralStake[] memory) {\\r\\n        return referrals[_referrer].referralStakes[_referee];\\r\\n    }\\r\\n\\r\\n    function getReferralEarnings(address _account) public view returns(uint256 claimAmount, uint256 Earn) {\\r\\n        (claimAmount, Earn) = getLevelsReferralEarning(_account, _account, 0);\\r\\n      return (claimAmount,Earn);\\r\\n    }\\r\\n\\r\\n    function getLevelsReferralEarning(address _account, address _referrer, uint256 _level) public view returns(uint256, uint256) {\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n        \\r\\n        if(_level == getUserLevel(_account)) {\\r\\n            return (_earned, _claimable);\\r\\n        }\\r\\n\\r\\n        address[] memory _referees = getReferees(_referrer);\\r\\n        for(uint256 i = 0; i \\u003c _referees.length; i++) {\\r\\n            address _referee = _referees[i];\\r\\n            uint256 _nexEarned;\\r\\n\\r\\n            uint256 _nextClaimable;\\r\\n            (_nexEarned, _nextClaimable) = getLevelsReferralEarning(_account, _referee, _level + 1);\\r\\n            _earned = _earned.add(_nexEarned);\\r\\n            _claimable = _claimable.add(_nextClaimable);\\r\\n               \\r\\n            (_nexEarned, _nextClaimable) = getSingleLevelReferralEarning(_account, _referrer, _referee, _level);\\r\\n            _earned = _earned.add(_nexEarned);\\r\\n            _claimable = _claimable.add(_nextClaimable);\\r\\n\\r\\n        }\\r\\n\\r\\n        return (_earned, _claimable);     \\r\\n    }\\r\\n    function getSingleLevelReferralEarning(address _account, address _referrer, address _referee, uint256 _level) public view returns (uint256, uint256) {\\r\\n        uint256 _claimable = 0;\\r\\n            uint256 _referralValue = getDailyEran(_referee); \\r\\n            \\r\\n           _claimable = _claimable.add(_referralValue.mul(referralLevelEarnings[_level]).div(100));\\r\\n\\r\\n        return (_claimable/100, _claimable/100);\\r\\n    }\\r\\n    function getbalance()public view returns (uint256){\\r\\n        return address(this).balance;\\r\\n    }\\r\\n        function getReferralEarningsData(address _account) public view returns(\\r\\n        address[] memory, \\r\\n        uint256[] memory, \\r\\n        ReferralStake[][] memory\\r\\n    ) {\\r\\n        return getLevelReferralEarningsData(_account, 0);         \\r\\n    }\\r\\n\\r\\n    function getLevelReferralEarningsData(address _referrer, uint256 _level) public view returns(\\r\\n        address[] memory, \\r\\n        uint256[] memory,\\r\\n        ReferralStake[][] memory\\r\\n    ) {\\r\\n        \\r\\n        address[] memory _referees;\\r\\n        uint256[] memory _levels;\\r\\n        ReferralStake[][] memory _referralStakes;\\r\\n         \\r\\n        if(_level \\u003c referralLevels \\u0026\\u0026 _referrer != address(0)) {\\r\\n            (_referees, _levels, _referralStakes) = getSingleLevelReferralEarningsData(_referrer, _level);\\r\\n            address[] memory _nextReferees;\\r\\n            uint256[] memory _nextLevels;\\r\\n            ReferralStake[][] memory _nextReferralStakes;\\r\\n            uint256 count = MAXRLIMIT \\u003c= _referees.length ? MAXRLIMIT : _referees.length;\\r\\n            for(uint256 i = 0; i \\u003c count; i++) {\\r\\n                (_nextReferees, _nextLevels, _nextReferralStakes) = getLevelReferralEarningsData(_referees[i], _level + 1);\\r\\n                _referees = concatenateAddresses(_referees, _nextReferees);\\r\\n                _levels = concatenateIntegers(_levels, _nextLevels);\\r\\n                _referralStakes = concatenateReferralStakes(_referralStakes, _nextReferralStakes);   \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (_referees, _levels, _referralStakes);    \\r\\n    }\\r\\n\\r\\n    function getSingleLevelReferralEarningsData(address _referrer, uint256 _level) public view returns(\\r\\n        address[] memory, \\r\\n        uint256[] memory,\\r\\n        ReferralStake[][] memory\\r\\n    ) {      \\r\\n        address[] memory _referees ;\\r\\n        uint256[] memory _levels ;\\r\\n        ReferralStake[][] memory _referralStakes;\\r\\n        if(_referrer==address(0)|| _level\\u003e=15)\\r\\n        {\\r\\n            return (_referees, _levels, _referralStakes);  \\r\\n        }\\r\\n        _referees = getReferees(_referrer);\\r\\n       if(_referees.length!=0)\\r\\n        {     \\r\\n        _levels = new uint256[](_referees.length);\\r\\n        _referralStakes = new ReferralStake[][](_referees.length);\\r\\n        uint256 count = MAXRLIMIT \\u003c= _referees.length ? MAXRLIMIT : _referees.length;\\r\\n        for(uint256 i = 0; i \\u003c count; i++) {\\r\\n            _levels[i] = _level;\\r\\n            _referralStakes[i] = referrals[_referrer].referralStakes[_referees[i]];\\r\\n        }\\r\\n        }\\r\\n        return (_referees, _levels, _referralStakes);    \\r\\n    }\\r\\n\\r\\n    function concatenateAddresses(address[] memory a1, address[] memory a2) internal pure returns(address[] memory) {\\r\\n        address[] memory returnArr = new address[](a1.length + a2.length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n        for (; i \\u003c a1.length; i++) {\\r\\n            returnArr[i] = a1[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j \\u003c a2.length; j++) {\\r\\n            returnArr[i++] = a2[j];\\r\\n        }\\r\\n\\r\\n        return returnArr;\\r\\n    }\\r\\n\\r\\n    function concatenateIntegers(uint256[] memory a1, uint256[] memory a2) internal pure returns(uint256[] memory) {\\r\\n        uint256[] memory returnArr = new uint256[](a1.length + a2.length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n        for (; i \\u003c a1.length; i++) {\\r\\n            returnArr[i] = a1[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j \\u003c a2.length; j++) {\\r\\n            returnArr[i++] = a2[j];\\r\\n        }\\r\\n\\r\\n        return returnArr;\\r\\n    }\\r\\n\\r\\n    function concatenateReferralStakes(ReferralStake[][] memory a1, ReferralStake[][] memory a2) internal pure returns(ReferralStake[][] memory) {\\r\\n        ReferralStake[][] memory returnArr = new ReferralStake[][](a1.length + a2.length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n        for (; i \\u003c a1.length; i++) {\\r\\n            returnArr[i] = a1[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j \\u003c a2.length; j++) {\\r\\n            returnArr[i++] = a2[j];\\r\\n        }\\r\\n        return returnArr;\\r\\n    } \\r\\n    function addressExists(address add, address[] memory array) internal pure returns (bool) {\\r\\n        for (uint i = 0; i \\u003c array.length; i++) {\\r\\n            if (array[i] == add) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }    \\r\\n    function setpr(uint128 _percentwithRef, uint128 _percentwithoutRef) external onlyOwner {\\r\\n      PrWithRef = _percentwithRef;\\r\\n      PrWithoutRef = _percentwithoutRef;\\r\\n    }\\r\\n    function setStakeDuration(uint256 _stakingId, uint256 _duration) external onlyOwner {\\r\\n        plans[_stakingId].stakeDuration = _duration;\\r\\n    \\r\\n    }\\r\\n    function setDepositDeduction(uint256 _stakingId, uint256 _deduction) public onlyOwner {\\r\\n        plans[_stakingId].depositDeduction = _deduction;\\r\\n    \\r\\n    }\\r\\n      function setWithdralDeduction(uint256 _deduction) public onlyOwner {\\r\\n        plans[0].withdrawDeduction = _deduction;\\r\\n    \\r\\n    }\\r\\n    function setStakeConclude(uint256 _stakingId, bool _conclude)public onlyOwner {\\r\\n        plans[_stakingId].conclude = _conclude;\\r\\n    }\\r\\n    function setStaking(address adr)public onlyOwner{\\r\\n       staking = adr;\\r\\n    }  \\r\\n    function setReferralLevelEarningPercentage(uint256 _level,uint256 _percent) external onlyOwner{\\r\\n        referralLevelEarnings[_level] = _percent;       \\r\\n    }\\r\\n    function setReferralEarningPercentage(uint256 _level,uint256 _percent) external onlyOwner{\\r\\n        referralEarnings[_level] = _percent;       \\r\\n    }     \\r\\n     function setInsuranceAddress(address payable  adr)public onlyOwner{\\r\\n        Insurance = adr;\\r\\n    } \\r\\n    function setFeesAdr(address payable  adr) external onlyOwner{\\r\\n        fees = adr;\\r\\n     } \\r\\n    function setEranCld(bool status)external onlyOwner{\\r\\n        eranCld = status;\\r\\n    }\\r\\n    function setInlevel(uint128 _level)public onlyOwner{\\r\\n        level = _level;\\r\\n    }\\r\\n    function refundUser(address payable user, uint256 amount) public onlyOwner {\\r\\n        require(amount \\u003e 0, \\\"Amount should be greater than zero\\\");\\r\\n        require(address(this).balance \\u003e= amount, \\\"Contract balance is insufficient\\\");\\r\\n        user.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function setMinValues(uint256 min1,uint256 min2,uint256 min3,uint256 min4)public onlyOwner{\\r\\n        Min1 = min1;\\r\\n        Min2 = min2;   \\r\\n        Min3 = min3;\\r\\n        Min4 = min4;\\r\\n    }\\r\\n\\r\\n    function setWithoutRef(uint128 val)public onlyOwner{\\r\\n        incomeWithoutref =val;\\r\\n    }\\r\\n    function setWithRef(uint128 val)public onlyOwner{\\r\\n        incomeWithref =val;\\r\\n    }\\r\\n    function setMinDep(uint256 val)public onlyOwner{\\r\\n        MinDep = val;\\r\\n    }\\r\\n    function setMaxDep(uint256 val)public onlyOwner{\\r\\n        MaxDep = val;\\r\\n    }\\r\\n    function setRate(uint256 _rate) public onlyOwner{\\r\\n        rate = _rate;\\r\\n    }\\r\\n    function rescueAnyERC20token(address token,uint256 amount)public onlyOwner{\\r\\n        require(IERC20(token).balanceOf(address(this)) \\u003e= amount,\\\"Not enough balance\\\");\\r\\n        require(IERC20(token).transfer(_msgSender(),amount),\\\"transaction failed\\\");\\r\\n    }\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Insurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxDep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Min1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Min2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Min3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Min4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinDep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PrWithRef\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PrWithoutRef\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLevelEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimLevelIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDailyEran\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getLevelReferralEarningsData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct USDTstaking.ReferralStake[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getLevelsReferralEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getReferralEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferralEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Earn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferralEarningsData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct USDTstaking.ReferralStake[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"getReferralStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct USDTstaking.ReferralStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSingleLevelReferralEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSingleLevelReferralEarningsData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct USDTstaking.ReferralStake[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSingleReferralEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getlengthofstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getuserRefLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasReferees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeWithoutref\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeWithref\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"overallStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overallWithdral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositDeduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDeduction\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"conclude\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"L\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"W\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"TotalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Count180\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliamAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimDaily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimDirect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralLevelEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"referralStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deduction\",\"type\":\"uint256\"}],\"name\":\"setDepositDeduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEranCld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setFeesAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_level\",\"type\":\"uint128\"}],\"name\":\"setInlevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setInsuranceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxDep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMinDep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min4\",\"type\":\"uint256\"}],\"name\":\"setMinValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setReferralEarningPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setReferralLevelEarningPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_conclude\",\"type\":\"bool\"}],\"name\":\"setStakeConclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"}],\"name\":\"setWithRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deduction\",\"type\":\"uint256\"}],\"name\":\"setWithdralDeduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"}],\"name\":\"setWithoutRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_percentwithRef\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_percentwithoutRef\",\"type\":\"uint128\"}],\"name\":\"setpr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endstakeAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USDTstaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ed589bd624caf91932e487aa6d108b3ac7e022afeea2ae1570301eea92ccbbef"}