{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/IAZO.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n//ALL RIGHTS RESERVED\\n//apeswap.finance\\n\\npragma solidity 0.8.6;\\n\\n/*\\n * ApeSwapFinance \\n * App:             https://apeswap.finance\\n * Medium:          https://ape-swap.medium.com    \\n * Twitter:         https://twitter.com/ape_swap \\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interface/ERC20.sol\\\";\\nimport \\\"./interface/IWNative.sol\\\";\\nimport \\\"./interface/IIAZOSettings.sol\\\";\\nimport \\\"./interface/IIAZOLiquidityLocker.sol\\\";\\n\\n\\n/**\\n *  Welcome to the \\\"Initial Ape Zone Offering\\\" (IAZO) contract\\n */\\n/// @title IAZO\\n/// @author ApeSwapFinance\\n/// @notice IAZO contract where to buy the tokens from\\ncontract IAZO is Initializable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n\\n    event ForceFailed(address indexed by);\\n    event UpdateMaxSpendLimit(uint256 previousMaxSpend, uint256 newMaxSpend);\\n    event FeesCollected(address indexed feeAddress, uint256 baseFeeCollected, uint256 IAZOTokenFee);\\n    event UpdateIAZOBlocks(uint256 previousStartTime, uint256 newStartBlock, uint256 previousActiveTime, uint256 newActiveBlocks);\\n    event AddLiquidity(uint256 baseLiquidity, uint256 saleTokenLiquidity, uint256 remainingBaseBalance);\\n    event SweepWithdraw(\\n        address indexed receiver, \\n        IERC20 indexed token, \\n        uint256 balance\\n    );\\n    event UserWithdrawSuccess(address _address, uint256 _amount);\\n    event UserWithdrawFailed(address _address, uint256 _amount);\\n    event UserDeposited(address _address, uint256 _amount);\\n\\n    struct IAZOInfo {\\n        address payable IAZO_OWNER; //IAZO_OWNER address\\n        ERC20 IAZO_TOKEN; // token offered for IAZO\\n        ERC20 BASE_TOKEN; // token to buy IAZO_TOKEN\\n        bool IAZO_SALE_IN_NATIVE; // IAZO sale in NATIVE or ERC20.\\n        /// @dev To account for tokens with different decimals values the TOKEN_PRICE/LISTING_PRICE need to account for that\\n        /// Find the amount of tokens in BASE_TOKENS that 1 IAZO_TOKEN costs and use the equation below to find the TOKEN_PRICE\\n        /// TOKEN_PRICE = BASE_TOKEN_AMOUNT * 10**(18 - iazoTokenDecimals)\\n        /// i.e. 1 IAZO 8 decimal token (1e8) = 1 BASE_TOKEN 18 decimal token (1e18): TOKEN_PRICE = 1e28\\n        uint256 TOKEN_PRICE; // BASE_TOKEN_AMOUNT * 10**(18 - iazoTokenDecimals)\\n        uint256 AMOUNT; // amount of IAZO_TOKENS for sale\\n        uint256 HARDCAP; // hardcap of earnings.\\n        uint256 SOFTCAP; // softcap for earning. if not reached IAZO is cancelled \\n        uint256 MAX_SPEND_PER_BUYER; // max spend per buyer\\n        uint256 LIQUIDITY_PERCENT; // 1 = 0.1%\\n        /// @dev Find the amount of tokens in BASE_TOKENS that 1 IAZO_TOKEN will be listed for and use the equation below to find the LISTING_PRICE\\n        /// LISTING_PRICE = BASE_TOKEN_AMOUNT * 10**(18 - iazoTokenDecimals)\\n        uint256 LISTING_PRICE; // BASE_TOKEN_AMOUNT * 10**(18 - iazoTokenDecimals)\\n        bool BURN_REMAINS;\\n    }\\n\\n    struct IAZOTimeInfo {\\n        uint256 START_TIME; // start timestamp of the IAZO\\n        uint256 ACTIVE_TIME; // end of IAZO -> START_TIME + ACTIVE_TIME\\n        uint256 LOCK_PERIOD; // unix timestamp (3 weeks) to lock earned tokens for IAZO_OWNER\\n    }\\n\\n    struct IAZOStatus {\\n        bool LP_GENERATION_COMPLETE; // final flag required to end a iazo and enable withdrawals\\n        bool FORCE_FAILED; // set this flag to force fail the iazo\\n        uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\\n        uint256 TOTAL_TOKENS_SOLD; // total iazo tokens sold\\n        uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful iazo\\n        uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on iazo failure\\n        uint256 NUM_BUYERS; // number of unique participants\\n    }\\n\\n    struct BuyerInfo {\\n        uint256 deposited; // deposited base tokens, if IAZO fails these can be withdrawn\\n        uint256 tokensBought; // bought tokens. can be withdrawn on iazo success\\n    }\\n\\n    struct FeeInfo {\\n        address payable FEE_ADDRESS;\\n        uint256 BASE_FEE; // 1 = 0.1%\\n        uint256 IAZO_TOKEN_FEE; // 1 = 0.1%\\n    }\\n\\n    bool constant public isIAZO = true;\\n\\n    // structs\\n    IAZOInfo public IAZO_INFO;\\n    IAZOTimeInfo public IAZO_TIME_INFO;\\n    IAZOStatus public STATUS;\\n    FeeInfo public FEE_INFO;\\n    // contracts\\n    IIAZOSettings public IAZO_SETTINGS;\\n    IIAZOLiquidityLocker public IAZO_LIQUIDITY_LOCKER;\\n    IWNative WNative;\\n    /// @dev reference variable\\n    address public IAZO_FACTORY;\\n    // addresses\\n    address public TOKEN_LOCK_ADDRESS;\\n    // BuyerInfo mapping\\n    mapping(address => BuyerInfo) public BUYERS;\\n\\n    /// @notice Initialization of IAZO\\n    /// @dev This contract should not be deployed without the factory as important safety checks are made before deployment\\n    /// @param _addresses [IAZOSettings, IAZOLiquidityLocker]\\n    /// @param _addressesPayable [IAZOOwner, feeAddress]\\n    /// @param _uint256s [_tokenPrice,  _amount, _hardcap,  _softcap, _maxSpendPerBuyer, _liquidityPercent, _listingPrice, _startTime, _activeTime, _lockPeriod, _baseFee, iazoTokenFee]\\n    /// @param _bools [_burnRemains]\\n    /// @param _ERC20s [_iazoToken, _baseToken]\\n    /// @param _wnative Address of the Wrapped Native token for the chain\\n    function initialize(\\n        address[2] memory _addresses, \\n        address payable[2] memory _addressesPayable, \\n        uint256[12] memory _uint256s, \\n        bool[1] memory _bools, \\n        ERC20[2] memory _ERC20s, \\n        IWNative _wnative\\n    ) external initializer {\\n        IAZO_FACTORY = msg.sender;\\n        WNative = _wnative;\\n\\n        IAZO_SETTINGS = IIAZOSettings(_addresses[0]);\\n        IAZO_LIQUIDITY_LOCKER = IIAZOLiquidityLocker(_addresses[1]);\\n\\n        IAZO_INFO.IAZO_OWNER = _addressesPayable[0]; // User which created the IAZO\\n        FEE_INFO.FEE_ADDRESS = _addressesPayable[1];\\n\\n        IAZO_INFO.IAZO_SALE_IN_NATIVE = address(_ERC20s[1]) == address(WNative) ? true : false;\\n        IAZO_INFO.TOKEN_PRICE = _uint256s[0]; // Price of time in base currency\\n        IAZO_INFO.AMOUNT = _uint256s[1]; // Amount of tokens for sale\\n        IAZO_INFO.HARDCAP = _uint256s[2]; // Hardcap base token to collect (TOKEN_PRICE * AMOUNT)\\n        IAZO_INFO.SOFTCAP = _uint256s[3]; // Minimum amount of base tokens to collect for successful IAZO\\n        IAZO_INFO.MAX_SPEND_PER_BUYER = _uint256s[4]; // Max amount of base tokens that can be used to purchase IAZO token per account\\n        IAZO_INFO.LIQUIDITY_PERCENT = _uint256s[5]; // Percentage of liquidity to lock after IAZO\\n        IAZO_INFO.LISTING_PRICE = _uint256s[6]; // The rate to be listed for liquidity\\n        IAZO_TIME_INFO.START_TIME = _uint256s[7];\\n        IAZO_TIME_INFO.ACTIVE_TIME = _uint256s[8];\\n        IAZO_TIME_INFO.LOCK_PERIOD = _uint256s[9];\\n        FEE_INFO.BASE_FEE = _uint256s[10];\\n        FEE_INFO.IAZO_TOKEN_FEE = _uint256s[11];\\n\\n        IAZO_INFO.BURN_REMAINS = _bools[0]; // Burn remainder of IAZO tokens not sold\\n\\n        IAZO_INFO.IAZO_TOKEN = _ERC20s[0]; // Token for sale \\n        IAZO_INFO.BASE_TOKEN = _ERC20s[1]; // Token used to buy IAZO token\\n    }\\n\\n    /// @notice Modifier: Only allow admin address to call certain functions\\n    modifier onlyAdmin() {\\n        require(IAZO_SETTINGS.isAdmin(msg.sender), \\\"Admin only\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier: Only allow IAZO owner address to call certain functions\\n    modifier onlyIAZOOwner() {\\n        require(msg.sender == IAZO_INFO.IAZO_OWNER, \\\"IAZO owner only\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier: Only allow IAZO owner address to call certain functions\\n    modifier onlyIAZOFactory() {\\n        require(msg.sender == IAZO_FACTORY, \\\"IAZO_FACTORY only\\\");\\n        _;\\n    }\\n\\n    /// @notice The state of the IAZO\\n    /// @return The state of the IAZO\\n    function getIAZOState() public view returns (uint256) {\\n        // 4 FAILED - force fail\\n        if (STATUS.FORCE_FAILED) return 4; \\n        // 4 FAILED - softcap not met by end timestamp\\n        if ((block.timestamp > IAZO_TIME_INFO.START_TIME + IAZO_TIME_INFO.ACTIVE_TIME) && (STATUS.TOTAL_BASE_COLLECTED < IAZO_INFO.SOFTCAP)) return 4; \\n        // 3 SUCCESS - hardcap met\\n        if (STATUS.TOTAL_BASE_COLLECTED >= IAZO_INFO.HARDCAP) return 3; \\n        // 2 SUCCESS - end timestamp and soft cap reached\\n        if ((block.timestamp > IAZO_TIME_INFO.START_TIME + IAZO_TIME_INFO.ACTIVE_TIME) && (STATUS.TOTAL_BASE_COLLECTED >= IAZO_INFO.SOFTCAP)) return 2; \\n        // 1 ACTIVE - deposits enabled\\n        if ((block.timestamp >= IAZO_TIME_INFO.START_TIME) && (block.timestamp <= IAZO_TIME_INFO.START_TIME + IAZO_TIME_INFO.ACTIVE_TIME)) return 1; \\n        // 0 QUEUED - awaiting starting timestamp\\n        return 0; \\n    }\\n\\n    /// @notice Buy IAZO tokens with native coin\\n    function userDepositNative () external payable {\\n        require(IAZO_INFO.IAZO_SALE_IN_NATIVE, \\\"not a native token IAZO\\\");\\n        userDepositPrivate(msg.value);\\n    }\\n\\n    /// @notice Buy IAZO tokens with base token\\n    /// @param _amount Amount of base tokens to use to buy IAZO tokens for\\n    function userDeposit (uint256 _amount) external {\\n        require(!IAZO_INFO.IAZO_SALE_IN_NATIVE, \\\"cannot deposit tokens in a native token sale\\\");\\n        userDepositPrivate(_amount);\\n    }\\n\\n    /// @notice Internal function used to buy IAZO tokens in either native coin or base token\\n    /// @param _amount Amount of base tokens to use to buy IAZO tokens for\\n    function userDepositPrivate (uint256 _amount) private nonReentrant {\\n        require(_amount > 0, 'deposit amount must be greater than zero');\\n        // Check that IAZO is in the ACTIVE state for user deposits\\n        require(getIAZOState() == 1, 'IAZO not active');\\n        BuyerInfo storage buyer = BUYERS[msg.sender];\\n\\n        uint256 allowance = IAZO_INFO.MAX_SPEND_PER_BUYER - buyer.deposited;\\n        uint256 remaining = IAZO_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\\n        allowance = allowance > remaining ? remaining : allowance;\\n        uint256 allowedAmount = _amount;\\n        if (_amount > allowance) {\\n            allowedAmount = allowance;\\n        }\\n\\n        uint256 depositedAmount = allowedAmount;\\n        // return unused NATIVE tokens\\n        if (IAZO_INFO.IAZO_SALE_IN_NATIVE && allowedAmount < msg.value) {\\n            transferNativeCurrencyPrivate(payable(msg.sender), msg.value - allowedAmount);\\n        }\\n        // deduct non NATIVE token from user\\n        if (!IAZO_INFO.IAZO_SALE_IN_NATIVE) {\\n            /// @dev Find actual transfer amount if reflect token\\n            uint256 beforeBaseBalance = IAZO_INFO.BASE_TOKEN.balanceOf(address(this));\\n            IAZO_INFO.BASE_TOKEN.safeTransferFrom(msg.sender, address(this), allowedAmount);\\n            depositedAmount = IAZO_INFO.BASE_TOKEN.balanceOf(address(this)) - beforeBaseBalance;\\n        }\\n\\n        uint256 tokensSold = (depositedAmount * 1e18) / IAZO_INFO.TOKEN_PRICE;\\n        require(tokensSold > 0, '0 tokens bought');\\n        if (buyer.deposited == 0) {\\n            STATUS.NUM_BUYERS++;\\n        }\\n        buyer.deposited += depositedAmount;\\n        buyer.tokensBought += tokensSold;\\n        STATUS.TOTAL_BASE_COLLECTED += depositedAmount;\\n        STATUS.TOTAL_TOKENS_SOLD += tokensSold;\\n        \\n        emit UserDeposited(msg.sender, depositedAmount);\\n    }\\n\\n    /// @notice The function users call to withdraw funds\\n    function userWithdraw() external {\\n        uint256 currentIAZOState = getIAZOState();\\n        require(\\n            currentIAZOState == 2 || // SUCCESS\\n            currentIAZOState == 3 || // HARD_CAP_MET\\n            currentIAZOState == 4,   // FAILED \\n            'Invalid IAZO state withdraw'\\n        );\\n       \\n       // Failed\\n       if(currentIAZOState == 4) { \\n           userWithdrawFailedPrivate();\\n       }\\n        // Success / hardcap met\\n       if(currentIAZOState == 2 || currentIAZOState == 3) {\\n            if(!STATUS.LP_GENERATION_COMPLETE) {\\n                if(addLiquidity()) {\\n                    // If LP generation was successful\\n                    userWithdrawSuccessPrivate();\\n                } else {\\n                    // If LP generation was unsuccessful\\n                    userWithdrawFailedPrivate();\\n                }\\n            } else {\\n                userWithdrawSuccessPrivate();\\n            }\\n       }\\n    }\\n\\n    function userWithdrawSuccessPrivate() private {\\n        BuyerInfo storage buyer = BUYERS[msg.sender];\\n        require(buyer.tokensBought > 0, 'Nothing to withdraw');\\n        STATUS.TOTAL_TOKENS_WITHDRAWN += buyer.tokensBought;\\n        uint256 tokensToTransfer = buyer.tokensBought;\\n        buyer.tokensBought = 0;\\n        IAZO_INFO.IAZO_TOKEN.safeTransfer(msg.sender, tokensToTransfer);\\n        emit UserWithdrawSuccess(msg.sender, tokensToTransfer);\\n    }\\n\\n    function userWithdrawFailedPrivate() private {\\n        BuyerInfo storage buyer = BUYERS[msg.sender];\\n        require(buyer.deposited > 0, 'Nothing to withdraw');\\n        STATUS.TOTAL_BASE_WITHDRAWN += buyer.deposited;\\n        uint256 tokensToTransfer = buyer.deposited;\\n        buyer.deposited = 0;\\n        \\n        if(IAZO_INFO.IAZO_SALE_IN_NATIVE){\\n            transferNativeCurrencyPrivate(payable(msg.sender), tokensToTransfer);\\n        } else {\\n            IAZO_INFO.BASE_TOKEN.safeTransfer(msg.sender, tokensToTransfer);\\n        }\\n        emit UserWithdrawFailed(msg.sender, tokensToTransfer);\\n    }\\n\\n    function transferNativeCurrencyPrivate(address payable _to, uint256 _value) private {\\n        (bool success,) = _to.call{value: _value}(\\\"\\\");\\n        require(success, \\\"failed to send native currency\\\");\\n    }\\n\\n    /**\\n     * onlyAdmin functions\\n     */\\n\\n    function forceFailAdmin() external onlyAdmin {\\n        /// @notice Cannot fail IAZO after liquidity has been added\\n        require(!STATUS.LP_GENERATION_COMPLETE, 'LP Generation is already complete');\\n        STATUS.FORCE_FAILED = true;\\n        emit ForceFailed(msg.sender);\\n    }\\n\\n    /**\\n     * onlyIAZOOwner functions\\n     */\\n\\n    /// @notice Change start and end of IAZO\\n    /// @param _startTime New start time of IAZO\\n    /// @param _activeTime New active time of IAZO\\n    function updateStart(uint256 _startTime, uint256 _activeTime) external onlyIAZOOwner {\\n        require(IAZO_TIME_INFO.START_TIME > block.timestamp, \\\"IAZO has already started\\\");\\n        require(_startTime >= IAZO_SETTINGS.getMinStartTime(), \\\"Start time must be in future\\\");\\n        require(_activeTime >= IAZO_SETTINGS.getMinIAZOLength(), \\\"IAZO active time is too short\\\");\\n        require(_activeTime <= IAZO_SETTINGS.getMaxIAZOLength(), \\\"IAZO active time is too long\\\");\\n        uint256 previousStartTime = IAZO_TIME_INFO.START_TIME;\\n        IAZO_TIME_INFO.START_TIME = _startTime;\\n\\n        uint256 previousActiveTime = IAZO_TIME_INFO.ACTIVE_TIME;\\n        IAZO_TIME_INFO.ACTIVE_TIME = _activeTime;\\n        emit UpdateIAZOBlocks(previousStartTime, IAZO_TIME_INFO.START_TIME, previousActiveTime, IAZO_TIME_INFO.ACTIVE_TIME);\\n    }\\n\\n    /// @notice Change the max spend limit for a buyer\\n    /// @param _maxSpend New spend limit\\n    function updateMaxSpendLimit(uint256 _maxSpend) external onlyIAZOOwner {\\n        uint256 previousMaxSpend = IAZO_INFO.MAX_SPEND_PER_BUYER;\\n        IAZO_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\\n        emit UpdateMaxSpendLimit(previousMaxSpend, IAZO_INFO.MAX_SPEND_PER_BUYER);\\n    }\\n\\n    /// @notice IAZO Owner can pull out offer tokens on failure\\n    function withdrawOfferTokensOnFailure() external onlyIAZOOwner {\\n        uint256 currentIAZOState = getIAZOState();\\n        require(currentIAZOState == 4, 'not in failed state');\\n        ERC20 iazoToken = IAZO_INFO.IAZO_TOKEN;\\n        uint256 iazoTokenBalance = iazoToken.balanceOf(address(this));\\n        iazoToken.safeTransfer(IAZO_INFO.IAZO_OWNER, iazoTokenBalance);\\n    }\\n\\n    /// @notice Final step when IAZO is successful. lock liquidity and enable withdrawals of sale token.\\n    function addLiquidity() public nonReentrant returns (bool) { \\n        require(!STATUS.LP_GENERATION_COMPLETE, 'LP Generation is already complete');\\n        uint256 currentIAZOState = getIAZOState();\\n        // Check if IAZO SUCCESS or HARDCAP met\\n        require(currentIAZOState == 2 || currentIAZOState == 3, 'IAZO failed or still in progress'); // SUCCESS\\n\\n        ERC20 iazoToken = IAZO_INFO.IAZO_TOKEN;\\n        ERC20 baseToken = IAZO_INFO.BASE_TOKEN;\\n\\n        // If pair for this token has already been initialized, then this will fail the IAZO\\n        if (IAZO_LIQUIDITY_LOCKER.apePairIsInitialized(address(iazoToken), address(baseToken))) {\\n            STATUS.FORCE_FAILED = true;\\n            emit ForceFailed(address(0));\\n            return false;\\n        }\\n\\n        //calculate fees\\n        uint256 apeswapBaseFee = STATUS.TOTAL_BASE_COLLECTED * FEE_INFO.BASE_FEE / 1000;\\n        uint256 apeswapIAZOTokenFee = STATUS.TOTAL_TOKENS_SOLD * FEE_INFO.IAZO_TOKEN_FEE / 1000;\\n                \\n        // base token liquidity\\n        uint256 baseLiquidity = STATUS.TOTAL_BASE_COLLECTED * IAZO_INFO.LIQUIDITY_PERCENT / 1000;\\n        \\n        bool saleInNativeCurrency = IAZO_INFO.IAZO_SALE_IN_NATIVE;\\n\\n        // deposit NATIVE to receive WNative tokens\\n        if (saleInNativeCurrency) {\\n            WNative.deposit{value : baseLiquidity}();\\n        }\\n\\n        baseToken.approve(address(IAZO_LIQUIDITY_LOCKER), baseLiquidity);\\n\\n        // sale token liquidity\\n        uint256 saleTokenLiquidity = (baseLiquidity * 1e18) / IAZO_INFO.LISTING_PRICE;\\n        iazoToken.approve(address(IAZO_LIQUIDITY_LOCKER), saleTokenLiquidity);\\n\\n        address payable feeAddress = FEE_INFO.FEE_ADDRESS;\\n        address payable iazoOwner = IAZO_INFO.IAZO_OWNER;\\n\\n        address newTokenLockContract = IAZO_LIQUIDITY_LOCKER.lockLiquidity(\\n            baseToken, \\n            iazoToken, \\n            baseLiquidity, \\n            saleTokenLiquidity, \\n            block.timestamp + IAZO_TIME_INFO.LOCK_PERIOD, \\n            iazoOwner\\n        );\\n        TOKEN_LOCK_ADDRESS = newTokenLockContract;\\n\\n        STATUS.LP_GENERATION_COMPLETE = true;\\n\\n        if(saleInNativeCurrency){\\n            transferNativeCurrencyPrivate(feeAddress, apeswapBaseFee);\\n        } else { \\n            baseToken.safeTransfer(feeAddress, apeswapBaseFee);\\n        }\\n        iazoToken.safeTransfer(feeAddress, apeswapIAZOTokenFee);\\n        emit FeesCollected(feeAddress, apeswapBaseFee, apeswapIAZOTokenFee);\\n\\n        // send remaining iazo tokens to iazo owner\\n        uint256 remainingIAZOTokenBalance = iazoToken.balanceOf(address(this));\\n        if (remainingIAZOTokenBalance > STATUS.TOTAL_TOKENS_SOLD) {\\n            uint256 amountLeft = remainingIAZOTokenBalance - STATUS.TOTAL_TOKENS_SOLD;\\n            if(IAZO_INFO.BURN_REMAINS){\\n                iazoToken.safeTransfer(IAZO_SETTINGS.getBurnAddress(), amountLeft);\\n            } else {\\n                iazoToken.safeTransfer(iazoOwner, amountLeft);\\n            }\\n        }\\n        \\n        // send remaining base tokens to iazo owner\\n        uint256 remainingBaseBalance = saleInNativeCurrency ? address(this).balance : baseToken.balanceOf(address(this));\\n        \\n        if(saleInNativeCurrency) {\\n            transferNativeCurrencyPrivate(iazoOwner, remainingBaseBalance);\\n        } else {\\n            baseToken.safeTransfer(iazoOwner, remainingBaseBalance);\\n        }\\n        \\n        emit AddLiquidity(baseLiquidity, saleTokenLiquidity, remainingBaseBalance);\\n        return true;\\n    }\\n\\n    /// @notice A public function to sweep accidental ERC20 transfers to this contract. \\n    /// @param _tokens Array of ERC20 addresses to sweep\\n    /// @param _to Address to send tokens to\\n    function sweepTokens(ERC20[] memory _tokens, address _to) external onlyAdmin {\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            ERC20 token = _tokens[index];\\n            require(token != IAZO_INFO.IAZO_TOKEN, \\\"cannot sweep IAZO_TOKEN\\\");\\n            require(token != IAZO_INFO.BASE_TOKEN, \\\"cannot sweep BASE_TOKEN\\\");\\n            uint256 balance = token.balanceOf(address(this));\\n            token.safeTransfer(_to, balance);\\n            emit SweepWithdraw(_to, token, balance);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IWNative.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n//ALL RIGHTS RESERVED\\n//apeswap.finance\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * A Wrapped token interface for native EVM tokens\\n */\\ninterface IWNative {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IIAZOSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n//ALL RIGHTS RESERVED\\n//apeswap.finance\\n\\npragma solidity 0.8.6;\\n\\ninterface IIAZOSettings {\\n    function SETTINGS()\\n        external\\n        view\\n        returns (\\n            address ADMIN_ADDRESS,\\n            address payable FEE_ADDRESS,\\n            address BURN_ADDRESS,\\n            uint256 BASE_FEE, // base fee percentage\\n            uint256 MAX_BASE_FEE, // max base fee percentage\\n            uint256 IAZO_TOKEN_FEE, // base fee percentage\\n            uint256 MAX_IAZO_TOKEN_FEE, // max base fee percentage\\n            uint256 NATIVE_CREATION_FEE, // fee to generate a IAZO contract on the platform\\n            uint256 MIN_LIQUIDITY_PERCENT,\\n            uint256 MAX_LIQUIDITY_PERCENT\\n        );\\n    \\n    function DELAY_SETTINGS()\\n        external\\n        view\\n        returns (\\n            uint256 MIN_IAZO_LENGTH, // minimum iazo active seconds\\n            uint256 MAX_IAZO_LENGTH, // maximum iazo active seconds\\n            uint256 MIN_LOCK_PERIOD,\\n            uint256 START_DELAY, // minium time away from creation that the iazo can start\\n            uint256 MAX_START_DELAY // minium time away from creation that the iazo can start\\n        );\\n\\n    function isIAZOSettings() external view returns (bool);\\n\\n    function getAdminAddress() external view returns (address);\\n\\n    function isAdmin(address toCheck) external view returns (bool);\\n\\n    function getMinStartTime() external view returns (uint256);\\n\\n    function getMaxIAZOLength() external view returns (uint256);\\n\\n    function getMinIAZOLength() external view returns (uint256);\\n\\n    function getBaseFee() external view returns (uint256);\\n\\n    function getIAZOTokenFee() external view returns (uint256);\\n    \\n    function getMaxBaseFee() external view returns (uint256);\\n\\n    function getMaxIAZOTokenFee() external view returns (uint256);\\n\\n    function getNativeCreationFee() external view returns (uint256);\\n\\n    function getMinLockPeriod() external view returns (uint256);\\n\\n    function getMinLiquidityPercent() external view returns (uint256);\\n\\n    function getMaxLiquidityPercent() external view returns (uint256);\\n\\n    function getFeeAddress() external view returns (address payable);\\n\\n    function getBurnAddress() external view returns (address);\\n\\n    function setAdminAddress(address _address) external;\\n\\n    function setFeeAddresses(address _address) external;\\n\\n    function setFees(uint256 _baseFee, uint256 _iazoTokenFee, uint256 _nativeCreationFee) external;\\n\\n    function setStartDelay(uint256 _maxLength) external;\\n\\n    function setMaxIAZOLength(uint256 _maxLength) external;\\n\\n    function setMinIAZOLength(uint256 _minLength) external;\\n\\n    function setMinLockPeriod(uint256 _minLockPeriod) external;\\n\\n    function setMinLiquidityPercent(uint256 _minLiquidityPercent) external;\\n\\n    function setMaxLiquidityPercent(uint256 _maxLiquidityPercent) external;\\n\\n    function setBurnAddress(address _burnAddress) external;\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IIAZOLiquidityLocker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n//ALL RIGHTS RESERVED\\n//apeswap.finance\\npragma solidity 0.8.6;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\ninterface IIAZOLiquidityLocker {\\n    function APE_FACTORY() external view returns (address);\\n\\n    function IAZO_EXPOSER() external view returns (address);\\n\\n    function isIAZOLiquidityLocker() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function apePairIsInitialized(address _token0, address _token1)\\n        external\\n        view\\n        returns (bool);\\n\\n    function lockLiquidity(\\n        ERC20 _baseToken,\\n        ERC20 _saleToken,\\n        uint256 _baseAmount,\\n        uint256 _saleAmount,\\n        uint256 _unlockDate,\\n        address _withdrawer\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleTokenLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBaseBalance\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFeeCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"IAZOTokenFee\",\"type\":\"uint256\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"ForceFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SweepWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousActiveTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newActiveBlocks\",\"type\":\"uint256\"}],\"name\":\"UpdateIAZOBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxSpend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSpend\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxSpendLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BUYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_INFO\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"FEE_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BASE_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"IAZO_TOKEN_FEE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IAZO_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IAZO_INFO\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"IAZO_OWNER\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"IAZO_TOKEN\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"BASE_TOKEN\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"IAZO_SALE_IN_NATIVE\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"TOKEN_PRICE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AMOUNT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HARDCAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SOFTCAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAX_SPEND_PER_BUYER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LIQUIDITY_PERCENT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LISTING_PRICE\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"BURN_REMAINS\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IAZO_LIQUIDITY_LOCKER\",\"outputs\":[{\"internalType\":\"contract IIAZOLiquidityLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IAZO_SETTINGS\",\"outputs\":[{\"internalType\":\"contract IIAZOSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IAZO_TIME_INFO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"START_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ACTIVE_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LOCK_PERIOD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"LP_GENERATION_COMPLETE\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"FORCE_FAILED\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"TOTAL_BASE_COLLECTED\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TOTAL_TOKENS_SOLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TOTAL_TOKENS_WITHDRAWN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TOTAL_BASE_WITHDRAWN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NUM_BUYERS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_LOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceFailAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIAZOState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"_addresses\",\"type\":\"address[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"_addressesPayable\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[12]\",\"name\":\"_uint256s\",\"type\":\"uint256[12]\"},{\"internalType\":\"bool[1]\",\"name\":\"_bools\",\"type\":\"bool[1]\"},{\"internalType\":\"contract ERC20[2]\",\"name\":\"_ERC20s\",\"type\":\"address[2]\"},{\"internalType\":\"contract IWNative\",\"name\":\"_wnative\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIAZO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSpend\",\"type\":\"uint256\"}],\"name\":\"updateMaxSpendLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activeTime\",\"type\":\"uint256\"}],\"name\":\"updateStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"userDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDepositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOfferTokensOnFailure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IAZO", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}