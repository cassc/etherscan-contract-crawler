{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FixedCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IFixedCreator.sol\\\";\\r\\nimport \\\"./FixedVesting.sol\\\";\\r\\n\\r\\ncontract FixedCreator is IFixedCreator{\\r\\n    address[] public override allVestings; // all vestings created\\r\\n    \\r\\n    address public override owner = msg.sender;\\r\\n    \\r\\n    modifier onlyOwner{\\r\\n        require(owner == msg.sender, \\\"!owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get total number of vestings created\\r\\n     */\\r\\n    function allVestingsLength() public override view returns (uint) {\\r\\n        return allVestings.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Create new vesting to distribute token\\r\\n     * @param _token Token project address\\r\\n     * @param _datetime Vesting datetime in epoch\\r\\n     * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\r\\n     */\\r\\n    function createVesting(\\r\\n        address _token,\\r\\n        uint128[] calldata _datetime,\\r\\n        uint128[] calldata _ratio_d2\\r\\n    ) public override onlyOwner returns(address vesting){\\r\\n        vesting = address(new FixedVesting());\\r\\n\\r\\n        allVestings.push(vesting);\\r\\n        \\r\\n        FixedVesting(vesting).initialize(\\r\\n            _token,\\r\\n            _datetime,\\r\\n            _ratio_d2\\r\\n        );\\r\\n        \\r\\n        emit VestingCreated(vesting, allVestings.length - 1);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Transfer ownership\\r\\n     * @param _newOwner New owner address\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public override onlyOwner{\\r\\n        require(_newOwner != address(0) && _newOwner != owner, \\\"!good\\\");\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/IFixedCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFixedCreator{\\r\\n    event VestingCreated(address indexed vesting, uint index);\\r\\n    \\r\\n    function owner() external  view returns (address);\\r\\n    \\r\\n    function allVestingsLength() external view returns(uint);\\r\\n    \\r\\n    function allVestings(uint) external view returns(address);\\r\\n    \\r\\n    function createVesting(address, uint128[] calldata, uint128[] calldata) external returns (address);\\r\\n    \\r\\n    function transferOwnership(address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/FixedVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"./IFixedCreator.sol\\\";\\n\\ncontract FixedVesting{\\n    address public immutable creator = msg.sender;\\n    address public owner = tx.origin;\\n\\n    bool private initialized;\\n    bool public isPaused;\\n\\n    uint128 public vestingLength;\\n    uint128 public sold;\\n    \\n    address public token;\\n\\n    address[] public buyers;\\n\\n    struct Detail{\\n        uint128 datetime;\\n        uint128 ratio_d2;\\n    }\\n\\n    struct Bought{\\n        uint128 buyerIndex;\\n        uint128 purchased;\\n        uint128 completed_d2; // in percent (2 decimal)\\n        uint128 claimed;\\n    }\\n    \\n    mapping(address => Bought) public invoice;\\n    mapping(uint128 => Detail) public vesting;\\n    \\n    modifier onlyOwner{\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Initialize vesting token distribution\\n     * @param _token Token project address\\n     * @param _datetime Vesting datetime in epoch\\n     * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\n     */\\n    function initialize(\\n        address _token,\\n        uint128[] calldata _datetime,\\n        uint128[] calldata _ratio_d2\\n    ) external {\\n        require(!initialized, \\\"Initialized\\\");\\n        require(msg.sender == creator, \\\"!creator\\\");\\n\\n        _setToken(_token);\\n        _newVesting(_datetime, _ratio_d2);\\n        \\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Get length of buyer\\n     */\\n    function getBuyerLength() external view returns (uint){\\n        return buyers.length;\\n    }\\n\\n    /**\\n     * @dev Get vesting runnning\\n     */\\n    function vestingRunning() public view returns(uint128 round, uint128 totalPercent_d2){\\n        uint128 vestingSize = vestingLength;\\n        uint128 total;\\n        for(uint128 i=1; i<=vestingSize; i++){\\n            Detail memory temp = vesting[i];\\n            total += temp.ratio_d2;\\n            \\n            if( (temp.datetime <= block.timestamp && block.timestamp <= vesting[i+1].datetime) ||\\n                (i == vestingSize && block.timestamp >= temp.datetime)\\n            ){\\n                round = i;\\n                totalPercent_d2 = total;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Token claim\\n     */\\n    function claimToken() external {\\n        (uint128 round, uint128 totalPercent_d2) = vestingRunning();\\n        Bought memory temp = invoice[msg.sender];\\n\\n        require(!isPaused && round > 0 && token != address(0), \\\"!started\\\");\\n        require(temp.purchased > 0, \\\"!buyer\\\");\\n        require(temp.completed_d2 < totalPercent_d2, \\\"claimed\\\");\\n        \\n        uint128 amountToClaim;\\n        if(temp.completed_d2 == 0){\\n            amountToClaim = (temp.purchased * totalPercent_d2) / 10000;\\n        } else{\\n            amountToClaim = ((temp.claimed * totalPercent_d2) / temp.completed_d2) - temp.claimed;\\n        }\\n\\n        require(IERC20(token).balanceOf(address(this)) >= amountToClaim && amountToClaim > 0, \\\"insufficient\\\");\\n        \\n        invoice[msg.sender].completed_d2 = totalPercent_d2;\\n        invoice[msg.sender].claimed = temp.claimed + amountToClaim;\\n\\n        TransferHelper.safeTransfer(address(token), msg.sender, amountToClaim);        \\n    }\\n\\n    /**\\n     * @dev Set token project\\n     * @param _token Token project address\\n     */\\n    function _setToken(address _token) private {\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Insert new vestings\\n     * @param _datetime Vesting datetime\\n     * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\n     */\\n    function _newVesting(\\n        uint128[] calldata _datetime,\\n        uint128[] calldata _ratio_d2\\n    ) private {\\n        require(_datetime.length == _ratio_d2.length, \\\"!good\\\");\\n\\n        uint128 vestingSize = vestingLength;\\n        for(uint128 i=0; i<_datetime.length; i++){\\n            if(i != _datetime.length-1) require(_datetime[i] < _datetime[i+1], \\\"!good\\\");\\n            vestingSize += 1;\\n            vesting[vestingSize] = Detail(_datetime[i], _ratio_d2[i]);\\n        }\\n\\n        vestingLength = vestingSize;\\n    }\\n\\n    /**\\n     * @dev Insert new buyers & purchases\\n     * @param _buyer Buyer address\\n     * @param _purchased Buyer purchase\\n     */\\n    function newBuyers(address[] calldata _buyer, uint128[] calldata _purchased) external onlyOwner {\\n        require(_buyer.length == _purchased.length, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_buyer.length; i++){\\n            if(_buyer[i] == address(0) || _purchased[i] == 0) continue;\\n\\n            Bought memory temp = invoice[_buyer[i]];\\n\\n            if(temp.purchased == 0){\\n                buyers.push(_buyer[i]);\\n                invoice[_buyer[i]].buyerIndex = uint128(buyers.length - 1);\\n            }\\n            \\n            invoice[_buyer[i]].purchased = temp.purchased + _purchased[i];\\n            sold += _purchased[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Replace buyers address\\n     * @param _oldBuyer Old address\\n     * @param _newBuyer New purchase\\n     */\\n    function replaceBuyers(address[] calldata _oldBuyer, address[] calldata _newBuyer) external onlyOwner {\\n        require(_oldBuyer.length == _newBuyer.length && buyers.length > 0, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_oldBuyer.length; i++){\\n            Bought memory temp = invoice[_oldBuyer[i]];\\n\\n            if( temp.purchased == 0 ||\\n                _oldBuyer[i] == address(0) ||\\n                _newBuyer[i] == address(0)\\n            ) continue;\\n\\n            buyers[temp.buyerIndex] = _newBuyer[i];\\n\\n            invoice[_newBuyer[i]] = temp;\\n\\n            delete invoice[_oldBuyer[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove buyers\\n     * @param _buyer Buyer address\\n     */\\n    function removeBuyers(address[] calldata _buyer) external onlyOwner {\\n        require(buyers.length > 0, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_buyer.length; i++){\\n            Bought memory temp = invoice[_buyer[i]];\\n\\n            if(temp.purchased == 0 || _buyer[i] == address(0)) continue;\\n\\n            sold -= temp.purchased;\\n\\n            address addressToMove = buyers[buyers.length-1];\\n            \\n            buyers[temp.buyerIndex] = addressToMove;\\n            invoice[addressToMove].buyerIndex = temp.buyerIndex;\\n\\n            buyers.pop();\\n            delete invoice[_buyer[i]];\\n        }\\n    }\\n    \\n    /**\\n     * @dev Replace buyers purchase\\n     * @param _buyer Buyer address\\n     * @param _newPurchased new purchased\\n     */\\n    function replacePurchases(address[] calldata _buyer, uint128[] calldata _newPurchased) external onlyOwner {\\n        require(_buyer.length == _newPurchased.length && buyers.length > 0, \\\"!good\\\");\\n\\n        for(uint16 i=0; i<_buyer.length; i++){\\n            Bought memory temp = invoice[_buyer[i]];\\n\\n            if( temp.purchased == 0 ||\\n                temp.completed_d2 > 0 ||\\n                _buyer[i] == address(0) ||\\n                _newPurchased[i] == 0) continue;\\n            \\n            sold = sold - temp.purchased + _newPurchased[i];\\n            invoice[_buyer[i]].purchased = _newPurchased[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Update vestings datetime\\n     * @param _vestingRound Vesting round\\n     * @param _newDatetime new datetime in epoch\\n     */\\n    function updateVestingDatetimes(uint128[] calldata _vestingRound, uint128[] calldata _newDatetime) external onlyOwner {\\n        require(_vestingRound.length == _newDatetime.length, \\\"!good\\\");\\n\\n        (uint128 round, ) = vestingRunning();\\n        uint128 vestingSize = vestingLength;\\n\\n        for(uint128 i=0; i<_vestingRound.length; i++){\\n            if( _vestingRound[i] > vestingSize ||\\n                round >= _vestingRound[i]) continue;\\n\\n            vesting[_vestingRound[i]].datetime = _newDatetime[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Update vestings ratio\\n     * @param _vestingRound Vesting round\\n     * @param _newRatio_d2 New ratio in percent (decimal 2)\\n     */\\n    function updateVestingRatios(uint128[] calldata _vestingRound, uint128[] calldata _newRatio_d2) external onlyOwner {\\n        require(_vestingRound.length == _newRatio_d2.length, \\\"!good\\\");\\n\\n        (uint128 round, ) = vestingRunning();\\n        uint128 vestingSize = vestingLength;\\n\\n        for(uint128 i=0; i<_vestingRound.length; i++){\\n            if(_vestingRound[i] > vestingSize ||\\n                round >= _vestingRound[i]) continue;\\n\\n            vesting[_vestingRound[i]].ratio_d2 = _newRatio_d2[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert new vestings\\n     * @param _datetime Vesting datetime\\n     * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\n     */\\n    function newVesting(\\n        uint128[] calldata _datetime,\\n        uint128[] calldata _ratio_d2\\n    ) external onlyOwner {\\n        _newVesting(_datetime, _ratio_d2);\\n    }\\n\\n    /**\\n     * @dev Remove last vesting round\\n     */\\n    function removeLastVestingRound() external onlyOwner {\\n        uint128 vestingSizeTarget = vestingLength-1;\\n\\n        delete vesting[vestingSizeTarget];\\n\\n        vestingLength = vestingSizeTarget;\\n    }\\n\\n    /**\\n     * @dev Emergency condition to withdraw token\\n     * @param _target Target address\\n     * @param _amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(address _target, uint128 _amount) external onlyOwner {\\n        require(_target != address(0), \\\"!good\\\");\\n        \\n        uint128 contractBalance = uint128(IERC20(token).balanceOf(address(this)));\\n        if(_amount > contractBalance) _amount = uint128(contractBalance);\\n\\n        TransferHelper.safeTransfer(address(token), _target, _amount);\\n    }\\n\\n    /**\\n     * @dev Set token project\\n     * @param _token Token project address\\n     */\\n    function setToken(address _token) external onlyOwner {\\n        _setToken(_token);\\n    }\\n    \\n    /**\\n     * @dev Pause vesting activity\\n     */\\n    function togglePause() external onlyOwner {\\n        isPaused = !isPaused;\\n    }\\n    \\n    /**\\n     * @dev Transfer ownership\\n     * @param _newOwner New owner address\\n     */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"!good\\\");\\n        owner = _newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVestingsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"_datetime\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_ratio_d2\",\"type\":\"uint128[]\"}],\"name\":\"createVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FixedCreator", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}