{"SourceCode": "pragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n//paid\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n//\u535a\u997c\u7684\u5de5\u5382\u5408\u7ea6\u63a5\u53e3\r\ninterface IPancakeFactory {\r\n    //\u4ea4\u6613\u5bf9\u4e8b\u4ef6\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    \r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\n//\u535a\u997c\u7684\u8def\u7531\u63a5\u53e3 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528uniswap\u7684\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n// router2\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: XY/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: XY/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: XY/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: XY/Xyb2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract DHXY is Context, IERC20, Ownable{\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 public _total;\r\n    string private _name = \"Western Journey\";\r\n    string private _symbol = \"DHXY\";\r\n    address[] public teamsAddr;\r\n    address public defaultReferrer =0x0E83254CD3DbC8bE11634CED8957CD673b6bfefD;\r\n    uint256 public waitIncome;\r\n    bool public istransferfee = true;\r\n    struct User{\r\n        address referrer;\r\n        uint256 subNum;\r\n        uint256 teamsNum;\r\n        uint256 reward;\r\n        uint256 income;\r\n        uint256 incomed;\r\n        uint256 power;\r\n        uint256 shareReward;\r\n        uint256 stakeUsdt;\r\n        uint256 staketoken;\r\n        uint256 totalStakeUsdt;\r\n        uint256 totalStakeToken;\r\n    }\r\n    struct stakePool {\r\n        uint256 TotalAmountUsdt;\r\n        uint256 TotalAmountToken;\r\n        uint256 date;\r\n    }\r\n    struct RewardModel{\r\n        uint256 date;\r\n        string  types;\r\n        uint256 amount;\r\n    }\r\n    mapping(address=>RewardModel[]) private mintRewards;\r\n    mapping(address=>RewardModel[]) private shareRewards;\r\n    stakePool public Systempool;\r\n    mapping(address =>User) public userMap;\r\n    mapping(address=>bool) public isReg;\r\n    mapping(address=>uint256) public regTime;\r\n    mapping(address=>address[]) private teams;\r\n    mapping(address=>address[]) private subordinates;\r\n    address[] public users;\r\n    address private marketingAddr = 0x8a8D066f3AFFed80deD7094643d87290bA38aD87;\r\n    address private skillAddr = 0x60dEdA0B459D48227d06A9aD5AEff3e8Fa7c1ecD;\r\n    address private zoologyAddr = 0xF2736D77366866ea16927A778a102f422a88281B;\r\n    address private potwalletAddr = 0x3ce0a0FDc0b9b536C83B0e6F087fB7C3307E8e58;\r\n    address public marketing = 0x167b564De56a8245892785645Dd0F3d2C931Bd56;\r\n    address public buysell = 0x0a101dA9dEB38219cbfAB8D7e3fBf90754DFD50D;\r\n    address public lpwallet = 0xEf4CBC9A8bB6D7c87cC1e24dC69102F8eE5943Ed;\r\n    address public nftwallet=0x694cBC1cc4f08CC346eCAF50cf1B37b4A5A89068;\r\n\r\n    address private _pairAddress;\r\n    IPancakeRouter02 private _router;\r\n    address private WBNB = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private pancakeRouterAddr =0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    uint256 public buyFeeToDifidend = 0;\r\n    uint256 public buyFeeToMarketing = 125;\r\n    uint256 public sellFeeToDifidend = 0;\r\n    uint256 public sellFeeToMarketing = 125;\r\n\r\n    uint256 public feeToLpDifidend =125 ;\r\n    uint256 public feeToburn = 150;\r\n\r\n    uint256 public amountToStopBurn = 50;\r\n    mapping(address => bool) public _exemptFee;\r\n    mapping(address => bool) private _isBlacklist;\r\n    bool private _isFirstAddLiquidityFlag = false;\r\n    uint256 private _blacklistStartTime;\r\n    event Reward(address indexed from, address indexed to, uint256 value, string msg);\r\n\r\n\r\n    constructor(address _preUser) payable{\r\n        uint256 total = 33330000000000000000000000;\r\n        mintInit(total);\r\n        exemptFeeInit();\r\n        defaultReferrer = _preUser;\r\n        isReg[defaultReferrer] = true;\r\n        users.push(defaultReferrer);\r\n        regTime[defaultReferrer]= block.timestamp;\r\n        userMap[defaultReferrer].referrer = address(0);\r\n    }\r\n    receive() external payable{}\r\n    //------------------------------------------\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        // _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    //------------------------------------------\r\n\r\n    function mintInit(uint256 totalSuply) internal{\r\n        _total = totalSuply;\r\n        _mint(potwalletAddr,_total.mul(10).div(100));\r\n        _mint(marketingAddr,_total.mul(5).div(100));\r\n        _mint(skillAddr,_total.mul(10).div(100));\r\n        _mint(zoologyAddr,_total.mul(10).div(100));\r\n        _mint(nftwallet,_total.mul(5).div(100));\r\n        _mint(address(this),_total.mul(60).div(100));\r\n    }\r\n    function exemptFeeInit() internal{\r\n        _exemptFee[msg.sender] = true;\r\n        _exemptFee[address(this)] = true;\r\n        _exemptFee[marketingAddr] = true;\r\n        _exemptFee[skillAddr] = true;\r\n        _exemptFee[zoologyAddr] = true;\r\n        _exemptFee[marketing] = true;\r\n        _exemptFee[nftwallet] = true;\r\n        _exemptFee[potwalletAddr] = true;\r\n        _exemptFee[pancakeRouterAddr] = true;\r\n    }\r\n    \r\n    function setexemptFee(address feeUser,bool isfee) public onlyOwner{\r\n        _exemptFee[feeUser] = isfee;\r\n    }\r\n    \r\n    function setPairAddress(address pairAddress) public onlyOwner{\r\n        require(pairAddress != address(0),\"This address is not zero address\");\r\n        require(isContract(pairAddress),\"pairAddress error\");\r\n        _pairAddress = pairAddress;\r\n    } \r\n    function setWbnb(address wbnbAddress) public onlyOwner{\r\n        require(isContract(wbnbAddress),\"wbnbAddress error\");\r\n        WBNB = wbnbAddress;\r\n    }\r\n    \r\n    function setDefaultAddress(address _referrer) public onlyOwner returns(bool){\r\n        userMap[defaultReferrer].referrer = _referrer;\r\n        defaultReferrer= _referrer;\r\n        users.push(_referrer);\r\n        isReg[_referrer] = true;\r\n        return true;\r\n    }\r\n    function register(address _referrer) public returns(bool){\r\n        if(_referrer == address(0) || _referrer == msg.sender || !isReg[_referrer]){\r\n            _referrer = defaultReferrer;\r\n        }\r\n        if(isReg[_referrer] && !isReg[msg.sender]){\r\n            regTime[msg.sender] = block.timestamp;\r\n            userMap[msg.sender].referrer = _referrer;\r\n            users.push(msg.sender);\r\n            isReg[msg.sender] = true;\r\n            userMap[_referrer].subNum = userMap[_referrer].subNum+1;\r\n            subordinates[_referrer].push(msg.sender);\r\n            _addTeams(msg.sender);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    function _addTeams(address _subaddr) internal{\r\n        address preAddr = userMap[_subaddr].referrer;\r\n        for(uint i=1;i<=10;i++){\r\n            teams[preAddr].push(_subaddr);\r\n            userMap[preAddr].teamsNum = userMap[preAddr].teamsNum+1;\r\n            if(preAddr == defaultReferrer || preAddr == address(0)){\r\n                break;\r\n            }\r\n            preAddr = userMap[preAddr].referrer;\r\n        }\r\n    }\r\n\r\n    function getTeams(address addr) public view returns(address[] memory){\r\n        return teams[addr];\r\n    }\r\n    function getSubordinates(address addr) public view returns(address[] memory){\r\n        return subordinates[addr];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns(bool)\r\n        {\r\n            _transfer(msg.sender,recipient,amount);\r\n            return true;\r\n        } \r\n\r\n    function _transfer(address sender,address recipient,uint256 amount) internal {\r\n        require(sender != address(0),\"ERC20: transfer from the zero address\");\r\n        require(amount > 0,\"Transfer amount must be greater than zero\");\r\n        require(!_isBlacklist[sender],\"Transfer from the blacklist address\");\r\n        if(\r\n            !_isFirstAddLiquidityFlag &&\r\n            address(recipient) == _pairAddress &&\r\n            amount > (_total.mul(10).div(100))\r\n        ){\r\n            _isFirstAddLiquidityFlag = true;\r\n            _blacklistStartTime = block.timestamp;\r\n        }\r\n        if(\r\n            block.timestamp <= (_blacklistStartTime + 30 seconds) &&\r\n            address(sender) == _pairAddress\r\n        ){\r\n            _isBlacklist[recipient] = true;\r\n        }\r\n        \r\n        uint256 finalAmount = amount;\r\n        if(sender == _pairAddress && !_exemptFee[recipient] && istransferfee){\r\n            finalAmount = processFee(\r\n                sender,\r\n                amount,\r\n                buyFeeToMarketing\r\n            );\r\n        }\r\n        if(recipient == _pairAddress && !_exemptFee[sender] && istransferfee){\r\n            finalAmount = processFee(\r\n                sender,\r\n                amount,\r\n                sellFeeToMarketing\r\n            );\r\n        }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n        emit Transfer(sender, recipient, finalAmount);\r\n    }\r\n    \r\n\r\n    function processFee(\r\n                address sender,\r\n                uint256 amount,\r\n                uint256 FeeToMarketing\r\n            ) internal returns(uint256 finalAmount){\r\n                \r\n                uint256 difidendLPAmount = amount.mul(feeToLpDifidend).div(10000);\r\n                if(difidendLPAmount>0){\r\n                    _balances[lpwallet] = _balances[lpwallet].add(difidendLPAmount);\r\n                    emit Transfer(sender, lpwallet, difidendLPAmount);\r\n                }\r\n\r\n                uint256 difidendMarkingAmount = amount.mul(FeeToMarketing).div(10000);\r\n                if(difidendMarkingAmount>0){\r\n                    _balances[marketing] = _balances[marketing].add(difidendMarkingAmount);\r\n                    emit Transfer(sender, marketing, difidendMarkingAmount);\r\n                }\r\n                uint256 burnAmount;\r\n                if(_balances[address(0)] < (_total.mul(amountToStopBurn).div(10000)) ){\r\n                    burnAmount = amount.mul(feeToburn).div(10000);\r\n                    _balances[address(0)] = _balances[address(0)].add(burnAmount);\r\n                    emit Transfer(sender,address(0),burnAmount);\r\n                }\r\n\r\n                uint256 totalFeeAmount = amount.sub(difidendLPAmount);\r\n                totalFeeAmount = totalFeeAmount.sub(difidendMarkingAmount).sub(burnAmount);\r\n                finalAmount = totalFeeAmount;\r\n            }\r\n\r\n\r\n    \r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function doReward(address addr,string memory types,uint256 amount) internal virtual{\r\n        RewardModel memory tempReward;\r\n        tempReward.date = block.timestamp;\r\n        tempReward.types = types;\r\n        tempReward.amount = amount;\r\n        if(keccak256(abi.encode(types)) == keccak256(abi.encode(\"mint\"))){\r\n            mintRewards[addr].push(tempReward);\r\n        }\r\n        if(keccak256(abi.encode(types)) == keccak256(abi.encode(\"share\"))){\r\n            shareRewards[addr].push(tempReward);\r\n        }\r\n\r\n    }\r\n    \r\n    function getMintRewardList(address addr) public view returns(RewardModel[] memory){\r\n        return mintRewards[addr];\r\n    }\r\n    \r\n    function getShareRewardList(address addr) public view returns(RewardModel[] memory){\r\n        return shareRewards[addr];\r\n    }\r\n    \r\n    function withDraw(uint256 amount) public {\r\n        require(amount <= userMap[msg.sender].income,\"Balance is not enough\");\r\n        require(_balances[address(this)] >=amount,\"Draw fail\");\r\n        userMap[msg.sender].income -= amount;\r\n        userMap[msg.sender].incomed += amount;\r\n        waitIncome -= amount;\r\n        if(_balances[address(this)]>=amount){\r\n            _balances[address(this)]-=amount;\r\n            _balances[msg.sender]+=amount;\r\n            emit Transfer(address(this), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    address stakeWallet= 0x1b12929f2f7519e3fb429947e438c6209dDE9EBd;\r\n    \r\n    address transferWallet= 0xb07E23a12c632a23f2a09a9C859E3Fb2ABA8c817;\r\n    \r\n    function setStakeWallet(address addr) public virtual onlyOwner returns(bool){\r\n        stakeWallet = addr;\r\n        return true;\r\n    }\r\n    function setTransferWallet(address addr) public virtual onlyOwner returns(bool){\r\n        transferWallet = addr;\r\n        return true;\r\n    }\r\n    \r\n    function getTokenAmount(uint256 amount) internal view returns(uint256,uint256){\r\n        uint112 token0;\r\n        uint112 token1;\r\n        uint112 token2;\r\n        (token0,token1,) = IPancakePair(_pairAddress).getReserves();\r\n        address token =IPancakePair(_pairAddress).token0();\r\n        if(token==address(this)){\r\n            token2= token1;\r\n            token1 = token0;\r\n            token0 = token2;\r\n        }\r\n        uint256 total;\r\n        total = IPancakePair(_pairAddress).totalSupply();\r\n        uint256 total0 = amount.mul(uint256(token0)).div(total);\r\n        uint256 total1 = amount.mul(uint256(token1)).div(total);\r\n        return (total0,total1);\r\n    }\r\n\r\n    struct stakeModel {\r\n        address account;\r\n        uint256 amount;\r\n        uint256 usdt;\r\n        uint256 token;\r\n        uint256 hopereward;\r\n        uint256 drawAmount;\r\n        uint256 mul;\r\n        uint256 startime;\r\n        uint256 darwtime;\r\n        uint256 unstakeTime;\r\n        bool isover;\r\n        bool isdraw;\r\n    }\r\n\r\n    mapping(address=>stakeModel[]) public stakes;\r\n\r\n\r\n    function getLPBalanceOf()public view returns (uint256){\r\n        return IPancakePair(_pairAddress).balanceOf(msg.sender);\r\n    }\r\n\r\n\r\n    function stake(uint256 amount,uint8 mul) public returns(uint8){\r\n        require(_balances[address(this)]>waitIncome,\"mint over\");\r\n        require(amount>0,\"Amount is not enough!\");\r\n        uint256 lp_amount = IPancakePair(_pairAddress).balanceOf(msg.sender);\r\n        require(lp_amount>=amount,\"lp is not enough!\"); \r\n       \r\n        uint8 tempmul;\r\n        tempmul = mul%7;\r\n        if(tempmul<2 || tempmul>=5) {mul=2;}else{mul = tempmul;}\r\n\r\n        IPancakePair(_pairAddress).transferFrom(msg.sender,stakeWallet, amount);\r\n        uint256 total0;\r\n        uint256 total1;\r\n        (total0,total1) = getTokenAmount(amount);\r\n        stakeModel memory stake_temp;\r\n        stake_temp.account = msg.sender;\r\n        stake_temp.amount = amount;\r\n        stake_temp.startime = block.timestamp;\r\n        stake_temp.darwtime = block.timestamp;\r\n        stake_temp.usdt = total0;\r\n        stake_temp.token = total1;\r\n        stake_temp.mul = mul;\r\n        stake_temp.unstakeTime = 0;\r\n        stake_temp.isover = false;\r\n        stake_temp.isdraw = false;\r\n        stake_temp.hopereward = stake_temp.token*stake_temp.mul;\r\n        stakes[msg.sender].push(stake_temp);\r\n\r\n        userMap[msg.sender].power += amount;\r\n        userMap[msg.sender].stakeUsdt += total0;\r\n        userMap[msg.sender].staketoken += total1;\r\n        userMap[msg.sender].totalStakeUsdt += total0;\r\n        userMap[msg.sender].totalStakeToken += total1;\r\n\r\n        Systempool.TotalAmountUsdt+=total0;\r\n        Systempool.TotalAmountToken+=total1;\r\n        Systempool.date = block.timestamp;\r\n        return mul;\r\n    }\r\n    function unstake(uint256 index) public virtual returns(bool){\r\n        if(_balances[address(this)]>waitIncome){\r\n            require(!stakes[msg.sender][index].isdraw,\"over\");\r\n            require(stakes[msg.sender][index].isover,\"not over\");\r\n        }\r\n        \r\n        if(!stakes[msg.sender][index].isover){\r\n            draw(index);\r\n        }\r\n        stakes[msg.sender][index].isdraw  = true;\r\n        stakes[msg.sender][index].isover  = true;\r\n        IERC20(WBNB).transferFrom(transferWallet, stakes[msg.sender][index].account, stakes[msg.sender][index].usdt);\r\n        uint256 burnAmount;\r\n        burnAmount = stakes[msg.sender][index].token.mul(30).div(100);\r\n        IERC20(address(this)).transferFrom(transferWallet, address(0),burnAmount);\r\n        userMap[msg.sender].power -= stakes[msg.sender][index].amount;\r\n        userMap[msg.sender].stakeUsdt -= stakes[msg.sender][index].usdt; \r\n        userMap[msg.sender].staketoken -= stakes[msg.sender][index].token; \r\n        Systempool.TotalAmountUsdt-=stakes[msg.sender][index].usdt;\r\n        Systempool.TotalAmountToken-=stakes[msg.sender][index].token;\r\n        Systempool.date = block.timestamp;\r\n        return true;\r\n    }\r\n    function getStakesList(address addr) public view returns(stakeModel[] memory){\r\n        return stakes[addr];\r\n    }\r\n    function getShareFee(uint256 level) internal pure returns(uint256){\r\n        if(level==1) return 30;\r\n        if(level==2) return 20;\r\n        if(level==3) return 10;\r\n        if(level==4) return 5;\r\n        if(level>=5 && level<=10) return 1;\r\n        return 0;\r\n    }\r\n    function getShareNum(address addr) public view returns(uint256){\r\n        address[] memory shares = subordinates[addr];\r\n        uint256 num=0;\r\n        for(uint256 i=0;i<shares.length;i++){\r\n            if(userMap[shares[i]].stakeUsdt>=100*10**18){\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n        \r\n    }\r\n    function draw(uint256 index) public {\r\n        require(!stakes[msg.sender][index].isover,\"over!\");\r\n        require(!stakes[msg.sender][index].isdraw,\"over!\");\r\n        stakeModel[] memory stakes_temp = stakes[msg.sender];\r\n        uint256 fee = 8;\r\n        uint256 amounted =(stakes_temp[index].darwtime-stakes_temp[index].startime)*fee*stakes_temp[index].token/(24*60*60*1000); \r\n        uint256 amount =(block.timestamp-stakes_temp[index].darwtime)*fee*stakes_temp[index].token/(24*60*60*1000);\r\n        if((amount+amounted)>=stakes_temp[index].hopereward){\r\n           amount=stakes_temp[index].hopereward-amounted; \r\n           stakes[msg.sender][index].isover = true;\r\n        }\r\n        if(amount>0){\r\n            userMap[msg.sender].income+=amount;\r\n            waitIncome+=amount;\r\n            stakes[msg.sender][index].darwtime = block.timestamp;\r\n            stakes[msg.sender][index].drawAmount +=amount;\r\n            emit Reward(msg.sender, msg.sender, amount, 'mint');\r\n            doReward(msg.sender,'mint',amount);\r\n            address preAddr = userMap[msg.sender].referrer;\r\n            for (uint256 i = 1; i < 11; i++) {\r\n                if(preAddr==address(0) || preAddr==defaultReferrer) break;\r\n                if(userMap[preAddr].stakeUsdt < 100*10**18){\r\n                    preAddr = userMap[preAddr].referrer;\r\n                    continue;\r\n                }\r\n                uint256 tmpnum=getShareNum(preAddr);\r\n                if(tmpnum<i){\r\n                    preAddr = userMap[preAddr].referrer;\r\n                    continue;\r\n                }\r\n                \r\n                uint256 sharefee = getShareFee(i);\r\n                if(sharefee==0) {\r\n                    preAddr = userMap[preAddr].referrer; \r\n                    continue;\r\n                }\r\n                uint256 realityamount = amount.mul(sharefee).div(100);\r\n                userMap[preAddr].income+=realityamount;\r\n                userMap[preAddr].shareReward+=realityamount;\r\n                waitIncome+=realityamount;\r\n                emit Reward(msg.sender, preAddr, realityamount, 'share');\r\n                doReward(preAddr,'share',realityamount);\r\n                preAddr = userMap[preAddr].referrer;\r\n                \r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n    struct UserInfo{\r\n        address addr;\r\n        User userinfo;\r\n        stakeModel[] stakes;\r\n    }\r\n\r\n    function getAllUsers() public view returns(UserInfo[] memory){\r\n       UserInfo[] memory tempArr = new UserInfo[](users.length);\r\n        for(uint256 index;index<users.length;index++){\r\n            UserInfo memory tempinfo;\r\n            tempinfo.addr = users[index];\r\n            tempinfo.userinfo = userMap[users[index]];\r\n            tempinfo.stakes = stakes[users[index]];\r\n            tempArr[index] = tempinfo;\r\n        }\r\n\r\n        return tempArr;\r\n    }\r\n\r\n    function checkChilden(address addr,address preAddr)internal view returns(bool){\r\n        if(userMap[addr].referrer == address(0)) return false;\r\n        if(userMap[addr].referrer == preAddr){\r\n            return true;\r\n        }else{\r\n            return checkChilden(userMap[addr].referrer,preAddr);\r\n        }\r\n    }\r\n\r\n\r\n    function getTeamsYeji(address addr)public view returns(uint256,uint256,uint256,uint256,uint256) {\r\n        uint256 token;\r\n        uint256 usdt;\r\n        uint256 count;\r\n        uint256 staketoken;\r\n        uint256 stakeusdt;\r\n        for(uint256 index;index<users.length;index++){\r\n            if(checkChilden(users[index],addr)){\r\n                //true\r\n                count++;\r\n                token+=userMap[users[index]].totalStakeToken;\r\n                usdt+=userMap[users[index]].totalStakeUsdt;\r\n                staketoken+=userMap[users[index]].staketoken;\r\n                stakeusdt+=userMap[users[index]].stakeUsdt;\r\n            }\r\n        }\r\n        return (token,usdt,count,staketoken,stakeusdt);\r\n    }\r\n    \r\n    function getUsers() public view returns(address[] memory){\r\n        return users;\r\n    }\r\n\r\n    function setIsTransferFee(bool flag) public onlyOwner{\r\n        istransferfee = flag;\r\n    }\r\n    function setBuyFeeToMarketing(uint256 fee) public onlyOwner{\r\n        buyFeeToMarketing = fee;\r\n    }\r\n    function setSellFeeToMarketing(uint256 fee) public onlyOwner{\r\n        sellFeeToMarketing = fee;\r\n    }\r\n    function setFeeToLpDifidend(uint256 fee) public onlyOwner{\r\n        sellFeeToDifidend = fee;\r\n    }\r\n    function setFeeToburn(uint256 fee) public onlyOwner{\r\n        feeToburn = fee;\r\n    }\r\n    // add user\r\n    function Addmember(address account,\r\n    uint256 regtimes,\r\n    address preaddr\r\n    ) public onlyOwner{\r\n        require(account!=address(0),\"Address is not zero!\");\r\n        require(preaddr!=address(0),\"Address is not zero!\");\r\n        require(isReg[preaddr],\"referrer is not found!\");\r\n        require(!isReg[account],\"address is existed!\");\r\n        if(regtimes==0) regtimes = block.timestamp;\r\n        isReg[account] = true;\r\n        regTime[account] = regtimes;\r\n        userMap[account].referrer = preaddr;\r\n        users.push(account);\r\n        userMap[preaddr].subNum = userMap[preaddr].subNum.add(1);\r\n        subordinates[preaddr].push(account);\r\n        _addTeams(account);\r\n    }\r\n   \r\n    //stake\r\n    function initStake(address account,uint256 amount,uint256 token,uint256 usdt,uint256 mul,uint256 time) public onlyOwner{\r\n        require(amount>0,\"Amount is not enough!\");\r\n        require(isReg[account],\"account not register!\");\r\n        if(mul<2 || mul>6) mul=2;\r\n        if(time==0) time = block.timestamp;\r\n        stakeModel memory stake_temp;\r\n        stake_temp.account = account;\r\n        stake_temp.amount = amount;\r\n        stake_temp.startime = time;\r\n        stake_temp.darwtime = time;\r\n        stake_temp.usdt = usdt;\r\n        stake_temp.token = token;\r\n        stake_temp.mul = mul;\r\n        stake_temp.unstakeTime = 0;\r\n        stake_temp.isover = false;\r\n        stake_temp.isdraw = false;\r\n        stake_temp.hopereward = stake_temp.token.mul(stake_temp.mul);\r\n        stakes[account].push(stake_temp);\r\n\r\n        userMap[account].power += amount;\r\n        userMap[account].stakeUsdt += usdt;\r\n        userMap[account].staketoken += token;\r\n        userMap[account].totalStakeUsdt += usdt;\r\n        userMap[account].totalStakeToken += token;\r\n\r\n        Systempool.TotalAmountUsdt+=usdt;\r\n        Systempool.TotalAmountToken+=token;\r\n        Systempool.date = block.timestamp;\r\n    }\r\n\r\n    function removeStake(address account,uint256 index)public onlyOwner{\r\n        require(stakes[account].length>index,\"remove fail\");\r\n        delete stakes[account][index];\r\n    }\r\n\r\n    function setStake(address account,uint256 index,uint256 time,uint256 darwtime,uint256 muls)public onlyOwner{\r\n        require(stakes[account].length>index,\"fail\");\r\n        if(time>0) stakes[account][index].startime = time;\r\n        if(darwtime>0) stakes[account][index].darwtime = time;\r\n        if(muls>=2 || muls<=6){\r\n            stakes[account][index].mul = muls;\r\n            stakes[account][index].hopereward = stakes[account][index].token.mul(muls);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_preUser\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"regtimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"preaddr\",\"type\":\"address\"}],\"name\":\"Addmember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Systempool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TotalAmountUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalAmountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToStopBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buysell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamsNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staketoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeToken\",\"type\":\"uint256\"}],\"internalType\":\"struct DHXY.User\",\"name\":\"userinfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hopereward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darwtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isover\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isdraw\",\"type\":\"bool\"}],\"internalType\":\"struct DHXY.stakeModel[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DHXY.UserInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMintRewardList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct DHXY.RewardModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getShareNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getShareRewardList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct DHXY.RewardModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStakesList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hopereward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darwtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isover\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isdraw\",\"type\":\"bool\"}],\"internalType\":\"struct DHXY.stakeModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSubordinates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTeams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTeamsYeji\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"initStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"istransferfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setDefaultAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeToburn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setIsTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darwtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"muls\",\"type\":\"uint256\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setStakeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTransferWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wbnbAddress\",\"type\":\"address\"}],\"name\":\"setWbnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isfee\",\"type\":\"bool\"}],\"name\":\"setexemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mul\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hopereward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"darwtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isover\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamsAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamsNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staketoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DHXY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000e83254cd3dbc8be11634ced8957cd673b6bfefd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6a021c0b882ea088399f95c1ac9116ceb74829bef418a9f23aa4a0cc9b48afcf"}