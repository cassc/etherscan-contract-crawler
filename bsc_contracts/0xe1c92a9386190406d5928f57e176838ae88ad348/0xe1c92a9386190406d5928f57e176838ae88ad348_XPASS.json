{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract XPASS is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    struct buybackShare {\r\n        uint256 amount;\r\n        uint256 totalRealised;\r\n        uint256 holderSince;\r\n    }\r\n\r\n    address[] buybackShareHolders;\r\n    address public REWARD = 0x337C218f16dBc290fB841Ee8B97A74DCdAbfeDe8;\r\n    address WBNB          = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD          = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO          = 0x0000000000000000000000000000000000000000;\r\n\r\n    string _name = \"X-PASS\";\r\n    string _symbol = \"XPASS\";\r\n    uint8 _decimals = 0;\r\n\r\n    uint256 _totalSupply = 1;\r\n\r\n    //MAX BUY/SELL SET TO 100% *** CHANGE THIS IF NEEDED ***\r\n    uint256 public _maxTxAmount            = (_totalSupply * 100) / 100;\r\n\r\n    //MAX WALLET HOLDING OF 100% *** CHANGE THIS IF NEEDED ***\r\n    uint256 public _maxWalletToken         = (_totalSupply * 100) / 100;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) public _isBlacklisted;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isTimelockExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    mapping (address => buybackShare) public buybackShares;\r\n\r\n    uint256 public totalBurned            = 0;\r\n\r\n    //LIQUIDITY SETTINGS\r\n    uint256 targetLiquidity               = 20;\r\n    uint256 targetLiquidityDenominator    = 100;\r\n\r\n    //EXTERNAL BUYBACK CONFIG\r\n    uint256 public totalShares = _totalSupply;\r\n    bool public shouldDistributeBuyback   = true;\r\n    uint256 currentIndex;\r\n    \r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    bool public tradingOpen = false;\r\n\r\n    //BURNING MECHANISM\r\n    bool public realBurn = false;\r\n\r\n    event AdminTokenRecovery(address tokenAddress, uint256 tokenAmount);      \r\n\r\n    uint256 distributorGas = 500000;\r\n\r\n    //COOLDOWN & TIMER FUNCTIONALITY\r\n    bool public buyCooldownEnabled = true;\r\n    uint8 public cooldownTimerInterval = 30;\r\n    mapping (address => uint) private cooldownTimer;\r\n\r\n    //HOLDER SINCE MECHANISM\r\n    uint256 public holderSinceMinimum = _totalSupply * 1 / 10000; // 0.001% of supply\r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        //router = IDEXRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // TESTNET ONLY\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // MAINNET ONLY\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = uint256(-1);      \r\n        _balances[msg.sender]     = _totalSupply;\r\n\r\n        emit Transfer(ZERO, msg.sender, _totalSupply); \r\n\r\n        isDividendExempt[pair]          = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD]          = true;\r\n\r\n        totalShares = getCirculatingSupply();\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\r\n    function buybackPercentageShares(address shareholder) public view returns (uint256) {\r\n        if (!isDividendExempt[shareholder]) {\r\n            uint _numerator  = buybackShares[shareholder].amount * 10 ** (5);\r\n            uint _quotient =  ((_numerator / totalShares) + 5) / 10;\r\n            uint256 percentageOfThisGuy = _quotient;\r\n            return percentageOfThisGuy;\r\n        } else { return 0; }\r\n    }\r\n\r\n    function getUserIndex(uint256 _index) public view returns (address) {\r\n        address userIndex = buybackShareHolders[_index];\r\n        return userIndex;\r\n    }\r\n\r\n    function partialBuybackPercentageShares(address shareholder, uint256 _partialTotalShares) public view returns (uint256) {\r\n        if (!isDividendExempt[shareholder]) {\r\n            uint _numerator  = buybackShares[shareholder].amount * 10 ** (5);\r\n            uint _quotient =  ((_numerator / _partialTotalShares) + 5) / 10;\r\n            uint256 percentageOfThisGuy = _quotient;\r\n            return percentageOfThisGuy;\r\n        } else { return 0; }\r\n    }\r\n    \r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = buybackShareHolders.length;\r\n        buybackShareHolders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        buybackShareHolders[shareholderIndexes[shareholder]] = buybackShareHolders[buybackShareHolders.length-1];\r\n        shareholderIndexes[buybackShareHolders[buybackShareHolders.length-1]] = shareholderIndexes[shareholder];\r\n        buybackShareHolders.pop();\r\n    }\r\n\r\n    function resetTotalShares() internal {\r\n        totalShares = 0;\r\n        uint256 shareholderCount = buybackShareHolders.length;\r\n        uint256 iterations = 0;\r\n        while(iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            address thisGuy = buybackShareHolders[currentIndex];\r\n            totalShares = totalShares.add(buybackShares[thisGuy].amount);\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setHolderSince(address shareholder, uint256 _blockNumber) internal {\r\n        buybackShares[shareholder].holderSince = _blockNumber;\r\n        resetTotalShares();\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) public onlyOwner {\r\n        if(amount > 0 && buybackShares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && buybackShares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n        buybackShares[shareholder].amount = amount;\r\n        resetTotalShares();\r\n    }\r\n\r\n    function buyBackNow(uint256 _amountBNBToLiquify) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = REWARD;\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _amountBNBToLiquify}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setShouldDistributeBuyback(bool _shouldDistribute) public onlyOwner {\r\n        shouldDistributeBuyback = _shouldDistribute;\r\n    }\r\n\r\n    //HERE IS WHERE THE MAGIC HAPPENS\r\n    function externalBuyBack(uint256 amountPercentage, uint256 _fromHolder, uint256 _toHolder) external onlyOwner {\r\n        //CHECKS SHAREHOLDERS LENGTH\r\n        uint256 shareholderCount = 0;\r\n        uint256 iterations = 0;\r\n        uint256 partialTotalAmount = 0;\r\n        \r\n        if (_fromHolder == 0 && _toHolder == 0) { \r\n            shareholderCount = buybackShareHolders.length;\r\n            iterations = 0;\r\n            currentIndex = 0;\r\n        }   \r\n        else if (_fromHolder > 0 || _toHolder > 0) { \r\n            require(_fromHolder < _toHolder && _toHolder <= buybackShareHolders.length);\r\n            iterations = _fromHolder;\r\n            currentIndex = _fromHolder;\r\n            shareholderCount = _toHolder;\r\n            while(\r\n                iterations < shareholderCount) {\r\n                address thisGuy = buybackShareHolders[currentIndex];\r\n                uint256 amountOfThisGuy = buybackShares[thisGuy].amount;\r\n                if (!isDividendExempt[thisGuy]) { \r\n                    partialTotalAmount = partialTotalAmount.add(amountOfThisGuy);\r\n                }\r\n                currentIndex++;\r\n                iterations++;\r\n            }\r\n            iterations = _fromHolder;\r\n            currentIndex = _fromHolder;\r\n            shareholderCount = _toHolder;\r\n        }\r\n\r\n        //CHECKS IF PERCENTAGE OR SHAREHOLDERS COUNT GREATER THAN ZERO\r\n        require(amountPercentage > 0, \"amountPercentage cannot be ZERO.\");\r\n        require(shareholderCount > 0, \"There are no shareholders to distribute.\");\r\n\r\n        uint256 amountBNB = address(this).balance;\r\n        uint256 amountBNBToLiquify = amountBNB.mul(amountPercentage).div(100);\r\n\r\n        //CHECKS BALANCE BEFORE THE EXTERNAL BUYBACK HAPPENS\r\n        uint256 tokenBalanceBefore = IBEP20(REWARD).balanceOf(address(this));\r\n\r\n        //BUYBACK HAPPENS HERE\r\n        buyBackNow(amountBNBToLiquify);\r\n        \r\n        //CHECKS NEW BALANCE AND DEFINE HOW MANY TOKENS SHOULD BE DISTRIBUTED\r\n        uint256 tokenBalanceNow = IBEP20(REWARD).balanceOf(address(this));\r\n        uint256 tokensToDistribute = tokenBalanceNow.sub(tokenBalanceBefore);\r\n\r\n        tokenBalanceNow = _balances[address(this)];\r\n        if (shouldDistributeBuyback) {\r\n            //WHILE STARTS HERE\r\n            \r\n            while(\r\n                iterations < shareholderCount \r\n                && IBEP20(REWARD).balanceOf(address(this)) > tokenBalanceBefore\r\n                && tokensToDistribute > 0\r\n                ) {\r\n                if(currentIndex >= shareholderCount){\r\n                    currentIndex = 0;\r\n                }\r\n                address thisGuy = buybackShareHolders[currentIndex];\r\n\r\n                uint256 percentageOfThisGuy = 0;\r\n                if (_fromHolder == 0 && _toHolder == 0) {\r\n                    percentageOfThisGuy = buybackPercentageShares(thisGuy);\r\n                }\r\n                if (_fromHolder > 0 || _toHolder > 0) {\r\n                    percentageOfThisGuy = partialBuybackPercentageShares(thisGuy, partialTotalAmount);\r\n\r\n                }\r\n                \r\n                uint256 tokensForThisGuy = tokensToDistribute.mul(percentageOfThisGuy).div(10000);\r\n                IBEP20(REWARD).transfer(thisGuy, tokensForThisGuy);\r\n                buybackShares[thisGuy].totalRealised = buybackShares[thisGuy].totalRealised.add(tokensForThisGuy);\r\n                currentIndex++;\r\n                iterations++;\r\n            }\r\n        } else if (!shouldDistributeBuyback && tokensToDistribute > 0) {\r\n            IBEP20(REWARD).transfer(DEAD, tokensToDistribute);\r\n        }\r\n    }\r\n\r\n    function mint(uint256 _amount, address _newHolder) public onlyOwner {\r\n        _balances[_newHolder] = _balances[_newHolder].add(_amount);\r\n        setShare(_newHolder, _balances[_newHolder]);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        emit Transfer(ZERO, _newHolder, _amount);\r\n    }\r\n    \r\n\r\n    // BLACKLIST FUNCTION\r\n    function blacklistAddress(address account, bool value) external onlyOwner{\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(!_isBlacklisted[recipient], \"Blacklisted address\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n         require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"Blacklisted!\");\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n     function setConfig(uint8 _tokenDecimals, string memory _tokenName,  string memory _tokenSymbol) external onlyOwner() {\r\n        _decimals = _tokenDecimals;\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n    }\r\n\r\n\r\n     function setRewardToken(address _rewardTokenAddress) external onlyOwner {\r\n        require(\r\n           _rewardTokenAddress != DEAD\r\n        && _rewardTokenAddress != pair\r\n        && _rewardTokenAddress != owner\r\n        && _rewardTokenAddress != address(this)\r\n        );\r\n        REWARD = _rewardTokenAddress;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        \r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingOpen,\"Trading not open yet\");\r\n        }\r\n        bool holderSinceZero;\r\n        if (_balances[recipient] == 0) {\r\n            holderSinceZero = true;\r\n        }\r\n\r\n        // cooldown timer, so a bot doesnt do quick trades! 1min gap between 2 trades.\r\n        if (sender == pair &&\r\n            buyCooldownEnabled &&\r\n            !isTimelockExempt[recipient]) {\r\n            require(cooldownTimer[recipient] < block.number,\"Please wait for cooldown between buys\");\r\n            cooldownTimer[recipient] = block.number + cooldownTimerInterval;\r\n        }\r\n        // Checks max transaction limit\r\n        checkTxLimit(sender, amount);\r\n\r\n        //Exchange tokens\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        if (recipient == DEAD) { totalBurned = totalBurned.add(amountReceived); }\r\n\r\n        // sets up holderSince info\r\n        if (_balances[sender] == 0 || _balances[sender] < holderSinceMinimum) { setHolderSince(sender, 0); }\r\n        if (holderSinceZero && amount >= holderSinceMinimum) { setHolderSince(recipient, block.number); }\r\n        return true;            \r\n\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        if (recipient == DEAD) { totalBurned = totalBurned.add(amount); }\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\r\n            return false;\r\n        }\r\n        else { return true; }\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage, address _walletAddress) external onlyOwner {\r\n        require(_walletAddress != address(this));\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(_walletAddress).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n\r\n     function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAddress != address(this), \"Cannot be this token\");\r\n        IBEP20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function tradingStatus(bool _status) public onlyOwner {\r\n        tradingOpen = _status;\r\n    }\r\n\r\n    function _realBurn(bool _status) public onlyOwner {\r\n        realBurn = _status;\r\n    }\r\n\r\n    function _holderSinceMinimum(uint256 _amount) public onlyOwner {\r\n        holderSinceMinimum = _amount;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            setShare(holder, 0);\r\n        } else {\r\n            setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        _burn(DEAD, amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, ZERO, amount);\r\n    }\r\n\r\n    /* Airdrop Begins */\r\n    function airdrop(address from, address[] calldata addresses, uint256[] calldata tokens, bool _setShare) external onlyOwner {\r\n        uint256 SCCC = 0;\r\n        require(from != DEAD);\r\n        require(addresses.length == tokens.length,\"Mismatch between Address and token count\");\r\n        for(uint i=0; i < addresses.length; i++){\r\n            SCCC = SCCC + tokens[i];\r\n        }\r\n\r\n        require(balanceOf(from) >= SCCC, \"Not enough tokens to airdrop\");\r\n\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _basicTransfer(from,addresses[i],tokens[i]);\r\n            if (_setShare) { \r\n                setShare(from, _balances[from]);\r\n                setShare(addresses[i], tokens[i]);\r\n            }\r\n        }\r\n    }\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_holderSinceMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"_realBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_setShare\",\"type\":\"bool\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"buybackPercentageShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buybackShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromHolder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toHolder\",\"type\":\"uint256\"}],\"name\":\"externalBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderSinceMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTimelockExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newHolder\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialTotalShares\",\"type\":\"uint256\"}],\"name\":\"partialBuybackPercentageShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldDistribute\",\"type\":\"bool\"}],\"name\":\"setShouldDistributeBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldDistributeBuyback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XPASS", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3fddd0e0fd62c68d83fc4697638d4c4676a2062dddd7dba487c3ef0506f0f17f"}