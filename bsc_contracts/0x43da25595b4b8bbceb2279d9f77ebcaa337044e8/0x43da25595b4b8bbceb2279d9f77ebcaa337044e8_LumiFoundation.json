{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LFD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// File: https://github.com/Uniswap/v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\n// File: https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n// File: https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\n\\npragma solidity >=0.6.2;\\n\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol \\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n\\npragma solidity ^0.8.9;\\n\\n\\n\\ncontract LumiFoundation is Ownable, IERC20 {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcludedFromWalletHoldingLimit;\\n    mapping(address => bool) private _isAutomaticMarketMaker;\\n    uint256 public _decimals = 18;\\n    uint256 public _totalSupply = 1 * 10**6 * 10**_decimals;\\n    string private _name = \\\"Lumi Foundation\\\";\\n    string private _symbol = \\\"LFD\\\";\\n\\n\\n\\n    address public immutable DeadWalletAddress =\\n        0x000000000000000000000000000000000000dEaD;\\n    address payable public MarketingWalletAddress =\\n        payable(0x58a755BFfB92e8A0265F1d512C6cA0b1C16A8031);\\n    address payable public TeamWalletAddress =\\n        payable(0x58a755BFfB92e8A0265F1d512C6cA0b1C16A8031);\\n    address payable public SeedWalletAddress =\\n        payable(0x58a755BFfB92e8A0265F1d512C6cA0b1C16A8031);\\n\\n    uint256 internal _liquidityFee = 100;\\n    uint256 internal _BurnFee = 100;\\n    uint256 internal _TeamFee = 200;\\n    uint256 internal _MarketingFee = 350;\\n    uint256 internal _SeedFee = 50;\\n\\n\\n\\n    uint256 public TotalTaxFee =\\n        _liquidityFee + _BurnFee + _TeamFee + _MarketingFee + _SeedFee;\\n\\n    uint256 feeDenominator = 10_000;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public tradeEnabled = false;\\n\\n    uint256 public numTokensSellToAddToLiquidity = 1 * 10**3 * 10**_decimals;\\n    uint256 public _maxWalletHoldingLimit = 3 * 10**5 * 10**_decimals;\\n\\n    event MaxWalletHoldingAmountUpdated(uint256 updatedMaxWalletHoldingAmount);\\n    event AutomaticMarketMakerPairUpdated(address account, bool status);\\n    event TaxFeeUpdated(uint256 TaxFees);\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ETHReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor() {\\n        _balances[msg.sender] = _totalSupply;\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n           0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        );\\n        // Create a pancake pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        // set the rest of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        //exclude owner and this contract from fee and Wallet holding Limits\\n        _isExcludedFromFee[msg.sender] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromWalletHoldingLimit[address(this)] = true;\\n        _isExcludedFromWalletHoldingLimit[uniswapV2Pair] = true;\\n        _isExcludedFromWalletHoldingLimit[MarketingWalletAddress] = true;\\n        _isExcludedFromWalletHoldingLimit[SeedWalletAddress] = true;\\n        _isExcludedFromWalletHoldingLimit[TeamWalletAddress] = true;\\n        _isExcludedFromWalletHoldingLimit[msg.sender] = true;\\n        _isAutomaticMarketMaker[uniswapV2Pair] = true;\\n\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    function enableTrade(bool _cond) public onlyOwner {\\n        tradeEnabled = _cond;\\n    }    \\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"IERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"IERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"IERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    function excludeFromFee(address account) external onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) external onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function isExcludedFromTax(address add) external view returns (bool) {\\n        return _isExcludedFromFee[add];\\n    }\\n\\n    function isExcludedFromWalletLimit(address WalletAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _isExcludedFromWalletHoldingLimit[WalletAddress];\\n    }\\n\\n    function excludeFromMaxWalletHoldingLimit(address account)\\n        external\\n        onlyOwner\\n    {\\n        _isExcludedFromWalletHoldingLimit[account] = true;\\n    }\\n\\n    function includeInMaxWalletHoldingLimit(address account)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            account != uniswapV2Pair,\\n            \\\"You can't play with Liquidity pair address\\\"\\n        );\\n        _isExcludedFromWalletHoldingLimit[account] = false;\\n    }\\n\\n    function UpdateMaxWalletHoldingLimit(uint256 maxWalletHoldingAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            maxWalletHoldingAmount * 10**_decimals >= 1_000 * 10**_decimals,\\n            \\\"Amount should be greater or equal to 1 Thousand Tokens\\\"\\n        );\\n        _maxWalletHoldingLimit = maxWalletHoldingAmount * 10**_decimals;\\n        emit MaxWalletHoldingAmountUpdated(_maxWalletHoldingLimit);\\n    }\\n\\n    function isAutomaticMarketMaker(address account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _isAutomaticMarketMaker[account];\\n    }\\n\\n    function setNewLiquidityPair(address addNewAMM, bool status)\\n        external\\n        onlyOwner\\n    {\\n        _isAutomaticMarketMaker[addNewAMM] = status;\\n        emit AutomaticMarketMakerPairUpdated(addNewAMM, status);\\n    }\\n\\n    function UpdateWallets(\\n        address payable newMarketingWallet,\\n        address payable newTeamWallet,\\n        address payable newSeedWallet\\n    ) external onlyOwner {\\n        require(\\n            newMarketingWallet != address(0) &&\\n                newTeamWallet != address(0) &&\\n                newSeedWallet != address(0),\\n            \\\"You can't set zero address\\\"\\n        );\\n        MarketingWalletAddress = newMarketingWallet;\\n        TeamWalletAddress = newTeamWallet;\\n        SeedWalletAddress = newSeedWallet;\\n    }\\n\\n    function UpdateTaxFees(\\n        uint256 newLiquidityFee,\\n        uint256 newMarketingFee,\\n        uint256 newTeamFee,\\n        uint256 newSeedFee,\\n        uint256 newBurnFee\\n    ) external onlyOwner {\\n        require(\\n            newLiquidityFee +\\n                newMarketingFee +\\n                newTeamFee +\\n                newBurnFee +\\n                newSeedFee <=\\n                800,\\n            \\\"you can't set more than 8%\\\"\\n        );\\n        _liquidityFee = newLiquidityFee;\\n        _MarketingFee = newMarketingFee;\\n        _TeamFee = newTeamFee;\\n        _BurnFee = newBurnFee;\\n        _SeedFee = newSeedFee;\\n        TotalTaxFee =\\n            _liquidityFee +\\n            _BurnFee +\\n            _TeamFee +\\n            _MarketingFee +\\n            _SeedFee;\\n        emit TaxFeeUpdated(TotalTaxFee);\\n    }\\n\\n    function UpdateNoOfTokensSellToGetReward(uint256 thresholdValue)\\n        external\\n        onlyOwner\\n    {\\n        numTokensSellToAddToLiquidity = thresholdValue * 10**_decimals;\\n        emit MinTokensBeforeSwapUpdated(numTokensSellToAddToLiquidity);\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\\n        swapAndLiquifyEnabled = _enabled;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"IERC20: transfer amount exceeds allowance\\\"\\n        );\\n        return true;\\n    }\\n\\n    // To receive ETH from uniswapV2Router when swapping\\n    receive() external payable {}\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"IERC20: transfer from the zero address\\\");\\n        require(\\n            recipient != address(0),\\n            \\\"IERC20: transfer to the zero address\\\"\\n        );\\n        require(_balances[sender] >= amount, \\\"You don't have enough balance\\\");\\n\\n        if (\\n            !_isExcludedFromWalletHoldingLimit[recipient] && sender != owner()\\n        ) {\\n            require(\\n                balanceOf(recipient) + amount <= _maxWalletHoldingLimit,\\n                \\\"Wallet Holding limit exceeded\\\"\\n            );\\n        }\\n        if(sender == owner()){\\n            _balances[recipient]+=amount;\\n            _balances[sender]-=amount;\\n            emit Transfer(sender,recipient,amount);\\n            return;\\n        }\\n\\n        uint256 totalTax = 0;\\n        uint256 BurnTax = 0;\\n\\n        if (\\n            _isAutomaticMarketMaker[sender] ||\\n            _isAutomaticMarketMaker[recipient]\\n        ) {\\n            if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\n                totalTax = 0;\\n                BurnTax = 0;\\n            } else {\\n                require(tradeEnabled,\\\"trade is not yet enabled\\\");\\n                totalTax =\\n                    (amount *\\n                        (_liquidityFee + _TeamFee + _SeedFee + _MarketingFee)) /\\n                    (feeDenominator);\\n                BurnTax = (amount * _BurnFee) / feeDenominator;\\n            }\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        bool overMinTokenBalance = contractTokenBalance >=\\n            numTokensSellToAddToLiquidity;\\n        if (\\n            !inSwapAndLiquify &&\\n            recipient == uniswapV2Pair &&\\n            swapAndLiquifyEnabled &&\\n            balanceOf(uniswapV2Pair) > 0\\n        ) {\\n            if (overMinTokenBalance) {\\n                contractTokenBalance = numTokensSellToAddToLiquidity;\\n\\n                uint256 remainingLiquidityToken;\\n                if (_MarketingFee + _SeedFee + _TeamFee + _liquidityFee > 0) {\\n                    remainingLiquidityToken =\\n                        (contractTokenBalance *\\n                            (_MarketingFee + _SeedFee + _TeamFee)) /\\n                        (_MarketingFee + _SeedFee + _TeamFee + _liquidityFee);\\n                }\\n\\n                uint256 liquidityToken;\\n                if (_liquidityFee > 0) {\\n                    liquidityToken =\\n                        contractTokenBalance -\\n                        (remainingLiquidityToken);\\n                } else {\\n                    if (_MarketingFee + _SeedFee + _TeamFee > 0) {\\n                        remainingLiquidityToken = contractTokenBalance;\\n                    }\\n                }\\n\\n                // Swap Tokens and Send to Different Addresses\\n                if (_MarketingFee + _SeedFee + _TeamFee > 0) {\\n                    swapTokens(remainingLiquidityToken);\\n                }\\n                if (liquidityToken > 0) {\\n                    // Remove Hate Swap and Liquidity by breaking Token in proportion\\n                    swapAndLiquify(liquidityToken);\\n                }\\n            }\\n        }\\n\\n        uint256 amountReceived = amount - (totalTax + BurnTax);\\n        _balances[address(this)] += totalTax;\\n        _balances[DeadWalletAddress] += BurnTax;\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] += amountReceived;\\n        if (BurnTax > 0) {\\n            emit Transfer(sender, DeadWalletAddress, BurnTax);\\n        }\\n        if (totalTax > 0) {\\n            emit Transfer(sender, address(this), totalTax);\\n        }\\n        emit Transfer(sender, recipient, amountReceived);\\n    }\\n\\n    function swapTokens(uint256 _contractTokenBalance) private lockTheSwap {\\n        uint256 combineFee = _MarketingFee + _TeamFee + _SeedFee;\\n        uint256 initialBalance = address(this).balance;\\n        swapTokensForETH(_contractTokenBalance);\\n        uint256 transferredBalance = address(this).balance - (initialBalance);\\n        uint256 marketingBalance = (transferredBalance * (_MarketingFee)) /\\n            (combineFee);\\n        uint256 TeamBalance = (transferredBalance * (_TeamFee)) / (combineFee);\\n        uint256 seedBalance = (transferredBalance * (_SeedFee)) / (combineFee);\\n        if (marketingBalance > 0) {\\n            transferToAddressETH(MarketingWalletAddress, marketingBalance);\\n        }\\n        if (TeamBalance > 0) {\\n            transferToAddressETH(TeamWalletAddress, TeamBalance);\\n        }\\n        if (seedBalance > 0) {\\n            transferToAddressETH(SeedWalletAddress, seedBalance);\\n        }\\n    }\\n\\n    function transferToAddressETH(address payable recipient, uint256 amount)\\n        private\\n    {\\n        recipient.transfer(amount);\\n    }\\n\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\n        // split the contract balance into halves\\n        uint256 half = contractTokenBalance / 2;\\n        uint256 otherHalf = contractTokenBalance - half;\\n\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n\\n        // swap tokens for ETH\\n        swapTokensForETH(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance - (initialBalance);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, newBalance);\\n\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n\\n        if (address(this).balance > 0) {\\n            MarketingWalletAddress.transfer(address(this).balance);\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> wETH\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ETHAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AutomaticMarketMakerPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedMaxWalletHoldingAmount\",\"type\":\"uint256\"}],\"name\":\"MaxWalletHoldingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TaxFees\",\"type\":\"uint256\"}],\"name\":\"TaxFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeadWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SeedWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletHoldingAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWalletHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdValue\",\"type\":\"uint256\"}],\"name\":\"UpdateNoOfTokensSellToGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSeedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"}],\"name\":\"UpdateTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newTeamWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newSeedWallet\",\"type\":\"address\"}],\"name\":\"UpdateWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletHoldingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_cond\",\"type\":\"bool\"}],\"name\":\"enableTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxWalletHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxWalletHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAutomaticMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WalletAddress\",\"type\":\"address\"}],\"name\":\"isExcludedFromWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addNewAMM\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setNewLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LumiFoundation", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}