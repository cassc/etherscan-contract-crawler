{"SourceCode": "// SPDX-License-Identifier: Unlicensed \r\n// This contract is not open source and can not be used/forked without permission\r\n// Contract created at https://TokensByGen.com\r\n\r\n\r\npragma solidity 0.8.19;\r\n \r\ninterface IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract TOKEN is Context, IERC20 { \r\n\r\n\r\n    // Contract Wallets\r\n    address public _owner;\r\n    address public Wallet_Liquidity;\r\n    address payable public Wallet_Marketing;\r\n    address public constant Wallet_Burn = 0x000000000000000000000000000000000000dEaD; \r\n    address payable public constant feeCollector = payable(0xde491C65E507d281B6a3688d11e8fC222eee0975);\r\n\r\n    // Token Info\r\n    string private  _name;\r\n    string private  _symbol;\r\n    uint256 private _decimals;\r\n    uint256 private _tTotal;\r\n\r\n    // Project links\r\n    string private _website;\r\n    string private _telegram;\r\n    string private _lplock;\r\n\r\n    // Wallet and transaction limits\r\n    uint256 private max_Hold;\r\n    uint256 private max_Tran;\r\n\r\n    // Fees\r\n    uint8 public _fee__Buy_Contract = 1;\r\n    uint8 public _fee__Buy_Liquidity;\r\n    uint8 public _fee__Buy_Marketing;\r\n    uint8 public _fee__Buy_Burn;\r\n\r\n    uint8 public _fee__Sell_Contract = 1;\r\n    uint8 public _fee__Sell_Liquidity;\r\n    uint8 public _fee__Sell_Marketing;\r\n    uint8 public _fee__Sell_Burn;\r\n\r\n    // Total Fee for Swap\r\n    uint8 private _SwapFeeTotal_Buy = 1;\r\n    uint8 private _SwapFeeTotal_Sell = 1;\r\n\r\n    // Set factory\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    constructor (string memory      _TokenName, \r\n                 string memory      _TokenSymbol,  \r\n                 uint256            _TotalSupply, \r\n                 uint256            _Decimals, \r\n                 address payable    _OwnerWallet) {\r\n\r\n    emit TokenCreated(address(this));\r\n\r\n    // Set owner\r\n    _owner              = _OwnerWallet;\r\n\r\n    // Set basic token details\r\n    _name               = _TokenName;\r\n    _symbol             = _TokenSymbol;\r\n    _decimals           = _Decimals;\r\n    _tTotal             = _TotalSupply * 10**_decimals;\r\n    \r\n    // Wallet limits\r\n    max_Hold            = _tTotal;\r\n    max_Tran            = _tTotal;\r\n\r\n    // Project Wallets Set to Owner\r\n    Wallet_Marketing    = payable(_OwnerWallet);\r\n    Wallet_Liquidity    = _OwnerWallet;\r\n\r\n\r\n    // Transfer token supply to owner wallet\r\n    _tOwned[_owner]     = _tTotal;\r\n\r\n    // Set PancakeSwap Router Address\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    // Create initial liquidity pair with BNB on PancakeSwap factory\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    uniswapV2Router = _uniswapV2Router;\r\n\r\n    // Set the initial liquidity pair\r\n    _isPair[uniswapV2Pair] = true;    \r\n\r\n    // Wallets excluded from holding limits\r\n    _isLimitExempt[_owner] = true;\r\n    _isLimitExempt[address(this)] = true;\r\n    _isLimitExempt[Wallet_Burn] = true;\r\n    _isLimitExempt[uniswapV2Pair] = true;\r\n\r\n    // Wallets excluded from fees\r\n    _isExcludedFromFee[_owner] = true;\r\n    _isExcludedFromFee[address(this)] = true;\r\n    _isExcludedFromFee[Wallet_Burn] = true;\r\n\r\n    // Wallets granted access before trade is open\r\n    _isWhiteListed[_owner] = true;\r\n\r\n    // Emit Supply Transfer to Owner\r\n    emit Transfer(address(0), _owner, _tTotal);\r\n\r\n    // Emit ownership transfer\r\n    emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n    \r\n    // Events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 max_Tran, uint256 max_Hold);\r\n    event updated_Buy_fees(uint8 Marketing, uint8 Liquidity, uint8 Burn, uint8 Contract_Fee);\r\n    event updated_Sell_fees(uint8 Marketing, uint8 Liquidity, uint8 Burn, uint8 Contract_Fee);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event TokenCreated(address indexed Token_CA);\r\n\r\n\r\n    // Restrict function to contract owner only \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Address mappings\r\n    mapping (address => uint256) private _tOwned;                               // Tokens Owned\r\n    mapping (address => mapping (address => uint256)) private _allowances;      // Allowance to spend another wallets tokens\r\n    mapping (address => bool) public _isExcludedFromFee;                        // Wallets that do not pay fees\r\n    mapping (address => bool) public _isWhiteListed;                            // Wallets that have access before trade is open\r\n    mapping (address => bool) public _isLimitExempt;                            // Wallets that are excluded from HOLD and TRANSFER limits\r\n    mapping (address => bool) public _isPair;                                   // Address is liquidity pair\r\n    mapping (address => bool) public _EarlyBuyer;                               // Early Buyers \r\n    mapping (address => bool) public _isBlacklisted;                            // Blacklisted wallets\r\n\r\n\r\n\r\n    // Fee Processing Triggers\r\n    uint256 private swapTrigger = 10;\r\n    uint256 private swapCounter = 1;    \r\n    \r\n    // SwapAndLiquify Switch                  \r\n    bool public processingFees;\r\n    bool public feeProcessingEnabled; \r\n    bool public noFeeWhenProcessing;\r\n\r\n    // Launch Settings\r\n    uint256 private LaunchTime;\r\n    bool private LaunchMode;\r\n    bool private Trade_Open;\r\n    bool private BlacklistWallets = true;\r\n    bool private No_Fee_Transfers = true;\r\n\r\n    // Burn option (send to DEAD or remove from supply)\r\n    bool public burnFromSupply;\r\n\r\n    // Fee Tracker\r\n    bool private takeFee;\r\n\r\n\r\n\r\n    // Project info\r\n    function Project_Information() external view returns(address Owner_Wallet,\r\n                                                       uint256 Transaction_Limit,\r\n                                                       uint256 Max_Wallet,\r\n                                                       uint256 Fee_When_Buying,\r\n                                                       uint256 Fee_When_Selling,\r\n                                                       string memory Website,\r\n                                                       string memory Telegram,\r\n                                                       string memory Liquidity_Lock,\r\n                                                       string memory Contract_Created_By) {\r\n                                                           \r\n        string memory Creator = \"https://tokensbygen.com\";\r\n\r\n        uint256 Total_buy =  _fee__Buy_Contract     +\r\n                             _fee__Buy_Liquidity    +\r\n                             _fee__Buy_Marketing    +\r\n                             _fee__Buy_Burn;\r\n\r\n        uint256 Total_sell = _fee__Sell_Contract    +\r\n                             _fee__Sell_Liquidity   +\r\n                             _fee__Sell_Marketing   +\r\n                             _fee__Sell_Burn;\r\n\r\n        uint256 _max_Hold = max_Hold / 10 ** _decimals;\r\n        uint256 _max_Tran = max_Tran / 10 ** _decimals;\r\n\r\n        if (_max_Tran > _max_Hold) {\r\n\r\n            _max_Tran = _max_Hold;\r\n        }\r\n\r\n\r\n        // Return Token Data\r\n        return (_owner,\r\n                _max_Tran,\r\n                _max_Hold,\r\n                Total_buy,\r\n                Total_sell,\r\n                _website,\r\n                _telegram,\r\n                _lplock,\r\n                Creator);\r\n\r\n    }\r\n    \r\n    // Prepare the contract for pre-sale\r\n    function F_01_Add_PreSale_Address(\r\n\r\n        address Presale_Contract_Address\r\n\r\n        ) external onlyOwner {\r\n\r\n        _isExcludedFromFee[Presale_Contract_Address] = true; \r\n        _isLimitExempt[Presale_Contract_Address] = true;\r\n        _isWhiteListed[Presale_Contract_Address] = true;\r\n\r\n    }\r\n\r\n    // Set Buy and Sell Fees\r\n    function F_02_Set_Fees(\r\n\r\n        uint8 Marketing_on_BUY, \r\n        uint8 Liquidity_on_BUY, \r\n        uint8 Burn_on_BUY,\r\n\r\n        uint8 Marketing_on_SELL,\r\n        uint8 Liquidity_on_SELL,\r\n        uint8 Burn_on_SELL\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer Protection: Max Fee 15% \r\n        require (Marketing_on_BUY + Liquidity_on_BUY + Burn_on_BUY + _fee__Buy_Contract <= 15, \"SF1\");  // Max fee 15%\r\n\r\n        // Buyer Protection: Max Fee 15% \r\n        require (Marketing_on_SELL + Liquidity_on_SELL + Burn_on_SELL + _fee__Sell_Contract <= 15, \"SF2\");  // Max fee 15%\r\n\r\n        // Update Fees\r\n        _fee__Buy_Marketing   = Marketing_on_BUY;\r\n        _fee__Buy_Liquidity   = Liquidity_on_BUY;\r\n        _fee__Buy_Burn        = Burn_on_BUY;\r\n\r\n        _fee__Sell_Marketing   = Marketing_on_SELL;\r\n        _fee__Sell_Liquidity   = Liquidity_on_SELL;\r\n        _fee__Sell_Burn        = Burn_on_SELL;\r\n\r\n        // Fees For Processing\r\n        _SwapFeeTotal_Sell   = _fee__Sell_Marketing + _fee__Sell_Liquidity + _fee__Buy_Contract;\r\n        _SwapFeeTotal_Buy    = _fee__Buy_Marketing + _fee__Buy_Liquidity + _fee__Sell_Contract;\r\n\r\n        emit updated_Buy_fees(_fee__Buy_Marketing, _fee__Buy_Liquidity, _fee__Buy_Burn, _fee__Buy_Contract);\r\n        emit updated_Sell_fees(_fee__Sell_Marketing, _fee__Sell_Liquidity, _fee__Sell_Burn, _fee__Sell_Contract);\r\n    \r\n    }\r\n\r\n\r\n    /*\r\n\r\n    -------------\r\n    ADD LIQUIDITY\r\n    -------------\r\n\r\n    USE V2 WHEN ADDING LIQUIDITY ON PANCAKESWAP\r\n    V3 DOES NOT SUPPORT TOKENS WITH FEE ON TRANSFER!\r\n    THE INITIAL LIQUIDITY PAIR MUST BE WITH BNB \r\n\r\n    https://pancakeswap.finance/liquidity\r\n\r\n    */\r\n\r\n\r\n\r\n    /*\r\n    \r\n    ------------------------------------------\r\n    SET MAX TRANSACTION AND MAX HOLDING LIMITS\r\n    ------------------------------------------\r\n\r\n    Solidity can only accept whole numbers. \r\n    If you want to set a limit to 0.5% enter 0 (This is the minimum permitted value)\r\n\r\n    */\r\n\r\n    function F_03_Set_Wallet_Limits(\r\n\r\n        uint256 Max_Transaction_Percent,\r\n        uint256 Max_Wallet_Percent\r\n\r\n        ) external onlyOwner {\r\n\r\n        if (Max_Transaction_Percent < 1){\r\n\r\n            // Defaults to 0.5% if 0 is entered\r\n            max_Tran = _tTotal / 200;\r\n\r\n        } else {\r\n\r\n            max_Tran = _tTotal * Max_Transaction_Percent / 100;\r\n\r\n        }\r\n\r\n\r\n        if (Max_Wallet_Percent < 1){\r\n\r\n            // Defaults to 0.5% if 0 is entered\r\n            max_Hold = _tTotal / 200;\r\n\r\n        } else {\r\n\r\n            max_Hold = _tTotal * Max_Wallet_Percent / 100;\r\n\r\n        }\r\n\r\n        emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n\r\n    }\r\n\r\n    // Open Trade\r\n    function F_04_Open_Trade() external onlyOwner {\r\n\r\n        // Can Only Use Once!\r\n        require(!Trade_Open);\r\n\r\n        feeProcessingEnabled = true;\r\n        LaunchTime = block.timestamp;\r\n        LaunchMode = true;\r\n        Trade_Open = true;\r\n\r\n    }\r\n\r\n    /* \r\n\r\n    -----------------------------------------\r\n    BLACKLIST BOTS - DURING LAUNCH MODE ONLY!\r\n    -----------------------------------------\r\n\r\n    */\r\n    \r\n    function F_05_Blacklist_Bots(address Wallet, bool true_or_false) external onlyOwner {\r\n        \r\n        if (true_or_false) {\r\n\r\n            require(BlacklistWallets, \"BL1\"); // Can no longer blacklist!\r\n        }\r\n\r\n        _isBlacklisted[Wallet] = true_or_false;\r\n\r\n    }\r\n\r\n\r\n    // Deactivate Launch Mode\r\n    function F_06_End_Launch_Mode() external onlyOwner {\r\n\r\n        LaunchMode = false;\r\n        BlacklistWallets = false;\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    --------------------\r\n    UPDATE PROJECT LINKS\r\n    --------------------\r\n\r\n    */\r\n\r\n    function F_07_Update_Links_Website(\r\n\r\n        string memory Website_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _website = Website_URL;\r\n\r\n    }\r\n\r\n    function F_08_Update_Links_Telegram(\r\n\r\n        string memory Telegram_Group\r\n\r\n        ) external onlyOwner{\r\n\r\n        _telegram = Telegram_Group;\r\n\r\n    }\r\n\r\n\r\n\r\n    function F_09_Update_Links_LP_Lock(\r\n\r\n        string memory LP_Lock_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _lplock = LP_Lock_URL;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Add Liquidity Pair - required for correct fee calculations \r\n    function M_01_Add_Liquidity_Pair(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n\r\n        external onlyOwner {\r\n\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n\r\n    } \r\n\r\n    /* \r\n\r\n    ----------------------------\r\n    CONTRACT OWNERSHIP FUNCTIONS\r\n    ----------------------------\r\n\r\n    Before renouncing ownership, set the freeWalletTransfers to false \r\n\r\n    */\r\n  \r\n    // Renounce Ownership - To prevent accidental renounce, you must enter the Confirmation_Code: 1234\r\n    function M_02_Ownership_RENOUNCE(uint256 Confirmation_Code) public virtual onlyOwner {\r\n\r\n        require(Confirmation_Code == 1234, \"E12\"); // Renounce confirmation not correct\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Transfer to New Owner - To prevent accidental renounce, you must enter the Confirmation_Code: 1234\r\n    function M_03_Ownership_TRANSFER(address payable newOwner, uint256 Confirmation_Code) public onlyOwner {\r\n\r\n        require(Confirmation_Code == 1234, \"E12\"); // Renounce confirmation not correct\r\n        require(newOwner != address(0), \"E13\"); // Enter a valid BSC wallet\r\n\r\n        // Revoke old owner status\r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n\r\n        // Set up new owner status \r\n        _isLimitExempt[owner()]     = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isWhiteListed[owner()]     = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    \r\n    ---------------------------------\r\n    NO FEE WALLET TO WALLET TRANSFERS\r\n    ---------------------------------\r\n\r\n    Default = true\r\n\r\n    Having no fee on wallet-to-wallet transfers means that people can move tokens between wallets, \r\n    or send them to friends etc without incurring a fee. \r\n\r\n    If false, the 'Buy' fee will apply to all wallet to wallet transfers.\r\n\r\n    */\r\n\r\n    function O_01_No_Fee_Wallet_Transfers(bool true_or_false) external onlyOwner {\r\n\r\n        No_Fee_Transfers = true_or_false;\r\n\r\n    }\r\n    \r\n\r\n    /*\r\n    \r\n    ----------------\r\n    BURN FROM SUPPLY\r\n    ----------------\r\n\r\n    Default = false\r\n\r\n    If false: Burned tokens are sent to the DEAD address\r\n    If true: Burned tokens are not sent to the DEAD address but are removed from the total supply\r\n\r\n    */\r\n\r\n    function O_02_Burn_From_Supply(bool true_or_false) external onlyOwner {\r\n\r\n        burnFromSupply = true_or_false;\r\n    }\r\n\r\n    /*\r\n\r\n    --------------------------\r\n    REMOVE FEE WHEN PROCESSING\r\n    --------------------------\r\n\r\n    Default = false\r\n\r\n    When the contract needs to process fees the 'sell fee' displayed on a DEX will include the sell fee and the price drop caused by the contract sell.\r\n    Setting this to true will help to mitigate that increase. For details see https://www.youtube.com/watch?v=PKyACFILwhI \r\n\r\n    */\r\n\r\n     // Remove fee for wallet that triggers processing\r\n    function O_03_Remove_Fee_When_Processing(bool true_or_false) external onlyOwner {\r\n\r\n        noFeeWhenProcessing = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    --------------\r\n    FEE PROCESSING\r\n    --------------\r\n\r\n    */\r\n\r\n    // Auto Fee Processing Switch (SwapAndLiquify)\r\n    function P_01_Auto_Fee_Process(bool true_or_false) external onlyOwner {\r\n        feeProcessingEnabled = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n\r\n    // Manually Process Fees\r\n    function P_02_Process_Fees_Now (uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n\r\n        require(!processingFees, \"E15\"); // Already in swap, try later\r\n\r\n        if (Percent_of_Tokens_to_Process > 100){Percent_of_Tokens_to_Process = 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        processFees(sendTokens);\r\n\r\n    }\r\n\r\n    // Update Swap Count Trigger\r\n    function P_03_FeeProcessing_Trigger_Count(uint256 Transaction_Count) external onlyOwner {\r\n\r\n        swapTrigger = Transaction_Count + 1; // Reset to 1 (not 0) to save gas\r\n    }\r\n\r\n    // Remove Random Tokens\r\n    function P_04_Remove_Random_Tokens(\r\n\r\n        address random_Token_Address,\r\n        uint256 number_of_Tokens\r\n\r\n        ) external onlyOwner {\r\n\r\n            require (random_Token_Address != address(this), \"E16\"); // Can not remove the native token\r\n            IERC20(random_Token_Address).transfer(msg.sender, number_of_Tokens);\r\n            \r\n    }\r\n\r\n    \r\n\r\n    /*\r\n\r\n    ----------------------\r\n    UPDATE PROJECT WALLETS\r\n    ----------------------\r\n\r\n    */\r\n\r\n    function Update_Wallet_Liquidity(\r\n\r\n        address Liquidity_Collection_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update LP Collection Wallet\r\n        require(Liquidity_Collection_Wallet != address(0), \"E07\"); // Enter a valid BSC Address\r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n\r\n    }\r\n\r\n    function Update_Wallet_Marketing(\r\n\r\n        address payable Marketing_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update Marketing Wallet\r\n        require(Marketing_Wallet != address(0), \"E08\"); // Enter a valid BSC Address\r\n        Wallet_Marketing = payable(Marketing_Wallet);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    WALLET SETTINGS\r\n    ---------------\r\n\r\n    */\r\n\r\n    // Exclude From Fees\r\n    function W_01_Exclude_From_Fees(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n    // Exclude From Transaction and Holding Limits\r\n    function W_02_Exempt_From_Limits(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Grant Pre-Launch Access (Whitelist)\r\n    function W_03_Pre_Launch_Access(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {    \r\n        _isWhiteListed[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    -------------------\r\n    REMOVE CONTRACT FEE\r\n    -------------------\r\n\r\n    Removal of the 1% Contract Fee Costs 2 BNB \r\n\r\n    */\r\n\r\n    function _Remove_Contract_Fee() external payable {\r\n\r\n        require(msg.value == 2*10**18, \"REQ_2BNB\"); // Need to enter 2, and pay 2 BNB to remove the 1% contract fee\r\n\r\n        send_BNB(feeCollector, msg.value);\r\n\r\n        // Remove Contract Fee\r\n        _fee__Buy_Contract  = 0;\r\n        _fee__Sell_Contract = 0;\r\n\r\n        // Update Swap Fees\r\n        _SwapFeeTotal_Buy   = _fee__Buy_Liquidity + _fee__Buy_Marketing;\r\n        _SwapFeeTotal_Sell  = _fee__Sell_Liquidity + _fee__Sell_Marketing;\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n    /*\r\n\r\n    -----------------------------\r\n    BEP20 STANDARD AND COMPLIANCE\r\n    -----------------------------\r\n\r\n    */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n   \r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n                                \r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - balanceOf(address(Wallet_Burn)));\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    TOKEN TRANSFERS\r\n    ---------------\r\n\r\n    */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n\r\n\r\n        require(balanceOf(from) >= amount, \"TO1\"); // Sender does not have enough tokens!\r\n\r\n\r\n        if (!Trade_Open){\r\n\r\n            require(_isWhiteListed[from] || _isWhiteListed[to], \"TO2\");  // Trade closed, only whitelisted wallets can move tokens\r\n\r\n\r\n        }\r\n\r\n        // Launch Mode\r\n        if (LaunchMode) {\r\n\r\n            // Auto End Launch Mode After 10 Minutes\r\n            if (block.timestamp > LaunchTime + (1 * 10 minutes)){\r\n\r\n                LaunchMode = false;\r\n                BlacklistWallets = false;\r\n\r\n            } else {\r\n\r\n\r\n                // Stop Early Buyers Selling During Launch Phase\r\n                require(!_EarlyBuyer[from], \"EB1\"); // Early buyers can not sell during first 10 minutes\r\n                \r\n\r\n                // Tag buys within the first 5 seconds as Early Buyers\r\n                if (_isPair[from] && block.timestamp <= LaunchTime + 5) {\r\n\r\n                    _EarlyBuyer[to] = true;\r\n\r\n                } \r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Blacklisted Wallets Can Only Send Tokens to Owner\r\n        if (to != owner()) {\r\n                require(!_isBlacklisted[to] && !_isBlacklisted[from],\"BL\"); // Blacklisted wallets can not buy or sell (only send tokens to owner)\r\n            }\r\n\r\n        // Wallet Limit\r\n        if (!_isLimitExempt[to] && from != owner()) {\r\n\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"WL\"); // Over max wallet limit\r\n\r\n        }\r\n\r\n        // Transaction limit - To send over the transaction limit the sender AND the recipient must be limit exempt\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from]){\r\n\r\n            require(amount <= max_Tran, \"TL\"); // Over max transaction limit\r\n            \r\n        }\r\n\r\n\r\n        // Compliance and safety checks\r\n        require(from != address(0), \"FROM0\"); // Not a valid BSC wallet address\r\n        require(to != address(0), \"TO0\"); // Not a valid BSC wallet address\r\n        require(amount > 0, \"AMT0\"); // Amount must be greater than 0\r\n\r\n      \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (No_Fee_Transfers && !_isPair[to] && !_isPair[from])){\r\n            takeFee = false;\r\n        } else {\r\n            takeFee = true;\r\n        }\r\n\r\n        // Trigger Fee Processing\r\n        if (_isPair[to] && !processingFees && feeProcessingEnabled) {\r\n\r\n            // Check Transaction Count\r\n            if(swapCounter >= swapTrigger){\r\n\r\n                // Check Contract Tokens\r\n                uint256 contractTokens = balanceOf(address(this));\r\n\r\n                if (contractTokens > 0) {\r\n\r\n                    // Check if fee is removed during processing\r\n                    if (noFeeWhenProcessing && takeFee){takeFee = false;}\r\n\r\n                    // Limit Swap to Max Transaction\r\n                    if (contractTokens <= max_Tran) {\r\n\r\n                        processFees (contractTokens);\r\n\r\n                        } else {\r\n\r\n                        processFees (max_Tran);\r\n\r\n                    }\r\n                }\r\n            }  \r\n        }\r\n\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------\r\n    PROCESS FEES\r\n    ------------\r\n\r\n    */\r\n    function processFees(uint256 Tokens) private {\r\n\r\n        // Lock Swap\r\n        processingFees = true;\r\n\r\n        // Totals for buy and sell fees\r\n        uint8 _LiquidityTotal   = _fee__Buy_Liquidity + _fee__Sell_Liquidity;\r\n        uint8 _ContractFeeTotal = _fee__Buy_Contract + _fee__Sell_Contract;\r\n        uint8 _FeesTotal        = _SwapFeeTotal_Buy + _SwapFeeTotal_Sell;\r\n\r\n        // Calculate tokens for swap\r\n        uint256 LP_Tokens       = Tokens * _LiquidityTotal / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n\r\n        // Swap Tokens\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n\r\n        // Avoid Rounding Errors on LP Fee if Odd Number\r\n        uint256 fee_Split       = _FeesTotal * 2 - _LiquidityTotal;\r\n\r\n\r\n        // Add auto liquidity \r\n        if (_LiquidityTotal > 0 ) {\r\n\r\n            uint256 BNB_Liquidity = returned_BNB * _LiquidityTotal / fee_Split;\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        \r\n        }\r\n\r\n\r\n        // Take contract fee\r\n        if (_ContractFeeTotal > 0) {\r\n\r\n            uint256 BNB_ContractFee = returned_BNB * _ContractFeeTotal * 2 / fee_Split;\r\n            send_BNB(feeCollector, BNB_ContractFee);\r\n            \r\n        }\r\n\r\n        \r\n        // Flush Remaining BNB to Marketing Wallet\r\n        contract_BNB = address(this).balance;\r\n\r\n        if (contract_BNB > 0){\r\n\r\n            send_BNB(Wallet_Marketing, contract_BNB);\r\n        }\r\n\r\n\r\n        // Reset Counter\r\n        swapCounter = 1;\r\n\r\n        // Unlock Swap\r\n        processingFees = false;\r\n\r\n\r\n    }\r\n\r\n    // Swap tokens for BNB\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Add liquidity and send Cake LP tokens to liquidity collection wallet\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    /*\r\n    \r\n    ----------------------------------\r\n    TRANSFER TOKENS AND CALCULATE FEES\r\n    ----------------------------------\r\n\r\n    */\r\n\r\n\r\n   \r\n\r\n    \r\n\r\n    // Transfer Tokens and Calculate Fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n\r\n        uint256 tBurn = 0;\r\n        uint256 tSwapFeeTotal = 0;\r\n        \r\n        if (Fee){\r\n\r\n            if(_isPair[recipient]){\r\n\r\n                // Sell fees\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell    / 100;\r\n                tBurn           = tAmount * _fee__Sell_Burn       / 100;\r\n\r\n            } else {\r\n\r\n                // Buy fees\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy     / 100;\r\n                tBurn           = tAmount * _fee__Buy_Burn        / 100;\r\n\r\n            }\r\n        }\r\n\r\n\r\n        uint256 tTransferAmount = tAmount - (tSwapFeeTotal + tBurn);\r\n\r\n        // Transfer tokens\r\n        _tOwned[sender] -= tAmount;\r\n\r\n        // Send tokens to recipient or remove from supply\r\n        if (recipient == Wallet_Burn && burnFromSupply) {\r\n            _tTotal -= tTransferAmount;\r\n            } else {\r\n            _tOwned[recipient] += tTransferAmount;\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n\r\n        // Take fees that require processing during swap and liquify\r\n        if(tSwapFeeTotal > 0){\r\n\r\n            _tOwned[address(this)] += tSwapFeeTotal;\r\n            emit Transfer(sender, address(this), tSwapFeeTotal);\r\n\r\n            // Increase the transaction counter\r\n            if(swapCounter < swapTrigger){\r\n                unchecked{swapCounter++;}\r\n            }\r\n                \r\n        }\r\n\r\n        // Take burn fee\r\n        if(tBurn > 0){\r\n\r\n            if(burnFromSupply){\r\n\r\n                _tTotal -= tBurn;\r\n\r\n                } else {\r\n           \r\n                _tOwned[Wallet_Burn] += tBurn;\r\n                emit Transfer(sender, Wallet_Burn, tBurn);\r\n                \r\n            }\r\n                \r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // This function is required so that the contract can receive BNB during fee processing\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n    Reflection Contract (Rewards holders the native token)\r\n    Created at tokensbygen.com\r\n\r\n    This contract is not open source - Can not be used or forked without permission.\r\n    Fees from the creation of this token help to support GEN - https://gentokens.com\r\n\r\n\r\n*/", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_TokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_TotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Decimals\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_OwnerWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Token_CA\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Liquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Burn\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Contract_Fee\",\"type\":\"uint8\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Liquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Burn\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Contract_Fee\",\"type\":\"uint8\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Tran\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Hold\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Presale_Contract_Address\",\"type\":\"address\"}],\"name\":\"F_01_Add_PreSale_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Marketing_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Burn_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Marketing_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Burn_on_SELL\",\"type\":\"uint8\"}],\"name\":\"F_02_Set_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Transaction_Percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet_Percent\",\"type\":\"uint256\"}],\"name\":\"F_03_Set_Wallet_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"F_04_Open_Trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"F_05_Blacklist_Bots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"F_06_End_Launch_Mode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"}],\"name\":\"F_07_Update_Links_Website\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Telegram_Group\",\"type\":\"string\"}],\"name\":\"F_08_Update_Links_Telegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"LP_Lock_URL\",\"type\":\"string\"}],\"name\":\"F_09_Update_Links_LP_Lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"M_01_Add_Liquidity_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Confirmation_Code\",\"type\":\"uint256\"}],\"name\":\"M_02_Ownership_RENOUNCE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Confirmation_Code\",\"type\":\"uint256\"}],\"name\":\"M_03_Ownership_TRANSFER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"O_01_No_Fee_Wallet_Transfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"O_02_Burn_From_Supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"O_03_Remove_Fee_When_Processing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"P_01_Auto_Fee_Process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"P_02_Process_Fees_Now\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Transaction_Count\",\"type\":\"uint256\"}],\"name\":\"P_03_FeeProcessing_Trigger_Count\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"P_04_Remove_Random_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Project_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Contract_Created_By\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Marketing_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"W_01_Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"W_02_Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"W_03_Pre_Launch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_EarlyBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Remove_Contract_Fee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Burn\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Contract\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Buy_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Burn\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Contract\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee__Sell_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFromSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noFeeWhenProcessing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000004000000000000000000000000888220cf888894a717eaffd9c29480c52c5cbbb7000000000000000000000000000000000000000000000000000000000000000444454d4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444454d4f00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11465a5324c1fc76c4c3e553571c90dabdf5c20c650e6145d597275ee2a9c0af"}