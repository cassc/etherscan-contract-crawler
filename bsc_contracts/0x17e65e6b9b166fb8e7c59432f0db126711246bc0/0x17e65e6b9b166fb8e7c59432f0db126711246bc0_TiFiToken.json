{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * TiFiToken = The integrated Finance Token\r\n * A new type of contract that designed and implemented by TiFi Community\r\n */\r\ncontract TiFiToken is IBEP20, Context, Ownable {\r\n    struct Values {\r\n        uint256 rSendAmount;\r\n        uint256 rReceiveAmount;\r\n        uint256 rRflx;\r\n        uint256 rBurn;\r\n        uint256 tSendAmount;\r\n        uint256 tReceiveAmount;\r\n        uint256 tRflx;\r\n        uint256 tReward;\r\n        uint256 tBurn;\r\n        uint256 tCmty;\r\n    }\r\n    event ApplyReward(address indexed account, uint256 reward);\r\n    event SetCommunityAccount(address indexed account);\r\n    event SetDBank(address indexed account);\r\n    event UpdatePairs(address indexed account, bool enable);\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _noFee;\r\n    mapping(address => bool) private _pairs;\r\n    address[] private _pairList;\r\n\r\n    string private constant _NAME = \"TiFi Token\";\r\n    string private constant _SYMBOL = \"TIFI\";\r\n    uint256 private constant _DECIMALS = 18;\r\n    address public constant ZERO_ADDR = address(0);\r\n    address public CMTY_ADDR; // Community Address\r\n    address public BANK_ADDR; // DBank Address\r\n\r\n    uint256 private constant _MAX = ~uint256(0);\r\n    uint256 private _DECIMALFACTOR = 10**_DECIMALS;\r\n    uint256 private constant _GRANULARITY = 10000;\r\n\r\n    uint256 private _tTotal = (10**15) * _DECIMALFACTOR; // Total supply: 1 Quadrillion\r\n    uint256 private _rTotal = _MAX - (_MAX % _tTotal);\r\n    uint256 private _rtRate = _rTotal / _tTotal;\r\n\r\n    uint256 private _tRflxTotal;\r\n    uint256 private _tBurnTotal;\r\n\r\n    uint256 public SEND_REWARD = 100; // 1%\r\n    uint256 public RECV_CHARGE = 200; // 2%\r\n    uint256 public BUY_RATE = 100; // 1%\r\n    uint256 public SELL_RATE = 200; // 2%\r\n    uint256 public RFLX_RATE = 6000; // 60% of (charge - reward)\r\n    uint256 public BURN_RATE = 2000; // 20% of (charge - reward)\r\n    uint256 public CMTY_RATE = 2000; // 20% of (charge - reward)\r\n\r\n    constructor() payable {\r\n        _owner = _msgSender();\r\n        CMTY_ADDR = _owner;\r\n        BANK_ADDR = _owner;\r\n        _rOwned[_owner] = _rTotal;\r\n        _noFee[_owner] = true;\r\n        _noFee[ZERO_ADDR] = true;\r\n        _pairs[ZERO_ADDR] = true;\r\n\r\n        _msgSender().transfer(msg.value);\r\n        emit Transfer(ZERO_ADDR, _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return uint8(_DECIMALS);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_pairs[account] || account == ZERO_ADDR) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        uint256 allow = _allowances[sender][_msgSender()];\r\n        require(allow >= amount, \"Transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allow - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 allow = _allowances[_msgSender()][spender];\r\n        require(allow >= subtractedValue, \"Decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, allow - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function hasFee(address account) public view returns (bool) {\r\n        return !_noFee[account];\r\n    }\r\n\r\n    function totalRflx() public view returns (uint256) {\r\n        return _tRflxTotal;\r\n    }\r\n\r\n    function totalBurn() public view returns (uint256) {\r\n        return _tBurnTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        return tAmount * _rtRate;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(rAmount <= _rTotal, \"Amount must be less than reflections\");\r\n        return rAmount / _rtRate;\r\n    }\r\n\r\n    function setCommunityAccount(address account) external onlyOwner {\r\n        require(CMTY_ADDR != account, \"The same address is already set\");\r\n        if (\r\n            BANK_ADDR == owner() ||\r\n            BANK_ADDR == ZERO_ADDR ||\r\n            BANK_ADDR == CMTY_ADDR\r\n        ) {\r\n            // If bank address is not set yet, set to community address.\r\n            // If bank address is community address, the bank address is set as well (Bank/Community Affiliation).\r\n            BANK_ADDR = account;\r\n        }\r\n        if (CMTY_ADDR != owner() && CMTY_ADDR != BANK_ADDR) {\r\n            _noFee[CMTY_ADDR] = false; // Re-enable fee to original community address\r\n        }\r\n        CMTY_ADDR = account;\r\n        _noFee[account] = true; // Disable fee for new community address\r\n        emit SetCommunityAccount(account);\r\n    }\r\n\r\n    function setDBank(address account) external onlyOwner {\r\n        // Set DBank's smart contract address\r\n        require(BANK_ADDR != account, \"The same address is already set\");\r\n        _noFee[BANK_ADDR] = false;\r\n        BANK_ADDR = account;\r\n        _noFee[BANK_ADDR] = true;\r\n        emit SetDBank(account);\r\n    }\r\n\r\n    function setFee(address account, bool enable) external onlyOwner {\r\n        require(_noFee[account] == enable, \"Already set\");\r\n        _noFee[account] = (!enable);\r\n    }\r\n\r\n    function setPairAddress(address account) external onlyOwner {\r\n        require(\r\n            !_pairs[account] && account != ZERO_ADDR,\r\n            \"Cannot set pair address\"\r\n        );\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _pairs[account] = true;\r\n        _pairList.push(account);\r\n        _updateRTRate();\r\n        emit UpdatePairs(account, true);\r\n    }\r\n\r\n    function unsetPairAddress(address account) external onlyOwner {\r\n        require(\r\n            _pairs[account] && account != ZERO_ADDR,\r\n            \"Cannot remove pair address\"\r\n        );\r\n        for (uint256 i = 0; i < _pairList.length; i++) {\r\n            if (_pairList[i] == account) {\r\n                _pairList[i] = _pairList[_pairList.length - 1];\r\n                _tOwned[account] = 0;\r\n                _pairs[account] = false;\r\n                _pairList.pop();\r\n                _updateRTRate();\r\n                break;\r\n            }\r\n        }\r\n        emit UpdatePairs(account, false);\r\n    }\r\n\r\n    function getRewardCharge(address sender, address recipient)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        require(\r\n            _allowances[sender][_msgSender()] > 0 ||\r\n                sender == _msgSender() ||\r\n                recipient == _msgSender(),\r\n            \"Ineligible to view reward or charge\"\r\n        );\r\n        if (_noFee[sender] || _noFee[recipient]) {\r\n            return (0, 0);\r\n        }\r\n        if (_pairs[sender]) {\r\n            return (0, BUY_RATE);\r\n        }\r\n        if (_pairs[recipient]) {\r\n            return (0, SELL_RATE);\r\n        }\r\n        return (SEND_REWARD, RECV_CHARGE);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        require(\r\n            sender != ZERO_ADDR && recipient != ZERO_ADDR,\r\n            \"Transfer from/to the zero address\"\r\n        );\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(sender) >= amount, \"Transfer amount exceeds balance\");\r\n\r\n        (uint256 reward, uint256 charge) = getRewardCharge(sender, recipient);\r\n        Values memory v = _getValues(amount, reward, charge);\r\n        _rOwned[sender] -= v.rSendAmount;\r\n        _rOwned[recipient] += v.rReceiveAmount;\r\n        if (_pairs[sender]) _tOwned[sender] -= v.tSendAmount;\r\n        if (_pairs[recipient]) _tOwned[recipient] += v.tReceiveAmount;\r\n        _reflectFee(v, sender);\r\n        _updateRTRate();\r\n        emit Transfer(sender, recipient, v.tReceiveAmount);\r\n        emit ApplyReward(recipient, v.tReward);\r\n        return true;\r\n    }\r\n\r\n    function _reflectFee(Values memory v, address sender) private {\r\n        _sendToBank(v.tCmty, sender);\r\n        _rTotal -= (v.rRflx + v.rBurn);\r\n        _tRflxTotal += v.tRflx;\r\n        _tBurnTotal += v.tBurn;\r\n        _tTotal -= v.tBurn;\r\n        emit Transfer(address(this), address(0), v.tBurn);\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount,\r\n        uint256 rewardRate,\r\n        uint256 chargeRate\r\n    ) private view returns (Values memory) {\r\n        (\r\n            uint256 tCharge,\r\n            uint256 tReward,\r\n            uint256 tRflx,\r\n            uint256 tBurn,\r\n            uint256 tCmty\r\n        ) = _getTBasics(tAmount, rewardRate, chargeRate);\r\n        uint256 tSendAmount = tAmount - tReward;\r\n        uint256 tReceiveAmount = tAmount - tCharge;\r\n        (uint256 rSendAmount, uint256 rRflx) = _getRBasics(tSendAmount, tRflx);\r\n        uint256 rReceiveAmount = _getRReceiveAmount(\r\n            rSendAmount,\r\n            rRflx,\r\n            tBurn,\r\n            tCmty\r\n        );\r\n        uint256 rBurn = tBurn * _rtRate;\r\n        return\r\n            Values(\r\n                rSendAmount,\r\n                rReceiveAmount,\r\n                rRflx,\r\n                rBurn,\r\n                tSendAmount,\r\n                tReceiveAmount,\r\n                tRflx,\r\n                tReward,\r\n                tBurn,\r\n                tCmty\r\n            );\r\n    }\r\n\r\n    function _getTBasics(\r\n        uint256 tAmount,\r\n        uint256 rewardRate,\r\n        uint256 chargeRate\r\n    )\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tCharge = (tAmount * chargeRate) / _GRANULARITY;\r\n        uint256 tReward = (tAmount * rewardRate) / _GRANULARITY;\r\n        uint256 income = tCharge - tReward;\r\n        uint256 tRflx = (income * RFLX_RATE) / _GRANULARITY;\r\n        uint256 tBurn = (income * BURN_RATE) / _GRANULARITY;\r\n        uint256 tCmty = (income * CMTY_RATE) / _GRANULARITY;\r\n        return (tCharge, tReward, tRflx, tBurn, tCmty);\r\n    }\r\n\r\n    function _getRBasics(uint256 tSendAmount, uint256 tRflx)\r\n        private\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (tSendAmount * _rtRate, tRflx * _rtRate);\r\n    }\r\n\r\n    function _getRReceiveAmount(\r\n        uint256 rSendAmount,\r\n        uint256 rRflx,\r\n        uint256 tBurn,\r\n        uint256 tCmty\r\n    ) private view returns (uint256) {\r\n        return rSendAmount - rRflx - tBurn * _rtRate - tCmty * _rtRate;\r\n    }\r\n\r\n    function _updateRTRate() private {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _pairList.length; i++) {\r\n            if (\r\n                _rOwned[_pairList[i]] > rSupply ||\r\n                _tOwned[_pairList[i]] > tSupply\r\n            ) {\r\n                _rtRate = _rTotal / _tTotal;\r\n                return;\r\n            }\r\n            rSupply -= _rOwned[_pairList[i]];\r\n            tSupply -= _tOwned[_pairList[i]];\r\n        }\r\n        _rtRate = (rSupply < _rTotal / _tTotal)\r\n            ? _rTotal / _tTotal\r\n            : rSupply / tSupply;\r\n    }\r\n\r\n    function _sendToBank(uint256 tCmty, address sender) private {\r\n        _rOwned[BANK_ADDR] += tCmty * _rtRate;\r\n        if (_pairs[BANK_ADDR]) _tOwned[BANK_ADDR] += tCmty;\r\n        emit Transfer(sender, BANK_ADDR, tCmty);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != ZERO_ADDR, \"Burn from the zero address\");\r\n        require(balanceOf(account) >= amount, \"Burn amount exceeds balance\");\r\n        _rOwned[account] -= amount * _rtRate;\r\n        if (_pairs[account]) _tOwned[account] -= amount;\r\n        uint256 rBurn = amount * _rtRate;\r\n        _rTotal -= rBurn;\r\n        _tBurnTotal += amount;\r\n        _tTotal -= amount;\r\n        _updateRTRate();\r\n        emit Transfer(account, ZERO_ADDR, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ApplyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetCommunityAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetDBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"UpdatePairs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BANK_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUY_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CMTY_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CMTY_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECV_CHARGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RFLX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELL_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getRewardCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCommunityAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRflx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unsetPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TiFiToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d996b379786c7c73171a92d7f6bbb37dd451431ef2d7cbe37d111e543755c4d"}