{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b);\r\n        // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Recv {\r\n    IERC20 public token520 = IERC20(msg.sender);\r\n    IERC20 public usdt;\r\n\r\n    constructor () public {\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance > 0) {\r\n            usdt.transfer(address(token520), usdtBalance);\r\n        }\r\n        uint256 token520Balance = token520.balanceOf(address(this));\r\n        if (token520Balance > 0) {\r\n            token520.transfer(address(token520), token520Balance);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function sync() external;\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _dever;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _dever = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDever() {\r\n        require(_dever == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n  \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract First {\r\n    using SafeMath for uint256;\r\n    uint256 public procRoundIndex = 0;\r\n    uint256 public procType = 0;\r\n    uint256 public procIndex = 0;\r\n    uint256 public stepMax = 50;\r\n    STAR star = STAR(msg.sender);\r\n    constructor () public {}\r\n    function proc() external {\r\n        require(msg.sender == address(star), \"permission denied\");\r\n        if(star.roundIndex() != procRoundIndex){\r\n            uint256 roundLen = star.RoundLen(procRoundIndex);\r\n            uint256 tAmount = star.roundFirstAmounts(procRoundIndex);\r\n            if(roundLen == 0 ||  tAmount <= 1 * 10**18 ){\r\n                procRoundIndex++;\r\n                return;\r\n            }\r\n            if(procType == 0){\r\n                uint256 procMax = 50;\r\n                if(roundLen < procMax)\r\n                    procMax = roundLen;\r\n                uint256 amount = tAmount.div(6).div(procMax);\r\n                uint256 step = stepMax;\r\n                if(procIndex+step > procMax)\r\n                    step = procMax - procIndex;\r\n                uint256 nextProcIndex = procIndex+step;\r\n\r\n                for(uint256 i = procIndex; i< nextProcIndex;i++){\r\n                    address user = star.RoundAddr(procRoundIndex,i);\r\n                    star.transfer(user,amount);\r\n                }\r\n                procIndex = nextProcIndex;\r\n                if(procIndex == procMax){\r\n                    procType = 1;\r\n                    procIndex = 0;\r\n                }\r\n            }else if (procType == 1){\r\n                uint256 procMax = 500;\r\n                if(roundLen <  procMax)\r\n                    procMax = roundLen;\r\n                uint256 amount = tAmount.div(3).div(procMax);\r\n                uint256 step = stepMax;\r\n                if(procIndex+step > procMax)\r\n                    step = procMax - procIndex;\r\n                uint256 nextProcIndex = procIndex+step;\r\n                for(uint256 i = procIndex; i<nextProcIndex;i++){\r\n                    address user = star.RoundAddr(procRoundIndex,i);\r\n                    star.transfer(user,amount);\r\n                }\r\n                procIndex = nextProcIndex;\r\n                if(procIndex == procMax){\r\n                    procType = 2;\r\n                    procIndex = 0;\r\n                }\r\n                  \r\n            }else if(procType == 2){\r\n                uint256 procMax = 5000;\r\n                if(roundLen <  procMax)\r\n                    procMax = roundLen;\r\n                uint256 amount = tAmount.div(2).div(procMax);\r\n                uint256 step = stepMax;\r\n                if(procIndex+step > procMax)\r\n                    step = procMax - procIndex;\r\n                uint256 nextProcIndex = procIndex+step;    \r\n                for(uint256 i = procIndex; i<nextProcIndex;i++){\r\n                    address user = star.RoundAddr(procRoundIndex,i);\r\n                    star.transfer(user,amount);\r\n                }\r\n                procIndex = nextProcIndex;\r\n                if(procIndex == procMax){\r\n                    procType = 0;\r\n                    procIndex = 0;\r\n                    procRoundIndex++;\r\n                }    \r\n            }\r\n        }\r\n\r\n    }  \r\n}\r\n\r\n\r\ncontract Latest {\r\n    using SafeMath for uint256;\r\n    uint256 public procRoundIndex = 0;\r\n    STAR star = STAR(msg.sender);\r\n    constructor () public {}\r\n    function proc() external {\r\n        require(msg.sender == address(star), \"permission denied\");\r\n        if(star.roundIndex() != procRoundIndex){  \r\n            uint256 roundLen = star.RoundLen(procRoundIndex);\r\n            uint256 tAmount = star.roundLatestAmounts(procRoundIndex);\r\n            if(roundLen == 0 || tAmount <= 1 * 10**18){\r\n                procRoundIndex++;\r\n                return;\r\n            }\r\n            uint256 procMax = 3;\r\n            if(roundLen < procMax)\r\n                procMax = roundLen;\r\n            uint256 amount = tAmount.div(procMax);\r\n            uint256 nextProcIndex = roundLen-procMax;\r\n            for(uint256 i = roundLen; i> nextProcIndex;i--){\r\n                address user = star.RoundAddr(procRoundIndex,i-1);\r\n                star.transfer(user,amount);\r\n            }\r\n            procRoundIndex++;\r\n        }\r\n    }  \r\n}\r\n\r\ncontract Node {\r\n    using SafeMath for uint256;\r\n    uint256 public procRoundIndex = 0;\r\n    STAR star = STAR(msg.sender);\r\n    constructor () public {}\r\n    function proc() external {\r\n        require(msg.sender == address(star), \"permission denied\");\r\n        \r\n        if(star.roundIndex() != procRoundIndex){\r\n            uint256 roundNodeLen = star.RoundNodeLen(procRoundIndex);\r\n            uint256 tAmount = star.roundNodeAmounts(procRoundIndex);\r\n            if(roundNodeLen == 0 || tAmount <= 1 * 10**18){\r\n                if(roundNodeLen == 0 && tAmount > 0)\r\n                    star.transfer(address(0x8720334B72c0f293b0Fc302161B45f56446ee2D2),tAmount);\r\n                procRoundIndex++;\r\n                return;\r\n            }\r\n                uint256 procMax = 5;\r\n                if(roundNodeLen < procMax)\r\n                    procMax = roundNodeLen;\r\n                uint256 amount = tAmount.div(procMax);\r\n                for(uint256 i = 0; i< procMax;i++){\r\n                    address user = star.roundNodes(procRoundIndex,i);\r\n                    star.transfer(user,amount);\r\n                }\r\n                procRoundIndex++;\r\n        }\r\n\r\n    }  \r\n}\r\n\r\ncontract STAR is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => address) public inviter;\r\n    mapping(address => uint256) public inviterInvalidNum;\r\n    address[] public nodes;\r\n    mapping(address => bool) public isNodes;\r\n\r\n    address public  deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public inviteTransfer;\r\n    mapping(address => bool) public inviteCanTransfer;\r\n    mapping(address => bool) public _isValidAddrs;\r\n    mapping(address => bool) private _isDelivers;\r\n    mapping(address => bool) private _whiteList;\r\n    mapping(address => bool) public _isBot;\r\n\r\n    uint256 public node5Amount = 0;\r\n    uint256 public firstAmount = 0;\r\n    uint256 public latestAmount  = 0;\r\n\r\n    uint256 public node5DivAmount = 0;\r\n    uint256 public firstDivAmount = 0;\r\n    uint256 public latestDivAmount  = 0;\r\n\r\n    bool public isLaunch = false;\r\n    uint256 public startTime;\r\n    uint256 public inviterRequireLockTime;\r\n    mapping(address => uint256) public inviterLockTime;\r\n\r\n    address public _pair;\r\n    mapping(address => bool) public inviterBlack;\r\n\r\n    uint256 public rThreshold = 0;\r\n\r\n    address public lpAddress = address(0x4Aa1f74138671454459C185d11Ea6f372e1a482b);\r\n    address public techAddress = address(0x05D4114087D20AaBe8Ed6804a7fcc8E5eb86B7D2);\r\n    address public daoAddress = address(0xFCb4f9e11f119E2Ffe889595A0232D2A63056D0f);\r\n    address public cbnAddress = address(0x8720334B72c0f293b0Fc302161B45f56446ee2D2);\r\n    mapping(uint256 => address[]) public rounds;\r\n    mapping(uint256 => mapping(address => uint256)) public rNodeRewards;\r\n    mapping(uint256 => address[]) public roundNodes;\r\n    mapping(uint256 => mapping(address => bool)) public isRNode;\r\n    mapping(uint256 => uint256) public roundFirstAmounts;\r\n    mapping(uint256 => uint256) public roundNodeAmounts;\r\n    mapping(uint256 => uint256) public roundLatestAmounts;\r\n    uint256 public roundIndex = 0;\r\n    uint256 private enterCount = 0;\r\n    Recv   RECV;\r\n    Latest LATEST;\r\n    First  FIRST;\r\n    Node   NODE;\r\n    uint256 public lastTime = 0;\r\n    //buy fees 12%\r\n    uint256  public referFee = 3;\r\n    uint256  public nodeFee = 2;\r\n    uint256  public node5Fee = 2;\r\n    uint256  public daoFee = 2;\r\n    uint256  public techFee = 1;\r\n    uint256  public latestFee = 2;\r\n    //sell fees 13%\r\n    uint256 public holeFee = 5;\r\n    uint256 public firstFee = 6;\r\n    uint256 public lpFee = 2;\r\n\r\n    bool private swapping;\r\n\r\n    uint256 public _maxRAmount =  1000000 * 10**18;\r\n\r\n    uint256 public txlimitByUsdt = 100 * 10**18;\r\n\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    modifier transferCounter {\r\n        enterCount = enterCount.add(1);\r\n        _;\r\n        enterCount = enterCount.sub(1, \"transfer counter\");\r\n    }\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n\r\n    constructor() {\r\n        _name = \"STAR\";\r\n        _symbol = \"STAR\";\r\n        _mint(owner(), 202203231400 * 10**18);\r\n        IPancakeRouter router = IPancakeRouter(_router);\r\n        _pair = IPancakeFactory(router.factory()).createPair(\r\n            address(this),\r\n            usdt\r\n        );\r\n        RECV = new Recv();\r\n        LATEST = new Latest();\r\n        FIRST = new First();\r\n        NODE = new Node();\r\n        _approve(address(this), address(_router), uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        isExcludedFromFee[owner()] = true;\r\n        _isDelivers[address(LATEST)] = true;\r\n        _isDelivers[address(FIRST)] = true;\r\n        _isDelivers[address(NODE)] = true;\r\n        isExcludedFromFee[_router] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n         isExcludedFromFee[lpAddress] = true;\r\n        isExcludedFromFee[techAddress] = true;\r\n        isExcludedFromFee[daoAddress] = true;\r\n        isExcludedFromFee[cbnAddress] = true;\r\n        inviterRequireLockTime = 60;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function setMaxRAmount(uint256 amount) public onlyOwner{\r\n        require(amount >= 10000 && amount <= 100000000 * 10**18);\r\n        _maxRAmount = amount;\r\n    }\r\n\r\n    function Launch() public onlyOwner {\r\n        require(!isLaunch);\r\n        isLaunch = true;\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function addBot(address account) private {\r\n        if (!_isBot[account]) _isBot[account] = true;\r\n    }\r\n\r\n    function exBot(address account) external onlyOwner {\r\n         _isBot[account] = false;\r\n    }\r\n\r\n    function setRThreshold(uint256 thres) public onlyOwner{\r\n        require(thres >= 0 && thres <= 100000000 * 10**18);\r\n        rThreshold = thres;\r\n    }\r\n\r\n    function setWhiteAddress(address[] memory accounts, bool isWL) public onlyOwner {\r\n        for(uint256 i = 0 ; i <accounts.length;i++){\r\n            _whiteList[accounts[i]] = isWL;\r\n        }\r\n    }\r\n\r\n    function isWhiteAddress(address account) public view returns (bool) {\r\n        return _whiteList[account];\r\n    }\r\n\r\n    function setInviterBlackAddress(address[] memory accounts, bool isIB) public onlyOwner {\r\n         for(uint256 i = 0 ; i <accounts.length;i++){\r\n            inviterBlack[accounts[i]] = isIB;\r\n         }\r\n    }\r\n\r\n    function setDeliver(address _deliverAddr,bool _isD) public onlyOwner {\r\n        _isDelivers[_deliverAddr] = _isD;\r\n    }\r\n\r\n    function resetInviter(address[] memory accounts, address _inviter) public onlyOwner {\r\n        require(!Address.isContract(_inviter));\r\n        for(uint256 i = 0 ; i <accounts.length;i++){\r\n            if(!Address.isContract(accounts[i]) && accounts[i] != _inviter)\r\n                inviter[accounts[i]] = _inviter;\r\n                inviterLockTime[accounts[i]] = block.timestamp; \r\n        }\r\n    }\r\n\r\n    function setInviterTransfer(address[] memory accounts, bool isIT) public onlyOwner {\r\n                for(uint256 i = 0 ; i <accounts.length;i++){\r\n                    if(!Address.isContract(accounts[i]) && !_isValidAddrs[accounts[i]])\r\n                        inviteTransfer[accounts[i]] = isIT;\r\n                }\r\n    }\r\n\r\n    function setInviter(address[] memory accounts, address _inviter,uint256 amount) public onlyOwner {\r\n        uint256 total = 0;\r\n        uint256 i ;\r\n        require(!Address.isContract(_inviter));\r\n        for(i = 0 ; i <accounts.length;i++){\r\n            if(inviter[accounts[i]] == address(0) && !Address.isContract(accounts[i])){\r\n                inviter[accounts[i]] = _inviter;\r\n                inviterLockTime[accounts[i]] = block.timestamp; \r\n                inviteTransfer[accounts[i]] = true;\r\n                _basicTransfer(msg.sender,accounts[i],amount);\r\n                total++;\r\n            }\r\n        }\r\n        _basicTransfer(msg.sender,_inviter,amount.mul(total).div(10));\r\n    }\r\n\r\n    function isInviterBlackAddress(address account) public view  returns (bool) {\r\n        return inviterBlack[account];\r\n    }\r\n\r\n    function RoundLen(uint256 rIndex) public view  returns (uint256) {\r\n        return rounds[rIndex].length;\r\n    }\r\n\r\n    function RoundNodeLen(uint256 rIndex) public view  returns (uint256) {\r\n        return roundNodes[rIndex].length;\r\n    }\r\n\r\n    function RoundAddr(uint256 rIndex,uint256 index) public view  returns (address) {\r\n        return rounds[rIndex][index];\r\n    }\r\n\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n    {\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual transferCounter {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!_isBot[sender],\"the bot address\");\r\n        if(_isDelivers[sender] ||_isDelivers[recipient]){\r\n             _basicTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        uint256 bal = balanceOf(address(_pair)).div(10000);\r\n        if(balanceOf(address(this)) > bal ){\r\n            if (\r\n                !swapping &&\r\n                sender != address(_pair) &&\r\n                !(sender == address(_router) && recipient != address(_pair))&&\r\n                swapAndLiquifyEnabled\r\n            ) {\r\n                swapping = true;\r\n                if(balanceOf(address(this)) >= bal.mul(100))\r\n                    bal = bal.mul(100);\r\n                swapAndLiquify(bal);\r\n                swapping = false;\r\n            }\r\n        }\r\n        bool shouldSetInviter = balanceOf(recipient) == 0 && inviter[recipient] == address(0) && !Address.isContract(sender) && !inviterBlack[sender];   \r\n        if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            if(sender == _pair || recipient == _pair){\r\n                if(!isLaunch)\r\n                {\r\n                    require(isWhiteAddress(sender)||isWhiteAddress(recipient) ,\"swap not open\");\r\n                }else{\r\n                    if(sender == _pair && block.timestamp <= startTime.add(12)){\r\n                        addBot(recipient);\r\n                    }\r\n                }\r\n            }\r\n            if (sender == _pair) {\r\n                _buyTransfer(sender,recipient,amount);\r\n            }\r\n            else if(recipient == _pair){\r\n                _sellTransfer(sender,recipient,amount);\r\n            } \r\n            else {\r\n                \r\n                uint256 senderBalance = _balances[sender];\r\n                require(\r\n                    senderBalance >= amount,\r\n                    \"ERC20: transfer amount exceeds balance\"\r\n                );\r\n                unchecked {\r\n                    _balances[sender] = senderBalance.sub(amount);\r\n                }\r\n                require(!inviteTransfer[sender] || (inviteTransfer[sender] && inviteCanTransfer[sender]));\r\n                _balances[recipient] = _balances[recipient].add(\r\n                    amount\r\n                );\r\n                emit Transfer(sender, recipient, amount);\r\n                if(amount == 300 * 10**18 && !isWhiteAddress(recipient) && !isExcludedFromFee[recipient] && !_isValidAddrs[recipient]){\r\n                        inviteTransfer[recipient] = true;\r\n                }\r\n            }\r\n        }\r\n         if (shouldSetInviter && amount >= rThreshold) {\r\n             inviter[recipient] = sender;\r\n             inviterLockTime[recipient] = block.timestamp; \r\n         }\r\n         if(enterCount == 1){\r\n                FIRST.proc();\r\n                LATEST.proc();\r\n                NODE.proc();\r\n         }\r\n\r\n    }\r\n\r\n    function _sellTransfer(\r\n         address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )internal returns (bool){\r\n\r\n            uint256 senderBalance = _balances[sender];\r\n            require(\r\n                senderBalance >= amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n\r\n            unchecked {\r\n                _balances[sender] = senderBalance.sub(amount);\r\n            }\r\n\r\n            require(!inviteTransfer[sender] || (inviteTransfer[sender] && inviteCanTransfer[sender]));\r\n\r\n            uint256 share = amount.div(100);\r\n            _balances[deadAddress] =_balances[deadAddress].add(share.mul(holeFee));\r\n            emit Transfer(sender, deadAddress, share.mul(holeFee));\r\n              _balances[address(FIRST)] =_balances[address(FIRST)].add(share.mul(firstFee));\r\n            emit Transfer(sender, address(FIRST), share.mul(firstFee));\r\n            firstAmount = firstAmount.add(share.mul(firstFee));\r\n            _balances[address(this)] =_balances[address(this)].add(share.mul(lpFee));\r\n            emit Transfer(sender, address(this), share.mul(lpFee));\r\n            uint256 _sellFee = holeFee+firstFee +lpFee;\r\n            _balances[recipient] = _balances[recipient].add(\r\n                share.mul(100-_sellFee)\r\n            );\r\n            emit Transfer(sender, recipient, share.mul(100-_sellFee));\r\n            return true;\r\n    }\r\n\r\n    function getThresTxAmount() internal view returns (uint256) {\r\n            uint256 thresTxAmount = 0;\r\n            (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pair).getReserves();\r\n            if (reserve1 > 0 && address(this) == IPancakePair(_pair).token0()) {\r\n                thresTxAmount = reserve0.mul(txlimitByUsdt).div(reserve1.add(txlimitByUsdt));\r\n            }\r\n            if (reserve0 > 0 &&  address(this) == IPancakePair(_pair).token1()) {\r\n                thresTxAmount = reserve1.mul(txlimitByUsdt).div(reserve0.add(txlimitByUsdt));\r\n            }\r\n            thresTxAmount = thresTxAmount.mul(995).div(1000);\r\n            return thresTxAmount;\r\n    }\r\n\r\n    function _node5Proc(address node) internal returns (bool){\r\n         if(roundNodes[roundIndex].length < 5){\r\n                uint256 i ;\r\n                for( i = 0; i< roundNodes[roundIndex].length; i++){\r\n                    if(roundNodes[roundIndex][i] == node){\r\n                        break;\r\n                    }\r\n                }\r\n                if(i == roundNodes[roundIndex].length)\r\n                    roundNodes[roundIndex].push(node);\r\n        }else if(roundNodes[roundIndex][0] != node){\r\n\r\n            uint256 minReward  = rNodeRewards[roundIndex][roundNodes[roundIndex][0]];\r\n            uint256 minRIndex = 0;\r\n            uint256 i;\r\n            for(i = 1; i< 5; i++){\r\n                if(roundNodes[roundIndex][i] == node){\r\n                        break;\r\n                }\r\n                if(minReward > rNodeRewards[roundIndex][roundNodes[roundIndex][i]]){\r\n                    minReward = rNodeRewards[roundIndex][roundNodes[roundIndex][i]];\r\n                    minRIndex = i;\r\n                }\r\n\r\n            }\r\n            if(i == 5 && minReward < rNodeRewards[roundIndex][node]){\r\n                 roundNodes[roundIndex][minRIndex] = node;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _buyTransfer(\r\n         address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )internal returns (bool){\r\n\r\n           \r\n            uint256 thresTxAmount = getThresTxAmount();\r\n\r\n            uint256 senderBalance = _balances[sender];\r\n            require(\r\n                senderBalance >= amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            unchecked {\r\n                _balances[sender] = senderBalance.sub(amount);\r\n            }\r\n\r\n            if(inviteTransfer[recipient] && !inviteCanTransfer[recipient] && amount >= thresTxAmount)\r\n                inviteCanTransfer[recipient] = true;\r\n            if(amount >= thresTxAmount){\r\n                if(lastTime != 0 && lastTime.add(3600) < block.timestamp){\r\n\r\n                    roundFirstAmounts[roundIndex] = firstAmount.sub(firstDivAmount);\r\n                    roundNodeAmounts[roundIndex] = node5Amount.sub(node5DivAmount);\r\n                    roundLatestAmounts[roundIndex] = latestAmount.sub(latestDivAmount);\r\n                    roundIndex++;\r\n                    firstDivAmount = firstAmount;\r\n                    node5DivAmount = node5Amount;\r\n                    latestDivAmount = latestAmount;\r\n                }\r\n                lastTime = block.timestamp;\r\n                if (inviter[recipient] == address(0)) {\r\n                    inviter[recipient] = cbnAddress; \r\n                    inviterLockTime[recipient] = block.timestamp;\r\n                 } else {\r\n                        if (\r\n                            inviterLockTime[recipient] >\r\n                            block.timestamp - inviterRequireLockTime &&\r\n                            inviter[recipient] != cbnAddress\r\n                        ) {\r\n                            \r\n                            inviter[recipient] = cbnAddress;\r\n                            inviterLockTime[recipient] = block.timestamp;\r\n                        }\r\n                }\r\n                rounds[roundIndex].push(recipient);\r\n                if(!_isValidAddrs[recipient] ){\r\n                    _isValidAddrs[recipient] = true;\r\n                    address ref = inviter[recipient];\r\n                    if(ref != address(0) && !inviterBlack[ref]){\r\n                        inviterInvalidNum[ref]++;\r\n                        if(inviterInvalidNum[ref] == 100){\r\n                            nodes.push(ref);\r\n                            isNodes[ref] = true;\r\n                        }\r\n                    }\r\n                }\r\n                if(isNodes[recipient] && !isRNode[roundIndex][recipient]){\r\n                    _node5Proc(recipient);\r\n                }\r\n                if(!isRNode[roundIndex][recipient])\r\n                    isRNode[roundIndex][recipient] = true;\r\n                \r\n            }else{\r\n\r\n                if (inviter[recipient] == address(0)) {\r\n                    inviter[recipient] = cbnAddress; \r\n                    inviterLockTime[recipient] = block.timestamp;\r\n                 } else {\r\n                        if (\r\n                            inviterLockTime[recipient] >\r\n                            block.timestamp - inviterRequireLockTime &&\r\n                            inviter[recipient] != cbnAddress\r\n                        ) {\r\n                            \r\n                            inviter[recipient] = cbnAddress;\r\n                            inviterLockTime[recipient] = block.timestamp;\r\n                        }\r\n                }\r\n\r\n            }\r\n\r\n            uint256 share = amount.div(100);\r\n            address refer = inviter[recipient];\r\n            if(refer != cbnAddress && !inviterBlack[refer] && balanceOf(refer) >= _maxRAmount)\r\n             {\r\n                _balances[refer] = _balances[refer].add(share.mul(referFee));\r\n                emit Transfer(sender, refer, share.mul(referFee));\r\n             }else{\r\n                _balances[cbnAddress] = _balances[cbnAddress].add(share.mul(referFee));\r\n                emit Transfer(sender, cbnAddress, share.mul(referFee));\r\n                if(refer == cbnAddress){\r\n                    _balances[cbnAddress] = _balances[cbnAddress].add(share.mul(nodeFee));\r\n                    emit Transfer(sender, cbnAddress, share.mul(nodeFee));\r\n                }\r\n             } \r\n             while(refer != cbnAddress){\r\n                if(isNodes[refer] && !inviterBlack[refer] && _isValidAddrs[refer] && balanceOf(refer) >= _maxRAmount){\r\n                    _balances[refer] = _balances[refer].add(share.mul(nodeFee));\r\n                    emit Transfer(sender, refer, share.mul(nodeFee));\r\n                    rNodeRewards[roundIndex][refer] += share.mul(nodeFee);\r\n                    if(isRNode[roundIndex][refer]){\r\n                        _node5Proc(refer);\r\n                    }\r\n                    break;\r\n                }\r\n                refer = inviter[refer];\r\n                if(refer == cbnAddress){\r\n                    _balances[cbnAddress] = _balances[cbnAddress].add(share.mul(nodeFee));\r\n                    emit Transfer(sender, cbnAddress, share.mul(nodeFee));\r\n                }\r\n             }\r\n             _balances[daoAddress] =_balances[daoAddress].add(share.mul(daoFee));\r\n             emit Transfer(sender, daoAddress, share.mul(daoFee));  \r\n              _balances[techAddress] =_balances[techAddress].add(share.mul(techFee));\r\n            emit Transfer(sender, techAddress, share.mul(techFee));\r\n             _balances[address(LATEST)] =_balances[address(LATEST)].add(share.mul(latestFee));\r\n            emit Transfer(sender, address(LATEST), share.mul(latestFee));\r\n            latestAmount = latestAmount.add(share.mul(latestFee));\r\n            _balances[address(NODE)] =_balances[address(NODE)].add(share.mul(node5Fee));\r\n            emit Transfer(sender, address(NODE), share.mul(node5Fee));\r\n            node5Amount = node5Amount.add(share.mul(node5Fee));\r\n            uint _buyFee = referFee + daoFee + techFee + latestFee + nodeFee + node5Fee;\r\n            _balances[recipient] = _balances[recipient].add(\r\n                share.mul(100 - _buyFee)\r\n            );\r\n            emit Transfer(sender, recipient, share.mul(100 - _buyFee));\r\n            return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount,\"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address[] memory accounts, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for(uint256 i = 0;i<accounts.length;i++)\r\n            isExcludedFromFee[accounts[i]] = newValue;\r\n    }\r\n\r\n    function setTxlimitByUsdt(uint256 _txLimitByUsdt) public onlyOwner{\r\n        txlimitByUsdt = _txLimitByUsdt;\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        // make the swap\r\n        IPancakeRouter(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(RECV),\r\n            block.timestamp\r\n        );\r\n\r\n        RECV.withdraw();\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private  {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half, \"sub half\");\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        //uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForUSDT(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        // uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityUSDT(otherHalf, usdtBalance);\r\n        \r\n        emit SwapAndLiquify(otherHalf, usdtBalance);\r\n    }\r\n\r\n    function addLiquidityUSDT(uint256 tokenAmount, uint256 uAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        IERC20(usdt).approve(address(_router), uAmount);\r\n        IPancakeRouter(_router).addLiquidity(\r\n            address(this),\r\n            address(usdt),\r\n            tokenAmount,\r\n            uAmount,\r\n            0,\r\n            0,\r\n            lpAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RoundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"}],\"name\":\"RoundLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"}],\"name\":\"RoundNodeLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isValidAddrs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxRAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDivAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCanTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterBlack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterInvalidNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterRequireLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInviterBlackAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestDivAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node5Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node5DivAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node5Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rNodeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"resetInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundFirstAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundLatestAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundNodeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deliverAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isD\",\"type\":\"bool\"}],\"name\":\"setDeliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIB\",\"type\":\"bool\"}],\"name\":\"setInviterBlackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIT\",\"type\":\"bool\"}],\"name\":\"setInviterTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxRAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thres\",\"type\":\"uint256\"}],\"name\":\"setRThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txLimitByUsdt\",\"type\":\"uint256\"}],\"name\":\"setTxlimitByUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isWL\",\"type\":\"bool\"}],\"name\":\"setWhiteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txlimitByUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "STAR", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c37d5465376c3b9b4357f58f771b080b2bb1634dd5b3edc94b99a02d033fd593"}