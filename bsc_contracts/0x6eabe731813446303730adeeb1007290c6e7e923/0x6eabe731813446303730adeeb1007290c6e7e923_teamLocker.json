{"SourceCode": "pragma solidity ^0.8.11;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract teamLocker{\r\n    bool  private _rentrenceLock = true;\r\n    mapping (address => bool) private _claimer;\r\n    mapping (address => uint256) private _locked;\r\n\r\n    uint256 unlocktime = 0;\r\n\r\n    constructor() {\r\n     _claimer[msg.sender] = true;\r\n     unlocktime = block.timestamp + 31556926;\r\n    }\r\n\r\n    address private _activeTokenAddress;\r\n\r\n    modifier onlyClaimers() {\r\n        require(_claimer[msg.sender], \"Claimer: caller is not the allowed list of claimer\");\r\n        _;\r\n    }\r\n    modifier lock(){\r\n        require(_rentrenceLock,\"Reentrency protection hit\");\r\n        _rentrenceLock = false;\r\n        _;\r\n        _rentrenceLock = true;\r\n    }\r\n\r\n    function setAddress(address tokenAddress) public onlyClaimers{\r\n        _activeTokenAddress = tokenAddress;\r\n    }\r\n    function sync() external onlyClaimers{\r\n        _locked[_activeTokenAddress] = IERC20(_activeTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function addTeamTokens(uint256 amount) external lock{\r\n        uint256 beforetx = IERC20(_activeTokenAddress).balanceOf(address(this));\r\n        bool xfer = IERC20(_activeTokenAddress).transferFrom(address(msg.sender), address(this), amount);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n        uint256 aftertx = IERC20(_activeTokenAddress).balanceOf(address(this));\r\n        _locked[_activeTokenAddress] = _locked[_activeTokenAddress] + (aftertx-beforetx);\r\n    }\r\n    function availableReflection() external view returns(uint256){\r\n        return IERC20(_activeTokenAddress).balanceOf(address(this)) - _locked[_activeTokenAddress];\r\n    }\r\n    function lockedToken(address tokenAddress) view external returns(uint256){\r\n        return _locked[tokenAddress];\r\n    }\r\n    function getReflections() external lock onlyClaimers{\r\n        uint256 amt = IERC20(_activeTokenAddress).balanceOf(address(this)) - _locked[_activeTokenAddress];\r\n        bool xfer = IERC20(_activeTokenAddress).transfer(msg.sender, amt);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n\r\n    }\r\n    function currentActiveAddress() external view returns(address){\r\n        return _activeTokenAddress;\r\n    }\r\n\r\n    function isClaimer(address toCheck) external view returns(bool){\r\n        return _claimer[toCheck];\r\n    }\r\n    function addClaimer(address toAdd) external onlyClaimers{\r\n        _claimer[toAdd] = true;\r\n    }\r\n    function removeClaimer(address toRemove) external onlyClaimers{\r\n        _claimer[toRemove] = false;\r\n    }\r\n\r\n    function reaminingTime() external view returns(uint256){\r\n        if(block.timestamp > unlocktime){\r\n            return 0;\r\n        }\r\n        else{\r\n            return unlocktime - block.timestamp;\r\n        }\r\n    }\r\n\r\n    function unlock() external {\r\n        require(block.timestamp > unlocktime,\"1 year hasn't passed\");\r\n        _locked[_activeTokenAddress] = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAdd\",\"type\":\"address\"}],\"name\":\"addClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTeamTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentActiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toCheck\",\"type\":\"address\"}],\"name\":\"isClaimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"lockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reaminingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "teamLocker", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03a8a5b6178f8993085b84de203f906f4b04aed7e72c6e4dbf9efce589fc776c"}