{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value : value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin() {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"Account is not in the admin list\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n            string(\r\n                abi.encodePacked(\r\n                    \"AccessControl: account \",\r\n                    Strings.toHexString(uint160(account), 20),\r\n                    \" is missing role \",\r\n                    Strings.toHexString(uint256(role), 32)\r\n                )\r\n            )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function mint(uint256 id, address receiver) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function mintToken(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n/**\r\n* @dev\r\n* Interface to access the TierFactory FantomStarter\r\n**/\r\ninterface ITierFactoryFantomStarter {\r\n    /**\r\n    * @dev\r\n    * Returns the balance of the number of NFTs based on the NFTId\r\n    **/\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev\r\n    * Returns the balance of a list of addresses\r\n    **/\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n    * @dev\r\n    * Mint the NFT\r\n    **/\r\n    function mint(address _to, uint256 _id, uint256 _quantity, bytes calldata _data) external;\r\n\r\n    /**\r\n    * @dev\r\n    * Check if the NFT is mintable\r\n    **/\r\n    function isMintable(uint256 _id) external returns (bool);\r\n\r\n    /**\r\n    * @dev\r\n    * Transfer the NFT _from _to\r\n    **/\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n\r\n    /**\r\n    * @dev\r\n    * Safe transfer a batch of NFTs _from _to\r\n    **/\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n\r\n    /**\r\n    * @dev\r\n    * Get max supply for token id\r\n    **/\r\n    function maxSupply(uint256 _id) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev\r\n    * Get the Tier based on the NFT Id\r\n    **/\r\n    function getTierByNFTId(uint256 _nftId) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n    unchecked {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n        uint256 newAllowance = oldAllowance - value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* @dev Staking Tier Fantom Starter contract.\r\n* Staking NFT:\r\n* Every wallet can stake only one NFT at a time.\r\n* Staking FS Tokens:\r\n* Every wallet can stake only x tokens\r\n*\r\n* Staking only per wallet at a time, either for NFT or FS Tokens\r\n**/\r\ncontract StakerTierFantomStarter is ERC1155Holder, AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    ITierFactoryFantomStarter public tierFactory;\r\n    IERC20 public fsToken;\r\n\r\n    // The period of lockup days before you can unstake NFT or FS tokens.\r\n    uint256 public lockupDays = 7;\r\n\r\n    // Cooldown days used after staking to calculate lockup period\r\n    uint256 public coolDownDays = 0;\r\n\r\n    // When unstaking FS tokens before lockup period, we keep 10% as a penalty\r\n    uint256 public withholdUnstakingPercentage = 10;\r\n\r\n\r\n    // The dev wallet address that penalty FS tokens are sent to\r\n    address private devWallet;\r\n\r\n    // Struct for the staked NFT\r\n    struct StakedTierNFT {\r\n        bool currentlyStaked;\r\n        uint256 nftId;\r\n        uint256 tierId;\r\n        uint256 creationTimestamp;   // EPOCH timestamp\r\n        uint256 stakingLockupDays;\r\n        uint256 cancelStackingCoolDownDays;\r\n    }\r\n\r\n    // Tier for FS Tokens in staked contract within a certain range\r\n    struct TierFSTokens {\r\n        bool initialized;\r\n        uint256 tierId;\r\n        uint256 minFSTokens;\r\n        uint256 maxFSTokens;\r\n    }\r\n\r\n    // Struct for the staked FS tokens\r\n    struct StakedTierFSToken {\r\n        bool currentlyStaked;\r\n        uint256 tokenAmount;\r\n        uint256 tierId;\r\n        uint256 withholdUnstakingPercentage;\r\n        uint256 creationTimestamp;   // EPOCH timestamp\r\n        uint256 stakingLockupDays;\r\n        uint256 cancelStackingCoolDownDays;\r\n    }\r\n\r\n    // Contains the list of Tiers based on the FS Tokens min max range\r\n    TierFSTokens[] public tierFSTokensList;\r\n\r\n    // Each wallet can only stake either NFT or FS token and also only once.\r\n    mapping(address => StakedTierNFT) public walletStakedTierNFTMapping;\r\n    mapping(address => StakedTierFSToken) public walletStakedTierFSTokenMapping;\r\n\r\n    // Events\r\n    event AddToStakedTierNFT(address staker, uint256 nftId);\r\n    event AddToStakedTierFSToken(address staker, uint256 fsTokensStaked);\r\n    event RemovedFromStakedTierNFT(address staker, uint256 nftId);\r\n    event RemovedFromStakedTierFSToken(address staker, uint256 fsTokensStaked);\r\n    event UnstakedBeforeLockupPeriodFSToken(address staker, uint256 fsTokensStakedReturned, uint256 withheldFSTokens);\r\n\r\n    // Loggers for admin only\r\n    event ChangedTierFactoryAddress(address admin, ITierFactoryFantomStarter oldTierFactoryAddress, ITierFactoryFantomStarter newTierFactoryAddress);\r\n    event ChangedLockupDays(address admin, uint256 oldLockupFactoryDays, uint256 newLockupFactoryDays);\r\n    event ChangedCoolDownDays(address admin, uint256 oldCoolDownDays, uint256 newCoolDownDays);\r\n    event ChangedDevWalletAddress(address admin, address oldDevWalletAddress, address newDevWalletAddress);\r\n    event ChangedWithholdUnstakingPercentage(address admin, uint256 oldUnstakingPercentage, uint256 newUnstakingPercentage);\r\n    event UpdateOrCreateFSTierTokenRange(address admin, uint256 tierId, uint256 minFSTokens, uint256 maxFSTokens);\r\n\r\n    constructor(ITierFactoryFantomStarter _tierFactory, IERC20 _fsToken, address _devWallet) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);  // Add contract publisher to the admin users\r\n        tierFactory = _tierFactory;\r\n        fsToken = _fsToken;\r\n        devWallet = _devWallet;\r\n    }\r\n\r\n    // Needed for compiling\r\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155Receiver, AccessControl) returns (bool) {\r\n        return super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    // Getters and Setters\r\n    /**\r\n    * @dev\r\n    * Update or create a Tier FS token range\r\n    **/\r\n    function setTierFSTokenRange(uint256 _tierId, uint256 _minFSTokens, uint256 _maxFSTokens) public isAdmin {\r\n        // First check if the tier already exists and if so, update the current tier.\r\n\r\n        bool _tierExists = false;\r\n        uint256 _tierIndex = 0;\r\n\r\n        for (uint256 i = 0; i < tierFSTokensList.length; i++) {\r\n            if (tierFSTokensList[i].tierId == _tierId) {\r\n                _tierIndex = i;\r\n                _tierExists = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (_tierExists) {\r\n            // The tier already exists, update the existing Tier\r\n            tierFSTokensList[_tierIndex].minFSTokens = _minFSTokens;\r\n            tierFSTokensList[_tierIndex].maxFSTokens = _maxFSTokens;\r\n        } else {\r\n            // The tier does not exist, create a new entry\r\n            tierFSTokensList.push(TierFSTokens(true, _tierId, _minFSTokens, _maxFSTokens));\r\n        }\r\n\r\n        emit UpdateOrCreateFSTierTokenRange(msg.sender, _tierId, _minFSTokens, _maxFSTokens);\r\n    }\r\n\r\n    /**\r\n    * @dev\r\n    * Returns back the entire list of FS Tier tokens\r\n    **/\r\n    function getTierFSTokens() public view returns (TierFSTokens[] memory tierFSTokens) {\r\n        return tierFSTokensList;\r\n    }\r\n\r\n    /**\r\n    * @dev Replace the existing TierFactory address with a new one, only admins.\r\n    **/\r\n    function setTierFactoryAddress(ITierFactoryFantomStarter _tierFactory) public isAdmin {\r\n        ITierFactoryFantomStarter _oldTierFactoryAddress = tierFactory;\r\n\r\n        tierFactory = _tierFactory;\r\n\r\n        emit ChangedTierFactoryAddress(msg.sender, _oldTierFactoryAddress, _tierFactory);\r\n    }\r\n\r\n    /**\r\n    * @dev Replace the lockup_days period, only admins.\r\n    **/\r\n    function setLockupDays(uint256 _days) public isAdmin {\r\n        uint256 _oldLockupDays = lockupDays;\r\n\r\n        lockupDays = _days;\r\n\r\n        emit ChangedLockupDays(msg.sender, _oldLockupDays, _days);\r\n    }\r\n\r\n    /**\r\n    * @dev Replace the cooldowndays period, only admins.\r\n    **/\r\n    function setCoolDownDays(uint256 _days) public isAdmin {\r\n        uint256 _oldCoolDownDays = coolDownDays;\r\n\r\n        coolDownDays = _days;\r\n\r\n        emit ChangedCoolDownDays(msg.sender, _oldCoolDownDays, _days);\r\n    }\r\n\r\n    /**\r\n    * @dev Replace the dev wallet\r\n    **/\r\n    function setDevWalletAddress(address _devWallet) public isAdmin {\r\n        address _oldDevWallet = devWallet;\r\n\r\n        devWallet = _devWallet;\r\n\r\n        emit ChangedDevWalletAddress(msg.sender, _oldDevWallet, _devWallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Replace the withhold unstaking percentage\r\n    **/\r\n    function setWithholdUnstakingPercentage(uint256 _withholdUnstakingPercentage) public isAdmin {\r\n        require(_withholdUnstakingPercentage < 100, \"You cannot withhold more than 99 percent\");\r\n        require(_withholdUnstakingPercentage >= 1, \"You need to withhold at least 1 percent\");\r\n\r\n        uint256 _oldWithholdUnstakingPercentage = withholdUnstakingPercentage;\r\n\r\n        withholdUnstakingPercentage = _withholdUnstakingPercentage;\r\n\r\n        emit ChangedWithholdUnstakingPercentage(msg.sender, _oldWithholdUnstakingPercentage, _withholdUnstakingPercentage);\r\n    }\r\n\r\n    /**\r\n    * @dev\r\n    * Returns the NFT ID currently staked\r\n    **/\r\n    function getNFTIdStaked(address _wallet) public view returns (uint256 nftIdStaked) {\r\n        require(hasWalletCurrentlyStakedNFT(_wallet) == true, \"Wallet has currently no NFT staked\");\r\n        require(hasWalletCurrentlyStakedFSTokens(_wallet) == false, \"Wallet has staked FS Tokens and not NFTs\");\r\n\r\n        return walletStakedTierNFTMapping[_wallet].nftId;\r\n    }\r\n\r\n    /**\r\n    * @dev\r\n    * Returns the token amount staked\r\n    **/\r\n    function getTokensAmountStaked(address _wallet) public view returns (uint256 tokenAmountStaked) {\r\n        require(hasWalletCurrentlyStakedNFT(_wallet) == false, \"Wallet has staked NFTs and not FS tokens\");\r\n        require(hasWalletCurrentlyStakedFSTokens(_wallet) == true, \"Wallet has currently no FS Tokens staked\");\r\n\r\n        return walletStakedTierFSTokenMapping[_wallet].tokenAmount;\r\n    }\r\n\r\n    /**\r\n    * @dev\r\n    * Returns back the Tier for staked benefits, either the token staked or NFT staked\r\n    **/\r\n    function getTierBenefitForStaker(address _wallet) public view returns (uint256 tierId) {\r\n        uint256 result = 0;\r\n\r\n        if (hasWalletCurrentlyStakedNFT(_wallet)) {\r\n            // If the wallet has staked NFT, get back the Tier for that NFT and return it.\r\n            result = tierFactory.getTierByNFTId(getNFTIdStaked(_wallet));\r\n        } else if (hasWalletCurrentlyStakedFSTokens(_wallet)) {\r\n            // If the wallet has staked FS tokens, calculate the TierID for the tokens staked\r\n            uint256 _fsTokenAmountToStake = walletStakedTierFSTokenMapping[_wallet].tokenAmount;\r\n            result = getTierIdFromTokensStaked(_fsTokenAmountToStake);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev\r\n    * Returns back the Tier for the Tokens staked\r\n    **/\r\n    function getTierIdFromTokensStaked(uint256 _tokensStaked) public view returns (uint256 tierId) {\r\n        uint256 result = 0;\r\n\r\n        for (uint256 i = 0; i < tierFSTokensList.length; i++) {\r\n            if (_tokensStaked >= tierFSTokensList[i].minFSTokens && _tokensStaked <= tierFSTokensList[i].maxFSTokens) {\r\n                result = tierFSTokensList[i].tierId;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns uint256 lockupTime left for staked address for NFT Staked\r\n    **/\r\n    function getLockupTimeLeftStakedNFT(address _wallet) public view returns (uint256 lockupTimeLeft) {\r\n        require(hasWalletCurrentlyStakedNFT(_wallet) == true, \"Wallet has currently no NFT staked\");\r\n        require(hasWalletCurrentlyStakedFSTokens(_wallet) == false, \"Wallet has staked FS Tokens and not NFTs\");\r\n\r\n        StakedTierNFT memory _stakedTierNFT = walletStakedTierNFTMapping[_wallet];\r\n        uint256 result = 0;\r\n\r\n        if ((_stakedTierNFT.creationTimestamp + (_stakedTierNFT.stakingLockupDays * 1 days) - block.timestamp) > 0) {\r\n            result = _stakedTierNFT.creationTimestamp + (_stakedTierNFT.stakingLockupDays * 1 days) - block.timestamp;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns uint256 lockupTime left for staked address for Tokens Stakend\r\n    **/\r\n    function getLockupTimeLeftStakedFSTokens(address _wallet) public view returns (uint256 lockupTimeLeft) {\r\n        require(hasWalletCurrentlyStakedNFT(_wallet) == false, \"Wallet has staked NFTs and not FS tokens\");\r\n        require(hasWalletCurrentlyStakedFSTokens(_wallet) == true, \"Wallet has currently no FS Tokens staked\");\r\n\r\n        StakedTierFSToken memory _stakedTierFSToken = walletStakedTierFSTokenMapping[_wallet];\r\n        uint256 result = 0;\r\n\r\n        if ((_stakedTierFSToken.creationTimestamp + (_stakedTierFSToken.stakingLockupDays * 1 days) - block.timestamp) > 0) {\r\n            result = _stakedTierFSToken.creationTimestamp + (_stakedTierFSToken.stakingLockupDays * 1 days) - block.timestamp;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Checks\r\n    /**\r\n    * @dev Check if account has any Completed staked NFTs for Tier\r\n    **/\r\n    function hasWalletCompletedStakingNFT(address _wallet) public view returns (bool hasCompletedStakingNFT) {\r\n        bool result = true;\r\n\r\n        // 1. get the staked NFT object\r\n        StakedTierNFT memory _stakedTierNFT = walletStakedTierNFTMapping[_wallet];\r\n\r\n        // 2. Check if the lockup period is still counting\r\n        // If the creationTimestamp with added lockupDays is equal or bigger than now, then the auction has expired\r\n        if (_stakedTierNFT.creationTimestamp + _stakedTierNFT.stakingLockupDays * 1 days >= block.timestamp) {\r\n            result = false;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if account has any Completed staked FS Tokens for Tier\r\n    **/\r\n    function hasWalletCompletedStakingFSTokens(address _wallet) public view returns (bool hasCompletedStakingFSTokens) {\r\n        bool result = true;\r\n\r\n        // 1. get the staked NFT object\r\n        StakedTierFSToken memory _stakedTierFSToken = walletStakedTierFSTokenMapping[_wallet];\r\n\r\n        // 2. Check if the lockup period is still counting\r\n        // If the creationTimestamp with added lockupDays is equal or bigger than now, then the auction has expired\r\n        if (_stakedTierFSToken.creationTimestamp + _stakedTierFSToken.stakingLockupDays * 1 days >= block.timestamp) {\r\n            result = false;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if address has already staked for another NFT Tier\r\n    **/\r\n    function hasWalletCurrentlyStakedNFT(address _wallet) public view returns (bool hasStakedNFT) {\r\n        bool result = false;\r\n\r\n        if (walletStakedTierNFTMapping[_wallet].currentlyStaked == true) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if address has already staked for Tokens\r\n    **/\r\n    function hasWalletCurrentlyStakedFSTokens(address _wallet) public view returns (bool hasStakedFSTokens) {\r\n        bool result = false;\r\n\r\n        if (walletStakedTierFSTokenMapping[_wallet].currentlyStaked == true) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if address can cancel staked NFT\r\n    **/\r\n    function hasCancelCoolDownDaysExpiredForStakedNFT(address _wallet) public view returns (bool expired) {\r\n        require(hasWalletCurrentlyStakedNFT(_wallet) == true, \"You have currently no NFT staked\");\r\n        require(hasWalletCompletedStakingNFT(_wallet) == true, \"Lockup period still pending\");\r\n\r\n        bool result = true;\r\n\r\n        // 1. get the staked NFT object\r\n        StakedTierNFT memory _stakedTierNFT = walletStakedTierNFTMapping[_wallet];\r\n\r\n        // 2. Check if the cool down period has expired\r\n        // If the creationTimestamp with added lockupDays is equal or bigger than now, then the auction has expired\r\n        if (_stakedTierNFT.creationTimestamp + (_stakedTierNFT.stakingLockupDays * 1 days) + (_stakedTierNFT.cancelStackingCoolDownDays * 1 days) >= block.timestamp) {\r\n            result = false;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // BusinessLogic\r\n    /**\r\n     * @dev Transfers the NFT of the msg.sender to this contract to be staked\r\n     * You can only stake once per wallet\r\n     */\r\n    function stakeTierNFT(uint256 _nftId) public {\r\n        require(tierFactory.balanceOf(msg.sender, _nftId) > 0, \"You do not own this NFT\");\r\n        require(hasWalletCurrentlyStakedNFT(msg.sender) == false, \"You have already staked NFTs\");\r\n        require(hasWalletCurrentlyStakedFSTokens(msg.sender) == false, \"You have already staked FSTokens\");\r\n\r\n        // SafeTransfer the NFT from the msg.sender to the contract\r\n        tierFactory.safeTransferFrom(msg.sender, address(this), _nftId, 1, \"\");\r\n\r\n        // Create a new staking NFT object and add them to the mapping\r\n        uint256 _tierId = tierFactory.getTierByNFTId(_nftId);\r\n        walletStakedTierNFTMapping[msg.sender] = StakedTierNFT(true, _nftId, _tierId, block.timestamp, lockupDays, coolDownDays);\r\n\r\n        // Emit event\r\n        emit AddToStakedTierNFT(msg.sender, _nftId);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the FSTokens of the msg.sender to this contract to be staked.\r\n    * Wallet can only stake once per wallet\r\n    **/\r\n    function stakeTierFSTokens(uint256 _fsTokenAmountToStake) public {\r\n        require(fsToken.balanceOf(msg.sender) >= _fsTokenAmountToStake, \"You do not own enough tokens to stake\");\r\n        require(hasWalletCurrentlyStakedNFT(msg.sender) == false, \"You have already staked NFTs\");\r\n        require(hasWalletCurrentlyStakedFSTokens(msg.sender) == false, \"You have already staked FSTokens\");\r\n\r\n        // SafeTransfer the tokens from msg.sender to this contract\r\n        fsToken.safeTransferFrom(msg.sender, address(this), _fsTokenAmountToStake);\r\n\r\n        // Get the Tier Id from the amount of _fsTokenAmountToStake\r\n        uint256 _tierId = getTierIdFromTokensStaked(_fsTokenAmountToStake);\r\n\r\n        // Create a new staking FSToken object and add them to the mapping\r\n        walletStakedTierFSTokenMapping[msg.sender] = StakedTierFSToken(true, _fsTokenAmountToStake, _tierId, withholdUnstakingPercentage, block.timestamp, lockupDays, coolDownDays);\r\n\r\n        // Emit event\r\n        emit AddToStakedTierFSToken(msg.sender, _fsTokenAmountToStake);\r\n    }\r\n\r\n    /**\r\n    * @dev Add more tokens to Staked FS Tokens\r\n    **/\r\n    function updateCurrentStakedFSTokens(uint256 _fsTokenAmountToStake) public {\r\n        require(fsToken.balanceOf(msg.sender) >= _fsTokenAmountToStake, \"You do not own enough tokens to stake\");\r\n        require(hasWalletCurrentlyStakedNFT(msg.sender) == false, \"You have already staked NFTs\");\r\n        require(hasWalletCurrentlyStakedFSTokens(msg.sender) == true, \"You do not have staked FSTokens\");\r\n\r\n        // SafeTransfer the tokens from msg.sender to this contract\r\n        fsToken.safeTransferFrom(msg.sender, address(this), _fsTokenAmountToStake);\r\n\r\n        // Create a new staking FSToken object and add them to the mapping\r\n        walletStakedTierFSTokenMapping[msg.sender].tokenAmount = walletStakedTierFSTokenMapping[msg.sender].tokenAmount + _fsTokenAmountToStake;\r\n\r\n        // Update the Tier id\r\n        uint256 _tierId = getTierIdFromTokensStaked(walletStakedTierFSTokenMapping[msg.sender].tokenAmount);\r\n        walletStakedTierFSTokenMapping[msg.sender].tierId = _tierId;\r\n\r\n        // Reset the lockup period in days\r\n        walletStakedTierFSTokenMapping[msg.sender].creationTimestamp = block.timestamp;\r\n\r\n\r\n        // Emit event\r\n        emit AddToStakedTierFSToken(msg.sender, _fsTokenAmountToStake);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancels the staked NFT and returns it to the owner\r\n     */\r\n    function unstakeTierNFT() public {\r\n        require(hasWalletCurrentlyStakedNFT(msg.sender) == true, \"You have currently no NFT staked\");\r\n        require(hasWalletCompletedStakingNFT(msg.sender) == true, \"Lockup period still pending\");\r\n        require(hasCancelCoolDownDaysExpiredForStakedNFT(msg.sender) == true, \"You need to wait for the cool down period to expire\");\r\n\r\n        // 1. get the staked NFT object\r\n        StakedTierNFT memory _stakedTierNFT = walletStakedTierNFTMapping[msg.sender];\r\n\r\n        // 2. Since the staking lockup period has expired, transfer the NFT back to the owner\r\n        // SafeTransfer the NFT from the msg.sender to the contract\r\n        tierFactory.safeTransferFrom(address(this), msg.sender, _stakedTierNFT.nftId, 1, \"\");\r\n\r\n        // 3. Remove the StakedTierNFT Object from the mapping\r\n        delete walletStakedTierNFTMapping[msg.sender];\r\n\r\n        // Emit event\r\n        emit RemovedFromStakedTierNFT(msg.sender, _stakedTierNFT.nftId);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake FS Tokens after lockup period\r\n     */\r\n    function unstakeTierFSTokensAfterLockupPeriod() public {\r\n        require(hasWalletCurrentlyStakedFSTokens(msg.sender) == true, \"You have no FSTokens staked\");\r\n        require(hasWalletCompletedStakingFSTokens(msg.sender) == true, \"Lockup period still pending\");\r\n\r\n        // 1. get the staked NFT object\r\n        StakedTierFSToken memory _stakedTierFSToken = walletStakedTierFSTokenMapping[msg.sender];\r\n\r\n        // 2. Since the staking lockup period has expired, transfer the FS Tokens back to the owner\r\n        // SafeTransfer the FSTokens from the contract to the msg.sender\r\n        fsToken.safeTransfer(msg.sender, _stakedTierFSToken.tokenAmount);\r\n\r\n        // 3. Remove the StakedTierFSToken Object from the mapping\r\n        delete walletStakedTierFSTokenMapping[msg.sender];\r\n\r\n        // Emit event\r\n        emit RemovedFromStakedTierFSToken(msg.sender, _stakedTierFSToken.tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Unstake FS Token while lockup period still pending\r\n    **/\r\n    function unstakeTierFSTokensBeforeLockupPeriod() public {\r\n        require(hasWalletCurrentlyStakedFSTokens(msg.sender) == true, \"You have no FSTokens staked\");\r\n        require(hasWalletCompletedStakingFSTokens(msg.sender) == false, \"Lockup period has expired\");\r\n\r\n        // 1. get the staked NFT object\r\n        StakedTierFSToken memory _stakedTierFSToken = walletStakedTierFSTokenMapping[msg.sender];\r\n\r\n        uint256 _fsTokensToReturnToStaker = 0;\r\n        uint256 _fsTokensPenaltyToDevWallet = 0;\r\n\r\n        // 2. Set the tokens that need to be returned\r\n        _fsTokensPenaltyToDevWallet = _stakedTierFSToken.tokenAmount * _stakedTierFSToken.withholdUnstakingPercentage / 100;\r\n        _fsTokensToReturnToStaker = _stakedTierFSToken.tokenAmount - _fsTokensPenaltyToDevWallet;\r\n\r\n        // 3. Safe transfer the tokens to the dev wallet and the staker\r\n        fsToken.safeTransfer(msg.sender, _fsTokensToReturnToStaker);\r\n        fsToken.safeTransfer(devWallet, _fsTokensPenaltyToDevWallet);\r\n\r\n        // 4. Remove the StakedTierFSToken Object from the mapping\r\n        delete walletStakedTierFSTokenMapping[msg.sender];\r\n\r\n        // Emit event\r\n        emit UnstakedBeforeLockupPeriodFSToken(msg.sender, _fsTokensToReturnToStaker, _fsTokensPenaltyToDevWallet);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ITierFactoryFantomStarter\",\"name\":\"_tierFactory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_fsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fsTokensStaked\",\"type\":\"uint256\"}],\"name\":\"AddToStakedTierFSToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"AddToStakedTierNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCoolDownDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCoolDownDays\",\"type\":\"uint256\"}],\"name\":\"ChangedCoolDownDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDevWalletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangedDevWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLockupFactoryDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockupFactoryDays\",\"type\":\"uint256\"}],\"name\":\"ChangedLockupDays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ITierFactoryFantomStarter\",\"name\":\"oldTierFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ITierFactoryFantomStarter\",\"name\":\"newTierFactoryAddress\",\"type\":\"address\"}],\"name\":\"ChangedTierFactoryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnstakingPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnstakingPercentage\",\"type\":\"uint256\"}],\"name\":\"ChangedWithholdUnstakingPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fsTokensStaked\",\"type\":\"uint256\"}],\"name\":\"RemovedFromStakedTierFSToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"RemovedFromStakedTierNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fsTokensStakedReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withheldFSTokens\",\"type\":\"uint256\"}],\"name\":\"UnstakedBeforeLockupPeriodFSToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFSTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFSTokens\",\"type\":\"uint256\"}],\"name\":\"UpdateOrCreateFSTierTokenRange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getLockupTimeLeftStakedFSTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupTimeLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getLockupTimeLeftStakedNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupTimeLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNFTIdStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftIdStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTierBenefitForStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTierFSTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFSTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFSTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct StakerTierFantomStarter.TierFSTokens[]\",\"name\":\"tierFSTokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensStaked\",\"type\":\"uint256\"}],\"name\":\"getTierIdFromTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTokensAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"hasCancelCoolDownDaysExpiredForStakedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"hasWalletCompletedStakingFSTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasCompletedStakingFSTokens\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"hasWalletCompletedStakingNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasCompletedStakingNFT\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"hasWalletCurrentlyStakedFSTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStakedFSTokens\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"hasWalletCurrentlyStakedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStakedNFT\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setCoolDownDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setLockupDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minFSTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFSTokens\",\"type\":\"uint256\"}],\"name\":\"setTierFSTokenRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITierFactoryFantomStarter\",\"name\":\"_tierFactory\",\"type\":\"address\"}],\"name\":\"setTierFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withholdUnstakingPercentage\",\"type\":\"uint256\"}],\"name\":\"setWithholdUnstakingPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fsTokenAmountToStake\",\"type\":\"uint256\"}],\"name\":\"stakeTierFSTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"stakeTierNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierFSTokensList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFSTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFSTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierFactory\",\"outputs\":[{\"internalType\":\"contract ITierFactoryFantomStarter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTierFSTokensAfterLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTierFSTokensBeforeLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTierNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fsTokenAmountToStake\",\"type\":\"uint256\"}],\"name\":\"updateCurrentStakedFSTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletStakedTierFSTokenMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"currentlyStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdUnstakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingLockupDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelStackingCoolDownDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletStakedTierNFTMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"currentlyStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingLockupDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelStackingCoolDownDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withholdUnstakingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakerTierFantomStarter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc0d0650412ef353d672c0bbd12efff90591b2510000000000000000000000001935c03bb7dbc3623bd992ce599bc26bd30a43eb0000000000000000000000006e2a0a942eaa01b7eb2639b8b65d1d2768a87bac", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ddf08a383c41cc0a03a82cee6378fa6b0cd5ab97a03d0de6438b5b446289589"}