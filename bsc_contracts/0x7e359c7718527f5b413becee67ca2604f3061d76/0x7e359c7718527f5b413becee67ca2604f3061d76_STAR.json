{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/libs/IBEP20.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract IBEP20 {\r\n  mapping(address => uint256) internal _balances;\r\n  mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n  uint256 public _totalSupply;\r\n  uint8 public _decimals;\r\n  string public _symbol;\r\n  string public _name;\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view virtual returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view virtual returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() external view virtual returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(\r\n    address recipient,\r\n    uint256 amount\r\n  ) external virtual returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address spender\r\n  ) external view virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) external virtual returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external virtual returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/Context.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/SafeMath.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/Ownable.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  using SafeMath for uint256;\r\n\r\n  address internal _owner;\r\n  uint256 internal _signatureLimit = 2;\r\n  mapping(bytes32 => uint256) internal _signatureCount;\r\n  mapping(address => bool) internal _admins;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(_admins[_msgSender()], \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier multSignature(uint256 amount, address receipt) {\r\n    require(_admins[_msgSender()], \"Ownable: caller is not the admin\");\r\n    bytes32 txHash = encodeTransactionData(amount, receipt);\r\n    if (_signatureCount[txHash].add(1) >= _signatureLimit) {\r\n      _;\r\n      _signatureCount[txHash] = 0;\r\n    } else {\r\n      _signatureCount[txHash]++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function setSignatureLimit(uint256 signature) public onlyOwner {\r\n    _signatureLimit = signature;\r\n  }\r\n\r\n  function isAdmin(address uid) public view returns (bool) {\r\n    return _admins[uid];\r\n  }\r\n\r\n  function setAdmin(address admin) public onlyOwner {\r\n    _admins[admin] = true;\r\n  }\r\n\r\n  function removeAdmin(address admin) public onlyOwner {\r\n    _admins[admin] = false;\r\n  }\r\n\r\n  function encodeTransactionData(\r\n    uint256 amount,\r\n    address receipt\r\n  ) private pure returns (bytes32) {\r\n    return keccak256(abi.encode(amount, receipt));\r\n  }\r\n}\r\n\r\n// File: contracts/libs/SmartVault.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract SmartVault {\r\n  mapping(address => bool) private _owner;\r\n\r\n  constructor(address creator) {\r\n    _owner[msg.sender] = true;\r\n    _owner[creator] = true;\r\n  }\r\n\r\n  function transfer(address token, address to, uint256 amount) public {\r\n    require(_owner[msg.sender], \"permission denied\");\r\n    IBEP20(token).transfer(to, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Pair {\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n  function sync() external;\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    address pair,\r\n    uint256\r\n  );\r\n\r\n  function getPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) external view returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) external returns (address pair);\r\n\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/libs/IUniswapV2Router.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Router {\r\n  function factory() external pure returns (address);\r\n\r\n  function getAmountsOut(\r\n    uint256 amountIn,\r\n    address[] calldata path\r\n  ) external view returns (uint256[] memory amounts);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/STAR.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract STAR is IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct User {\r\n    address uid;\r\n    address pid;\r\n  }\r\n  mapping(address => bool) internal _robots;\r\n  mapping(address => bool) internal _v2Pairs;\r\n  mapping(address => bool) internal _excluded;\r\n  mapping(address => bool) internal _liquidity;\r\n  mapping(address => uint256) internal _liquidityTime;\r\n  address[] internal _liquidityUser;\r\n\r\n  IUniswapV2Router internal _v2Router;\r\n  SmartVault internal _smartVault;\r\n\r\n  IBEP20 internal _USDT;\r\n\r\n  address internal _v2Pair;\r\n  address internal _feeMarket = 0xD6990C122225cD21c851F3EC93Ba8AB0153D995c;\r\n\r\n  uint256 internal constant MAX = type(uint256).max;\r\n  uint256 internal constant RBASE = 10000;\r\n  uint256 internal _feeDividendPool;\r\n  uint256 internal _feeMarketPool;\r\n  uint256 internal _tokenSellMin = 50e18;\r\n\r\n  uint256 internal _dividendIndex = 0;\r\n  uint256 internal _diviendTimeLimit = 1440 minutes;\r\n  uint256 internal _dividendMax = 15;\r\n  uint256 internal _dividendRate = 300;\r\n  uint256 internal _swapTime;\r\n\r\n  constructor(address router, address usdt, address receipt) {\r\n    _v2Router = IUniswapV2Router(router);\r\n\r\n    _v2Pair = IUniswapV2Factory(_v2Router.factory()).createPair(\r\n      usdt,\r\n      address(this)\r\n    );\r\n\r\n    _USDT = IBEP20(usdt);\r\n\r\n    require(address(usdt) < address(this), \"invalid token address\");\r\n\r\n    _v2Pairs[_v2Pair] = true;\r\n\r\n    _smartVault = new SmartVault(msg.sender);\r\n\r\n    _name = \"STAR Token\";\r\n    _symbol = \"STAR\";\r\n    _decimals = 18;\r\n    _totalSupply = 660000 * 10 ** uint256(_decimals);\r\n\r\n    _balances[address(this)] = _totalSupply;\r\n    emit Transfer(address(0), address(this), _totalSupply);\r\n\r\n    _transfer(address(this), receipt, 99000e18);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() public view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() public view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token name.\r\n   */\r\n  function name() public view override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _uid) public view override returns (uint256) {\r\n    return _balances[_uid];\r\n  }\r\n\r\n  function worthTokenForUsdt(\r\n    address token,\r\n    uint256 amount\r\n  ) public view returns (uint256 price) {\r\n    if (block.chainid == 1337) return amount;\r\n    amount = amount == 0 ? 1e18 : amount;\r\n    address[] memory _path = new address[](2);\r\n    _path[0] = address(token);\r\n    _path[1] = address(_USDT);\r\n    uint256[] memory _amounts = _v2Router.getAmountsOut(amount, _path);\r\n    return _amounts[1];\r\n  }\r\n\r\n  function transfer(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external onlyOwner returns (bool) {\r\n    return IBEP20(token).transfer(to, amount);\r\n  }\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    address from = _msgSender();\r\n    return _transfer(from, to, amount);\r\n  }\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(from, to, amount);\r\n    if (_allowances[from][msg.sender] != MAX) {\r\n      _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public returns (bool) {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public returns (bool) {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _isLiquidity(\r\n    address from,\r\n    address to\r\n  ) private view returns (bool isAdd, bool isDel) {\r\n    address v2Pair;\r\n    if (_v2Pairs[from]) {\r\n      v2Pair = from;\r\n    } else if (_v2Pairs[to]) {\r\n      v2Pair = to;\r\n    } else {\r\n      return (false, false);\r\n    }\r\n    address token0 = IUniswapV2Pair(address(v2Pair)).token0();\r\n\r\n    (uint256 r0, , ) = IUniswapV2Pair(address(v2Pair)).getReserves();\r\n    uint256 bal0 = IBEP20(token0).balanceOf(address(v2Pair));\r\n\r\n    if (token0 != address(this)) {\r\n      if (_v2Pairs[to] && bal0 > r0) isAdd = true;\r\n      if (_v2Pairs[from] && bal0 < r0) isDel = true;\r\n    }\r\n  }\r\n\r\n  function _takeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    _balances[to] = _balances[to].add(amount);\r\n    emit Transfer(from, to, amount);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    require(!_robots[from], \"is robot\");\r\n    require(from != address(0), \"BEP20: transfer from the zero address\");\r\n    require(to != address(0), \"BEP20: transfer to the zero address\");\r\n    require(amount > 0, \"BEP20: transfer amount must be greater than zero\");\r\n\r\n    if (from != address(this)) {\r\n      dividend();\r\n    }\r\n\r\n    (bool isAdd, bool isDel) = _isLiquidity(from, to);\r\n\r\n    if (amount == _balances[from]) {\r\n      amount = amount.sub(0.0001e18);\r\n    }\r\n\r\n    _balances[from] = _balances[from].sub(amount);\r\n\r\n    bool isSwap;\r\n    bool isSell;\r\n    uint256 rateMarket;\r\n    uint256 rateDividend;\r\n\r\n    if (_v2Pairs[from]) {\r\n      if (isDel) {\r\n        rateMarket = 300;\r\n      } else {\r\n        if (!_excluded[to]) {\r\n          if (_swapTime == 0 || _swapTime > block.timestamp) {\r\n            revert(\"swap is not open\");\r\n          }\r\n        }\r\n        isSwap = true;\r\n        rateMarket = 100;\r\n        rateDividend = 100;\r\n      }\r\n    } else if (_v2Pairs[to] && !isAdd && from != address(this)) {\r\n      isSell = true;\r\n      isSwap = true;\r\n      rateMarket = 400;\r\n      rateDividend = 400;\r\n    }\r\n\r\n    uint256 fee1;\r\n    uint256 fee2;\r\n    if (rateMarket > 0) {\r\n      fee1 = amount.mul(rateMarket).div(RBASE);\r\n      _takeTransfer(from, address(this), fee1);\r\n      _feeMarketPool += fee1;\r\n    }\r\n    if (rateDividend > 0) {\r\n      fee2 = amount.mul(rateDividend).div(RBASE);\r\n      _takeTransfer(from, address(this), fee2);\r\n      _feeDividendPool += fee2;\r\n    }\r\n\r\n    if (fee1 > 0) amount -= fee1;\r\n    if (fee2 > 0) amount -= fee2;\r\n\r\n    if (isSell && from != address(this)) {\r\n      if (worthTokenForUsdt(address(this), _feeMarketPool) >= _tokenSellMin) {\r\n        _tokenSell(\r\n          address(this),\r\n          address(_USDT),\r\n          address(_feeMarket),\r\n          _feeMarketPool\r\n        );\r\n        _feeMarketPool = 0;\r\n      }\r\n\r\n      if (worthTokenForUsdt(address(this), _feeDividendPool) >= _tokenSellMin) {\r\n        _tokenSell(\r\n          address(this),\r\n          address(_USDT),\r\n          address(_smartVault),\r\n          _feeDividendPool\r\n        );\r\n        _feeDividendPool = 0;\r\n      }\r\n    }\r\n\r\n    _takeTransfer(from, to, amount);\r\n\r\n    if (isAdd) {\r\n      _addLiquidityUser(from);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function _addLiquidityUser(address uid) private {\r\n    if (uid == address(0)) return;\r\n    if (!_liquidity[uid]) {\r\n      _liquidityTime[uid] = block.timestamp;\r\n      _liquidityUser.push(uid);\r\n      _liquidity[uid] = true;\r\n    }\r\n  }\r\n\r\n  function _tokenSell(\r\n    address token1,\r\n    address token2,\r\n    address to,\r\n    uint256 swapAmount\r\n  ) internal {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(token1);\r\n    path[1] = address(token2);\r\n    IBEP20(token1).approve(address(_v2Router), swapAmount);\r\n    _v2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n      swapAmount,\r\n      0,\r\n      path,\r\n      to,\r\n      block.timestamp.add(60)\r\n    );\r\n  }\r\n\r\n  function dividend() public {\r\n    if (_USDT.balanceOf(address(_smartVault)) == 0) return;\r\n    if (_liquidityUser.length == 0) return;\r\n\r\n    uint256 _dividenTotal = _USDT\r\n      .balanceOf(address(_smartVault))\r\n      .mul(_dividendRate)\r\n      .div(RBASE);\r\n\r\n    uint256 _amountTotal;\r\n    uint256 _amount;\r\n\r\n    address uid;\r\n    uint256 num = _dividendMax;\r\n    address[] memory _dUsers = new address[](num);\r\n    uint256[] memory _dAmount = new uint256[](num);\r\n\r\n    uint256 i = _dividendIndex;\r\n    uint256 j = 0;\r\n    while (j < num && _liquidityUser.length > 0) {\r\n      uid = _liquidityUser[i];\r\n      if (uid == address(0)) {\r\n        i = 0;\r\n        break;\r\n      }\r\n      if (\r\n        _liquidityTime[uid].add(_diviendTimeLimit) <= block.timestamp &&\r\n        _balances[uid] >= 1e18\r\n      ) {\r\n        _amount = IBEP20(_v2Pair).balanceOf(uid);\r\n        if (_amount > 0) {\r\n          _dAmount[j] += _amount;\r\n          _dUsers[j] = uid;\r\n        }\r\n        _amountTotal += _dAmount[j];\r\n        j++;\r\n      }\r\n      i++;\r\n      if (_liquidityUser.length == i) {\r\n        i = 0;\r\n        if (_liquidityUser.length <= num) {\r\n          break;\r\n        } else if (_dUsers.length == 0) {\r\n          break;\r\n        }\r\n      }\r\n      if (_liquidityUser[i] == _dUsers[0]) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (_dUsers.length == 0) return;\r\n    _dividendIndex = i;\r\n    for (uint256 ind = 0; ind < _dUsers.length; ind++) {\r\n      uid = _dUsers[ind];\r\n      if (uid == address(0)) break;\r\n      _amount = _dAmount[ind];\r\n      uint256 _bonusAmount = _dividenTotal.mul(_amount).div(_amountTotal);\r\n      _smartVault.transfer(address(_USDT), uid, _bonusAmount);\r\n    }\r\n  }\r\n\r\n  function mint(address uid, uint256 amount) external onlyOwner {\r\n    require(uid != address(0), \"is zero address\");\r\n    require(amount > 0, \"invalid parameter: amount\");\r\n    amount = amount < balanceOf(address(this))\r\n      ? amount\r\n      : balanceOf(address(this));\r\n    _transfer(address(this), uid, amount);\r\n  }\r\n\r\n  function isRobot(address _uid) external view returns (bool) {\r\n    return _robots[_uid];\r\n  }\r\n\r\n  function getV2Pair(address _pair) external view returns (bool) {\r\n    return _v2Pairs[_pair];\r\n  }\r\n\r\n  function getSmartVault() external view returns (address) {\r\n    return address(_smartVault);\r\n  }\r\n\r\n  function setSwapTime(uint256 time) external onlyOwner {\r\n    _swapTime = time;\r\n  }\r\n\r\n  function setDiviendTimeLimit(uint256 minute) external onlyOwner {\r\n    _diviendTimeLimit = minute * 1 minutes;\r\n  }\r\n\r\n  function setDividendRate(uint256 rate) external onlyOwner {\r\n    require(rate > 0, \"invalid parameter: rate\");\r\n    _dividendRate = rate;\r\n  }\r\n\r\n  function setV2Pair(address _pair) external onlyOwner {\r\n    require(_pair != address(0), \"is zero address\");\r\n    _v2Pairs[_pair] = true;\r\n  }\r\n\r\n  function unsetV2Pair(address _pair) external onlyOwner {\r\n    require(_pair != address(0), \"is zero address\");\r\n    delete _v2Pairs[_pair];\r\n  }\r\n\r\n  function setExcluded(address uid) external onlyOwner {\r\n    _excluded[uid] = true;\r\n  }\r\n\r\n  function unsetExcluded(address uid) external onlyOwner {\r\n    _excluded[uid] = false;\r\n  }\r\n\r\n  function setTokenSellMin(uint256 min) external onlyOwner {\r\n    require(min >= 0 && min <= 100e18, \"invalid parameter: min\");\r\n    _tokenSellMin = min;\r\n  }\r\n\r\n  function setRobot(address _uid) external onlyOwner {\r\n    require(!_robots[_uid]);\r\n    _robots[_uid] = true;\r\n  }\r\n\r\n  function unsetRobot(address _uid) external onlyOwner {\r\n    require(_robots[_uid]);\r\n    _robots[_uid] = false;\r\n  }\r\n\r\n  function setMaxDividend(uint256 max) external onlyOwner {\r\n    require(_dividendMax > 0, \"invalid parameter\");\r\n    require(_dividendMax != max);\r\n    _dividendMax = max;\r\n  }\r\n\r\n  function checkLiquidity() public view returns (bool usdt) {\r\n    usdt = address(_USDT) < address(this);\r\n  }\r\n\r\n  function getFeePool()\r\n    public\r\n    view\r\n    returns (uint256 fee_market, uint256 fee_dividend)\r\n  {\r\n    return (_feeMarketPool, _feeDividendPool);\r\n  }\r\n\r\n  function dividendView()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 jj,\r\n      uint256 index,\r\n      uint256 userTotal,\r\n      uint256 amountTotal,\r\n      uint256 dividendTotal,\r\n      address[] memory users,\r\n      uint256[] memory amounts\r\n    )\r\n  {\r\n    uint256 _dividenTotal = _USDT\r\n      .balanceOf(address(_smartVault))\r\n      .mul(_dividendRate)\r\n      .div(RBASE);\r\n\r\n    dividendTotal = _dividenTotal;\r\n\r\n    userTotal = _liquidityUser.length;\r\n\r\n    uint256 _amountTotal;\r\n    uint256 _amount;\r\n    uint256 i = _dividendIndex;\r\n    uint256 j = 0;\r\n\r\n    uint256 num = _dividendMax;\r\n    address[] memory _dUsers = new address[](num);\r\n    uint256[] memory _dAmount = new uint256[](num);\r\n    address uid;\r\n\r\n    while (j < num && _liquidityUser.length > 0) {\r\n      uid = _liquidityUser[i];\r\n\r\n      if (uid == address(0)) {\r\n        i = 0;\r\n        break;\r\n      }\r\n      if (\r\n        _liquidityTime[uid].add(_diviendTimeLimit) <= block.timestamp &&\r\n        _balances[uid] >= 1e18\r\n      ) {\r\n        _amount = IBEP20(_v2Pair).balanceOf(uid);\r\n        if (_amount > 0) {\r\n          _dAmount[j] += _amount;\r\n          _dUsers[j] = uid;\r\n        }\r\n        _amountTotal += _dAmount[j];\r\n        j++;\r\n      }\r\n\r\n      i++;\r\n      if (_liquidityUser.length == i) {\r\n        i = 0;\r\n        if (_liquidityUser.length <= num) {\r\n          break;\r\n        } else if (_dUsers.length == 0) {\r\n          break;\r\n        }\r\n      }\r\n      if (_liquidityUser[i] == _dUsers[0]) {\r\n        break;\r\n      }\r\n    }\r\n    jj = j;\r\n\r\n    index = _dividendIndex;\r\n    amountTotal = _amountTotal;\r\n\r\n    amounts = _dAmount;\r\n    users = _dUsers;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"usdt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jj\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendTotal\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_market\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_dividend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"isRobot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDividendRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minute\",\"type\":\"uint256\"}],\"name\":\"setDiviendTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"setRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"}],\"name\":\"setSignatureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setSwapTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setTokenSellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uid\",\"type\":\"address\"}],\"name\":\"unsetExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"unsetRobot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"unsetV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"worthTokenForUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "STAR", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000029d1d4035441aae53083c13300fdbe562fa0f1e0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ace0d72679a4161f2c03da2f2947d2d7ef372e1d8cbb6d00ad605c05034055f"}