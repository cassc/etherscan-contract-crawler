{"SourceCode": "/**\r\nUniLend Finance FlashLoan Contract\r\n*/\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n* @title IFlashLoanReceiver interface\r\n* @notice Interface for the Unilend fee IFlashLoanReceiver.\r\n* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n**/\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\ncontract UnilendFDonation {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    uint public defaultReleaseRate;\r\n    bool public disableSetCore;\r\n    mapping(address => uint) public releaseRate;\r\n    mapping(address => uint) public lastReleased;\r\n    address public core;\r\n    \r\n    constructor() public {\r\n        core = msg.sender;\r\n        defaultReleaseRate = 11574074074075; // ~1% / day\r\n    }\r\n    \r\n    \r\n    modifier onlyCore {\r\n        require(\r\n            core == msg.sender,\r\n            \"Not Permitted\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    \r\n    event NewDonation(address indexed donator, uint amount);\r\n    event Released(address indexed to, uint amount);\r\n    event ReleaseRate(address indexed token, uint rate);\r\n    \r\n    \r\n    \r\n    function balanceOfToken(address _token) external view returns(uint) {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n    \r\n    function getReleaseRate(address _token) public view returns (uint) {\r\n        if(releaseRate[_token] > 0){\r\n            return releaseRate[_token];\r\n        } \r\n        else {\r\n            return defaultReleaseRate;\r\n        }\r\n    }\r\n    \r\n    function getCurrentRelease(address _token, uint timestamp) public view returns (uint availRelease){\r\n        uint tokenBalance = IERC20(_token).balanceOf( address(this) );\r\n        \r\n        uint remainingRate = ( timestamp.sub( lastReleased[_token] ) ).mul( getReleaseRate(_token) );\r\n        uint maxRate = 100 * 10**18;\r\n        \r\n        if(remainingRate > maxRate){ remainingRate = maxRate; }\r\n        availRelease = ( tokenBalance.mul( remainingRate )).div(10**20);\r\n    }\r\n    \r\n    \r\n    function donate(address _token, uint amount) external returns(bool) {\r\n        require(amount > 0, \"Amount can't be zero\");\r\n        releaseTokens(_token);\r\n        \r\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), amount);\r\n        \r\n        emit NewDonation(msg.sender, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function disableSetNewCore() external onlyCore {\r\n        require(!disableSetCore, \"Already disabled\");\r\n        disableSetCore = true;\r\n    }\r\n    \r\n    function setCoreAddress(address _newAddress) external onlyCore {\r\n        require(!disableSetCore, \"SetCoreAddress disabled\");\r\n        core = _newAddress;\r\n    }\r\n    \r\n    function setReleaseRate(address _token, uint _newRate) external onlyCore {\r\n        releaseTokens(_token);\r\n        \r\n        releaseRate[_token] = _newRate;\r\n        \r\n        emit ReleaseRate(_token, _newRate);\r\n    }\r\n    \r\n    function releaseTokens(address _token) public {\r\n        uint tokenBalance = IERC20(_token).balanceOf( address(this) );\r\n        \r\n        if(tokenBalance > 0){\r\n            uint remainingRate = ( block.timestamp.sub( lastReleased[_token] ) ).mul( getReleaseRate(_token) );\r\n            uint maxRate = 100 * 10**18;\r\n            \r\n            lastReleased[_token] = block.timestamp;\r\n            \r\n            if(remainingRate > maxRate){ remainingRate = maxRate; }\r\n            uint totalReleased = ( tokenBalance.mul( remainingRate )).div(10**20);\r\n            \r\n            if(totalReleased > 0){\r\n                IERC20(_token).safeTransfer(core, totalReleased);\r\n                \r\n                emit Released(core, totalReleased);\r\n            }\r\n        } \r\n        else {\r\n            lastReleased[_token] = block.timestamp;\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ncontract UFlashLoanPool is ERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    address public token;\r\n    address payable public core;\r\n    \r\n    \r\n    constructor(\r\n        address _token,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC20(_name, _symbol) public {\r\n        token = _token;\r\n        \r\n        core = payable(msg.sender);\r\n    }\r\n    \r\n    modifier onlyCore {\r\n        require(\r\n            core == msg.sender,\r\n            \"Not Permitted\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    \r\n    \r\n    function calculateShare(uint _totalShares, uint _totalAmount, uint _amount) internal pure returns (uint){\r\n        if(_totalShares == 0){\r\n            return Math.sqrt(_amount.mul( _amount ));\r\n        } else {\r\n            return (_amount).mul( _totalShares ).div( _totalAmount );\r\n        }\r\n    }\r\n    \r\n    function getShareValue(uint _totalAmount, uint _totalSupply, uint _amount) internal pure returns (uint){\r\n        return ( _amount.mul(_totalAmount) ).div( _totalSupply );\r\n    }\r\n    \r\n    function getShareByValue(uint _totalAmount, uint _totalSupply, uint _valueAmount) internal pure returns (uint){\r\n        return ( _valueAmount.mul(_totalSupply) ).div( _totalAmount );\r\n    }\r\n    \r\n    \r\n    function deposit(address _recipient, uint amount) external onlyCore returns(uint) {\r\n        uint _totalSupply = totalSupply();\r\n        \r\n        uint tokenBalance;\r\n        if(EthAddressLib.ethAddress() == token){\r\n            tokenBalance = address(core).balance;\r\n        } \r\n        else {\r\n            tokenBalance = IERC20(token).balanceOf(core);\r\n        }\r\n        \r\n        uint ntokens = calculateShare(_totalSupply, tokenBalance.sub(amount), amount);\r\n        \r\n        require(ntokens > 0, 'Insufficient Liquidity Minted');\r\n        \r\n        // MINT uTokens\r\n        _mint(_recipient, ntokens);\r\n        \r\n        return ntokens;\r\n    }\r\n    \r\n    \r\n    function redeem(address _recipient, uint tok_amount) external onlyCore returns(uint) {\r\n        require(tok_amount > 0, 'Insufficient Liquidity Burned');\r\n        require(balanceOf(_recipient) >= tok_amount, \"Balance Exceeds Requested\");\r\n        \r\n        uint tokenBalance;\r\n        if(EthAddressLib.ethAddress() == token){\r\n            tokenBalance = address(core).balance;\r\n        } \r\n        else {\r\n            tokenBalance = IERC20(token).balanceOf(core);\r\n        }\r\n        \r\n        uint poolAmount = getShareValue(tokenBalance, totalSupply(), tok_amount);\r\n        \r\n        require(tokenBalance >= poolAmount, \"Not enough Liquidity\");\r\n        \r\n        // BURN uTokens\r\n        _burn(_recipient, tok_amount);\r\n        \r\n        return poolAmount;\r\n    }\r\n    \r\n    \r\n    function redeemUnderlying(address _recipient, uint amount) external onlyCore returns(uint) {\r\n        uint tokenBalance;\r\n        if(EthAddressLib.ethAddress() == token){\r\n            tokenBalance = address(core).balance;\r\n        } \r\n        else {\r\n            tokenBalance = IERC20(token).balanceOf(core);\r\n        }\r\n        \r\n        uint tok_amount = getShareByValue(tokenBalance, totalSupply(), amount);\r\n        \r\n        require(tok_amount > 0, 'Insufficient Liquidity Burned');\r\n        require(balanceOf(_recipient) >= tok_amount, \"Balance Exceeds Requested\");\r\n        require(tokenBalance >= amount, \"Not enough Liquidity\");\r\n        \r\n        // BURN uTokens\r\n        _burn(_recipient, tok_amount);\r\n        \r\n        return tok_amount;\r\n    }\r\n    \r\n    \r\n    function balanceOfUnderlying(address _address, uint timestamp) public view returns (uint _bal) {\r\n        uint _balance = balanceOf(_address);\r\n        \r\n        if(_balance > 0){\r\n            uint tokenBalance;\r\n            if(EthAddressLib.ethAddress() == token){\r\n                tokenBalance = address(core).balance;\r\n            } \r\n            else {\r\n                tokenBalance = IERC20(token).balanceOf(core);\r\n            }\r\n            \r\n            address donationAddress = UnilendFlashLoanCore( core ).donationAddress();\r\n            uint _balanceDonation = UnilendFDonation( donationAddress ).getCurrentRelease(token, timestamp);\r\n            uint _totalPoolAmount = tokenBalance.add(_balanceDonation);\r\n            \r\n            _bal = getShareValue(_totalPoolAmount, totalSupply(), _balance);\r\n        } \r\n    }\r\n    \r\n    \r\n    function poolBalanceOfUnderlying(uint timestamp) public view returns (uint _bal) {\r\n        uint tokenBalance;\r\n        if(EthAddressLib.ethAddress() == token){\r\n            tokenBalance = address(core).balance;\r\n        } \r\n        else {\r\n            tokenBalance = IERC20(token).balanceOf(core);\r\n        }\r\n        \r\n        if(tokenBalance > 0){\r\n            address donationAddress = UnilendFlashLoanCore( core ).donationAddress();\r\n            uint _balanceDonation = UnilendFDonation( donationAddress ).getCurrentRelease(token, timestamp);\r\n            uint _totalPoolAmount = tokenBalance.add(_balanceDonation);\r\n            \r\n            _bal = _totalPoolAmount;\r\n        } \r\n    }\r\n}\r\n\r\ncontract UnilendFlashLoanCore is Context, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    \r\n    address public admin;\r\n    address payable public distributorAddress;\r\n    address public donationAddress;\r\n    \r\n    mapping(address => address) public Pools;\r\n    mapping(address => address) public Assets;\r\n    uint public poolLength;\r\n    \r\n    \r\n    uint256 private FLASHLOAN_FEE_TOTAL = 5;\r\n    uint256 private FLASHLOAN_FEE_PROTOCOL = 3000;\r\n    \r\n    \r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev emitted when a flashloan is executed\r\n    * @param _target the address of the flashLoanReceiver\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount requested\r\n    * @param _totalFee the total fee on the amount\r\n    * @param _protocolFee the part of the fee for the protocol\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event FlashLoan(\r\n        address indexed _target,\r\n        address indexed _reserve,\r\n        uint256 _amount,\r\n        uint256 _totalFee,\r\n        uint256 _protocolFee,\r\n        uint256 _timestamp\r\n    );\r\n    \r\n    event PoolCreated(address indexed token, address pool, uint);\r\n    \r\n    /**\r\n    * @dev emitted during a redeem action.\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @param _amount the amount to be deposited\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event RedeemUnderlying(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _amount,\r\n        uint256 _timestamp\r\n    );\r\n    \r\n    /**\r\n    * @dev emitted on deposit\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @param _amount the amount to be deposited\r\n    * @param _timestamp the timestamp of the action\r\n    **/\r\n    event Deposit(\r\n        address indexed _reserve,\r\n        address indexed _user,\r\n        uint256 _amount,\r\n        uint256 _timestamp\r\n    );\r\n    \r\n    /**\r\n    * @dev only lending pools configurator can use functions affected by this modifier\r\n    **/\r\n    modifier onlyAdmin {\r\n        require(\r\n            admin == msg.sender,\r\n            \"The caller must be a admin\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev functions affected by this modifier can only be invoked if the provided _amount input parameter\r\n    * is not zero.\r\n    * @param _amount the amount provided\r\n    **/\r\n    modifier onlyAmountGreaterThanZero(uint256 _amount) {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        _;\r\n    }\r\n    \r\n    receive() payable external {}\r\n    \r\n    /**\r\n    * @dev returns the fee applied to a flashloan and the portion to redirect to the protocol, in basis points.\r\n    **/\r\n    function getFlashLoanFeesInBips() public view returns (uint256, uint256) {\r\n        return (FLASHLOAN_FEE_TOTAL, FLASHLOAN_FEE_PROTOCOL);\r\n    }\r\n    \r\n    /**\r\n    * @dev gets the bulk uToken contract address for the reserves\r\n    * @param _reserves the array of reserve address\r\n    * @return the address of the uToken contract\r\n    **/\r\n    function getPools(address[] calldata _reserves) external view returns (address[] memory) {\r\n        address[] memory _addresss = new address[](_reserves.length);\r\n        address[] memory _reserves_ = _reserves;\r\n        \r\n        for (uint i=0; i<_reserves_.length; i++) {\r\n            _addresss[i] = Pools[_reserves_[i]];\r\n        }\r\n        \r\n        return _addresss;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev balance of underlying asset for user address\r\n    * @param _reserve reserve address\r\n    * @param _address user address\r\n    * @param timestamp timestamp of query\r\n    **/\r\n    function balanceOfUnderlying(address _reserve, address _address, uint timestamp) public view returns (uint _bal) {\r\n        if(Pools[_reserve] != address(0)){\r\n            _bal = UFlashLoanPool(Pools[_reserve]).balanceOfUnderlying(_address, timestamp);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev balance of underlying asset for pool\r\n    * @param _reserve reserve address\r\n    * @param timestamp timestamp of query\r\n    **/\r\n    function poolBalanceOfUnderlying(address _reserve, uint timestamp) public view returns (uint _bal) {\r\n        if(Pools[_reserve] != address(0)){\r\n            _bal = UFlashLoanPool(Pools[_reserve]).poolBalanceOfUnderlying(timestamp);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev set new admin for contract.\r\n    * @param _admin the address of new admin\r\n    **/\r\n    function setAdmin(address _admin) external onlyAdmin {\r\n        require(_admin != address(0), \"UnilendV1: ZERO ADDRESS\");\r\n        admin = _admin;\r\n    }\r\n    \r\n    /**\r\n    * @dev set new distributor address.\r\n    * @param _address new address\r\n    **/\r\n    function setDistributorAddress(address payable _address) external onlyAdmin {\r\n        require(_address != address(0), \"UnilendV1: ZERO ADDRESS\");\r\n        distributorAddress = _address;\r\n    }\r\n    \r\n    /**\r\n    * @dev disable changing donation pool donation address.\r\n    **/\r\n    function setDonationDisableNewCore() external onlyAdmin {\r\n        UnilendFDonation(donationAddress).disableSetNewCore();\r\n    }\r\n    \r\n    /**\r\n    * @dev set new core address for donation pool.\r\n    * @param _newAddress new address\r\n    **/\r\n    function setDonationCoreAddress(address _newAddress) external onlyAdmin {\r\n        require(_newAddress != address(0), \"UnilendV1: ZERO ADDRESS\");\r\n        UnilendFDonation(donationAddress).setCoreAddress(_newAddress);\r\n    }\r\n    \r\n    /**\r\n    * @dev set new release rate from donation pool for token\r\n    * @param _reserve reserve address\r\n    * @param _newRate new rate of release\r\n    **/\r\n    function setDonationReleaseRate(address _reserve, uint _newRate) external onlyAdmin {\r\n        require(_reserve != address(0), \"UnilendV1: ZERO ADDRESS\");\r\n        UnilendFDonation(donationAddress).setReleaseRate(_reserve, _newRate);\r\n    }\r\n    \r\n    /**\r\n    * @dev set new flash loan fees.\r\n    * @param _newFeeTotal total fee\r\n    * @param _newFeeProtocol protocol fee\r\n    **/\r\n    function setFlashLoanFeesInBips(uint _newFeeTotal, uint _newFeeProtocol) external onlyAdmin returns (bool) {\r\n        require(_newFeeTotal > 0 && _newFeeTotal < 10000, \"UnilendV1: INVALID TOTAL FEE RANGE\");\r\n        require(_newFeeProtocol > 0 && _newFeeProtocol < 10000, \"UnilendV1: INVALID PROTOCOL FEE RANGE\");\r\n        \r\n        FLASHLOAN_FEE_TOTAL = _newFeeTotal;\r\n        FLASHLOAN_FEE_PROTOCOL = _newFeeProtocol;\r\n        \r\n        return true;\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev transfers to the user a specific amount from the reserve.\r\n    * @param _reserve the address of the reserve where the transfer is happening\r\n    * @param _user the address of the user receiving the transfer\r\n    * @param _amount the amount being transferred\r\n    **/\r\n    function transferToUser(address _reserve, address payable _user, uint256 _amount) internal {\r\n        require(_user != address(0), \"UnilendV1: USER ZERO ADDRESS\");\r\n        \r\n        if (_reserve != EthAddressLib.ethAddress()) {\r\n            ERC20(_reserve).safeTransfer(_user, _amount);\r\n        } else {\r\n            //solium-disable-next-line\r\n            (bool result, ) = _user.call{value: _amount, gas: 50000}(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev transfers to the protocol fees of a flashloan to the fees collection address\r\n    * @param _token the address of the token being transferred\r\n    * @param _amount the amount being transferred\r\n    **/\r\n    function transferFlashLoanProtocolFeeInternal(address _token, uint256 _amount) internal {\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            ERC20(_token).safeTransfer(distributorAddress, _amount);\r\n        } else {\r\n            (bool result, ) = distributorAddress.call{value: _amount, gas: 50000}(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev allows smartcontracts to access the liquidity of the pool within one transaction,\r\n    * as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts\r\n    * that must be kept into consideration.\r\n    * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.\r\n    * @param _reserve the address of the principal reserve\r\n    * @param _amount the amount requested for this flashloan\r\n    **/\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params)\r\n        external\r\n        nonReentrant\r\n        onlyAmountGreaterThanZero(_amount)\r\n    {\r\n        //check that the reserve has enough available liquidity\r\n        uint256 availableLiquidityBefore = _reserve == EthAddressLib.ethAddress()\r\n            ? address(this).balance\r\n            : IERC20(_reserve).balanceOf(address(this));\r\n\r\n        require(\r\n            availableLiquidityBefore >= _amount,\r\n            \"There is not enough liquidity available to borrow\"\r\n        );\r\n\r\n        (uint256 totalFeeBips, uint256 protocolFeeBips) = getFlashLoanFeesInBips();\r\n        //calculate amount fee\r\n        uint256 amountFee = _amount.mul(totalFeeBips).div(10000);\r\n\r\n        //protocol fee is the part of the amountFee reserved for the protocol - the rest goes to depositors\r\n        uint256 protocolFee = amountFee.mul(protocolFeeBips).div(10000);\r\n        require(\r\n            amountFee > 0 && protocolFee > 0,\r\n            \"The requested amount is too small for a flashLoan.\"\r\n        );\r\n\r\n        //get the FlashLoanReceiver instance\r\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(_receiver);\r\n\r\n        //transfer funds to the receiver\r\n        transferToUser(_reserve, payable(_receiver), _amount);\r\n\r\n        //execute action of the receiver\r\n        receiver.executeOperation(_reserve, _amount, amountFee, _params);\r\n\r\n        //check that the actual balance of the core contract includes the returned amount\r\n        uint256 availableLiquidityAfter = _reserve == EthAddressLib.ethAddress()\r\n            ? address(this).balance\r\n            : IERC20(_reserve).balanceOf(address(this));\r\n\r\n        require(\r\n            availableLiquidityAfter == availableLiquidityBefore.add(amountFee),\r\n            \"The actual balance of the protocol is inconsistent\"\r\n        );\r\n        \r\n        transferFlashLoanProtocolFeeInternal(_reserve, protocolFee);\r\n\r\n        //solium-disable-next-line\r\n        emit FlashLoan(_receiver, _reserve, _amount, amountFee, protocolFee, block.timestamp);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n    * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (uTokens) is minted.\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount to be deposited\r\n    **/\r\n    function deposit(address _reserve, uint _amount) external \r\n        payable\r\n        nonReentrant\r\n        onlyAmountGreaterThanZero(_amount)\r\n    returns(uint mintedTokens) {\r\n        require(Pools[_reserve] != address(0), 'UnilendV1: POOL NOT FOUND');\r\n        \r\n        UnilendFDonation(donationAddress).releaseTokens(_reserve);\r\n        \r\n        address _user = msg.sender;\r\n        \r\n        if (_reserve != EthAddressLib.ethAddress()) {\r\n            require(msg.value == 0, \"User is sending ETH along with the ERC20 transfer.\");\r\n            \r\n            uint reserveBalance = IERC20(_reserve).balanceOf(address(this));\r\n            \r\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\r\n            \r\n            _amount = ( IERC20(_reserve).balanceOf(address(this)) ).sub(reserveBalance);\r\n        } else {\r\n            require(msg.value >= _amount, \"The amount and the value sent to deposit do not match\");\r\n\r\n            if (msg.value > _amount) {\r\n                //send back excess ETH\r\n                uint256 excessAmount = msg.value.sub(_amount);\r\n                \r\n                (bool result, ) = _user.call{value: excessAmount, gas: 50000}(\"\");\r\n                require(result, \"Transfer of ETH failed\");\r\n            }\r\n        }\r\n        \r\n        mintedTokens = UFlashLoanPool(Pools[_reserve]).deposit(msg.sender, _amount);\r\n        \r\n        emit Deposit(_reserve, msg.sender, _amount, block.timestamp);\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Redeems the uTokens for underlying assets.\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount uTokens to be redeemed\r\n    **/\r\n    function redeem(address _reserve, uint _amount) external returns(uint redeemTokens) {\r\n        require(Pools[_reserve] != address(0), 'UnilendV1: POOL NOT FOUND');\r\n        \r\n        UnilendFDonation(donationAddress).releaseTokens(_reserve);\r\n        \r\n        redeemTokens = UFlashLoanPool(Pools[_reserve]).redeem(msg.sender, _amount);\r\n        \r\n        //transfer funds to the user\r\n        transferToUser(_reserve, payable(msg.sender), redeemTokens);\r\n        \r\n        emit RedeemUnderlying(_reserve, msg.sender, redeemTokens, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n    * @dev Redeems the underlying amount of assets.\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the underlying amount to be redeemed\r\n    **/\r\n    function redeemUnderlying(address _reserve, uint _amount) external returns(uint token_amount) {\r\n        require(Pools[_reserve] != address(0), 'UnilendV1: POOL NOT FOUND');\r\n        \r\n        UnilendFDonation(donationAddress).releaseTokens(_reserve);\r\n        \r\n        token_amount = UFlashLoanPool(Pools[_reserve]).redeemUnderlying(msg.sender, _amount);\r\n        \r\n        //transfer funds to the user\r\n        transferToUser(_reserve, payable(msg.sender), _amount);\r\n        \r\n        emit RedeemUnderlying(_reserve, msg.sender, _amount, block.timestamp);\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n    * @dev Creates pool for asset.\r\n    * This function is executed by the overlying uToken contract in response to a redeem action.\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function createPool(address _reserve) public returns (address) {\r\n        require(Pools[_reserve] == address(0), 'UnilendV1: POOL ALREADY CREATED');\r\n        \r\n        ERC20 asset = ERC20(_reserve);\r\n        \r\n        string memory uTokenName;\r\n        string memory uTokenSymbol;\r\n        \r\n        if(_reserve == EthAddressLib.ethAddress()){\r\n            uTokenName = string(abi.encodePacked(\"UnilendV1 - ETH\"));\r\n            uTokenSymbol = string(abi.encodePacked(\"uETH\"));\r\n        } \r\n        else {\r\n            uTokenName = string(abi.encodePacked(\"UnilendV1 - \", asset.name()));\r\n            uTokenSymbol = string(abi.encodePacked(\"u\", asset.symbol()));\r\n        }\r\n        \r\n        UFlashLoanPool _poolMeta = new UFlashLoanPool(_reserve, uTokenName, uTokenSymbol);\r\n        \r\n        address _poolAddress = address(_poolMeta);\r\n        \r\n        Pools[_reserve] = _poolAddress;\r\n        Assets[_poolAddress] = _reserve;\r\n        \r\n        poolLength++;\r\n        \r\n        emit PoolCreated(_reserve, _poolAddress, poolLength);\r\n        \r\n        return _poolAddress;\r\n    }\r\n    \r\n    /**\r\n    * @dev Creates donation contract (one-time).\r\n    **/\r\n    function createDonationContract() external returns (address) {\r\n        require(donationAddress == address(0), 'UnilendV1: DONATION ADDRESS ALREADY CREATED');\r\n        \r\n        UnilendFDonation _donationMeta = new UnilendFDonation();\r\n        donationAddress = address(_donationMeta);\r\n        \r\n        return donationAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemUnderlying\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDonationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeesInBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_reserves\",\"type\":\"address[]\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"poolBalanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setDonationCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDonationDisableNewCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setDonationReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeeProtocol\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeesInBips\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UnilendFlashLoanCore", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd785013ac948712e7ba7487f8d0d0c56d6b116e15609df3b45f88174a648bf5"}