{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PirateStaking.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n// SPDX-License-Identifier: MIT\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface IERC721 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\\ncontract PirateStaking is Ownable {\\n    IERC20 public TKN;\\n\\n    uint256[5] public periods = [30 days, 60 days, 90 days, 180 days, 360 days];\\n    uint32[5] public rates = [10000, 12500, 15000, 17500, 20000];\\n    uint256 public rewardsPool;\\n    uint256 public MAX_STAKES = 100;\\n\\n    struct Stake {\\n        uint8 class;\\n        uint256 initialAmount;\\n        uint256 finalAmount;\\n        uint256 timestamp;\\n        bool unstaked;\\n    }\\n\\n    Stake[] public stakes;\\n    mapping(address => uint256[]) public stakesOf;\\n    mapping(uint256 => address) public ownerOf;\\n    mapping(uint256 => uint256) public totalValueLocked;\\n\\n    event Staked(\\n        address indexed sender,\\n        uint8 indexed class,\\n        uint256 amount,\\n        uint256 finalAmount\\n    );\\n    event Unstaked(address indexed sender, uint8 indexed class, uint256 amount);\\n    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\\n    event IncreaseRewardsPool(address indexed adder, uint256 added, uint256 newSize);\\n\\n    constructor(IERC20 _TKN) {\\n        TKN = _TKN;\\n        totalValueLocked[0] = 0;\\n        totalValueLocked[1] = 0;\\n        totalValueLocked[2] = 0;\\n        totalValueLocked[3] = 0;\\n        totalValueLocked[4] = 0;\\n    }\\n\\n    /// @dev Shows needed range stakes info\\n    /// @param _from range starts from this\\n    /// @param _to range ends on this\\n    /// @return s returns info array of stakes in selected range\\n    function stakesInfo(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (Stake[] memory s)\\n    {\\n        s = new Stake[](_to - _from);\\n        for (uint256 i = _from; i < _to; i++) s[i - _from] = stakes[i];\\n    }\\n\\n    /// @dev Shows all stakes info\\n    /// @return s returns info array of all stakes\\n    function stakesInfoAll() external view returns (Stake[] memory s) {\\n        s = new Stake[](stakes.length);\\n        for (uint256 i = 0; i < stakes.length; i++) s[i] = stakes[i];\\n    }\\n\\n    /// @dev Shows all stakes amount on this contract\\n    /// @return length of stakes array\\n    function stakesLength() external view returns (uint256) {\\n        return stakes.length;\\n    }\\n\\n    /// @dev Shows all stakes info of selected user\\n    /// @param _me selected user\\n    /// @return s stakes info of selected user\\n    /// @return indexes user can see pool ids to interract with contract\\n    function myStakes(address _me)\\n        external\\n        view\\n        returns (Stake[] memory s, uint256[] memory indexes)\\n    {\\n        s = new Stake[](stakesOf[_me].length);\\n        indexes = new uint256[](stakesOf[_me].length);\\n        for (uint256 i = 0; i < stakesOf[_me].length; i++) {\\n            indexes[i] = stakesOf[_me][i];\\n            s[i] = stakes[indexes[i]];\\n        }\\n    }\\n\\n    /// @dev Shows staking pools amount\\n    /// @param _me selected user\\n    /// @return l amount of stakes\\n    function myActiveStakesCount(address _me) public view returns (uint256 l) {\\n        uint256[] storage _s = stakesOf[_me];\\n        for (uint256 i = 0; i < _s.length; i++) if (!stakes[_s[i]].unstaked) l++;\\n    }\\n\\n    /// @dev Recieves token and sets staking info\\n    /// @param _class corresponds to staking period\\n    /// @param _amount staking amount\\n    function stake(uint8 _class, uint256 _amount) external {\\n        require(_class < 5, 'Wrong class'); // data valid\\n        require(myActiveStakesCount(msg.sender) < MAX_STAKES, 'MAX_STAKES overflow'); // has space for new active stake\\n        uint256 _finalAmount = _amount +\\n            ((_amount * rates[_class] * periods[_class]) / 1 days) /\\n            10000 /\\n            360;\\n        require(rewardsPool >= _finalAmount - _amount, 'Rewards pool is empty for now');\\n        rewardsPool -= _finalAmount - _amount;\\n        TKN.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _index = stakes.length;\\n        stakesOf[msg.sender].push(_index);\\n        stakes.push(\\n            Stake({\\n                class: _class,\\n                initialAmount: _amount,\\n                finalAmount: _finalAmount,\\n                timestamp: block.timestamp,\\n                unstaked: false\\n            })\\n        );\\n        totalValueLocked[_class] += _amount;\\n        ownerOf[_index] = msg.sender;\\n        emit Staked(msg.sender, _class, _amount, _finalAmount);\\n    }\\n\\n    /// @dev Pays rewards to user and transfers staked tokens\\n    /// @param _index index of user's staking pool\\n    function unstake(uint256 _index) public {\\n        require(msg.sender == ownerOf[_index], 'Not correct index');\\n        Stake storage _s = stakes[_index];\\n        require(!_s.unstaked, 'Already unstaked'); // not unstaked yet\\n        require(\\n            block.timestamp >= _s.timestamp + periods[_s.class],\\n            'Staking period not finished'\\n        ); // staking period finished\\n        TKN.transfer(msg.sender, _s.finalAmount);\\n        _s.unstaked = true;\\n        totalValueLocked[_s.class] -= _s.initialAmount;\\n        emit Unstaked(msg.sender, _s.class, _s.finalAmount);\\n    }\\n\\n    /// @dev Returns to owner accidentally sent to this contract not staking tokens\\n    /// @param _TKN token to be returned\\n    function returnAccidentallySent(IERC20 _TKN) public onlyOwner {\\n        require(address(_TKN) != address(TKN), 'Unable to withdraw staking token');\\n        uint256 _amount = _TKN.balanceOf(address(this));\\n        _TKN.transfer(msg.sender, _amount);\\n    }\\n\\n    /// @dev Receives staking tokens for paying reewards\\n    /// @param _amount amount of tokens to receive\\n    function increaseRewardsPool(uint256 _amount) public {\\n        TKN.transferFrom(msg.sender, address(this), _amount);\\n        rewardsPool += _amount;\\n        emit IncreaseRewardsPool(msg.sender, _amount, rewardsPool);\\n    }\\n\\n    /// @dev Changes max staking pools amount for one user\\n    /// @param _max new max pools amount\\n    function updateMax(uint256 _max) public onlyOwner {\\n        MAX_STAKES = _max;\\n    }\\n\\n    /// @dev Show staking classes amount\\n    /// @return classes amount\\n    function getClassesAmount() external view returns (uint256) {\\n        return periods.length;\\n    }\\n\\n    /// @dev Changes apy rates\\n    /// @param newRates is array of new rates\\n    function setRates(uint32[5] memory newRates) external onlyOwner {\\n        rates = newRates;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TKN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"IncreaseRewardsPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_STAKES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TKN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClassesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_me\",\"type\":\"address\"}],\"name\":\"myActiveStakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_me\",\"type\":\"address\"}],\"name\":\"myStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct PirateStaking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"returnAccidentallySent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[5]\",\"name\":\"newRates\",\"type\":\"uint32[5]\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"stakesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct PirateStaking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesInfoAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"internalType\":\"struct PirateStaking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"updateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PirateStaking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000093c27727e72ec7510a06ea450366c1418c4ce547", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}