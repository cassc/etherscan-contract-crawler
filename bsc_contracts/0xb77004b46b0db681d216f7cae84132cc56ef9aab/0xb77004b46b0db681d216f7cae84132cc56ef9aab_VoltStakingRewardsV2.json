{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/VoltStakingRewardsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\ncontract VoltStakingRewardsV2 {\\r\\n    IERC20 public immutable stakingToken;\\r\\n    IERC20 public immutable rewardsToken;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    // Duration of rewards to be paid out (in seconds)\\r\\n    uint public duration;\\r\\n    // Timestamp of when the rewards finish\\r\\n    uint public finishAt;\\r\\n    // Minimum of last updated time and reward finish time\\r\\n    uint public updatedAt;\\r\\n    // Reward to be paid out per second\\r\\n    uint public rewardRate;\\r\\n    // Sum of (reward rate * dt * 1e18 / total supply)\\r\\n    uint public rewardPerTokenStored;\\r\\n    // User address => rewardPerTokenStored\\r\\n    mapping(address => uint) public userRewardPerTokenPaid;\\r\\n    // User address => rewards to be claimed\\r\\n    mapping(address => uint) public rewards;\\r\\n\\r\\n    // Total staked\\r\\n    uint public totalSupply;\\r\\n    // User address => staked amount\\r\\n    mapping(address => uint) public balanceOf;\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n    event RewardAdded(uint256 reward);\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n    event RewardsDurationUpdated(uint256 newDuration);\\r\\n    event Recovered(address token, uint256 amount);\\r\\n\\r\\n    constructor(address _stakingToken, address _rewardToken) {\\r\\n        owner = msg.sender;\\r\\n        stakingToken = IERC20(_stakingToken);\\r\\n        rewardsToken = IERC20(_rewardToken);\\r\\n        duration = 604800; // 1 week\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateReward(address _account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        updatedAt = lastTimeRewardApplicable();\\r\\n\\r\\n        if (_account != address(0)) {\\r\\n            rewards[_account] = earned(_account);\\r\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable() public view returns (uint) {\\r\\n        return _min(finishAt, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function rewardPerToken() public view returns (uint) {\\r\\n        if (totalSupply == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            rewardPerTokenStored +\\r\\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\\r\\n            totalSupply;\\r\\n    }\\r\\n\\r\\n    function stake(uint _amount) external updateReward(msg.sender) {\\r\\n        require(_amount > 0, \\\"amount = 0\\\");\\r\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        balanceOf[msg.sender] += _amount;\\r\\n        totalSupply += _amount;\\r\\n        emit Staked(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint _amount) external updateReward(msg.sender) {\\r\\n        require(_amount > 0, \\\"amount = 0\\\");\\r\\n        balanceOf[msg.sender] -= _amount;\\r\\n        totalSupply -= _amount;\\r\\n        stakingToken.transfer(msg.sender, _amount);\\r\\n        emit Withdrawn(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function earned(address _account) public view returns (uint) {\\r\\n        return\\r\\n            ((balanceOf[_account] *\\r\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\\r\\n            rewards[_account];\\r\\n    }\\r\\n\\r\\n    function getReward() external updateReward(msg.sender) {\\r\\n        uint reward = rewards[msg.sender];\\r\\n        if (reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            rewardsToken.transfer(msg.sender, reward);\\r\\n            emit RewardPaid(msg.sender, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRewardsDuration(uint _duration) external onlyOwner {\\r\\n        require(finishAt < block.timestamp, \\\"reward duration not finished\\\");\\r\\n        duration = _duration;\\r\\n        emit RewardsDurationUpdated(_duration);\\r\\n    }\\r\\n\\r\\n    function notifyRewardAmount(\\r\\n        uint _amount\\r\\n    ) external onlyOwner updateReward(address(0)) {\\r\\n        if (block.timestamp >= finishAt) {\\r\\n            rewardRate = _amount / duration;\\r\\n        } else {\\r\\n            uint remainingRewards = (finishAt - block.timestamp) * rewardRate;\\r\\n            rewardRate = (_amount + remainingRewards) / duration;\\r\\n        }\\r\\n\\r\\n        require(rewardRate > 0, \\\"reward rate = 0\\\");\\r\\n        require(\\r\\n            rewardRate * duration <= rewardsToken.balanceOf(address(this)),\\r\\n            \\\"reward amount > balance\\\"\\r\\n        );\\r\\n\\r\\n        finishAt = block.timestamp + duration;\\r\\n        updatedAt = block.timestamp;\\r\\n        emit RewardAdded(_amount);\\r\\n    }\\r\\n\\r\\n    function _min(uint x, uint y) private pure returns (uint) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\r\\n        require(tokenAddress != address(stakingToken), \\\"Cannot withdraw the staking token\\\");\\r\\n        IERC20(tokenAddress).transfer(owner, tokenAmount);\\r\\n        emit Recovered(tokenAddress, tokenAmount);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param newOwner The address to transfer ownership to.\\r\\n   */\\r\\n   \\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    require(newOwner != address(0));\\r\\n    owner = address(newOwner);\\r\\n  }\\r\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VoltStakingRewardsV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000005b43f27bfb64bae073b00391e68a91e75cd4a15000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}