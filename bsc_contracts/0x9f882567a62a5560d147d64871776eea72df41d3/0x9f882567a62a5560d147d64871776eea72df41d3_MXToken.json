{"SourceCode": "/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract ERC20Capped is ERC20Mintable {\r\n\r\n  uint256 private _cap;\r\n\r\n  constructor(uint256 cap)\r\n    public\r\n  {\r\n    require(cap > 0);\r\n    _cap = cap;\r\n  }\r\n\r\n  /**\r\n   * @return the cap for the token minting.\r\n   */\r\n  function cap() public view returns(uint256) {\r\n    return _cap;\r\n  }\r\n\r\n  function _mint(address account, uint256 value) internal {\r\n    require(totalSupply().add(value) <= _cap);\r\n    super._mint(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC165Checker\r\n * @dev Use `using ERC165Checker for address`; to include this library\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\nlibrary ERC165Checker {\r\n  // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @notice Query if a contract supports ERC165\r\n   * @param account The address of the contract to query for support of ERC165\r\n   * @return true if the contract at account implements ERC165\r\n   */\r\n  function _supportsERC165(address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    // Any contract that implements ERC165 must explicitly indicate support of\r\n    // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n    return _supportsERC165Interface(account, _InterfaceId_ERC165) &&\r\n      !_supportsERC165Interface(account, _InterfaceId_Invalid);\r\n  }\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface, also checks support of ERC165\r\n   * @param account The address of the contract to query for support of an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @return true if the contract at account indicates support of the interface with\r\n   * identifier interfaceId, false otherwise\r\n   * @dev Interface identification is specified in ERC-165.\r\n   */\r\n  function _supportsInterface(address account, bytes4 interfaceId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    // query support of both ERC165 as per the spec and support of _interfaceId\r\n    return _supportsERC165(account) &&\r\n      _supportsERC165Interface(account, interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @notice Query if a contract implements interfaces, also checks support of ERC165\r\n   * @param account The address of the contract to query for support of an interface\r\n   * @param interfaceIds A list of interface identifiers, as specified in ERC-165\r\n   * @return true if the contract at account indicates support all interfaces in the\r\n   * interfaceIds list, false otherwise\r\n   * @dev Interface identification is specified in ERC-165.\r\n   */\r\n  function _supportsAllInterfaces(address account, bytes4[] interfaceIds)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    // query support of ERC165 itself\r\n    if (!_supportsERC165(account)) {\r\n      return false;\r\n    }\r\n\r\n    // query support of each interface in _interfaceIds\r\n    for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n      if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // all interfaces supported\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface, does not check ERC165 support\r\n   * @param account The address of the contract to query for support of an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @return true if the contract at account indicates support of the interface with\r\n   * identifier interfaceId, false otherwise\r\n   * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n   * the behavior of this method is undefined. This precondition can be checked\r\n   * with the `supportsERC165` method in this library.\r\n   * Interface identification is specified in ERC-165.\r\n   */\r\n  function _supportsERC165Interface(address account, bytes4 interfaceId)\r\n    private\r\n    view\r\n    returns (bool)\r\n  {\r\n    // success determines whether the staticcall succeeded and result determines\r\n    // whether the contract at account indicates support of _interfaceId\r\n    (bool success, bool result) = _callERC165SupportsInterface(\r\n      account, interfaceId);\r\n\r\n    return (success && result);\r\n  }\r\n\r\n  /**\r\n   * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\r\n   * @param account The address of the contract to query for support of an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @return success true if the STATICCALL succeeded, false otherwise\r\n   * @return result true if the STATICCALL succeeded and the contract at account\r\n   * indicates support of the interface with identifier interfaceId, false otherwise\r\n   */\r\n  function _callERC165SupportsInterface(\r\n    address account,\r\n    bytes4 interfaceId\r\n  )\r\n    private\r\n    view\r\n    returns (bool success, bool result)\r\n  {\r\n    bytes memory encodedParams = abi.encodeWithSelector(\r\n      _InterfaceId_ERC165,\r\n      interfaceId\r\n    );\r\n\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      let encodedParams_data := add(0x20, encodedParams)\r\n      let encodedParams_size := mload(encodedParams)\r\n\r\n      let output := mload(0x40)  // Find empty storage location using \"free memory pointer\"\r\n      mstore(output, 0x0)\r\n\r\n      success := staticcall(\r\n        30000,                 // 30k gas\r\n        account,              // To addr\r\n        encodedParams_data,\r\n        encodedParams_size,\r\n        output,\r\n        0x20                   // Outputs are 32 bytes long\r\n      )\r\n\r\n      result := mload(output)  // Load the result\r\n    }\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    internal\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IERC1363 Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for a Payable Token contract as defined in\r\n *  https://github.com/ethereum/EIPs/issues/1363\r\n */\r\ncontract IERC1363 is IERC20, ERC165 {\r\n  /*\r\n   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\r\n   * 0x4bbee2df ===\r\n   *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\r\n   *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\r\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  /*\r\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\r\n   * 0xfb9ec8ce ===\r\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\r\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\r\n   */\r\n\r\n  /**\r\n   * @notice Transfer tokens from `msg.sender` to another address\r\n   *  and then call `onTransferReceived` on receiver\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 The amount of tokens to be transferred\r\n   * @return true unless throwing\r\n   */\r\n  function transferAndCall(address to, uint256 value) public returns (bool);\r\n\r\n  /**\r\n   * @notice Transfer tokens from `msg.sender` to another address\r\n   *  and then call `onTransferReceived` on receiver\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 The amount of tokens to be transferred\r\n   * @param data bytes Additional data with no specified format, sent in call to `to`\r\n   * @return true unless throwing\r\n   */\r\n  function transferAndCall(address to, uint256 value, bytes data) public returns (bool); // solium-disable-line max-len\r\n\r\n  /**\r\n   * @notice Transfer tokens from one address to another\r\n   *  and then call `onTransferReceived` on receiver\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 The amount of tokens to be transferred\r\n   * @return true unless throwing\r\n   */\r\n  function transferFromAndCall(address from, address to, uint256 value) public returns (bool); // solium-disable-line max-len\r\n\r\n\r\n  /**\r\n   * @notice Transfer tokens from one address to another\r\n   *  and then call `onTransferReceived` on receiver\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 The amount of tokens to be transferred\r\n   * @param data bytes Additional data with no specified format, sent in call to `to`\r\n   * @return true unless throwing\r\n   */\r\n  function transferFromAndCall(address from, address to, uint256 value, bytes data) public returns (bool); // solium-disable-line max-len, arg-overflow\r\n\r\n  /**\r\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n   *  and then call `onApprovalReceived` on spender\r\n   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   *  race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender address The address which will spend the funds\r\n   * @param value uint256 The amount of tokens to be spent\r\n   */\r\n  function approveAndCall(address spender, uint256 value) public returns (bool); // solium-disable-line max-len\r\n\r\n  /**\r\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n   *  and then call `onApprovalReceived` on spender\r\n   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   *  race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender address The address which will spend the funds\r\n   * @param value uint256 The amount of tokens to be spent\r\n   * @param data bytes Additional data with no specified format, sent in call to `spender`\r\n   */\r\n  function approveAndCall(address spender, uint256 value, bytes data) public returns (bool); // solium-disable-line max-len\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title IERC1363Receiver Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\r\n *  from ERC1363 token contracts as defined in\r\n *  https://github.com/ethereum/EIPs/issues/1363\r\n */\r\ncontract IERC1363Receiver {\r\n  /*\r\n   * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\r\n   * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\r\n   */\r\n\r\n  /**\r\n   * @notice Handle the receipt of ERC1363 tokens\r\n   * @dev Any ERC1363 smart contract calls this function on the recipient\r\n   *  after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\r\n   *  transfer. Return of other than the magic value MUST result in the\r\n   *  transaction being reverted.\r\n   *  Note: the token contract address is always the message sender.\r\n   * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n   * @param from address The address which are token transferred from\r\n   * @param value uint256 The amount of tokens transferred\r\n   * @param data bytes Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\r\n   *  unless throwing\r\n   */\r\n  function onTransferReceived(address operator, address from, uint256 value, bytes data) external returns (bytes4); // solium-disable-line max-len, arg-overflow\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title IERC1363Spender Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for any contract that wants to support approveAndCall\r\n *  from ERC1363 token contracts as defined in\r\n *  https://github.com/ethereum/EIPs/issues/1363\r\n */\r\ncontract IERC1363Spender {\r\n  /*\r\n   * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\r\n   * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\r\n   */\r\n\r\n  /**\r\n   * @notice Handle the approval of ERC1363 tokens\r\n   * @dev Any ERC1363 smart contract calls this function on the recipient\r\n   *  after an `approve`. This function MAY throw to revert and reject the\r\n   *  approval. Return of other than the magic value MUST result in the\r\n   *  transaction being reverted.\r\n   *  Note: the token contract address is always the message sender.\r\n   * @param owner address The address which called `approveAndCall` function\r\n   * @param value uint256 The amount of tokens to be spent\r\n   * @param data bytes Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\r\n   *  unless throwing\r\n   */\r\n  function onApprovalReceived(address owner, uint256 value, bytes data) external returns (bytes4); // solium-disable-line max-len\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC1363\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Implementation of an ERC1363 interface\r\n */\r\ncontract ERC1363 is ERC20, IERC1363 { // solium-disable-line max-len\r\n  using Address for address;\r\n\r\n  /*\r\n   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\r\n   * 0x4bbee2df ===\r\n   *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\r\n   *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\r\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\r\n   */\r\n  bytes4 internal constant _InterfaceId_ERC1363Transfer = 0x4bbee2df;\r\n\r\n  /*\r\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\r\n   * 0xfb9ec8ce ===\r\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\r\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\r\n   */\r\n  bytes4 internal constant _InterfaceId_ERC1363Approve = 0xfb9ec8ce;\r\n\r\n  // Equals to `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC1363Receiver(0).onTransferReceived.selector`\r\n  bytes4 private constant _ERC1363_RECEIVED = 0x88a7ca5c;\r\n\r\n  // Equals to `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC1363Spender(0).onApprovalReceived.selector`\r\n  bytes4 private constant _ERC1363_APPROVED = 0x7b04a2d0;\r\n\r\n  constructor() public {\r\n    // register the supported interfaces to conform to ERC1363 via ERC165\r\n    _registerInterface(_InterfaceId_ERC1363Transfer);\r\n    _registerInterface(_InterfaceId_ERC1363Approve);\r\n  }\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    return transferAndCall(to, value, \"\");\r\n  }\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(transfer(to, value));\r\n    require(\r\n      _checkAndCallTransfer(\r\n        msg.sender,\r\n        to,\r\n        value,\r\n        data\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function transferFromAndCall(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    return transferFromAndCall(from, to, value, \"\");\r\n  }\r\n\r\n  function transferFromAndCall(\r\n    address from,\r\n    address to,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(transferFrom(from, to, value));\r\n    require(\r\n      _checkAndCallTransfer(\r\n        from,\r\n        to,\r\n        value,\r\n        data\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function approveAndCall(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    return approveAndCall(spender, value, \"\");\r\n  }\r\n\r\n  function approveAndCall(\r\n    address spender,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    approve(spender, value);\r\n    require(\r\n      _checkAndCallApprove(\r\n        spender,\r\n        value,\r\n        data\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onTransferReceived` on a target address\r\n   *  The call is not executed if the target address is not a contract\r\n   * @param from address Representing the previous owner of the given token value\r\n   * @param to address Target address that will receive the tokens\r\n   * @param value uint256 The amount mount of tokens to be transferred\r\n   * @param data bytes Optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkAndCallTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return false;\r\n    }\r\n    bytes4 retval = IERC1363Receiver(to).onTransferReceived(\r\n      msg.sender, from, value, data\r\n    );\r\n    return (retval == _ERC1363_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onApprovalReceived` on a target address\r\n   *  The call is not executed if the target address is not a contract\r\n   * @param spender address The address which will spend the funds\r\n   * @param value uint256 The amount of tokens to be spent\r\n   * @param data bytes Optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkAndCallApprove(\r\n    address spender,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!spender.isContract()) {\r\n      return false;\r\n    }\r\n    bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\r\n      msg.sender, value, data\r\n    );\r\n    return (retval == _ERC1363_APPROVED);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: eth-token-recover/contracts/TokenRecover.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenRecover\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Allow to recover any ERC20 sent into the contract for error\r\n */\r\ncontract TokenRecover is Ownable {\r\n\r\n  /**\r\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\r\n   * @param tokenAddress The token contract address\r\n   * @param tokenAmount Number of tokens to be sent\r\n   */\r\n  function recoverERC20(\r\n    address tokenAddress,\r\n    uint256 tokenAmount\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n  }\r\n}\r\n\r\n// File: contracts/BaseToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BaseToken\r\n * @dev Implementation of a BaseToken\r\n */\r\ncontract MXToken is ERC20Detailed, ERC20Capped, ERC20Burnable, ERC1363, TokenRecover { // solium-disable-line max-len\r\n\r\n  constructor(\r\n    string name,\r\n    string symbol,\r\n    uint8 decimals,\r\n    uint256 cap,\r\n    uint256 initialBalance\r\n  )\r\n    ERC20Detailed(name, symbol, decimals)\r\n    ERC20Capped(cap)\r\n    public\r\n  {\r\n    if (initialBalance > 0) {\r\n      _mint(owner(), initialBalance);\r\n    }\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "MXToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000f8277896582678ac00000000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000000084d5820546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024d58000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b8ef9649893ad21dc7e3d59acbba3e3716c9fedab242ca918a98522e6b0ee190"}