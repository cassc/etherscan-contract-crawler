{"SourceCode": "// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CloneFactory.sol\r\n\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/FeeRateModel.sol\r\n\r\n\r\n\r\ninterface IFeeRateImpl {\r\n    function getFeeRate(address pool, address trader) external view returns (uint256);\r\n}\r\n\r\ninterface IFeeRateModel {\r\n    function getFeeRate(address trader) external view returns (uint256);\r\n}\r\n\r\ncontract FeeRateModel is InitializableOwnable {\r\n    address public feeRateImpl;\r\n\r\n    function setFeeProxy(address _feeRateImpl) public onlyOwner {\r\n        feeRateImpl = _feeRateImpl;\r\n    }\r\n    \r\n    function getFeeRate(address trader) external view returns (uint256) {\r\n        if(feeRateImpl == address(0))\r\n            return 0;\r\n        return IFeeRateImpl(feeRateImpl).getFeeRate(msg.sender,trader);\r\n    }\r\n}\r\n\r\n// File: contracts/DODOPrivatePool/intf/IDPP.sol\r\n\r\n\r\ninterface IDPP {\r\n    function init(\r\n        address owner,\r\n        address maintainer,\r\n        address baseTokenAddress,\r\n        address quoteTokenAddress,\r\n        uint256 lpFeeRate,\r\n        address mtFeeRateModel,\r\n        uint256 k,\r\n        uint256 i,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function _MT_FEE_RATE_MODEL_() external returns (address);\r\n\r\n    //=========== admin ==========\r\n    function ratioSync() external;\r\n\r\n    function retrieve(\r\n        address payable to,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function reset(\r\n        address assetTo,\r\n        uint256 newLpFeeRate,\r\n        uint256 newI,\r\n        uint256 newK,\r\n        uint256 baseOutAmount,\r\n        uint256 quoteOutAmount,\r\n        uint256 minBaseReserve,\r\n        uint256 minQuoteReserve\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/DODOPrivatePool/intf/IDPPAdmin.sol\r\n\r\n\r\ninterface IDPPAdmin {\r\n    function init(address owner, address dpp,address operator, address dodoSmartApprove) external;\r\n}\r\n\r\n// File: contracts/Factory/DPPFactory.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DODO PrivatePool Factory\r\n * @author DODO Breeder\r\n *\r\n * @notice Create And Register DPP Pools \r\n */\r\ncontract DPPFactory is InitializableOwnable {\r\n    // ============ Templates ============\r\n\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _DEFAULT_MAINTAINER_;\r\n    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\r\n    address public immutable _DODO_APPROVE_PROXY_;\r\n    address public _DPP_TEMPLATE_;\r\n    address public _DPP_ADMIN_TEMPLATE_;\r\n\r\n    // ============ Registry ============\r\n\r\n    // base -> quote -> DPP address list\r\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\r\n    // creator -> DPP address list\r\n    mapping(address => address[]) public _USER_REGISTRY_;\r\n\r\n    // ============ Events ============\r\n\r\n    event NewDPP(\r\n        address baseToken,\r\n        address quoteToken,\r\n        address creator,\r\n        address dpp\r\n    );\r\n\r\n\r\n    event RemoveDPP(address dpp);\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address dppTemplate,\r\n        address dppAdminTemplate,\r\n        address defaultMaintainer,\r\n        address defaultMtFeeRateModel,\r\n        address dodoApproveProxy\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _DPP_TEMPLATE_ = dppTemplate;\r\n        _DPP_ADMIN_TEMPLATE_ = dppAdminTemplate;\r\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\r\n        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\r\n        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function createDODOPrivatePool() external returns (address newPrivatePool) {\r\n        newPrivatePool = ICloneFactory(_CLONE_FACTORY_).clone(_DPP_TEMPLATE_);\r\n    }\r\n\r\n    function initDODOPrivatePool(\r\n        address dppAddress,\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 k,\r\n        uint256 i,\r\n        bool isOpenTwap\r\n    ) external {\r\n        {\r\n            address _dppAddress = dppAddress;\r\n            address adminModel = _createDPPAdminModel(\r\n                creator,\r\n                _dppAddress,\r\n                creator,\r\n                _DODO_APPROVE_PROXY_\r\n            );\r\n            IDPP(_dppAddress).init(\r\n                adminModel,\r\n                _DEFAULT_MAINTAINER_,\r\n                baseToken,\r\n                quoteToken,\r\n                lpFeeRate,\r\n                _DEFAULT_MT_FEE_RATE_MODEL_,\r\n                k,\r\n                i,\r\n                isOpenTwap\r\n            );\r\n        }\r\n\r\n        _REGISTRY_[baseToken][quoteToken].push(dppAddress);\r\n        _USER_REGISTRY_[creator].push(dppAddress);\r\n        emit NewDPP(baseToken, quoteToken, creator, dppAddress);\r\n    }\r\n\r\n    function _createDPPAdminModel(\r\n        address owner,\r\n        address dpp,\r\n        address operator,\r\n        address dodoApproveProxy\r\n    ) internal returns (address adminModel) {\r\n        adminModel = ICloneFactory(_CLONE_FACTORY_).clone(_DPP_ADMIN_TEMPLATE_);\r\n        IDPPAdmin(adminModel).init(owner, dpp, operator, dodoApproveProxy);\r\n    }\r\n\r\n    // ============ Admin Operation Functions ============\r\n    \r\n    function updateAdminTemplate(address _newDPPAdminTemplate) external onlyOwner {\r\n        _DPP_ADMIN_TEMPLATE_ = _newDPPAdminTemplate;\r\n    }\r\n\r\n    function updateDppTemplate(address _newDPPTemplate) external onlyOwner {\r\n        _DPP_TEMPLATE_ = _newDPPTemplate;\r\n    }\r\n\r\n    function addPoolByAdmin(\r\n        address creator,\r\n        address baseToken, \r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        _REGISTRY_[baseToken][quoteToken].push(pool);\r\n        _USER_REGISTRY_[creator].push(pool);\r\n        emit NewDPP(baseToken, quoteToken, creator, pool);\r\n    }\r\n\r\n    function removePoolByAdmin(\r\n        address creator,\r\n        address baseToken, \r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        address[] memory registryList = _REGISTRY_[baseToken][quoteToken];\r\n        for (uint256 i = 0; i < registryList.length; i++) {\r\n            if (registryList[i] == pool) {\r\n                registryList[i] = registryList[registryList.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _REGISTRY_[baseToken][quoteToken] = registryList;\r\n        _REGISTRY_[baseToken][quoteToken].pop();\r\n        address[] memory userRegistryList = _USER_REGISTRY_[creator];\r\n        for (uint256 i = 0; i < userRegistryList.length; i++) {\r\n            if (userRegistryList[i] == pool) {\r\n                userRegistryList[i] = userRegistryList[userRegistryList.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _USER_REGISTRY_[creator] = userRegistryList;\r\n        _USER_REGISTRY_[creator].pop();\r\n        emit RemoveDPP(pool);\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function getDODOPool(address baseToken, address quoteToken)\r\n        external\r\n        view\r\n        returns (address[] memory pools)\r\n    {\r\n        return _REGISTRY_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getDODOPoolBidirection(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address[] memory baseToken0Pool, address[] memory baseToken1Pool)\r\n    {\r\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\r\n    }\r\n\r\n    function getDODOPoolByUser(address user) \r\n        external\r\n        view\r\n        returns (address[] memory pools)\r\n    {\r\n        return _USER_REGISTRY_[user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppAdminTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMaintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMtFeeRateModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApproveProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dpp\",\"type\":\"address\"}],\"name\":\"NewDPP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dpp\",\"type\":\"address\"}],\"name\":\"RemoveDPP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MT_FEE_RATE_MODEL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_ADMIN_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDODOPrivatePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPrivatePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getDODOPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getDODOPoolBidirection\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"baseToken0Pool\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"baseToken1Pool\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDODOPoolByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dppAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpenTwap\",\"type\":\"bool\"}],\"name\":\"initDODOPrivatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDPPAdminTemplate\",\"type\":\"address\"}],\"name\":\"updateAdminTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDPPTemplate\",\"type\":\"address\"}],\"name\":\"updateDppTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DPPFactory", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000003e2427859119e497eb856a166f616a2ce5f8c8800000000000000000000000085351262f7474ebe23ffacd633cf20a491f1325d00000000000000000000000044d5df24d5ef52a791d6436fa45a8d426f6de34e000000000000000000000000caa42f09af66a8bae3a7445a7f63dad97c11638b00000000000000000000000018dfde99f578a0735410797e949e8d3e2afcb9d2000000000000000000000000b76de21f04f677f07d9881174a1d8e624276314c", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ba5ff167af4c11e532b0ed753b2d8d9b9c081e5b0a0399ae9c9fed78adc667d"}