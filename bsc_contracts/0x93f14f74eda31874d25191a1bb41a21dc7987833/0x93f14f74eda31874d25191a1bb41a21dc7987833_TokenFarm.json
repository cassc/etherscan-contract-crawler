{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a), 'mul overflow');\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a),\r\n            'sub overflow');\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a),\r\n            'add overflow');\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256,\r\n            'abs overflow');\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\r\n            'parameter 2 can not be 0');\r\n        return a % b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event TransferOwnerShip(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, 'Not owner');\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit TransferOwnerShip(newOwner);\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\r\n            'Owner can not be 0');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenFarm is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;     // How many tokens the user has provided.\r\n        uint256 stakingTime; // The time at which the user staked tokens.\r\n        uint256 rewardClaimed;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        address tokenAddress;\r\n        address rewardTokenAddress;\r\n        uint256 maxPoolSize; \r\n        uint256 currentPoolSize;\r\n        uint256 maxContribution;\r\n        uint256 minContribution;\r\n        uint256 rewardNum; \r\n        uint256 rewardDen; \r\n        uint256 emergencyFees; // it is the fees in percentage, final fees is emergencyFees/1000\r\n        uint256 lockDays;\r\n        bool poolType; // true for public staking, false for whitelist staking\r\n        bool poolActive;\r\n    }\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    bool lock_= false;\r\n\r\n    uint256 public totalRewardsClaimed = 0;\r\n    // Info of each user that stakes tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    mapping (uint256 => mapping (address => bool)) public whitelistedAddress;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n\r\n    constructor () {\r\n        \r\n    }\r\n\r\n\r\n    modifier lock {\r\n        require(!lock_, \"Process is locked\");\r\n        lock_ = true;\r\n        _;\r\n        lock_ = false;\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function addPool (address _tokenAddress, address _rewardTokenAddress, uint256 _maxPoolSize, uint256 _maxContribution, uint256 _minContribution, uint256 _rewardNum, uint256 _rewardDen, uint256 _emergencyFees, uint256 _lockDays, bool _poolType, bool _poolActive) public onlyOwner {\r\n        poolInfo.push(PoolInfo({\r\n            tokenAddress: _tokenAddress,\r\n            rewardTokenAddress: _rewardTokenAddress,\r\n            maxPoolSize: _maxPoolSize,\r\n            currentPoolSize: 0,\r\n            maxContribution: _maxContribution,\r\n            minContribution: _minContribution,\r\n            rewardNum: _rewardNum,\r\n            rewardDen: _rewardDen,\r\n            emergencyFees: _emergencyFees,\r\n            lockDays: _lockDays,\r\n            poolType: _poolType,\r\n            poolActive: _poolActive\r\n        }));\r\n    }\r\n\r\n    function updateMaxPoolSize (uint256 _pid, uint256 _maxPoolSize) public onlyOwner{\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        require (_maxPoolSize >= poolInfo[_pid].currentPoolSize, \"Cannot reduce the max size below the current pool size\");\r\n        poolInfo[_pid].maxPoolSize = _maxPoolSize;\r\n    }\r\n\r\n      function updateMinContribution (uint256 _pid, uint256 _minContribution) public onlyOwner{\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].minContribution = _minContribution;\r\n    }\r\n\r\n    function updateMaxContribution (uint256 _pid, uint256 _maxContribution) public onlyOwner{\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].maxContribution = _maxContribution;\r\n    }\r\n\r\n    function updateReward (uint256 _pid, uint256 _rewardNum, uint256 _rewardDen) public onlyOwner {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        require (_rewardNum > 0 && _rewardDen > 0, \"Invalid reward\");\r\n        poolInfo[_pid].rewardNum = _rewardNum;\r\n        poolInfo[_pid].rewardDen = _rewardDen;\r\n    }\r\n\r\n    function updateEmergencyFees (uint256 _pid, uint256 _emergencyFees) public onlyOwner {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        if (poolInfo[_pid].currentPoolSize > 0){\r\n            require (_emergencyFees <= poolInfo[_pid].emergencyFees, \"You can't increase the emergency fees when people started staking\");\r\n        }\r\n        poolInfo[_pid].emergencyFees = _emergencyFees;\r\n    }\r\n\r\n    function updateLockDays (uint256 _pid, uint256 _lockDays) public onlyOwner {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        require (poolInfo[_pid].currentPoolSize == 0, \"Cannot change lock time after people started staking\");\r\n        poolInfo[_pid].lockDays = _lockDays;\r\n    }\r\n\r\n    // this function is to withdraw extra tokens locked in the contract.\r\n    function withdrawLockedTokens (address _tokenAddress) external onlyOwner returns (bool) {\r\n        IBEP20 token = IBEP20 (_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        bool success = token.transfer(msg.sender, balance);\r\n        return success;\r\n    }\r\n\r\n    function updatePoolType (uint256 _pid, bool _poolType) public onlyOwner {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].poolType = _poolType;\r\n    }\r\n\r\n    function updatePoolActive (uint256 _pid, bool _poolActive) public onlyOwner {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        poolInfo[_pid].poolActive = _poolActive;\r\n    }\r\n\r\n    function addWhitelist (uint256 _pid, address [] memory _whitelistAddresses) public onlyOwner {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        uint256 length = _whitelistAddresses.length;\r\n        require (length<= 200, \"Can add only 200 wl at a time\");\r\n        for (uint256 i = 0; i < length; i++){\r\n            address _whitelistAddress = _whitelistAddresses[i];\r\n            whitelistedAddress[_pid][_whitelistAddress] = true;\r\n        }\r\n    }\r\n\r\n    function emergencyLock (bool _lock) public onlyOwner {\r\n        lock_ = _lock;\r\n    }\r\n\r\n    function getUserLockTime (uint256 _pid, address _user) public view returns (uint256) {\r\n        return (userInfo[_pid][_user].stakingTime).add((poolInfo[_pid].lockDays).mul(1 days));\r\n    }\r\n\r\n    function stakeTokens (uint256 _pid, uint256 _amount) public {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        require (poolInfo[_pid].poolActive, \"Pool is not active\");\r\n        require (poolInfo[_pid].currentPoolSize.add(_amount) <= poolInfo[_pid].maxPoolSize, \"Staking exceeds max pool size\");\r\n        require ((userInfo[_pid][msg.sender].amount).add(_amount) <= poolInfo[_pid].maxContribution , \"Max Contribution exceeds\");\r\n        require (_amount >= poolInfo[_pid].minContribution , \"min Contribution should be met\");\r\n\r\n        if (poolInfo[_pid].poolType == false){\r\n            require (whitelistedAddress[_pid][msg.sender], \"You are not whitelisted for this pool\");\r\n        }\r\n\r\n        address _tokenAddress = poolInfo[_pid].tokenAddress;\r\n        IBEP20 token = IBEP20 (_tokenAddress);\r\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\r\n        require (success, \"Transfer From failed. Please approve the token\");\r\n\r\n        poolInfo[_pid].currentPoolSize = (poolInfo[_pid].currentPoolSize).add(_amount);\r\n        uint256 _stakingTime = block.timestamp; \r\n        _amount = _amount.add(userInfo[_pid][msg.sender].amount);\r\n        uint256 _rewardClaimed = userInfo[_pid][msg.sender].rewardClaimed;\r\n        userInfo[_pid][msg.sender] = UserInfo ({\r\n            amount: _amount,\r\n            stakingTime: _stakingTime,\r\n            rewardClaimed: _rewardClaimed\r\n        });\r\n    }\r\n\r\n    function claimableRewards (uint256 _pid, address _user) public view returns (uint256) {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n\r\n        address _tokenAddress = poolInfo[_pid].tokenAddress;\r\n        IBEP20 token = IBEP20 (_tokenAddress);\r\n        address _rewardTokenAddress = poolInfo[_pid].rewardTokenAddress;\r\n        IBEP20 rewardToken = IBEP20 (_rewardTokenAddress);\r\n\r\n        uint256 daysPassed = (block.timestamp - userInfo[_pid][_user].stakingTime)/1 days;\r\n        uint256 rewardNum_temp = poolInfo[_pid].rewardNum;\r\n        uint256 useramount_temp = userInfo[_pid][_user].amount;\r\n        uint256 _refundValue = ((useramount_temp * rewardNum_temp * daysPassed).mul(10 ** rewardToken.decimals())).div(poolInfo[_pid].rewardDen * 10 ** token.decimals() * 365) - userInfo[_pid][_user].rewardClaimed;\r\n        return _refundValue;\r\n    }\r\n\r\n    function unstakeTokens (uint256 _pid) public {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        require (userInfo[_pid][msg.sender].amount > 0 , \"You don't have any staked tokens\");\r\n        require (userInfo[_pid][msg.sender].stakingTime > 0 , \"You don't have any staked tokens\");\r\n        require (getUserLockTime(_pid, msg.sender) < block.timestamp , \"Your maturity time is not reached. If you want you can do EmergencyWithdraw\");\r\n        \r\n        address _tokenAddress = poolInfo[_pid].tokenAddress;\r\n        IBEP20 token = IBEP20 (_tokenAddress);\r\n        address _rewardTokenAddress = poolInfo[_pid].rewardTokenAddress;\r\n        IBEP20 rewardToken = IBEP20 (_rewardTokenAddress);\r\n\r\n        uint256 _refundValue = claimableRewards(_pid, msg.sender);\r\n        userInfo[_pid][msg.sender].rewardClaimed = _refundValue;\r\n        poolInfo[_pid].currentPoolSize = (poolInfo[_pid].currentPoolSize).sub(userInfo[_pid][msg.sender].amount);\r\n\r\n        bool success1 = token.transfer(msg.sender, userInfo[_pid][msg.sender].amount);\r\n        bool success2 = rewardToken.transfer(msg.sender, _refundValue);\r\n        require(success1 && success2, \"Transfer failed\");\r\n        userInfo[_pid][msg.sender].amount = 0;\r\n\r\n    }\r\n\r\n    function emergencyWithdraw (uint256 _pid) public {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n        require (userInfo[_pid][msg.sender].amount > 0 , \"You don't have any staked tokens\");\r\n        require (getUserLockTime(_pid, msg.sender) > block.timestamp , \"Your maturity time is reached. You can unstake tokens and enjoy rewards\");\r\n\r\n        uint256 _emergencyFees = poolInfo[_pid].emergencyFees;\r\n\r\n        uint256 _refundValue = (userInfo[_pid][msg.sender].amount)\r\n            .sub((_emergencyFees)\r\n            .mul(userInfo[_pid][msg.sender].amount)\r\n            .div(1000));\r\n        poolInfo[_pid].currentPoolSize = (poolInfo[_pid].currentPoolSize).sub(userInfo[_pid][msg.sender].amount);\r\n        userInfo[_pid][msg.sender].amount = 0;\r\n\r\n        address _tokenAddress = poolInfo[_pid].tokenAddress;\r\n        IBEP20 token = IBEP20 (_tokenAddress);\r\n        bool success = token.transfer(msg.sender, _refundValue);\r\n        require (success, \"Transfer failed\");\r\n    }\r\n\r\n    function claimRewards (uint256 _pid) public {\r\n        require (_pid < poolLength(), \"Invalid pool ID\");\r\n\r\n        address _rewardTokenAddress = poolInfo[_pid].rewardTokenAddress;\r\n        IBEP20 rewardToken = IBEP20 (_rewardTokenAddress);\r\n        uint256 _refundValue = claimableRewards(_pid, msg.sender);\r\n        userInfo[_pid][msg.sender].rewardClaimed += _refundValue;\r\n\r\n        bool success = rewardToken.transfer(msg.sender, _refundValue);\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    // this function is to withdraw BNB sent to this address by mistake\r\n    function withdrawEth () external onlyOwner returns (bool) {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: balance\r\n        }(\"\");\r\n        return success;\r\n    }\r\n\r\n    // this function is to withdraw BEP20 tokens sent to this address by mistake\r\n    function withdrawBEP20 (address _tokenAddress) external onlyOwner returns (bool) {\r\n        IBEP20 token = IBEP20 (_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        bool success = token.transfer(msg.sender, balance);\r\n        return success;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerShip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emergencyFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolType\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_poolActive\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"emergencyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"poolType\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"poolActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emergencyFees\",\"type\":\"uint256\"}],\"name\":\"updateEmergencyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"name\":\"updateLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"}],\"name\":\"updateMaxContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPoolSize\",\"type\":\"uint256\"}],\"name\":\"updateMaxPoolSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContribution\",\"type\":\"uint256\"}],\"name\":\"updateMinContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolActive\",\"type\":\"bool\"}],\"name\":\"updatePoolActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolType\",\"type\":\"bool\"}],\"name\":\"updatePoolType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDen\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawBEP20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenFarm", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92b495f4755ca7ead107abb964a4b24d6463f933314b7bdcad28cf587d4251d1"}