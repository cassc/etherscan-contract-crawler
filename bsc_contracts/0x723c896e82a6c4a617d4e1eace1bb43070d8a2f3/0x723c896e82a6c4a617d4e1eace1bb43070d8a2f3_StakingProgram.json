{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/StakingProgram.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./RecoverableFunds.sol\\\";\\n\\n/**\\n * @dev StakingProgram\\n */\\ncontract StakingProgram is RecoverableFunds {\\n\\n    using SafeMath for uint256;\\n\\n    uint public constant PERCENT_DIVIDER = 100;\\n\\n    uint8 public constant WITHDRAW_KIND_ALL = 1;\\n\\n    uint8 public constant WITHDRAW_KIND_BY_PROGRAM = 0;\\n\\n    address public fineWallet;\\n\\n    uint public summaryFine = 0;\\n\\n    bool public paused = false;\\n\\n    struct StakeType {\\n        bool active;\\n        uint periodInDays;\\n        uint apy;\\n        uint finesPeriodsCount;\\n        mapping(uint => uint) fineDays;\\n        mapping(uint => uint) fines;\\n    }\\n\\n    struct Staker {\\n        bool exists;\\n        mapping(uint => bool) closed;\\n        mapping(uint => uint) amount;\\n        mapping(uint => uint) amountAfter;\\n        mapping(uint => uint) stakeType;\\n        mapping(uint => uint) start;\\n        mapping(uint => uint) finished;\\n        uint count;\\n        uint summerDeposit;\\n        uint summerAfter;\\n    }\\n\\n    uint public copyCounter = 0;\\n\\n    uint public countOfStakeTypes;\\n\\n    StakeType[] public stakeTypes;\\n\\n    mapping(address => Staker) public stakers;\\n\\n    address[] public stakersAddresses;\\n\\n    uint public stakersAddressesCount;\\n\\n    IERC20 public token;\\n\\n    bool public firstConfigured;\\n\\n    event Deposit(address account, uint amount, uint stakingTypeIndex, uint stakeIndex);\\n\\n    event Withdraw(address account, uint amount, uint stakingTypeIndex, uint stakeIndex);\\n\\n    function configure(address tokenAddress, address inFineWallet) public onlyOwner {\\n        require(!firstConfigured, \\\"Already configured\\\");\\n\\n        // 1st\\n        uint[] memory fineDays = new uint[](1);\\n        uint[] memory fines = new uint[](1);\\n\\n        fineDays[0] = 30;\\n\\n        fines[0] = 100;\\n\\n        addStakeTypeWithFines(30, 24, fines, fineDays);\\n\\n        fineDays = new uint[](3);\\n        fines = new uint[](3);\\n\\n        // 2nd\\n        fineDays[0] = 30;\\n        fineDays[1] = 60;\\n        fineDays[2] = 90;\\n\\n        fines[0] = 100;\\n        fines[1] = 50;\\n        fines[2] = 20;\\n\\n        addStakeTypeWithFines(90, 30, fines, fineDays);\\n\\n\\n        // 3d\\n        fineDays[0] = 60;\\n        fineDays[1] = 120;\\n        fineDays[2] = 180;\\n\\n        fines[0] = 70;\\n        fines[1] = 30;\\n        fines[2] = 20;\\n\\n        addStakeTypeWithFines(180, 36, fines, fineDays);\\n        token = IERC20(tokenAddress);\\n\\n        fineWallet = inFineWallet;\\n\\n        firstConfigured = true;\\n    }\\n\\n    function copyFromAnotherStakingProgram(address addressFrom, uint count) public onlyOwner {\\n        StakingProgram anotherStakingProgram = StakingProgram(addressFrom);\\n        uint[] memory uintValues = new uint[](3);\\n        uintValues[0] = anotherStakingProgram.stakersAddressesCount();\\n        require(uintValues[0] > copyCounter, \\\"Already copied\\\");\\n        uintValues[1] = copyCounter + count;\\n        uintValues[2] = uintValues[0];\\n        if(uintValues[2] > uintValues[1]) {\\n            uintValues[2] = uintValues[1];\\n        }\\n        for(uint i = copyCounter; i < uintValues[2]; i++) {\\n            address stakerAddress = anotherStakingProgram.stakersAddresses(i);\\n            (bool sourceStakerExists,\\n            uint sourceStakerCount,\\n            uint sourceStakerSummerDeposit,\\n            uint sourceStakerSummerAfter) = anotherStakingProgram.stakers(stakerAddress);\\n\\n            stakersAddresses.push(stakerAddress);\\n            stakersAddressesCount++;\\n            Staker storage targetStaker = stakers[stakerAddress];\\n\\n            targetStaker.exists = sourceStakerExists;\\n            targetStaker.count = sourceStakerCount;\\n            targetStaker.summerDeposit = sourceStakerSummerDeposit;\\n            targetStaker.summerAfter = sourceStakerSummerAfter;\\n\\n            for(uint j = 0; j < sourceStakerCount; j++) {\\n                (bool sourceStakeClosed,\\n                uint sourceStakeAmount,\\n                uint sourceStakeAmountAfter,\\n                uint sourceStakeStakeType,\\n                uint sourceStakeStart,\\n                uint sourceStakeFinished) = anotherStakingProgram.getStakerStakeParams(stakerAddress, j);\\n                targetStaker.closed[j] = sourceStakeClosed;\\n                targetStaker.amount[j] = sourceStakeAmount;\\n                targetStaker.amountAfter[j] = sourceStakeAmountAfter;\\n                targetStaker.stakeType[j] = sourceStakeStakeType;\\n                targetStaker.start[j] = sourceStakeStart;\\n                targetStaker.finished[j] = sourceStakeFinished;\\n            }\\n        }\\n        copyCounter = uintValues[2];\\n    }\\n\\n    function addStakeTypeWithFines(uint periodInDays, uint apy, uint[] memory fines, uint[] memory fineDays) public onlyOwner {\\n        uint stakeTypeIndex = addStakeType(periodInDays, apy);\\n        setStakeTypeFines(stakeTypeIndex, fines, fineDays);\\n    }\\n\\n\\n    function setStakeTypeFines(uint stakeTypeIndex, uint[] memory fines, uint[] memory fineDays) public onlyOwner {\\n        require(stakeTypeIndex < countOfStakeTypes, \\\"Wrong stake type index\\\");\\n        require(fines.length > 0, \\\"Fines array length must be greater than 0\\\");\\n        require(fines.length == fineDays.length, \\\"Fines and fine days arrays must be equals\\\");\\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\\n        stakeType.finesPeriodsCount = fines.length;\\n        for (uint i = 0; i < fines.length; i++) {\\n            require(fines[i] <= 1000, \\\"Fines can't be more than 1000\\\");\\n            stakeType.fines[i] = fines[i];\\n            require(fineDays[i] <= 100000, \\\"Fine days can't be more than 10000\\\");\\n            stakeType.fineDays[i] = fineDays[i];\\n        }\\n    }\\n\\n    function changeStakeType(uint stakeTypeIndex, bool active, uint periodInDays, uint apy) public onlyOwner {\\n        require(stakeTypeIndex < countOfStakeTypes, \\\"Wrong stake type index\\\");\\n        require(apy < 1000, \\\"Apy can't be grater than 1000\\\");\\n        require(periodInDays < 100000, \\\"Apy can't be grater than 100000\\\");\\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\\n        stakeType.active = active;\\n        stakeType.periodInDays = periodInDays;\\n        stakeType.apy = apy;\\n    }\\n\\n    function addStakeType(uint periodInDays, uint apy) public onlyOwner returns (uint) {\\n        stakeTypes.push();\\n        StakeType storage stakeType = stakeTypes[countOfStakeTypes++];\\n        stakeType.active = true;\\n        stakeType.periodInDays = periodInDays;\\n        stakeType.apy = apy;\\n        return countOfStakeTypes - 1;\\n    }\\n\\n    function setFineWallet(address inFineWallet) public onlyOwner {\\n        fineWallet = inFineWallet;\\n    }\\n\\n    function setToken(address tokenAddress) public onlyOwner {\\n        token = IERC20(tokenAddress);\\n    }\\n\\n    function setPaused(bool inPaused) public onlyOwner {\\n        paused = inPaused;\\n    }\\n\\n    function deposit(uint8 stakeTypeIndex, uint256 amount) public notPaused returns (uint) {\\n        require(stakeTypeIndex < countOfStakeTypes, \\\"Wrong stake type index\\\");\\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\\n        require(stakeType.active, \\\"Stake type not active\\\");\\n\\n        Staker storage staker = stakers[_msgSender()];\\n        if (!staker.exists) {\\n            staker.exists = true;\\n            stakersAddresses.push(_msgSender());\\n            stakersAddressesCount++;\\n        }\\n\\n        token.transferFrom(_msgSender(), address(this), amount);\\n\\n        staker.closed[staker.count] = false;\\n        staker.amount[staker.count] = amount;\\n        staker.start[staker.count] = block.timestamp;\\n        staker.stakeType[staker.count] = stakeTypeIndex;\\n        staker.count += 1;\\n        staker.summerDeposit += amount;\\n\\n        emit Deposit(_msgSender(), amount, stakeTypeIndex, staker.count - 1);\\n\\n        return staker.count;\\n    }\\n\\n    function calculateWithdrawValue(address stakerAddress, uint stakeIndex, uint8 kind) public view returns (uint) {\\n        Staker storage staker = stakers[stakerAddress];\\n        require(staker.exists, \\\"Staker not registered\\\");\\n        require(!staker.closed[stakeIndex], \\\"Stake already closed\\\");\\n\\n        uint stakeTypeIndex = staker.stakeType[stakeIndex];\\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\\n        require(stakeType.active, \\\"Stake type not active\\\");\\n\\n        if(kind == WITHDRAW_KIND_ALL) {\\n            return staker.amount[stakeIndex];\\n        }\\n\\n        uint startTimestamp = staker.start[stakeIndex];\\n        if (block.timestamp >= startTimestamp + stakeType.periodInDays * (1 days)) {\\n            // Rewards calculation\\n            return staker.amount[stakeIndex]  + staker.amount[stakeIndex]* stakeType.periodInDays * stakeType.apy / (365 * PERCENT_DIVIDER);\\n        } else {\\n            uint stakePeriodIndex = stakeType.finesPeriodsCount - 1;\\n            for (uint i = stakeType.finesPeriodsCount; i > 0; i--) {\\n                if (block.timestamp < startTimestamp + stakeType.fineDays[i - 1] * (1 days)) {\\n                    stakePeriodIndex = i - 1;\\n                }\\n            }\\n            // Fines calculation\\n            return staker.amount[stakeIndex].mul(PERCENT_DIVIDER - stakeType.fines[stakePeriodIndex]).div(PERCENT_DIVIDER);\\n        }\\n    }\\n\\n    function commonWithdraw(address to, address stakerAddress, uint8 stakeIndex, uint8 kind) private {\\n        Staker storage staker = stakers[stakerAddress];\\n        staker.amountAfter[stakeIndex] = calculateWithdrawValue(stakerAddress, stakeIndex, kind);\\n\\n        require(token.balanceOf(address(this)) >= staker.amountAfter[stakeIndex], \\\"Staking contract does not have enough funds! Owner should deposit funds...\\\");\\n\\n        staker.summerAfter = staker.summerAfter.add(staker.amountAfter[stakeIndex]);\\n        staker.finished[stakeIndex] = block.timestamp;\\n        staker.closed[stakeIndex] = true;\\n\\n        require(token.transfer(to, staker.amountAfter[stakeIndex]), \\\"Can't transfer reward\\\");\\n        uint stakeTypeIndex = staker.stakeType[stakeIndex];\\n\\n        if(staker.amountAfter[stakeIndex] < staker.amount[stakeIndex]) {\\n            uint fine = staker.amount[stakeIndex] - staker.amountAfter[stakeIndex];\\n            summaryFine += fine;\\n            require(token.transfer(fineWallet, fine), \\\"Can't transfer reward\\\");\\n        }\\n\\n        emit Withdraw(stakerAddress, staker.amountAfter[stakeIndex], stakeTypeIndex, stakeIndex);\\n    }\\n\\n    function adminWithdraw(address to, address stakerAddress, uint8 stakeIndex) public onlyOwner {\\n        commonWithdraw(to, stakerAddress, stakeIndex, WITHDRAW_KIND_ALL);\\n    }\\n\\n    function withdraw(uint8 stakeIndex) public notPaused {\\n        commonWithdraw(_msgSender(), _msgSender(), stakeIndex, WITHDRAW_KIND_BY_PROGRAM);\\n    }\\n\\n    function withdrawSpecified(address to, uint amount) public onlyOwner {\\n        token.transfer(to, amount);\\n    }\\n\\n    function withdrawAll(address to) public onlyOwner {\\n        token.transfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    function getStakeTypeFinePeriodAndFine(uint8 stakeTypeIndex, uint periodIndex) public view returns (uint, uint) {\\n        require(stakeTypeIndex < countOfStakeTypes, \\\"Wrong stake type index\\\");\\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\\n        //require(stakeType.active, \\\"Stake type not active\\\");\\n        require(periodIndex < stakeType.finesPeriodsCount, \\\"Requetsed period idnex greater than max period index\\\");\\n        return (stakeType.fineDays[periodIndex], stakeType.fines[periodIndex]);\\n    }\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"Deposit program paused\\\");\\n        _;\\n    }\\n\\n    modifier stakerStakeChecks(address stakerAddress, uint stakeIndex) {\\n        Staker storage staker = stakers[stakerAddress];\\n        require(staker.exists, \\\"Staker not registered\\\");\\n        require(stakeIndex < staker.count, \\\"Wrong stake index\\\");\\n        _;\\n    }\\n\\n    function getStakerStakeParams(address stakerAddress, uint stakeIndex) public view stakerStakeChecks(stakerAddress, stakeIndex)\\n    returns (bool closed, uint amount, uint amountAfter, uint stakeType, uint start, uint finished) {\\n        Staker storage staker = stakers[stakerAddress];\\n\\n        uint[] memory uintValues = new uint[](5);\\n        uintValues[0] = staker.amount[stakeIndex];\\n        uintValues[1] = staker.amountAfter[stakeIndex];\\n        uintValues[2] = staker.stakeType[stakeIndex];\\n        uintValues[3] = staker.start[stakeIndex];\\n        uintValues[4] = staker.finished[stakeIndex];\\n\\n        return (staker.closed[stakeIndex], uintValues[0], uintValues[1], uintValues[2], uintValues[3], uintValues[4]);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/RecoverableFunds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Allows the owner to retrieve ETH or tokens sent to this contract by mistake.\\n */\\ncontract RecoverableFunds is Ownable {\\n\\n    function retrieveTokens(address recipient, address tokenAddress) public virtual onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(recipient, token.balanceOf(address(this)));\\n    }\\n\\n    function retriveETH(address payable recipient) public virtual onlyOwner {\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTypeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTypeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_KIND_ALL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_KIND_BY_PROGRAM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"addStakeType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"fines\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fineDays\",\"type\":\"uint256[]\"}],\"name\":\"addStakeTypeWithFines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakeIndex\",\"type\":\"uint8\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"calculateWithdrawValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"changeStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inFineWallet\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"copyCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"copyFromAnotherStakingProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countOfStakeTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fineWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstConfigured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"periodIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeTypeFinePeriodAndFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerStakeParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"retriveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inFineWallet\",\"type\":\"address\"}],\"name\":\"setFineWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"fines\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fineDays\",\"type\":\"uint256[]\"}],\"name\":\"setStakeTypeFines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finesPeriodsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"summerDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"summerAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersAddressesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summaryFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeIndex\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSpecified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingProgram", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}