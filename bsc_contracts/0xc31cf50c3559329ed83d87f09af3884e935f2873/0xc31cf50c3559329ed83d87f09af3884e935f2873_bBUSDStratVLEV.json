{"SourceCode": "pragma solidity 0.6.12;\r\n\r\n// \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Pausable is Context {\r\n\r\n    event Paused(address account);\r\n\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n\r\n}\r\n\r\ninterface IVenusDistribution {\r\n    function claimVenus(address holder) external;\r\n\r\n    function enterMarkets(address[] memory _vtokens) external;\r\n\r\n    function exitMarket(address _vtoken) external;\r\n\r\n    function getAssetsIn(address account)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n\r\ninterface IWBNB is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ninterface IVBNB {\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n}\r\n\r\ninterface IVToken is IERC20 {\r\n    function underlying() external returns (address);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n}\r\n\r\ncontract bBUSDStratVLEV is Ownable, ReentrancyGuard, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    bool public wantIsWBNB = false;\r\n    address public wantAddress;\r\n    address public vTokenAddress;\r\n    address[] public venusMarkets;\r\n    address public uniRouterAddress;\r\n\r\n    address public constant wbnbAddress =\r\n    0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public constant venusAddress =\r\n    0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63;\r\n    address public constant earnedAddress = venusAddress;\r\n    address public constant venusDistributionAddress =\r\n    0xfD36E2c2a6789Db23113685031d7F16329158384;\r\n\r\n    address public BELTAddress;\r\n    address public govAddress;\r\n\r\n    uint256 public sharesTotal = 0;\r\n    uint256 public lastEarnBlock = 0;\r\n\r\n    uint256 public controllerFee = 0;\r\n    uint256 public constant controllerFeeMax = 10000; \r\n    uint256 public constant controllerFeeUL = 300;\r\n\r\n    uint256 public buyBackRate = 800;\r\n    uint256 public constant buyBackRateMax = 10000;\r\n    uint256 public constant buyBackRateUL = 800;\r\n    address public constant buyBackAddress =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public entranceFeeFactor = 10000;\r\n    uint256 public constant entranceFeeFactorMax = 10000;\r\n    uint256 public constant entranceFeeFactorLL = 9950;\r\n\r\n    address[] public venusToWantPath;\r\n    address[] public earnedToBELTPath;\r\n\r\n    uint256 public borrowRate = 585;\r\n    uint256 public borrowDepth = 3;\r\n    uint256 public constant BORROW_RATE_MAX = 595;\r\n    uint256 public constant BORROW_RATE_MAX_HARD = 599;\r\n    uint256 public constant BORROW_DEPTH_MAX = 6;\r\n\r\n    uint256 public supplyBal = 0;\r\n    uint256 public borrowBal = 0;\r\n    uint256 public supplyBalTargeted = 0;\r\n    uint256 public supplyBalMin = 0;\r\n\r\n    event StratRebalance(uint256 _borrowRate, uint256 _borrowDepth);\r\n\r\n    constructor(\r\n        address _BELTAddress,\r\n        address _wantAddress,\r\n        address _vTokenAddress,\r\n        address _uniRouterAddress\r\n    ) public {\r\n        govAddress = msg.sender;\r\n        BELTAddress = _BELTAddress;\r\n\r\n        wantAddress = _wantAddress;\r\n        if (wantAddress == wbnbAddress) {\r\n            wantIsWBNB = true;\r\n            venusToWantPath = [venusAddress, wbnbAddress];\r\n        } else {\r\n            venusToWantPath = [venusAddress, wbnbAddress, wantAddress];\r\n        }\r\n\r\n        earnedToBELTPath = [venusAddress, wbnbAddress, BELTAddress];\r\n\r\n        vTokenAddress = _vTokenAddress;\r\n        venusMarkets = [vTokenAddress];\r\n        uniRouterAddress = _uniRouterAddress;\r\n\r\n        IERC20(venusAddress).safeApprove(uniRouterAddress, uint256(-1));\r\n        IERC20(wantAddress).safeApprove(uniRouterAddress, uint256(-1));\r\n        if (!wantIsWBNB) {\r\n            IERC20(wantAddress).safeApprove(vTokenAddress, uint256(-1));\r\n        }\r\n\r\n        IVenusDistribution(venusDistributionAddress).enterMarkets(venusMarkets);\r\n    }\r\n\r\n    function _supply(uint256 _amount) internal {\r\n        if (wantIsWBNB) {\r\n            IVBNB(vTokenAddress).mint{value: _amount}();\r\n        } else {\r\n            IVToken(vTokenAddress).mint(_amount);\r\n        }\r\n    }\r\n\r\n    function _removeSupply(uint256 _amount) internal {\r\n        IVToken(vTokenAddress).redeemUnderlying(_amount);\r\n    }\r\n\r\n    function _borrow(uint256 _amount) internal {\r\n        IVToken(vTokenAddress).borrow(_amount);\r\n    }\r\n\r\n    function _repayBorrow(uint256 _amount) internal {\r\n        if (wantIsWBNB) {\r\n            IVBNB(vTokenAddress).repayBorrow{value: _amount}();\r\n        } else {\r\n            IVToken(vTokenAddress).repayBorrow(_amount);\r\n        }\r\n    }\r\n\r\n    function deposit(address _userAddress, uint256 _wantAmt)\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        updateBalance();\r\n\r\n        uint256 sharesAdded = _wantAmt;\r\n        if (wantLockedTotal() > 0 && sharesTotal > 0) {\r\n            sharesAdded = _wantAmt\r\n                .mul(sharesTotal)\r\n                .mul(entranceFeeFactor)\r\n                .div(wantLockedTotal())\r\n                .div(entranceFeeFactorMax);\r\n        }\r\n\r\n        sharesTotal = sharesTotal.add(sharesAdded);\r\n\r\n        IERC20(wantAddress).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _wantAmt\r\n        );\r\n\r\n        _farm(true);\r\n\r\n        return sharesAdded;\r\n    }\r\n\r\n    function farm(bool _withLev) public nonReentrant {\r\n        _farm(_withLev);\r\n    }\r\n\r\n    function _farm(bool _withLev) internal {\r\n        if(wantLockedInHere() > 1e18){\r\n            if (wantIsWBNB) {\r\n                _unwrapBNB();\r\n                _leverage(address(this).balance, _withLev);\r\n            } else {\r\n                _leverage(wantLockedInHere(), _withLev);\r\n            }\r\n        }\r\n        else{\r\n            if (wantIsWBNB) {\r\n                _unwrapBNB();\r\n                _leverage(address(this).balance, false);\r\n            } else {\r\n                _leverage(wantLockedInHere(), false);\r\n            }\r\n        }\r\n\r\n        updateBalance();\r\n\r\n        deleverageUntilNotOverLevered();\r\n    }\r\n\r\n    function _leverage(uint256 _amount, bool _withLev) internal {\r\n        if (_withLev) {\r\n            for (uint256 i = 0; i < borrowDepth; i++) {\r\n                _supply(_amount);\r\n                _amount = _amount.mul(borrowRate).div(1000);\r\n                _borrow(_amount);\r\n            }\r\n        }\r\n\r\n        _supply(_amount);\r\n    }\r\n\r\n    function deleverageOnce() public {\r\n        updateBalance();\r\n\r\n        if (supplyBal <= supplyBalTargeted) {\r\n            _removeSupply(supplyBal.sub(supplyBalMin));\r\n        } else {\r\n            _removeSupply(supplyBal.sub(supplyBalTargeted));\r\n        }\r\n\r\n        if (wantIsWBNB) {\r\n            _unwrapBNB();\r\n            _repayBorrow(address(this).balance);\r\n        } else {\r\n            _repayBorrow(wantLockedInHere());\r\n        }\r\n\r\n        updateBalance();\r\n    }\r\n\r\n    function deleverageUntilNotOverLevered() public {\r\n        while (supplyBal > 0 && supplyBal <= supplyBalTargeted) {\r\n            deleverageOnce();\r\n        }\r\n    }\r\n\r\n\r\n    function _deleverage(bool _delevPartial, uint256 _minAmt) internal {\r\n        updateBalance();\r\n\r\n        deleverageUntilNotOverLevered();\r\n\r\n        if (wantIsWBNB) {\r\n            _wrapBNB();\r\n        }\r\n\r\n        _removeSupply(supplyBal.sub(supplyBalMin));\r\n\r\n        uint256 wantBal = wantLockedInHere();\r\n\r\n        while (wantBal < borrowBal) {\r\n\r\n            if (_delevPartial && wantBal >= _minAmt) {\r\n                return;\r\n            }\r\n\r\n            _repayBorrow(wantBal);\r\n\r\n            updateBalance();\r\n\r\n            _removeSupply(supplyBal.sub(supplyBalMin));\r\n\r\n            wantBal = wantLockedInHere();\r\n        }\r\n\r\n\r\n        if (_delevPartial && wantBal >= _minAmt) {\r\n            return;\r\n        }\r\n\r\n        _repayBorrow(borrowBal);\r\n\r\n        uint256 vTokenBal = IERC20(vTokenAddress).balanceOf(address(this));\r\n        IVToken(vTokenAddress).redeem(vTokenBal);\r\n    }\r\n\r\n    function rebalance(uint256 _borrowRate, uint256 _borrowDepth) external {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n\r\n        require(_borrowRate <= BORROW_RATE_MAX, \"!rate\");\r\n        require(_borrowDepth <= BORROW_DEPTH_MAX, \"!depth\");\r\n\r\n        _deleverage(false, uint256(-1));\r\n        borrowRate = _borrowRate;\r\n        borrowDepth = _borrowDepth;\r\n        _farm(true);\r\n    }\r\n\r\n    function earn() external whenNotPaused {\r\n        IVenusDistribution(venusDistributionAddress).claimVenus(address(this));\r\n\r\n        uint256 earnedAmt = IERC20(venusAddress).balanceOf(address(this));\r\n\r\n        earnedAmt = distributeFees(earnedAmt);\r\n        earnedAmt = buyBack(earnedAmt);\r\n\r\n        if (venusAddress != wantAddress) {\r\n            IPancakeRouter02(uniRouterAddress).swapExactTokensForTokens(\r\n                earnedAmt,\r\n                0,\r\n                venusToWantPath,\r\n                address(this),\r\n                now.add(600)\r\n            );\r\n        }\r\n\r\n        lastEarnBlock = block.number;\r\n\r\n        _farm(false);\r\n    }\r\n\r\n    function buyBack(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (buyBackRate <= 0) {\r\n            return _earnedAmt;\r\n        }\r\n\r\n        uint256 buyBackAmt = _earnedAmt.mul(buyBackRate).div(buyBackRateMax);\r\n\r\n        IPancakeRouter02(uniRouterAddress).swapExactTokensForTokens(\r\n            buyBackAmt,\r\n            0,\r\n            earnedToBELTPath,\r\n            address(this),\r\n            now + 600\r\n        );\r\n\r\n        uint256 burnAmt = IERC20(BELTAddress).balanceOf(address(this));\r\n        IERC20(BELTAddress).safeTransfer(buyBackAddress, burnAmt);\r\n\r\n        return _earnedAmt.sub(buyBackAmt);\r\n    }\r\n\r\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (_earnedAmt > 0) {\r\n            if (controllerFee > 0) {\r\n                uint256 fee =\r\n                    _earnedAmt.mul(controllerFee).div(controllerFeeMax);\r\n                IERC20(venusAddress).safeTransfer(govAddress, fee);\r\n                return _earnedAmt.sub(fee);\r\n            }\r\n        }\r\n\r\n        return _earnedAmt;\r\n    }\r\n\r\n    function withdraw(address _userAddress, uint256 _wantAmt)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        uint256 sharesRemoved =\r\n            _wantAmt.mul(sharesTotal).div(wantLockedTotal());\r\n        if (sharesRemoved > sharesTotal) {\r\n            sharesRemoved = sharesTotal;\r\n        }\r\n        sharesTotal = sharesTotal.sub(sharesRemoved);\r\n\r\n        uint256 wantBal = IERC20(wantAddress).balanceOf(address(this));\r\n        if (wantBal < _wantAmt) {\r\n            _deleverage(true, _wantAmt);\r\n            if (wantIsWBNB) {\r\n                _wrapBNB();\r\n            }\r\n            wantBal = IERC20(wantAddress).balanceOf(address(this));\r\n        }\r\n\r\n        if (wantBal < _wantAmt) {\r\n            _wantAmt = wantBal;\r\n        }\r\n\r\n        IERC20(wantAddress).safeTransfer(owner(), _wantAmt);\r\n\r\n        _farm(true);\r\n\r\n        return sharesRemoved;\r\n    }\r\n\r\n    function pause() public {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n\r\n        _pause();\r\n\r\n        IERC20(venusAddress).safeApprove(uniRouterAddress, 0);\r\n        IERC20(wantAddress).safeApprove(uniRouterAddress, 0);\r\n        if (!wantIsWBNB) {\r\n            IERC20(wantAddress).safeApprove(vTokenAddress, 0);\r\n        }\r\n    }\r\n\r\n    function unpause() external {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        _unpause();\r\n\r\n        IERC20(venusAddress).safeApprove(uniRouterAddress, uint256(-1));\r\n        IERC20(wantAddress).safeApprove(uniRouterAddress, uint256(-1));\r\n        if (!wantIsWBNB) {\r\n            IERC20(wantAddress).safeApprove(vTokenAddress, 0);\r\n        }\r\n    }\r\n\r\n\r\n    function updateBalance() public {\r\n        supplyBal = IVToken(vTokenAddress).balanceOfUnderlying(address(this));\r\n        borrowBal = IVToken(vTokenAddress).borrowBalanceCurrent(address(this));\r\n        supplyBalTargeted = borrowBal.mul(1000).div(borrowRate);\r\n        supplyBalMin = borrowBal.mul(1000).div(BORROW_RATE_MAX_HARD);\r\n    }\r\n\r\n    function wantLockedTotal() public view returns (uint256) {\r\n        return wantLockedInHere().add(supplyBal).sub(borrowBal);\r\n    }\r\n\r\n    function wantLockedInHere() public view returns (uint256) {\r\n        uint256 wantBal = IERC20(wantAddress).balanceOf(address(this));\r\n        if (wantIsWBNB) {\r\n            uint256 bnbBal = address(this).balance;\r\n            return bnbBal.add(wantBal);\r\n        } else {\r\n            return wantBal;\r\n        }\r\n    }\r\n\r\n    function setEntranceFeeFactor(uint256 _entranceFeeFactor) public {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        require(_entranceFeeFactor > entranceFeeFactorLL, \"!safe - too low\");\r\n        require(_entranceFeeFactor <= entranceFeeFactorMax, \"!safe - too high\");\r\n        entranceFeeFactor = _entranceFeeFactor;\r\n    }\r\n\r\n    function setControllerFee(uint256 _controllerFee) public {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        require(_controllerFee <= controllerFeeUL, \"too high\");\r\n        controllerFee = _controllerFee;\r\n    }\r\n\r\n    function setbuyBackRate(uint256 _buyBackRate) public {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        require(buyBackRate <= buyBackRateUL, \"too high\");\r\n        buyBackRate = _buyBackRate;\r\n    }\r\n\r\n    function setGov(address _govAddress) public {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        govAddress = _govAddress;\r\n    }\r\n\r\n    function inCaseTokensGetStuck(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) public {\r\n        require(msg.sender == govAddress, \"!gov\");\r\n        require(_token != earnedAddress, \"!safe\");\r\n        require(_token != wantAddress, \"!safe\");\r\n        require(_token != vTokenAddress, \"!safe\");\r\n\r\n        IERC20(_token).safeTransfer(_to, _amount);\r\n    }\r\n\r\n    function _wrapBNB() internal {\r\n        uint256 bnbBal = address(this).balance;\r\n        if (bnbBal > 0) {\r\n            IWBNB(wbnbAddress).deposit{value: bnbBal}();\r\n        }\r\n    }\r\n\r\n    function _unwrapBNB() internal {\r\n        uint256 wbnbBal = IERC20(wbnbAddress).balanceOf(address(this));\r\n        if (wbnbBal > 0) {\r\n            IWBNB(wbnbAddress).withdraw(wbnbBal);\r\n        }\r\n    }\r\n\r\n    function wrapBNB() public {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        require(wantIsWBNB, \"!wantIsWBNB\");\r\n        _wrapBNB();\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BELTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowDepth\",\"type\":\"uint256\"}],\"name\":\"StratRebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BELTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROW_DEPTH_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROW_RATE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROW_RATE_MAX_HARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleverageOnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleverageUntilNotOverLevered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToBELTPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withLev\",\"type\":\"bool\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowDepth\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"}],\"name\":\"setControllerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setEntranceFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"}],\"name\":\"setbuyBackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBalMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBalTargeted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"venusDistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"venusMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"venusToWantPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantIsWBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedInHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "bBUSDStratVLEV", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e0e514c71282b6f4e823703a39374cf58dc3ea4f000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000095c78222b3d6e262426483d42cfa53685a67ab9d00000000000000000000000005ff2b0db69458a0750badebc4f9e13add608c7f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d16da334faf5f31d0bc3d7d29dba69e34ee8a7b534cc455e2eb1c245703ce16"}