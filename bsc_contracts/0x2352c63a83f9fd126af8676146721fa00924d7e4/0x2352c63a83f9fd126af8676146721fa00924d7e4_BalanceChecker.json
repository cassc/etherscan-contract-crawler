{"SourceCode": "// Built off of https://github.com/DeltaBalances/DeltaBalances.github.io/blob/master/smart_contract/deltabalances.sol\r\npragma solidity ^0.4.21;\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n  function balanceOf(address) public view returns (uint);\r\n}\r\n\r\ncontract BalanceChecker {\r\n  /* Fallback function, don't accept any ETH */\r\n  function() public payable {\r\n    revert(\"BalanceChecker does not accept payments\");\r\n  }\r\n\r\n  /*\r\n    Check the token balance of a wallet in a token contract\r\n\r\n    Returns the balance of the token for user. Avoids possible errors:\r\n      - return 0 on non-contract address \r\n      - returns 0 if the contract doesn't implement balanceOf\r\n  */\r\n  function tokenBalance(address user, address token) public view returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n  \r\n    // is it a contract and does it implement balanceOf \r\n    if (tokenCode > 0 && token.call(bytes4(0x70a08231), user)) {  \r\n      return Token(token).balanceOf(user);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /*\r\n    Check the token balances of a wallet for multiple tokens.\r\n    Pass 0x0 as a \"token\" address to get ETH balance.\r\n\r\n    Possible error throws:\r\n      - extremely large arrays for user and or tokens (gas cost too high) \r\n          \r\n    Returns a one-dimensional that's user.length * tokens.length long. The\r\n    array is ordered by all of the 0th users token balances, then the 1th\r\n    user, and so on.\r\n  */\r\n  function balances(address[] users, address[] tokens) external view returns (uint[]) {\r\n    uint[] memory addrBalances = new uint[](tokens.length * users.length);\r\n    \r\n    for(uint i = 0; i < users.length; i++) {\r\n      for (uint j = 0; j < tokens.length; j++) {\r\n        uint addrIdx = j + tokens.length * i;\r\n        if (tokens[j] != address(0x0)) { \r\n          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);\r\n        } else {\r\n          addrBalances[addrIdx] = users[i].balance; // ETH balance    \r\n        }\r\n      }  \r\n    }\r\n  \r\n    return addrBalances;\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "BalanceChecker", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e71a20101ac20d8db8227a84571f09d404682a7619791eacd5ee9cff9cfe34a9"}