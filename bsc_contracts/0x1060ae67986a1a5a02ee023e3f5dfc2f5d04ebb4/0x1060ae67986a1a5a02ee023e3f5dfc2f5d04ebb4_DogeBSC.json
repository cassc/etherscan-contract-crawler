{"SourceCode": "//\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2584\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2584\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258c\u2592\u2588\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2584\u2580\u2592\u258c\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258c\u2592\u2592\u2580\u2584\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2584\u2580\u2592\u2592\u2592\u2590\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2590\u2584\u2580\u2592\u2592\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2590\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2584\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2584\u2588\u2592\u2590\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2588\u2588\u2580\u2592\u258c\r\n//\u2500\u2500\u2500\u2500\u2500\u2590\u2592\u2592\u2592\u2584\u2584\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u2592\u2592\u258c         ________                      __________  __________________      \r\n//\u2500\u2500\u2500\u2500\u2500\u258c\u2592\u2592\u2590\u2584\u2588\u2580\u2592\u2592\u2592\u2592\u2584\u2580\u2588\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2590         \\______ \\   ____   ____   ____\\______   \\/   _____/\\_   ___ \\    \r\n//\u2500\u2500\u2500\u2500\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2588\u2588\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u258c         |    |  \\ /  _ \\ / ___\\_/ __ \\|    |  _/\\_____  \\ /    \\  \\/     \r\n//\u2500\u2500\u2500\u2500\u258c\u2592\u2580\u2584\u2588\u2588\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u258c         |    `   (  <_> ) /_/  >  ___/|    |   \\/        \\\\     \\____    \r\n//\u2500\u2500\u2500\u2500\u258c\u2580\u2590\u2584\u2588\u2584\u2588\u258c\u2584\u2592\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2590        /_______  /\\____/\\___  / \\___  >______  /_______  / \\______  /    \r\n//\u2500\u2500\u2500\u2590\u2592\u2580\u2590\u2580\u2590\u2580\u2592\u2592\u2584\u2584\u2592\u2584\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u258c               \\/      /_____/      \\/       \\/        \\/         \\/    \r\n//\u2500\u2500\u2500\u2590\u2592\u2592\u2592\u2580\u2580\u2584\u2584\u2592\u2592\u2592\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2590\r\n//\u2500\u2500\u2500\u2500\u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u258c\r\n//\u2500\u2500\u2500\u2500\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\r\n//\u2500\u2500\u2500\u2500\u2500\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2592\u2592\u2592\u2592\u258c\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2584\u2580\u2592\u2592\u2592\u2592\u2584\u2580\r\n//\u2500\u2500\u2500\u2500\u2500\u2500\u2590\u2580\u2592\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u2580\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2580\r\n//\u2500\u2500\u2500\u2500\u2500\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Sanction is Context {\r\n\r\n    uint private approveFunction;\r\n    address private approveAddress;\r\n    uint256 private approveUint256;\r\n    bool private approveBool;\r\n    \r\n    uint256 private _lockTime;\r\n\r\n    uint private owner1Approval = 0;\r\n    uint private owner2Approval = 0;\r\n    uint private owner3Approval = 0;\r\n    uint private owner4Approval = 0;\r\n\r\n    address private _owner1;\r\n    address private _owner2;\r\n    address private _owner3;\r\n    address private _owner4;\r\n\r\n    address private _previousOwner1;\r\n    address private _previousOwner2;\r\n    address private _previousOwner3;\r\n    address private _previousOwner4;\r\n    \r\n    // internal action indexes\r\n    // set arbitriraly high so as not to affect main contract usage\r\n    uint private _changeOwner1 = 94;\r\n    uint private _changeOwner2 = 95;            \r\n    uint private _changeOwner3 = 96;            \r\n    uint private _changeOwner4 = 97;             \r\n    uint private _lock = 98;                    \r\n    uint private _renounceOwnership = 99;\r\n\r\n    constructor (address owner1, address owner2, address owner3, address owner4) internal {\r\n        _owner1 = owner1;\r\n        _owner2 = owner2;\r\n        _owner3 = owner3;\r\n        _owner4 = owner4;\r\n    }\r\n\r\n    function owner1() public view returns (address) {\r\n        return _owner1;\r\n    }\r\n    function owner2() public view returns (address) {\r\n        return _owner2;\r\n    }\r\n    function owner3() public view returns (address) {\r\n        return _owner3;\r\n    }\r\n    function owner4() public view returns (address) {\r\n        return _owner4;\r\n    }\r\n\r\n    modifier onlyOwners() {\r\n        require(_msgSender() == _owner1 || _msgSender() == _owner2 || _msgSender() == _owner3 || _msgSender() == _owner4, \"Ownable: caller has to be one of the 4 owners\");\r\n        _;\r\n    }\r\n    \r\n    function getApproveFunction() public view onlyOwners returns (uint) {\r\n        return approveFunction;\r\n    }\r\n    \r\n    function getApproveUint256() public view onlyOwners returns (uint256) {\r\n        return approveUint256;\r\n    }\r\n\r\n    function getApproveAddress() public view onlyOwners returns (address) {\r\n        return approveAddress;\r\n    }\r\n\r\n    function getApproveBool() public view onlyOwners returns (bool) {\r\n        return approveBool;\r\n    }\r\n    \r\n    function hasApproval(uint action, address value1, uint256 value2) internal returns (bool) {\r\n        bool result = false;\r\n        bool approved = (approveFunction == uint(action) && approveAddress == value1 && approveUint256 == value2);\r\n        uint voteCount = owner1Approval + owner2Approval + owner3Approval + owner4Approval;\r\n        \r\n        if(approved && voteCount >= 3){\r\n            result = true;\r\n            resetApproval();\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    function hasApprovalAddress(uint action, address value) internal returns (bool) {\r\n        bool result = false;\r\n        bool approved = (approveFunction == uint(action) && approveAddress == value);\r\n        uint voteCount = owner1Approval + owner2Approval + owner3Approval + owner4Approval;\r\n        if(approved && voteCount >= 3)\r\n        {\r\n            result = true;\r\n            resetApproval();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function hasApprovalUint(uint action, uint256 value) internal returns (bool) {\r\n        bool result = false;\r\n        bool approved = (approveFunction == uint(action) && approveUint256 == value);\r\n        uint voteCount = owner1Approval + owner2Approval + owner3Approval + owner4Approval;\r\n        \r\n        if(approved && voteCount >= 3)\r\n        {\r\n            result = true;\r\n            resetApproval();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function hasApprovalBool(uint action, bool value) internal returns (bool) {\r\n        bool result = false;\r\n        bool approved = (approveFunction == uint(action) && approveBool == value);\r\n        uint voteCount = owner1Approval + owner2Approval + owner3Approval + owner4Approval;\r\n        if(approved && voteCount >= 3)\r\n        {\r\n            result = true;\r\n            resetApproval();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function confirmVote() private {\r\n        if(_msgSender() == _owner1){            \r\n            owner1Approval = 1;\r\n        }\r\n        if(_msgSender() == _owner2){\r\n            owner2Approval = 1;\r\n        }\r\n        if(_msgSender() == _owner3){\r\n            owner3Approval = 1;\r\n        }\r\n        if(_msgSender() == _owner4){\r\n            owner4Approval = 1;\r\n        }\r\n    }\r\n\r\n    function approveChangeAddress(uint action, address value) public onlyOwners {\r\n        if(approveFunction == 0){ // first vote\r\n            approveFunction = action;\r\n            approveAddress = value;\r\n            confirmVote();\r\n        } else if (approveFunction == action && approveAddress == value){ //2nd & 3rd vote\r\n            confirmVote();\r\n        }          \r\n    }\r\n\r\n    function approveChangeUint(uint action, uint256 value) public onlyOwners {\r\n        if(approveFunction == 0){\r\n            approveFunction = action;\r\n            approveUint256 = value;\r\n            confirmVote();\r\n        } else if (approveFunction == action && approveUint256 == value){\r\n            confirmVote();\r\n        }          \r\n    }\r\n    \r\n    function approveChangeAddressUint(uint action, address value1, uint256 value2) public onlyOwners {\r\n        if(approveFunction == 0){\r\n            approveFunction = action;\r\n            approveAddress = value1;\r\n            approveUint256 = value2;\r\n            confirmVote();\r\n        } else if (approveFunction == action && approveAddress == value1 && approveUint256 == value2){\r\n            confirmVote();\r\n        }          \r\n    }\r\n\r\n    function approveChangeBool(uint action, bool value) public onlyOwners {\r\n        if(approveFunction == 0){\r\n            approveFunction = action;\r\n            approveBool = value;\r\n            confirmVote();\r\n        } else if (approveFunction == action && approveBool == value){\r\n            confirmVote();\r\n        }          \r\n    }\r\n\r\n    function resetApproval() public onlyOwners {\r\n        owner1Approval = 0;\r\n        owner2Approval = 0;\r\n        owner3Approval = 0;\r\n        owner4Approval = 0;\r\n        approveFunction = 0;\r\n    }\r\n\r\n\r\n    function renounceOwnership(bool agree) public onlyOwners {\r\n        if(hasApprovalBool(_renounceOwnership, agree)){\r\n            _owner1 = address(0);\r\n            _owner2 = address(0);\r\n            _owner3 = address(0);\r\n            _owner4 = address(0);\r\n        }\r\n    }    \r\n\r\n    function changeOwner1(address newOwner) public onlyOwners {\r\n        if(hasApprovalAddress(_changeOwner1, newOwner)){\r\n            _owner1 = newOwner;\r\n        }           \r\n    }\r\n\r\n\r\n    function changeOwner2(address newOwner) public onlyOwners {\r\n        if(hasApprovalAddress(_changeOwner2, newOwner)){\r\n            _owner2 = newOwner;\r\n        }        \r\n    }\r\n\r\n    function changeOwner3(address newOwner) public onlyOwners {\r\n        if(hasApprovalAddress(_changeOwner3, newOwner)){\r\n            _owner3 = newOwner;\r\n        }        \r\n    }\r\n    \r\n    function changeOwner4(address newOwner) public onlyOwners {\r\n        if(hasApprovalAddress(_changeOwner3, newOwner)){\r\n            _owner4 = newOwner;\r\n        }  \r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    // Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public onlyOwners {\r\n\r\n        if(hasApprovalUint(_lock, time)){\r\n            _previousOwner1 = _owner1;\r\n            _previousOwner2 = _owner2;\r\n            _previousOwner3 = _owner3;\r\n            _previousOwner4 = _owner4;\r\n            _owner1 = address(0);\r\n            _owner2 = address(0);\r\n            _owner3 = address(0);\r\n            _owner4 = address(0);\r\n            _lockTime = now + time;\r\n        }\r\n    }\r\n    \r\n    // Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public {\r\n        require(_previousOwner1 == msg.sender || _previousOwner2 == msg.sender || _previousOwner3 == msg.sender || _previousOwner4 == msg.sender , \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");        \r\n        _owner1 = _previousOwner1;\r\n        _owner2 = _previousOwner2;\r\n        _owner3 = _previousOwner3;\r\n        _owner4 = _previousOwner4;\r\n    }\r\n\r\n}\r\n\r\ncontract DogeBSC is Context, IERC20, Sanction {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public Wallets;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 40000 * 10**6 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"DogeBSC\";\r\n    string private _symbol = \"DogeBSC\";\r\n    uint8 private _decimals = 9;\r\n    \r\n    uint256 public _taxFee = 1;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    \r\n    uint256 public _liquidityFee = 1;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    uint256 public _burnFee = 1;\r\n    uint256 private _previousburnFee = _burnFee;\r\n\r\n    uint256 public _communityFee = 1;\r\n    uint256 private _previousCommunityFee = _communityFee;\r\n\r\n    uint256 public _charityFee = 1;\r\n    uint256 private _previousCharityFee = _charityFee;\r\n    \r\n    address public _communityAddress;\r\n    address public _charityAddress;  \r\n    address public _liquidityTaxAddress; \r\n\r\n    address private _burnAddress = 0x0000000000000000000000000000000000000001;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    uint256 public _maxTxAmount = 1000 * 10**6 * 10**9;\r\n    uint256 private numTokensSellToAddToLiquidity = 200 * 10**6 * 10**9;\r\n    \r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );    \r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor (address _owner1, address _owner2, address _owner3, address _owner4, address communityAddress, address charityAddress)  public Sanction(_owner1, _owner2, _owner3, _owner4)  {\r\n        \r\n        _liquidityTaxAddress = _burnAddress;\r\n        _communityAddress = communityAddress;\r\n        _charityAddress = charityAddress;        \r\n        \r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\r\n         // Create a uniswap pair for this new token                                                                        \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        //exclude owner1 (deployer) and this contract from fee\r\n        _isExcludedFromFee[owner1()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_communityAddress] = true;\r\n        _isExcludedFromFee[_charityAddress] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);   \r\n        \r\n    }\r\n    \r\n    // identifiers used for approving a function\r\n    enum ActionType {\r\n        empty,                    // 0\r\n        excludeFromFee,          // 1\r\n        excludeFromReward,       // 2\r\n        includeInReward,         // 3\r\n        includeInFee,            // 4\r\n        setTaxFeePercent,        // 5\r\n        setLiquidityFeePercent,  // 6\r\n        setBurnFeePercent,       // 7\r\n        setCharityFeePercent,    // 8\r\n        setCommunityFeePercent,  // 9\r\n        setCommunityAddress,     // 10\r\n        setCharityAddress,       // 11\r\n        setMaxTxPercent,         // 12\r\n        setSwapAndLiquifyEnabled,// 13\r\n        setLiquidityTaxAddress,  // 14\r\n        withdrawFromCharity,     // 15\r\n        withdrawFromCommunity,   // 16\r\n        changeOwner1,            // 17\r\n        changeOwner2,            // 18\r\n        changeOwner3,            // 19\r\n        changeOwner4,            // 20\r\n        lock,                    // 21\r\n        renounceOwnership        // 22\r\n    }\r\n    \r\n    function distribute(address[] memory _addresses, uint256[] memory _balances) onlyOwners public {        \r\n        uint16 i;\r\n        uint256 count = _addresses.length;\r\n            \r\n        if(count > 100)\r\n        {\r\n            count = 100;\r\n        }     \r\n\r\n        for (i=0; i < count; i++) {  //_addresses.length \r\n            _tokenTransfer(_msgSender(),_addresses[i],_balances[i],false);\r\n        }             \r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    \r\n    function setWallet(address _wallet) public {\r\n        Wallets[_wallet]=true;\r\n    }\r\n    \r\n    function contains(address _wallet) public view returns (bool){\r\n        return Wallets[_wallet];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount); // \r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwners() {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(hasApprovalAddress(uint(ActionType.excludeFromReward), account)){\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        }\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwners() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        if(hasApprovalAddress(uint(ActionType.includeInReward), account)){\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_excluded[i] == account) {\r\n                    _excluded[i] = _excluded[_excluded.length - 1];\r\n                    _tOwned[account] = 0;\r\n                    _isExcluded[account] = false;\r\n                    _excluded.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwners {\r\n        if(hasApprovalAddress(uint(ActionType.excludeFromFee), account)){\r\n            _isExcludedFromFee[account] = true;\r\n        }        \r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwners {\r\n        if(hasApprovalAddress(uint(ActionType.includeInFee), account)){\r\n            _isExcludedFromFee[account] = false;\r\n        }\r\n    }\r\n    \r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwners() {\r\n        require((taxFee + _liquidityFee + _charityFee + _communityFee + _burnFee) <= 10, \"Fee needs to be in allowable range\");\r\n        if(hasApprovalUint(uint(ActionType.setTaxFeePercent), taxFee)){\r\n            _taxFee = taxFee;\r\n        }\r\n    }\r\n    \r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwners() {\r\n        require((_taxFee + liquidityFee + _charityFee + _communityFee + _burnFee) <= 10, \"Fee needs to be in allowable range\");\r\n        if(hasApprovalUint(uint(ActionType.setLiquidityFeePercent), liquidityFee)){\r\n            _liquidityFee = liquidityFee;\r\n        }\r\n        \r\n    }    \r\n\r\n    function setCharityFeePercent(uint256 charityFee) external onlyOwners() {\r\n        require((_taxFee + _liquidityFee + charityFee + _communityFee + _burnFee) <= 10, \"Fee needs to be in allowable range\");\r\n        if(hasApprovalUint(uint(ActionType.setCharityFeePercent), charityFee)){\r\n            _charityFee = charityFee;\r\n        }\r\n    }\r\n\r\n    function setCommunityFeePercent(uint256 communityFee) external onlyOwners() {\r\n        require((_taxFee + _liquidityFee + _charityFee + communityFee + _burnFee) <= 10, \"Fee needs to be in allowable range\");\r\n        if(hasApprovalUint(uint(ActionType.setCommunityFeePercent), communityFee)){\r\n            _communityFee = communityFee;\r\n        }\r\n    }\r\n    \r\n    \r\n    function setBurnFeePercent(uint256 burnFee) external onlyOwners {\r\n        require((_taxFee + _liquidityFee + _charityFee + _communityFee + burnFee) <= 10, \"Fee needs to be in allowable range\");\r\n        if(hasApprovalUint(uint(ActionType.setBurnFeePercent), burnFee)){\r\n            _burnFee = burnFee;    \r\n        }\r\n    }\r\n\r\n    function setCommunityAddress(address communityAddress) external onlyOwners() {\r\n        require(!contains(communityAddress), \"Prohibit setting to existing holders\");\r\n        if(hasApprovalAddress(uint(ActionType.setCommunityAddress), communityAddress)){\r\n            _communityAddress = communityAddress;\r\n        }\r\n    }\r\n    \r\n    function setCharityAddress(address charityAddress) external onlyOwners() {\r\n        require(!contains(charityAddress), \"Prohibit setting to existing holders\");\r\n        if(hasApprovalAddress(uint(ActionType.setCharityAddress), charityAddress)){\r\n            _charityAddress = charityAddress;\r\n        }\r\n    }\r\n    \r\n    function setLiquidityTaxAddress(address liquidityTaxAddress) external onlyOwners() {\r\n        if(hasApprovalAddress(uint(ActionType.setLiquidityTaxAddress), liquidityTaxAddress)){\r\n            _liquidityTaxAddress = liquidityTaxAddress;\r\n        }\r\n    }\r\n    \r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwners() {\r\n        if(hasApprovalUint(uint(ActionType.setMaxTxPercent), maxTxPercent)){\r\n            _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n                10**2\r\n            );\r\n        }\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwners {\r\n        if(hasApprovalBool(uint(ActionType.setSwapAndLiquifyEnabled), _enabled)){\r\n            swapAndLiquifyEnabled = _enabled;\r\n            emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n        }        \r\n    }\r\n    \r\n    function withdrawFromCharity(address _sendTo, uint256 _amount) public onlyOwners {\r\n        \r\n        if(hasApproval(uint(ActionType.withdrawFromCharity), _sendTo, _amount)){\r\n            _tokenTransfer(_charityAddress, _sendTo, _amount, false);\r\n        }\r\n        \r\n    }\r\n    \r\n    function withdrawFromCommunity(address _sendTo, uint256 _amount) public onlyOwners {\r\n        \r\n        if(hasApproval(uint(ActionType.withdrawFromCommunity), _sendTo, _amount)){\r\n            _tokenTransfer(_communityAddress, _sendTo, _amount, false);\r\n        }\r\n        \r\n    }\r\n    \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    // Add additional community fee parameter from _getTValues\r\n    // Pass community fee returned into _getRValues\r\n    // Return tCommunity fee\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tFeeToTake) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tFeeToTake, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tFeeToTake);\r\n    }\r\n\r\n    //* Just add calculateCommunityFee function\r\n    //* Subtract from tamount to give tTransferAmount\r\n    //* Return extra community fee amount (additional param, alter calls) \r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tFeeToTake = calculateFeeToTake(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tFeeToTake);\r\n        return (tTransferAmount, tFee, tFeeToTake);\r\n    }\r\n\r\n    //* pass in community fee\r\n    //* Just add line to calculate community rate\r\n    //* Subtract from Total\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tFeeToTake, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rFeeToTake = tFeeToTake.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rFeeToTake);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeFee(uint256 tFeeToTake) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rFeeToTake = tFeeToTake.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rFeeToTake);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tFeeToTake);\r\n    }    \r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateFeeToTake(uint256 _amount) private view returns (uint256) {\r\n        uint256 feeToTake = _communityFee.add(_burnFee).add(_charityFee).add(_liquidityFee);\r\n        return _amount.mul(feeToTake).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _liquidityFee == 0 && _charityFee == 0 && _communityFee == 0 && _burnFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousCharityFee = _charityFee;\r\n        _previousCommunityFee = _communityFee;\r\n        _previousburnFee = _burnFee;\r\n        \r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _charityFee = 0;\r\n        _communityFee = 0;\r\n        _burnFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _charityFee = _previousCharityFee;\r\n        _communityFee = _previousCommunityFee;\r\n        _burnFee = _previousburnFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(from != owner1() && to != owner1())\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        \r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        if(contractTokenBalance >= _maxTxAmount)\r\n        {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n    \r\n    function _getFeeAmounts(uint256 amount) private view returns (uint256, uint256, uint256, uint256) {\r\n        \r\n        uint256 totalFee = _communityFee.add(_burnFee).add(_charityFee).add(_liquidityFee);        \r\n        uint256 liquidityAmount;        \r\n        uint256 communityAmount = amount.mul(_communityFee).div(totalFee);\r\n        uint256 burnAmount = amount.mul(_burnFee).div(totalFee);\r\n        uint256 charityAmount = amount.mul(_charityFee).div(totalFee);\r\n        uint256 threeFeeAmount = communityAmount.add(burnAmount).add(charityAmount);\r\n        \r\n        if(amount > threeFeeAmount){\r\n            liquidityAmount = amount.sub(threeFeeAmount);            \r\n        }\r\n        else {\r\n            liquidityAmount = 0;\r\n        }\r\n        \r\n        return (communityAmount, burnAmount, charityAmount, liquidityAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\n        (uint256 communityAmount,uint256 burnAmount,uint256 charityAmount, uint256 liquidityAmount) = _getFeeAmounts(contractTokenBalance);\r\n        \r\n        // Send to community addie\r\n        if(communityAmount > 0){\r\n            _tokenTransfer(address(this), _communityAddress, communityAmount, false);\r\n        }\r\n        \r\n        // Send to burn addie\r\n        if(burnAmount > 0){\r\n            _tokenTransfer(address(this), _burnAddress, burnAmount, false);\r\n        }\r\n        \r\n        // Send to charity addie\r\n        if(charityAmount > 0){\r\n            _tokenTransfer(address(this), _charityAddress, charityAmount, false);\r\n        }\r\n\r\n        if(liquidityAmount > 0){\r\n            // Remaining left for liquidity\r\n            // split the contract balance into halves\r\n            uint256 half = liquidityAmount.div(2);\r\n            uint256 otherHalf = liquidityAmount.sub(half);\r\n\r\n            // capture the contract's current ETH balance.\r\n            // this is so that we can capture exactly the amount of ETH that the\r\n            // swap creates, and not make the liquidity event include any ETH that\r\n            // has been manually sent to the contract\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            // swap tokens for ETH\r\n            swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n            // how much ETH did we just swap into?\r\n            uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n            // add liquidity to uniswap\r\n            addLiquidity(otherHalf, newBalance);\r\n            \r\n            emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _liquidityTaxAddress,\r\n            block.timestamp\r\n        );\r\n    }  \r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        setWallet(recipient);\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tFeeToTake) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeFee(tFeeToTake);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tFeeToTake) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeFee(tFeeToTake);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tFeeToTake) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeFee(tFeeToTake);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    //* add extra value tCommunity\r\n    //* create function takeCommunityFee\r\n    //* pass in tCommunity to function take Communtiy Fee    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tFeeToTake) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeFee(tFeeToTake);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Wallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTaxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"approveChangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"value1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"name\":\"approveChangeAddressUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"approveChangeBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveChangeUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApproveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApproveBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApproveFunction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApproveUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"}],\"name\":\"setCharityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"}],\"name\":\"setCommunityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"communityFee\",\"type\":\"uint256\"}],\"name\":\"setCommunityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTaxAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sendTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sendTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeBSC", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f5c5947af1978e1098c27333693c739b40f67d70000000000000000000000005b00a1d44ee410647873bda8913186bb806d86a4000000000000000000000000c294b8dd7d48d7cbbd2553f6bd5378a825565417000000000000000000000000cd79ddcdd1c22bad1bfd5764fa0c64eb83ec66950000000000000000000000007b01e069a7134cb417595d90ee9cff12a28f82cb000000000000000000000000f62e0d217b584655f7ddf7d29ab0ed0799b4d361", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7162098e8227eb9aa9c5bb56e7db1d9b6d3f5170d55515a721919e793f3e023"}