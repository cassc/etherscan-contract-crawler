{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _cast(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\ncontract BruteForceBinary is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    // mapping (address => bool) public concertize;\r\n    mapping (address => bool) public eliteList; // excluded fee\r\n    mapping (address => bool) public v1List;\r\n    // mapping (address => bool) public abandonList; // black list\r\n\r\n    uint256 private _totalRate=10000;\r\n    uint256 public saleAmount=0;\r\n    address public burnAddr =0xa2d02894fe2677b135b15E752D94D7A7cbDDEcbF;\r\n\r\n\r\n    address public fundAddr =0xa2d02894fe2677b135b15E752D94D7A7cbDDEcbF;\r\n    address public marketingAddr =0xa2d02894fe2677b135b15E752D94D7A7cbDDEcbF;\r\n    address public lpRewardAddr=0xa2d02894fe2677b135b15E752D94D7A7cbDDEcbF;\r\n    address public returnBackAddr=0xa2d02894fe2677b135b15E752D94D7A7cbDDEcbF;\r\n\r\n\r\n    bool public eliteListSwitch=true;\r\n    bool public v1Switch = true;\r\n\r\n    // buy and remove liquid fee\r\n    bool public brSwitch=true;\r\n    uint256 public brLpRewardRate=0; //5% LP reward\r\n    uint256 public brFundRate=0; //1% fund\r\n    uint256 public brMarketingRate=0; //1% marketing\r\n    uint256 public brBurnRate=0; //3%\r\n    uint256 public brReturnRate=0; //3% return\r\n    // sell and add liquid fee\r\n    bool public saSwitch=true;\r\n    uint256 public saLpRewardRate=0; //5% LP reward\r\n    uint256 public saFundRate=0; //1% fund\r\n    uint256 public saMarketingRate=0; //1% marketing\r\n    uint256 public saBurnRate=0; //3%\r\n    uint256 public saReturnRate=0; //3% add lp\r\n\r\n    //transfer\r\n    bool public transSwitch=true;\r\n    uint256 public transLpRewardRate=0; //5% LP reward\r\n    uint256 public transFundRate=0; //1% fund\r\n    uint256 public transMarketingRate=0; //1% marketing\r\n    uint256 public transBurnRate=0; //3%\r\n    uint256 public transReturnRate=0; //3% add lp\r\n\r\n    uint256 public speRetention = 100;\r\n\r\n    bool private swapping;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    // \u4e3b\u7f51\u5730\u5740\r\n    address pancakeSwapRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // pancakeSwapRouter \u7684\u8def\u7531\u5730\u5740\uff0c\u4e3b\u8981\u662f\u6267\u884c getAmountsOut \u65b9\u6cd5\r\n    address pancakeSwapFactory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73; // pancakeswapFactory \u7684\u5de5\u5382\u5408\u7ea6\uff0c\u4e3b\u8981\u662f\u6267\u884c getPair \u65b9\u6cd5\uff0c\u627e\u5230\u501f\u5e01\u7684 pair \u5730\u5740\r\n    // address honey = 0xA335D0B8e207cD054D7DeA538398E68d4D41eb33;\r\n    address USDT = 0x55d398326f99059fF775485246999027B3197955; //USDT \u5730\u5740\r\n\r\n    // \u6d4b\u8bd5\u7f51\u5730\u5740\r\n    // address pancakeSwapRouter = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3; // pancakeSwapRouter \u7684\u8def\u7531\u5730\u5740\uff0c\u4e3b\u8981\u662f\u6267\u884c getAmountsOut \u65b9\u6cd5\r\n    // address pancakeSwapFactory = 0xB7926C0430Afb07AA7DEfDE6DA862aE0Bde767bc; // pancakeswapFactory \u7684\u5de5\u5382\u5408\u7ea6\uff0c\u4e3b\u8981\u662f\u6267\u884c getPair \u65b9\u6cd5\uff0c\u627e\u5230\u501f\u5e01\u7684 pair \u5730\u5740\r\n    //address honey = 0x02A008Dc2681d699f5B06dF9f479bCAC36dCB2DE;\r\n    // address USDT = 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684; // BSC test\u7684 USDT \u5730\u5740\r\n    //address MGS = 0xD3B21a0197de488Ca3B7fd9F7Eb6f9cE6aE4EbfA;\r\n    // address TransferAddress = 0x111;//\u4e2d\u8f6c\u5730\u5740\r\n\r\n    IUniswapV2Router01 public router = IUniswapV2Router01(pancakeSwapRouter);\r\n    IUniswapV2Factory public factory = IUniswapV2Factory(pancakeSwapFactory);\r\n\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n\r\n    // modifier onlyConcertize() {\r\n    //     require(concertize[_msgSender()], \"Operation: caller is not the concertize\");\r\n    //     _;\r\n    // }\r\n\r\n    constructor() payable ERC20(\"Best Friend's Brother\", \"BFB\")  {\r\n        uint256 totalSupply = 2000000000*1e18;\r\n        swapTokensAtAmount = totalSupply.mul(1).div(10**8); // 0.001%;\r\n        // concertize[_msgSender()]=true;\r\n        // Fee Exempt\r\n        eliteList[_msgSender()]=true;\r\n        eliteList[address(this)] =true;\r\n\r\n        _cast(0xa402d9452B517939EFBcdf184362D4Ba2e7Fc7ea, 500000000*1e18);\r\n        address poolReceiver=0xa402d9452B517939EFBcdf184362D4Ba2e7Fc7ea;\r\n        _cast(poolReceiver, 500000000*1e18);\r\n        address airdropReceiver=0xa402d9452B517939EFBcdf184362D4Ba2e7Fc7ea;\r\n        _cast(airdropReceiver, 500000000*1e18);\r\n        address eliteListeceiver=0xa402d9452B517939EFBcdf184362D4Ba2e7Fc7ea;\r\n        eliteList[0xa402d9452B517939EFBcdf184362D4Ba2e7Fc7ea]=true;\r\n        _cast(eliteListeceiver, 500000000*1e18);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function setSaleAmount(uint256 amount) public onlyOwner {\r\n        saleAmount = amount;\r\n    }\r\n\r\n    function setSperetention(uint256 speretention) public onlyOwner {\r\n        speRetention = speretention;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\r\n        swapTokensAtAmount = amount;\r\n    }\r\n\r\n    function setBurnArr(address _burnAddr) public onlyOwner {\r\n        burnAddr=_burnAddr;\r\n    }\r\n\r\n    // function setConcertize(address addr, bool state) public onlyOwner {\r\n    //     concertize[addr] = state;\r\n    // }\r\n\r\n    function seteliteList(address addr, bool state) public onlyOwner {\r\n        eliteList[addr] = state;\r\n    }\r\n\r\n    // function setabandonList(address addr, bool state) public onlyOwner {\r\n    //     abandonList[addr] = state;\r\n    // }\r\n\r\n    function setV1List(address addr, bool state) public onlyOwner {\r\n        v1List[addr] = state;\r\n    }\r\n\r\n    // Set switch\r\n    function setSwitch(bool _brSwitch,bool _saSwitch,bool _transSwitch) public onlyOwner {\r\n        brSwitch=_brSwitch;\r\n        saSwitch=_saSwitch;\r\n        transSwitch=_transSwitch;\r\n    }\r\n\r\n    // Set member switch\r\n    function setUseSwitch(bool _eliteListSwitch,bool _v1Switch) public onlyOwner {\r\n        eliteListSwitch=_eliteListSwitch;\r\n        v1Switch=_v1Switch;\r\n    }\r\n\r\n    function setBRFeeRate(uint256 _brLpRewardRate,uint256 _brFundRate,uint256 _brbrMarketingRate,uint256 _brBurnRate,uint256 _brReturnRate) public onlyOwner {\r\n        brLpRewardRate = _brLpRewardRate;\r\n        brFundRate = _brFundRate;\r\n        brMarketingRate= _brbrMarketingRate;\r\n        brBurnRate = _brBurnRate;\r\n        brReturnRate = _brReturnRate;\r\n    }\r\n\r\n    function setSAFeeRate(uint256 _saLpRewardRate,uint256 _saFundRate,uint256 _saMarketingRate,uint256 _saBurnRate,uint256 _saReturnRate) public onlyOwner {\r\n        saLpRewardRate = _saLpRewardRate;\r\n        saFundRate = _saFundRate;\r\n        saMarketingRate= _saMarketingRate;\r\n        saBurnRate = _saBurnRate;\r\n        saReturnRate = _saReturnRate;\r\n    }\r\n\r\n    function setTransFeeRate(uint256 _transLpRewardRate,uint256 _transFundRate,uint256 _transMarketingRate,uint256 _transBurnRate,uint256 _transReturnRate) public onlyOwner {\r\n        transLpRewardRate = _transLpRewardRate;\r\n        transFundRate = _transFundRate;\r\n        transMarketingRate= _transMarketingRate;\r\n        transBurnRate = _transBurnRate;\r\n        transReturnRate = _transReturnRate;\r\n    }\r\n\r\n    function setReceiver(address _marketingAddr,address _fundAddr,address _returnBackAddr,address _lpRewardAddr) public onlyOwner {\r\n        marketingAddr=_marketingAddr;\r\n        fundAddr= _fundAddr;\r\n        returnBackAddr = _returnBackAddr;\r\n        lpRewardAddr = _lpRewardAddr;\r\n    }\r\n\r\n    function _getTypeFee(address _sender, address _recipient) private view returns (string memory, bool) {\r\n        bool takeFee = true;\r\n        string memory tradeType = \"\";\r\n        if (!Address.isContract(_sender) && !Address.isContract(_recipient)){\r\n            tradeType=\"transfer\";\r\n            if(!transSwitch){\r\n                takeFee = false;\r\n            }\r\n        } else if (Address.isContract(_sender) && !Address.isContract(_recipient)){\r\n            tradeType=\"buy\";\r\n            if(!brSwitch){\r\n                takeFee = false;\r\n            }\r\n        } else if (!Address.isContract(_sender) && Address.isContract(_recipient) ){\r\n            tradeType=\"sale\";\r\n            if(!saSwitch){\r\n                takeFee = false;\r\n            }\r\n        } else if (Address.isContract(_sender) && Address.isContract(_recipient)){\r\n            tradeType=\"contract\";\r\n        }\r\n        if(eliteList[_sender] || eliteList[_recipient]) {\r\n            takeFee = false; //excluded fee\r\n        }\r\n        return(tradeType,takeFee);\r\n    }\r\n\r\n    function _calculateSaleFee(uint256 _amount) private view returns (uint256) {\r\n        uint256 saleFee=saLpRewardRate+saFundRate+saBurnRate+saReturnRate+saMarketingRate;\r\n        return _amount.mul(saleFee).div(_totalRate);\r\n    }\r\n\r\n    function _calculateBuyFee(uint256 _amount) private view returns (uint256) {\r\n        uint256 buyFee=brLpRewardRate+brFundRate+brBurnRate+brReturnRate+brMarketingRate;\r\n        return _amount.mul(buyFee).div(_totalRate);\r\n    }\r\n\r\n    function _calculateTransFee(uint256 _amount) private view returns (uint256) {\r\n        uint256 transFee=transLpRewardRate+transFundRate+transBurnRate+transReturnRate+transMarketingRate;\r\n        return _amount.mul(transFee).div(_totalRate);\r\n    }\r\n\r\n    function _tokenTransfer(address _sender, address _recipient, uint256 _amount,string memory _tradeType,bool _takeFee) private {\r\n        uint256 feeAmount=0;\r\n        uint256 toAmount=_amount;\r\n        if(isEqual(_tradeType,\"buy\") && _takeFee){\r\n            feeAmount=_calculateBuyFee(_amount);\r\n            if(feeAmount>0){\r\n                _takeBuyFee(_sender, feeAmount);\r\n            }\r\n        }else if((isEqual(_tradeType,\"sale\") || isEqual(_tradeType,\"contract\")) && _takeFee){\r\n            feeAmount=_calculateSaleFee(_amount);\r\n            if(feeAmount>0){\r\n                _takeSaleFee(_sender, feeAmount);\r\n            }\r\n        }else if(isEqual(_tradeType,\"transfer\") && _takeFee){\r\n            feeAmount=_calculateTransFee(_amount);\r\n            if(feeAmount>0){\r\n                _takeTransFee(_sender, feeAmount);\r\n            }\r\n        }\r\n        toAmount=toAmount.sub(feeAmount);\r\n        super._transfer(_sender, _recipient, toAmount);\r\n    }\r\n\r\n    function _takeBuyFee(address _sender,uint256 _feeAmount) private {\r\n        uint256 buyTotalRate=brLpRewardRate+brFundRate+brBurnRate+brReturnRate+brMarketingRate;\r\n        uint256 fundAmount= _feeAmount.mul(brFundRate).div(buyTotalRate);\r\n        uint256 marketAmount= _feeAmount.mul(brMarketingRate).div(buyTotalRate);\r\n        uint256 burnAmount= _feeAmount.mul(brBurnRate).div(buyTotalRate);\r\n        if (fundAmount>0){\r\n            super._transfer(_sender, fundAddr, fundAmount);\r\n        }\r\n        if (marketAmount>0){\r\n            super._transfer(_sender, marketingAddr, marketAmount);\r\n        }\r\n        if (burnAmount>0){\r\n            super._transfer(_sender, burnAddr, burnAmount);\r\n        }\r\n        uint256 returnAmount= _feeAmount.mul(brReturnRate).div(buyTotalRate);\r\n        uint256 lpRewardAmount= _feeAmount.mul(brLpRewardRate).div(buyTotalRate);\r\n        if (returnAmount>0){\r\n            super._transfer(_sender, returnBackAddr, returnAmount);\r\n        }\r\n        if (lpRewardAmount>0){\r\n            super._transfer(_sender, lpRewardAddr, lpRewardAmount);\r\n        }\r\n    }\r\n\r\n    function _takeSaleFee(address _sender,uint256 _feeAmount) private {\r\n        uint256 sellTotalRate=saLpRewardRate+saFundRate+saBurnRate+saReturnRate+saMarketingRate;\r\n        uint256 fundAmount= _feeAmount.mul(saFundRate).div(sellTotalRate);\r\n        uint256 marketAmount= _feeAmount.mul(saMarketingRate).div(sellTotalRate);\r\n        uint256 burnAmount= _feeAmount.mul(saBurnRate).div(sellTotalRate);\r\n        if (fundAmount>0){\r\n            super._transfer(_sender, fundAddr, fundAmount);\r\n        }\r\n        if (marketAmount>0){\r\n            super._transfer(_sender, marketingAddr, marketAmount);\r\n        }\r\n        if (burnAmount>0){\r\n            super._transfer(_sender, burnAddr, burnAmount);\r\n        }\r\n        uint256 returnAmount= _feeAmount.mul(saReturnRate).div(sellTotalRate);\r\n        uint256 lpRewardAmount= _feeAmount.mul(saLpRewardRate).div(sellTotalRate);\r\n        if (returnAmount>0){\r\n            super._transfer(_sender, returnBackAddr, returnAmount);\r\n        }\r\n        if (lpRewardAmount>0){\r\n             // uint[] memory amounts;\r\n            // address[] memory path = new address[](2);\r\n            // path[0] = address(this);\r\n            // path[1] = USDT;\r\n            // // address pairAddress = factory.getPair(path[0], path[1]);\r\n            // // IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            // uint[] memory amountsOut = router.getAmountsOut(lpRewardAmount, path);\r\n            // router.swapExactTokensForTokens(lpRewardAmount, amountsOut[amountsOut.length-1]*997/1000, path, lpRewardAddr, block.timestamp);\r\n            super._transfer(_sender,lpRewardAddr, lpRewardAmount);\r\n        }\r\n    }\r\n\r\n    function _takeTransFee(address _sender,uint256 _feeAmount) private {\r\n        uint256 transTotalRate=transLpRewardRate+transFundRate+transBurnRate+transReturnRate+transMarketingRate;\r\n        uint256 fundAmount= _feeAmount.mul(transFundRate).div(transTotalRate);\r\n        uint256 marketAmount= _feeAmount.mul(transMarketingRate).div(transTotalRate);\r\n        uint256 burnAmount= _feeAmount.mul(transBurnRate).div(transTotalRate);\r\n        if (fundAmount>0){\r\n            super._transfer(_sender, fundAddr, fundAmount);\r\n        }\r\n        if (marketAmount>0){\r\n            super._transfer(_sender, marketingAddr, marketAmount);\r\n        }\r\n        if (burnAmount>0){\r\n            super._transfer(_sender, burnAddr, burnAmount);\r\n        }\r\n        uint256 returnAmount= _feeAmount.mul(transReturnRate).div(transTotalRate);\r\n        uint256 lpRewardAmount= _feeAmount.mul(transLpRewardRate).div(transTotalRate);\r\n        if (returnAmount>0){\r\n            super._transfer(_sender, returnBackAddr, returnAmount);\r\n        }\r\n        if (lpRewardAmount>0){\r\n            super._transfer(_sender, lpRewardAddr, lpRewardAmount);\r\n        }\r\n    }\r\n\r\n    function isEqual(string memory a, string memory b) private pure returns (bool) {\r\n        bytes memory aa = bytes(a);\r\n        bytes memory bb = bytes(b);\r\n        if (aa.length != bb.length) return false;\r\n        for(uint i = 0; i < aa.length; i ++) {\r\n            if(aa[i] != bb[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        // require(!abandonList[from],\"ERC20: in black list\");\r\n\r\n        if(amount == 0) { super._transfer(from, to, 0); return;}\r\n        (string memory tradeType,bool takeFee)=_getTypeFee(from,to);\r\n        if (!isEqual(tradeType,\"transfer\")){\r\n            if (eliteListSwitch) {\r\n                require(eliteList[from]|| eliteList[to],\"ERC20: Only white list could operation\");\r\n            } else{\r\n                if(v1Switch) {\r\n                    require(v1List[from]|| v1List[to],\"ERC20: Only v1 list could operation\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if(isEqual(tradeType,\"sale\")){\r\n            if(saleAmount>0){\r\n                amount=saleAmount;\r\n            }\r\n            uint256 limitAmount = balanceOf(from).mul(speRetention).div(100);\r\n            if(amount > limitAmount){\r\n                amount = limitAmount;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount,tradeType,takeFee);\r\n\r\n    }\r\n\r\n    function importeliteList(address[] calldata _accounts) public onlyOwner{\r\n        for(uint i=0;i<_accounts.length;i++){\r\n            eliteList[_accounts[i]]=true;\r\n        }\r\n    }\r\n\r\n    function importV1(address[] calldata _accounts) public onlyOwner{\r\n        for(uint i=0;i<_accounts.length;i++){\r\n            v1List[_accounts[i]]=true;\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brLpRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brMarketingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brReturnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eliteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eliteListSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"importV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"importeliteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBackAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saLpRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saMarketingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saReturnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_brLpRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_brFundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_brbrMarketingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_brBurnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_brReturnRate\",\"type\":\"uint256\"}],\"name\":\"setBRFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddr\",\"type\":\"address\"}],\"name\":\"setBurnArr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_returnBackAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpRewardAddr\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saLpRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saFundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saMarketingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saBurnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saReturnRate\",\"type\":\"uint256\"}],\"name\":\"setSAFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSaleAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speretention\",\"type\":\"uint256\"}],\"name\":\"setSperetention\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_brSwitch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_saSwitch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transSwitch\",\"type\":\"bool\"}],\"name\":\"setSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transLpRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transFundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transMarketingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transBurnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transReturnRate\",\"type\":\"uint256\"}],\"name\":\"setTransFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_eliteListSwitch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_v1Switch\",\"type\":\"bool\"}],\"name\":\"setUseSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setV1List\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"seteliteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"speRetention\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transLpRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transMarketingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transReturnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v1List\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Switch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BruteForceBinary", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c046d6299503c181bf0bac2db80f9d32fa12a77ab73f56042b1be2ae496cbbb3"}