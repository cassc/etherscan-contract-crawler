{"SourceCode": "/**\r\nPepeFuego SmartContract \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v,\r\n                    bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out,\r\n               uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1,\r\n                                                  uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\r\n                \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount,\"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount,\"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    function withdrawableDividendOf(address _owner) external view returns (uint256);\r\n    function withdrawnDividendOf(address _owner) external view returns (uint256);\r\n    function accumulativeDividendOf(address _owner) external view returns (uint256);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n    function distributeDividends() external payable;\r\n    function withdrawDividend() external;\r\n\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\ninterface ISwissArmyInterface {\r\n    function setLongTerm(address account, uint256 amount) external;\r\n    function removeLongTerm(address account) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0),\"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 2100;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 2100);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired,\r\n                          uint256 amountAMin, uint256 amountBMin, address to, \r\n                          uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin,\r\n                             uint256 amountETHMin, address to, uint256 deadline) external payable\r\n                             returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin,\r\n                             uint256 amountBMin, address to, uint256 deadline) external \r\n                             returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin,\r\n                                uint256 amountETHMin, address to, uint256 deadline) external \r\n                                returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin,\r\n                                       uint256 amountBMin, address to, uint256 deadline, bool approveMax,\r\n                                       uint8 v, bytes32 r, bytes32 s) external \r\n                                       returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin,\r\n                                          uint256 amountETHMin, address to, uint256 deadline, bool approveMax,\r\n                                          uint8 v, bytes32 r, bytes32 s) external \r\n                                          returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path,\r\n                                      address to, uint256 deadline) external \r\n                                      returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path,\r\n                                      address to, uint256 deadline) external \r\n                                      returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, \r\n                                   uint256 deadline) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path,\r\n                                   address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path,\r\n                                   address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to,\r\n                                   uint256 deadline) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin,\r\n                                                             uint256 amountETHMin, address to, uint256 deadline) \r\n                                                             external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin,\r\n                                                                       uint256 amountETHMin, address to, uint256 deadline,\r\n                                                                       bool approveMax, uint8 v, bytes32 r, bytes32 s) \r\n                                                                       external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin,\r\n                                                                   address[] calldata path, address to, uint256 deadline) \r\n                                                                   external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path,\r\n                                                                address to, uint256 deadline) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path,\r\n                                                                address to, uint256 deadline) external;\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 internal constant magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    function distributeDividends() public payable override {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(\r\n                msg.value\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal virtual returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success, ) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view override returns (uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view override returns (uint256) {\r\n        return\r\n            magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n            .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } \r\n        else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract PepeFuego is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public SwissArmyContract;\r\n    address public NFTRewardsContract;\r\n    bool private swapping;\r\n    bool public tradingEnabled = false;\r\n\r\n    uint256 public sellAmount = 1;\r\n    uint256 public buyAmount = 1;\r\n\r\n    uint256 private totalSellFees;\r\n    uint256 private totalBuyFees;\r\n\r\n    PepeFuegoDividendTracker public dividendTracker;\r\n\r\n    address payable public marketingWallet;\r\n\r\n    // Max tx, dividend threshold and tax variables\r\n    uint256 public maxWallet;\r\n    uint256 public maxTX;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public sellRewardsFee;\r\n    uint256 public sellDeadFees;\r\n    uint256 public sellMarketingFees;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public buyDeadFees;\r\n    uint256 public buyMarketingFees;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyRewardsFee;\r\n    uint256 public transferFee;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    // gas for processing auto claim dividends \r\n    uint256 public gasForProcessing = 300000;\r\n\r\n    // exlcude from fees and limits\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    //staking variables\r\n    mapping(address => uint256) public tokensStaked1Week;\r\n    mapping(address => uint256) public tokensStaked1Month;\r\n    mapping(address => uint256) public tokensStaked6Months;\r\n    mapping(address => bool) public _isStaked1Week; \r\n    mapping(address => bool) public _isStaked1Month;  \r\n    mapping(address => bool) public _isStaked6Months;\r\n    mapping(address => uint256) public _staked1WeekTimestamp;\r\n    mapping(address => uint256) public _staked1MonthTimestamp;\r\n    mapping(address => uint256) public _staked6MonthsTimestamp;\r\n    \r\n    mapping(address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n    // Limit variables for bot protection\r\n    bool public limitsInEffect = true; //boolean used to turn limits on and off\r\n    uint256 private gasPriceLimit; \r\n    mapping(address => uint256) private _holderLastTransferBlock; // for 1 tx per block\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // for sell cooldown timer\r\n    uint256 public launchblock;\r\n    uint256 public launchtimestamp;\r\n    uint256 public delay;\r\n    uint256 public cooldowntimer = 60; //default cooldown 60s\r\n\r\n    event EnableSwapAndLiquify(bool enabled);\r\n    event SetPreSaleWallet(address wallet);\r\n    event updateMarketingWallet(address wallet);\r\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    event TradingEnabled();\r\n    event UpdateFees(uint256 sellDeadFees, uint256 sellMarketingFees, uint256 sellLiquidityFee, uint256 sellRewardsFee,\r\n                     uint256 buyDeadFees, uint256 buyMarketingFees, uint256 buyLiquidityFee, uint256 buyRewardsFee);\r\n\r\n    event UpdateTransferFee(uint256 transferFee);\r\n    event Airdrop(address holder, uint256 amount);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event SendDividends(uint256 amount, uint256 opAmount, bool success);\r\n    event ProcessedDividendTracker(uint256 iterations, uint256 claims, uint256 lastProcessedIndex,\r\n                                   bool indexed automatic, uint256 gas, address indexed processor);\r\n\r\n    event UpdatePayoutToken(address token);\r\n\r\n    constructor() ERC20(\"PepeFuego\", \"PPFG\") {\r\n        marketingWallet = payable(0xEfB4F2B26A58F86BB2f9Cc1302565f91160D29CB);\r\n        address router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n        buyDeadFees = 50;\r\n        sellDeadFees = 50;\r\n        buyMarketingFees = 100;\r\n        sellMarketingFees = 100;\r\n        buyLiquidityFee = 150;\r\n        sellLiquidityFee = 150;\r\n        buyRewardsFee = 300;\r\n        sellRewardsFee = 300;\r\n        transferFee = 300;\r\n\r\n        totalBuyFees = buyRewardsFee.add(buyLiquidityFee).add(buyMarketingFees);\r\n        totalSellFees = sellRewardsFee.add(sellLiquidityFee).add(sellMarketingFees);\r\n\r\n        dividendTracker = new PepeFuegoDividendTracker(payable(this), router, 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82,\r\n                                                   \"PepeFuegoTRACKER\", \"PPFGTRACKER\");\r\n\r\n        uniswapV2Router = IUniswapV2Router02(router);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(DEAD);\r\n        dividendTracker.excludedFromDividends(address(0));\r\n        dividendTracker.excludeFromDividends(router);\r\n        dividendTracker.excludeFromDividends(marketingWallet);\r\n        dividendTracker.excludeFromDividends(owner());\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(dividendTracker)] = true;\r\n        _isExcludedFromFees[address(marketingWallet)] = true;\r\n        _isExcludedFromFees[msg.sender] = true;\r\n\r\n        uint256 totalTokenSupply = (100_000_000) * (10**18);\r\n        _mint(owner(), totalTokenSupply); // only time internal mint function is ever called is to create supply\r\n        swapTokensAtAmount = totalTokenSupply / 2000; // 0.05%;\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n        canTransferBeforeTradingIsEnabled[address(this)] = true;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // writeable function to enable trading, can only enable, trading can never be disabled\r\n    function enableTrading(uint256 initialMaxGwei, uint256 initialMaxWallet, uint256 initialMaxTX,\r\n                           uint256 setDelay) external onlyOwner {\r\n        initialMaxWallet = initialMaxWallet * (10**18);\r\n        initialMaxTX = initialMaxTX * (10**18);\r\n        require(!tradingEnabled);\r\n        require(initialMaxGwei >= 5, \"cannot set below 5\");\r\n        require(initialMaxWallet >= _totalSupply / 1000,\"cannot set below 0.1%\");\r\n        require(initialMaxTX >= _totalSupply / 1000,\"cannot set below 0.1%\");\r\n        maxWallet = initialMaxWallet;\r\n        maxTX = initialMaxTX;\r\n        gasPriceLimit = initialMaxGwei * 1 gwei;\r\n        tradingEnabled = true;\r\n        launchblock = block.number;\r\n        launchtimestamp = block.timestamp;\r\n        delay = setDelay;\r\n        emit TradingEnabled();\r\n    }\r\n    // use for pre sale wallet, adds all exclusions to it\r\n    function setPresaleWallet(address wallet) external onlyOwner {\r\n        canTransferBeforeTradingIsEnabled[wallet] = true;\r\n        _isExcludedFromFees[wallet] = true;\r\n        dividendTracker.excludeFromDividends(wallet);\r\n        emit SetPreSaleWallet(wallet);\r\n    }\r\n\r\n    function setMarketingWallet(address wallet) external onlyOwner {\r\n        _isExcludedFromFees[wallet] = true;\r\n        dividendTracker.excludeFromDividends(wallet);\r\n        marketingWallet = payable(wallet);\r\n        emit updateMarketingWallet(wallet);\r\n    }\r\n    \r\n    // exclude a wallet from fees \r\n    function setExcludeFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    // exclude from dividends (rewards)\r\n    function setExcludeDividends(address account) public onlyOwner {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n\r\n    // include in dividends \r\n    function setIncludeDividends(address account) public onlyOwner {\r\n        dividendTracker.includeFromDividends(account);\r\n        dividendTracker.setBalance(account, getStakingBalance(account));\r\n    }\r\n\r\n    //allow a wallet to trade before trading enabled\r\n    function setCanTransferBefore(address wallet, bool enable) external onlyOwner {\r\n        canTransferBeforeTradingIsEnabled[wallet] = enable;\r\n    }\r\n\r\n    // turn limits on and off\r\n    function setLimitsInEffect(bool value) external onlyOwner {\r\n        limitsInEffect = value;\r\n    }\r\n\r\n    // set max GWEI\r\n    function setGasPriceLimit(uint256 GWEI) external onlyOwner {\r\n        require(GWEI >= 50, \"can never be set lower than 50\");\r\n        gasPriceLimit = GWEI * 1 gwei;\r\n    }\r\n\r\n    // set cooldown timer, can only be between 0 and 300 seconds (5 mins max)\r\n    function setcooldowntimer(uint256 value) external onlyOwner {\r\n        require(value <= 300, \"cooldown timer cannot exceed 5 minutes\");\r\n        cooldowntimer = value;\r\n    }\r\n\r\n    // set max wallet, can not be lower than 0.1% of supply\r\n    function setmaxWallet(uint256 value) external onlyOwner {\r\n        value = value * (10**18);\r\n        require(value >= _totalSupply / 1000, \"max wallet cannot be set to less than 0.1%\");\r\n        maxWallet = value;\r\n    }\r\n\r\n    // set max tx, can not be lower than 0.1% of supply\r\n    function setmaxTX(uint256 value) external onlyOwner {\r\n        value = value * (10**18);\r\n        require(value >= _totalSupply / 1000, \"max tx cannot be set to less than 0.1%\");\r\n        maxTX = value;\r\n    }\r\n\r\n    // rewards threshold\r\n    function setSwapTriggerAmount(uint256 amount) public onlyOwner {\r\n        swapTokensAtAmount = amount * (10**18);\r\n    }\r\n\r\n    function enableSwapAndLiquify(bool enabled) public onlyOwner {\r\n        require(swapAndLiquifyEnabled != enabled);\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit EnableSwapAndLiquify(enabled);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setAllowCustomTokens(bool allow) public onlyOwner {\r\n        dividendTracker.setAllowCustomTokens(allow);\r\n    }\r\n\r\n    function setAllowAutoReinvest(bool allow) public onlyOwner {\r\n        dividendTracker.setAllowAutoReinvest(allow);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 1000000);\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function transferAdmin(address newOwner) public onlyOwner {\r\n        dividendTracker.excludeFromDividends(newOwner);\r\n        _isExcludedFromFees[newOwner] = true;\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    function updateTransferFee(uint256 newTransferFee) public onlyOwner {\r\n        require (newTransferFee <= 1000, \"transfer fee cannot exceed 10%\");\r\n        transferFee = newTransferFee;\r\n        emit UpdateTransferFee(transferFee);\r\n    }\r\n\r\n    function updateFees(uint256 deadBuy, uint256 deadSell, uint256 marketingBuy, uint256 marketingSell,\r\n                        uint256 liquidityBuy, uint256 liquiditySell, uint256 RewardsBuy, uint256 RewardsSell) \r\n                        public onlyOwner {\r\n\r\n        require(deadBuy <= 100 && deadSell <= 100, \"dead fees cannot exceed 1%\");\r\n        \r\n        buyDeadFees = deadBuy;\r\n        buyMarketingFees = marketingBuy;\r\n        buyLiquidityFee = liquidityBuy;\r\n        buyRewardsFee = RewardsBuy;\r\n        sellDeadFees = deadSell;\r\n        sellMarketingFees = marketingSell;\r\n        sellLiquidityFee = liquiditySell;\r\n        sellRewardsFee = RewardsSell;\r\n\r\n        totalSellFees = sellRewardsFee.add(sellLiquidityFee).add(sellMarketingFees);\r\n\r\n        totalBuyFees = buyRewardsFee.add(buyLiquidityFee).add(buyMarketingFees);\r\n\r\n        require(totalSellFees <= 1000 && totalBuyFees <= 1000, \"total fees cannot exceed 10% sell or buy\");\r\n\r\n        emit UpdateFees(sellDeadFees, sellMarketingFees, sellLiquidityFee, sellRewardsFee, buyDeadFees,\r\n                        buyMarketingFees, buyLiquidityFee, buyRewardsFee);\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) public view returns (uint256) {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account) external view returns (address, int256, int256, uint256,\r\n                                                                             uint256, uint256) {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index) external view returns (address, int256, int256,\r\n                                                                                  uint256, uint256, uint256) {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function setAutoClaim(bool value) external {\r\n        dividendTracker.setAutoClaim(msg.sender, value);\r\n    }\r\n\r\n    function setReinvest(bool value) external {\r\n        dividendTracker.setReinvest(msg.sender, value);\r\n    }\r\n\r\n    function setDividendsPaused(bool value) external onlyOwner {\r\n        dividendTracker.setDividendsPaused(value);\r\n    }\r\n\r\n    function isExcludedFromAutoClaim(address account) external view returns (bool) {\r\n        return dividendTracker.isExcludedFromAutoClaim(account);\r\n    }\r\n\r\n    function isReinvest(address account) external view returns (bool) {\r\n        return dividendTracker.isReinvest(account);\r\n    }\r\n\r\n    function StakeFor1Week(uint256 amount) public {\r\n        amount = amount * 10**18;\r\n        tokensStaked1Week[msg.sender] = tokensStaked1Week[msg.sender] + amount;\r\n        if (!_isStaked1Week[msg.sender]) {\r\n            _isStaked1Week[msg.sender] = true;\r\n        }\r\n        _staked1WeekTimestamp[msg.sender] = block.timestamp;\r\n        dividendTracker.setBalance(msg.sender, getStakingBalance(msg.sender));\r\n        \r\n    }\r\n\r\n    function StakeFor1Month(uint256 amount) public {\r\n        amount = amount * 10**18;\r\n        tokensStaked1Month[msg.sender] = tokensStaked1Month[msg.sender] + amount;\r\n        if (!_isStaked1Month[msg.sender]) {\r\n            _isStaked1Month[msg.sender] = true;\r\n        }\r\n        _staked1MonthTimestamp[msg.sender] = block.timestamp;\r\n        dividendTracker.setBalance(msg.sender, getStakingBalance(msg.sender));\r\n    }\r\n\r\n    function StakeFor6Months(uint256 amount) public {\r\n        amount = amount * 10**18;\r\n        tokensStaked6Months[msg.sender] = tokensStaked6Months[msg.sender] + amount;\r\n        if (!_isStaked6Months[msg.sender]) {\r\n            _isStaked6Months[msg.sender] = true;\r\n        }\r\n        _staked6MonthsTimestamp[msg.sender] = block.timestamp;\r\n\r\n        dividendTracker.setBalance(msg.sender, getStakingBalance(msg.sender));\r\n\r\n        if (SwissArmyContract != address(0)) {\r\n        ISwissArmyInterface SwissArmy = ISwissArmyInterface(SwissArmyContract);\r\n        SwissArmy.setLongTerm(msg.sender, tokensStaked6Months[msg.sender]);\r\n        }\r\n    }\r\n\r\n    function Unstake() public {\r\n        if (_isStaked1Week[msg.sender] && block.timestamp >= _staked1WeekTimestamp[msg.sender] + 1 weeks) {\r\n            _isStaked1Week[msg.sender] = false;\r\n            _staked1WeekTimestamp[msg.sender] = 0;\r\n            tokensStaked1Week[msg.sender] = 0;\r\n        }\r\n\r\n        if (_isStaked1Month[msg.sender] && block.timestamp >= _staked1MonthTimestamp[msg.sender] + 4 weeks) {\r\n            _isStaked1Month[msg.sender] = false;\r\n            _staked1MonthTimestamp[msg.sender] = 0;\r\n            tokensStaked1Month[msg.sender] = 0;\r\n        }\r\n\r\n        if (_isStaked6Months[msg.sender] && block.timestamp >= _staked6MonthsTimestamp[msg.sender] + 24 weeks) {\r\n            _isStaked6Months[msg.sender] = false;\r\n            _staked6MonthsTimestamp[msg.sender] = 0;\r\n            tokensStaked6Months[msg.sender] = 0;\r\n\r\n            if (SwissArmyContract != address(0)) {\r\n            ISwissArmyInterface SwissArmy = ISwissArmyInterface(SwissArmyContract);\r\n            SwissArmy.removeLongTerm(msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 RewardsFee;\r\n        uint256 deadFees;\r\n        uint256 marketingFees;\r\n        uint256 liquidityFee;\r\n\r\n        if (!canTransferBeforeTradingIsEnabled[from]) {\r\n            require(tradingEnabled, \"Trading has not yet been enabled\");\r\n        }\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (to == DEAD) {\r\n            super._transfer(from, to, amount);\r\n            _totalSupply = _totalSupply.sub(amount);\r\n            return;\r\n        }\r\n\r\n        \r\n        else if (!swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            bool isSelling = automatedMarketMakerPairs[to];\r\n            bool isBuying = automatedMarketMakerPairs[from];\r\n\r\n            if (_isStaked1Week[from] || _isStaked1Month[from] || _isStaked6Months[from]) {\r\n                    require(balanceOf(from) - amount >= tokensStaked1Week[from] + tokensStaked1Month[from]\r\n                            + tokensStaked6Months[from],\"tokens are staked\");\r\n                }\r\n\r\n            if (!isBuying && !isSelling) {\r\n                if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n                    uint256 tFees = amount.mul(transferFee).div(10000);\r\n                    amount = amount.sub(tFees);\r\n                    super._transfer(from, DEAD, tFees);\r\n                    super._transfer(from, to, amount);\r\n                    dividendTracker.setBalance(from, getStakingBalance(from));\r\n                    dividendTracker.setBalance(to, getStakingBalance(to));\r\n                    return;\r\n                }\r\n                else {\r\n                    super._transfer(from, to, amount);\r\n                    dividendTracker.setBalance(from, getStakingBalance(from));\r\n                    dividendTracker.setBalance(to, getStakingBalance(to));\r\n                    return;\r\n                }\r\n            }\r\n\r\n            else if (isSelling) {\r\n                RewardsFee = sellRewardsFee;\r\n                deadFees = sellDeadFees;\r\n                marketingFees = sellMarketingFees;\r\n                liquidityFee = sellLiquidityFee;\r\n\r\n                if (limitsInEffect) {\r\n                require(block.timestamp >= _holderLastTransferTimestamp[tx.origin] + cooldowntimer,\r\n                        \"cooldown period active\");\r\n                require(amount <= maxTX,\"above max transaction limit\");\r\n                _holderLastTransferTimestamp[tx.origin] = block.timestamp;\r\n\r\n                }\r\n            }\r\n            else if (isBuying) {\r\n                RewardsFee = buyRewardsFee;\r\n                deadFees = buyDeadFees;\r\n                marketingFees = buyMarketingFees;\r\n                liquidityFee = buyLiquidityFee;\r\n\r\n                if (limitsInEffect) {\r\n                require(block.timestamp > launchtimestamp + delay,\"you shall not pass\");\r\n                require(tx.gasprice <= gasPriceLimit,\"Gas price exceeds limit.\");\r\n                require(_holderLastTransferBlock[tx.origin] != block.number,\"Too many TX in block\");\r\n                require(amount <= maxTX,\"above max transaction limit\");\r\n                _holderLastTransferBlock[tx.origin] = block.number;\r\n            }\r\n            \r\n            uint256 contractBalanceRecipient = balanceOf(to);\r\n            require(contractBalanceRecipient + amount <= maxWallet,\"Exceeds maximum wallet token amount.\" );\r\n            }\r\n\r\n            uint256 totalFees = RewardsFee.add(liquidityFee + marketingFees);\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n            if (canSwap && isSelling) {\r\n                swapping = true;\r\n\r\n                if (swapAndLiquifyEnabled && liquidityFee > 0 && totalBuyFees > 0) {\r\n                    uint256 totalBuySell = buyAmount.add(sellAmount);\r\n                    uint256 swapAmountBought = contractTokenBalance.mul(buyAmount).div(totalBuySell);\r\n                    uint256 swapAmountSold = contractTokenBalance.mul(sellAmount).div(totalBuySell);\r\n                    uint256 swapBuyTokens = swapAmountBought.mul(liquidityFee).div(totalBuyFees);\r\n                    uint256 swapSellTokens = swapAmountSold.mul(liquidityFee).div(totalSellFees);\r\n                    uint256 swapTokens = swapSellTokens.add(swapBuyTokens);\r\n\r\n                    swapAndLiquify(swapTokens);\r\n                }\r\n\r\n                uint256 remainingBalance = balanceOf(address(this));\r\n                swapAndSendDividends(remainingBalance);\r\n                buyAmount = 1;\r\n                sellAmount = 1;\r\n                swapping = false;\r\n            }\r\n\r\n            uint256 fees = amount * totalFees / 10000;\r\n            uint256 burntokens;\r\n\r\n            if (deadFees > 0) {\r\n            burntokens = amount * deadFees / 10000;\r\n            super._transfer(from, DEAD, burntokens);\r\n            _totalSupply = _totalSupply - burntokens;\r\n\r\n            }\r\n\r\n            amount = amount.sub(fees + burntokens);\r\n\r\n            if (isSelling) {\r\n                sellAmount = sellAmount.add(fees);\r\n            } \r\n            else {\r\n                buyAmount = buyAmount.add(fees);\r\n            }\r\n\r\n            super._transfer(from, address(this), fees);\r\n\r\n            uint256 gas = gasForProcessing;\r\n\r\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n            } catch {}\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n        dividendTracker.setBalance(from, getStakingBalance(from));\r\n        dividendTracker.setBalance(to, getStakingBalance(to));\r\n    }\r\n\r\n    function getStakingBalance(address account) private view returns (uint256) {\r\n        uint256 stakedBalance1Week;\r\n        uint256 stakedBalance1Month;\r\n        uint256 stakedBalance6Months;\r\n        uint256 stakingBalance;\r\n        uint256 unstakedBalance; \r\n        uint256 unstakedUpdate;\r\n\r\n\r\n        if (_isStaked1Week[account]) {\r\n            stakedBalance1Week = tokensStaked1Week[account];\r\n        } \r\n        if (_isStaked1Month[account]) {\r\n            stakedBalance1Month = tokensStaked1Month[account];\r\n        }\r\n        if (_isStaked6Months[account]) {\r\n            stakedBalance6Months = tokensStaked6Months[account];\r\n        }\r\n\r\n        if (account == SwissArmyContract) {\r\n            stakingBalance = balanceOf(account);\r\n            return stakingBalance;\r\n        }\r\n\r\n        if (account == NFTRewardsContract) {\r\n            stakingBalance = balanceOf(account).mul(100).div(100);\r\n            return stakingBalance;\r\n        }\r\n\r\n        unstakedBalance = balanceOf(account).sub(tokensStaked1Week[account] + tokensStaked1Month[account] \r\n                          + tokensStaked6Months[account]);\r\n\r\n        unstakedUpdate = unstakedBalance.mul(100).div(100);\r\n        \r\n        stakingBalance = unstakedUpdate.add(stakedBalance1Week + stakedBalance1Month + stakedBalance6Months);\r\n\r\n        return stakingBalance;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updatePayoutToken(address token) public onlyOwner {\r\n        dividendTracker.updatePayoutToken(token);\r\n        emit UpdatePayoutToken(token);\r\n    }\r\n\r\n    function getPayoutToken() public view returns (address) {\r\n        return dividendTracker.getPayoutToken();\r\n    }\r\n\r\n    function setMinimumTokenBalanceForAutoDividends(uint256 value) public onlyOwner {\r\n        dividendTracker.setMinimumTokenBalanceForAutoDividends(value);\r\n    }\r\n\r\n    function setMinimumTokenBalanceForDividends(uint256 value) public onlyOwner {\r\n        dividendTracker.setMinimumTokenBalanceForDividends(value);\r\n    }\r\n\r\n    function setSwissArmyAddress(address NewAddress) public onlyOwner {\r\n        dividendTracker.setSwissArmyAddress(NewAddress);\r\n        SwissArmyContract = NewAddress;\r\n    }\r\n\r\n    function setNFTRewardsAddress(address NewAddress) public onlyOwner {\r\n        dividendTracker.setNFTRewardsAddress(NewAddress);\r\n        NFTRewardsContract = NewAddress;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function forceSwapAndSendDividends(uint256 tokens) public onlyOwner {\r\n        tokens = tokens * (10**18);\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n        uint256 fromBuy = tokens.mul(buyAmount).div(totalAmount);\r\n        uint256 fromSell = tokens.mul(sellAmount).div(totalAmount);\r\n\r\n        swapAndSendDividends(tokens);\r\n\r\n        buyAmount = buyAmount.sub(fromBuy);\r\n        sellAmount = sellAmount.sub(fromSell);\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        if (tokens == 0) {\r\n            return;\r\n        }\r\n        swapTokensForEth(tokens);\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n\r\n        bool success = true;\r\n        bool successOp1 = true;\r\n\r\n        uint256 dividends;\r\n        uint256 dividendsFromBuy;\r\n        uint256 dividendsFromSell;\r\n\r\n        uint256 _completeFees;\r\n        uint256 feePortions;\r\n        uint256 marketingPayout;\r\n\r\n        if (buyRewardsFee > 0) {\r\n            dividendsFromBuy = address(this).balance.mul(buyAmount).div(totalAmount)\r\n            .mul(buyRewardsFee).div(buyRewardsFee + buyMarketingFees);\r\n        }\r\n        if (sellRewardsFee > 0) {\r\n            dividendsFromSell = address(this).balance.mul(sellAmount).div(totalAmount)\r\n            .mul(sellRewardsFee).div(sellRewardsFee + sellMarketingFees);\r\n        }\r\n        dividends = dividendsFromBuy.add(dividendsFromSell);\r\n\r\n        if (dividends > 0) {\r\n            (success, ) = address(dividendTracker).call{value: dividends}(\"\");\r\n        }\r\n        \r\n        _completeFees = sellMarketingFees.add(buyMarketingFees);\r\n\r\n        if (_completeFees > 0) {\r\n            feePortions = address(this).balance.div(_completeFees);\r\n            marketingPayout = buyMarketingFees.add(sellMarketingFees) * feePortions;\r\n        }\r\n        \r\n        if (marketingPayout > 0) {\r\n            (successOp1, ) = address(marketingWallet).call{value: marketingPayout}(\"\");\r\n        }\r\n\r\n        emit SendDividends(dividends, marketingPayout, success && successOp1);\r\n    }\r\n\r\n    function airdropToWallets(\r\n        address[] memory airdropWallets,\r\n        uint256[] memory amount\r\n    ) external onlyOwner {\r\n        require(airdropWallets.length == amount.length,\"Arrays must be the same length\");\r\n        require(airdropWallets.length <= 200, \"Wallets list length must be <= 200\");\r\n        for (uint256 i = 0; i < airdropWallets.length; i++) {\r\n            address wallet = airdropWallets[i];\r\n            uint256 airdropAmount = amount[i] * (10**18);\r\n            super._transfer(msg.sender, wallet, airdropAmount);\r\n            dividendTracker.setBalance(payable(wallet), getStakingBalance(wallet));\r\n        }\r\n    }\r\n}\r\n\r\ncontract PepeFuegoDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => bool) public excludedFromAutoClaim;\r\n    mapping(address => bool) public autoReinvest;\r\n    address public defaultToken; // XRP\r\n    address public SwissArmy;\r\n    address public NFTRewards;\r\n    bool public allowCustomTokens;\r\n    bool public allowAutoReinvest;\r\n    bool public dividendsPaused = false;\r\n\r\n    string private trackerName;\r\n    string private trackerTicker;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    PepeFuego public PepeFuegoContract;\r\n\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 private minimumTokenBalanceForAutoDividends;\r\n    uint256 private minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event DividendReinvested(address indexed acount, uint256 value, bool indexed automatic);\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n    event DividendsPaused(bool paused);\r\n    event SetAllowCustomTokens(bool allow);\r\n    event SetAllowAutoReinvest(bool allow);\r\n\r\n    constructor(address payable mainContract, address router, address token, string memory _name,\r\n                string memory _ticker) DividendPayingToken(_name, _ticker) {\r\n        \r\n        trackerName = _name;\r\n        trackerTicker = _ticker;\r\n        defaultToken = token;\r\n        PepeFuegoContract = PepeFuego(mainContract);\r\n        minimumTokenBalanceForAutoDividends = 10000_000000000000000000; // 10000 tokens\r\n        minimumTokenBalanceForDividends = minimumTokenBalanceForAutoDividends;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(router);\r\n        allowCustomTokens = true;\r\n        allowAutoReinvest = false;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return trackerName;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return trackerTicker;\r\n    }\r\n\r\n    function _transfer(address, address, uint256) internal pure override {\r\n        require(false, \"No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(false, \"withdrawDividend disabled. Use the 'claim' function on the main PepeFuego contract.\");\r\n    }\r\n\r\n    function isExcludedFromAutoClaim(address account) external view onlyOwner returns (bool) {\r\n        return excludedFromAutoClaim[account];\r\n    }\r\n\r\n    function isReinvest(address account) external view onlyOwner returns (bool) {\r\n        return autoReinvest[account];\r\n    }\r\n\r\n    function setAllowCustomTokens(bool allow) external onlyOwner {\r\n        require(allowCustomTokens != allow);\r\n        allowCustomTokens = allow;\r\n        emit SetAllowCustomTokens(allow);\r\n    }\r\n\r\n    function setAllowAutoReinvest(bool allow) external onlyOwner {\r\n        require(allowAutoReinvest != allow);\r\n        allowAutoReinvest = allow;\r\n        emit SetAllowAutoReinvest(allow);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        //require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function includeFromDividends(address account) external onlyOwner {\r\n        excludedFromDividends[account] = false;\r\n    }\r\n\r\n    function setAutoClaim(address account, bool value) external onlyOwner {\r\n        excludedFromAutoClaim[account] = value;\r\n    }\r\n\r\n    function setReinvest(address account, bool value) external onlyOwner {\r\n        autoReinvest[account] = value;\r\n    }\r\n\r\n    function setMinimumTokenBalanceForAutoDividends(uint256 value) external onlyOwner {\r\n        minimumTokenBalanceForAutoDividends = value * (10**18);\r\n    }\r\n\r\n    function setMinimumTokenBalanceForDividends(uint256 value) external onlyOwner {\r\n        minimumTokenBalanceForDividends = value * (10**18);\r\n    }\r\n\r\n    function setSwissArmyAddress(address NewAddress) external onlyOwner {\r\n        SwissArmy = NewAddress;\r\n    }\r\n\r\n    function setNFTRewardsAddress(address NewAddress) external onlyOwner {\r\n        NFTRewards = NewAddress;\r\n    }\r\n\r\n    function setDividendsPaused(bool value) external onlyOwner {\r\n        require(dividendsPaused != value);\r\n        dividendsPaused = value;\r\n        emit DividendsPaused(value);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account) public view returns (address account, int256 index, int256 iterationsUntilProcessed,\r\n                                                               uint256 withdrawableDividends, uint256 totalDividends,\r\n                                                               uint256 lastClaimTime) {\r\n        account = _account;\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            } \r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\r\n                    lastProcessedIndex\r\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\r\n                    : 0;\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index) public view returns (address, int256, int256, uint256,\r\n                                                                   uint256, uint256) {\r\n        if (index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function setBalance(address account, uint256 newBalance) external onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if (newBalance < minimumTokenBalanceForDividends) {\r\n            tokenHoldersMap.remove(account);\r\n            _setBalance(account, 0);\r\n\r\n            return;\r\n        }\r\n\r\n        _setBalance(account, newBalance);\r\n\r\n        if (newBalance >= minimumTokenBalanceForAutoDividends) {\r\n            tokenHoldersMap.set(account, newBalance);\r\n        } \r\n        else {\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256)\r\n    {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0 || dividendsPaused) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= numberOfTokenHolders) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (!excludedFromAutoClaim[account]) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (dividendsPaused) {\r\n            return false;\r\n        }\r\n\r\n        bool reinvest = autoReinvest[account];\r\n\r\n        if (automatic && reinvest && !allowAutoReinvest) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = reinvest\r\n            ? _reinvestDividendOfUser(account)\r\n            : _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            if (reinvest) {\r\n                emit DividendReinvested(account, amount, automatic);\r\n            } \r\n            else {\r\n                emit Claim(account, amount, automatic);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n\r\n    function updatePayoutToken(address token) public onlyOwner {\r\n        defaultToken = token;\r\n    }\r\n\r\n    function getPayoutToken() public view returns (address) {\r\n        return defaultToken;\r\n    }\r\n\r\n    function _reinvestDividendOfUser(address account) private returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n        if (_withdrawableDividend > 0) {\r\n            bool success;\r\n\r\n            withdrawnDividends[account] = withdrawnDividends[account].add(_withdrawableDividend);\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = uniswapV2Router.WETH();\r\n            path[1] = address(PepeFuegoContract);\r\n\r\n            uint256 prevBalance = PepeFuegoContract.balanceOf(address(this));\r\n\r\n            // make the swap\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{value: _withdrawableDividend}\r\n                    (0, path, address(this), block.timestamp)\r\n            {\r\n                uint256 received = PepeFuegoContract.balanceOf(address(this)).sub(prevBalance);\r\n                if (received > 0) {\r\n                    success = true;\r\n                    PepeFuegoContract.transfer(account, received);\r\n                } \r\n                else {\r\n                    success = false;\r\n                }\r\n            } catch {\r\n                success = false;\r\n            }\r\n\r\n            if (!success) {\r\n                withdrawnDividends[account] = withdrawnDividends[account].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal override returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\r\n            address tokenAddress = defaultToken;\r\n            bool success;\r\n\r\n            if (tokenAddress == address(0)) {\r\n                (success, ) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n            }\r\n\r\n            else if (user == SwissArmy || user == NFTRewards) {\r\n                (success, ) = user.call{value: _withdrawableDividend}(\"\");\r\n            }\r\n            else {\r\n                address[] memory path = new address[](2);\r\n                path[0] = uniswapV2Router.WETH();\r\n                path[1] = tokenAddress;\r\n                try\r\n                    uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                    value: _withdrawableDividend}(0, path, user, block.timestamp)\r\n                {\r\n                    success = true;\r\n                } catch {\r\n                    success = false;\r\n                }\r\n            }\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            } \r\n            else {\r\n                emit DividendWithdrawn(user, _withdrawableDividend);\r\n            }\r\n            return _withdrawableDividend;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) internal view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) internal view returns (int256) {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) internal view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint256 val) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetPreSaleWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellDeadFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMarketingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellRewardsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyDeadFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMarketingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyRewardsFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatePayoutToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTRewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeFor1Month\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeFor1Week\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeFor6Months\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwissArmyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isStaked1Month\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isStaked1Week\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isStaked6Months\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_staked1MonthTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_staked1WeekTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_staked6MonthsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDeadFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldowntimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract PepeFuegoDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialMaxGwei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxTX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setDelay\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"forceSwapAndSendDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayoutToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromAutoClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchtimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDeadFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowAutoReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowCustomTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCanTransferBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setDividendsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setExcludeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GWEI\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setIncludeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setLimitsInEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForAutoDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"setNFTRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setPresaleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"setSwissArmyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setcooldowntimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setmaxTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setmaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStaked1Month\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStaked1Week\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStaked6Months\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardsBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardsSell\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updatePayoutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransferFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PepeFuego", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b55834383dccb926471555bc37a4c2e12357a623def97008805f2bdfc88664a6"}