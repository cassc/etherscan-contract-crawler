{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPhoenix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPhoenix is IERC20Metadata {\\n  function getPairs() external view returns (address pair, address[] memory pathBuy, address[] memory pathSell);\\n\\n  function endRound() external;\\n\\n  function addLiquidity(uint256 tokens) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPhoenixTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISwapRouter02.sol\\\";\\n\\ninterface IPhoenixTracker is IERC20Metadata {\\n  function tokenName() external view returns (string memory);\\n\\n  function router() external view returns (ISwapRouter02);\\n\\n  function tokenNameExpired() external view returns (string memory);\\n\\n  function transfer(address sender, address from, address to, uint256 amount) external returns (bool);\\n\\n  function approve(address owner, address spender, uint256 amount) external returns (bool);\\n\\n  function burn(address account, uint256 amount) external;\\n\\n  function swapBack() external;\\n\\n  function syncFloorPrice(bool isBuy, uint256 tokens, address user) external returns (uint256 fees, uint256 burnTokens);\\n\\n  function clearTokens(address addr) external;\\n\\n  function isWhiteList(address addr) external view returns (bool);\\n\\n  function getHolders() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\ninterface ISwapFactory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\ninterface ISwapRouter01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./ISwapRouter01.sol\\\";\\n\\ninterface ISwapRouter02 is ISwapRouter01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Numbers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nlibrary Numbers {\\n  function percent(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return (a * b) / 10000;\\n  }\\n\\n  function percentOf(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return (a * 10000) / b;\\n  }\\n\\n  function discount(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - percent(a, b);\\n  }\\n\\n  function markup(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a + percent(a, b);\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    unchecked {\\n      return b > a ? 0 : a - b;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nlibrary Router {\\n  function path(address a, address b) internal pure returns (address[] memory pathOut) {\\n    pathOut = new address[](2);\\n    pathOut[0] = a;\\n    pathOut[1] = b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/main/PhoenixCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/ISwapRouter02.sol\\\";\\nimport \\\"../Ownable.sol\\\";\\n\\nabstract contract PhoenixCommon is Ownable {\\n  ISwapRouter02 internal _router;\\n  address internal _currency;\\n  address[] internal _pathBuy;\\n  address[] internal _pathSell;\\n  address internal _pair;\\n\\n  function __PhoenixCommon_init_unchained() internal {\\n    //\\n  }\\n\\n  function __PhoenixCommon_init() internal {\\n    __PhoenixCommon_init_unchained();\\n    __Ownable_init();\\n  }\\n\\n  function _isUser(address addr) internal view returns (bool) {\\n    return addr != NULL_ADDRESS && addr != _pair && addr != address(_router) && addr != _contractAddress && addr != _otherAddr;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPayable {\\n  function sendFunds() external payable;\\n}\\n\\nabstract contract Ownable {\\n  address internal constant NULL_ADDRESS = address(0);\\n  address internal _contractAddress;\\n  address internal _owner;\\n  address internal _otherAddr;\\n\\n  modifier onlyOwner() {\\n    require(_isOwner());\\n    _;\\n  }\\n\\n  modifier onlyAuth() {\\n    require(_isOther() || _isOwner());\\n    _;\\n  }\\n\\n  modifier onlyOther() {\\n    require(_isOther());\\n    _;\\n  }\\n\\n  function __Ownable_init() internal virtual {\\n    _contractAddress = address(this);\\n    _owner = msg.sender;\\n  }\\n\\n  function _isOwner() internal view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  function _isOther() internal view returns (bool) {\\n    return msg.sender == _otherAddr;\\n  }\\n\\n  function setOwner(address owner) external onlyOwner {\\n    _owner = owner;\\n  }\\n\\n  function setOtherAddr(address otherAddr) external onlyAuth {\\n    _otherAddr = otherAddr;\\n  }\\n\\n  // emergency withdraw all stuck funds\\n  function withdrawETH(uint256 balance) external onlyOwner {\\n    if (balance == 0) {\\n      balance = _contractAddress.balance;\\n    }\\n\\n    payable(msg.sender).transfer(balance);\\n  }\\n\\n  // emergency withdraw all stuck tokens\\n  function withdrawToken(address tokenAddress, uint256 balance) external onlyOwner {\\n    IERC20 token = IERC20(tokenAddress);\\n\\n    if (balance == 0) {\\n      balance = token.balanceOf(_contractAddress);\\n    }\\n\\n    token.transfer(msg.sender, balance);\\n  }\\n\\n  receive() external payable {}\\n\\n  fallback() external payable {}\\n\\n  function sendFunds() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/PhoenixRevive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\n/*----------------------------------------------------------------------------------------------------+\\n\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557   \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\\n\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557   \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d   \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n\\n\ud835\ude4a\ud835\ude63\ud835\ude5a \ud835\ude3e\ud835\ude61\ud835\ude5e\ud835\ude58\ud835\ude60 \ud835\ude44\ud835\ude63\ud835\ude68\ud835\ude69\ud835\ude56\ud835\ude63\ud835\ude69 \ud835\ude4d\ud835\ude5a\ud835\ude6b\ud835\ude5e\ud835\ude6b\ud835\ude5a:\\nThe token has the ability to instantly relaunch itself every optimised opportunity!\\n\\n\ud835\ude3c\ud835\ude63\ud835\ude69\ud835\ude5e-\ud835\ude59\ud835\ude6a\ud835\ude62\ud835\ude65 \ud835\ude5b\ud835\ude61\ud835\ude64\ud835\ude64\ud835\ude67 \ud835\ude65\ud835\ude67\ud835\ude5e\ud835\ude58\ud835\ude5a:\\nA dynamic floor price is set in which selling below it will incur a higher tax (50%).\\n\\n\ud835\ude4d\ud835\ude5a\ud835\ude6b\ud835\ude5e\ud835\ude6b\ud835\ude5a \ud835\ude59\ud835\ude3c\ud835\ude65\ud835\ude65:\\nNew and innovative solution for diamond holders of projects which have \u201cdied\u201d whereby\\nthe project owner can merge their holders and LP seamlessly into Phoenix Revive.\\n\\nWebsite: https://phoenixrevive.io/\\nTelegram: http://t.me/PhoenixRevive\\nAnnouncements: https://t.me/PhoenixReviveNews\\nTwitter: https://twitter.com/PhoenixReviveW3\\nDiscord: https://discord.gg/WKQNpKPjBf\\nReddit: https://www.reddit.com/r/PhoenixRevive/\\nYouTube: https://www.youtube.com/channel/UC7nH1TMvY_6J-EvAyTc2G_Q\\nEmail: hello@phoenixrevive.io\\n\\n\ud835\ude4f\ud835\ude56\ud835\ude6d \ud835\ude4e\ud835\ude6e\ud835\ude68\ud835\ude69\ud835\ude5a\ud835\ude62:\\nBuy: 5%, Sell: 5%\\nTreasury: 1%, Marketing: 2%, Liquidity Pool: 2%\\n\\n**Note: When selling below floor price, sell tax will be 50%, half of which will be burned.\\n\\n+----------------------------------------------------------------------------------------------------*/\\n\\nimport \\\"./interfaces/IPhoenixTracker.sol\\\";\\nimport \\\"./interfaces/IPhoenix.sol\\\";\\nimport \\\"./interfaces/ISwapFactory.sol\\\";\\nimport \\\"./libraries/Numbers.sol\\\";\\nimport \\\"./libraries/Router.sol\\\";\\nimport \\\"./main/PhoenixCommon.sol\\\";\\n\\ncontract PhoenixRevive is IPhoenix, PhoenixCommon {\\n  using Numbers for uint256;\\n\\n  uint8 public constant decimals = 18;\\n  bool public ended;\\n  bool private _liquid;\\n\\n  constructor(address tracker) {\\n    __PhoenixCommon_init();\\n    _otherAddr = tracker;\\n    _router = IPhoenixTracker(_otherAddr).router();\\n    _currency = _router.WETH();\\n    _pair = ISwapFactory(_router.factory()).createPair(_currency, _contractAddress);\\n    _pathBuy = Router.path(_currency, _contractAddress);\\n    _pathSell = Router.path(_contractAddress, _currency);\\n  }\\n\\n  function name() external view returns (string memory) {\\n    IPhoenixTracker tracker = IPhoenixTracker(_otherAddr);\\n    return ended ? tracker.tokenNameExpired() : tracker.tokenName();\\n  }\\n\\n  function symbol() external view returns (string memory) {\\n    return IPhoenixTracker(_otherAddr).symbol();\\n  }\\n\\n  function totalSupply() external view returns (uint256) {\\n    return ended ? 0 : IPhoenixTracker(_otherAddr).totalSupply();\\n  }\\n\\n  function balanceOf(address account) external view returns (uint256) {\\n    return ended ? 0 : IPhoenixTracker(_otherAddr).balanceOf(account);\\n  }\\n\\n  function transfer(address to, uint256 amount) external returns (bool) {\\n    return _transfer(msg.sender, to, amount);\\n  }\\n\\n  function allowance(address owner, address spender) external view returns (uint256) {\\n    return IPhoenixTracker(_otherAddr).allowance(owner, spender);\\n  }\\n\\n  function _approve(address owner, address spender, uint256 amount) private returns (bool) {\\n    return IPhoenixTracker(_otherAddr).approve(owner, spender, amount);\\n  }\\n\\n  function approve(address spender, uint256 amount) external returns (bool) {\\n    return _approve(msg.sender, spender, amount);\\n  }\\n\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool) {\\n    return _transfer(from, to, amount);\\n  }\\n\\n  function _transfer(address from, address to, uint256 amount) private returns (bool) {\\n    require(!ended, \\\"ended\\\");\\n    IPhoenixTracker tracker = IPhoenixTracker(_otherAddr);\\n    uint256 transferAmount = amount;\\n    uint256 fees = 0;\\n    uint256 burnTokens = 0;\\n    bool success = true;\\n\\n    if (from == _contractAddress) {\\n      from = _otherAddr;\\n    }\\n\\n    if (to == _contractAddress) {\\n      to = _otherAddr;\\n    }\\n\\n    if (from != NULL_ADDRESS && to != NULL_ADDRESS && !_liquid) {\\n      bool isBuy = from == _pair && _isUser(to);\\n      bool isSell = to == _pair && _isUser(from);\\n      bool isWhiteList = tracker.isWhiteList(from) || tracker.isWhiteList(to);\\n      bool isTax = !isWhiteList && (isBuy || isSell);\\n\\n      if (isTax) {\\n        address user = isBuy ? to : from;\\n        (fees, burnTokens) = tracker.syncFloorPrice(isBuy, amount, user);\\n        transferAmount = amount.sub(fees);\\n      }\\n\\n      if (isSell && from != _otherAddr) {\\n        tracker.swapBack();\\n      }\\n    }\\n\\n    success = tracker.transfer(msg.sender, from, to, transferAmount);\\n    emit Transfer(from, to, transferAmount);\\n\\n    if (fees > 0) {\\n      success = tracker.transfer(from, from, _otherAddr, fees);\\n      emit Transfer(from, _otherAddr, fees);\\n\\n      if (burnTokens > 0) {\\n        tracker.burn(_otherAddr, burnTokens);\\n        emit Transfer(_otherAddr, NULL_ADDRESS, burnTokens);\\n      }\\n    }\\n\\n    return success;\\n  }\\n\\n  function getPairs() external view returns (address pair, address[] memory pathBuy, address[] memory pathSell) {\\n    return (_pair, _pathBuy, _pathSell);\\n  }\\n\\n  function endRound() external onlyOther {\\n    if (!ended) {\\n      _removeLiquidity(IERC20(_pair).balanceOf(_contractAddress));\\n      IPayable(_otherAddr).sendFunds{value: _contractAddress.balance}();\\n      IPhoenixTracker(_otherAddr).clearTokens(_pair);\\n      ended = true;\\n    }\\n  }\\n\\n  function addLiquidity(uint256 tokens) external payable onlyAuth {\\n    _addLiquidity(msg.value, tokens);\\n  }\\n\\n  function _addLiquidity(uint256 bnb, uint256 tokens) private {\\n    _liquid = _approve(_contractAddress, address(_router), tokens);\\n    _router.addLiquidityETH{value: bnb}(_contractAddress, tokens, 0, 0, _contractAddress, block.timestamp);\\n    _liquid = false;\\n  }\\n\\n  function _removeLiquidity(uint256 liquidity) private {\\n    _liquid = IERC20(_pair).approve(address(_router), liquidity);\\n    _router.removeLiquidityETH(_contractAddress, liquidity, 0, 0, _contractAddress, block.timestamp);\\n    _liquid = false;\\n  }\\n\\n  function initHolders() external onlyOwner {\\n    IPhoenixTracker tracker = IPhoenixTracker(_otherAddr);\\n    address[] memory holders = tracker.getHolders();\\n\\n    // Sync holders without the need for an actual transfer\\n    // emitting a Transfer event is much more gas efficient and will show up on bscscan\\n    for (uint i = 0; i < holders.length; i++) {\\n      address account = holders[i];\\n      emit Transfer(NULL_ADDRESS, account, tracker.balanceOf(account));\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pathBuy\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pathSell\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otherAddr\",\"type\":\"address\"}],\"name\":\"setOtherAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PhoenixRevive", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fda8f3052ca5f24128103703ad0df19d5a8dc851", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}