{"SourceCode": "// File: contracts/libs/Ownable.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract Ownable {\r\n  address internal owner;\r\n  mapping(address => bool) internal manager;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    manager[msg.sender] = true;\r\n  }\r\n\r\n  modifier onlySafe() {\r\n    require(msg.sender == owner, \"permission denied\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyManager() {\r\n    require(manager[msg.sender], \"permission denied\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlySafe {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  function addManager(address _who) public onlySafe {\r\n    if (manager[_who] == false) {\r\n      manager[_who] = true;\r\n    }\r\n  }\r\n\r\n  function removeManager(address _who) public onlySafe {\r\n    if (manager[_who] == true) {\r\n      manager[_who] = false;\r\n    }\r\n  }\r\n\r\n  function isOwner(address _who) public view returns (bool) {\r\n    return owner == _who;\r\n  }\r\n\r\n  function isManager(address _who) public view returns (bool) {\r\n    return manager[_who];\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IDoe.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract IDoe {\r\n  function liquidity(address _dtoken, uint256 _tokens) external returns (bool) {}\r\n}\r\n\r\n// File: contracts/interfaces/IPause.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract IPause {\r\n  function isPaused() external view returns (bool) {}\r\n}\r\n\r\n// File: contracts/interfaces/IToken.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract IToken {\r\n  function WETH() external view returns (address) {}\r\n\r\n  function PAIR() external view returns (address) {}\r\n\r\n  function V2ROUTER() external view returns (address) {}\r\n\r\n  function isToken(address _token) external view returns (bool) {}\r\n\r\n  function isErc20(address _token) external view returns (bool) {}\r\n\r\n  function dtoken(address _token) external view returns (address) {}\r\n\r\n  function getToken(address _token)\r\n    external\r\n    view\r\n    returns (\r\n      address token,\r\n      address d_token,\r\n      address feed,\r\n      uint256 decimals,\r\n      bool is_erc20\r\n    )\r\n  {}\r\n\r\n  function maxWithdrawAmount(address _who, address _tokenAddress)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {}\r\n\r\n  function maxBorrowsAmount(address _who, address _tokenAddress)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {}\r\n\r\n  function depositValueOf(address _who) external view returns (uint256) {}\r\n\r\n  function depositValueOf(address _who, bool _pv)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {}\r\n\r\n  function borrowsValueOf(address _who) external view returns (uint256) {}\r\n\r\n  function borrowsValueOf(address _who, bool _pv)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {}\r\n\r\n  function depositValueTotal() external view returns (uint256) {}\r\n\r\n  function depositValueTotal(bool _pv) external view returns (uint256) {}\r\n\r\n  function borrowsValueTotal() external view returns (uint256) {}\r\n\r\n  function borrowsValueTotal(bool _pv) external view returns (uint256) {}\r\n\r\n  function performance(address _who)\r\n    external\r\n    view\r\n    returns (uint256 depositAmount, uint256 borrowsAmount)\r\n  {}\r\n\r\n  function performanceTotal()\r\n    external\r\n    view\r\n    returns (uint256 totalDepositValue, uint256 totalBorrowsValue)\r\n  {}\r\n}\r\n\r\n// File: contracts/interfaces/IPrice.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract IPrice {\r\n  function getPrice(address _token)\r\n    external\r\n    view\r\n    returns (uint256 price, uint256 priceDecimals)\r\n  {}\r\n\r\n  function getDebug() external view returns (bool) {}\r\n}\r\n\r\n// File: contracts/interfaces/IUsers.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract IUsers {\r\n  function isBlackList(address _who) external view returns (bool) {}\r\n\r\n  function getUser(address _who)\r\n    external\r\n    view\r\n    returns (\r\n      address id,\r\n      address pid,\r\n      uint256 level,\r\n      uint256 createdAt\r\n    )\r\n  {}\r\n\r\n  function isUser(address _who) external view returns (bool) {}\r\n\r\n  function register(address _id, address _pid) external returns (bool) {}\r\n\r\n  function setUserLevel(address _who) external returns (bool) {}\r\n\r\n  function setLevelParams(\r\n    uint256 _key,\r\n    uint256 _amount,\r\n    uint256 _layer\r\n  ) external {}\r\n\r\n  function getUserLevel(address _who)\r\n    external\r\n    view\r\n    returns (uint256 amount, uint256 layer)\r\n  {}\r\n\r\n  function getLevel(uint256 level)\r\n    external\r\n    view\r\n    returns (uint256 amount, uint256 layer)\r\n  {}\r\n\r\n  function getLastLevel()\r\n    external\r\n    view\r\n    returns (uint256 amount, uint256 layer)\r\n  {}\r\n}\r\n\r\n// File: contracts/interfaces/IEvents.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract IEvents {\r\n  function emitRegister(address who, address pid) external {}\r\n\r\n  function emitSetUserLevel(address who, uint256 level) external {}\r\n\r\n  function emitSetLevelParams(\r\n    uint256 key,\r\n    uint256 layer,\r\n    uint256 amount\r\n  ) external {}\r\n\r\n  function emitDeposit(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitWithdraw(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitBorrows(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitRepay(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitLiquidateBorrows(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitLiquidateDeposit(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitLiquidatePenalty(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitSettleInterestDeposit(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitSettleInterestBorrows(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitSetTokenParmas(\r\n    address dtoken,\r\n    uint256 base,\r\n    uint256 give,\r\n    uint256 reserve,\r\n    uint256 borrows,\r\n    uint256 liquidity,\r\n    uint256 penalty,\r\n    uint256 speed\r\n  ) external {}\r\n\r\n  function emitMinting(\r\n    address who,\r\n    uint256 tokens,\r\n    uint256 mint\r\n  ) external {}\r\n\r\n  function emitPledgeDeposit(\r\n    address sender,\r\n    address pledger,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitPledgeWithdraw(\r\n    address sender,\r\n    address pledger,\r\n    uint256 tokens\r\n  ) external {}\r\n}\r\n\r\n// File: contracts/interfaces/IRouter.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// IRouter contract\r\ncontract IRouter is IDoe, IPause, IToken, IPrice, IUsers {\r\n  function NOW() external view returns (uint256) {}\r\n\r\n  function ETH() external view returns (address) {}\r\n\r\n  function DOE() external view returns (address) {}\r\n\r\n  function USDT() external view returns (address) {}\r\n\r\n  function USER() external view returns (address) {}\r\n\r\n  function PAUSE() external view returns (address) {}\r\n\r\n  function PLEDGE() external view returns (address) {}\r\n\r\n  function TOKEN() external view returns (address) {}\r\n\r\n  function PRICE() external view returns (address) {}\r\n\r\n  function DEBUG() external view returns (bool) {}\r\n\r\n  function DATE() external view returns (uint256) {}\r\n\r\n  function MARKET() external view returns (address) {}\r\n\r\n  function setDate() external returns (bool) {}\r\n\r\n  function pledgeOf(address _who) external view returns (uint256) {}\r\n\r\n  function deposit(\r\n    address _who,\r\n    address payable _dtoken,\r\n    uint256 _tokens\r\n  ) external payable returns (bool) {}\r\n\r\n  function withdraw(\r\n    address _who,\r\n    address _dtoken,\r\n    uint256 _tokens\r\n  ) external returns (bool) {}\r\n\r\n  function borrows(\r\n    address _who,\r\n    address _dtoken,\r\n    uint256 _tokens\r\n  ) external returns (bool) {}\r\n\r\n  function repay(\r\n    address _who,\r\n    address payable _dtoken,\r\n    uint256 _tokens\r\n  ) external payable returns (bool) {}\r\n\r\n  function emitRegister(address who, address pid) external {}\r\n\r\n  function emitSetUserLevel(address who, uint256 level) external {}\r\n\r\n  function emitSetLevelParams(\r\n    uint256 key,\r\n    uint256 layer,\r\n    uint256 amount\r\n  ) external {}\r\n\r\n  function emitLiquidateBorrows(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitLiquidateDeposit(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitLiquidatePenalty(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitSettleInterestDeposit(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitSettleInterestBorrows(\r\n    address who,\r\n    address dtoken,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitSetTokenParmas(\r\n    address dtoken,\r\n    uint256 base,\r\n    uint256 give,\r\n    uint256 reserve,\r\n    uint256 _borrows,\r\n    uint256 liquidity,\r\n    uint256 penalty,\r\n    uint256 speed\r\n  ) external {}\r\n\r\n  function emitMinting(\r\n    address who,\r\n    uint256 tokens,\r\n    uint256 mint\r\n  ) external {}\r\n\r\n  function emitPledgeDeposit(\r\n    address sender,\r\n    address pledger,\r\n    uint256 tokens\r\n  ) external {}\r\n\r\n  function emitPledgeWithdraw(\r\n    address sender,\r\n    address pledger,\r\n    uint256 tokens\r\n  ) external {}\r\n}\r\n\r\n// File: contracts/libs/DRouter.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\ncontract DRouter is Ownable {\r\n  IRouter internal _dRouter;\r\n  uint256 BASE = 1e18;\r\n\r\n  function setRouter(address _router) public onlySafe {\r\n    _dRouter = IRouter(_router);\r\n  }\r\n}\r\n\r\n// File: contracts/libs/BlackList.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract BlackList is Ownable {\r\n  mapping(address => bool) public isBlackListed;\r\n\r\n  modifier isNotBlackList(address _who) {\r\n    require(!isBlackListed[_who], \"You are already on the blacklist\");\r\n    _;\r\n  }\r\n\r\n  function addBlackList(address _who) public onlySafe {\r\n    isBlackListed[_who] = true;\r\n    emit AddedBlackList(_who);\r\n  }\r\n\r\n  function removeBlackList(address _who) public onlySafe {\r\n    isBlackListed[_who] = false;\r\n    emit RemovedBlackList(_who);\r\n  }\r\n\r\n  event AddedBlackList(address _user);\r\n\r\n  event RemovedBlackList(address _user);\r\n}\r\n\r\n// File: contracts/libs/ERC20Basic.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public _totalSupply;\r\n  uint256 public decimals;\r\n  string public name;\r\n  string public symbol;\r\n\r\n  function totalSupply() external view returns (uint256) {}\r\n\r\n  function balanceOf(address who) external view returns (uint256) {}\r\n\r\n  function transfer(address to, uint256 value) external returns (bool) {}\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/ERC20.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {}\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool){}\r\n\r\n  function approve(address spender, uint256 value) external returns (bool) {}\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/Pausable.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlySafe whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlySafe whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/libs/SafeMath.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"ds-math-mul-overflow\");\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"the dividend must be greater than 0\");\r\n    uint256 c = a / b;\r\n    require(a == b * c + (a % b), \"ds-math-div-underflow\");\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"ds-math-sub-underflow\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"ds-math-mod-overflow\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/libs/BasicToken.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is Ownable, Pausable, ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public balances;\r\n  mapping(address => uint256) public borrowss;\r\n\r\n  // additional variables for use if transaction fees ever became necessary\r\n  uint256 public basisPointsRate = 0;\r\n  uint256 public maximumFee = 0;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n    require(!(msg.data.length < size + 4));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value)\r\n    public\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool success)\r\n  {\r\n    require(_value > 0);\r\n    require(_to != address(0));\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n// File: contracts/libs/StandardToken.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n  uint256 public MAX_UINT = 2**256 - 1;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) public onlyPayloadSize(3 * 32) returns (bool success) {\r\n    require(_value > 0);\r\n    require(_to != address(0));\r\n    \r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    \r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    \r\n    return true;\r\n  }\r\n\r\n  function transferTokens(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint256 _tokens\r\n  ) public onlySafe returns (bool success) {\r\n    require(_tokens > 0);\r\n    ERC20(_tokenAddress).transfer(_to, _tokens);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value)\r\n    public\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool success)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   */\r\n  function allowance(address _owner, address _spender)\r\n    public\r\n    view\r\n    returns (uint256 remaining)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n// File: contracts/DOE.sol\r\n\r\n/**\r\n * Submitted for verification at Etherscan.io on 2021-01-02\r\n */\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract DOE is IDoe, StandardToken, BlackList, DRouter {\r\n  bool internal enableSwap;\r\n  uint256 internal lockTime;\r\n  uint256 internal _maxSupply;\r\n\r\n  uint256 internal MINT_WAIT = 0;\r\n  uint256 internal MINT_SUCCESS = 1;\r\n  uint256 internal MINT_FAILURE = 2;\r\n\r\n  mapping(address => uint256) internal _mintState; // User mining status\r\n\r\n  constructor(address _router) public {\r\n    _dRouter = IRouter(_router);\r\n\r\n    decimals = 18;\r\n    name = \"Double eagle\";\r\n    symbol = \"DOE\";\r\n\r\n    _maxSupply = 30000000 * 10**decimals;\r\n    _totalSupply = 6000000 * 10**decimals;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n\r\n    lockTime = 10 minutes;\r\n  }\r\n\r\n  // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n  function transfer(address _to, uint256 _value)\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    require(!isBlackListed[msg.sender]);\r\n    if (_dRouter.DATE().add(1 days) < block.timestamp) {\r\n      require(_dRouter.setDate());\r\n    }\r\n\r\n    if (!enableSwap) {\r\n      address _pair = _dRouter.PAIR();\r\n      if (_pair == msg.sender && owner != _to) {\r\n        revert(\"permission denied\");\r\n      }\r\n      if (_pair == _to && owner != msg.sender) {\r\n        revert(\"permission denied\");\r\n      }\r\n    }\r\n\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) public whenNotPaused returns (bool success) {\r\n    require(!isBlackListed[_from]);\r\n\r\n    if (_dRouter.DATE().add(1 days) < block.timestamp) {\r\n      require(_dRouter.setDate());\r\n    }\r\n    if (!enableSwap) {\r\n      if (msg.sender == _dRouter.V2ROUTER() && _from != owner) {\r\n        revert(\"permission denied\");\r\n      }\r\n    }\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n  function balanceOf(address who) public view returns (uint256) {\r\n    return super.balanceOf(who);\r\n  }\r\n\r\n  // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n  function approve(address _spender, uint256 _value)\r\n    public\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool success)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n  function allowance(address _owner, address _spender)\r\n    public\r\n    view\r\n    returns (uint256 remaining)\r\n  {\r\n    return super.allowance(_owner, _spender);\r\n  }\r\n\r\n  // deprecate current contract if favour of a new one\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function mintTotal() public view returns (uint256) {\r\n    return totalSupply().sub(6000000 * 10**decimals);\r\n  }\r\n\r\n  function liquidity(address _dtoken, uint256 _tokens) public returns (bool) {\r\n    require(msg.sender == _dRouter.TOKEN(), \"permission denied\");\r\n    address _market = _dRouter.MARKET();\r\n    balances[_market] = balances[_market].sub(_tokens);\r\n    balances[_dtoken] = balances[_dtoken].add(_tokens);\r\n    emit Liquidity(_market, _dtoken, _tokens);\r\n    return true;\r\n  }\r\n\r\n  function mintState(address _who) public view returns (bool) {\r\n    if (_mintState[_who] == 0) {\r\n      return true;\r\n    } else {\r\n      if (_mintState[_who].add(lockTime) < block.timestamp) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function minting(uint256 _tokens) public {\r\n    address _who = msg.sender;\r\n    require(_tokens > 1e18);\r\n    require(mintState(_who), \"mining settlement, please wait\");\r\n    if (_dRouter.isUser(_who) && _totalSupply < _maxSupply) {\r\n      _mintState[_who] = block.timestamp;\r\n    }\r\n    _dRouter.emitMinting(_who, _tokens, MINT_WAIT);\r\n  }\r\n\r\n  function minting(\r\n    address _who,\r\n    uint256 _tokens,\r\n    uint256 _type\r\n  ) public onlySafe {\r\n    require(_type == MINT_SUCCESS || _type == MINT_FAILURE);\r\n    require(_tokens > 1e18);\r\n    _mintState[_who] = 0;\r\n    if (_type == MINT_SUCCESS) {\r\n      if (_totalSupply + _tokens > _maxSupply) {\r\n        _tokens = _maxSupply.sub(_totalSupply);\r\n      }\r\n      balances[_who] = balances[_who].add(_tokens);\r\n      _totalSupply = _totalSupply.add(_tokens);\r\n    }\r\n    _dRouter.emitMinting(_who, _tokens, _type);\r\n  }\r\n\r\n  function setLockTime(uint256 _time) public onlySafe {\r\n    lockTime = _time;\r\n  }\r\n\r\n  function setEnableSwap(bool _enable) public onlySafe {\r\n    enableSwap = _enable;\r\n  }\r\n\r\n  event Airdrop(address who, uint256 tokens);\r\n\r\n  event Liquidity(address indexed from, address indexed to, uint256 value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Liquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"mintState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"minting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"minting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DOE", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000007e056473014cb75bc42d7ddfe009bf9cf8ae0d8d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cda100309d76b0d5b41ca4afbb0976112c5af2f06be7c0b0357dd65b9fc12231"}