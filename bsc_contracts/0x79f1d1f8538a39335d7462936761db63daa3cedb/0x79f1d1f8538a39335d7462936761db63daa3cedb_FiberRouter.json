{"SourceCode": "// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/common/uniswap/IWETH.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    function approve(address guy, uint wad) external returns (bool);\r\n\r\n}\r\n// File: contracts/common/uniswap/IUniswapV2Router01.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// {\"mode\":\"full\",\"isActive\":false}\r\n// File: contracts/common/uniswap/IUniswapV2Router02.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// {\"mode\":\"full\",\"isActive\":false}\r\n// File: contracts/taxing/IGeneralTaxDistributor.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IGeneralTaxDistributor {\r\n    function distributeTax(address token) external returns (uint256);\r\n    function distributeTaxAvoidOrigin(address token, address origin) external returns (uint256);\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/common/WithAdmin.sol\r\n\r\n\r\npragma solidity 0.8.2;\r\n\r\n\r\ncontract WithAdmin is Ownable {\r\n\taddress public admin;\r\n\tevent AdminSet(address admin);\r\n\r\n\tfunction setAdmin(address _admin) external onlyOwner {\r\n\t\tadmin = _admin;\r\n\t\temit AdminSet(_admin);\r\n\t}\r\n\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == admin || msg.sender == owner(), \"WA: not admin\");\r\n\t\t_;\r\n\t}\r\n}\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV // Deprecated in v4.8\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/EIP712.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n    address private immutable _CACHED_THIS;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _CACHED_THIS = address(this);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 nameHash,\r\n        bytes32 versionHash\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\r\n\r\n\r\n// File: contracts/common/signature/SigCheckable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n @dev Make sure to define method signatures\r\n */\r\nabstract contract SigCheckable is EIP712 {\r\n    mapping(bytes32=>bool) public usedHashes;\r\n\r\n    function signerUnique(\r\n        bytes32 message,\r\n        bytes memory signature) internal returns (address _signer) {\r\n        bytes32 digest;\r\n        (digest, _signer) = signer(message, signature);\r\n        // require(!usedHashes[digest], \"Message already used\");\r\n        usedHashes[digest] = true;\r\n    }\r\n\r\n    /*\r\n        @dev example message;\r\n\r\n        bytes32 constant METHOD_SIG =\r\n            keccak256(\"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt)\");\r\n        bytes32 message = keccak256(abi.encode(\r\n          METHOD_SIG,\r\n          token,\r\n          payee,\r\n          amount,\r\n          salt\r\n    */\r\n    function signer(\r\n        bytes32 message,\r\n        bytes memory signature) internal view returns (bytes32 digest, address _signer) {\r\n        digest = _hashTypedDataV4(message);\r\n        _signer = ECDSA.recover(digest, signature);\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/common/SafeAmount.sol\r\n\r\n\r\npragma solidity 0.8.2;\r\n\r\n// import \"@openzeppelin//contracts/token/ERC20/IERC20.sol\";\r\n\r\nlibrary SafeAmount {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     @notice transfer tokens from. Incorporate fee on transfer tokens\r\n     @param token The token\r\n     @param from From address\r\n     @param to To address\r\n     @param amount The amount\r\n     @return result The actual amount transferred\r\n     */\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount) internal returns (uint256 result) {\r\n        uint256 preBalance = IERC20(token).balanceOf(to);\r\n        IERC20(token).safeTransferFrom(from, to, amount);\r\n        uint256 postBalance = IERC20(token).balanceOf(to);\r\n        result = postBalance - preBalance;\r\n        require(result <= amount, \"SA: actual amount larger than transfer amount\");\r\n    }\r\n\r\n    /**\r\n     @notice Sends ETH\r\n     @param to The to address\r\n     @param value The amount\r\n     */\r\n\tfunction safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n// File: contracts/upgradeable-Bridge/FundManager.sol\r\n\r\n\r\npragma solidity 0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FundManager is SigCheckable, WithAdmin{\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public router;\r\n    uint256 constant MAX_FEE = 0.1 * 10000; // 10% max fee\r\n    string constant NAME = \"FERRUM_TOKEN_BRIDGE_POOL\";\r\n    string constant VERSION = \"000.004\";\r\n    bytes32 constant WITHDRAW_SIGNED_METHOD =\r\n        keccak256(\r\n            \"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt)\"\r\n        );\r\n\r\n    event TransferBySignature(\r\n        address signer,\r\n        address receiver,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n    event BridgeLiquidityAdded(address actor, address token, uint256 amount);\r\n    event BridgeLiquidityRemoved(address actor, address token, uint256 amount);\r\n    event BridgeSwap(\r\n        address from,\r\n        address indexed token,\r\n        uint256 targetNetwork,\r\n        address targetToken,\r\n        address targetAddrdess,\r\n        uint256 amount\r\n    );\r\n    event nonEvmBridgeSwap(\r\n        address from,\r\n        address indexed token,\r\n        string targetNetwork,\r\n        string targetToken,\r\n        string targetAddrdess,\r\n        uint256 amount\r\n    );\r\n\r\n    mapping(address => bool) public signers;\r\n    mapping(address => mapping(address => uint256)) private liquidities;\r\n    mapping(address => uint256) public fees;\r\n    mapping(address => mapping(uint256 => address)) public allowedTargets;\r\n    mapping(address => mapping(string => string)) public nonEvmAllowedTargets;\r\n    address public feeDistributor;\r\n    mapping(address => bool) public isFoundryAsset;\r\n\r\n    modifier onlyRouter() {\r\n        require(msg.sender == router, \"BP: Only router method\");\r\n        _;\r\n    }\r\n\r\n    //initialize function is constructor for upgradeable smart contract\r\n    constructor () EIP712(NAME, VERSION) { }\r\n\r\n    /**\r\n     *************** Owner only operations ***************\r\n     */\r\n\r\n    /*\r\n     @notice sets the router\r\n     */\r\n    function setRouter(address _router) external onlyOwner {\r\n        require(_router != address(0), \"BP: router requried\");\r\n        router = _router;\r\n    }\r\n\r\n    function addSigner(address _signer) external onlyOwner {\r\n        require(_signer != address(0), \"Bad signer\");\r\n        signers[_signer] = true;\r\n    }\r\n\r\n    function removeSigner(address _signer) external onlyOwner {\r\n        require(_signer != address(0), \"Bad signer\");\r\n        delete signers[_signer];\r\n    }\r\n\r\n    function setFeeDistributor(address _feeDistributor) external onlyOwner {\r\n        feeDistributor = _feeDistributor;\r\n    }\r\n\r\n    /**\r\n     *************** Admin operations ***************\r\n     */\r\n\r\n    function setFee(address token, uint256 fee10000) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        require(fee10000 <= MAX_FEE, \"Fee too large\");\r\n        fees[token] = fee10000;\r\n    }\r\n\r\n    function allowTarget(\r\n        address token,\r\n        uint256 chainId,\r\n        address targetToken\r\n    ) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        require(targetToken != address(0), \"Bad targetToken\");\r\n        require(chainId != 0, \"Bad chainId\");\r\n        allowedTargets[token][chainId] = targetToken;\r\n    }\r\n\r\n    function nonEvmAllowTarget(\r\n        address token,\r\n        string memory chainId,\r\n        string memory targetToken\r\n    ) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        nonEvmAllowedTargets[token][chainId] = targetToken;\r\n    }\r\n\r\n    function disallowTarget(address token, uint256 chainId) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        require(chainId != 0, \"Bad chainId\");\r\n        delete allowedTargets[token][chainId];\r\n    }\r\n    \r\n    function nonEvmDisallowTarget(address token, string memory chainId) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        delete nonEvmAllowedTargets[token][chainId];\r\n    }\r\n\r\n    function addFoundryAsset(address token) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        isFoundryAsset[token] = true;\r\n    }\r\n\r\n    function removeFoundryAsset(address token) external onlyAdmin {\r\n        require(token != address(0), \"Bad token\");\r\n        isFoundryAsset[token] = false;\r\n    }\r\n\r\n    /**\r\n     *************** Public operations ***************\r\n     */\r\n\r\n    function swap(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 targetNetwork,\r\n        address targetToken\r\n    ) external onlyRouter returns (uint256) {\r\n        return\r\n            _swap(\r\n                msg.sender,\r\n                token,\r\n                amount,\r\n                targetNetwork,\r\n                targetToken,\r\n                msg.sender\r\n            );\r\n    }\r\n\r\n    function swapToAddress(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 targetNetwork,\r\n        address targetToken,\r\n        address targetAddress\r\n    ) external onlyRouter returns (uint256) {\r\n        require(\r\n            targetAddress != address(0),\r\n            \"BridgePool: targetAddress is required\"\r\n        );\r\n        return\r\n            _swap(\r\n                msg.sender,\r\n                token,\r\n                amount,\r\n                targetNetwork,\r\n                targetToken,\r\n                targetAddress\r\n            );\r\n    }\r\n\r\n    function nonEvmSwapToAddress(\r\n        address token,\r\n        uint256 amount,\r\n        string memory targetNetwork,\r\n        string memory targetToken,\r\n        string memory targetAddress\r\n    ) external onlyRouter returns (uint256) {\r\n        return\r\n            _nonEvmSwap(\r\n                msg.sender,\r\n                token,\r\n                amount,\r\n                targetNetwork,\r\n                targetToken,\r\n                targetAddress\r\n            );\r\n    }\r\n\r\n    function _swap(\r\n        address from,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 targetNetwork,\r\n        address targetToken,\r\n        address targetAddress\r\n    ) internal returns (uint256) {\r\n        require(from != address(0), \"BP: bad from\");\r\n        require(token != address(0), \"BP: bad token\");\r\n        require(targetNetwork != 0, \"BP: targetNetwork is requried\");\r\n        require(targetToken != address(0), \"BP: bad target token\");\r\n        require(amount != 0, \"BP: bad amount\");\r\n        require(\r\n            allowedTargets[token][targetNetwork] == targetToken,\r\n            \"BP: target not allowed\"\r\n        );\r\n        amount = SafeAmount.safeTransferFrom(\r\n            token,\r\n            from,\r\n            address(this),\r\n            amount\r\n        );\r\n        emit BridgeSwap(\r\n            from,\r\n            token,\r\n            targetNetwork,\r\n            targetToken,\r\n            targetAddress,\r\n            amount\r\n        );\r\n        return amount;\r\n    }\r\n\r\n    function _nonEvmSwap(\r\n        address from,\r\n        address token,\r\n        uint256 amount,\r\n        string memory targetNetwork,\r\n        string memory targetToken,\r\n        string memory targetAddress\r\n    ) internal returns (uint256) {\r\n        require(from != address(0), \"BP: bad from\");\r\n        require(token != address(0), \"BP: bad token\");\r\n        require(amount != 0, \"BP: bad amount\");\r\n        require(\r\n            \r\n            keccak256(abi.encodePacked(nonEvmAllowedTargets[token][targetNetwork])) == keccak256(abi.encodePacked(targetToken)),\r\n            \"BP: target not allowed\"\r\n        );\r\n        amount = SafeAmount.safeTransferFrom(\r\n            token,\r\n            from,\r\n            address(this),\r\n            amount\r\n        );\r\n        emit nonEvmBridgeSwap(\r\n            from,\r\n            token,\r\n            targetNetwork,\r\n            targetToken,\r\n            targetAddress,\r\n            amount\r\n        );\r\n        return amount;\r\n    }\r\n\r\n    function withdrawSigned(\r\n        address token,\r\n        address payee,\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes memory signature\r\n    ) external onlyRouter returns (uint256) {\r\n        require(token != address(0), \"BP: bad token\");\r\n        require(payee != address(0), \"BP: bad payee\");\r\n        require(salt != 0, \"BP: bad salt\");\r\n        require(amount != 0, \"BP: bad amount\");\r\n        bytes32 message = withdrawSignedMessage(token, payee, amount, salt);\r\n        address _signer = signerUnique(message, signature);\r\n        require(signers[_signer], \"BridgePool: Invalid signer\");\r\n\r\n        uint256 fee = 0;\r\n        address _feeDistributor = feeDistributor;\r\n        if (_feeDistributor != address(0)) {\r\n            fee = (amount * fees[token]) / 10000;\r\n            amount = amount - fee;\r\n            if (fee != 0) {\r\n                IERC20(token).safeTransfer(_feeDistributor, fee);\r\n                IGeneralTaxDistributor(_feeDistributor).distributeTax(token);\r\n            }\r\n        }\r\n        IERC20(token).safeTransfer(payee, amount);\r\n        emit TransferBySignature(_signer, payee, token, amount, fee);\r\n        return amount;\r\n    }\r\n\r\n    function withdraw(\r\n        address token,\r\n        address payee,\r\n        uint256 amount\r\n    ) external onlyRouter returns (uint256) {\r\n        require(token != address(0), \"BP: bad token\");\r\n        require(payee != address(0), \"BP: bad payee\");\r\n        require(amount != 0, \"BP: bad amount\");\r\n        require(isFoundryAsset[token] == true, \"token is not foundry asset\");\r\n        uint256 contractBalance = IERC20(token).balanceOf(\r\n            address(this)\r\n        );\r\n        require(\r\n            contractBalance >= amount,\r\n            \"insufficient foundry asset liquidity amount\"\r\n        );\r\n        IERC20(token).safeTransfer(payee, amount);\r\n        return amount;\r\n    }\r\n\r\n    function withdrawSignedVerify(\r\n        address token,\r\n        address payee,\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes calldata signature\r\n    ) external view returns (bytes32, address) {\r\n        bytes32 message = withdrawSignedMessage(token, payee, amount, salt);\r\n        (bytes32 digest, address _signer) = signer(message, signature);\r\n        return (digest, _signer);\r\n    }\r\n\r\n    function withdrawSignedMessage(\r\n        address token,\r\n        address payee,\r\n        uint256 amount,\r\n        bytes32 salt\r\n    ) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(WITHDRAW_SIGNED_METHOD, token, payee, amount, salt)\r\n            );\r\n    }\r\n\r\n    function addLiquidity(address token, uint256 amount) external {\r\n        require(amount != 0, \"Amount must be positive\");\r\n        require(token != address(0), \"Bad token\");\r\n        require(\r\n            isFoundryAsset[token] == true,\r\n            \"Only foundry assets can be added\"\r\n        );\r\n        amount = SafeAmount.safeTransferFrom(\r\n            token,\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        liquidities[token][msg.sender] =\r\n            liquidities[token][msg.sender] +\r\n            amount;\r\n        emit BridgeLiquidityAdded(msg.sender, token, amount);\r\n    }\r\n\r\n    function removeLiquidityIfPossible(address token, uint256 amount)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        require(amount != 0, \"Amount must be positive\");\r\n        require(token != address(0), \"Bad token\");\r\n        require(\r\n            isFoundryAsset[token] == true,\r\n            \"Only foundry assets can be removed\"\r\n        );\r\n        uint256 liq = liquidities[token][msg.sender];\r\n        require(liq >= amount, \"Not enough liquidity\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        uint256 actualLiq = balance > amount ? amount : balance;\r\n        liquidities[token][msg.sender] =\r\n            liquidities[token][msg.sender] -\r\n            actualLiq;\r\n        if (actualLiq != 0) {\r\n            IERC20(token).safeTransfer(msg.sender, actualLiq);\r\n            emit BridgeLiquidityRemoved(msg.sender, token, amount);\r\n        }\r\n        return actualLiq;\r\n    }\r\n\r\n    function liquidity(address token, address liquidityAdder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return liquidities[token][liquidityAdder];\r\n    }\r\n}\r\n// File: contracts/upgradeable-Bridge/FiberRouter.sol\r\n\r\n\r\npragma solidity 0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n @author The ferrum network.\r\n @title This is a vesting contract named as FiberRouter.\r\n*/\r\ncontract FiberRouter is ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    address public pool;\r\n    mapping(address => AggregatorV3Interface) public priceFeed;\r\n\r\n    event Swap(\r\n        address sourceToken,\r\n        address targetToken,\r\n        uint256 sourceChainId,\r\n        uint256 targetChainId,\r\n        uint256 sourceAmount,\r\n        address sourceAddress,\r\n        address targetAddress,\r\n        uint256 swapBridgeAmount\r\n    );\r\n\r\n    event Withdraw(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes signature\r\n    );\r\n\r\n    event NonEvmSwap(\r\n        address sourceToken,\r\n        string targetToken,\r\n        uint256 sourceChainId,\r\n        string targetChainId,\r\n        uint256 sourceAmount,\r\n        address sourceAddress,\r\n        string targetAddress\r\n    );\r\n\r\n    /**\r\n     @notice The payable receive method\r\n     */\r\n    receive() external payable {}\r\n\r\n    // /**\r\n    //  @notice Initialization of contract\r\n    // */\r\n    // function initialize() external initializer {\r\n    //     // __Ownable_init();\r\n    //     // __ReentrancyGuard_init();\r\n    // }\r\n\r\n    /**\r\n     @notice Sets the fund manager contract.\r\n     @param _pool The fund manager\r\n     */\r\n    function setPool(address _pool) external onlyOwner {\r\n        pool = _pool;\r\n    }\r\n\r\n    /**\r\n     @notice Sets the oracle for foundry tokens.\r\n     @param _token The foundry token address\r\n     @param _oracleAddress The oracle address for price feed\r\n     */\r\n    function setOracle(address _token, AggregatorV3Interface _oracleAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        priceFeed[_token] = _oracleAddress;\r\n    }\r\n\r\n    function getFoundryTokenPrice(address _token)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (\r\n            ,\r\n            /*uint80 roundID*/\r\n            int256 price,\r\n            ,\r\n            ,\r\n\r\n        ) = /*uint startedAt*/\r\n            /*uint timeStamp*/\r\n            /*uint80 answeredInRound*/\r\n            priceFeed[_token].latestRoundData();\r\n        uint8 baseDecimals = priceFeed[_token].decimals();\r\n        return uint256(price) * 10**(18 - baseDecimals);\r\n        // return uint(price);\r\n    }\r\n\r\n    /*\r\n     @notice Initiate an x-chain swap.\r\n     @param token The source token to be swaped\r\n     @param amount The source amount\r\n     @param targetNetwork The chain ID for the target network\r\n     @param targetToken The target token address\r\n     @param swapTargetTokenTo Swap the target token to a new token\r\n     @param targetAddress Final destination on target\r\n     */\r\n    function swap(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 targetNetwork,\r\n        address targetToken,\r\n        address targetAddress,\r\n        uint256 swapBridgeAmount\r\n    ) external {\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        IERC20(token).approve(pool, amount);\r\n        FundManager(pool).swapToAddress(\r\n            token,\r\n            amount,\r\n            targetNetwork,\r\n            targetToken,\r\n            targetAddress\r\n        );\r\n        emit Swap(\r\n            token,\r\n            targetToken,\r\n            block.chainid,\r\n            targetNetwork,\r\n            amount,\r\n            _msgSender(),\r\n            targetAddress,\r\n            swapBridgeAmount\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Initiate an x-chain swap.\r\n     @param token The source token to be swaped\r\n     @param amount The source amount\r\n     @param targetNetwork The chain ID for the target network\r\n     @param targetToken The target token address\r\n     @param swapTargetTokenTo Swap the target token to a new token\r\n     @param targetAddress Final destination on target\r\n     */\r\n    function nonEvmSwap(\r\n        address token,\r\n        uint256 amount,\r\n        string memory targetNetwork,\r\n        string memory targetToken,\r\n        string memory targetAddress\r\n    ) external {\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        IERC20(token).approve(pool, amount);\r\n        FundManager(pool).nonEvmSwapToAddress(\r\n            token,\r\n            amount,\r\n            targetNetwork,\r\n            targetToken,\r\n            targetAddress\r\n        );\r\n        NonEvmSwap(\r\n            token,\r\n            targetToken,\r\n            block.chainid,\r\n            targetNetwork,\r\n            amount,\r\n            _msgSender(),\r\n            targetAddress\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Do a local swap and generate a cross-chain swap\r\n     @param swapRouter The local swap router\r\n     @param amountIn The amount in\r\n     @param amountCrossMin Equivalent to amountOutMin on uniswap\r\n     @param path The swap path\r\n     @param deadline The swap dealine\r\n     @param crossTargetNetwork The target network for the swap\r\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\r\n       will also be required on the other end\r\n     @param crossTargetAddress The target address for the swap\r\n     */\r\n    function swapAndCrossOneInch(\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountCrossMin, // amountOutMin on uniswap\r\n        uint256 crossTargetNetwork,\r\n        address crossTargetToken,\r\n        address crossTargetAddress,\r\n        uint256 swapBridgeAmount,\r\n        bytes memory _calldata,\r\n        address fromToken,\r\n        address foundryToken\r\n    ) external nonReentrant {\r\n        amountIn = SafeAmount.safeTransferFrom(\r\n            fromToken,\r\n            msg.sender,\r\n            address(this),\r\n            amountIn\r\n        );\r\n        IERC20(fromToken).approve(swapRouter, amountIn);\r\n        IERC20(foundryToken).approve(pool, amountCrossMin);\r\n        _swapAndCrossOneInch(\r\n            crossTargetAddress,\r\n            swapRouter,\r\n            amountCrossMin,\r\n            crossTargetNetwork,\r\n            crossTargetToken,\r\n            _calldata,\r\n            foundryToken\r\n        );\r\n        emit Swap(\r\n            fromToken,\r\n            crossTargetToken,\r\n            block.chainid,\r\n            crossTargetNetwork,\r\n            amountIn,\r\n            _msgSender(),\r\n            crossTargetAddress,\r\n            swapBridgeAmount\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Do a local swap and generate a cross-chain swap\r\n     @param swapRouter The local swap router\r\n     @param amountIn The amount in\r\n     @param amountCrossMin Equivalent to amountOutMin on uniswap\r\n     @param path The swap path\r\n     @param deadline The swap dealine\r\n     @param crossTargetNetwork The target network for the swap\r\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\r\n       will also be required on the other end\r\n     @param crossTargetAddress The target address for the swap\r\n     */\r\n    function swapAndCross(\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountCrossMin, // amountOutMin on uniswap\r\n        address[] calldata path,\r\n        uint256 deadline,\r\n        uint256 crossTargetNetwork,\r\n        address crossTargetToken,\r\n        address crossTargetAddress,\r\n        uint256 swapBridgeAmount\r\n    ) external nonReentrant {\r\n        amountIn = SafeAmount.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            address(this),\r\n            amountIn\r\n        );\r\n        IERC20(path[0]).approve(swapRouter, amountIn);\r\n        _swapAndCross(\r\n            msg.sender,\r\n            swapRouter,\r\n            amountIn,\r\n            amountCrossMin,\r\n            path,\r\n            deadline,\r\n            crossTargetNetwork,\r\n            crossTargetToken\r\n        );\r\n        emit Swap(\r\n            path[0],\r\n            crossTargetToken,\r\n            block.chainid,\r\n            crossTargetNetwork,\r\n            amountIn,\r\n            _msgSender(),\r\n            crossTargetAddress,\r\n            swapBridgeAmount\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Do a local swap and generate a cross-chain swap\r\n     @param swapRouter The local swap router\r\n     @param amountIn The amount in\r\n     @param amountCrossMin Equivalent to amountOutMin on uniswap\r\n     @param path The swap path\r\n     @param deadline The swap dealine\r\n     @param crossTargetNetwork The target network for the swap\r\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\r\n       will also be required on the other end\r\n     @param crossTargetAddress The target address for the swap\r\n     */\r\n    function nonEvmSwapAndCrossOneInch(\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountCrossMin, // amountOutMin on uniswap\r\n        string memory crossTargetNetwork,\r\n        string memory crossTargetToken,\r\n        string memory crossTargetAddress,\r\n        uint256 swapBridgeAmount,\r\n        bytes memory _calldata,\r\n        address fromToken,\r\n        address foundryToken\r\n    ) external nonReentrant {\r\n        amountIn = SafeAmount.safeTransferFrom(\r\n            fromToken,\r\n            msg.sender,\r\n            address(this),\r\n            amountIn\r\n        );\r\n        IERC20(fromToken).approve(swapRouter, amountIn);\r\n        IERC20(foundryToken).approve(pool, amountIn);\r\n        _nonEvmSwapAndCrossOneInch(\r\n            crossTargetAddress,\r\n            swapRouter,\r\n            amountCrossMin,\r\n            crossTargetNetwork,\r\n            crossTargetToken,\r\n            _calldata,\r\n            foundryToken\r\n        );\r\n        NonEvmSwap(\r\n            fromToken,\r\n            crossTargetToken,\r\n            block.chainid,\r\n            crossTargetNetwork,\r\n            amountIn,\r\n            _msgSender(),\r\n            crossTargetAddress\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Do a local swap and generate a cross-chain swap\r\n     @param swapRouter The local swap router\r\n     @param amountIn The amount in\r\n     @param amountCrossMin Equivalent to amountOutMin on uniswap\r\n     @param path The swap path\r\n     @param deadline The swap dealine\r\n     @param crossTargetNetwork The target network for the swap\r\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\r\n       will also be required on the other end\r\n     @param crossTargetAddress The target address for the swap\r\n     */\r\n    function nonEvmSwapAndCross(\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountCrossMin, // amountOutMin on uniswap\r\n        address[] calldata path,\r\n        uint256 deadline,\r\n        string memory crossTargetNetwork,\r\n        string memory crossTargetToken,\r\n        string memory crossTargetAddress\r\n    ) external nonReentrant {\r\n        amountIn = SafeAmount.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            address(this),\r\n            amountIn\r\n        );\r\n        IERC20(path[0]).approve(swapRouter, amountIn);\r\n        _nonEvmSwapAndCross(\r\n            crossTargetAddress,\r\n            swapRouter,\r\n            amountIn,\r\n            amountCrossMin,\r\n            path,\r\n            deadline,\r\n            crossTargetNetwork,\r\n            crossTargetToken\r\n        );\r\n        NonEvmSwap(\r\n            path[0],\r\n            crossTargetToken,\r\n            block.chainid,\r\n            crossTargetNetwork,\r\n            amountIn,\r\n            _msgSender(),\r\n            crossTargetAddress\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Withdraws funds based on a multisig\r\n     @dev For signature swapToToken must be the same as token\r\n     @param token The token to withdraw\r\n     @param payee Address for where to send the tokens to\r\n     @param amount The mount\r\n     @param sourceChainId The source chain initiating the tx\r\n     @param swapTxId The txId for the swap from the source chain\r\n     @param multiSignature The multisig validator signature\r\n     */\r\n    function withdrawSigned(\r\n        address token,\r\n        address payee,\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes memory multiSignature\r\n    ) external {\r\n        FundManager(pool).withdrawSigned(\r\n            token,\r\n            payee,\r\n            amount,\r\n            salt,\r\n            multiSignature\r\n        );\r\n\r\n        emit Withdraw(token, payee, amount, salt, multiSignature);\r\n    }\r\n\r\n    /*\r\n     @notice Withdraws funds and swaps to a new token\r\n     @param to Address for where to send the tokens to\r\n     @param swapRouter The swap router address\r\n     @param amountIn The amount to swap\r\n     @param sourceChainId The source chain Id. Used for signature\r\n     @param swapTxId The source tx Id. Used for signature\r\n     @param amountOutMin Same as amountOutMin on uniswap\r\n     @param path The swap path\r\n     @param deadline The swap deadline\r\n     @param multiSignature The multisig validator signature\r\n     */\r\n    function withdrawSignedAndSwap(\r\n        address to,\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin, // amountOutMin on uniswap\r\n        address[] calldata path,\r\n        uint256 deadline,\r\n        bytes32 salt,\r\n        bytes memory multiSignature\r\n    ) external {\r\n        require(path.length > 1, \"BR: path too short\");\r\n        FundManager(pool).withdrawSigned(\r\n            path[0],\r\n            address(this),\r\n            amountIn,\r\n            salt,\r\n            multiSignature\r\n        );\r\n        amountIn = IERC20(path[0]).balanceOf(address(this)); // Actual amount received\r\n        IERC20(path[0]).approve(swapRouter, amountIn);\r\n        IUniswapV2Router02(swapRouter)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amountIn,\r\n                amountOutMin,\r\n                path,\r\n                to,\r\n                deadline\r\n            );\r\n        emit Withdraw(\r\n            path[path.length - 1],\r\n            to,\r\n            amountOutMin,\r\n            salt,\r\n            multiSignature\r\n        );\r\n    }\r\n\r\n    /*\r\n     @notice Withdraws funds and swaps to a new token\r\n     @param to Address for where to send the tokens to\r\n     @param swapRouter The swap router address\r\n     @param amountIn The amount to swap\r\n     @param sourceChainId The source chain Id. Used for signature\r\n     @param swapTxId The source tx Id. Used for signature\r\n     @param amountOutMin Same as amountOutMin on uniswap\r\n     @param path The swap path\r\n     @param deadline The swap deadline\r\n     @param multiSignature The multisig validator signature\r\n     */\r\n    function withdrawSignedAndSwapOneInch(\r\n        address to,\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin, // amountOutMin on uniswap\r\n        address foundryToken,\r\n        address targetToken,\r\n        bytes memory _calldata,\r\n        bytes32 salt,\r\n        bytes memory multiSignature\r\n    ) external {\r\n        require(foundryToken != address(0), \"Bad Token Address\");\r\n\r\n        FundManager(pool).withdrawSigned(\r\n            foundryToken,\r\n            address(this),\r\n            amountIn,\r\n            salt,\r\n            multiSignature\r\n        );\r\n        amountIn = IERC20(foundryToken).balanceOf(address(this)); // Actual amount received\r\n        IERC20(foundryToken).approve(swapRouter, amountIn);\r\n        (bool success, ) = address(swapRouter).call(_calldata);\r\n\r\n        if (!success) {\r\n            revert(\"SWAP_FAILED\");\r\n        }\r\n        uint256 amountOut = IERC20(targetToken).balanceOf(address(this)); // Actual amount received\r\n        IERC20(targetToken).transfer(to, amountOut);\r\n        emit Withdraw(foundryToken, to, amountOutMin, salt, multiSignature);\r\n    }\r\n\r\n    /*\r\n    @notice Runs a local swap and then a cross chain swap\r\n    @param to The receiver\r\n    @param swapRouter the swap router\r\n    @param amountIn The amount in\r\n    @param amountCrossMin Equivalent to amountOutMin on uniswap \r\n    @param path The swap path\r\n    @param deadline The swap deadline\r\n    @param crossTargetNetwork The target chain ID\r\n    @param crossTargetToken The target network token\r\n    @param crossSwapTargetTokenTo The target network token after swap\r\n    @param crossTargetAddress The receiver of tokens on the target network\r\n    */\r\n    function _swapAndCross(\r\n        address to,\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountCrossMin,\r\n        address[] calldata path,\r\n        uint256 deadline,\r\n        uint256 crossTargetNetwork,\r\n        address crossTargetToken // address crossSwapTargetTokenTo // address crossTargetAddress\r\n    ) internal {\r\n        IUniswapV2Router02(swapRouter)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amountIn,\r\n                amountCrossMin,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            );\r\n        address crossToken = path[path.length - 1];\r\n        IERC20(crossToken).approve(pool, amountCrossMin);\r\n        FundManager(pool).swapToAddress(\r\n            crossToken,\r\n            amountCrossMin,\r\n            crossTargetNetwork,\r\n            crossTargetToken,\r\n            to\r\n        );\r\n    }\r\n\r\n    /*\r\n    @notice Runs a local swap and then a cross chain swap\r\n    @param to The receiver\r\n    @param swapRouter the swap router\r\n    @param amountIn The amount in\r\n    @param amountCrossMin Equivalent to amountOutMin on uniswap \r\n    @param path The swap path\r\n    @param deadline The swap deadline\r\n    @param crossTargetNetwork The target chain ID\r\n    @param crossTargetToken The target network token\r\n    @param crossSwapTargetTokenTo The target network token after swap\r\n    @param crossTargetAddress The receiver of tokens on the target network\r\n    */\r\n    function _swapAndCrossOneInch(\r\n        address to,\r\n        address swapRouter,\r\n        uint256 amountCrossMin,\r\n        uint256 crossTargetNetwork,\r\n        address crossTargetToken, // address crossSwapTargetTokenTo // address crossTargetAddress\r\n        bytes memory _calldata,\r\n        address foundryToken\r\n    ) internal {\r\n        (bool success, ) = address(swapRouter).call(_calldata);\r\n\r\n        if (!success) {\r\n            revert(\"SWAP_FAILED\");\r\n        }\r\n\r\n        FundManager(pool).swapToAddress(\r\n            foundryToken,\r\n            amountCrossMin,\r\n            crossTargetNetwork,\r\n            crossTargetToken,\r\n            to\r\n        );\r\n    }\r\n\r\n    /*\r\n    @notice Runs a local swap and then a cross chain swap\r\n    @param to The receiver\r\n    @param swapRouter the swap router\r\n    @param amountIn The amount in\r\n    @param amountCrossMin Equivalent to amountOutMin on uniswap \r\n    @param path The swap path\r\n    @param deadline The swap deadline\r\n    @param crossTargetNetwork The target chain ID\r\n    @param crossTargetToken The target network token\r\n    @param crossSwapTargetTokenTo The target network token after swap\r\n    @param crossTargetAddress The receiver of tokens on the target network\r\n    */\r\n    function _nonEvmSwapAndCross(\r\n        string memory to,\r\n        address swapRouter,\r\n        uint256 amountIn,\r\n        uint256 amountCrossMin,\r\n        address[] calldata path,\r\n        uint256 deadline,\r\n        string memory crossTargetNetwork,\r\n        string memory crossTargetToken // address crossSwapTargetTokenTo // address crossTargetAddress\r\n    ) internal {\r\n        IUniswapV2Router02(swapRouter)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amountIn,\r\n                amountCrossMin,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            );\r\n        address crossToken = path[path.length - 1];\r\n        IERC20(crossToken).approve(pool, amountCrossMin);\r\n        FundManager(pool).nonEvmSwapToAddress(\r\n            crossToken,\r\n            amountCrossMin,\r\n            crossTargetNetwork,\r\n            crossTargetToken,\r\n            to\r\n        );\r\n    }\r\n\r\n    /*\r\n    @notice Runs a local swap and then a cross chain swap\r\n    @param to The receiver\r\n    @param swapRouter the swap router\r\n    @param amountIn The amount in\r\n    @param amountCrossMin Equivalent to amountOutMin on uniswap \r\n    @param path The swap path\r\n    @param deadline The swap deadline\r\n    @param crossTargetNetwork The target chain ID\r\n    @param crossTargetToken The target network token\r\n    @param crossSwapTargetTokenTo The target network token after swap\r\n    @param crossTargetAddress The receiver of tokens on the target network\r\n    */\r\n    function _nonEvmSwapAndCrossOneInch(\r\n        string memory to,\r\n        address swapRouter,\r\n        uint256 amountCrossMin,\r\n        string memory crossTargetNetwork,\r\n        string memory crossTargetToken, // address crossSwapTargetTokenTo // address crossTargetAddress\r\n        bytes memory _calldata,\r\n        address foundryToken\r\n    ) internal {\r\n        (bool success, ) = address(swapRouter).call(_calldata);\r\n\r\n        if (!success) {\r\n            revert(\"SWAP_FAILED\");\r\n        }\r\n\r\n        FundManager(pool).nonEvmSwapToAddress(\r\n            foundryToken,\r\n            amountCrossMin,\r\n            crossTargetNetwork,\r\n            crossTargetToken,\r\n            to\r\n        );\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetToken\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChainId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"}],\"name\":\"NonEvmSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapBridgeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFoundryTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"targetNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"}],\"name\":\"nonEvmSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCrossMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"crossTargetNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"crossTargetToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"crossTargetAddress\",\"type\":\"string\"}],\"name\":\"nonEvmSwapAndCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCrossMin\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"crossTargetNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"crossTargetToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"crossTargetAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"swapBridgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"}],\"name\":\"nonEvmSwapAndCrossOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBridgeAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCrossMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossTargetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossTargetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBridgeAmount\",\"type\":\"uint256\"}],\"name\":\"swapAndCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCrossMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossTargetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossTargetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBridgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"}],\"name\":\"swapAndCrossOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSignedAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSignedAndSwapOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FiberRouter", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1560f2438a18730c8fdcac0a09345930d60a1855228699bd91a5acf98d0fbc31"}