{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract RegistraContract {\r\n    address public nftContractAddress = 0xC905F638914EaAe6A157CCa89341D888289F47b9;\r\n    TestetsNFT public nftContract;\r\n    mapping(address => string) public registrationData;\r\n    mapping(string => address[]) public registeredAddresses;\r\n    mapping(string => uint256) public totalNFTsByRegistration;\r\n\r\n    constructor() {\r\n        nftContract = TestetsNFT(nftContractAddress);\r\n    }\r\n\r\n    modifier onlyNftOwners() {\r\n        require(nftContract.balanceOf(msg.sender) > 0, \"Only NFT owners can call this function\");\r\n        _;\r\n    }\r\n\r\n    function registra(string memory id) public onlyNftOwners {\r\n        address sender = msg.sender;\r\n        string memory previousId = registrationData[sender];\r\n\r\n        if (keccak256(bytes(previousId)) != keccak256(bytes(id))) {\r\n            // Rimuovi l'indirizzo dall'array delle registrazioni precedenti\r\n            if (bytes(previousId).length > 0) {\r\n                removeAddress(previousId, sender);\r\n                totalNFTsByRegistration[previousId] -= nftContract.balanceOf(sender);\r\n            }\r\n\r\n            // Aggiungi l'indirizzo all'array delle nuove registrazioni\r\n            registrationData[sender] = id;\r\n            registeredAddresses[id].push(sender);\r\n            totalNFTsByRegistration[id] += nftContract.balanceOf(sender);\r\n        }\r\n    }\r\n\r\n    function removeAddress(string memory id, address addr) private {\r\n        address[] storage addresses = registeredAddresses[id];\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            if (addresses[i] == addr) {\r\n                addresses[i] = addresses[addresses.length - 1];\r\n                addresses.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOwnedNFTCount(address owner) public view returns (uint256) {\r\n        return nftContract.balanceOf(owner);\r\n    }\r\n\r\n    function getAddressesByRegistration(string memory id) public view returns (address[] memory) {\r\n        return registeredAddresses[id];\r\n    }\r\n\r\n    function getTotalNFTsByRegistration(string memory id) public view returns (uint256) {\r\n        return totalNFTsByRegistration[id];\r\n    }\r\n}\r\n\r\ninterface TestetsNFT {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getAddressesByRegistration\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnedNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getTotalNFTsByRegistration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract TestetsNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"registra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrationData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"totalNFTsByRegistration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RegistraContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f0b117caa8339c1e73c1c0449d1be1475800e82a471f2d43b8bc3225b657159"}