{"SourceCode": "pragma solidity 0.8.7;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IHakkaIntelligence {\r\n    function reveal(address _player) external returns (uint256 score);\r\n    function revealOpen() external view returns (uint256);\r\n    function revealClose() external view returns (uint256);\r\n    function periodStop() external view returns (uint256);\r\n    function periodStart() external view returns (uint256);\r\n    function proceed() external;\r\n}\r\n\r\ncontract keeper {\r\n    IHakkaIntelligence public HI;\r\n\r\n    uint256 public cost;\r\n    uint256 public index;\r\n    address public owner;\r\n    address[] public queue;\r\n    uint256 public flag;\r\n\r\n    event Register(address indexed user);\r\n    event Perform(address indexed user);\r\n    event Init(address HI, uint256 cost);\r\n    event Proceed(address indexed HI);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function init(address _HI, uint256 _cost) external {\r\n        require(msg.sender == owner, \"not owner\");\r\n        require(queue.length == index, \"Work not done yet\");\r\n        HI = IHakkaIntelligence(_HI);\r\n        cost = _cost;\r\n        index = 0;\r\n        delete queue;\r\n        flag = 1;\r\n        emit Init(_HI, _cost);\r\n    }\r\n\r\n    function getQueueLength() external view returns (uint256) {\r\n        return queue.length;\r\n    }\r\n\r\n    function register() external payable {\r\n        require(msg.value >= cost);\r\n        queue.push(msg.sender);\r\n        emit Register(msg.sender);\r\n    }\r\n\r\n    function validate() internal view returns (bool) {\r\n        if(flag == 3)\r\n            return HI.revealOpen() < block.timestamp && HI.revealClose() > block.timestamp && queue.length > index;\r\n        else if(flag == 2)\r\n            return HI.periodStop() <= block.timestamp;\r\n        else if(flag == 1)\r\n            return HI.periodStart() <= block.timestamp;\r\n        else return false;\r\n    }\r\n\r\n    function checkUpkeep(bytes calldata) external view returns (bool upkeepNeeded, bytes memory performData) {\r\n        return (validate(), bytes(\"\"));\r\n    }\r\n\r\n    function performUpkeep(bytes calldata) external {\r\n        require(validate(), \"invalid upkeep\");\r\n\r\n        if(flag == 3) {\r\n            address target = queue[index];\r\n            bytes memory data = abi.encodeWithSelector(HI.reveal.selector, target);\r\n            (bool success, ) = address(HI).call(data);\r\n            if (success) emit Perform(target);\r\n            ++index;\r\n        }\r\n        else if(flag == 2) {\r\n            bytes memory data = abi.encodeWithSelector(HI.proceed.selector);\r\n            (bool success, ) = address(HI).call(data);\r\n            if(success) emit Proceed(address(HI));\r\n            flag = 3;\r\n        }\r\n        else if(flag == 1) {\r\n            bytes memory data = abi.encodeWithSelector(HI.proceed.selector);\r\n            (bool success, ) = address(HI).call(data);\r\n            if(success) emit Proceed(address(HI));\r\n            flag = 2;\r\n        }\r\n    }\r\n\r\n    function withdraw() external {\r\n        (bool success, ) = payable(owner).call{value:address(this).balance}(\"\");\r\n        require(success, \"withdraw fail\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"HI\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Perform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"HI\",\"type\":\"address\"}],\"name\":\"Proceed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HI\",\"outputs\":[{\"internalType\":\"contract IHakkaIntelligence\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_HI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "keeper", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "54088", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://545b68c232372bd8146912eb22b19c08ce864b620fcafed269b41059467fdbb4"}