{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract test is Ownable {\r\n    uint256 public totalAirdropped;\r\n    uint256 public lastReset;\r\n    uint256 public nextBonusTokenId = 1;\r\n\r\n    constructor() {\r\n        lastReset = block.timestamp;\r\n    }\r\n\r\n    struct BonusToken {\r\n        address tokenAddress;\r\n        uint256 minimumHolding;\r\n        uint256 multiplier;\r\n    }\r\n\r\n    mapping(uint256 => BonusToken) public bonusTokens;\r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => bool) public airdroppableTokens;\r\n\r\n    function addAirdroppableToken(address tokenAddress) external onlyOwner {\r\n        airdroppableTokens[tokenAddress] = true;\r\n    }\r\n\r\n    function removeAirdroppableToken(address tokenAddress) external onlyOwner {\r\n        airdroppableTokens[tokenAddress] = false;\r\n    }\r\n\r\n    function addToBlacklist(address user) external onlyOwner {\r\n        blacklist[user] = true;\r\n    }\r\n\r\n    function removeFromBlacklist(address user) external onlyOwner {\r\n        blacklist[user] = false;\r\n    }\r\n\r\n    function addBonusToken(\r\n        address tokenAddress,\r\n        uint256 minimumHolding,\r\n        uint256 multiplier\r\n    ) external onlyOwner {\r\n        BonusToken memory newBonusToken = BonusToken(\r\n            tokenAddress,\r\n            minimumHolding,\r\n            multiplier\r\n        );\r\n        bonusTokens[nextBonusTokenId] = newBonusToken;\r\n        nextBonusTokenId++;\r\n    }\r\n\r\n    function removeBonusToken(uint256 tokenId) external onlyOwner {\r\n        require(tokenId > 0 && tokenId < nextBonusTokenId, \"Invalid token ID\");\r\n        delete bonusTokens[tokenId];\r\n    }\r\n\r\n    function multiSend(\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        address tokenAddress\r\n    ) external onlyOwner {\r\n        require(\r\n            airdroppableTokens[tokenAddress],\r\n            \"Token not allowed for airdrop\"\r\n        );\r\n        IERC20 atoken = IERC20(tokenAddress);\r\n\r\n        require(\r\n            recipients.length == amounts.length,\r\n            \"Recipients and amounts arrays must have the same length\"\r\n        );\r\n\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(\r\n                !blacklist[recipients[i]],\r\n                \"TokenAirdrop: recipient is blacklisted\"\r\n            );\r\n            uint256 multiplier = getHighestMultiplier(recipients[i]);\r\n            uint256 finalAmount = amounts[i] * multiplier;\r\n            totalAmount += finalAmount;\r\n            require(\r\n                atoken.transferFrom(msg.sender, recipients[i], finalAmount),\r\n                \"TokenAirdrop: Failed to transfer tokens\"\r\n            );\r\n        }\r\n        totalAirdropped += totalAmount; //\r\n    }\r\n\r\n    function airdroppedTokens(\r\n        address tokenAddress\r\n    ) external view returns (uint256) {\r\n        require(\r\n            airdroppableTokens[tokenAddress],\r\n            \"Token not allowed for airdrop\"\r\n        );\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function getHighestMultiplier(\r\n        address user\r\n    ) internal view returns (uint256) {\r\n        uint256 highestMultiplier = 1;\r\n        for (uint256 i = 1; i < nextBonusTokenId; i++) {\r\n            BonusToken memory bonusToken = bonusTokens[i];\r\n            if (bonusToken.tokenAddress != address(0)) {\r\n                IERC20 btoken = IERC20(bonusToken.tokenAddress);\r\n                uint256 userBalance = btoken.balanceOf(user);\r\n                if (\r\n                    userBalance >= bonusToken.minimumHolding &&\r\n                    bonusToken.multiplier > highestMultiplier\r\n                ) {\r\n                    highestMultiplier = bonusToken.multiplier;\r\n                }\r\n            }\r\n        }\r\n        return highestMultiplier;\r\n    }\r\n\r\n    function getBonusTokenIdByAddress(\r\n        address tokenAddress\r\n    ) external view returns (uint256) {\r\n        for (uint256 i = 1; i < nextBonusTokenId; i++) {\r\n            if (bonusTokens[i].tokenAddress == tokenAddress) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0; // Return 0 if the token address is not found\r\n    }\r\n\r\n    function emergencyWithdraw(address tokenAddress) external onlyOwner {\r\n        IERC20 atoken = IERC20(tokenAddress);\r\n        uint256 tokenBalance = atoken.balanceOf(address(this));\r\n        require(\r\n            atoken.transfer(owner(), tokenBalance),\r\n            \"TokenAirdrop: Failed to transfer tokens.\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addAirdroppableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"addBonusToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdroppableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"airdroppedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBonusTokenIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBonusTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeAirdroppableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeBonusToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "test", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://337cb94773d90b354de9b754028a4fe4d66f2949b401ca30ccc02841fc85325a"}