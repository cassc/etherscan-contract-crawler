{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */ \\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title DataTypes\\n/// @notice This library contains the different data types for the Crafting system.\\nlibrary DataTypes {\\n\\n    /// @notice Enum to store the steps in the Crafting process.\\n    enum Step {\\n        CREATION,\\n        STYLING,\\n        ASSEMBLY\\n    }\\n\\n    /// @notice Enum to store the two types of NFTs available in the Crafting.\\n    enum NftType {\\n        ARMOR,\\n        WEAPON\\n    }\\n    \\n    /// @notice Enum to store the different Elements.\\n    enum Elements {\\n        BULLET,\\n        LASER,\\n        METAL,\\n        POLYVALENT\\n    }\\n\\n    /// @notice Enum to store the data for the Rarities.\\n    enum Rarity {\\n        COMMON,\\n        UNCOMMON,\\n        RARE,\\n        EPIC,\\n        LEGENDARY,\\n        NO_RARITY\\n    }\\n\\n    /// @notice Enum to store the different Weapon Pieces.\\n    enum WeaponPieces {\\n        HILT,\\n        CROSS_GUARD,\\n        BLADE,\\n        HEAD,\\n        GRIP,\\n        BARREL,\\n        BODY,\\n        MAGAZINE,\\n        REFLEX_SIGHT,\\n        HOLOGRAPHIC_SIGHT,\\n        LASER_POINTER,\\n        SILENCER,\\n        STOCK,\\n        X4_SIGHT,\\n        BAYONETTA,\\n        STRIKER,\\n        BIPOD,\\n        GRENADE_LAUNCHER,\\n        ATTACHED_SHOTGUN,\\n        SNIPER_SIGHT,\\n        BARREL_BRAKE\\n    }\\n\\n    /// @notice Struct to store the types for the Weapon Pieces.\\n    enum WeaponPieceTypes {\\n        MAIN,\\n        SIGHT,\\n        UNDER_BARREL,\\n        ACCESSORY\\n    }\\n\\n    /// @notice Enum to store the different Weapon Types.\\n    enum WeaponTypes {\\n        KNIFE,\\n        BLADE,\\n        BLUNT,\\n        PISTOL,\\n        REVOLVER,\\n        SHOTGUN,\\n        REPEATER_SHOTGUN,\\n        ASSAULT_SMG,\\n        HIGH_RATE_SMG,\\n        LIGHT_MACHINE_GUN,\\n        ASSAULT_RIFLE,\\n        SNIPER_RIFLE,\\n        PRECISION_RIFLE\\n    }\\n\\n    /// @notice Enum to store the different Armor Pieces.\\n    enum ArmorPieces {\\n        HELMET, \\n        CHEST,\\n        SHOULDERS,\\n        FOREARMS,\\n        ARMS,\\n        GLOVES,\\n        LEGS,\\n        KNEEPADS,\\n        BOOTS\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SharedStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { DataTypes } from \\\"./DataTypes.sol\\\";\\n\\n/// @title SharedStructs\\n/// @notice This library contains the different shared structs for the Crafting system.\\nlibrary SharedStructs {\\n\\n    struct RequestData {\\n        uint256 tokenId;\\n        uint8 tier;\\n    }\\n\\n    struct RangesByTier {\\n        uint16 minRange;\\n        uint16 maxRange;\\n    }\\n\\n    struct ArmorTierConfig {\\n        address armorAddress;\\n        uint8 armorQuantity;\\n        uint8 armorTierId;\\n        uint8 armorRarityId;\\n        string armorRarityName;\\n        uint8 collectionId;\\n        string collectionName;\\n    }\\n\\n    struct WeaponTierConfig {\\n        address weaponAddress;\\n        uint8 weaponQuantity;\\n        uint8 weaponTierId;\\n        uint8 weaponRarityId;\\n        string weaponRarityName;\\n        uint8 collectionId;\\n        string collectionName;\\n    }\\n\\n    struct ItemInfo {\\n        uint8 tier;\\n        uint8 rarityId;\\n        string rarityName;\\n        uint8 collectionId;\\n        string collectionName;\\n        address firstOwner;\\n        uint8 piece;\\n    }\\n\\n    /// @notice Struct to store the data for the Resources.\\n    struct Resource {\\n        address resourceAddress;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Struct to store the Weapon Piece information. \\n    struct WeaponPieceInfo {\\n        uint8 numAesthetics; \\n        DataTypes.WeaponPieceTypes weaponPieceType;\\n        mapping(uint8 => DataTypes.Elements[]) aestheticsInfo; // Aesthetic ID => Element ID[]\\n    }\\n\\n    /// @notice Struct to store the Weapon information.\\n    struct WeaponInfo {\\n        string description;      \\n        DataTypes.WeaponPieces[] weaponPieces;\\n        mapping(uint8 => mapping(DataTypes.Step => CraftingInfo)) craftingInfo; // Tier => Step => CraftingInfo\\n    }\\n\\n    /// @notice Struct to store the Armor Piece information. \\n    struct ArmorPieceInfo {\\n        string description;\\n        uint8 numAesthetics; \\n        mapping(uint8 => mapping(DataTypes.Step => CraftingInfo)) craftingInfo; // Tier => Step => CraftingInfo\\n    }\\n\\n    /// @notice Struct to store the Crafting information (Tier/Step dependent data).\\n    struct CraftingInfo {\\n        uint64 craftingTime;\\n        uint256 skipTimePrice;\\n        Resource[] resources;\\n    }\\n\\n    /// @notice Struct to store the information of the crafting items (Armor pieces and Weapons).\\n    struct CraftingItem {\\n        DataTypes.NftType nftType;\\n        uint8 itemId;\\n        uint8 tier;\\n        DataTypes.Elements element;\\n        uint8 rarityBooster;\\n        DataTypes.Rarity rarity;\\n        address owner;\\n        uint256 tokenId;\\n        uint8[] aesthetics;\\n    }\\n\\n    // @notice Struct to store the information needed for the Chainlink fallback.\\n    struct CraftingRequestData {\\n        uint256 craftingId;\\n        uint8 tier;\\n        uint8 rarityBoosterId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/controllers/WeaponsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IWeaponsController.sol\\\";\\nimport { SharedStructs } from \\\"../../libraries/SharedStructs.sol\\\";\\n\\n/// @title WeaponsController contract \\n/// @author Urriza\\n/// @notice A contract for managing the information regarding the Weapon NFTs in the Crafting system.\\n/// @dev Inherits from Initializable, AccessControlEnumerableUpgradeable and PausableUpgradeable for upgradeability, \\n/// access control and pausable features. It also implements the IWeaponsController interface.\\ncontract WeaponsController is \\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    IWeaponsController\\n{\\n    // ============== CONSTANTS ==============\\n\\n    /// @notice The role identifier for the manager who can change the Armor Pieces information.\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @notice Constant to store a role identifier for the pauser.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    // ============== VARIABLES ==============\\n\\n    /// @notice Variable for knowing if contract has been initialized.\\n    bool public initialized;\\n\\n    /// @notice Variable to store the weapon type address.\\n    address public weaponTypeAddress;\\n\\n    /// @notice Mapping to store the Weapon Pieces crafting information.\\n    mapping(DataTypes.WeaponTypes => mapping(DataTypes.WeaponPieces => SharedStructs.WeaponPieceInfo)) private _weaponPiecesInfo;\\n\\n    /// @notice Mapping to store the Weapon Types crafting information.\\n    mapping(DataTypes.WeaponTypes => SharedStructs.WeaponInfo) private _weaponTypesInfo;\\n\\n    /// @notice Storage gap for possible new variables.\\n    uint256[47] __gapWeaponsController;\\n\\n    // ============== MODIFIERS ==============\\n\\n    /// @notice Modifier that will return true only when contract is initialized.\\n    modifier isInitialized() {\\n        if (!initialized) revert ContractNotInitialized();\\n        _;\\n    }\\n\\n    //============== CONSTRUCTOR ==============\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ============== INITIALIZE ==============\\n\\n    /// @notice Initializes the WeaponsController contract, setting up the access control and the WeaponERC721 contract address.\\n    /// @dev Grants the deployer the default admin role, manager and pauser roles.\\n    /// @param _weaponTypeAddress The WeaponERC721 contract address.\\n    function initialize(\\n        address _weaponTypeAddress\\n    ) \\n        external \\n        initializer \\n    {\\n        if (address(_weaponTypeAddress) == address(0)) revert WeaponTypeZeroAddress();\\n        weaponTypeAddress = _weaponTypeAddress;\\n\\n        __AccessControlEnumerable_init();\\n        __Pausable_init();\\n\\n        initialized = true;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ============== EXTERNAL FUNCTIONS ==============\\n\\n    /// @inheritdoc IWeaponsController\\n    /*function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }*/\\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponPieceAesthetics(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId,          \\n        uint8 numAesthetics\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        _weaponPiecesInfo[weaponTypeId][weaponPieceId].numAesthetics = numAesthetics;\\n\\n        emit WeaponPieceAestheticsChanged(msg.sender, weaponTypeId, weaponPieceId, numAesthetics);\\n    } \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponPiecesAesthetics(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces[] calldata weaponPieceIds,          \\n        uint8[] calldata numAesthetics\\n    )\\n        external\\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        uint256 numWeaponPieces = weaponPieceIds.length;\\n        for (uint i; i < numWeaponPieces;) {\\n            DataTypes.WeaponPieces weaponPieceId = weaponPieceIds[i];\\n\\n            _weaponPiecesInfo[weaponTypeId][weaponPieceId].numAesthetics = numAesthetics[uint256(weaponPieceId)];\\n\\n            emit WeaponPieceAestheticsChanged(msg.sender, weaponTypeId, weaponPieceId, numAesthetics[uint256(weaponPieceId)]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponPieceAesthetics(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId        \\n    ) \\n        external \\n        isInitialized\\n        view returns (uint8) \\n    {\\n        return _weaponPiecesInfo[weaponTypeId][weaponPieceId].numAesthetics;\\n    } \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponPieceType(\\n        DataTypes.WeaponTypes weaponTypeId,        \\n        DataTypes.WeaponPieces weaponPieceId,         \\n        DataTypes.WeaponPieceTypes weaponPieceTypeId\\n    ) \\n        external\\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        _weaponPiecesInfo[weaponTypeId][weaponPieceId].weaponPieceType = weaponPieceTypeId;\\n\\n        emit WeaponPieceTypeChanged(msg.sender, weaponTypeId, weaponPieceId, weaponPieceTypeId);\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponPiecesType(\\n        DataTypes.WeaponTypes weaponTypeId,        \\n        DataTypes.WeaponPieces[] calldata weaponPieceIds,         \\n        DataTypes.WeaponPieceTypes[] calldata weaponPieceTypeIds\\n    )\\n        external\\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        uint256 numWeaponPieces = weaponPieceIds.length;\\n        for (uint i; i < numWeaponPieces;) {\\n            DataTypes.WeaponPieces weaponPieceId = weaponPieceIds[i];\\n\\n            _weaponPiecesInfo[weaponTypeId][weaponPieceId].weaponPieceType = weaponPieceTypeIds[uint256(weaponPieceId)];\\n\\n            emit WeaponPieceTypeChanged(msg.sender, weaponTypeId, weaponPieceId, weaponPieceTypeIds[uint256(weaponPieceId)]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponPieceType(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId    \\n    ) \\n        external \\n        isInitialized\\n        view returns (DataTypes.WeaponPieceTypes) \\n    {\\n        return _weaponPiecesInfo[weaponTypeId][weaponPieceId].weaponPieceType;\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponPieceAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId,          \\n        uint8 aestheticId,\\n        DataTypes.Elements[] calldata elements\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        _weaponPiecesInfo[weaponTypeId][weaponPieceId].aestheticsInfo[aestheticId] = elements;\\n\\n        emit WeaponPieceAestheticElementsChanged(msg.sender, weaponTypeId, weaponPieceId, aestheticId, elements);\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponPiecesAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,        \\n        DataTypes.WeaponPieces weaponPieceId,         \\n        uint8[] calldata aestheticIds,\\n        DataTypes.Elements[][] calldata elements\\n    )\\n        external\\n        isInitialized\\n        onlyRole(MANAGER_ROLE) \\n    {\\n        uint256 numAesthetics = aestheticIds.length;\\n        for (uint i; i < numAesthetics;) {\\n            uint8 aestheticId = aestheticIds[i];\\n\\n            _weaponPiecesInfo[weaponTypeId][weaponPieceId].aestheticsInfo[aestheticId] = elements[aestheticId];\\n\\n            emit WeaponPieceAestheticElementsChanged(msg.sender, weaponTypeId, weaponPieceId, aestheticId, elements[aestheticId]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponPieceAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId,\\n        uint8 aestheticId       \\n    ) \\n        external \\n        isInitialized\\n        view returns (DataTypes.Elements[] memory) \\n    {\\n        return _weaponPiecesInfo[weaponTypeId][weaponPieceId].aestheticsInfo[aestheticId];\\n    }\\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypeDescription(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        string calldata description          \\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        _weaponTypesInfo[weaponTypeId].description = description;\\n\\n        emit WeaponTypeDescriptionChanged(msg.sender, weaponTypeId, description);\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypesDescription(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,\\n        string[] calldata descriptions      \\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numWeaponTypes = weaponTypeIds.length;\\n        for (uint i; i < numWeaponTypes;) {\\n            DataTypes.WeaponTypes weaponTypeId = weaponTypeIds[i];\\n            \\n            _weaponTypesInfo[weaponTypeId].description = descriptions[uint256(weaponTypeId)];\\n\\n            emit WeaponTypeDescriptionChanged(msg.sender, weaponTypeId, descriptions[uint256(weaponTypeId)]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponTypeDescription(\\n        DataTypes.WeaponTypes weaponTypeId\\n    ) \\n        external \\n        isInitialized \\n        view returns (string memory)  \\n    {\\n        return _weaponTypesInfo[weaponTypeId].description;\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypePieces(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces[] calldata weaponPieces          \\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        _weaponTypesInfo[weaponTypeId].weaponPieces = weaponPieces;\\n\\n        emit WeaponTypePiecesChanged(msg.sender, weaponTypeId, weaponPieces);\\n    }      \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypesPieces(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,\\n        DataTypes.WeaponPieces[][] calldata weaponPieces          \\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numWeaponTypes = weaponTypeIds.length;\\n        for (uint i; i < numWeaponTypes;) {\\n            DataTypes.WeaponTypes weaponTypeId = weaponTypeIds[i];\\n            \\n            _weaponTypesInfo[weaponTypeId].weaponPieces = weaponPieces[uint256(weaponTypeId)];\\n\\n            emit WeaponTypePiecesChanged(msg.sender, weaponTypeId, weaponPieces[uint256(weaponTypeId)]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }   \\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponTypePieces(\\n        DataTypes.WeaponTypes weaponTypeId\\n    ) \\n        external \\n        isInitialized \\n        view returns (DataTypes.WeaponPieces[] memory)  \\n    {\\n        return _weaponTypesInfo[weaponTypeId].weaponPieces;\\n    }    \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypeResources(\\n        DataTypes.WeaponTypes weaponTypeId,        \\n        uint8 tier,\\n        DataTypes.Step step,  \\n        SharedStructs.Resource[] calldata resources\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        SharedStructs.Resource[] storage resourcesStored = _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].resources;\\n        \\n        if(resourcesStored.length > 0){\\n            delete _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].resources;\\n        }\\n\\n        uint256 numResources = resources.length;\\n        for (uint256 i; i < numResources;) {\\n            resourcesStored.push(resources[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit WeaponTypeResourcesChanged(msg.sender, weaponTypeId, tier, step);\\n    }    \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypeAllStepsResources(\\n        DataTypes.WeaponTypes weaponTypeId,          \\n        uint8 tier,\\n        DataTypes.Step[] calldata steps,        \\n        SharedStructs.Resource[][] calldata resources\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numSteps = steps.length;\\n        for (uint256 i; i < numSteps;) {\\n            DataTypes.Step stepId = steps[i];\\n\\n            SharedStructs.Resource[] storage resourcesStored = _weaponTypesInfo[weaponTypeId].craftingInfo[tier][stepId].resources;\\n            \\n            if(resourcesStored.length > 0){\\n                delete _weaponTypesInfo[weaponTypeId].craftingInfo[tier][stepId].resources;\\n            }\\n\\n            uint256 numResources = resources[uint256(stepId)].length;\\n            for (uint256 j; j < numResources;) {\\n                resourcesStored.push(resources[uint256(stepId)][j]);\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            emit WeaponTypeResourcesChanged(msg.sender, weaponTypeId, tier, stepId);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }    \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypeCraftingTime(\\n        DataTypes.WeaponTypes weaponTypeId,         \\n        uint8 tier,\\n        DataTypes.Step step,        \\n        uint64 time\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].craftingTime = time;\\n\\n        emit WeaponTypeCraftingTimeChanged(msg.sender, weaponTypeId, tier, step, time);\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypesCraftingTime(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,        \\n        uint8 tier,\\n        DataTypes.Step step,        \\n        uint64 time\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numWeaponTypes = weaponTypeIds.length;\\n        for (uint i; i < numWeaponTypes;) {\\n            DataTypes.WeaponTypes weaponTypeId = weaponTypeIds[i];\\n\\n            _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].craftingTime = time;\\n\\n            emit WeaponTypeCraftingTimeChanged(msg.sender, weaponTypeId, tier, step, time);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    } \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypesAllTiersCraftingTime(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,         \\n        uint8[] calldata tiers,\\n        DataTypes.Step[] calldata steps,        \\n        uint64[] calldata times\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numWeaponTypes = weaponTypeIds.length;\\n        uint256 numTiers = tiers.length;\\n        //uint256 numSteps = steps.length;\\n        for (uint i; i < numWeaponTypes;) {\\n            DataTypes.WeaponTypes weaponTypeId = weaponTypeIds[i];\\n\\n            for (uint j; j < numTiers;) {\\n                uint8 tierId = tiers[j];\\n\\n                for (uint k; k < steps.length;) {\\n                    DataTypes.Step stepId = steps[k];\\n                    \\n                    _weaponTypesInfo[weaponTypeId].craftingInfo[tierId][stepId].craftingTime = times[uint256(tierId)];\\n\\n                    emit WeaponTypeCraftingTimeChanged(msg.sender, weaponTypeId, tierId, stepId, times[uint256(tierId)]);\\n\\n                    unchecked {\\n                        ++k;\\n                    }\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    } \\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponTypeCraftingTime(\\n        DataTypes.WeaponTypes weaponTypeId,         \\n        uint8 tier,\\n        DataTypes.Step step\\n    ) \\n        external \\n        isInitialized \\n        view returns (uint64)  \\n    {\\n        return _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].craftingTime;\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypeSkipTimePrice(\\n        DataTypes.WeaponTypes weaponTypeId,         \\n        uint8 tier,\\n        DataTypes.Step step,        \\n        uint256 price\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].skipTimePrice = price;\\n\\n        emit WeaponTypeSkipTimePriceChanged(msg.sender, weaponTypeId, tier, step, price);\\n    }  \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypesSkipTimePrice(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,        \\n        uint8 tier,\\n        DataTypes.Step step,        \\n        uint256 price\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numWeaponTypes = weaponTypeIds.length;\\n        for (uint i; i < numWeaponTypes;) {\\n            DataTypes.WeaponTypes weaponTypeId = weaponTypeIds[i];\\n\\n            _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].skipTimePrice = price;\\n\\n            emit WeaponTypeSkipTimePriceChanged(msg.sender, weaponTypeId, tier, step, price);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    } \\n\\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypesAllTiersSkipTimePrice(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,        \\n        uint8[] calldata tiers,\\n        DataTypes.Step[] calldata steps,        \\n        uint256[] calldata prices\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        uint256 numWeaponTypes = weaponTypeIds.length;\\n        uint256 numTiers = tiers.length;\\n        //uint256 numSteps = steps.length;\\n        for (uint i; i < numWeaponTypes;) {\\n            DataTypes.WeaponTypes weaponTypeId = weaponTypeIds[i];\\n\\n            for (uint j; j < numTiers;) {\\n                uint8 tierId = tiers[j];\\n\\n                for (uint k; k < steps.length;) {\\n                    DataTypes.Step stepId = steps[k];\\n\\n                    _weaponTypesInfo[weaponTypeId].craftingInfo[tierId][stepId].skipTimePrice = prices[uint256(tierId)];\\n\\n                    emit WeaponTypeSkipTimePriceChanged(msg.sender, weaponTypeId, tierId, stepId, prices[uint256(tierId)]);\\n\\n                    unchecked {\\n                        ++k;\\n                    }\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    } \\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponTypeSkipTimePrice(\\n        DataTypes.WeaponTypes weaponTypeId,          \\n        uint8 tier,\\n        DataTypes.Step step\\n    ) \\n        external \\n        isInitialized \\n        view returns (uint256)  \\n    {\\n        return _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step].skipTimePrice;\\n    }   \\n    \\n    /// @inheritdoc IWeaponsController\\n    function setWeaponTypeAddress(\\n        address _weaponTypeAddress\\n    ) \\n        external \\n        isInitialized\\n        onlyRole(MANAGER_ROLE)  \\n    {\\n        if (_weaponTypeAddress == address(0)) revert WeaponTypeZeroAddress();\\n        weaponTypeAddress = _weaponTypeAddress;\\n\\n        emit WeaponTypeAddressChanged(msg.sender, _weaponTypeAddress);\\n    }      \\n\\n    /// @inheritdoc IWeaponsController\\n    function getWeaponTypeInfo( \\n        DataTypes.WeaponTypes weaponTypeId,         \\n        uint8 tier,\\n        DataTypes.Step step\\n    ) \\n        external \\n        isInitialized \\n        view returns (SharedStructs.CraftingInfo memory)  \\n    {\\n        return _weaponTypesInfo[weaponTypeId].craftingInfo[tier][step];\\n    }   \\n}\"\r\n    },\r\n    \"contracts/storage/interfaces/IWeaponsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { DataTypes } from \\\"../../libraries/DataTypes.sol\\\";\\nimport { SharedStructs } from \\\"../../libraries/SharedStructs.sol\\\";\\n\\n/// @title The interface for the Weapons.\\n/// @notice This interface facilitates the setting of the different Weapons (Pieces and Types) for the crafting configuration.\\ninterface IWeaponsController {\\n\\n    // ============== ERRORS ==============\\n\\n    /// @notice Error when trying to set the weapon type contract address to the address 0.\\n    error WeaponTypeZeroAddress();\\n\\n    /// @notice Error when the contract is not initialized.\\n    error ContractNotInitialized();\\n\\n    // ============== EVENTS ==============\\n\\n    /// @notice Event emitted when the aesthetics number of a weapon piece is changed.\\n    /// @param sender The address of the user that changes the aesthetics.\\n    /// @param weaponTypeId The id of the weapon type. \\n    /// @param weaponPieceId The id of the weapon piece.    \\n    /// @param newAestheticsNum The aesthetics number.\\n    event WeaponPieceAestheticsChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,\\n        DataTypes.WeaponPieces indexed weaponPieceId,     \\n        uint8 newAestheticsNum\\n    );\\n\\n    /// @notice Event emitted when the type of a weapon piece is changed.\\n    /// @param sender The address of the user that changes the weapon piece type.\\n    /// @param weaponTypeId The id of the weapon type.     \\n    /// @param weaponPieceId The id of the weapon piece.    \\n    /// @param weaponPieceTypeId The id of the weapon piece type.\\n    event WeaponPieceTypeChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes weaponTypeId,        \\n        DataTypes.WeaponPieces indexed weaponPieceId,     \\n        DataTypes.WeaponPieceTypes indexed weaponPieceTypeId\\n    );\\n\\n    /// @notice Event emitted when the aesthetics elements of a weapon piece are changed.\\n    /// @param sender The address of the user that changes the aesthetic elements.\\n    /// @param weaponTypeId The id of the weapon type. \\n    /// @param weaponPieceId The id of the weapon piece.    \\n    /// @param aestheticId The aesthetics id.\\n    /// @param newElementIds The element ids.\\n    event WeaponPieceAestheticElementsChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId,                 \\n        uint256 aestheticId,\\n        DataTypes.Elements[] newElementIds\\n    );\\n\\n    /// @notice Event emitted when the description of a weapon type is changed.\\n    /// @param sender The address of the user that changes the description.\\n    /// @param weaponTypeId The id of the weapon type. \\n    /// @param newDescription The new description of the weapon type.\\n    event WeaponTypeDescriptionChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,\\n        string newDescription \\n    );\\n\\n    /// @notice Event emitted when the pieces of a weapon type are changed.\\n    /// @param sender The address of the user that changes the pieces.\\n    /// @param weaponTypeId The id of the weapon type. \\n    /// @param newWeaponPieces The new pieces of the weapon type.\\n    event WeaponTypePiecesChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,\\n        DataTypes.WeaponPieces[] newWeaponPieces \\n    );\\n\\n    /// @notice Event emitted when the resources of a weapon type are changed.\\n    /// @param sender The address of the user that changes the resources.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon piece.    \\n    /// @param step The step of the crafting. \\n    event WeaponTypeResourcesChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,\\n        uint8 tier,\\n        DataTypes.Step step        \\n    );\\n\\n    /// @notice Event emitted when the crafting time of a weapon type is changed.\\n    /// @param sender The address of the user that changes the crafting time.\\n    /// @param weaponTypeId The id of the weapon type.  \\n    /// @param tier The tier of the weapon piece.    \\n    /// @param step The step of the crafting.     \\n    /// @param newCraftingTime The new crafting time.\\n    event WeaponTypeCraftingTimeChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,      \\n        uint8 tier,   \\n        DataTypes.Step step,        \\n        uint64 newCraftingTime\\n    );\\n\\n    /// @notice Event emitted when the skip time price of a weapon type is changed.\\n    /// @param sender The address of the user that changes the skip time price.\\n    /// @param weaponTypeId The id of the weapon type.      \\n    /// @param tier The tier of the weapon piece.  \\n    /// @param step The step of the crafting.     \\n    /// @param newSkipTimePrice The new skip time price.\\n    event WeaponTypeSkipTimePriceChanged (\\n        address indexed sender,\\n        DataTypes.WeaponTypes indexed weaponTypeId,     \\n        uint8 tier,   \\n        DataTypes.Step step,                \\n        uint256 newSkipTimePrice\\n    );\\n\\n    /// @notice Event emitted when the address of the weapon type contract is changed.\\n    /// @param sender The address of the user that changes the weapon type contract address.\\n    /// @param newWeaponTypeAddress The new address of the weapon type contract.\\n    event WeaponTypeAddressChanged (\\n        address indexed sender,\\n        address indexed newWeaponTypeAddress\\n    );\\n\\n    // ============== FUNCTIONS ==============\\n\\n    /// @notice Pauses all armor pieces information changes.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    //function pause() external;\\n\\n    /// @notice Unpauses all armor pieces information changes.\\n    /// @dev Can only be called by an account with the PAUSER_ROLE.\\n    //function unpause() external;\\n\\n    /// @notice Function that sets a weapon piece aesthetics number.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @param numAesthetics The aesthetics number.\\n    function setWeaponPieceAesthetics(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId, \\n        uint8 numAesthetics\\n    ) external;\\n\\n    /// @notice Function that sets the aesthetics number for a list of weapon pieces.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param weaponPieceIds The ids of the weapon pieces.\\n    /// @param numAesthetics The aesthetics numbers.\\n    function setWeaponPiecesAesthetics(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces[] calldata weaponPieceIds, \\n        uint8[] calldata numAesthetics\\n    ) external;\\n\\n    /// @notice Function that returns the weapon piece aesthetics number.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @return The weapon piece aesthetics number.\\n    function getWeaponPieceAesthetics(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId   \\n    ) external view returns (uint8);\\n\\n    /// @notice Function that sets a weapon piece type.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @param weaponPieceTypeId The id of the weapon piede type.\\n    function setWeaponPieceType(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId,         \\n        DataTypes.WeaponPieceTypes weaponPieceTypeId\\n    ) external;\\n\\n    /// @notice Function that sets the weapon piece types for a list of a weapon piece types.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceIds The ids of the weapon pieces.\\n    /// @param weaponPieceTypeIds The ids of the weapon piece types.\\n    function setWeaponPiecesType(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces[] calldata weaponPieceIds,         \\n        DataTypes.WeaponPieceTypes[] calldata weaponPieceTypeIds\\n    ) external;\\n\\n    /// @notice Function that returns the weapon piece type.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @return The armor piece type.\\n    function getWeaponPieceType(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId       \\n    ) external view returns (DataTypes.WeaponPieceTypes);\\n\\n    /// @notice Function that sets a weapon piece aesthetic elements.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @param aestheticId The aesthetics id.\\n    /// @param elements The element ids.\\n    function setWeaponPieceAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId,          \\n        uint8 aestheticId,\\n        DataTypes.Elements[] calldata elements\\n    ) external;\\n\\n    /// @notice Function that sets the elements for a list of aesthetics.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @param aestheticIds The aesthetics ids.\\n    /// @param elements The element ids.\\n    function setWeaponPiecesAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces weaponPieceId,          \\n        uint8[] calldata aestheticIds,\\n        DataTypes.Elements[][] calldata elements\\n    ) external;\\n\\n    /// @notice Function that returns the weapon piece aesthetic elements.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @param weaponPieceId The id of the weapon piece.\\n    /// @param aestheticId The id of the aesthetics.    \\n    /// @return The weapon piece aesthetic elements.\\n    function getWeaponPieceAestheticElements(\\n        DataTypes.WeaponTypes weaponTypeId,       \\n        DataTypes.WeaponPieces weaponPieceId,\\n        uint8 aestheticId      \\n    ) external view returns (DataTypes.Elements[] memory);\\n\\n    /// @notice Function that sets a weapon type description.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param description The description of the weapon type.\\n    function setWeaponTypeDescription(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        string calldata description          \\n    ) external;\\n\\n    /// @notice Function that sets the description for a list of weapon types.\\n    /// @param weaponTypeIds The ids of the weapon types.\\n    /// @param descriptions The descriptions of the weapon types.\\n    function setWeaponTypesDescription(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,\\n        string[] calldata descriptions          \\n    ) external;\\n\\n    /// @notice Function that returns the description of a weapon type.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @return The description of the weapon piece.\\n    function getWeaponTypeDescription(\\n        DataTypes.WeaponTypes weaponTypeId\\n    ) external view returns (string memory);\\n\\n    /// @notice Function that sets a weapon type pieces.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param weaponPieces The weapon pieces of the weapon type.\\n    function setWeaponTypePieces(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        DataTypes.WeaponPieces[] calldata weaponPieces          \\n    ) external;\\n\\n    /// @notice Function that sets the weapon type pieces for a list of weapon types.\\n    /// @param weaponTypeIds The ids of the weapon types.\\n    /// @param weaponPieces The weapon pieces of the weapon types.\\n    function setWeaponTypesPieces(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,\\n        DataTypes.WeaponPieces[][] calldata weaponPieces          \\n    ) external;\\n\\n    /// @notice Function that returns the weapon pieces required to build a weapon type.\\n    /// @param weaponTypeId The id of the weapon type.    \\n    /// @return The weapon pieces required.\\n    function getWeaponTypePieces(\\n        DataTypes.WeaponTypes weaponTypeId\\n    ) external view returns (DataTypes.WeaponPieces[] memory);\\n\\n    /// @notice Function that sets the resources for a weapon type for a specified tier and step.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.\\n    /// @param step The step of the crafting.    \\n    /// @param resources Array of resources needed to create the weapon type. \\n    function setWeaponTypeResources(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        uint8 tier,\\n        DataTypes.Step step,\\n        SharedStructs.Resource[] calldata resources\\n    ) external;     \\n\\n    /// @notice Function that sets the resources for a weapon type for all steps of a specified tier.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.\\n    /// @param steps The steps of the crafting.    \\n    /// @param resources Array of resources needed to create the weapon type. \\n    function setWeaponTypeAllStepsResources(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        uint8 tier,\\n        DataTypes.Step[] calldata steps,\\n        SharedStructs.Resource[][] calldata resources\\n    ) external;  \\n\\n    /// @notice Function that sets a weapon type crafting time for a specified tier and step.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.  \\n    /// @param step The step of the crafting.          \\n    /// @param time Crafting time of the weapon type. \\n    function setWeaponTypeCraftingTime(\\n        DataTypes.WeaponTypes weaponTypeId,          \\n        uint8 tier,   \\n        DataTypes.Step step,             \\n        uint64 time\\n    ) external; \\n\\n    /// @notice Function that sets the crafting time for a list of weapon types for a specified tier and step.\\n    /// @param weaponTypeIds The ids of the weapon types.\\n    /// @param tier The tier of the weapon type.    \\n    /// @param step The step of the crafting.       \\n    /// @param time Crafting times of the weapon types. \\n    function setWeaponTypesCraftingTime(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,         \\n        uint8 tier,\\n        DataTypes.Step step,                   \\n        uint64 time\\n    ) external; \\n\\n    /// @notice Function that sets the crafting time for a list of weapon types for all tiers and steps (Same for all tier -> step).\\n    /// @param weaponTypeIds The ids of the weapon types.\\n    /// @param tiers The tiers of the weapon type.    \\n    /// @param steps The steps of the crafting.      \\n    /// @param times Crafting times of the weapon types. \\n    function setWeaponTypesAllTiersCraftingTime(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,         \\n        uint8[] calldata tiers,   \\n        DataTypes.Step[] calldata steps,            \\n        uint64[] calldata times\\n    ) external; \\n\\n    /// @notice Function that returns the weapon type crafting time.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.   \\n    /// @param step The step of the crafting.            \\n    /// @return The weapon type crafting time.\\n    function getWeaponTypeCraftingTime(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        uint8 tier,             \\n        DataTypes.Step step        \\n    ) external view returns (uint64);\\n\\n    /// @notice Function that sets a weapon type skip time price for a specified tier and step.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.\\n    /// @param step The step of the crafting.      \\n    /// @param price Skip time price of the weapon type.\\n    function setWeaponTypeSkipTimePrice(\\n        DataTypes.WeaponTypes weaponTypeId,          \\n        uint8 tier,        \\n        DataTypes.Step step,         \\n        uint256 price\\n    ) external;\\n\\n    /// @notice Function that sets the skip time price for a list of weapon types for a specified tier and step.\\n    /// @param weaponTypeIds The ids of the weapon types.\\n    /// @param tier The tier of the weapon type.\\n    /// @param step The step of the crafting.        \\n    /// @param price Skip time price of the weapon types.\\n    function setWeaponTypesSkipTimePrice(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,         \\n        uint8 tier,  \\n        DataTypes.Step step,                \\n        uint256 price\\n    ) external;\\n\\n    /// @notice Function that sets the skip time price for a list of weapon types for all tiers and steps (Same for all tier -> step).\\n    /// @param weaponTypeIds The id of the weapon types.\\n    /// @param tiers The tiers of the weapon type.\\n    /// @param steps The steps of the crafting.         \\n    /// @param prices Skip time prices of the weapon types.\\n    function setWeaponTypesAllTiersSkipTimePrice(\\n        DataTypes.WeaponTypes[] calldata weaponTypeIds,         \\n        uint8[] calldata tiers,  \\n        DataTypes.Step[] calldata steps,                 \\n        uint256[] calldata prices\\n    ) external;\\n\\n    /// @notice Function that returns the weapon type skip time price.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.   \\n    /// @param step The step of the crafting.             \\n    /// @return The weapon piece skip time price.\\n    function getWeaponTypeSkipTimePrice(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        uint8 tier,             \\n        DataTypes.Step step         \\n    ) external view returns (uint256);\\n\\n    /// @notice Function that returns the weaponTypee address.\\n    function weaponTypeAddress() external view returns (address);\\n\\n    /// @notice Function that sets the weapon type contract address.\\n    /// @param _weaponTypeAddress The address of the weapon type contract.\\n    function setWeaponTypeAddress(\\n        address _weaponTypeAddress\\n    ) external;    \\n\\n    /// @notice Function that returns the weapon type info struct.\\n    /// @param weaponTypeId The id of the weapon type.\\n    /// @param tier The tier of the weapon type.\\n    /// @param step The step of the crafting.  \\n    /// @return The crafting piece info struct.\\n    function getWeaponTypeInfo(\\n        DataTypes.WeaponTypes weaponTypeId,\\n        uint8 tier,\\n        DataTypes.Step step          \\n    ) external view returns (SharedStructs.CraftingInfo memory);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeaponTypeZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aestheticId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Elements[]\",\"name\":\"newElementIds\",\"type\":\"uint8[]\"}],\"name\":\"WeaponPieceAestheticElementsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newAestheticsNum\",\"type\":\"uint8\"}],\"name\":\"WeaponPieceAestheticsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponPieceTypes\",\"name\":\"weaponPieceTypeId\",\"type\":\"uint8\"}],\"name\":\"WeaponPieceTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWeaponTypeAddress\",\"type\":\"address\"}],\"name\":\"WeaponTypeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newCraftingTime\",\"type\":\"uint64\"}],\"name\":\"WeaponTypeCraftingTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"WeaponTypeDescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.WeaponPieces[]\",\"name\":\"newWeaponPieces\",\"type\":\"uint8[]\"}],\"name\":\"WeaponTypePiecesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"WeaponTypeResourcesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSkipTimePrice\",\"type\":\"uint256\"}],\"name\":\"WeaponTypeSkipTimePriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"aestheticId\",\"type\":\"uint8\"}],\"name\":\"getWeaponPieceAestheticElements\",\"outputs\":[{\"internalType\":\"enum DataTypes.Elements[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"}],\"name\":\"getWeaponPieceAesthetics\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"}],\"name\":\"getWeaponPieceType\",\"outputs\":[{\"internalType\":\"enum DataTypes.WeaponPieceTypes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"getWeaponTypeCraftingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"}],\"name\":\"getWeaponTypeDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"getWeaponTypeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"craftingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"skipTimePrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"resourceAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Resource[]\",\"name\":\"resources\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SharedStructs.CraftingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"}],\"name\":\"getWeaponTypePieces\",\"outputs\":[{\"internalType\":\"enum DataTypes.WeaponPieces[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"getWeaponTypeSkipTimePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weaponTypeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"aestheticId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Elements[]\",\"name\":\"elements\",\"type\":\"uint8[]\"}],\"name\":\"setWeaponPieceAestheticElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numAesthetics\",\"type\":\"uint8\"}],\"name\":\"setWeaponPieceAesthetics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieceTypes\",\"name\":\"weaponPieceTypeId\",\"type\":\"uint8\"}],\"name\":\"setWeaponPieceType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces\",\"name\":\"weaponPieceId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"aestheticIds\",\"type\":\"uint8[]\"},{\"internalType\":\"enum DataTypes.Elements[][]\",\"name\":\"elements\",\"type\":\"uint8[][]\"}],\"name\":\"setWeaponPiecesAestheticElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces[]\",\"name\":\"weaponPieceIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"numAesthetics\",\"type\":\"uint8[]\"}],\"name\":\"setWeaponPiecesAesthetics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces[]\",\"name\":\"weaponPieceIds\",\"type\":\"uint8[]\"},{\"internalType\":\"enum DataTypes.WeaponPieceTypes[]\",\"name\":\"weaponPieceTypeIds\",\"type\":\"uint8[]\"}],\"name\":\"setWeaponPiecesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weaponTypeAddress\",\"type\":\"address\"}],\"name\":\"setWeaponTypeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step[]\",\"name\":\"steps\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"resourceAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Resource[][]\",\"name\":\"resources\",\"type\":\"tuple[][]\"}],\"name\":\"setWeaponTypeAllStepsResources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"setWeaponTypeCraftingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"setWeaponTypeDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.WeaponPieces[]\",\"name\":\"weaponPieces\",\"type\":\"uint8[]\"}],\"name\":\"setWeaponTypePieces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"resourceAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Resource[]\",\"name\":\"resources\",\"type\":\"tuple[]\"}],\"name\":\"setWeaponTypeResources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes\",\"name\":\"weaponTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setWeaponTypeSkipTimePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes[]\",\"name\":\"weaponTypeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"enum DataTypes.Step[]\",\"name\":\"steps\",\"type\":\"uint8[]\"},{\"internalType\":\"uint64[]\",\"name\":\"times\",\"type\":\"uint64[]\"}],\"name\":\"setWeaponTypesAllTiersCraftingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes[]\",\"name\":\"weaponTypeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"enum DataTypes.Step[]\",\"name\":\"steps\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setWeaponTypesAllTiersSkipTimePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes[]\",\"name\":\"weaponTypeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"setWeaponTypesCraftingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes[]\",\"name\":\"weaponTypeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"}],\"name\":\"setWeaponTypesDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes[]\",\"name\":\"weaponTypeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"enum DataTypes.WeaponPieces[][]\",\"name\":\"weaponPieces\",\"type\":\"uint8[][]\"}],\"name\":\"setWeaponTypesPieces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.WeaponTypes[]\",\"name\":\"weaponTypeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Step\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setWeaponTypesSkipTimePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weaponTypeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WeaponsController", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}