{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n/*\r\n* @title  1CC Global Financial System, build in BSC Network\r\n* @dev    A financial system built on smart contract technology. Open to all, transparent to all.\r\n*         The worlds first decentralized, community support fund\r\n*/\r\ncontract OneCoinGlobal is Ownable {\r\n    \r\n    IERC20 public investToken;\r\n    using SafeMath for uint256;\r\n\r\n    struct PlayerDeposit {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint256 total_withdraw;\r\n        uint256 time;\r\n        uint256 period;\r\n        uint256 expire;\r\n        uint8 status;\r\n        uint8 is_crowd;\r\n    }\r\n\r\n    struct Player {\r\n        address referral;\r\n        uint8 is_crowd;\r\n        uint256 level_id;\r\n        uint256 dividends;\r\n        uint256 eth_dividends;\r\n        uint256 referral_bonus;\r\n        uint256 match_bonus;\r\n        uint256 holder_full_bonus;\r\n        uint256 holder_single_bonus;\r\n        uint256 total_invested;\r\n        uint256 total_redeem;\r\n        uint256 total_withdrawn;\r\n        uint256 last_payout;\r\n        PlayerDeposit[] deposits;\r\n        address[] referrals;\r\n    }\r\n    \r\n    struct PlayerTotal {\r\n        uint256 total_match_invested;\r\n        uint256 total_dividends;\r\n        uint256 total_referral_bonus;\r\n        uint256 total_match_bonus;\r\n        uint256 total_holder_full_bonus;\r\n        uint256 total_holder_single_bonus;\r\n        uint256 total_eth_dividends;\r\n    }\r\n    \r\n    /* Deposit smart contract address */\r\n    address public invest_token_address = 0x3DEe913068de010443A94f3b376C83850C299FFb;\r\n    uint256 public invest_token_decimal = 4;\r\n    uint256 public invest_eth_decimal = 8;\r\n    \r\n    uint256 public total_investors;\r\n    uint256 public total_invested;\r\n    uint256 public total_withdrawn;\r\n    uint256 public total_redeem;\r\n    uint256 public total_referral_bonus;\r\n    uint256 public total_match_bonus;\r\n    uint256 public total_dividends;\r\n    uint256 public total_eth_dividends;\r\n    uint256 public total_holder_full_bonus;\r\n    uint256 public total_holder_single_bonus;\r\n    uint256 public total_platform_bonus;\r\n    \r\n    /* Current corwded shareholder number */\r\n    uint256 public total_crowded_num; \r\n    \r\n    /* Total shareholder join limit number */\r\n    uint256 constant public SHAREHOLDER_LIMIT_NUM = 60;\r\n    \r\n    /* Shareholder bonus rate */\r\n    uint256 constant public shareholder_full_bonus_rate = 5;\r\n    uint256 constant public shareholder_single_bonus_rate = 3;\r\n\r\n    /* Referral bonuses data  define*/\r\n    uint8[] public referral_bonuses = [10,5];\r\n    /* Referral same level bonus define */\r\n    uint256 public referral_same_bonus_rate = 5;\r\n\r\n    /* Invest period and profit parameter definition */\r\n    uint256[] public invest_period_months =      [1,   2,   3,    6,    12,   18];     //period months\r\n    uint256[] public invest_period_month_rates = [800, 900, 1000, 1100, 1200, 1200];   //Ten thousand of month' rate\r\n    \r\n    /* yield reduce project section config, item1: total yield, item2: reduce rate */\r\n    uint256[] public yield_reduce_section1 =  [2000000, 30];\r\n    uint256[] public yield_reduce_section2 =  [5000000, 30];\r\n    uint256[] public yield_reduce_section3 =  [9000000, 30];\r\n    uint256[] public yield_reduce_section4 =  [14000000, 30];\r\n    uint256[] public yield_reduce_section5 =  [17000000, 30];\r\n    uint256[] public yield_reduce_section6 =  [20000000, 30];\r\n    uint256[] public yield_reduce_section7 =  [23000000, 30];\r\n    uint256[] public yield_reduce_section8 =  [28000000, 30];\r\n    uint256[] public yield_reduce_section9 =  [33000000, 30];\r\n    uint256[] public yield_reduce_section10 = [40000000, 30];\r\n    \r\n    /* Team level data definition */\r\n    uint256[] public team_level_ids =     [1,2,3,4,5,6];\r\n    uint256[] public team_level_amounts = [5000,20000,40000,100000,200000,500000];\r\n    uint256[] public team_level_bonuses = [2,4,6,8,10,12];\r\n\r\n    /* invest coin usd price */ \r\n    uint256 public invest_coin_usd_price = 1;\r\n    \r\n    /* invest reward eth rate \u2030 */\r\n    uint256 public invest_reward_eth_month_rate = 25;\r\n    \r\n    /* ETH min withdraw amount: 15 HT */\r\n    uint256 public eth_min_withdraw_num = 15 * (10 ** 18);\r\n    \r\n    /* user invest min amount */\r\n    uint256 constant public INVEST_MIN_AMOUNT = 5;\r\n    /* user invest max amount */\r\n    uint256 constant public INVEST_MAX_AMOUNT = 10000;\r\n    /* user crowd limit amount */\r\n    uint256 constant public CROWD_LIMIT_AMOUNT = 15000;\r\n    /* user crowd period(month) */\r\n    uint256 constant public crowd_period_month = 18;\r\n\r\n    /* Platform bonus address */\r\n    address public platform_bonus_address = 0xb42a4bed3C53a7aC9551670dF0AF36956c7b87F1;\r\n    /* Platform bonus rate percent(%) */\r\n    uint256 constant public platform_bonus_rate = 3;\r\n    \r\n    /* Mapping data list define */\r\n    mapping(address => Player) public players;\r\n    mapping(address => PlayerTotal) public playerTotals;\r\n    mapping(uint256 => address) public addrmap;\r\n    address[] public shareholders;\r\n    \r\n    event Deposit(address indexed addr, uint256 amount, uint256 month);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event ReferralPayout(address indexed addr, uint256 amount, uint8 level);\r\n    event Crowd(address indexed addr, uint256 amount);\r\n    event DepositRedeem(uint256 invest_id);\r\n\r\n    /* Migration action deadLine status*/\r\n    uint256 public MIGRATION_DEADLINE = 0;\r\n    \r\n    /* Migrate contract data event defined */\r\n    event MigrateContract(uint256 _total_invested, uint256 _total_investors, uint256 _total_withdrawn, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_platform_bonus, uint256 _total_crowded_num,uint256 _total_holder_bonus,uint256 _total_eth_dividends,uint256 _total_match_bonus);\r\n    event MigratePlayer(address _addr,address _referral, uint256 _is_crowd, uint256 _dividends, uint256 _eth_dividends, uint256 _referral_bonus, uint256 _match_bonus, uint256 _holder_single_bonus, uint256 _holder_full_bonus,uint256 _last_payout);\r\n    event MigratePlayerTotal(address _addr, uint256 _total_invested, uint256 _total_withdrawn, uint256 _total_match_invested, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_match_bonus, uint256 _total_holder_full_bonus, uint256 _total_holder_single_bonus, uint256 _total_eth_dividends);\r\n    event MigrateDeposit(address _addr, uint256 _time, uint256 _amount, uint256 _total_withdraw,uint256 _expire,uint8 _status);\r\n    event MigrateStakeAddress(address stakeAddress);\r\n    event MigrateDeadline();\r\n    \r\n    constructor() public {\r\n        /* Create invest token instace  */\r\n        investToken = IERC20(invest_token_address);\r\n    }\r\n    \r\n    /* Function to receive Ether. msg.data must be empty */\r\n    receive() external payable {}\r\n\r\n    /* Fallback function is called when msg.data is not empty */ \r\n    fallback() external payable {}\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /*\r\n    * @dev user do deposit action,grant the referrs bonus,grant the shareholder bonus,grant the match bonus\r\n    */\r\n    function deposit(address _referral, uint256 _amount, uint256 _month) \r\n        external \r\n        payable \r\n    {\r\n        require(_amount >= INVEST_MIN_AMOUNT, \"Minimal deposit: 5 1CC\");\r\n        require(_amount <= INVEST_MAX_AMOUNT, \"Maxinum deposit: 10000 1CC\");\r\n        //require(_amount % 100 == 0, \"Invest amount must be multiple of 100\");\r\n        \r\n        Player storage player = players[msg.sender];\r\n        require(player.deposits.length < 2000, \"Max 2000 deposits per address\");\r\n        \r\n        /* format token amount  */\r\n        uint256 token_decimals = 10 ** invest_token_decimal;\r\n        uint256 token_amount = _amount * token_decimals;\r\n        \r\n        /* Transfer user address token to contract address*/\r\n        require(investToken.transferFrom(msg.sender, address(this), token_amount), \"transferFrom failed\");\r\n\r\n        _setReferral(msg.sender, _referral);\r\n        \r\n        /* update total investor count */\r\n        if(player.deposits.length == 0){\r\n            total_investors += 1;\r\n            addrmap[total_investors] = msg.sender;\r\n        }\r\n        \r\n        /* get the period total time (total secones) */\r\n        uint256 period_time = _month * 30 * 86400;\r\n        \r\n        uint256 _id = player.deposits.length + 1;\r\n        player.deposits.push(PlayerDeposit({\r\n            id: _id,\r\n            amount: _amount,\r\n            total_withdraw: 0,\r\n            time: uint256(block.timestamp),\r\n            period: _month,\r\n            expire:uint256(block.timestamp).add(period_time),\r\n            status: 0,\r\n            is_crowd: 0\r\n        }));\r\n\r\n        player.total_invested += _amount;\r\n        total_invested += _amount;\r\n\r\n        /* update user referral and match invested amount*/\r\n        _updateReferralMatchInvestedAmount(msg.sender, _amount, 1);\r\n\r\n        emit Deposit(msg.sender, _amount, _month);\r\n    }\r\n    \r\n    /*\r\n    * @dev user do crowd action, to join shareholder\r\n    */\r\n    function crowd(address _referral, uint256 _amount) \r\n        payable\r\n        external \r\n    {\r\n\r\n        require(_amount == CROWD_LIMIT_AMOUNT, \"Crowd limit: 15000 1CC\");\r\n        require(total_crowded_num < SHAREHOLDER_LIMIT_NUM, \"Maximum shareholders: 50\");\r\n        \r\n        Player storage player = players[msg.sender];\r\n        require(player.is_crowd == 0, \"Already a shareholder\");\r\n        \r\n        /* format token amount  */\r\n        uint256 token_amount = _getTokenAmount(_amount,invest_token_decimal);\r\n        \r\n        /* Transfer user address token to contract address*/\r\n        require(investToken.transferFrom(msg.sender, address(this), token_amount), \"transferFrom failed\");\r\n\r\n        _setReferral(msg.sender, _referral);\r\n        \r\n        /* get the period total time (total secones) */\r\n        uint256 _month = crowd_period_month;\r\n        uint256 period_time = _month.mul(30).mul(86400);\r\n        \r\n        /* update total investor count */\r\n        if(player.deposits.length == 0){\r\n            total_investors += 1;\r\n            addrmap[total_investors] = msg.sender;\r\n        }\r\n        \r\n        uint256 _id = player.deposits.length + 1;\r\n        player.deposits.push(PlayerDeposit({\r\n            id: _id,\r\n            amount: _amount,\r\n            total_withdraw: 0,\r\n            time: uint256(block.timestamp),\r\n            period: _month,\r\n            expire: uint256(block.timestamp).add(period_time),\r\n            status: 0,\r\n            is_crowd: 1\r\n        }));\r\n\r\n        /* set the player of shareholders roles */\r\n        player.is_crowd = 1;\r\n        total_crowded_num += 1;\r\n        \r\n        /* push user to shareholder list*/\r\n        shareholders.push(msg.sender);\r\n\r\n        player.total_invested += _amount;\r\n        total_invested += _amount;\r\n\r\n        /* update user referral and match invested amount*/\r\n        _updateReferralMatchInvestedAmount(msg.sender, _amount, 1);\r\n\r\n        emit Crowd(msg.sender, _amount);\r\n    }\r\n    \r\n    /*\r\n    * @dev user do withdraw action, tranfer the total profit to user account, grant rereferral bonus, grant match bonus, grant shareholder bonus\r\n    */\r\n    function withdraw() \r\n        payable \r\n        external \r\n    {\r\n        /* get contract pool balance*/\r\n        uint256 _contract_balance = investToken.balanceOf(address(this));\r\n        uint256 _total_invested_amount = _getTokenAmount(total_invested,invest_token_decimal);\r\n        require(_contract_balance >= _total_invested_amount, \"Insufficient Pool Balance\");\r\n        uint256 _contract_pool_balance = _contract_balance - _total_invested_amount;\r\n\r\n        /* update user dividend data */\r\n        _payout(msg.sender);\r\n        \r\n        Player storage player = players[msg.sender];\r\n\r\n        /* only devidend amount to grant upper bonus*/\r\n        uint256 _dividend_amount = player.dividends;\r\n        uint256 _amount = player.dividends + player.referral_bonus + player.match_bonus + player.holder_full_bonus + player.holder_single_bonus;\r\n\r\n        /* verify contract pool balance is enough or not*/\r\n        require(_contract_pool_balance >= _amount, \"Insufficient Pool Balance\");\r\n        require(_amount > 0, \"Insufficient balance\");\r\n        \r\n        /* format deposit token amount  */\r\n        uint256 token_amount = _amount;\r\n        \r\n        /* process token transfer action */\r\n        require(investToken.approve(address(this), token_amount), \"approve failed\");\r\n        require(investToken.transferFrom(address(this), msg.sender, token_amount), \"transferFrom failed\");\r\n        \r\n        /* Grant referral bonus */\r\n        _referralPayout(msg.sender, _dividend_amount);\r\n        \r\n        /* Grant shareholder full node bonus */\r\n        _shareHoldersFullNodePayout(_dividend_amount);\r\n        \r\n        /* Grant shareholder single node bonus */\r\n        _shareHoldersSingleNodePayout(msg.sender, _dividend_amount);\r\n        \r\n        /* Grant team match bonus*/\r\n        _matchPayout(msg.sender, _dividend_amount);\r\n        \r\n        /* Grant same level match bonus*/\r\n        _matchSamePayout(msg.sender, token_amount);\r\n\r\n        /* Update user total payout data */\r\n        _updatePlayerTotalPayout(msg.sender, token_amount);\r\n        \r\n        emit Withdraw(msg.sender, token_amount);\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev user do deposit redeem action,transfer the expire deposit's amount to user account\r\n    */\r\n    function depositRedeem(uint256 _invest_id) \r\n        payable \r\n        external \r\n    {\r\n        Player storage player = players[msg.sender];\r\n        \r\n        require(player.deposits.length >= _invest_id && _invest_id > 0, \"Valid deposit id\");\r\n        uint256 _index = _invest_id - 1;\r\n        require(player.deposits[_index].expire < block.timestamp, \"Invest not expired\");\r\n        require(player.deposits[_index].status == 0, \"Invest is redeemed\");\r\n        \r\n        /* formt deposit token amount */\r\n        uint256 _amount = player.deposits[_index].amount;\r\n        uint256 token_amount = _getTokenAmount(_amount,invest_token_decimal);\r\n        \r\n        /* process token transfer action*/\r\n        //require(investToken.approve(address(this), 0), \"approve failed\");\r\n        require(investToken.approve(address(this), token_amount), \"approve failed\");\r\n        require(investToken.transferFrom(address(this), msg.sender, token_amount), \"transferFrom failed\");\r\n        \r\n        /* update deposit status in redeem */\r\n        player.deposits[_index].status = 1;\r\n\r\n        /* user quit crowd, cancel the shareholders role */\r\n        if(player.deposits[_index].is_crowd == 1){\r\n            player.is_crowd = 0;\r\n            total_crowded_num -= 1;\r\n            \r\n            /* remove user to shareholder list*/\r\n            _removeShareholders(msg.sender);\r\n        }\r\n\r\n        /* update user token balance*/\r\n        player.total_invested -= _amount;\r\n        \r\n        /* update total invested/redeem amount */\r\n        total_invested -= _amount;\r\n        total_redeem += _amount;\r\n        \r\n        /* update user referral and match invested amount*/\r\n        _updateReferralMatchInvestedAmount(msg.sender, _amount, -1);\r\n\r\n        emit DepositRedeem(_invest_id);\r\n    }\r\n     \r\n    /*\r\n    * @dev Update Referral Match invest amount, total investor number, map investor address index\r\n    */\r\n    function _updateReferralMatchInvestedAmount(address _addr,uint256 _amount,int8 op) \r\n        private\r\n    {\r\n        if(op > 0){\r\n            playerTotals[_addr].total_match_invested += _amount;\r\n            \r\n            address ref = players[_addr].referral;\r\n            while(true){\r\n                if(ref == address(0)) break;\r\n                \r\n                playerTotals[ref].total_match_invested += _amount;\r\n                ref = players[ref].referral;\r\n            }\r\n        }else{\r\n            playerTotals[_addr].total_match_invested -= _amount;\r\n            \r\n            address ref = players[_addr].referral;\r\n            while(true){\r\n                if(ref == address(0)) break;\r\n                \r\n                playerTotals[ref].total_match_invested -= _amount;\r\n                ref = players[ref].referral;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev Update user total payout data\r\n    */\r\n    function _updatePlayerTotalPayout(address _addr,uint256 token_amount) \r\n        private\r\n    {\r\n        \r\n        Player storage player = players[_addr];\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        \r\n        /* update user Withdraw total amount*/\r\n        player.total_withdrawn += token_amount;\r\n        \r\n        playerTotal.total_dividends += player.dividends;\r\n        playerTotal.total_referral_bonus += player.referral_bonus;\r\n        playerTotal.total_match_bonus += player.match_bonus;\r\n        playerTotal.total_holder_full_bonus += player.holder_full_bonus;\r\n        playerTotal.total_holder_single_bonus += player.holder_single_bonus;\r\n        \r\n        /* update platform total data*/\r\n        total_withdrawn += token_amount;\r\n        total_dividends += player.dividends;\r\n        total_referral_bonus += player.referral_bonus;\r\n        total_match_bonus += player.match_bonus;\r\n        total_holder_full_bonus += player.holder_full_bonus;\r\n        total_holder_single_bonus += player.holder_single_bonus; \r\n        uint256 _platform_bonus = (token_amount * platform_bonus_rate / 100);\r\n        total_platform_bonus += _platform_bonus;\r\n        \r\n        /* update platform address bonus*/\r\n        players[platform_bonus_address].match_bonus += _platform_bonus;\r\n        \r\n        /* reset user bonus data */\r\n        player.dividends = 0;\r\n        player.referral_bonus = 0;\r\n        player.match_bonus = 0;\r\n        player.holder_full_bonus = 0;\r\n        player.holder_single_bonus = 0;\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev update user referral data\r\n    */\r\n    function _setReferral(address _addr, address _referral) \r\n        private \r\n    {\r\n        /* if user referral is not set */\r\n        if(players[_addr].referral == address(0) && _referral != _addr) {\r\n            \r\n            players[_addr].referral = _referral;\r\n\r\n            /* update user referral address list*/\r\n            players[_referral].referrals.push(_addr);\r\n        }\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev Grant user referral bonus in user withdraw\r\n    */\r\n    function _referralPayout(address _addr, uint256 _amount) \r\n        private\r\n    {\r\n        address ref = players[_addr].referral;\r\n        uint256 _day_payout = _payoutOfDay(_addr);\r\n        if(_day_payout == 0) return;\r\n        \r\n        for(uint8 i = 0; i < referral_bonuses.length; i++) {\r\n        \r\n            if(ref == address(0)) break;\r\n\r\n            uint256 _ref_day_payout = _payoutOfDay(ref);\r\n            uint256 _token_amount = _amount;\r\n            \r\n            /* user bonus double burn */\r\n            if(_ref_day_payout * 2 < _day_payout){\r\n                _token_amount = _token_amount * (_ref_day_payout * 2) / _day_payout;\r\n            }\r\n            \r\n            uint256 bonus = _token_amount * referral_bonuses[i] / 100;\r\n            players[ref].referral_bonus += bonus;\r\n        \r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev  Grant shareholder full node bonus in user withdraw\r\n    */\r\n    function _shareHoldersFullNodePayout(uint256 _amount)\r\n        private\r\n    {\r\n        if(total_crowded_num == 0) return;\r\n        \r\n        uint256 bonus = (_amount * shareholder_full_bonus_rate / 100) / total_crowded_num;\r\n        for(uint8 i = 0; i < shareholders.length; i++) {\r\n            address _addr = shareholders[i];\r\n            players[_addr].holder_full_bonus += bonus;\r\n        }\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev  Grant shareholder single node bonus in user withdraw\r\n    */\r\n    function _shareHoldersSingleNodePayout(address _addr,uint256 _amount)\r\n        private\r\n    {\r\n        uint256 bonus = _amount * shareholder_single_bonus_rate / 100;\r\n        address ref = players[_addr].referral;\r\n        \r\n        while(true){\r\n            \r\n            if(ref == address(0)) break;\r\n            \r\n            if(players[ref].is_crowd == 1){\r\n                players[ref].holder_single_bonus += bonus;\r\n                break;\r\n            }\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev Grant Match bonus in user withdraw\r\n    */\r\n    function _matchPayout(address _addr,uint256 _amount) \r\n        private\r\n    {\r\n        /* update player team level */\r\n        _upgradePlayerTeamLevel(_addr);\r\n        uint256 last_level_id = players[_addr].level_id;\r\n        \r\n        /* player is max team level, quit */\r\n        if(last_level_id == team_level_ids[team_level_ids.length-1]) return;\r\n        \r\n        address ref = players[_addr].referral;\r\n        \r\n        while(true){\r\n            \r\n            if(ref == address(0)) break;\r\n            \r\n            /* upgrade player team level id*/\r\n            _upgradePlayerTeamLevel(ref);\r\n            \r\n            if(players[ref].level_id > last_level_id){\r\n                \r\n                uint256 last_level_bonus = 0;\r\n                if(last_level_id > 0){\r\n                    last_level_bonus = team_level_bonuses[last_level_id-1];\r\n                }\r\n                uint256 cur_level_bonus = team_level_bonuses[players[ref].level_id-1];\r\n                uint256 bonus_amount = _amount * (cur_level_bonus - last_level_bonus) / 100;\r\n                players[ref].match_bonus += bonus_amount;\r\n                \r\n                last_level_id = players[ref].level_id;\r\n                \r\n                /* referral is max team level, quit */\r\n                if(last_level_id == team_level_ids[team_level_ids.length-1]) \r\n                    break;\r\n            }\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev Grant same level match bonus in user withdraw\r\n    */\r\n    function _matchSamePayout(address _addr, uint256 _amount) \r\n        private\r\n    {\r\n        Player storage player = players[_addr];\r\n        address ref = player.referral;\r\n        uint256 player_level_id = player.level_id;\r\n        while(true){\r\n\r\n            // player must be a star level\r\n            if(player_level_id==0) break;\r\n\r\n            // referral address can't be empty\r\n            if(ref == address(0)) break;\r\n\r\n            /* update referral match bonus*/\r\n            if(players[ref].level_id == player_level_id){\r\n                uint256 bonus_amount = _amount * referral_same_bonus_rate / 100;\r\n                players[ref].match_bonus += bonus_amount;\r\n                break;\r\n            }\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev upgrade player team level id\r\n    */    \r\n    function _upgradePlayerTeamLevel(address _addr) \r\n        private\r\n    {\r\n        /* get community total invested*/\r\n        uint256 community_total_invested = _getCommunityTotalInvested(_addr);\r\n        \r\n        uint256 level_id = 0;\r\n        for(uint8 i=0; i < team_level_ids.length; i++){\r\n            if(community_total_invested >= team_level_amounts[i]){\r\n                level_id = team_level_ids[i];\r\n            }\r\n        }\r\n        players[_addr].level_id = level_id;\r\n    }\r\n    \r\n    /*\r\n    * @dev Get community total invested\r\n    */\r\n    function _getCommunityTotalInvested(address _addr) \r\n        view\r\n        private\r\n        returns(uint256 value)\r\n    {\r\n        address[] memory referrals = players[_addr].referrals;\r\n        \r\n        uint256 nodes_max_invested = 0;\r\n        uint256 nodes_total_invested = 0;\r\n        for(uint256 i=0;i<referrals.length;i++){\r\n            address ref = referrals[i];\r\n            nodes_total_invested += playerTotals[ref].total_match_invested;\r\n            if(playerTotals[ref].total_match_invested > nodes_max_invested){\r\n                nodes_max_invested = playerTotals[ref].total_match_invested;\r\n            }\r\n        }\r\n        return (nodes_total_invested - nodes_max_invested);\r\n    }\r\n\r\n    /*\r\n    * @dev user withdraw, user devidends data update\r\n    */\r\n    function _payout(address _addr) \r\n        private \r\n    {\r\n        uint256 payout = this.payoutOf(_addr);\r\n        if(payout > 0) {\r\n            \r\n            _updateTotalPayout(_addr);\r\n            \r\n            players[_addr].last_payout = uint256(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev format token amount with token decimal\r\n    */\r\n    function _getTokenAmount(uint256 _amount,uint256 _token_decimal) \r\n        pure\r\n        private\r\n        returns(uint256 token_amount)\r\n    {\r\n        uint256 token_decimals = 10 ** _token_decimal;\r\n        token_amount = _amount * token_decimals;   \r\n        return token_amount;\r\n    }\r\n    \r\n\r\n    /*\r\n    * @dev update user total withdraw data\r\n    */\r\n    function _updateTotalPayout(address _addr)\r\n        private\r\n    {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            \r\n            PlayerDeposit storage dep = player.deposits[i];\r\n\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n\r\n            if(from < to && dep.status == 0) {\r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount,dep.period);\r\n                player.deposits[i].total_withdraw += _day_payout * (to - from) / 86400;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev get the invest period rate, if total yield reached reduce limit, invest day rate will be reduce\r\n    */\r\n    function _getInvestDayPayoutOf(uint256 _amount, uint256 _month) \r\n        view \r\n        private \r\n        returns(uint256 value)\r\n    {\r\n        /* get invest period base rate*/\r\n        uint256 period_month_rate = invest_period_month_rates[0];\r\n        \r\n        for(uint256 i = 0; i < invest_period_months.length; i++) {\r\n            if(invest_period_months[i] == _month){\r\n                period_month_rate = invest_period_month_rates[i];\r\n                break;\r\n            }\r\n        }\r\n        \r\n        /* format amount with token decimal */\r\n        uint256 token_amount = _getTokenAmount(_amount, invest_token_decimal);\r\n        value = token_amount * period_month_rate / 30 / 10000;\r\n        \r\n        if(value > 0){\r\n            \r\n            /* total yield reached 2,000,000,start section1 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section1[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section1[1]) / 100;\r\n            }\r\n            /* total yield reached 5,000,000,start section2 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section2[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section2[1]) / 100;\r\n            }\r\n            /* total yield reached 9,000,000,start section3 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section3[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section3[1]) / 100;\r\n            }\r\n            /* total yield reached 12,000,000,start section4 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section4[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section4[1]) / 100;\r\n            }\r\n            /* total yield reached 14,000,000,start section5 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section5[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section5[1]) / 100;\r\n            }\r\n            /* total yield reached 17,000,000,start section6 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section6[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section6[1]) / 100;\r\n            }\r\n            /* total yield reached 20,000,000,start section7 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section7[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section7[1]) / 100;\r\n            }\r\n            /* total yield reached 25,000,000,start section8 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section8[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section8[1]) / 100;\r\n            }\r\n            /* total yield reached 30,000,000,start section9 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section9[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section9[1]) / 100;\r\n            }\r\n            /* total yield reached 40,000,000,start section10 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section10[0], invest_token_decimal)){\r\n                value = value * (100 - yield_reduce_section10[1]) / 100;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    \r\n    /*\r\n    * @dev get user deposit day total pending profit\r\n    * @return user pending payout amount\r\n    */\r\n    function payoutOf(address _addr) \r\n        view \r\n        external \r\n        returns(uint256 value)\r\n    {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            \r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n            \r\n            if(from < to && dep.status == 0) {\r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount,dep.period);\r\n                value += _day_payout * (to - from) / 86400;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /*\r\n    * @dev get user deposit day total pending profit\r\n    * @return user pending payout amount\r\n    */\r\n    function _payoutOfDay(address _addr) \r\n        view\r\n        private \r\n        returns(uint256 value)\r\n    {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            if(dep.status == 0) {\r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount, dep.period);\r\n                value += _day_payout;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    \r\n  \r\n    /*\r\n    * @dev Remove shareholders of the special address\r\n    */\r\n    function _removeShareholders(address _addr) private {\r\n        for (uint index = 0; index < shareholders.length; index++) {\r\n            if(shareholders[index] == _addr){\r\n                for (uint i = index; i < shareholders.length-1; i++) {\r\n                    shareholders[i] = shareholders[i+1];\r\n                }\r\n                delete shareholders[shareholders.length-1];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    /*\r\n    * @dev get contract data info \r\n    * @return total invested,total investor number,total withdraw,total referral bonus\r\n    */\r\n    function contractInfo() \r\n        view \r\n        external \r\n        returns(uint256 _total_invested, uint256 _total_investors, uint256 _total_withdrawn, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_platform_bonus, uint256 _total_crowded_num,uint256[] memory _invest_periods,uint256 _crowd_limit_amount,uint256 _crowd_period_month,uint256 _eth_min_withdraw_num,uint256 _total_holder_bonus,uint256 _total_eth_dividends,uint256 _total_match_bonus) \r\n    {\r\n        return (\r\n            total_invested, \r\n            total_investors, \r\n            total_withdrawn, \r\n            total_dividends, \r\n            total_referral_bonus, \r\n            total_platform_bonus, \r\n            total_crowded_num, \r\n            invest_period_months, \r\n            CROWD_LIMIT_AMOUNT, \r\n            crowd_period_month,\r\n            eth_min_withdraw_num,\r\n            total_holder_full_bonus + total_holder_single_bonus,\r\n            total_eth_dividends,\r\n            total_match_bonus\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get user info\r\n    * @return pending withdraw amount,referral,rreferral num etc.\r\n    */\r\n    function userInfo(address _addr)\r\n        view \r\n        external \r\n        returns(address _referral, uint256 _referral_num, uint256 _is_crowd, uint256 _dividends, uint256 _eth_dividends, uint256 _referral_bonus, uint256 _match_bonus, uint256 _holder_single_bonus, uint256 _holder_full_bonus,uint256 _last_payout) \r\n    {\r\n        Player storage player = players[_addr];\r\n        return (\r\n            player.referral,\r\n            player.referrals.length,\r\n            player.is_crowd,\r\n            player.dividends,\r\n            player.eth_dividends,\r\n            player.referral_bonus,\r\n            player.match_bonus,\r\n            player.holder_single_bonus,\r\n            player.holder_full_bonus,\r\n            player.last_payout\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get user info\r\n    * @return pending withdraw amount,referral bonus, total deposited, total withdrawn etc.\r\n    */\r\n    function userInfoTotals(address _addr) \r\n        view \r\n        external \r\n        returns(uint256 _total_invested, uint256 _total_withdrawn, uint256 _total_community_invested, uint256 _total_match_invested, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_match_bonus, uint256 _total_holder_full_bonus, uint256 _total_holder_single_bonus,uint256 _total_eth_dividends) \r\n    {\r\n        Player storage player = players[_addr];\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        \r\n        /* get community total invested*/\r\n        uint256 total_community_invested = _getCommunityTotalInvested(_addr);\r\n        \r\n        return (\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            //player.total_redeem,\r\n            total_community_invested,\r\n            playerTotal.total_match_invested,\r\n            playerTotal.total_dividends,\r\n            playerTotal.total_referral_bonus,\r\n            playerTotal.total_match_bonus,\r\n            playerTotal.total_holder_full_bonus,\r\n            playerTotal.total_holder_single_bonus,\r\n            playerTotal.total_eth_dividends\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get user investment list\r\n    */\r\n    function getInvestList(address _addr) \r\n        view \r\n        external \r\n        returns(uint256[] memory ids,uint256[] memory times, uint256[] memory amounts, uint256[] memory withdraws,uint256[] memory endTimes,uint256[] memory statuses) \r\n    {\r\n        Player storage player = players[_addr];\r\n        uint256[] memory _ids = new uint256[](player.deposits.length);\r\n        uint256[] memory _times = new uint256[](player.deposits.length);\r\n        uint256[] memory _endTimes = new uint256[](player.deposits.length);\r\n        uint256[] memory _amounts = new uint256[](player.deposits.length);\r\n        uint256[] memory _withdraws = new uint256[](player.deposits.length);\r\n        uint256[] memory _statuses = new uint256[](player.deposits.length);\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            _ids[i] = dep.id;\r\n            _amounts[i] = dep.amount;\r\n            _withdraws[i] = dep.total_withdraw;\r\n            _times[i] = dep.time;\r\n            _endTimes[i] = dep.expire;\r\n            _statuses[i] = dep.status;\r\n        }\r\n        return (\r\n            _ids,\r\n            _times,\r\n            _amounts,\r\n            _withdraws,\r\n            _endTimes,\r\n            _statuses\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev Migrate contract data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migrateContract(uint256 _total_invested, uint256 _total_investors, uint256 _total_withdrawn, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_platform_bonus, uint256 _total_crowded_num,uint256 _total_holder_bonus,uint256 _total_eth_dividends,uint256 _total_match_bonus) \r\n        external onlyOwner\r\n        payable  \r\n    {\r\n        total_invested = _total_invested;\r\n        //total_investors = _total_investors;\r\n        total_withdrawn = _total_withdrawn; \r\n        total_dividends = _total_dividends;\r\n        total_referral_bonus = _total_referral_bonus;\r\n        total_platform_bonus = _total_platform_bonus; \r\n        total_crowded_num = _total_crowded_num;\r\n        total_holder_full_bonus = _total_holder_bonus;\r\n        total_eth_dividends = _total_eth_dividends;\r\n        total_match_bonus = _total_match_bonus;\r\n\r\n        emit MigrateContract(_total_invested, _total_investors, _total_withdrawn, _total_dividends, _total_referral_bonus, _total_platform_bonus, _total_crowded_num, _total_holder_bonus, _total_eth_dividends, _total_match_bonus);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate player data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migratePlayer(address _addr, address _referral, uint8 _is_crowd, uint256 _dividends, uint256 _eth_dividends, uint256 _referral_bonus, uint256 _match_bonus, uint256 _holder_single_bonus, uint256 _holder_full_bonus, uint256 _last_payout) \r\n        external onlyOwner\r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        Player storage player = players[_addr];\r\n        player.is_crowd = _is_crowd;\r\n        player.dividends = _dividends;\r\n        player.eth_dividends = _eth_dividends;\r\n        player.referral_bonus = _referral_bonus;\r\n        player.match_bonus = _match_bonus;\r\n        player.holder_single_bonus = _holder_single_bonus;\r\n        player.holder_full_bonus = _holder_full_bonus;\r\n        player.last_payout = _last_payout;\r\n\r\n        _setReferral(_addr, _referral);\r\n        \r\n        /* update total investor count */\r\n        total_investors += 1;\r\n        addrmap[total_investors] = _addr;\r\n\r\n        /* push user to shareholder list*/\r\n        if (_is_crowd == 1) {\r\n            shareholders.push(_addr);\r\n        }\r\n\r\n        emit MigratePlayer(_addr, _referral, _is_crowd,_dividends, _eth_dividends, _referral_bonus, _match_bonus, _holder_single_bonus, _holder_full_bonus, _last_payout);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate player total data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migratePlayerTotal(address _addr, uint256 _total_invested, uint256 _total_withdrawn, uint256 _total_match_invested, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_match_bonus, uint256 _total_holder_full_bonus, uint256 _total_holder_single_bonus, uint256 _total_eth_dividends)\r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n        \r\n        Player storage player = players[_addr];\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        player.total_invested = _total_invested;\r\n        player.total_withdrawn = _total_withdrawn;\r\n        playerTotal.total_match_invested = _total_match_invested;\r\n        playerTotal.total_dividends = _total_dividends;\r\n        playerTotal.total_referral_bonus = _total_referral_bonus;\r\n        playerTotal.total_match_bonus = _total_match_bonus;\r\n        playerTotal.total_holder_full_bonus = _total_holder_full_bonus;\r\n        playerTotal.total_holder_single_bonus = _total_holder_single_bonus;\r\n        playerTotal.total_match_invested = _total_match_invested;\r\n        playerTotal.total_eth_dividends = _total_eth_dividends;\r\n\r\n        emit MigratePlayerTotal(_addr, _total_invested, _total_withdrawn,_total_match_invested, _total_dividends, _total_referral_bonus,_total_match_bonus, _total_holder_full_bonus, _total_holder_single_bonus, _total_eth_dividends);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate player deposit data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migrateDeposit(address _addr, uint256 _time, uint256 _amount, uint256 _total_withdraw,uint256 _expire,uint8 _status) \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        Player storage player = players[_addr];\r\n        uint256 _id = player.deposits.length + 1;\r\n        uint256 _month = (_expire - _time) / 30 / 86400;\r\n        player.deposits.push(PlayerDeposit({\r\n            id: _id,\r\n            amount: _amount,\r\n            total_withdraw: _total_withdraw,\r\n            time: _time,\r\n            period: _month,\r\n            expire: _expire,\r\n            status: _status,\r\n            is_crowd: 0\r\n        }));\r\n\r\n        emit MigrateDeposit(_addr, _time, _amount, _total_withdraw, _expire, _status);\r\n    }\r\n\r\n    /*\r\n    * @dev Set Contract Migrate stake address\r\n    */\r\n    function migrateStakeAddress(address stakeddress) \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        invest_token_address = stakeddress;\r\n        investToken = IERC20(invest_token_address);\r\n        \r\n        emit MigrateStakeAddress(stakeddress);\r\n    }\r\n\r\n    /*\r\n    * @dev Set Contract Migrate deadline status\r\n    */\r\n    function migrateDeadline() \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        MIGRATION_DEADLINE = 1;\r\n\r\n        emit MigrateDeadline();\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Crowd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invest_id\",\"type\":\"uint256\"}],\"name\":\"DepositRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_platform_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_crowded_num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_holder_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_eth_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"}],\"name\":\"MigrateContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrateDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expire\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"MigrateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_is_crowd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eth_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_holder_single_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_holder_full_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_last_payout\",\"type\":\"uint256\"}],\"name\":\"MigratePlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_match_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_holder_full_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_holder_single_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_eth_dividends\",\"type\":\"uint256\"}],\"name\":\"MigratePlayerTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"}],\"name\":\"MigrateStakeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"ReferralPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CROWD_LIMIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHAREHOLDER_LIMIT_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrmap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_platform_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_crowded_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_invest_periods\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_crowd_limit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_crowd_period_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eth_min_withdraw_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_eth_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"crowd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowd_period_month\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_invest_id\",\"type\":\"uint256\"}],\"name\":\"depositRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_min_withdraw_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdraws\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"statuses\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_coin_usd_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_eth_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_month_rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_months\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_reward_eth_month_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_token_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_platform_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_crowded_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_eth_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"}],\"name\":\"migrateContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateDeadline\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expire\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"migrateDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_is_crowd\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eth_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holder_single_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holder_full_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last_payout\",\"type\":\"uint256\"}],\"name\":\"migratePlayer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_full_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_single_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_eth_dividends\",\"type\":\"uint256\"}],\"name\":\"migratePlayerTotal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeddress\",\"type\":\"address\"}],\"name\":\"migrateStakeAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_bonus_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_match_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_holder_full_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_holder_single_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_eth_dividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"is_crowd\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"level_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holder_full_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holder_single_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_redeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referral_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral_same_bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholder_full_bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholder_single_bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_level_amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_level_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_level_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_crowded_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_eth_dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_holder_full_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_holder_single_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_match_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_platform_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_referral_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referral_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_is_crowd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eth_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holder_single_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holder_full_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_community_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_full_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_single_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_eth_dividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section9\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OneCoinGlobal", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c2c2f94591d3f7353b8f1c21109bf832e1550f12bad4227bdb8b740e0d3ca417"}