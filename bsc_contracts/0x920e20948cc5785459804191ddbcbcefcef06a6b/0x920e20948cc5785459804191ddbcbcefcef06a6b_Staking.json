{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/CommonInterest.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title CommonInterest\\n    @author iMe Lab\\n\\n    @notice Base contract for interest accrual contracts\\n */\\nabstract contract CommonInterest {\\n    constructor(uint64 interestRate, uint32 accrualPeriod) {\\n        _interestRate = interestRate;\\n        _accrualPeriod = accrualPeriod;\\n    }\\n\\n    /**\\n        @notice Error, typically fired on attempt to withdraw over balance\\n     */\\n    error WithdrawalOverDebt();\\n\\n    uint64 internal immutable _interestRate;\\n    uint32 internal immutable _accrualPeriod;\\n\\n    /**\\n        @notice Make a logical deposit\\n\\n        @param depositor Account who makes a deposit\\n        @param amount Amount of deposited tokens (integer)\\n        @param at Timestamp of deposit\\n     */\\n    function _deposit(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal virtual;\\n\\n    /**\\n        @notice Make a logical withdrawal\\n\\n        @dev Should revert with WithdrawalOverDebt on balance exceed\\n\\n        @param depositor Account who makes a withdrawal\\n        @param amount Amount of withdrawn tokens (integer)\\n        @param at Timestamp of withdrawal\\n     */\\n    function _withdrawal(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal virtual;\\n\\n    /**\\n        @notice Make full withdrawal (logical)\\n\\n        @dev It' a gase-efficient equivalent of\\n        `_withdrawal(address, uint256, uint65)`, as it shouldn't care\\n        about previous depositor balance\\n     */\\n    function _withdrawal(address depositor) internal virtual;\\n\\n    /**\\n        @notice Predicts debt for an investor\\n\\n        @param depositor The depositor\\n        @param at Timestamp for debt calculation\\n     */\\n    function _debt(\\n        address depositor,\\n        uint64 at\\n    ) internal view virtual returns (uint256);\\n\\n    /**\\n        @notice Predict total debt accross all investors\\n\\n        @param at Timestamp to make a prediction for. Shouldn't be in the past.\\n     */\\n    function _totalDebt(uint64 at) internal view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/CompoundInterest.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {CommonInterest} from \\\"./CommonInterest.sol\\\";\\nimport {Math} from \\\"../lib/Math.sol\\\";\\nimport {Calendar} from \\\"../lib/Calendar.sol\\\";\\n\\n/**\\n    @title CompoundInterest\\n    @author iMe Lab\\n\\n    @notice Implementation of compound interest accrual\\n    @dev https://en.wikipedia.org/wiki/Compound_interest\\n */\\nabstract contract CompoundInterest is CommonInterest {\\n    constructor(uint64 anchor) {\\n        _compoundAnchor = anchor;\\n    }\\n\\n    uint64 private immutable _compoundAnchor;\\n    mapping(address => uint256) private _compoundDeposit;\\n    uint256 private _totalCompoundDeposit;\\n\\n    function _deposit(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal virtual override(CommonInterest) {\\n        uint256 effect = _converge(\\n            amount,\\n            _interestRate,\\n            at,\\n            _compoundAnchor,\\n            _accrualPeriod\\n        );\\n\\n        _totalCompoundDeposit += effect;\\n        _compoundDeposit[depositor] += effect;\\n    }\\n\\n    function _withdrawal(\\n        address recipient,\\n        uint256 amount,\\n        uint64 at\\n    ) internal virtual override(CommonInterest) {\\n        uint256 debt = _debt(recipient, at);\\n\\n        if (amount > debt) {\\n            revert WithdrawalOverDebt();\\n        } else if (amount == debt) {\\n            _withdrawal(recipient);\\n        } else {\\n            uint256 diff = _converge(\\n                amount,\\n                _interestRate,\\n                at,\\n                _compoundAnchor,\\n                _accrualPeriod\\n            );\\n            uint256 deposit = _compoundDeposit[recipient];\\n            if (diff > deposit) diff = deposit;\\n            _compoundDeposit[recipient] -= diff;\\n            _totalCompoundDeposit -= diff;\\n        }\\n    }\\n\\n    function _withdrawal(address recipient) internal virtual override {\\n        uint256 deposit = _compoundDeposit[recipient];\\n        if (deposit != 0) {\\n            _totalCompoundDeposit -= deposit;\\n            _compoundDeposit[recipient] = 0;\\n        }\\n    }\\n\\n    function _debt(\\n        address recipient,\\n        uint64 at\\n    ) internal view virtual override returns (uint256) {\\n        return\\n            _converge(\\n                _compoundDeposit[recipient],\\n                _interestRate,\\n                _compoundAnchor,\\n                at,\\n                _accrualPeriod\\n            );\\n    }\\n\\n    function _totalDebt(\\n        uint64 at\\n    ) internal view virtual override returns (uint256) {\\n        return\\n            _converge(\\n                _totalCompoundDeposit,\\n                _interestRate,\\n                _compoundAnchor,\\n                at,\\n                _accrualPeriod\\n            );\\n    }\\n\\n    /**\\n        @notice Yields money value, converged to specified point in time\\n\\n        @return Converged amount of money [fixed]\\n     */\\n    function _converge(\\n        uint256 sum,\\n        uint256 interest,\\n        uint64 from,\\n        uint64 to,\\n        uint32 period\\n    ) private pure returns (uint256) {\\n        uint64 periods = Calendar.periods(from, to, period);\\n        if (periods == 0) return sum;\\n        uint256 lever = Math.powerX33(1e33 + interest * 1e15, periods) / 1e15;\\n        uint256 converged = to < from ? (sum * 1e36) / lever : sum * lever;\\n        return Math.fromX18(converged);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/FlexibleInterest.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {CommonInterest} from \\\"./CommonInterest.sol\\\";\\nimport {SimpleInterest} from \\\"./SimpleInterest.sol\\\";\\nimport {CompoundInterest} from \\\"./CompoundInterest.sol\\\";\\n\\n/**\\n    @title FlexibleInterest\\n    @author iMe Lab\\n\\n    @notice Contract fragment, implementing flexible interest accrual.\\n    \\\"Flexible\\\" means actual accrual strategy of an investor may change.\\n */\\nabstract contract FlexibleInterest is SimpleInterest, CompoundInterest {\\n    constructor(uint256 compoundThreshold) {\\n        _compoundThreshold = compoundThreshold;\\n    }\\n\\n    uint256 internal immutable _compoundThreshold;\\n    mapping(address => uint256) private _impact;\\n    uint256 private _accumulatedImpact;\\n\\n    function _deposit(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal override(SimpleInterest, CompoundInterest) {\\n        uint256 impact = _impact[depositor];\\n        _impact[depositor] += amount;\\n        _accumulatedImpact += amount;\\n\\n        if (impact >= _compoundThreshold) {\\n            CompoundInterest._deposit(depositor, amount, at);\\n        } else {\\n            if (impact + amount >= _compoundThreshold) {\\n                uint256 debt = SimpleInterest._debt(depositor, at);\\n                if (debt != 0) SimpleInterest._withdrawal(depositor);\\n                CompoundInterest._deposit(depositor, debt + amount, at);\\n            } else {\\n                SimpleInterest._deposit(depositor, amount, at);\\n            }\\n        }\\n    }\\n\\n    function _withdrawal(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal override(SimpleInterest, CompoundInterest) {\\n        uint256 impact = _impact[depositor];\\n        uint256 decrease = (amount < impact) ? amount : impact;\\n        _impact[depositor] -= decrease;\\n        _accumulatedImpact -= decrease;\\n\\n        if (impact > _compoundThreshold) {\\n            if (impact - decrease > _compoundThreshold) {\\n                CompoundInterest._withdrawal(depositor, amount, at);\\n            } else {\\n                uint256 debt = CompoundInterest._debt(depositor, at);\\n                if (debt != 0) CompoundInterest._withdrawal(depositor);\\n                if (amount != debt)\\n                    SimpleInterest._deposit(depositor, debt - amount, at);\\n            }\\n        } else {\\n            SimpleInterest._withdrawal(depositor, amount, at);\\n        }\\n    }\\n\\n    function _withdrawal(\\n        address depositor\\n    ) internal override(SimpleInterest, CompoundInterest) {\\n        uint256 impact = _impact[depositor];\\n        if (impact >= _compoundThreshold)\\n            CompoundInterest._withdrawal(depositor);\\n        else SimpleInterest._withdrawal(depositor);\\n        _accumulatedImpact -= impact;\\n        _impact[depositor] = 0;\\n    }\\n\\n    function _debt(\\n        address depositor,\\n        uint64 at\\n    )\\n        internal\\n        view\\n        override(SimpleInterest, CompoundInterest)\\n        returns (uint256)\\n    {\\n        if (_impact[depositor] >= _compoundThreshold)\\n            return CompoundInterest._debt(depositor, at);\\n        else return SimpleInterest._debt(depositor, at);\\n    }\\n\\n    function _totalDebt(\\n        uint64 at\\n    )\\n        internal\\n        view\\n        override(SimpleInterest, CompoundInterest)\\n        returns (uint256)\\n    {\\n        return CompoundInterest._totalDebt(at) + SimpleInterest._totalDebt(at);\\n    }\\n\\n    function _totalImpact() internal view returns (uint256) {\\n        return _accumulatedImpact;\\n    }\\n\\n    function _impactOf(address investor) internal view returns (uint256) {\\n        return _impact[investor];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/SimpleInterest.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {CommonInterest} from \\\"./CommonInterest.sol\\\";\\nimport {Math} from \\\"../lib/Math.sol\\\";\\nimport {Calendar} from \\\"../lib/Calendar.sol\\\";\\n\\n/**\\n    @title SimpleInterest\\n    @author iMe Lab\\n\\n    @notice Implementation of simple interest accrual\\n    @dev https://en.wikipedia.org/wiki/Interest#Types_of_interest\\n */\\nabstract contract SimpleInterest is CommonInterest {\\n    constructor(uint64 anchor) {\\n        _simpleAnchor = anchor;\\n    }\\n\\n    uint64 private immutable _simpleAnchor;\\n    mapping(address => int256) private _simpleDeposit;\\n    int256 private _totalSimpleDeposit;\\n    mapping(address => uint256) private _simpleGrowth;\\n    uint256 private _totalSimpleGrowth;\\n\\n    function _deposit(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal virtual override(CommonInterest) {\\n        amount *= 1e18;\\n        uint256 growthIncrease = (amount * _interestRate) / 1e18;\\n        uint256 elapsed = Calendar.periods(_simpleAnchor, at, _accrualPeriod);\\n        int256 depoDiff = int256(amount) - int256(growthIncrease * elapsed);\\n        _simpleDeposit[depositor] += depoDiff;\\n        _simpleGrowth[depositor] += growthIncrease;\\n        _totalSimpleGrowth += growthIncrease;\\n        _totalSimpleDeposit += depoDiff;\\n    }\\n\\n    function _withdrawal(\\n        address depositor,\\n        uint256 amount,\\n        uint64 at\\n    ) internal virtual override(CommonInterest) {\\n        uint256 debt = _debt(depositor, at);\\n        if (amount > debt) {\\n            revert WithdrawalOverDebt();\\n        } else if (amount == debt) {\\n            _withdrawal(depositor);\\n        } else {\\n            uint256 growth = _simpleGrowth[depositor];\\n            uint64 periods = Calendar.periods(\\n                _simpleAnchor,\\n                at,\\n                _accrualPeriod\\n            );\\n            uint256 percent = (amount * 1e36) / debt;\\n            if (percent > 1e18) percent = 1e18;\\n            uint256 growthDecrease = (growth * (1e18 - percent)) / 1e18;\\n            int256 depoDecrease = int256(amount * 1e18) -\\n                int256((growth * periods * (1e18 - percent)) / 1e18);\\n            _totalSimpleDeposit -= depoDecrease;\\n            _totalSimpleGrowth -= growthDecrease;\\n            _simpleDeposit[depositor] -= depoDecrease;\\n            _simpleGrowth[depositor] -= growthDecrease;\\n        }\\n    }\\n\\n    function _withdrawal(address depositor) internal virtual override {\\n        int256 deposit = _simpleDeposit[depositor];\\n        if (deposit != 0) {\\n            _totalSimpleDeposit -= deposit;\\n            _simpleDeposit[depositor] = 0;\\n        }\\n        uint256 growth = _simpleGrowth[depositor];\\n        if (growth != 0) {\\n            _totalSimpleGrowth -= growth;\\n            _simpleGrowth[depositor] = 0;\\n        }\\n    }\\n\\n    function _debt(\\n        address depositor,\\n        uint64 at\\n    ) internal view virtual override(CommonInterest) returns (uint256) {\\n        int256 deposit = _simpleDeposit[depositor];\\n        uint256 growth = _simpleGrowth[depositor];\\n        uint256 periods = Calendar.periods(_simpleAnchor, at, _accrualPeriod);\\n        int256 debt = int256(deposit) + int256(periods * growth);\\n        if (debt < 0) return 0;\\n        else return Math.fromX18(uint256(debt));\\n    }\\n\\n    function _totalDebt(\\n        uint64 at\\n    ) internal view virtual override returns (uint256) {\\n        int256 deposit = _totalSimpleDeposit;\\n        uint256 growth = _totalSimpleGrowth;\\n        uint256 periods = Calendar.periods(_simpleAnchor, at, _accrualPeriod);\\n        int256 debt = int256(deposit) + int256(periods * growth);\\n        if (debt < 0) return 0;\\n        else return Math.fromX18(uint256(debt));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/TimeContext.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title TimeContext\\n    @author iMe Lab\\n\\n    @notice Contract fragment, providing context of present moment\\n */\\nabstract contract TimeContext {\\n    /**\\n        @notice Get present moment timestamp\\n        \\n        @dev It should be overridden in mock contracts\\n        Any implementation of this function should follow a rule:\\n        sequential calls of _now() should give non-decreasing sequence of numbers.\\n        It's forbidden to travel back in time.\\n     */\\n    function _now() internal view virtual returns (uint64) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return uint64(block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/TransferDelayer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title TransferDelayer\\n    @author iMe Lab\\n\\n    @notice Contract fragment, responsible for token transfer delay\\n */\\nabstract contract TransferDelayer {\\n    struct DelayedTransfer {\\n        /**\\n            @notice Amount of tokens to send, integer\\n\\n            @dev uint192 is used in order to optimize gas costs\\n         */\\n        uint192 amount;\\n        /**\\n            @notice Timestamp to perform the transfer\\n         */\\n        uint64 notBefore;\\n    }\\n\\n    mapping(address => DelayedTransfer[]) private _transfers;\\n    uint256 private _delayedValue = 0;\\n\\n    function _delayTransfer(\\n        address recipient,\\n        uint256 amount,\\n        uint64 notBefore\\n    ) internal {\\n        assert(amount < 2 ** 192);\\n        _transfers[recipient].push(DelayedTransfer(uint192(amount), notBefore));\\n        _delayedValue += amount;\\n    }\\n\\n    /**\\n        @notice Finalize transfers, which are ready, for certain user\\n\\n        @dev Be sure to perform a real token transfer\\n     */\\n    function _finalizeDelayedTransfers(\\n        address recipient,\\n        uint64 moment\\n    ) internal returns (uint256) {\\n        DelayedTransfer[] memory transfers = _transfers[recipient];\\n        uint256 i = 0; // Index of the last transfer to perform\\n        uint256 tokensToSend = 0;\\n\\n        for (; i < transfers.length && moment >= transfers[i].notBefore; i++)\\n            tokensToSend += transfers[i].amount;\\n\\n        if (i == 0) {\\n            return 0;\\n        } else if (i == transfers.length) {\\n            delete _transfers[recipient];\\n        } else {\\n            for (uint256 k = 0; k < i; k++) {\\n                _transfers[recipient][k] = transfers[k + i];\\n                _transfers[recipient].pop();\\n            }\\n        }\\n\\n        _delayedValue -= tokensToSend;\\n        return tokensToSend;\\n    }\\n\\n    /**\\n        @notice Yields amount of delayed tokens for a certain user\\n\\n        @return pending Amount of tokens, which cannot be transferred yet\\n        @return ready Amount of tokens, ready to be transferred\\n     */\\n    function _delayedTokensFor(\\n        address recipient,\\n        uint256 moment\\n    ) internal view returns (uint256 pending, uint256 ready) {\\n        DelayedTransfer[] memory transfers = _transfers[recipient];\\n        uint256 i = 0;\\n        for (; i < transfers.length && transfers[i].notBefore < moment; i++)\\n            ready += transfers[i].amount;\\n\\n        for (; i < transfers.length; i++) pending += transfers[i].amount;\\n    }\\n\\n    function _totalDelayed() internal view returns (uint256) {\\n        return _delayedValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IStakingCore.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title IStakingCore\\n    @author iMe Lab\\n\\n    @notice General interface for iMe Staking v2\\n */\\ninterface IStakingCore {\\n    error TokenTransferFailed();\\n    error DepositIsTooEarly();\\n    error DepositIsTooLate();\\n    error DepositRankIsUntrusted();\\n    error DepositRankIsTooLow();\\n    error DepositDeadlineIsReached();\\n    error WithdrawalDelayIsUnwanted();\\n    error WithdrawalIsOffensive();\\n    error NoTokensReadyForClaim();\\n    error RewardIsTooEarly();\\n    error RefundIsTooEarly();\\n\\n    event Deposit(address from, uint256 amount);\\n    event Withdrawal(address to, uint256 amount, uint256 fee);\\n    event DelayedWithdrawal(\\n        address to, uint256 amount, uint256 fee, uint64 until\\n    );\\n    event Claim(address to, uint256 amount);\\n\\n    /**\\n        @notice Yields internal staking version\\n\\n        @dev Version is needed to distinguish staking v1/v2 interfaces\\n     */\\n    function version() external pure returns (string memory);\\n\\n    /**\\n       @notice Make a deposit\\n\\n       @dev Should fire StakingDeposit event\\n\\n       @param amount Amount of token to deposit. Should be approved in advance.\\n       @param rank Depositor's LIME rank\\n       @param deadline Deadline for deposit transaction\\n       @param v V part of the signature, proofing depositor's rank\\n       @param r R part of the signature, proofing depositor's rank\\n       @param s S part of the signature, proofing depositor's rank\\n     */\\n    function deposit(\\n        uint256 amount,\\n        uint8 rank,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n        @notice Withdraw staked and prize tokens\\n\\n        @dev should fire StakingWithdrawal or StakingDelayedWithdrawal event\\n\\n        @param amount Amount of tokens to withdraw\\n        @param delayed Whether withdrawal is delayed\\n     */\\n    function withdraw(uint256 amount, bool delayed) external;\\n\\n    /**\\n        @notice Claim delayed withdrawn tokens\\n\\n        @dev Actually doesn't matter who run this method: claimer address\\n        is passed as a parameter. So, anyone can pay gas to perform claim for\\n        a friend.\\n\\n        Should fire StakingClaim event.\\n\\n        @param depositor Depositor who performs claim\\n     */\\n    function claim(address depositor) external;\\n\\n    /**\\n        @notice Force withdrawal for specified investor\\n\\n        @dev Force withdrawals should be available after staking finish only.\\n\\n        @param depositor Depositor to perform delay for\\n     */\\n    function reward(address depositor) external;\\n\\n    /**\\n        @notice Take tokens which doesn't participate in staking. Should be\\n        available only after staking finish and only for tokens owner (partner)\\n\\n        @param amount Amount of tokens to take. Should not be above free\\n        tokens. if amount = 0, all free tokens will be withdrawn\\n     */\\n    function refund(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IStakingInfo.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title IStakingInfo\\n    @author iMe Lab\\n    @notice Staking contract v2 extension, allowing clients to retrieve \\n    staking programme information.\\n\\n    Generally, needed for building better UX by allowing users to see staking\\n    requisites, lifespan, fees, etc.\\n */\\ninterface IStakingInfo {\\n    /**\\n        @notice General staking information\\n     */\\n    struct StakingInfo {\\n        /**\\n            @notice Staking name to be displayed everywhere\\n         */\\n        string name;\\n        /**\\n            @notice Partner name. As example, iMe Lab\\n         */\\n        string author;\\n        /**\\n            @notice Partner website. As example, https://imem.app\\n         */\\n        string website;\\n        /**\\n            @notice Address of token for staking\\n         */\\n        address token;\\n        /**\\n            @notice Interest per accrual period\\n            @dev Represented as fixed 2x18 number\\n         */\\n        uint64 interestRate;\\n        /**\\n            @notice Interest accrual period in seconds\\n         */\\n        uint32 accrualPeriod;\\n        /**\\n            @notice Duration of withdrawn tokens lock, in seconds\\n         */\\n        uint32 delayedWithdrawalDuration;\\n        /**\\n            @notice Impact needed to enable compound accrual\\n         */\\n        uint256 compoundAccrualThreshold;\\n        /**\\n            @notice Fee taken for delayed withdrawn tokens\\n            @dev Represented as fixed 2x18 number\\n         */\\n        uint64 delayedWithdrawalFee;\\n        /**\\n            @notice Fee taken for premature withdrawn tokens\\n            @dev Represented as fixed 2x18 number\\n         */\\n        uint64 prematureWithdrawalFee;\\n        /**\\n            @notice Minimal LIME rank needed to make deposits\\n         */\\n        uint8 minimalRank;\\n        /**\\n            @notice Staking start moment\\n         */\\n        uint64 startsAt;\\n        /**\\n            @notice Staking end moment. May change if staking stops\\n         */\\n        uint64 endsAt;\\n    }\\n\\n    /**\\n        @notice Event, typically fired when staking info changes\\n     */\\n    event StakingInfoChanged();\\n\\n    /**\\n        @notice Retrieve staking information\\n\\n        @dev Information shouldn't change frequently\\n     */\\n    function info() external view returns (StakingInfo memory);\\n}\\n\"\r\n    },\r\n    \"contracts/IStakingPausable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title IStakingPausable\\n    @author iMe Lab\\n\\n    @notice Staking v2 extension, allowing managers to stop programmes.\\n */\\ninterface IStakingPausable {\\n    /**\\n        @notice Error, typically fired on attempt to do something during pause\\n     */\\n    error StakingIsPaused();\\n\\n    /**\\n        @notice Temporary forbid user deposits/withdrawals\\n        Makes no sense after staking finish.\\n     */\\n    function pause() external;\\n\\n    /**\\n        @notice Resume paused staking\\n     */\\n    function resume() external;\\n}\\n\"\r\n    },\r\n    \"contracts/IStakingPredictable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title IStakingPredictable\\n    @author iMe Lab\\n    @notice Staking contract v2 extension, allowing clients to retrieve\\n    staking current statistics and predict debt in future.\\n\\n    Generally, needed to predict staking solvency.\\n */\\ninterface IStakingPredictable {\\n    /**\\n        @notice Totals in this staking\\n     */\\n    struct StakingSummary {\\n        uint256 totalImpact;\\n        uint256 totalDebt;\\n        uint256 totalDelayed;\\n        uint256 balance;\\n    }\\n\\n    /**\\n        @notice Populate staking summary for the present moment\\n     */\\n    function summary() external view returns (StakingSummary memory);\\n\\n    /**\\n        @notice Predict total debt for a certain point in time\\n\\n        @param at Unit in time to make a prediction. Shouldn't be in the past.\\n     */\\n    function totalDebt(uint64 at) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/IStakingStatistics.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title IStakingStatistics\\n    @author iMe Lab\\n    @notice Staking contract v2 extension, allowing clients to\\n    see their own statistics\\n\\n    Generally, needed to improve UX by showing users their staked, accrued\\n    and delayed token amounts.\\n */\\ninterface IStakingStatistics {\\n    /**\\n        @notice Staking stats, related to a certain investor\\n     */\\n    struct StakingStatistics {\\n        uint256 impact;\\n        uint256 debt;\\n        uint256 pendingWithdrawnTokens;\\n        uint256 readyWithdrawnTokens;\\n    }\\n\\n    /**\\n        @notice Yields personal stats for a certain investor\\n     */\\n    function statsOf(address) external view returns (StakingStatistics memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Calendar.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Calendar\\n    @author iMe Lab\\n\\n    @notice Small date & time library\\n */\\nlibrary Calendar {\\n    /**\\n        @notice Count round periods over time interval\\n        \\n        @dev Example case, where function should return 3:\\n        \\n         duration = |-----|\\n        \\n             start               end\\n               |                  |\\n               V                  V\\n        -----|-----|-----|-----|-----|-----|---\\n    \\n        @param start Interval start\\n        @param end Interval end\\n        @param duration Period duration\\n     */\\n    function periods(\\n        uint64 start,\\n        uint64 end,\\n        uint32 duration\\n    ) internal pure returns (uint64 count) {\\n        unchecked {\\n            if (start > end) (start, end) = (end, start);\\n            count = (end - start) / duration;\\n            if (start % duration > end % duration) count += 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LimeRank.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title LimeRank\\n    @author iMe Lab\\n\\n    @notice Library for working with LIME ranks\\n */\\nlibrary LimeRank {\\n    /**\\n        @notice Yields proof for **subject** that **issuer** has LIME **rank**\\n        in a timespan, not later than **deadline**\\n\\n        @dev \\\"Proofs\\\" make sense only if they are signed. Signing example:\\n\\n        ```typescript\\n          const hash = ethers.utils.solidityKeccak256(\\n            [\\\"address\\\", \\\"address\\\", \\\"uint256\\\", \\\"uint8\\\"],\\n            [subject, issuer, deadline, rank]\\n          );\\n          const proof = ethers.utils.arrayify(hash);\\n          const sig = await arbiter.signMessage(proof);\\n          const { v, r, s } = ethers.utils.splitSignature(sig);\\n        ```\\n\\n        @param subject Address of entity that performs check\\n        @param issuer Address of account who proofs his rank\\n        @param deadline Proof expiration timestamp\\n        @param rank LIME rank that being proofed\\n    */\\n    function proof(\\n        address subject,\\n        address issuer,\\n        uint256 deadline,\\n        uint8 rank\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encodePacked(subject, issuer, deadline, rank))\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n    @title Math\\n    @author iMe Lab\\n\\n    @notice Maths library. Generally, for financial computations.\\n */\\nlibrary Math {\\n    /**\\n        @notice Yields integer exponent of fixed-point number\\n\\n        @dev Implementation of Exponintiation by squaring algorightm.\\n        Highly inspired by PRBMath library. Uses x33 precision instead\\n        of x18 in order to make financial computations more accurate.\\n\\n        @param x Exponent base, 33x33 fixed number close to 1.0\\n        @param y Exponentiation parameter, integer\\n     */\\n    function powerX33(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 power) {\\n        unchecked {\\n            power = y & 1 > 0 ? x : 1e33;\\n\\n            for (y >>= 1; y > 0; y >>= 1) {\\n                x = (x * x) / 1e33;\\n                if (y & 1 > 0) power = (power * x) / 1e33;\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice Round x18 fixed number to an integer\\n     */\\n    function fromX18(uint256 fixedX18) internal pure returns (uint256 round) {\\n        unchecked {\\n            round = fixedX18 / 1e18;\\n            if (fixedX18 % 1e18 > 5e17) round += 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferDelayer} from \\\"./abstract/TransferDelayer.sol\\\";\\nimport {FlexibleInterest} from \\\"./abstract/FlexibleInterest.sol\\\";\\nimport {CommonInterest} from \\\"./abstract/CommonInterest.sol\\\";\\nimport {CompoundInterest} from \\\"./abstract/CompoundInterest.sol\\\";\\nimport {SimpleInterest} from \\\"./abstract/SimpleInterest.sol\\\";\\nimport {LimeRank} from \\\"./lib/LimeRank.sol\\\";\\nimport {Math} from \\\"./lib/Math.sol\\\";\\nimport {TimeContext} from \\\"./abstract/TimeContext.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IStakingCore} from \\\"./IStakingCore.sol\\\";\\nimport {IStakingInfo} from \\\"./IStakingInfo.sol\\\";\\nimport {IStakingPredictable} from \\\"./IStakingPredictable.sol\\\";\\nimport {IStakingStatistics} from \\\"./IStakingStatistics.sol\\\";\\nimport {IStakingPausable} from \\\"./IStakingPausable.sol\\\";\\n\\n/**\\n    @title Staking\\n    @author iMe Lab\\n\\n    @notice Implementation of iMe staking version 2\\n */\\ncontract Staking is\\n    IStakingCore,\\n    IStakingInfo,\\n    IStakingPredictable,\\n    IStakingStatistics,\\n    IStakingPausable,\\n    FlexibleInterest,\\n    TransferDelayer,\\n    TimeContext,\\n    AccessControl\\n{\\n    constructor(\\n        StakingInfo memory blueprint\\n    )\\n        FlexibleInterest(blueprint.compoundAccrualThreshold)\\n        SimpleInterest(blueprint.startsAt - blueprint.accrualPeriod * 2)\\n        CompoundInterest((blueprint.startsAt + blueprint.endsAt) / 2)\\n        CommonInterest(blueprint.interestRate, blueprint.accrualPeriod)\\n    {\\n        require(blueprint.startsAt < blueprint.endsAt);\\n        require(blueprint.prematureWithdrawalFee < 1e18);\\n        require(blueprint.delayedWithdrawalFee < 1e18);\\n\\n        _name = blueprint.name;\\n        _author = blueprint.author;\\n        _website = blueprint.website;\\n        _token = IERC20(blueprint.token);\\n        _minimalRank = blueprint.minimalRank;\\n        _delayedWithdrawalDuration = blueprint.delayedWithdrawalDuration;\\n        _startsAt = blueprint.startsAt;\\n        _endsAt = blueprint.endsAt;\\n        _delayedWithdrawalFee = blueprint.delayedWithdrawalFee;\\n        _prematureWithdrawalFee = blueprint.prematureWithdrawalFee;\\n        _isPaused = false;\\n\\n        _grantRole(MANAGER_ROLE, _msgSender());\\n        _grantRole(PARTNER_ROLE, _msgSender());\\n\\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\\n        _setRoleAdmin(ARBITER_ROLE, MANAGER_ROLE);\\n        _setRoleAdmin(PARTNER_ROLE, PARTNER_ROLE);\\n    }\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant PARTNER_ROLE = keccak256(\\\"PARTNER_ROLE\\\");\\n    bytes32 public constant ARBITER_ROLE = keccak256(\\\"ARBITER_ROLE\\\");\\n\\n    string private _name;\\n    string private _author;\\n    string private _website;\\n    IERC20 private immutable _token;\\n    uint8 private immutable _minimalRank;\\n    uint32 private immutable _delayedWithdrawalDuration;\\n    uint64 private immutable _startsAt;\\n    uint64 private _endsAt;\\n    uint64 private immutable _delayedWithdrawalFee;\\n    uint64 private immutable _prematureWithdrawalFee;\\n\\n    bool private _isPaused;\\n\\n    function version() external pure override returns (string memory) {\\n        return \\\"3\\\";\\n    }\\n\\n    function info() external view override returns (StakingInfo memory) {\\n        return\\n            StakingInfo(\\n                _name,\\n                _author,\\n                _website,\\n                address(_token),\\n                _interestRate,\\n                _accrualPeriod,\\n                _delayedWithdrawalDuration,\\n                _compoundThreshold,\\n                _delayedWithdrawalFee,\\n                _prematureWithdrawalFee,\\n                _minimalRank,\\n                _startsAt,\\n                _endsAt\\n            );\\n    }\\n\\n    function summary() external view override returns (StakingSummary memory) {\\n        return\\n            StakingSummary(\\n                _totalImpact(),\\n                _totalDebt(_accrualNow()),\\n                _totalDelayed(),\\n                _token.balanceOf(address(this))\\n            );\\n    }\\n\\n    function totalDebt(uint64 at) external view override returns (uint256) {\\n        if (at > _endsAt) at = _endsAt;\\n        else if (at < _now()) at = _now();\\n        return _totalDebt(at);\\n    }\\n\\n    function statsOf(\\n        address investor\\n    ) external view override returns (StakingStatistics memory) {\\n        (uint256 pending, uint256 ready) = _delayedTokensFor(investor, _now());\\n\\n        return\\n            StakingStatistics(\\n                _impactOf(investor),\\n                _debt(investor, _accrualNow()),\\n                pending,\\n                ready\\n            );\\n    }\\n\\n    function deposit(\\n        uint256 amount,\\n        uint8 rank,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(amount > 0);\\n        if (_now() >= deadline) revert DepositDeadlineIsReached();\\n        if (_isPaused) revert StakingIsPaused();\\n        if (_now() < _startsAt) revert DepositIsTooEarly();\\n        if (_now() >= _endsAt) revert DepositIsTooLate();\\n        if (_minimalRank != 0) {\\n            address subject = address(this);\\n            address sender = _msgSender();\\n            bytes32 proof = LimeRank.proof(subject, sender, deadline, rank);\\n            address signer = ecrecover(proof, v, r, s);\\n            if (!this.hasRole(ARBITER_ROLE, signer))\\n                revert DepositRankIsUntrusted();\\n            if (rank < _minimalRank) revert DepositRankIsTooLow();\\n        }\\n        _deposit(_msgSender(), amount, _now());\\n        emit Deposit(_msgSender(), amount);\\n        _safe(_token.transferFrom(_msgSender(), address(this), amount));\\n    }\\n\\n    function withdraw(uint256 amount, bool delayed) external override {\\n        require(amount > 0);\\n        if (_now() < _endsAt && _isPaused) revert StakingIsPaused();\\n\\n        _withdrawal(_msgSender(), amount, _accrualNow());\\n\\n        if (delayed) {\\n            if (_now() >= _endsAt) revert WithdrawalDelayIsUnwanted();\\n            uint256 fee = Math.fromX18(amount * _delayedWithdrawalFee);\\n            uint64 unlockAt = _now() + _delayedWithdrawalDuration;\\n            _delayTransfer(_msgSender(), amount - fee, unlockAt);\\n            emit DelayedWithdrawal(_msgSender(), amount, fee, unlockAt);\\n        } else {\\n            uint256 fee;\\n            if (_now() < _endsAt)\\n                fee = Math.fromX18(amount * _prematureWithdrawalFee);\\n\\n            _safe(_token.transfer(_msgSender(), amount - fee));\\n            emit Withdrawal(_msgSender(), amount, fee);\\n        }\\n\\n        if (!_hasEnoughFunds()) revert WithdrawalIsOffensive();\\n    }\\n\\n    function reward(address to) external override onlyRole(MANAGER_ROLE) {\\n        if (_now() < _endsAt) revert RewardIsTooEarly();\\n        uint256 prize = _debt(to, _accrualNow());\\n        _withdrawal(to);\\n        emit Withdrawal(to, prize, 0);\\n        _safe(_token.transfer(to, prize));\\n        if (!_hasEnoughFunds()) revert WithdrawalIsOffensive();\\n    }\\n\\n    function refund(uint256 amount) external override onlyRole(PARTNER_ROLE) {\\n        if (_now() < _endsAt) revert RefundIsTooEarly();\\n        uint256 tokensToGive = _totalDelayed() + _totalDebt(_accrualNow());\\n        uint256 balance = _token.balanceOf(address(this));\\n        if (balance < tokensToGive) revert WithdrawalIsOffensive();\\n\\n        uint256 freeTokens = balance - tokensToGive;\\n        if (amount == 0) amount = freeTokens;\\n        else if (amount > freeTokens) revert WithdrawalIsOffensive();\\n\\n        _safe(_token.transfer(_msgSender(), amount));\\n    }\\n\\n    function claim(address recipient) external override {\\n        uint256 amount = _finalizeDelayedTransfers(recipient, _now());\\n        if (amount == 0) revert NoTokensReadyForClaim();\\n        emit Claim(recipient, amount);\\n        _safe(_token.transfer(recipient, amount));\\n    }\\n\\n    function pause() external override onlyRole(MANAGER_ROLE) {\\n        require(!_isPaused);\\n        _isPaused = true;\\n    }\\n\\n    function resume() external override onlyRole(MANAGER_ROLE) {\\n        require(_isPaused);\\n        _isPaused = false;\\n    }\\n\\n    function stop() external onlyRole(MANAGER_ROLE) {\\n        require(_now() >= _startsAt);\\n        require(_now() < _endsAt);\\n        _endsAt = _now();\\n        emit StakingInfoChanged();\\n    }\\n\\n    function setRequisites(\\n        string calldata name,\\n        string calldata author,\\n        string calldata website\\n    ) external onlyRole(MANAGER_ROLE) {\\n        require(\\n            keccak256(abi.encode(_name, _author, _website)) !=\\n                keccak256(abi.encode(name, author, website))\\n        );\\n        (_name, _author, _website) = (name, author, website);\\n        emit StakingInfoChanged();\\n    }\\n\\n    function _hasEnoughFunds() private view returns (bool) {\\n        return\\n            _token.balanceOf(address(this)) >= _totalImpact() + _totalDelayed();\\n    }\\n\\n    function _safe(bool transfer) private pure {\\n        if (!transfer) revert TokenTransferFailed();\\n    }\\n\\n    function _accrualNow() internal view returns (uint64) {\\n        uint64 time = _now();\\n        return time < _endsAt ? time : _endsAt;\\n    }\\n\\n    receive() external payable {\\n        revert();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"interestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"accrualPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"delayedWithdrawalDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"compoundAccrualThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"delayedWithdrawalFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prematureWithdrawalFee\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minimalRank\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"startsAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endsAt\",\"type\":\"uint64\"}],\"internalType\":\"struct IStakingInfo.StakingInfo\",\"name\":\"blueprint\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DepositDeadlineIsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositIsTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositIsTooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositRankIsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositRankIsUntrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensReadyForClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundIsTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalDelayIsUnwanted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalIsOffensive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalOverDebt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"until\",\"type\":\"uint64\"}],\"name\":\"DelayedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARBITER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARTNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rank\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"interestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"accrualPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"delayedWithdrawalDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"compoundAccrualThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"delayedWithdrawalFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prematureWithdrawalFee\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minimalRank\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"startsAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endsAt\",\"type\":\"uint64\"}],\"internalType\":\"struct IStakingInfo.StakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"setRequisites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"statsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"impact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawnTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"readyWithdrawnTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakingStatistics.StakingStatistics\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summary\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalImpact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDelayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakingPredictable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"at\",\"type\":\"uint64\"}],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delayed\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000ee246aa7e2ecf136466c6fe4808f395861c6a04e00000000000000000000000000000000000000000000000000012b030f98ee77000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063f30c600000000000000000000000000000000000000000000000000000000064e1abe0000000000000000000000000000000000000000000000000000000000000000350504d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001350756e6b50616e6461204d657373656e67657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e68747470733a2f2f7777772e70756e6b70616e64616661726d2e636f6d2f0000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}