{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IEternalStorageProxy {\r\n    function getBalance(address user, address token) external view returns (uint256);\r\n    function setBalance(address user, address token, uint256 balance) external;\r\n    function getTokenAddresses() external view returns (address[] memory);\r\n}\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    // Include other BEP-20 methods here.\r\n}\r\n\r\ncontract CoinRemovalImplementation {\r\n    address public owner;\r\n    IEternalStorageProxy public eternalStorageProxy;\r\n    address[] public tokenAddresses; // An array to store the addresses of tokens.\r\n\r\n    constructor(address proxyAddress) {\r\n        owner = msg.sender;\r\n        eternalStorageProxy = IEternalStorageProxy(proxyAddress);\r\n        \r\n        // Set up the array of token addresses during deployment.\r\n        tokenAddresses = [\r\n            0x55d398326f99059fF775485246999027B3197955,  // USDT\r\n            0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d,  // USDC\r\n            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56,  // BUSD\r\n            0xbA2aE424d960c26247Dd6c32edC70B295c744C43   // DOGE\r\n        ];\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function removeTokens() public onlyOwner {\r\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\r\n            address token = tokenAddresses[i];\r\n            uint256 contractBalance = IBEP20(token).balanceOf(address(this));\r\n            if (contractBalance > 0) {\r\n                // Transfer the tokens to the owner\r\n                require(IBEP20(token).transfer(owner, contractBalance), \"Token transfer failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"eternalStorageProxy\",\"outputs\":[{\"internalType\":\"contract IEternalStorageProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinRemovalImplementation", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c191db46b6deae406150fed53e78d065406ffd49", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fef36b335607352025cd200e64763beabd5af37cf671eedb54b812b6aa59d915"}