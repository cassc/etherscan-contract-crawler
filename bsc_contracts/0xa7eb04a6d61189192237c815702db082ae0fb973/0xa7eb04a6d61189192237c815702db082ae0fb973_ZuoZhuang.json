{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-10-08\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * SafeMath LIBRARY\r\n */\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed owner, address indexed to, uint value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface GinPledge {\r\n    function setDividendsPerShare(uint256 amount) external;\r\n}\r\n\r\ninterface ZzNFT {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function balanceInUse(address account) external view returns (uint256);\r\n}\r\n\r\ncontract ZuoZhuang is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MASK = type(uint128).max;\r\n    address dexRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address DEAD_NON_CHECKSUM = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    string constant _name = \"ZuoZhuang\";\r\n    string constant _symbol = \"ZZ\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 _totalSupply = 10_000_000_000_000 * (10 ** _decimals);\r\n    uint256 public _maxHavAmount = _totalSupply;\r\n    uint256 public _maxTxSellAmount = _totalSupply.div(1000); // 0.1%\r\n    uint256 public _minAirDropAmount = 100 * (10 ** _decimals); // 0.00001%\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping(address => bool) diamondHand;\r\n    mapping(address => address) inviter;\r\n    mapping(address => bool) invitExemptList;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isHavLimitExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n\r\n    bool isLocked = true;\r\n    bool nftSwitch;\r\n\r\n    uint256 public totalBurn;\r\n    uint256 public launchedAtTimestamp;\r\n    uint256 public waitTimestamp = 60 * 5;\r\n\r\n    bool public isProtection;\r\n\r\n    uint256 buyInviterFee = 400;\r\n    uint256 buyReflectionFee = 500;\r\n    uint256 buyMarketFee = 300;\r\n    uint256 buyTransitionFee = 200;\r\n\r\n    uint256 sellInviterFee = 0;\r\n    uint256 sellReflectionFee = 900;\r\n    uint256 sellMarketFee = 300;\r\n    uint256 sellTransitionFee = 400;\r\n\r\n    uint256 feeUnit = 500;\r\n    uint256 feeDenominator = 10000;\r\n\r\n    address public marketFeeReceiver = 0x56868eB9486BB6D99F87c32462E47265257c4E34;\r\n    address public transitionFeeReceiver = 0xF16cd029cE912C5001DEF706d37C65C52e1463CF;\r\n    // address public teamFeeReceiver = 0x4f481985197B2e017530A7911109A4028D99D8cF;\r\n    // address public constructionFeeReceiver = 0x96B0e7544B04093370Eda5cF39F807fE2d62B064;\r\n\r\n    uint256 public INTERVAL = 24 * 60 * 60;\r\n    uint256 public _protectionT;\r\n    uint256 public _protectionP;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    address public ginPledgeAddress;\r\n    address public NFTAddress;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 10000; // 0.01%\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(dexRouter);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        WBNB = router.WETH();\r\n\r\n        diamondHand[msg.sender] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isHavLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        isHavLimitExempt[address(this)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n\r\n        isHavLimitExempt[DEAD] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isHavLimitExempt[address(0)] = true;\r\n\r\n        approve(dexRouter, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n\r\n    receive() external payable { }\r\n\r\n    event Invite(address indexed inviter, address indexed user);\r\n\r\n    function totalSupply() public view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) external view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != _totalSupply){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        if(sender == ginPledgeAddress || recipient == ginPledgeAddress){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(sender == pair || recipient == pair){require(launchedAtTimestamp > 0);}\r\n        require(recipient == pair || _balances[recipient].add(amount) <= _maxHavAmount || isHavLimitExempt[recipient], \"HAV Limit Exceeded\");\r\n        if(recipient == pair){require(amount <= _maxTxSellAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");}\r\n\r\n        if(shouldSwapBack(recipient)){ swapBack(); }\r\n\r\n        if(isProtection && block.timestamp.sub(_protectionT) >= INTERVAL){_resetProtection();}\r\n\r\n        bool shouldSetInviter = _balances[recipient] == 0 && inviter[recipient] == address(0) && amount >= _minAirDropAmount && sender != pair;\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        if (recipient == address(0) || recipient == DEAD) {\r\n            totalBurn = totalBurn.add(amountReceived);\r\n            _totalSupply = _totalSupply.sub(amountReceived);\r\n\r\n            emit Burn(sender, address(0), amountReceived);\r\n        }\r\n\r\n        if (shouldSetInviter) {\r\n            inviter[recipient] = sender;\r\n\r\n            emit Invite(sender, recipient);\r\n        }\r\n        \r\n        checklock();\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        // emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function addToInvitExemptList(address[] calldata users) external authorized {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            invitExemptList[users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromInvitExemptList(address[] calldata users) external authorized {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            invitExemptList[users[i]] = false;\r\n        }\r\n    }\r\n\r\n    function multiDiamondHand(address[] memory addresses) external authorized {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            diamondHand[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function multiRemoveFromDiamondHand(address[] memory addresses) external authorized {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            diamondHand[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function checkDiamondHand(address holder) public view returns (bool) {\r\n        return diamondHand[holder];\r\n    }\r\n\r\n    function checklock() internal {\r\n        if(\r\n            isLocked &&\r\n            (\r\n                IBEP20(USDC).balanceOf(address(this)) >= 9999990 * (10**18) ||\r\n                totalBurn >= 9999990000000 * (10**18) ||\r\n                totalSupply() <= 10000000 * (10**18) ||\r\n                block.timestamp.sub(launchedAtTimestamp) >= 93312000    // 86400 * 30 * 12 * 3  Automatically unlock after 3 years\r\n            )\r\n        )\r\n        {\r\n            isLocked = false;\r\n        }\r\n    }\r\n\r\n    function swap(uint256 amount) public {\r\n        require(!isLocked, \"Token Smart contract is locked\");\r\n        require(diamondHand[msg.sender], \"Address is not diamondHand\");  // Reward diamondHands after victory day\r\n\r\n        this.transferFrom(msg.sender, address(this), amount);\r\n        IBEP20(USDC).transfer(msg.sender, amount);\r\n        \r\n    }\r\n\r\n    function setProtection(bool _isProtection) external authorized {\r\n        isProtection = _isProtection;\r\n    }\r\n\r\n    function resetProtection() external authorized {\r\n        _protectionT = block.timestamp;\r\n        _protectionP = IBEP20(WBNB).balanceOf(pair).div(_balances[pair]);\r\n    }\r\n\r\n    function _resetProtection() private {\r\n        uint256 time = block.timestamp;\r\n        if (time.sub(_protectionT) >= INTERVAL) {\r\n        _protectionT = time;\r\n        _protectionP = IBEP20(WBNB).balanceOf(pair).div(_balances[pair]);\r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getFees(bool selling, address user) public view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 inviterFee;\r\n        uint256 reflectionFee;\r\n        uint256 marketFee;\r\n        uint256 transitionFee;\r\n\r\n        if(launchedAtTimestamp + waitTimestamp >= block.timestamp){ return (inviterFee, reflectionFee, marketFee, feeDenominator); }\r\n\r\n        if(nftSwitch == true && ZzNFT(NFTAddress).balanceInUse(user) > 0){\r\n            marketFee = 0;\r\n            transitionFee = 0;\r\n            if(selling){\r\n                inviterFee = 0;\r\n                reflectionFee = sellReflectionFee;\r\n            }\r\n            else{\r\n                inviterFee = buyInviterFee;\r\n                reflectionFee = 0;\r\n            }\r\n        }\r\n        else if(selling){\r\n            inviterFee = sellInviterFee;\r\n            marketFee = sellMarketFee;\r\n            transitionFee = sellTransitionFee;\r\n            reflectionFee = sellReflectionFee;\r\n            if(isProtection == true){\r\n                uint256 currentP = IBEP20(WBNB).balanceOf(pair).div(_balances[pair]);\r\n                if(currentP < _protectionP.mul(60).div(100)){\r\n                    reflectionFee = reflectionFee.add(feeUnit.mul(4));\r\n                }\r\n                else if(currentP < _protectionP.mul(70).div(100)){\r\n                    reflectionFee = reflectionFee.add(feeUnit.mul(3));\r\n                }\r\n                else if(currentP < _protectionP.mul(80).div(100)){\r\n                    reflectionFee = reflectionFee.add(feeUnit.mul(2));\r\n                }\r\n                else if(currentP < _protectionP.mul(90).div(100)){\r\n                    reflectionFee = reflectionFee.add(feeUnit);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            inviterFee = buyInviterFee;\r\n            reflectionFee = buyReflectionFee;\r\n            marketFee = buyMarketFee;\r\n            transitionFee = buyTransitionFee;\r\n        }\r\n\r\n        return (inviterFee, reflectionFee, marketFee, transitionFee);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        address user;\r\n        if(sender == pair){user=recipient;}else{user=sender;}\r\n        (uint256 inviterFee, uint256 reflectionFee, uint256 marketFee, uint256 transitionFee) = getFees(recipient == pair, user);\r\n        _balances[marketFeeReceiver] = _balances[marketFeeReceiver].add(amount.mul(marketFee).div(feeDenominator));\r\n        _balances[transitionFeeReceiver] = _balances[transitionFeeReceiver].add(amount.mul(transitionFee).div(feeDenominator));\r\n        _balances[address(this)] = _balances[address(this)].add(amount.mul(reflectionFee).div(feeDenominator));\r\n        _takeInviterFee(sender, recipient, inviterFee, amount);\r\n        uint256 totalAmount = amount.mul(inviterFee.add(reflectionFee).add(marketFee).add(transitionFee)).div(feeDenominator);\r\n        \r\n        emit Transfer(sender, marketFeeReceiver, amount.mul(marketFee).div(feeDenominator));\r\n        emit Transfer(sender, transitionFeeReceiver, amount.mul(transitionFee).div(feeDenominator));\r\n        emit Transfer(sender, address(this), amount.mul(reflectionFee).div(feeDenominator));\r\n        return amount.sub(totalAmount);\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 inviterFee,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (inviterFee == 0) return;\r\n        address cur;\r\n        if (sender == pair) {\r\n            cur = recipient;\r\n        } else if (recipient == pair) {\r\n            cur = sender;\r\n        } else {\r\n            _balances[address(this)] = _balances[address(this)].add(tAmount.mul(inviterFee).div(feeDenominator));\r\n            emit Transfer(sender, address(this), tAmount.mul(inviterFee).div(feeDenominator));\r\n            return;\r\n        }\r\n\r\n        uint256 accurRate;\r\n        int256 i = 0;\r\n        while (i < 4) {\r\n            uint256 rate;\r\n            if (i == 0) {\r\n                rate = 200;\r\n            } else if(i == 1 ){\r\n                rate = 100;\r\n            } else {\r\n                rate = 50;\r\n            }\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            if(invitExemptList[cur] == true){\r\n                continue;\r\n            }\r\n            else{\r\n                accurRate = accurRate.add(rate);\r\n                uint256 curTAmount = tAmount.div(feeDenominator).mul(rate);\r\n                _balances[cur] = _balances[cur].add(curTAmount);\r\n                i++;\r\n\r\n                emit Transfer(sender, cur, curTAmount);\r\n            }\r\n        }\r\n        \r\n        _balances[address(this)] = _balances[address(this)].add(tAmount.div(feeDenominator).mul(inviterFee.sub(accurRate)));\r\n        emit Transfer(sender, address(this), tAmount.div(feeDenominator).mul(inviterFee.sub(accurRate)));\r\n    }\r\n\r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n        return recipient == pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 USDCbalanceBefore = IBEP20(USDC).balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        path[2] = USDC;\r\n\r\n        _allowances[address(this)][address(router)] = swapThreshold;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            swapThreshold,\r\n            0, // accept any amount of dividend token\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = IBEP20(USDC).balanceOf(address(this)).sub(USDCbalanceBefore);\r\n        \r\n        IBEP20(USDC).transfer(ginPledgeAddress, amount);\r\n        GinPledge(ginPledgeAddress).setDividendsPerShare(amount);\r\n    }\r\n\r\n    function launch() public authorized {\r\n        require(launchedAtTimestamp == 0, \"Already launched boi\");\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n\r\n    function setWaitTimestamp(uint256 _waitTimestamp) external authorized {\r\n        waitTimestamp = _waitTimestamp;\r\n    }\r\n\r\n    // function setINTERVAL(uint256 t) external authorized {\r\n    //     INTERVAL = t;\r\n    // }\r\n\r\n    function setTxLimit(uint256 sellAmount) external authorized {\r\n        _maxTxSellAmount = sellAmount;\r\n    }\r\n\r\n    function setMaxHavAmount(uint256 maxHavAmount) external authorized {\r\n        _maxHavAmount = maxHavAmount;\r\n    }\r\n\r\n    function setMinAirDropAmount(uint256 minAirDropAmount) external authorized {\r\n        _minAirDropAmount = minAirDropAmount;\r\n    }\r\n\r\n    function setNftAddress(address _nftAddress) external authorized {\r\n        NFTAddress = _nftAddress;\r\n    }\r\n\r\n    function setNftSwitch(bool _nftSwitch) external authorized {\r\n        nftSwitch = _nftSwitch;\r\n    }\r\n\r\n    function setPair(address _pair) external authorized {\r\n        pair = _pair;\r\n        isHavLimitExempt[pair] = true;\r\n        isDividendExempt[pair] = true;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool txExempt, bool havExempt) external authorized {\r\n        isTxLimitExempt[holder] = txExempt;\r\n        isHavLimitExempt[holder] = havExempt;\r\n    }\r\n\r\n    function setFees(uint256 _buyInviterFee, uint256 _buyMarketFee, uint256 _buyReflectionFee, uint256 _buyTransitionFee, uint256 _sellInviterFee, uint256 _sellMarketFee, uint256 _sellReflectionFee, uint256 _sellTransitionFee, uint256 _feeDenominator, uint256 _feeUnit) external authorized {\r\n        buyInviterFee = _buyInviterFee;\r\n        buyMarketFee = _buyMarketFee;\r\n        buyReflectionFee = _buyReflectionFee;\r\n        buyTransitionFee = _buyTransitionFee;\r\n        sellInviterFee = _sellInviterFee;\r\n        sellMarketFee = _sellMarketFee;\r\n        sellReflectionFee = _sellReflectionFee;\r\n        sellTransitionFee = _sellTransitionFee;\r\n        feeDenominator = _feeDenominator;\r\n        feeUnit = _feeUnit;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function setGinPledgeAddress(address _ginPledgeAddress) external authorized {\r\n        ginPledgeAddress = _ginPledgeAddress;\r\n        isHavLimitExempt[ginPledgeAddress] = true;\r\n        isTxLimitExempt[ginPledgeAddress] = true;\r\n        isDividendExempt[ginPledgeAddress] = true;\r\n        isFeeExempt[ginPledgeAddress] = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Invite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHavAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAirDropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_protectionP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_protectionT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addToInvitExemptList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkDiamondHand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ginPledgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiDiamondHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiRemoveFromDiamondHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeFromInvitExemptList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyInviterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyMarketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTransitionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellInviterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTransitionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeUnit\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ginPledgeAddress\",\"type\":\"address\"}],\"name\":\"setGinPledgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"txExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"havExempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHavAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxHavAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAirDropAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAirDropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_nftSwitch\",\"type\":\"bool\"}],\"name\":\"setNftSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isProtection\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waitTimestamp\",\"type\":\"uint256\"}],\"name\":\"setWaitTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transitionFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZuoZhuang", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://124d65934b58e6f199e61e36ef8013df68dac55145a99c62dba60712cb3ec248"}