{"SourceCode": "pragma solidity ^0.4.26;\r\n\r\n// This is the ETH/ERC20 multisig contract for Ownbit.\r\n//\r\n// For 2-of-3 multisig, to authorize a spend, two signtures must be provided by 2 of the 3 owners.\r\n// To generate the message to be signed, provide the destination address and\r\n// spend amount (in wei) to the generateMessageToSign method.\r\n// The signatures must be provided as the (v, r, s) hex-encoded coordinates.\r\n// The S coordinate must be 0x00 or 0x01 corresponding to 0x1b and 0x1c, respectively.\r\n//\r\n// WARNING: The generated message is only valid until the next spend is executed.\r\n//          after that, a new message will need to be calculated.\r\n//\r\n//\r\n// INFO: This contract is ERC20 compatible.\r\n// This contract can both receive ETH and ERC20 tokens.\r\n// Notice that NFT (ERC721/ERC1155) is not supported. But can be transferred out throught spendAny.\r\n//\r\n// Accident Protection MultiSig, rules:\r\n//\r\n// Participants must keep themselves active by submitting transactions. \r\n// Not submitting any transaction within 12,000,000 ETH(BSC) blocks (roughly 416 days) will be treated as wallet lost (i.e. accident happened), \r\n// other participants can still spend the assets as along as: valid signing count >= Min(mininual required count, active owners).\r\n//\r\n// Last update time: 2021-09-06.\r\n// version for BEP20 (BSC)\r\n// copyright @ ownbit.io\r\n\r\ninterface Erc20 {\r\n  function approve(address, uint256) public;\r\n\r\n  function transfer(address, uint256) public;\r\n    \r\n  //function balanceOf(address) view public returns (uint256);\r\n}\r\n\r\ncontract OwnbitMultiSig {\r\n    \r\n  uint constant public MAX_OWNER_COUNT = 9;\r\n  uint constant public CHAINID = 56; //chainId for BSC\r\n  //uint constant public MAX_INACTIVE_BLOCKNUMBER = 1200; //1200 ETH(BSC) blocks, roughly 1 hour, for testing.\r\n  uint constant public MAX_INACTIVE_BLOCKNUMBER = 12000000; //12,000,000 ETH(BSC) blocks, roughly 416 days.\r\n\r\n  // The N addresses which control the funds in this contract. The\r\n  // owners of M of these addresses will need to both sign a message\r\n  // allowing the funds in this contract to be spent.\r\n  mapping(address => uint256) private ownerBlockMap; //uint256 is the active blockNumber of this owner\r\n  address[] private owners;\r\n  uint private required;\r\n\r\n  // The contract nonce is not accessible to the contract so we\r\n  // implement a nonce-like variable for replay protection.\r\n  uint256 private spendNonce = 0;\r\n  \r\n  // An event sent when funds are received.\r\n  event Funded(address from, uint value);\r\n  \r\n  // An event sent when a spend is triggered to the given address.\r\n  event Spent(address to, uint transfer);\r\n  \r\n  // An event sent when a spendERC20 is triggered to the given address.\r\n  event SpentERC20(address erc20contract, address to, uint transfer);\r\n  \r\n  // An event sent when an spendAny is executed.\r\n  event SpentAny(address to, uint transfer);\r\n\r\n  modifier validRequirement(uint ownerCount, uint _required) {\r\n    require (ownerCount <= MAX_OWNER_COUNT\r\n            && _required <= ownerCount\r\n            && _required >= 1);\r\n    _;\r\n  }\r\n  \r\n  /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n  /// @param _owners List of initial owners.\r\n  /// @param _required Number of required confirmations.\r\n  constructor(address[] _owners, uint _required) public validRequirement(_owners.length, _required) {\r\n    for (uint i = 0; i < _owners.length; i++) {\r\n        //onwer should be distinct, and non-zero\r\n        if (ownerBlockMap[_owners[i]] > 0 || _owners[i] == address(0x0)) {\r\n            revert();\r\n        }\r\n        ownerBlockMap[_owners[i]] = block.number;\r\n    }\r\n    owners = _owners;\r\n    required = _required;\r\n  }\r\n\r\n\r\n  // The fallback function for this contract.\r\n  function() public payable {\r\n    if (msg.value > 0) {\r\n        emit Funded(msg.sender, msg.value);\r\n    }\r\n  }\r\n  \r\n  // @dev Returns list of owners.\r\n  // @return List of owner addresses.\r\n  function getOwners() public view returns (address[]) {\r\n    return owners;\r\n  }\r\n    \r\n  function getSpendNonce() public view returns (uint256) {\r\n    return spendNonce;\r\n  }\r\n    \r\n  function getRequired() public view returns (uint) {\r\n    return required;\r\n  }\r\n  \r\n  //return the active block number of this owner\r\n  function getOwnerBlock(address addr) public view returns (uint) {\r\n    return ownerBlockMap[addr];\r\n  }\r\n\r\n  // Generates the message to sign given the output destination address and amount.\r\n  // includes this contract's address and a nonce for replay protection.\r\n  // One option to independently verify: https://leventozturk.com/engineering/sha3/ and select keccak\r\n  function generateMessageToSign(address erc20Contract, address destination, uint256 value) private view returns (bytes32) {\r\n    //the sequence should match generateMultiSigV2x in JS\r\n    bytes32 message = keccak256(abi.encodePacked(address(this), erc20Contract, destination, value, spendNonce, CHAINID));\r\n    return message;\r\n  }\r\n  \r\n  function _messageToRecover(address erc20Contract, address destination, uint256 value) private view returns (bytes32) {\r\n    bytes32 hashedUnsignedMessage = generateMessageToSign(erc20Contract, destination, value);\r\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    return keccak256(abi.encodePacked(prefix, hashedUnsignedMessage));\r\n  }\r\n  \r\n  // @destination: the ether receiver address.\r\n  // @value: the ether value, in wei.\r\n  // @vs, rs, ss: the signatures\r\n  function spend(address destination, uint256 value, uint8[] vs, bytes32[] rs, bytes32[] ss) external {\r\n    require(destination != address(this), \"Not allow sending to yourself\");\r\n    require(address(this).balance >= value && value > 0, \"balance or spend value invalid\");\r\n    require(_validSignature(address(0x0), destination, value, vs, rs, ss), \"invalid signatures\");\r\n    spendNonce = spendNonce + 1;\r\n    //transfer will throw if fails\r\n    destination.transfer(value);\r\n    emit Spent(destination, value);\r\n  }\r\n  \r\n  // @erc20contract: the erc20 contract address.\r\n  // @destination: the token receiver address.\r\n  // @value: the token value, in token minimum unit.\r\n  // @vs, rs, ss: the signatures\r\n  function spendERC20(address destination, address erc20contract, uint256 value, uint8[] vs, bytes32[] rs, bytes32[] ss) external {\r\n    require(destination != address(this), \"Not allow sending to yourself\");\r\n    //transfer erc20 token\r\n    //uint256 tokenValue = Erc20(erc20contract).balanceOf(address(this));\r\n    require(value > 0, \"Erc20 spend value invalid\");\r\n    require(_validSignature(erc20contract, destination, value, vs, rs, ss), \"invalid signatures\");\r\n    spendNonce = spendNonce + 1;\r\n    // transfer tokens from this contract to the destination address\r\n    Erc20(erc20contract).transfer(destination, value);\r\n    emit SpentERC20(erc20contract, destination, value);\r\n  }\r\n  \r\n  //0x9 is used for spendAny\r\n  //be careful with any action, data is not included into signature computation. So any data can be included in spendAny.\r\n  //This is usually for some emergent recovery, for example, recovery of NTFs, etc.\r\n  //Owners should not generate 0x9 based signatures in normal cases.\r\n  function spendAny(address destination, uint256 value, uint8[] vs, bytes32[] rs, bytes32[] ss, bytes data) external {\r\n    require(destination != address(this), \"Not allow sending to yourself\");\r\n    require(_validSignature(address(0x9), destination, value, vs, rs, ss), \"invalid signatures\");\r\n    spendNonce = spendNonce + 1;\r\n    //transfer tokens from this contract to the destination address\r\n    if (destination.call.value(value)(data)) {\r\n        emit SpentAny(destination, value);\r\n    }\r\n  }\r\n  \r\n  //send a tx from the owner address to active the owner\r\n  //Allow the owner to transfer some ETH, although this is not necessary.\r\n  function active() external payable {\r\n    require(ownerBlockMap[msg.sender] > 0, \"Not an owner\");\r\n    ownerBlockMap[msg.sender] = block.number;\r\n  }\r\n  \r\n  function getRequiredWithoutInactive() public view returns (uint) {\r\n    uint activeOwner = 0;  \r\n    for (uint i = 0; i < owners.length; i++) {\r\n        //if the owner is active\r\n        if (ownerBlockMap[owners[i]] + MAX_INACTIVE_BLOCKNUMBER >= block.number) {\r\n            activeOwner++;\r\n        }\r\n    }\r\n    //active owners still equal or greater then required\r\n    if (activeOwner >= required) {\r\n        return required;\r\n    }\r\n    //active less than required, all active must sign\r\n    if (activeOwner >= 1) {\r\n        return activeOwner;\r\n    }\r\n    //at least needs one signature.\r\n    return 1;\r\n  }\r\n\r\n  // Confirm that the signature triplets (v1, r1, s1) (v2, r2, s2) ...\r\n  // authorize a spend of this contract's funds to the given destination address.\r\n  function _validSignature(address erc20Contract, address destination, uint256 value, uint8[] vs, bytes32[] rs, bytes32[] ss) private returns (bool) {\r\n    require(vs.length == rs.length);\r\n    require(rs.length == ss.length);\r\n    require(vs.length <= owners.length);\r\n    require(vs.length >= getRequiredWithoutInactive());\r\n    bytes32 message = _messageToRecover(erc20Contract, destination, value);\r\n    address[] memory addrs = new address[](vs.length);\r\n    for (uint i = 0; i < vs.length; i++) {\r\n        //recover the address associated with the public key from elliptic curve signature or return zero on error \r\n        addrs[i] = ecrecover(message, vs[i]+27, rs[i], ss[i]);\r\n    }\r\n    require(_distinctOwners(addrs));\r\n    _updateActiveBlockNumber(addrs); //update addrs' active block number\r\n    \r\n    //check again, this is important to prevent inactive owners from stealing the money.\r\n    require(vs.length >= getRequiredWithoutInactive(), \"Active owners updated after the call, please call active() before calling spend.\");\r\n    \r\n    return true;\r\n  }\r\n  \r\n  // Confirm the addresses as distinct owners of this contract.\r\n  function _distinctOwners(address[] addrs) private view returns (bool) {\r\n    if (addrs.length > owners.length) {\r\n        return false;\r\n    }\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n        //> 0 means one of the owner\r\n        if (ownerBlockMap[addrs[i]] == 0) {\r\n            return false;\r\n        }\r\n        //address should be distinct\r\n        for (uint j = 0; j < i; j++) {\r\n            if (addrs[i] == addrs[j]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  //update the active block number for those owners\r\n  function _updateActiveBlockNumber(address[] addrs) private {\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n        //only update block number for owners\r\n        if (ownerBlockMap[addrs[i]] > 0) {\r\n            ownerBlockMap[addrs[i]] = block.number;\r\n        }\r\n    }\r\n  }\r\n  \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"erc20contract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"spendERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"active\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INACTIVE_BLOCKNUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getOwnerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"spend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"spendAny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpendNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHAINID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequiredWithoutInactive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transfer\",\"type\":\"uint256\"}],\"name\":\"Spent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"erc20contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transfer\",\"type\":\"uint256\"}],\"name\":\"SpentERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transfer\",\"type\":\"uint256\"}],\"name\":\"SpentAny\",\"type\":\"event\"}]", "ContractName": "OwnbitMultiSig", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000300000000000000000000000022c53cb583febf43ded7a1761beca1db2f40b65000000000000000000000000030e7e496285473958fcccba8b36977012145b2320000000000000000000000006b3d40047887fd74c0611622f12b5fe212e7cfbe", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4a474ba5f122b62d6cd613fc4831c9103f363ec6fba71e47d01144e53544bc47"}