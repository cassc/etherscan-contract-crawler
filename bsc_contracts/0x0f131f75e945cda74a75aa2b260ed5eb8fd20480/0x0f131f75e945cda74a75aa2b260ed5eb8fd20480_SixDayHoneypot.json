{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface AntiSnipe {\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function setProtections(bool _as, bool _ag, bool _ab, bool _algo) external;\r\n    function setGasPriceLimit(uint256 gas) external;\r\n    function removeSniper(address account) external;\r\n    function getSniperAmt() external view returns (uint256);\r\n    function removeBlacklisted(address account) external;\r\n    function isBlacklisted(address account) external view returns (bool);\r\n    function addToBlacklist(address account) external;\r\n    function getDayOfWeek(uint256 stamp) external view  returns (uint256);\r\n    function getHourOfDay(uint256 stamp) external view returns (uint256);\r\n}\r\n\r\ninterface Cashier {\r\n    function whomst() external view returns(address);\r\n    function setReflectionCriteria(uint256 _minPeriod, uint256 _minReflection) external;\r\n    function tally(address shareholder, uint256 amount) external;\r\n    function load() external payable;\r\n    function cashout(uint256 gas) external;\r\n    function giveMeWelfarePlease(address hobo) external;\r\n    function getTotalDistributed() external view returns(uint256);\r\n    function getShareholderInfo(address shareholder) external view returns(string memory, string memory, string memory, string memory);\r\n    function getShareholderRealized(address shareholder) external view returns (uint256);\r\n    function getPendingRewards(address shareholder) external view returns (uint256);\r\n    function initialize() external;\r\n}\r\n\r\ncontract SixDayHoneypot is IERC20 {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) _isFeeExcluded;\r\n    mapping (address => bool) _isDividendExcluded;\r\n\r\n    mapping (address => bool) private presaleAddresses;\r\n    bool private allowedPresaleExclusion = true;\r\n    mapping (address => bool) private _liquidityHolders;\r\n\r\n    uint256 private startingSupply = 100_000_000;\r\n\r\n    string constant private _name = \"6DayHoneypot\";\r\n    string constant private _symbol = \"Honey\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 private _tTotal = startingSupply * (10 ** _decimals);\r\n\r\n    struct Fees {\r\n        uint16 buyFee;\r\n        uint16 sellFee;\r\n        uint16 transferFee;\r\n    }\r\n\r\n    struct StaticValuesStruct {\r\n        uint16 maxBuyTaxes;\r\n        uint16 maxSellTaxes;\r\n        uint16 maxTransferTaxes;\r\n        uint16 masterTaxDivisor;\r\n    }\r\n\r\n    struct Ratios {\r\n        uint16 rewards;\r\n        uint16 marketing;\r\n        uint16 buyback;\r\n        uint16 total;\r\n    }\r\n\r\n    Fees public _taxRates = Fees({\r\n        buyFee: 1200,\r\n        sellFee: 1200,\r\n        transferFee: 3600\r\n        });\r\n\r\n    Ratios public _ratios = Ratios({\r\n        rewards: 6,\r\n        marketing: 2,\r\n        buyback: 4,\r\n        total: 12\r\n        });\r\n\r\n    StaticValuesStruct public staticVals = StaticValuesStruct({\r\n        maxBuyTaxes: 2500,\r\n        maxSellTaxes: 2500,\r\n        maxTransferTaxes: 2500,\r\n        masterTaxDivisor: 10000\r\n        });\r\n\r\n    IRouter02 public dexRouter;\r\n    address public lpPair;\r\n\r\n\r\n    address public currentRouter;\r\n    // PCS ROUTER\r\n    address private pcsV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    // UNI ROUTER\r\n    address private uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    // BUSD MAINNET TOKEN CONTRACT ADDRESS\r\n    address public BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n\r\n    address private WBNB;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address payable public _marketingWallet = payable(0xAd918d2f9881a3863Ea25eAa17a1A939A405fD29);\r\n    address payable public _buybackWallet = payable(0x60294C889964747922Ba0591647A093634960125);\r\n\r\n    uint256 private maxTPercent = 5;\r\n    uint256 private maxTDivisor = 1000;\r\n\r\n    uint256 private _maxTxAmount = (_tTotal * maxTPercent) / maxTDivisor;\r\n    uint256 public maxTxAmountUI = (startingSupply * maxTPercent) / maxTDivisor;\r\n\r\n    Cashier reflector;\r\n    uint256 reflectorGas = 500000;\r\n\r\n    bool public contractSwapEnabled = false;\r\n    bool public processReflect = false;\r\n    uint256 private swapThreshold = _tTotal / 20000;\r\n    uint256 private swapAmount = _tTotal * 5 / 1000;\r\n    bool inSwap;\r\n    bool init = false;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    AntiSnipe antiSnipe;\r\n\r\n    bool public sellLimitsEnabled = true;\r\n    mapping (address => uint256) private firstBuy;\r\n    mapping (address => uint256) private amountSold;\r\n    mapping (address => uint256) private sellLimit;\r\n    mapping (address => uint256) private firstSell;\r\n    uint256 public sellLimitPercent = 20;\r\n    uint256 public sellLimitDivisor = 100;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event AutoLiquify(uint256 amountBNB, uint256 amount);\r\n    event SniperCaught(address sniperAddress);\r\n\r\n    constructor () payable {\r\n        address msgSender = msg.sender;\r\n        _tOwned[msgSender] = _tTotal;\r\n\r\n        _owner = msgSender;\r\n\r\n        if (block.chainid == 56 || block.chainid == 97) {\r\n            currentRouter = pcsV2Router;\r\n        } else if (block.chainid == 1) {\r\n            currentRouter = uniswapV2Router;\r\n        }\r\n\r\n        dexRouter = IRouter02(currentRouter);\r\n        lpPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n        _approve(msg.sender, currentRouter, type(uint256).max);\r\n        _approve(address(this), currentRouter, type(uint256).max);\r\n\r\n        WBNB = dexRouter.WETH();\r\n\r\n        _isFeeExcluded[owner()] = true;\r\n        _isFeeExcluded[address(this)] = true;\r\n        _isDividendExcluded[owner()] = true;\r\n        _isDividendExcluded[lpPair] = true;\r\n        _isDividendExcluded[address(this)] = true;\r\n        _isDividendExcluded[DEAD] = true;\r\n        _isDividendExcluded[ZERO] = true;\r\n\r\n        emit Transfer(ZERO, msg.sender, _tTotal);\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and renouncements.\r\n    // This allows for removal of ownership privileges from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        _isFeeExcluded[_owner] = false;\r\n        _isDividendExcluded[_owner] = false;\r\n        _isFeeExcluded[newOwner] = true;\r\n        _isDividendExcluded[newOwner] = true;\r\n        \r\n        if(_tOwned[_owner] > 0) {\r\n            _transfer(_owner, newOwner, _tOwned[_owner]);\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _isFeeExcluded[_owner] = false;\r\n        _isDividendExcluded[_owner] = false;\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _tOwned[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveContractContingency() public onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function changeRouterContingency(address router) external onlyOwner {\r\n        require(!_hasLiqBeenAdded);\r\n        currentRouter = router;\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return antiSnipe.isBlacklisted(account);\r\n    }\r\n\r\n    function isFeeExcluded(address account) public view returns(bool) {\r\n        return _isFeeExcluded[account];\r\n    }\r\n\r\n    function isDividendExcluded(address account) public view returns(bool) {\r\n        return _isDividendExcluded[account];\r\n    }\r\n\r\n    function setInitializers(address aInitializer, address cInitializer) external onlyOwner {\r\n        require(cInitializer != address(this) && aInitializer != address(this) && cInitializer != aInitializer);\r\n        reflector = Cashier(cInitializer);\r\n        antiSnipe = AntiSnipe(aInitializer);\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner() {\r\n        antiSnipe.removeSniper(account);\r\n    }\r\n\r\n    function removeBlacklisted(address account) external onlyOwner() {\r\n        antiSnipe.removeBlacklisted(account);\r\n    }\r\n\r\n    function getSniperAmt() public view returns (uint256) {\r\n        return antiSnipe.getSniperAmt();\r\n    }\r\n\r\n    function setProtectionSettings(bool _antiSnipe, bool _antiGas, bool _antiBlock, bool _antiSpecial) external onlyOwner() {\r\n        antiSnipe.setProtections(_antiSnipe, _antiGas, _antiBlock, _antiSpecial);\r\n    }\r\n\r\n    function setGasPriceLimit(uint256 gas) external onlyOwner {\r\n        require(gas >= 75, \"Too low.\");\r\n        antiSnipe.setGasPriceLimit(gas);\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        if(address(antiSnipe) == address(0)){\r\n            antiSnipe = AntiSnipe(address(this));\r\n        }\r\n        try antiSnipe.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function setDividendExcluded(address holder, bool enabled) public onlyOwner {\r\n        require(holder != address(this) && holder != lpPair);\r\n        _isDividendExcluded[holder] = enabled;\r\n        if (enabled) {\r\n            reflector.tally(holder, 0);\r\n        } else {\r\n            reflector.tally(holder, _tOwned[holder]);\r\n        }\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isFeeExcluded[account] = enabled;\r\n    }\r\n\r\n    function setTaxes(uint16 buyFee, uint16 sellFee, uint16 transferFee) external onlyOwner {\r\n        require(buyFee <= staticVals.maxBuyTaxes\r\n                && sellFee <= staticVals.maxSellTaxes\r\n                && transferFee <= staticVals.maxTransferTaxes);\r\n        _taxRates.buyFee = buyFee;\r\n        _taxRates.sellFee = sellFee;\r\n        _taxRates.transferFee = transferFee;\r\n    }\r\n\r\n    function setRatios(uint16 rewards, uint16 buyback, uint16 marketing) external onlyOwner {\r\n        _ratios.rewards = rewards;\r\n        _ratios.buyback = buyback;\r\n        _ratios.marketing = marketing;\r\n        _ratios.total = rewards + buyback + marketing;\r\n    }\r\n\r\n    function setWallets(address payable marketing, address payable buyback) external onlyOwner {\r\n        _marketingWallet = payable(marketing);\r\n        _buybackWallet = payable(buyback);\r\n    }\r\n\r\n    function setContractSwapSettings(bool _enabled, bool processReflectEnabled) external onlyOwner {\r\n        contractSwapEnabled = _enabled;\r\n        processReflect = processReflectEnabled;\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n    }\r\n\r\n    function setReflectionCriteria(uint256 _minPeriod, uint256 _minReflection, uint256 minReflectionMultiplier) external onlyOwner {\r\n        _minReflection = _minReflection * 10**minReflectionMultiplier;\r\n        reflector.setReflectionCriteria(_minPeriod, _minReflection);\r\n    }\r\n\r\n    function setReflectorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        reflectorGas = gas;\r\n    }\r\n\r\n    function giveMeWelfarePlease() external {\r\n        reflector.giveMeWelfarePlease(msg.sender);\r\n    }\r\n\r\n    function getTotalReflected() external view returns (uint256) {\r\n        return reflector.getTotalDistributed();\r\n    }\r\n\r\n    function getUserInfo(address shareholder) external view returns (string memory, string memory, string memory, string memory) {\r\n        return reflector.getShareholderInfo(shareholder);\r\n    }\r\n\r\n    function getUserRealizedGains(address shareholder) external view returns (uint256) {\r\n        return reflector.getShareholderRealized(shareholder);\r\n    }\r\n\r\n    function getUserUnpaidEarnings(address shareholder) external view returns (uint256) {\r\n        return reflector.getPendingRewards(shareholder);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner() {\r\n        IRouter02 _newRouter = IRouter02(newRouter);\r\n        address get_pair = IFactoryV2(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IFactoryV2(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n            antiSnipe.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"Cannot set a new pair this week!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            antiSnipe.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) public onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.01% of total supply.\");\r\n        _maxTxAmount = check;\r\n        maxTxAmountUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function setSellLimits(uint256 percent, uint256 divisor) external onlyOwner {\r\n        require((_tTotal * percent) / divisor >= (_tTotal * 20) / 100);\r\n        sellLimitPercent = percent;\r\n        sellLimitDivisor = divisor;\r\n    }\r\n\r\n    function setSellLimitsEnabled(bool enabled) external onlyOwner {\r\n        sellLimitsEnabled = enabled;\r\n    }\r\n\r\n    function excludePresaleAddresses(address router, address presale) public onlyOwner {\r\n        require(allowedPresaleExclusion, \"Function already used.\");\r\n        if (router == presale) {\r\n            _liquidityHolders[presale] = true;\r\n            presaleAddresses[presale] = true;\r\n            setExcludedFromFees(presale, true);\r\n            setDividendExcluded(presale, true);\r\n        } else {\r\n            _liquidityHolders[router] = true;\r\n            _liquidityHolders[presale] = true;\r\n            presaleAddresses[router] = true;\r\n            presaleAddresses[presale] = true;\r\n            setExcludedFromFees(router, true);\r\n            setExcludedFromFees(presale, true);\r\n            setDividendExcluded(router, true);\r\n            setDividendExcluded(presale, true);\r\n        }\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee = true;\r\n\r\n        if(_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n\r\n            if(lpPairs[from] || lpPairs[to]){\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n            if(sellLimitsEnabled) {\r\n                if(lpPairs[to]) {\r\n                    if(block.timestamp < firstBuy[from] + 60 days) {\r\n                        if(block.timestamp > firstSell[from] + 24 hours) {\r\n                            amountSold[from] = 0;\r\n                            firstSell[from] = block.timestamp;\r\n                            sellLimit[from] = (sellLimitPercent * _tOwned[from]) / sellLimitDivisor;\r\n                        }\r\n                        require(amountSold[from] + amount <= sellLimit[from]);\r\n                        amountSold[from] += amount;\r\n                    } else {\r\n                        if (firstBuy[from] != 0) {\r\n                            takeFee == false;\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n        }\r\n\r\n        if(lpPairs[to] && !presaleAddresses[from]) {\r\n            if(\r\n               ((antiSnipe.getDayOfWeek(block.timestamp) == 0 \r\n                 && antiSnipe.getHourOfDay(block.timestamp) > 14) \r\n            || (antiSnipe.getDayOfWeek(block.timestamp) == 1 \r\n                && antiSnipe.getHourOfDay(block.timestamp) < 5)) \r\n               == false) {\r\n                revert(\"Selling is only enabled Sunday 15 UTC to Monday 5 UTC.\");\r\n            }\r\n        }\r\n\r\n        if(lpPairs[from] && firstBuy[to] == 0) {\r\n            firstBuy[to] = block.timestamp;\r\n        }\r\n        \r\n        if(_isFeeExcluded[from] || _isFeeExcluded[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        return _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _finalizeTransfer(address from, address to, uint256 amount, bool takeFee) internal returns (bool) {\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                revert(\"Only owner can transfer at this time.\");\r\n            }\r\n        }\r\n\r\n        if(_hasLimits(from, to)) {\r\n            bool checked;\r\n            try antiSnipe.checkUser(from, to, amount) returns (bool check) {\r\n                checked = check;\r\n            } catch {\r\n                revert();\r\n            }\r\n\r\n            if(!checked) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        _tOwned[from] -= amount;\r\n        if (_hasLimits(from, to) && _tOwned[from] == 0) {\r\n            antiSnipe.addToBlacklist(from);\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        uint256 contractTokenBalance = _tOwned[address(this)];\r\n        if(contractTokenBalance >= swapAmount)\r\n            contractTokenBalance = swapAmount;\r\n\r\n        if (!inSwap\r\n            && !lpPairs[from]\r\n            && contractSwapEnabled\r\n            && contractTokenBalance >= swapThreshold\r\n            && !presaleAddresses[from]\r\n            && !presaleAddresses[to]\r\n        ) {\r\n            contractSwap(contractTokenBalance);\r\n        }\r\n\r\n        uint256 amountReceived = amount;\r\n\r\n        if (takeFee) {\r\n            amountReceived = takeTaxes(from, to, amount);\r\n        }\r\n\r\n        _tOwned[to] += amountReceived;\r\n\r\n        processTokenReflect(from, to);\r\n\r\n        emit Transfer(from, to, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function processTokenReflect(address from, address to) internal {\r\n        if (!_isDividendExcluded[from]) {\r\n            try reflector.tally(from, _tOwned[from]) {} catch {}\r\n        }\r\n        if (!_isDividendExcluded[to]) {\r\n            try reflector.tally(to, _tOwned[to]) {} catch {}\r\n        }\r\n        if (processReflect) {\r\n            try reflector.cashout(reflectorGas) {} catch {}\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _tOwned[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeTaxes(address from, address to, uint256 amount) internal returns (uint256) {\r\n        uint256 currentFee;\r\n        if (from == lpPair) {\r\n            currentFee = _taxRates.buyFee;\r\n        } else if (to == lpPair) {\r\n            currentFee = _taxRates.sellFee;\r\n        } else {\r\n            currentFee = _taxRates.transferFee;\r\n        }\r\n\r\n        if (currentFee == 0) {\r\n            return amount;\r\n        }\r\n\r\n        uint256 feeAmount = amount * currentFee / staticVals.masterTaxDivisor;\r\n\r\n        _tOwned[address(this)] += feeAmount;\r\n        emit Transfer(from, address(this), feeAmount);\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function contractSwap(uint256 numTokensToSwap) internal swapping {\r\n        if (_ratios.total == 0) {\r\n            return;\r\n        }\r\n        \r\n        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            numTokensToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance;\r\n\r\n        try reflector.load{value: (amountBNB * _ratios.rewards) / _ratios.total}() {} catch {}\r\n\r\n        if(address(this).balance > 0){\r\n            _buybackWallet.transfer((amountBNB * _ratios.buyback) / _ratios.total);\r\n            _marketingWallet.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function manualDepost() external onlyOwner {\r\n        try reflector.load{value: address(this).balance}() {} catch {}\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            if(address(antiSnipe) == address(0)) {\r\n                antiSnipe = AntiSnipe(address(this));\r\n            }\r\n            if(address(reflector) ==  address(0)) {\r\n                reflector = Cashier(address(this));\r\n            }\r\n            try reflector.initialize() {} catch {}\r\n            contractSwapEnabled = true;\r\n            allowedPresaleExclusion = false;\r\n            processReflect = true;\r\n            emit ContractSwapEnabledUpdated(true);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rewards\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyback\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouterContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"excludePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSniperAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUserRealizedGains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUserUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveMeWelfarePlease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDividendExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDepost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processReflect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"processReflectEnabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDividendExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aInitializer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cInitializer\",\"type\":\"address\"}],\"name\":\"setInitializers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiGas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiBlock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiSpecial\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rewards\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyback\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReflectionMultiplier\",\"type\":\"uint256\"}],\"name\":\"setReflectionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setReflectorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setSellLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSellLimitsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyback\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticVals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"maxBuyTaxes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSellTaxes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTransferTaxes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"masterTaxDivisor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SixDayHoneypot", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f3bba593567395843a46405b13d253eda2c6930ae2b328c0a3e7e995598afbc"}