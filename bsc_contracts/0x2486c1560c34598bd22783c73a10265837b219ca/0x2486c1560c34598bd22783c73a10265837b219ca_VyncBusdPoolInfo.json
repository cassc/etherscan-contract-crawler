{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/busdinfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface SetDataInterface {\\r\\n    function totalStake() external view returns (uint256);\\r\\n\\r\\n    function totalUnstake() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract VyncBusdPoolInfo is Ownable {\\r\\n    SetDataInterface data;\\r\\n    address public VyncBusd;\\r\\n\\r\\n    uint256 s; // total staking\\r\\n    uint256 u; // total unstaking\\r\\n    uint256 b; // available Staking\\r\\n    uint256 pl = 1000000; // yearly interst;\\r\\n    bool r_ed = false; // r enable disable\\r\\n    uint256 r; // extra apr basesd on yearly interst\\r\\n    uint256 apr = 1 * 1e18; //daily apr\\r\\n    uint256 a; // total apr: r+apr;\\r\\n    uint256 compoundRate = 86400; // compound rate in seconds\\r\\n    uint256 up = 50; // unstake percentage\\r\\n    uint256 maxStakePerTx = 5000 * 1e18; // in 18 decimal\\r\\n    uint256 maxUnstakePerTx = 5000 * 1e18;\\r\\n    uint256 totalStakePerUser = 20000 * 1e18;\\r\\n    uint256 public price; // in 18 decimal\\r\\n    address public priceSetAddress;\\r\\n    uint256 public slippage = 3; //can be modify using set_slippage() function(between 1-90%)\\r\\n    uint256 aprChangeTimestamp;\\r\\n    uint256 aprChangePercentage;\\r\\n    bool aprIncrease;\\r\\n\\r\\n    function poolInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _s,\\r\\n            uint256 _u,\\r\\n            uint256 _b,\\r\\n            uint256 _pl,\\r\\n            bool _r_ed,\\r\\n            uint256 _r,\\r\\n            uint256 _apr,\\r\\n            uint256 _a,\\r\\n            uint256 _compoundRate,\\r\\n            uint256 _up\\r\\n        )\\r\\n    {\\r\\n        (_s, , ) = set_sub();\\r\\n        (, _u, ) = set_sub();\\r\\n        (, , _b) = set_sub();\\r\\n        _pl = pl;\\r\\n        _r_ed = r_ed;\\r\\n        _r = set_r();\\r\\n        _apr = apr;\\r\\n        _a = set_a();\\r\\n        _compoundRate = compoundRate;\\r\\n        _up = up;\\r\\n    }\\r\\n\\r\\n    function returnData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _a,\\r\\n            uint256 _compoundRate,\\r\\n            uint256 _up\\r\\n        )\\r\\n    {\\r\\n        _a = set_a();\\r\\n        _compoundRate = compoundRate;\\r\\n        _up = up;\\r\\n    }\\r\\n\\r\\n    function returnAprData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _aprChangeTimestamp,\\r\\n            uint256 _aprChangePercentage,\\r\\n            bool _aprIncrease\\r\\n        )\\r\\n    {\\r\\n        _aprChangeTimestamp = aprChangeTimestamp;\\r\\n        _aprChangePercentage = aprChangePercentage;\\r\\n        _aprIncrease = aprIncrease;\\r\\n    }\\r\\n\\r\\n    function returnMaxStakeUnstakePrice()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _maxStakePerTx,\\r\\n            uint256 _maxUnstakePerTx,\\r\\n            uint256 _totalStakePerUser,\\r\\n            uint256 _price\\r\\n        )\\r\\n    {\\r\\n        _maxStakePerTx = maxStakePerTx;\\r\\n        _maxUnstakePerTx = maxUnstakePerTx;\\r\\n        _totalStakePerUser = totalStakePerUser;\\r\\n        _price= price;\\r\\n    }\\r\\n\\r\\n    function set_VyncBusd(address _VyncBusd) public onlyOwner {\\r\\n        VyncBusd = _VyncBusd;\\r\\n        data = SetDataInterface(_VyncBusd);\\r\\n    }\\r\\n\\r\\n    // set staking,unstaking, available staking\\r\\n    function set_sub()\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _s,\\r\\n            uint256 _u,\\r\\n            uint256 _b\\r\\n        )\\r\\n    {\\r\\n        _s = data.totalStake();\\r\\n        _u = data.totalUnstake();\\r\\n        _b = _s - _u;\\r\\n    }\\r\\n\\r\\n    //set pl\\r\\n    function set_pl(uint256 _pl) public onlyOwner {\\r\\n        pl = _pl;\\r\\n    }\\r\\n\\r\\n    //set r_ed\\r\\n    function set_r_ed(bool _r_ed) public onlyOwner {\\r\\n        r_ed = _r_ed;\\r\\n    }\\r\\n\\r\\n    //set r\\r\\n    function set_r() private view returns (uint256 _r) {\\r\\n        uint256 _b = data.totalStake() - data.totalUnstake();\\r\\n        if (r_ed == true) {\\r\\n            uint256 _pl = pl;\\r\\n            _r = _b / _pl;\\r\\n        }\\r\\n        if (r_ed == false) {\\r\\n            _r = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //set apr\\r\\n    function set_apr(uint256 newApr) public onlyOwner {\\r\\n        aprIncrease = apr>newApr? false:true;\\r\\n        uint256 diff= apr>newApr ? (apr-newApr): (newApr - apr);\\r\\n        aprChangePercentage = (diff*100)/ apr;\\r\\n\\r\\n        apr = newApr;\\r\\n        aprChangeTimestamp=block.timestamp;\\r\\n    }\\r\\n\\r\\n    //set a\\r\\n    function set_a() private view returns (uint256 _a) {\\r\\n        uint256 _r = set_r();\\r\\n        _a = apr + _r;\\r\\n    }\\r\\n\\r\\n    //set compound rate\\r\\n    function setCompoundRate(uint256 _compoundRate) public onlyOwner {\\r\\n        compoundRate = _compoundRate;\\r\\n    }\\r\\n\\r\\n    //set up\\r\\n    function set_up(uint256 _up) public onlyOwner {\\r\\n        require(\\r\\n            _up >= 0 && _up <= 100,\\r\\n            \\\"invalid percentage, input between 0 to 100\\\"\\r\\n        );\\r\\n        up = _up;\\r\\n    }\\r\\n\\r\\n    function set_maxStakePerTx(uint256 _amount) public onlyOwner {\\r\\n        maxStakePerTx = _amount;\\r\\n    }\\r\\n\\r\\n    function set_maxUnstakePerTx(uint256 _amount) public onlyOwner {\\r\\n        maxUnstakePerTx = _amount;\\r\\n    }\\r\\n\\r\\n    function set_totalStakePerUser(uint256 _amount) public onlyOwner {\\r\\n        totalStakePerUser = _amount;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 _price) public {\\r\\n        require(\\r\\n            msg.sender == priceSetAddress,\\r\\n            \\\"only priceSetAddress can change price\\\"\\r\\n        );\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function changePriceSetAddress(address _address) public onlyOwner {\\r\\n        require(\\r\\n            _address != address(0),\\r\\n            \\\"can not set zero address for price set address\\\"\\r\\n        );\\r\\n        priceSetAddress = _address;\\r\\n    }\\r\\n\\r\\n   function set_slippage(uint256 _slippage) public onlyOwner {\\r\\n        require(_slippage > 0 && _slippage <= 90, \\\"invalid slippage range\\\");\\r\\n        slippage = _slippage;\\r\\n    }\\r\\n\\r\\n    function swapAmountCalculation(uint256 _amount) external view returns(uint256 amount){\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VyncBusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changePriceSetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_u\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pl\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_r_ed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_up\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnAprData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_aprChangeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aprChangePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_aprIncrease\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_up\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnMaxStakeUnstakePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStakePerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUnstakePerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakePerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundRate\",\"type\":\"uint256\"}],\"name\":\"setCompoundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VyncBusd\",\"type\":\"address\"}],\"name\":\"set_VyncBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newApr\",\"type\":\"uint256\"}],\"name\":\"set_apr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_maxStakePerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_maxUnstakePerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pl\",\"type\":\"uint256\"}],\"name\":\"set_pl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_r_ed\",\"type\":\"bool\"}],\"name\":\"set_r_ed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"set_slippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_totalStakePerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_up\",\"type\":\"uint256\"}],\"name\":\"set_up\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapAmountCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VyncBusdPoolInfo", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}