{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniSwapV2 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(    \r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() { _transferOwnership(_msgSender()); }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ICOMultiround is Ownable {\r\n\r\n    IUniSwapV2 public router;\r\n    \r\n    IBEP20 public usdt;\r\n\r\n    address constant zero = address(0);\r\n    address constant dead = address(0xdead);\r\n\r\n    struct ICORound {\r\n        uint256 tokenAllowcate;\r\n        uint256 hardcap;\r\n        uint256 totalRised;\r\n        address[] participant;\r\n        bool actived;\r\n    }\r\n\r\n    address[] splitWallet =[\r\n        0x6934174F2b1D3a9b43a7a82611cc7b70834B3Fdb,\r\n        0x1DfeFd11cfe5385C685026D6FbfBb0d3dE0fB19b\r\n    ];\r\n\r\n    uint256[] splitValue =[\r\n        600,\r\n        400\r\n    ];\r\n\r\n    uint256 denominator = 1000;\r\n\r\n    mapping(uint256 => ICORound) round;\r\n    mapping(address => mapping(uint256 => bool)) public contributed;\r\n    mapping(address => mapping(uint256 => uint256)) public balance;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"This Contract Protected By noReentrant!\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IUniSwapV2(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdt = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n        usdt.approve(address(router),type(uint256).max);\r\n    }\r\n\r\n    function buyICOETH(uint256 id,uint256 amount) public payable noReentrant() returns (bool) {\r\n        uint256 amountETH = getETHRequire(amount);\r\n        require(msg.value>=amountETH,\"Revert: need more fund!\");\r\n        require(round[id].totalRised + amount <= round[id].hardcap,\"Revert: hardcap was limit!\");\r\n        require(round[id].actived,\"Revert: this round not actived!\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(usdt);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: msg.value }(    \r\n            amount,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        innerBuyICO(msg.sender,id,amount);\r\n        return true;\r\n    }\r\n\r\n    function buyICO(uint256 id,uint256 amount) public returns (bool) {\r\n        require(round[id].totalRised + amount <= round[id].hardcap,\"Revert: hardcap was limit!\");\r\n        require(round[id].actived,\"Revert: this round not actived!\");\r\n        usdt.transferFrom(msg.sender,address(this),amount);\r\n        innerBuyICO(msg.sender,id,amount);\r\n        return true;\r\n    }\r\n\r\n    function innerBuyICO(address account,uint256 id,uint256 amount) internal {\r\n        if(!contributed[account][id]){\r\n            contributed[account][id] = true;\r\n            round[id].participant.push(account);\r\n        }\r\n        balance[account][id] += amount;\r\n        round[id].totalRised += amount;\r\n        split();\r\n    }\r\n\r\n    function getRound(uint256 id) public view returns (ICORound memory) {\r\n        return round[id];\r\n    }\r\n\r\n    function getSplitData() public view returns (address[] memory,uint256[] memory,uint256) {\r\n        return (splitWallet,splitValue,denominator);\r\n    }\r\n\r\n    function updateSplit(address[] memory accounts,uint256[] memory value,uint256 deno) public onlyOwner returns (bool) {\r\n        splitWallet = accounts;\r\n        splitValue = value;\r\n        denominator = deno;\r\n        return true;\r\n    }\r\n\r\n    function updateRouter(address newRouter) public onlyOwner returns (bool) {\r\n        router = IUniSwapV2(newRouter);\r\n        return true;\r\n    }\r\n\r\n    function updateDepositToken(address newToken) public onlyOwner returns (bool) {\r\n        usdt = IBEP20(newToken);\r\n        usdt.approve(address(router),type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function toggleRound(uint256 id,bool flag) public onlyOwner returns (bool) {\r\n        round[id].actived = flag;\r\n        return true;\r\n    }\r\n\r\n    function settingICORound(uint256 id,uint256[] memory data) public onlyOwner returns (bool) {\r\n        round[id].tokenAllowcate = data[0];\r\n        round[id].hardcap = data[1];\r\n        return true;\r\n    }\r\n\r\n    function split() internal {\r\n        if(splitWallet.length>0){\r\n            uint256 amount = usdt.balanceOf(address(this));\r\n            for(uint256 i=0; i < splitWallet.length; i++){\r\n                usdt.transfer(splitWallet[i],amount * splitValue[i] / denominator);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getETHRequire(uint256 usdtAmount) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(usdt);\r\n        uint[] memory getAmountsIn = router.getAmountsIn(usdtAmount,path);\r\n        return getAmountsIn[0];\r\n    }\r\n\r\n    function functionCall(address to,bytes memory data) public onlyOwner returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call(data);\r\n        require(success,\"Revert: fc failed!\");\r\n        return result;\r\n    }\r\n\r\n    function functionCallWithValue(address to,bytes memory data,uint256 amount) public onlyOwner returns (bytes memory) {\r\n        (bool success,bytes memory result) = to.call{ value: amount }(data);\r\n        require(success,\"Revert: fcwv faild!\");\r\n        return result;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyICO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyICOETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"functionCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"functionCallWithValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getETHRequire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowcate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRised\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"actived\",\"type\":\"bool\"}],\"internalType\":\"struct ICOMultiround.ICORound\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplitData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniSwapV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"settingICORound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"toggleRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"updateDepositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"name\":\"updateSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ICOMultiround", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e9f269531ca4206da514e03e8c53d36f99df623c6420924912555b19cdf82a29"}