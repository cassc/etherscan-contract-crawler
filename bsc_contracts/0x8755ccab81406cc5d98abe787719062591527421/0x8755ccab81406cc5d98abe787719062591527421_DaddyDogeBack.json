{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * Standard SafeMath, stripped down to just add/sub/mul/div\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IPair {\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address private _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IBEP20 private DOGE = IBEP20(0xbA2aE424d960c26247Dd6c32edC70B295c744C43); // mainnet DOGE token\r\n    //IBEP20 private DOGE = IBEP20(0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7); // testnet BUSD token\r\n    \r\n    IDEXRouter private router;\r\n\r\n    address[] private shareholders;\r\n    mapping (address => uint256) private shareholderIndexes;\r\n    mapping (address => uint256) private shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n\r\n    uint256 private currentIndex;\r\n\r\n    bool private initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = DOGE.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(DOGE);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = DOGE.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            DOGE.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract DaddyDogeBack is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address private DOGE = 0xbA2aE424d960c26247Dd6c32edC70B295c744C43; // mainnet DOGE token\r\n    // address private DOGE = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; // testnet BUSD token\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"Daddy Dogeback\";\r\n    string constant _symbol = \"DADDYDB\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 private _totalSupply = 10000000000000 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private isFeeExempt;\r\n    mapping (address => bool) private isDividendExempt;\r\n    mapping (address => bool) private liquidityHolders;\r\n    mapping (address => bool) private automatedMarketMakerPairs;\r\n\r\n    uint256 private dividendShare = 1500;\r\n    uint256 private marketingShare = 300;\r\n    uint256 private partnerShare = 100;\r\n    uint256 private teamShare = 300;\r\n    uint256 private liquidityShare = 200;\r\n    uint256 private buybackShare = 200;\r\n    uint256 private totalShare = 2600;\r\n    \r\n    uint256 private denominator = 10000;\r\n    \r\n    uint256 private transactionTaxUpdateDivsor = 20;\r\n    \r\n    uint256 public baseTax = 800;\r\n    uint256 public dynamicTaxStep = 5;\r\n    \r\n    uint256 public buyTax;\r\n    uint256 public buyTaxFloor = 400;\r\n    bool public dynamicBuyTaxEnabled = false;\r\n    \r\n    uint256 public sellTax;\r\n    uint256 public sellTaxCeiling = 3000;\r\n    bool public dynamicSellTaxEnabled = true;\r\n    \r\n    bool public goldenHour;\r\n    uint256 public goldenHourStartTimestamp;\r\n\r\n    address public marketingReceiver = 0x0A01339F9634D3182780D7279c6AE8A182C43224;\r\n    address public teamReceiver = 0x1C4F207BD5A30eceD04f090D4a96Cf4eFA2AbF36;\r\n    address public partnerReceiver = 0xB040B94050A3A07a714b94a02FCF2c7293d226a5;\r\n\r\n    uint256 public targetLiquidity = 25;\r\n    uint256 public targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address public pcsPair;\r\n\r\n    uint256 public launchedAt;\r\n\r\n    bool public autoBuybackEnabled = true;\r\n    uint256 public autoBuybackAccumulator;\r\n    uint256 public autoBuybackAmount = 1 * (10 ** _decimals);\r\n    uint256 public autoBuybackBlockPeriod;\r\n    uint256 public autoBuybackBlockLast;\r\n\r\n    DividendDistributor private distributor;\r\n    uint256 public distributorGas = 500000;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public hasLiqBeenAdded;\r\n    uint256 public swapMultiplier = 1;\r\n    uint256 public swapThreshold = _totalSupply / 20000;\r\n    bool public swapSetToThreshold = true;\r\n    bool public inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // mainnet\r\n        // router = IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // testnet\r\n        pcsPair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = 2**256 - 1;\r\n\r\n        distributor = new DividendDistributor(address(router));\r\n\r\n        isDividendExempt[pcsPair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n        \r\n        isFeeExempt[marketingReceiver] = true;\r\n        isFeeExempt[teamReceiver] = true;\r\n        isFeeExempt[partnerReceiver] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[DEAD] = true;\r\n        isFeeExempt[ZERO] = true;\r\n        \r\n        _setAutomatedMarketMakerPair(pcsPair, true);\r\n        \r\n        liquidityHolders[msg.sender] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, 2**256 - 1);\r\n    }\r\n    \r\n    function whitelistPresale(address _presaleAddress) external onlyOwner {\r\n  \t    liquidityHolders[_presaleAddress] = true;\r\n        isFeeExempt[_presaleAddress] = true;\r\n        isDividendExempt[_presaleAddress] = true;\r\n  \t}\r\n  \t\r\n  \tfunction setDynamicTaxStatuses(bool _dynamicBuyTaxEnabled, bool _dynamicSellTaxEnabled) external onlyOwner {\r\n  \t    dynamicBuyTaxEnabled = _dynamicBuyTaxEnabled;\r\n  \t    dynamicSellTaxEnabled = _dynamicSellTaxEnabled;\r\n  \t}\r\n  \t\r\n  \tfunction setAutomatedMarketMakerPair(address _pair, bool _value) public onlyOwner {\r\n        require(_pair != pcsPair);\r\n\r\n        _setAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address _pair, bool _value) private {\r\n        require(automatedMarketMakerPairs[_pair] != _value);\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n\r\n        if(_value) {\r\n            isDividendExempt[_pair] = true;\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n    \r\n    function _checkLiquidityAdd(address from, address to) internal {\r\n        // if liquidity is added by the _liquidityholders set trading enables to true and start the anti sniper timer\r\n        require(!hasLiqBeenAdded);\r\n\r\n        if(liquidityHolders[from] && automatedMarketMakerPairs[to]) {\r\n            hasLiqBeenAdded = true;\r\n            buyTax = baseTax;\r\n            sellTax = baseTax;\r\n            launch();\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n    \r\n    function updateTransactionTaxes(bool selling) internal {\r\n        if(!selling) {\r\n            if(dynamicBuyTaxEnabled) {\r\n                if(buyTax > buyTaxFloor) {\r\n                    if(sellTax > baseTax) {\r\n                        sellTax = sellTax.sub(dynamicTaxStep);\r\n                    }\r\n                    buyTax = buyTax.sub(dynamicTaxStep);\r\n                }\r\n            }\r\n        } else {\r\n            if(sellTax < sellTaxCeiling) {\r\n                if(buyTax < baseTax) {\r\n                    buyTax = buyTax.add(dynamicTaxStep);\r\n                }\r\n                sellTax = sellTax.add(dynamicTaxStep);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != 2**256 - 1){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(launched() || (isFeeExempt[sender] || isFeeExempt[recipient]));\r\n\r\n        if(inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        \r\n        if(block.timestamp > launchedAt.add(2 hours) && !dynamicBuyTaxEnabled) {\r\n            dynamicBuyTaxEnabled = true;\r\n        }\r\n\r\n        if (!hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(sender, recipient);\r\n        }\r\n        \r\n        if(goldenHour && block.timestamp > goldenHourStartTimestamp + 1 hours) {\r\n            goldenHour = false;\r\n            dynamicBuyTaxEnabled = true;\r\n        }\r\n\r\n        if (amount == 0) {\r\n            return _basicTransfer(sender, recipient, 0);\r\n        }\r\n        \r\n        bool feeExempt = isFeeExempt[sender] || isFeeExempt[recipient];\r\n        bool walletToWalletTransfer = !automatedMarketMakerPairs[sender] || !automatedMarketMakerPairs[recipient];\r\n\r\n        if (!feeExempt || !walletToWalletTransfer) {\r\n            if(amount >= getDDBEquivalentValue().div(transactionTaxUpdateDivsor)) {\r\n                updateTransactionTaxes(!automatedMarketMakerPairs[sender]);\r\n            }\r\n            amount = takeFee(sender, !automatedMarketMakerPairs[sender], amount);\r\n        }\r\n\r\n        if(shouldSwapBack(sender)){ swapBack(); }\r\n        if(shouldAutoBuyback(sender)){ triggerAutoBuyback(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        \r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, bool selling, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount;\r\n        \r\n        if(selling) {\r\n            feeAmount = amount.mul(sellTax).div(denominator);\r\n        } else {\r\n            if(!goldenHour) {\r\n                feeAmount = amount.mul(buyTax).div(denominator);\r\n            }\r\n        }\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack(address sender) internal view returns (bool) {\r\n        if(swapSetToThreshold) {\r\n            return !automatedMarketMakerPairs[sender]\r\n            && !inSwap\r\n            && swapEnabled\r\n            && _balances[address(this)] >= swapThreshold;\r\n        } else {\r\n            return !automatedMarketMakerPairs[sender]\r\n            && !inSwap\r\n            && swapEnabled\r\n            && _balances[address(this)] >= getDDBEquivalentValue().mul(swapMultiplier);\r\n        }\r\n    }\r\n    \r\n    function startGoldenHour() external authorized {\r\n        require(!goldenHour);\r\n        goldenHourStartTimestamp = block.timestamp;\r\n        goldenHour = true;\r\n        dynamicBuyTaxEnabled = false;\r\n    }\r\n\r\n    function disableGoldenHour() external authorized {\r\n        require(goldenHour);\r\n        goldenHour = false;\r\n        dynamicBuyTaxEnabled = true;\r\n    }\r\n    \r\n    function updateTransactionTaxUpdateDivisor(uint256 _divisor) external authorized {\r\n        require(_divisor > 0 && _divisor < 50);\r\n        transactionTaxUpdateDivsor = _divisor;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 tokensToSwap = swapSetToThreshold ? swapThreshold : getDDBEquivalentValue().mul(swapMultiplier);\r\n        \r\n        uint256 dynamicLiquidityShare = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityShare;\r\n        uint256 amountToLiquify = tokensToSwap.mul(dynamicLiquidityShare).div(totalShare).div(2);\r\n        uint256 amountToSwap = tokensToSwap.sub(amountToLiquify);\r\n\r\n        uint256 amountBNB = swapForBNB(amountToSwap);\r\n    \r\n        uint256 totalBNBShare = totalShare.sub(dynamicLiquidityShare.div(2));\r\n        \r\n        if(amountToLiquify > 0){\r\n            addLiquidity(amountBNB.mul(dynamicLiquidityShare).div(totalBNBShare), amountToLiquify);\r\n        }\r\n        \r\n        uint256 amountBNBDividend = amountBNB.mul(dividendShare).div(totalBNBShare);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingShare).div(totalBNBShare);\r\n        uint256 amountBNBPartner = amountBNB.mul(partnerShare).div(totalBNBShare);\r\n        uint256 amountBNBTeam = amountBNB.mul(teamShare).div(totalBNBShare);\r\n\r\n        try distributor.deposit{value: amountBNBDividend}() {} catch {}\r\n        (bool marketingShareSuccess, /* bytes memory data */) = payable(marketingReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n        require(marketingShareSuccess);\r\n        (bool teamShareSuccess, /* bytes memory data */) = payable(teamReceiver).call{value: amountBNBTeam, gas: 30000}(\"\");\r\n        require(teamShareSuccess);\r\n        (bool partnerShareSuccess, /* bytes memory data */) = payable(partnerReceiver).call{value: amountBNBPartner, gas: 30000}(\"\");\r\n        require(partnerShareSuccess);\r\n    }\r\n    \r\n    function swapForBNB(uint256 amountToSwap) internal returns (uint256) {\r\n        uint256 balanceBefore = address(this).balance;\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        return address(this).balance.sub(balanceBefore);\r\n    }\r\n    \r\n    function addLiquidity(uint256 amountBNBLiquidity, uint256 amountToLiquify) internal {\r\n        router.addLiquidityETH{value: amountBNBLiquidity}(\r\n            address(this),\r\n            amountToLiquify,\r\n            0,\r\n            0,\r\n            teamReceiver,\r\n            block.timestamp\r\n        );\r\n        emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n    }\r\n\r\n    function shouldAutoBuyback(address sender) internal view returns (bool) {\r\n        return !automatedMarketMakerPairs[sender]\r\n            && !inSwap\r\n            && autoBuybackEnabled\r\n            && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number\r\n            && address(this).balance >= autoBuybackAmount;\r\n    }\r\n\r\n    function triggerManualBuyback(uint256 amount) external authorized {\r\n        buyTokens(amount, teamReceiver);\r\n    }\r\n\r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, teamReceiver);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getDDBEquivalentValue() internal view returns (uint256)\r\n    {\r\n        IPair pair = IPair(pcsPair);\r\n        (uint256 Res0, uint256 Res1,) = pair.getReserves();\r\n        \r\n        uint256 bnb;\r\n        uint256 nativeToken;\r\n        \r\n        if(pair.token0() == router.WETH()){\r\n            bnb = Res0;\r\n            nativeToken = Res1;\r\n        }\r\n        else {\r\n            bnb = Res1;\r\n            nativeToken = Res0;\r\n        }\r\n        \r\n        return nativeToken.mul(1e18).div(bnb);\r\n    }\r\n\r\n    function setAutoBuybackSettings(bool _enabled, uint256 _amount, uint256 _period) external authorized {\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackAmount = _amount * (10 ** _decimals);\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n    }\r\n    \r\n    function inCaseTokensGetStuck(address _token) external authorized {\r\n        require(_token != address(this));\r\n\r\n        uint256 amount = IBEP20(_token).balanceOf(address(this));\r\n        IBEP20(_token).transfer(marketingReceiver, amount);\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\r\n        require(holder != address(this) && holder != pcsPair);\r\n        require(isDividendExempt[holder] != exempt);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        require(isFeeExempt[holder] != exempt, \"Can't set holder to the same status\");\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityShare, uint256 _buybackShare, uint256 _dividendShare, uint256 _marketingShare, uint256 _teamShare, uint256 _partnerShare) external authorized {\r\n        liquidityShare = _liquidityShare;\r\n        buybackShare = _buybackShare;\r\n        dividendShare = _dividendShare;\r\n        marketingShare = _marketingShare;\r\n        teamShare = _teamShare;\r\n        partnerShare = _partnerShare;\r\n        totalShare = _liquidityShare.add(_buybackShare).add(_dividendShare).add(_marketingShare).add(_teamShare).add(_partnerShare);\r\n        require(totalShare < denominator.div(100));\r\n    }\r\n    \r\n    function setTaxthresholds(uint256 _buyTaxFloor, uint256 _sellTaxCeiling) external authorized {\r\n        require(_buyTaxFloor > 0 && _buyTaxFloor < 800);\r\n        require(_sellTaxCeiling > 800 && _sellTaxCeiling < 4000);\r\n        buyTaxFloor = _buyTaxFloor;\r\n        sellTaxCeiling = _sellTaxCeiling;\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingReceiver, address _teamReceiver, address _partnerReceiver) external authorized {\r\n        marketingReceiver = _marketingReceiver;\r\n        teamReceiver = _teamReceiver;\r\n        partnerReceiver = _partnerReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, bool _swapSetToThreshold, uint256 _multiplier, uint256 _divisor) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapSetToThreshold = _swapSetToThreshold;\r\n        swapMultiplier = _multiplier;\r\n        swapThreshold = _totalSupply / _divisor;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(gas > 0 && gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pcsPair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackBlockLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableGoldenHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicBuyTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicSellTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTaxStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenHour\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenHourStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcsPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setAutoBuybackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dynamicBuyTaxEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_dynamicSellTaxEnabled\",\"type\":\"bool\"}],\"name\":\"setDynamicTaxStatuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partnerShare\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_swapSetToThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divisor\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTaxFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTaxCeiling\",\"type\":\"uint256\"}],\"name\":\"setTaxthresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGoldenHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSetToThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidityDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerManualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_divisor\",\"type\":\"uint256\"}],\"name\":\"updateTransactionTaxUpdateDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleAddress\",\"type\":\"address\"}],\"name\":\"whitelistPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DaddyDogeBack", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ac0881ac9149cd0fec6432999d9cead9b083392f36d609edbb7c3a56ea412ea"}