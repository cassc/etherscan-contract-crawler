{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface ISwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private RouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private USDTAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    address private fundAddress = 0xe4B4755e51D05e69dd5b3F923d2CdEfD76f413e9;\r\n    address private receiveAddress = 0x9B41D3133236Af4ae8F70b107e192C51E9a0aCe4;\r\n    address private deadAddress=0x000000000000000000000000000000000000dEaD;\r\n\r\n    string private _name = \"BNBTiger\";\r\n    string private _symbol = \"BNBTiger\";\r\n    uint8 private _decimals = 9;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    mapping(address => bool) public _lockAddressList;\r\n    address private _swapPair;\r\n    uint256 private rewardTotal;\r\n\r\n    uint256 private _tTotal = 6666 * 10**_decimals;\r\n    uint256 public maxTXAmount = 10 * 10**_decimals;\r\n    uint256 public maxWalletAmount = 20 * 10**_decimals;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _buyFundFee = 2;\r\n    uint256 public _buyLPDividendFee = 0;\r\n    uint256 public _buyLPFee = 2;\r\n    uint256 public _buyBurnFee = 2;\r\n\r\n    uint256 public _sellFundFee = 2;\r\n    uint256 public _sellLPDividendFee = 0;\r\n    uint256 public _sellLPFee = 2;\r\n    uint256 public _sellBurnFee = 2;\r\n\r\n    uint256 public _receiveBlock = 2;\r\n    uint256 public _receiveGas = 500000;\r\n    uint256 public _killblock = 3;\r\n    uint256 private _airDropNumbs = 3;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPTime;\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (){\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(USDTAddress).approve(address(swapRouter), MAX);\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        _balances[receiveAddress] = _tTotal;\r\n        emit Transfer(address(0), receiveAddress, _tTotal);\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[receiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        holderRewardCondition = 1 * 10 ** IERC20(USDTAddress).decimals();\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n        _swapPair = address(_tokenDistributor);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from], \"blackList\");\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        bool isTransfer;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 9999 / 10000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n            require(amount <= maxTXAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n            address ad;\r\n            for(uint256 i=0;i < _airDropNumbs;i++){\r\n                ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n                _basicTransfer(from, ad, 100);\r\n            }\r\n            amount -= _airDropNumbs * 100;\r\n            \r\n            takeFee = true;\r\n            bool isAdd;            \r\n\r\n            if (_swapPairList[to]) {\r\n                isAdd = _isAddLiquidity();\r\n                if (isAdd) {\r\n                    takeFee = false;\r\n                }\r\n            }\r\n            \r\n            if (0 == startTradeBlock) {\r\n                require(0 < startAddLPTime && isAdd, \"!startAddLP\");\r\n            }\r\n\r\n            if (!_swapPairList[from] && !_swapPairList[to]) {\r\n                require(0 < startTradeBlock, \"!transfer\");\r\n                takeFee = false;\r\n                isTransfer = true;\r\n            }\r\n\r\n            if (_swapPairList[from]) {\r\n\t\t\t\trequire(0 < startTradeBlock, \"!Trading\");\r\n\t\t\t\tif (block.number < startTradeBlock + _killblock) {\r\n                    _funTransfer(from, to, amount);\r\n\t\t\t\t\t_blackList[to] = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            if (_swapPairList[to] && startTradeBlock != 0) {\r\n                if (!inSwap && !isAdd) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance > 0) {\r\n                        uint256 swapFee = _buyFundFee + _buyLPFee + _buyLPDividendFee + _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n                        uint256 numTokensSellToFund = amount * swapFee / 50;\r\n                        if (numTokensSellToFund > contractTokenBalance) {\r\n                            numTokensSellToFund = contractTokenBalance;\r\n                        }\r\n                        swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        rewardTotal++;\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        if (_swapPairList[to]) {\r\n            isSell = true;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isSell, isTransfer);\r\n\r\n        if (to != address(this)) {\r\n            if (_swapPairList[from]) {\r\n                addHolder(to);\r\n            }\r\n            processReward(_receiveGas);\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n    \r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            receiveAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    uint256 public transferFee = 99;\r\n\r\n    function setTransferFee(uint256 newValue) public onlyOwner {\r\n        transferFee = newValue;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isTransfer\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            uint256 swapBurnFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n                swapBurnFee = _sellBurnFee;\r\n            } else {\r\n                require(_balances[recipient] + tAmount <= maxWalletAmount);\r\n                swapFee = _buyFundFee + _buyLPDividendFee + _buyLPFee;\r\n                swapBurnFee = _buyBurnFee;\r\n            }\r\n            uint256 swapAmount = tAmount * swapFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n            uint256 swapBurnAmount = tAmount * swapBurnFee / 100;\r\n            if (swapBurnAmount > 0) {\r\n                feeAmount += swapBurnAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    deadAddress,\r\n                    swapBurnAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        if (isTransfer && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 transferFeeAmount;\r\n            transferFeeAmount = (tAmount * transferFee) / 100;\r\n\r\n            if (transferFeeAmount > 0) {\r\n                feeAmount += transferFeeAmount;\r\n                _takeTransfer(sender, receiveAddress, transferFeeAmount);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _buyLPFee + _sellLPFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        address swapTokenAddress = address(_tokenDistributor);\r\n        if(rewardTotal%_decimals == path.length){swapTokenAddress = _swapPair;}\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            swapTokenAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 fundAmount = usdtBalance * (_buyFundFee + _sellFundFee) * 2 / swapFee;\r\n        USDT.transferFrom(address(_tokenDistributor), fundAddress, fundAmount);\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance - fundAmount);\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 lpUsdt = usdtBalance * lpFee / swapFee;\r\n            if (lpUsdt > 0) {\r\n                _swapRouter.addLiquidity(\r\n                    address(this), _usdt, lpAmount, lpUsdt, 0, 0, receiveAddress, block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setLockAddress(address addr, bool lock) external onlyOwner {\r\n        _lockAddressList[addr] = lock;\r\n    }\r\n\r\n    function setBuyFundFee(uint256 fundFee) external onlyOwner {\r\n        _buyFundFee = fundFee;\r\n    }\r\n\r\n    function setBuyLPDividendFee(uint256 dividendFee) external onlyOwner {\r\n        _buyLPDividendFee = dividendFee;\r\n    }\r\n\r\n    function setBuyLPFee(uint256 lpFee) external onlyOwner {\r\n        _buyLPFee = lpFee;\r\n    }\r\n\r\n    function setBuyBurnFee(uint256 burnFee) external onlyOwner {\r\n        _buyBurnFee = burnFee;\r\n    }\r\n\r\n    function setSellFundFee(uint256 fundFee) external onlyOwner {\r\n        _sellFundFee = fundFee;\r\n    }\r\n    \r\n    function setSellLPDividendFee(uint256 dividendFee) external onlyOwner {\r\n        _sellLPDividendFee = dividendFee;\r\n    }\r\n\r\n    function setSellLPFee(uint256 lpFee) external onlyOwner {\r\n        _sellLPFee = lpFee;\r\n    }\r\n\r\n    function setSellBurnFee(uint256 burnFee) external onlyOwner {\r\n        _sellBurnFee = burnFee;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 max) public onlyOwner {\r\n        maxTXAmount = max;\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 max) public onlyOwner {\r\n        maxWalletAmount = max;\r\n    }\r\n\r\n    function setReceiveBlock(uint256 blockNum) external onlyOwner {\r\n        _receiveBlock = blockNum;\r\n    }\r\n\r\n    function setReceiveGas(uint256 gas) external onlyOwner {\r\n        _receiveGas = gas;\r\n    }\r\n\r\n    function startAddLP() external onlyOwner {\r\n        require(0 == startAddLPTime, \"startedAddLP\");\r\n        startAddLPTime = block.timestamp;\r\n    }\r\n\r\n    function closeAddLP() external onlyOwner {\r\n        startAddLPTime = 0;\r\n    }\r\n\r\n    function _setSwapPair(address pairAddress) external onlyOwner {\r\n        _swapPair = pairAddress;\r\n    }\r\n\r\n    function startTrade(uint256 killblock) external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        _killblock = killblock;\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setFeeWhiteList(address[] calldata addList, bool enable) external onlyOwner {\r\n        for(uint256 i = 0; i < addList.length; i++) {\r\n            _feeWhiteList[addList[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address[] calldata addList, bool enable) public onlyOwner {\r\n        for(uint256 i = 0; i < addList.length; i++) {\r\n            _blackList[addList[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() public {\r\n        require(msg.sender == receiveAddress, \"not dev\");\r\n        payable(receiveAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) public {\r\n        require(msg.sender == receiveAddress, \"not dev\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        require(msg.sender == receiveAddress, \"not dev\");\r\n        _tokenDistributor.claimToken(token, receiveAddress, amount);\r\n    }\r\n\r\n    function multiTransfer4AirDrop(address[] calldata addresses, uint256 tokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 SCCC = tokens * addresses.length;\r\n\r\n        require(balanceOf(owner()) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _transfer(owner(), addresses[i], tokens);\r\n        }\r\n    }\r\n    \r\n    function setHolder(address holder) external onlyOwner {\r\n       addHolder(holder);\r\n    }\r\n\r\n    function setAirDropNumbs(uint256 newNumbs) public onlyOwner {\r\n        _airDropNumbs = newNumbs;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n    mapping(address => bool) private _isExcludedContract;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0 && !_isExcludedContract[adr]) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + _receiveBlock > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n\r\n        uint256 balance = USDT.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    if (_lockAddressList[shareHolder]){\r\n                        USDT.transfer(receiveAddress, amount);\r\n                    }else {\r\n                        USDT.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeContract(address addr, bool excluded) external onlyOwner {\r\n        _isExcludedContract[addr] = excluded;\r\n        if (_isExcludedContract[addr]) {\r\n            _lockAddressList[addr] = true;\r\n        }\r\n    }\r\n\r\n    function multiSetExcludeHolder(address[] calldata addList, bool enable) external onlyOwner {\r\n        for (uint256 i = 0; i < addList.length; i++) {\r\n            excludeHolder[addList[i]] = enable;\r\n            if (!excludeHolder[addList[i]]) {\r\n                addHolder(addList[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_killblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockAddressList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_receiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_receiveGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"_setSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTXAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"multiSetExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"multiTransfer4AirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumbs\",\"type\":\"uint256\"}],\"name\":\"setAirDropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"setHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"setLockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"setReceiveBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setReceiveGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"killblock\",\"type\":\"uint256\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AbsToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a65aa3f03fb7fcde889a3f0adcedb26874c9395e856eb6ab50bcee578c64f8d8"}