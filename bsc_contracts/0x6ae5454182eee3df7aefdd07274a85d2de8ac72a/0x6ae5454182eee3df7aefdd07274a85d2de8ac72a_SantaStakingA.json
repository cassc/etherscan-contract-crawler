{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SantaStakingA.sol\": {\r\n      \"content\": \" \\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./libs/IUniRouter02.sol\\\";\\r\\nimport \\\"./libs/IWETH.sol\\\";\\r\\ninterface IToken {\\r\\n     /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract SantaStakingA is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // The address of the smart chef factory\\r\\n    address public POOL_FACTORY;\\r\\n\\r\\n    // Whether it is initialized\\r\\n    bool public isInitialized;\\r\\n\\r\\n    // Whether a limit is set for users\\r\\n    bool public hasUserLimit;\\r\\n    // The pool limit (0 if none)\\r\\n    uint256 public poolLimitPerUser;\\r\\n\\r\\n\\r\\n    // The block number when staking starts.\\r\\n    uint256 public startBlock;\\r\\n    // The block number when staking ends.\\r\\n    uint256 public bonusEndBlock;\\r\\n    // tokens created per block.\\r\\n    uint256 public rewardPerBlock;\\r\\n\\r\\n    // The block number of the last pool update\\r\\n    uint256 public lastRewardBlock;\\r\\n    // Accrued token per share\\r\\n    uint256 public accTokenPerShare;\\r\\n\\r\\n\\r\\n    // swap router and path, slipPage\\r\\n    address public uniRouterAddress;\\r\\n    address[] public reflectToStakedPath;\\r\\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\\r\\n    uint256 public constant slippageFactorUL = 995;\\r\\n\\r\\n    // The deposit & withdraw fee\\r\\n    uint16 public depositFee;\\r\\n    uint16 public withdrawFee;\\r\\n    // The fee address\\r\\n    address public feeAddress;\\r\\n    uint16 public constant MAX_FEE = 2000;\\r\\n\\r\\n\\r\\n    // The precision factor\\r\\n    uint256 public PRECISION_FACTOR;\\r\\n    uint256 public PRECISION_FACTOR_REFLECTION;\\r\\n\\r\\n    // The staked token\\r\\n    IERC20 public stakingToken;\\r\\n    // The reward token\\r\\n    IERC20 public rewardToken = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\r\\n    // The reflection token of staking token\\r\\n    IERC20 public reflectionToken = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\r\\n\\r\\n    uint256 public accReflectionPerShare;\\r\\n\\r\\n    uint256 public totalStaked;\\r\\n    uint256 private totalRewards;\\r\\n    uint256 private totalReflections;\\r\\n    uint256 private reflectionDebt;\\r\\n\\r\\n    // Info of each user that stakes tokens (stakingToken)\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many staked tokens the user has provided\\r\\n        uint256 rewardDebt; // Reward debt\\r\\n        uint256 reflectionDebt; // Reflection debt\\r\\n    }\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\r\\n\\r\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\r\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\r\\n    event NewPoolLimit(uint256 poolLimitPerUser);\\r\\n    event RewardsStop(uint256 blockNumber);\\r\\n\\r\\n    event SetSettings(\\r\\n        uint16 _depositFee,\\r\\n        uint16 _withdrawFee,\\r\\n        address _feeAddress,\\r\\n        uint256 _slippageFactor,\\r\\n        address _uniRouter,\\r\\n        address[] _path\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        POOL_FACTORY = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Initialize the contract\\r\\n     * @param _stakingToken: staked token address\\r\\n     * @param _poolLimitPerUser: pool limit per user in stakingToken (if any, else 0)\\r\\n     * @param _depositFee: deposit fee\\r\\n     * @param _withdrawFee: withdraw fee\\r\\n     * @param _feeAddress: fee address\\r\\n     * @param _uniRouter: uniswap router address for swap tokens\\r\\n     * @param _path: swap path to compound (reflection -> staking path)\\r\\n     */\\r\\n    function initialize(\\r\\n        IERC20 _stakingToken,\\r\\n        uint256 _poolLimitPerUser,\\r\\n        uint16 _depositFee,\\r\\n        uint16 _withdrawFee,\\r\\n        address _feeAddress,\\r\\n        address _uniRouter,\\r\\n        address[] memory _path\\r\\n    ) external {\\r\\n        require(!isInitialized, \\\"Already initialized\\\");\\r\\n        require(msg.sender == POOL_FACTORY, \\\"Not factory\\\");\\r\\n\\r\\n        // Make this contract initialized\\r\\n        isInitialized = true;\\r\\n\\r\\n        stakingToken = _stakingToken;\\r\\n\\r\\n        require(_depositFee < MAX_FEE, \\\"Invalid deposit fee\\\");\\r\\n        require(_withdrawFee < MAX_FEE, \\\"Invalid withdraw fee\\\");\\r\\n\\r\\n        depositFee = _depositFee;\\r\\n        withdrawFee = _withdrawFee;\\r\\n        feeAddress = _feeAddress;\\r\\n\\r\\n        if (_poolLimitPerUser > 0) {\\r\\n            hasUserLimit = true;\\r\\n            poolLimitPerUser = _poolLimitPerUser;\\r\\n        }\\r\\n\\r\\n        uint256 decimalsRewardToken = uint256(IToken(address(rewardToken)).decimals());\\r\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\r\\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\r\\n\\r\\n        uint256 decimalsReflectionToken = 18;\\r\\n        if(address(reflectionToken) != address(0x0)) {\\r\\n            decimalsReflectionToken = uint256(IToken(address(reflectionToken)).decimals());\\r\\n            require(decimalsReflectionToken < 30, \\\"Must be inferior to 30\\\");\\r\\n        }\\r\\n        PRECISION_FACTOR_REFLECTION = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\r\\n\\r\\n        uniRouterAddress = _uniRouter;\\r\\n        reflectToStakedPath = _path;\\r\\n        _resetAllowances();\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\r\\n     * @param _amount: amount to withdraw (in rewardToken)\\r\\n     */\\r\\n    function deposit(uint256 _amount) external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        if (hasUserLimit) {\\r\\n            require(\\r\\n                _amount.add(user.amount) <= poolLimitPerUser,\\r\\n                \\\"User amount above limit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending =\\r\\n                user.amount.mul(accTokenPerShare).div(10**6).div(PRECISION_FACTOR).sub(\\r\\n                    user.rewardDebt\\r\\n                );\\r\\n            if (pending > 0) {\\r\\n                require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n                rewardToken.safeTransfer(address(msg.sender), pending);\\r\\n\\r\\n                if(totalRewards > pending) {\\r\\n                    totalRewards = totalRewards.sub(pending);\\r\\n                } else {\\r\\n                    totalRewards = 0;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 pendingReflection = \\r\\n                user.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\\r\\n                    user.reflectionDebt\\r\\n                );\\r\\n            if (pendingReflection > 0) {\\r\\n                if(address(reflectionToken) == address(0x0)) {\\r\\n                    payable(msg.sender).transfer(pendingReflection);\\r\\n                } else {\\r\\n                    reflectionToken.safeTransfer(address(msg.sender), pendingReflection);\\r\\n                }\\r\\n                totalReflections = totalReflections.sub(pendingReflection);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 beforeAmount = stakingToken.balanceOf(address(this));\\r\\n            stakingToken.safeTransferFrom(\\r\\n                address(msg.sender),\\r\\n                address(this),\\r\\n                _amount\\r\\n            );\\r\\n            uint256 afterAmount = stakingToken.balanceOf(address(this));\\r\\n            \\r\\n            uint256 realAmount = afterAmount.sub(beforeAmount);\\r\\n            if (depositFee > 0) {\\r\\n                uint256 fee = realAmount.mul(depositFee).div(10000);\\r\\n                if (fee > 0) {\\r\\n                    stakingToken.safeTransfer(feeAddress, fee);\\r\\n                    realAmount = realAmount.sub(fee);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount.add(realAmount);\\r\\n\\r\\n            totalStaked = totalStaked.add(realAmount);\\r\\n            \\r\\n            emit Deposit(msg.sender, realAmount);\\r\\n        } else {\\r\\n            emit Deposit(msg.sender, 0);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(10**6).div(PRECISION_FACTOR);\\r\\n        user.reflectionDebt = user.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraw staked tokens and collect reward tokens\\r\\n     * @param _amount: amount to withdraw (in rewardToken)\\r\\n     */\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        if(user.amount > 0) {\\r\\n            uint256 pending =\\r\\n                user.amount.mul(accTokenPerShare).div(10**6).div(PRECISION_FACTOR).sub(\\r\\n                    user.rewardDebt\\r\\n                );\\r\\n            if (pending > 0) {\\r\\n                require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n                rewardToken.safeTransfer(address(msg.sender), pending);\\r\\n                \\r\\n                if(totalRewards > pending) {\\r\\n                    totalRewards = totalRewards.sub(pending);\\r\\n                } else {\\r\\n                    totalRewards = 0;\\r\\n                }\\r\\n            }\\r\\n\\r\\n\\r\\n            uint256 pendingReflection = \\r\\n                user.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\\r\\n                    user.reflectionDebt\\r\\n                );\\r\\n            if (pendingReflection > 0) {\\r\\n                if(address(reflectionToken) == address(0x0)) {\\r\\n                    payable(msg.sender).transfer(pendingReflection);\\r\\n                } else {\\r\\n                    reflectionToken.safeTransfer(address(msg.sender), pendingReflection);\\r\\n                }\\r\\n                totalReflections = totalReflections.sub(pendingReflection);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 realAmount = _amount;\\r\\n\\r\\n            if (user.amount < _amount) {\\r\\n                realAmount = user.amount;\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount.sub(realAmount);\\r\\n            totalStaked = totalStaked.sub(realAmount);\\r\\n\\r\\n            if (withdrawFee > 0) {\\r\\n                uint256 fee = realAmount.mul(withdrawFee).div(10000);\\r\\n                if (fee > 0) {\\r\\n                    stakingToken.safeTransfer(feeAddress, fee);\\r\\n                    realAmount = realAmount.sub(fee);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            stakingToken.safeTransfer(address(msg.sender), realAmount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(10**6).div(PRECISION_FACTOR);\\r\\n        user.reflectionDebt = user.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\\r\\n\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function compound() external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.amount > 0, \\\"not staked\\\");\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 pending =\\r\\n            user.amount.mul(accTokenPerShare).div(10**6).div(PRECISION_FACTOR).sub(\\r\\n                user.rewardDebt\\r\\n            );\\r\\n        require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n        if(totalRewards > pending) {\\r\\n            totalRewards = totalRewards.sub(pending);\\r\\n        } else {\\r\\n            totalRewards = 0;\\r\\n        }\\r\\n\\r\\n        uint256 pendingReflection = \\r\\n            user.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\\r\\n                user.reflectionDebt\\r\\n            );\\r\\n\\r\\n        pending = pending.add(pendingReflection);\\r\\n        if (pending > 0) {\\r\\n            totalReflections = totalReflections.sub(pendingReflection);\\r\\n\\r\\n\\r\\n            if(address(reflectionToken) == address(0x0)) {\\r\\n                address wethAddress = IUniRouter02(uniRouterAddress).WETH();\\r\\n                IWETH(wethAddress).deposit{ value: pending }();\\r\\n            }\\r\\n\\r\\n            uint256 beforeAmount = stakingToken.balanceOf(address(this));\\r\\n            _safeSwap(pending, reflectToStakedPath, address(this));\\r\\n            uint256 afterAmount = stakingToken.balanceOf(address(this));\\r\\n\\r\\n            uint256 _amount = afterAmount.sub(beforeAmount);\\r\\n            if (hasUserLimit) {\\r\\n                require(\\r\\n                    _amount.add(user.amount) <= poolLimitPerUser,\\r\\n                    \\\"User amount above limit\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount.add(_amount);\\r\\n            \\r\\n            totalStaked = totalStaked.add(_amount);\\r\\n            emit Deposit(msg.sender, _amount);\\r\\n        }\\r\\n        \\r\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(10**6).div(PRECISION_FACTOR);\\r\\n        user.reflectionDebt = user.amount.mul(accReflectionPerShare).div(PRECISION_FACTOR_REFLECTION);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraw staked tokens without caring about rewards\\r\\n     * @dev Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyWithdraw() external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 amountToTransfer = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.reflectionDebt = 0;\\r\\n\\r\\n        if (amountToTransfer > 0) {\\r\\n            stakingToken.safeTransfer(address(msg.sender), amountToTransfer);\\r\\n            totalStaked = totalStaked.sub(amountToTransfer);\\r\\n        }\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, user.amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraw reward token\\r\\n     * @dev Only callable by owner. Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\r\\n        require(block.number > bonusEndBlock, \\\"Pool is running\\\");\\r\\n        if(address(rewardToken) != address(reflectionToken)) {\\r\\n            require(availableRewardTokens() >= _amount, \\\"Insufficient reward tokens\\\");\\r\\n        }\\r\\n    \\r\\n        rewardToken.safeTransfer(address(msg.sender), _amount);\\r\\n        \\r\\n        if (totalRewards > 0) {\\r\\n            if (_amount > totalRewards) {\\r\\n                totalRewards = 0;\\r\\n            } else {\\r\\n                totalRewards = totalRewards.sub(_amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Deposit reward token\\r\\n     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.\\r\\n     */\\r\\n    function depositRewards(uint _amount) external nonReentrant {\\r\\n        require(_amount > 0);\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 beforeAmt = rewardToken.balanceOf(address(this));\\r\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 afterAmt = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        uint256 deposited = afterAmt.sub(beforeAmt);\\r\\n        totalRewards = totalRewards.add(deposited);\\r\\n\\r\\n        if(startBlock > 0 && lastRewardBlock < bonusEndBlock) {\\r\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, bonusEndBlock);\\r\\n            rewardPerBlock = rewardPerBlock.add(deposited.div(multiplier));\\r\\n\\r\\n            emit NewRewardPerBlock(rewardPerBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\r\\n     * @param _tokenAddress: the address of the token to withdraw\\r\\n     * @param _tokenAmount: the number of tokens to withdraw\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _tokenAddress != address(rewardToken),\\r\\n            \\\"Cannot be reward token\\\"\\r\\n        );\\r\\n\\r\\n        if(_tokenAddress == address(stakingToken)) {\\r\\n            uint256 tokenBal = stakingToken.balanceOf(address(this));\\r\\n            require(_tokenAmount <= tokenBal.sub(totalStaked), \\\"Insufficient balance\\\");\\r\\n        }\\r\\n\\r\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\r\\n\\r\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    function startReward() external onlyOwner {\\r\\n        require(startBlock == 0, \\\"Pool was already started\\\");\\r\\n\\r\\n        startBlock = block.number.add(100);\\r\\n        bonusEndBlock = startBlock.add(30 * 28800);        \\r\\n        lastRewardBlock = startBlock;\\r\\n\\r\\n        uint256 rewards = rewardToken.balanceOf(address(this));\\r\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, bonusEndBlock);\\r\\n        rewardPerBlock = rewards.div(multiplier);\\r\\n        \\r\\n        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Stop rewards\\r\\n     * @dev Only callable by owner\\r\\n     */\\r\\n    function stopReward() external onlyOwner {\\r\\n        bonusEndBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Available amount of reward token\\r\\n     */\\r\\n    function availableRewardTokens() public view returns (uint256) {\\r\\n        if(address(rewardToken) == address(reflectionToken)) return totalRewards;\\r\\n\\r\\n        uint256 _amount = rewardToken.balanceOf(address(this));\\r\\n        if (address(rewardToken) == address(stakingToken)) {\\r\\n            if (_amount < totalStaked) return 0;\\r\\n            return _amount.sub(totalStaked);\\r\\n        }\\r\\n\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Available amount of reflection token\\r\\n     */\\r\\n    function availableReflectionTokens() public view returns (uint256) {\\r\\n        if(address(reflectionToken) == address(0x0)) {\\r\\n            return address(this).balance;\\r\\n        }\\r\\n\\r\\n        uint256 _amount = reflectionToken.balanceOf(address(this));\\r\\n        \\r\\n        if(address(reflectionToken) == address(rewardToken)) {\\r\\n            if(_amount < totalRewards) return 0;\\r\\n            _amount = _amount.sub(totalRewards);\\r\\n        }\\r\\n\\r\\n        if(address(reflectionToken) == address(stakingToken)) {\\r\\n            if(_amount < totalStaked) return 0;\\r\\n            _amount = _amount.sub(totalStaked);\\r\\n        }\\r\\n\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice View function to see pending reward on frontend.\\r\\n     * @param _user: user address\\r\\n     * @return Pending reward for a given user\\r\\n     */\\r\\n    function pendingReward(address _user) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        \\r\\n        if (block.number > lastRewardBlock && totalStaked != 0) {\\r\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n            uint256 cakeReward = multiplier.mul(rewardPerBlock);\\r\\n            uint256 adjustedTokenPerShare =\\r\\n                accTokenPerShare.add(\\r\\n                    cakeReward.mul(PRECISION_FACTOR).mul(10**6).div(totalStaked)\\r\\n                );\\r\\n            return\\r\\n                user\\r\\n                    .amount\\r\\n                    .mul(adjustedTokenPerShare)\\r\\n                    .div(PRECISION_FACTOR)\\r\\n                    .div(10**6)\\r\\n                    .sub(user.rewardDebt);\\r\\n        } else {\\r\\n            return\\r\\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).div(10**6).sub(\\r\\n                    user.rewardDebt\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pendingReflections(address _user) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n\\r\\n        if(totalStaked == 0) return 0;\\r\\n        \\r\\n        uint256 reflectionAmount = availableReflectionTokens();\\r\\n        uint256 sTokenBal = stakingToken.balanceOf(address(this));\\r\\n\\r\\n        uint256 adjustedReflectionPerShare = accReflectionPerShare.add(\\r\\n                reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)\\r\\n            );\\r\\n        \\r\\n        uint256 pendingReflection = \\r\\n                user.amount.mul(adjustedReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(\\r\\n                    user.reflectionDebt\\r\\n                );\\r\\n        \\r\\n        return pendingReflection;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Update pool limit per user\\r\\n     * @dev Only callable by owner.\\r\\n     * @param _hasUserLimit: whether the limit remains forced\\r\\n     * @param _poolLimitPerUser: new pool limit per user\\r\\n     */\\r\\n    function updatePoolLimitPerUser(\\r\\n        bool _hasUserLimit,\\r\\n        uint256 _poolLimitPerUser\\r\\n    ) external onlyOwner {\\r\\n        require(hasUserLimit, \\\"Must be set\\\");\\r\\n        if (_hasUserLimit) {\\r\\n            require(\\r\\n                _poolLimitPerUser > poolLimitPerUser,\\r\\n                \\\"New limit must be higher\\\"\\r\\n            );\\r\\n            poolLimitPerUser = _poolLimitPerUser;\\r\\n        } else {\\r\\n            hasUserLimit = _hasUserLimit;\\r\\n            poolLimitPerUser = 0;\\r\\n        }\\r\\n        emit NewPoolLimit(poolLimitPerUser);\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        uint16 _depositFee,\\r\\n        uint16 _withdrawFee,\\r\\n        address _feeAddress,\\r\\n        uint256 _slippageFactor,\\r\\n        address _uniRouter,\\r\\n        address[] memory _path\\r\\n    ) external onlyOwner {\\r\\n        require(_depositFee < MAX_FEE, \\\"Invalid deposit fee\\\");\\r\\n        require(_withdrawFee < MAX_FEE, \\\"Invalid withdraw fee\\\");\\r\\n        require(_slippageFactor <= slippageFactorUL, \\\"_slippageFactor too high\\\");\\r\\n\\r\\n        depositFee = _depositFee;\\r\\n        withdrawFee = _withdrawFee;\\r\\n        feeAddress = _feeAddress;\\r\\n        slippageFactor = _slippageFactor;\\r\\n        uniRouterAddress = _uniRouter;\\r\\n        reflectToStakedPath = _path;\\r\\n        _resetAllowances();\\r\\n\\r\\n        emit SetSettings(_depositFee, _withdrawFee, _feeAddress, _slippageFactor, _uniRouter, _path);\\r\\n    }\\r\\n\\r\\n    function resetAllowances() external onlyOwner {\\r\\n        _resetAllowances();\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Update reward variables of the given pool to be up-to-date.\\r\\n     */\\r\\n    function _updatePool() internal {\\r\\n        // calc reflection rate\\r\\n        if(totalStaked > 0) {\\r\\n            uint256 reflectionAmount = availableReflectionTokens();\\r\\n            uint256 sTokenBal = stakingToken.balanceOf(address(this));\\r\\n\\r\\n            accReflectionPerShare = accReflectionPerShare.add(\\r\\n                    reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)\\r\\n                );\\r\\n\\r\\n            totalReflections = reflectionAmount;\\r\\n        }\\r\\n\\r\\n        if (block.number <= lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (totalStaked == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n        uint256 _reward = multiplier.mul(rewardPerBlock);\\r\\n        accTokenPerShare = accTokenPerShare.add(\\r\\n            _reward.mul(PRECISION_FACTOR).mul(10**6).div(totalStaked)\\r\\n        );\\r\\n        lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Return reward multiplier over the given _from to _to block.\\r\\n     * @param _from: block to start\\r\\n     * @param _to: block to finish\\r\\n     */\\r\\n    function _getMultiplier(uint256 _from, uint256 _to)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_to <= bonusEndBlock) {\\r\\n            return _to.sub(_from);\\r\\n        } else if (_from >= bonusEndBlock) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return bonusEndBlock.sub(_from);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeSwap(\\r\\n        uint256 _amountIn,\\r\\n        address[] memory _path,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\r\\n        uint256 amountOut = amounts[amounts.length.sub(1)];\\r\\n\\r\\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(\\r\\n            _amountIn,\\r\\n            amountOut.mul(slippageFactor).div(1000),\\r\\n            _path,\\r\\n            _to,\\r\\n            block.timestamp.add(600)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _resetAllowances() internal {\\r\\n        IERC20(reflectionToken).safeApprove(uniRouterAddress, uint256(0));\\r\\n        IERC20(reflectionToken).safeIncreaseAllowance(\\r\\n            uniRouterAddress,\\r\\n            type(uint256).max\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IUniRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IUniRouter01.sol\\\";\\r\\n\\r\\ninterface IUniRouter02 is IUniRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/libs/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IUniRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_withdrawFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR_REFLECTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accReflectionPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReflectionTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_withdrawFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reflectToStakedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_withdrawFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SantaStakingA", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}