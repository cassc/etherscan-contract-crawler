{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.2;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations with safety checks that revert on error\r\n * @dev SafeMath adapted for int256\r\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\r\n */\r\nlibrary SafeMathInt {\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when multiplying INT256_MIN with -1\r\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n        require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n        int256 c = a * b;\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing INT256_MIN by -1\r\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n        require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock the token contract\");\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IFomo {\r\n    function transferNotify(address user) external;\r\n\r\n    function swap() external;\r\n\r\n    function payReward(address user, uint256 amount) external;\r\n}\r\n\r\ninterface IDividend {\r\n\r\n    function swap() external;\r\n\r\n    function swapAndDistributeDividends() external;\r\n    \r\n    function excludeFromDividends(address account) external;\r\n    \r\n    function setBalance(address payable account, uint256 newBalance) external;\r\n    \r\n    function process(uint256 gas) external returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) ;\r\n    \r\n}\r\n\r\ninterface IWrap {\r\n    function withdraw() external;\r\n}\r\n\r\ncontract PoordogeCoin is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    bool private inSwap = false;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256[2]) public accumulatePurchaseToday;\r\n\r\n    address public immutable blackhole;\r\n    address public router;\r\n    IERC20 public usdt;\r\n    address private _owner;\r\n    address private _devReceiver;\r\n    address public _fomoReceiver;\r\n    address public _divReceiver;\r\n    // address public  WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; //testnet wbnb\r\n    \r\n    uint256 public _maxTotal = 700000 * 10 ** 8 * 10 ** 9;\r\n    // uint256 public _maxTotal = 700000 * 10 ** 8 * 10 ** 9;\r\n    uint256 public _total = 0;\r\n    uint256 private _maxSell = 100 * 10 ** 8 * 10 ** 9;\r\n    uint256 public minimumAmountToSwap = 10 * 10 ** 18;\r\n    uint256 private buyTaxPrice = 100;\r\n    \r\n    string public _name = 'PoorDoge';\r\n    string public _symbol = 'POORDOGE';\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 public gasForProcessing = 250000;\r\n    uint256 public highestBuyTaxRate = 49;\r\n    uint256 public highestSellTaxRate = 40;\r\n\r\n    address public pdcWbnbPair;\r\n    address public usdtWbnbPair;\r\n\r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public enableFee = false;\r\n\r\n    bool public isAutoDividend = true;\r\n    bool public isAutoSwapFomo = true;\r\n    bool public isAutoSwapDividend = true;\r\n\r\n    uint256 constant internal priceMagnitude = 2 ** 64;\r\n    uint256 public basePrice;\r\n    uint256 public basePriceTimeInterval = 1000;\r\n\r\n\r\n    uint256 public lastBasePriceTimestamp;\r\n    uint256 public startTimestamp;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\r\n    event Logs(\r\n        string logName,\r\n        address logAddrss,\r\n        uint256 longInt\r\n    );\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    constructor (address _devRec, address _router, address _usdt)  ERC20(\"PoorDoge\", \"POORDOGE\"){\r\n\r\n        _owner = msg.sender;\r\n        _devReceiver = _devRec;\r\n        \r\n        router = _router;\r\n        usdt = IERC20(_usdt);\r\n\r\n        _allowances[address(this)][router] = uint256(2**256 - 1);\r\n        \r\n        WBNB = IUniswapV2Router02(router).WETH();\r\n\r\n        address _blackhole = 0x000000000000000000000000000000000000dEaD;\r\n        blackhole = _blackhole;\r\n        _isExcludedFromFee[_devReceiver] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_blackhole] = true;\r\n        _isExcludedFromFee[_router] = true;\r\n\r\n        startTimestamp = block.timestamp;\r\n\r\n        _mint(_owner, _maxTotal);\r\n        \r\n        uint256 amountToBlackHole = _maxTotal.mul(39).div(100);\r\n        _balances[_blackhole] = amountToBlackHole;\r\n        _balances[_owner] = _balances[_owner].sub(amountToBlackHole);\r\n        emit Transfer(_owner, _blackhole, amountToBlackHole);\r\n        \r\n    }\r\n    \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal override {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(_total.add(amount) <= _maxTotal, \"reach maximum\");\r\n\r\n        _total = _total.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function switchOwner (address _newOwner) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        _owner = _newOwner;\r\n    }\r\n    \r\n    function setBuyTaxPrice (uint256 _buyTaxRate) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        buyTaxPrice = _buyTaxRate;\r\n    }\r\n    \r\n    function setBasePriceTimeInterval(uint256 _basePriceTimeInterval) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        basePriceTimeInterval = _basePriceTimeInterval;\r\n    }\r\n    \r\n    function setHighestSellTaxRate (uint256 _highestSellTaxRate) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        highestSellTaxRate = _highestSellTaxRate;\r\n    }\r\n    \r\n    function setHighestBuyTaxRate (uint256 _highestBuyTaxRate) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        highestBuyTaxRate = _highestBuyTaxRate;\r\n    }\r\n    \r\n    function setWBNB(address _wbnb) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        WBNB = _wbnb;\r\n    }\r\n    \r\n    function setMinimumAmountToSwap(uint256 _minimumAmountToSwap) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        minimumAmountToSwap = _minimumAmountToSwap;\r\n    }\r\n    \r\n    function setMaxSell(uint256 __maxSell) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        _maxSell = __maxSell;\r\n    }\r\n    \r\n    function setIsAutoDividend(bool _isAutoDividend) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        isAutoDividend = _isAutoDividend;\r\n    }\r\n\r\n    \r\n    function setIsAutoSwapFomo(bool _isAutoSwapFomo) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        isAutoSwapFomo = _isAutoSwapFomo;\r\n    }\r\n    \r\n        \r\n    function setIsAutoSwapDividend(bool _isAutoSwapDividend) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        isAutoDividend = _isAutoSwapDividend;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFee[account] != excluded, \"Poordoge Coin: Account is already the value of 'excluded'\");\r\n        _isExcludedFromFee[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 500000, \"Poordoge Coin: gasForProcessing must be between 200,000 and 500,000\");\r\n        require(newValue != gasForProcessing, \"Poordoge Coin: Cannot update gasForProcessing to same value\");\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setFomo(address _fomo) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        _fomoReceiver = _fomo;\r\n        _isExcludedFromFee[_fomo] = true;\r\n        if (_divReceiver != address(0)) {\r\n            IDividend(_divReceiver).excludeFromDividends(address(_fomoReceiver));\r\n        }\r\n    }\r\n\r\n    function setDiv(address _div) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        _divReceiver = _div;\r\n        _isExcludedFromFee[_div] = true;\r\n        \r\n        IDividend(_div).excludeFromDividends(_div);\r\n        IDividend(_div).excludeFromDividends(address(this));\r\n        IDividend(_div).excludeFromDividends(router);\r\n        IDividend(_div).excludeFromDividends(address(_divReceiver));\r\n        IDividend(_div).excludeFromDividends(address(blackhole));\r\n        if (_fomoReceiver != address(0)) {\r\n            IDividend(_div).excludeFromDividends(_fomoReceiver);\r\n        }\r\n        \r\n        if (pdcWbnbPair != address(0)) {\r\n            IDividend(_div).excludeFromDividends(pdcWbnbPair);\r\n        }\r\n        \r\n        if (usdtWbnbPair != address(0)) {\r\n            IDividend(_div).excludeFromDividends(usdtWbnbPair);\r\n        }\r\n    }\r\n    \r\n    function setRouter(address _router) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        router = _router;\r\n        \r\n        _isExcludedFromFee[_router] = true;\r\n        if (_divReceiver != address(0)) {\r\n            IDividend(_divReceiver).excludeFromDividends(_router);\r\n        }\r\n    }\r\n    \r\n    function setEnableFee(bool _enableFee) public {\r\n        require(_msgSender() == owner(), \"permission denied.\");\r\n        enableFee = _enableFee;\r\n    }\r\n    \r\n    function setSwapAndLiquify (bool _swapAndLiquifyEnabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\r\n    }\r\n\r\n    function _getBasePriceRate() public view returns (uint256) {\r\n        uint256 basePriceNow = getBasePriceNow();\r\n        if (basePriceNow == 0) return 0;\r\n        uint256 lpPrice = getLpPriceNow();\r\n        if (lpPrice == 0) return 0;\r\n        return lpPrice.mul(1000).div(basePriceNow);\r\n    }\r\n\r\n    function _getAmountInUsdt(uint256 tokenAmount) public view returns (uint256) {\r\n\r\n        if (tokenAmount <= 0) return 0;\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_wbnbReserve <= 0) return 0;\r\n        if (_pdcReserve <= 0) return 0;\r\n        uint256 wbnbIn = uint256(getAmountIn(tokenAmount, _wbnbReserve, _pdcReserve));\r\n        \r\n        (uint256 _wbnbReserve1, uint256 _usdtReserve) = _getWbnbUsdtReserves();\r\n        if (_wbnbReserve1 <= 0) return 0;\r\n        if (_usdtReserve <= 0) return 0;\r\n        return uint256(getAmountIn(wbnbIn, _usdtReserve, _wbnbReserve1));\r\n    }\r\n\r\n    function _getAmountOutUsdt(uint256 tokenAmount) public view returns (uint256) {\r\n        \r\n        if (tokenAmount <= 0) return 0;\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_wbnbReserve <= 0 || _pdcReserve <= 0) return 0;\r\n        uint256 wbnbOut = uint256(getAmountOut(tokenAmount, _pdcReserve, _wbnbReserve));\r\n        \r\n        (uint256 _wbnbReserve1, uint256 _usdtReserve) = _getWbnbUsdtReserves();\r\n        if (_wbnbReserve1 <= 0 || _usdtReserve <= 0) return 0;\r\n        return uint256(getAmountOut(wbnbOut, _wbnbReserve1, _usdtReserve));\r\n        \r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal override {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function checkLps() private {\r\n\r\n        // Create a uniswap pair for this new token\r\n        address _pdcWbnbPair = IUniswapV2Factory(IUniswapV2Router02(router).factory()).getPair(address(this), WBNB);\r\n        if (pdcWbnbPair != _pdcWbnbPair) {\r\n            pdcWbnbPair = _pdcWbnbPair;\r\n            IDividend(_divReceiver).excludeFromDividends(address(_pdcWbnbPair));\r\n        }\r\n        \r\n        address _usdtWbnbPair = IUniswapV2Factory(IUniswapV2Router02(router).factory()).getPair(address(usdt), WBNB);\r\n        if (usdtWbnbPair != _usdtWbnbPair) {\r\n             usdtWbnbPair = _usdtWbnbPair;\r\n        }\r\n       \r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != to, \"Sender and reciever must be different\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if (to == pdcWbnbPair && \r\n            enableFee && \r\n            from != _divReceiver &&\r\n            from != _fomoReceiver &&\r\n            from != _owner) {\r\n            require(amount <= _maxSell, \"sell amount reach maximum\");\r\n        }\r\n        \r\n        checkLps();\r\n\r\n        if ((from == pdcWbnbPair || to == pdcWbnbPair) && enableFee) {\r\n            _updateBasePrice();\r\n        }\r\n        \r\n        if (from == pdcWbnbPair) {\r\n            IFomo(_fomoReceiver).transferNotify(to);\r\n        }\r\n        \r\n        if (from != pdcWbnbPair && !inSwap && enableFee) {\r\n            inSwap = true;\r\n            if(from != _fomoReceiver && isAutoSwapFomo) {\r\n                _swapFomo();\r\n            }\r\n            if (from != _divReceiver && isAutoDividend) {\r\n                _swapDividend();\r\n            }\r\n            inSwap = false;\r\n        } \r\n        \r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || !enableFee) {\r\n            _transferWithoutFee(from, to, amount);\r\n        } else {\r\n            if (from == pdcWbnbPair) {\r\n                _transferBuyStandard(from, to, amount);\r\n            } else if (to == pdcWbnbPair) {\r\n                _transferSellStandard(from, to, amount);\r\n            } else {\r\n                _transferStandard(from, to, amount);\r\n            }\r\n        }\r\n\r\n        if (from == pdcWbnbPair) {\r\n            _updateAccumulatePurchaseToday(amount, to);\r\n        }\r\n        \r\n        try IDividend(_divReceiver).setBalance(payable(from), balanceOf(from)) {} catch {}\r\n\r\n        try IDividend(_divReceiver).setBalance(payable(to), balanceOf(to)) {}  catch {}\r\n        \r\n        if(!inSwap && isAutoDividend) {\r\n    \t    uint256 gas = gasForProcessing;\r\n\r\n        \ttry IDividend(_divReceiver).process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n        \t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n        \t} catch {}\r\n        }\r\n\r\n    }\r\n\r\n    function _transferBuyStandard(address sender, address recipient, uint256 amount) private {\r\n\r\n        uint256 amountInUsdtRaw = _getAmountInUsdt(amount);\r\n        uint256 totalFee = _distributeBuyFees(amount, sender, recipient, amountInUsdtRaw);\r\n\r\n        uint256 transferAmount = amount.sub(totalFee);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n        uint256 basePriceRate = _getBasePriceRate();\r\n        if (basePriceRate < 900) {\r\n            uint256 rewardRate = getBuyReward(basePriceRate);\r\n            IFomo(_fomoReceiver).payReward(recipient, amountInUsdtRaw.mul(rewardRate).div(1000));\r\n        }\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n    \r\n    function getBuyReward(uint256 basePriceRate) public pure returns(uint256) {\r\n        if (basePriceRate > 900) return 0;\r\n        uint256 diff = 900 - basePriceRate;\r\n        uint256 toReturn = 80;\r\n        toReturn = toReturn.add(diff.mul(3).div(10));\r\n        if (toReturn > 200){\r\n            return 200;\r\n        } else {\r\n            return toReturn;\r\n        }\r\n    }\r\n\r\n    function _transferSellStandard(address from, address to, uint256 amount) private {\r\n        uint256 totalFee = _distributeSellFees(from, amount);\r\n\r\n        uint256 transferAmount = amount.sub(totalFee);\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(transferAmount);\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _distributeSellFees(address from, uint256 amount) private returns (uint256 totalFee) {\r\n\r\n        (uint256 devFee, uint256 fomoFee, uint256 divFee, uint256 liqFee) = _getSellFees(amount);\r\n        _balances[_devReceiver] = _balances[_devReceiver].add(devFee);\r\n        try IDividend(_divReceiver).setBalance(payable(_devReceiver), balanceOf(_devReceiver)) {} catch {}\r\n        _balances[_fomoReceiver] = _balances[_fomoReceiver].add(fomoFee);\r\n        _balances[_divReceiver] = _balances[_divReceiver].add(divFee);\r\n        _balances[blackhole] = _balances[blackhole].add(liqFee);\r\n\r\n        emit Transfer(from, _devReceiver, devFee);\r\n        emit Transfer(from, _fomoReceiver, fomoFee);\r\n        emit Transfer(from, _divReceiver, divFee);\r\n        emit Transfer(from, blackhole, liqFee);\r\n\r\n        return devFee.add(fomoFee).add(divFee).add(liqFee);\r\n    }\r\n\r\n    function _getSellFees(uint256 amount) private view returns (uint256 devFee, uint256 fomoFee, uint256 divFee, uint256 liqFee) {\r\n        uint256 feeRate = _getSellTaxRate();\r\n        uint256 amountOutUsdt = _getAmountOutUsdt(amount);\r\n        uint256 amountOutUsdtAfterFee = amountOutUsdt.sub(amountOutUsdt.mul(feeRate).div(10000));\r\n        uint256 amountInPd = _getAmountInPd(amountOutUsdtAfterFee);\r\n        uint256 fee = amount.sub(amountInPd);  \r\n        \r\n        devFee = fee.mul(25).div(100);\r\n        fomoFee = fee.mul(25).div(100);\r\n        divFee = fee.mul(30).div(100);\r\n        liqFee = fee.mul(20).div(100);\r\n    }\r\n\r\n    function _getSellTaxRate() public view returns (uint256) {\r\n        uint256 rate = _getBasePriceRate();\r\n        if (rate == 0) {\r\n            return _convertToSellSlippage(100);\r\n        }\r\n        if (rate > 900 && rate <= 1200) {\r\n            return _convertToSellSlippage(100);\r\n        }\r\n        uint256 diff;\r\n        uint256 rateToReturn;\r\n        if (rate > 1200) {\r\n            diff = rate.sub(1200);\r\n            rateToReturn = diff.mul(4).div(10).add(200);\r\n            if (rateToReturn > highestSellTaxRate.mul(10)) {\r\n                return _convertToSellSlippage(highestSellTaxRate.mul(10));\r\n            } else {\r\n                return _convertToSellSlippage(rateToReturn);\r\n            }\r\n        }\r\n\r\n        diff = uint256(900).sub(rate);\r\n        rateToReturn = diff.mul(8).div(10).add(200);\r\n        if (rateToReturn > highestSellTaxRate.mul(10)) {\r\n            return _convertToSellSlippage(highestSellTaxRate.mul(10));\r\n        } else {\r\n            return _convertToSellSlippage(rateToReturn);\r\n        }\r\n\r\n    }\r\n    \r\n    function _convertToSellSlippage(uint256 taxRate) private pure returns(uint256) {\r\n        return uint256(10000).sub(uint256(10000000).div(uint256(1000).add(taxRate)));\r\n    }\r\n\r\n    function _getAmountInPd(uint256 amountOut) private view returns(uint256){\r\n        \r\n        if (amountOut <= 0) return 0;\r\n                \r\n        (uint256 _wbnbReserve1, uint256 _usdtReserve) = _getWbnbUsdtReserves();\r\n        if (_wbnbReserve1 <= 0 || _usdtReserve <= 0) return 0;\r\n        uint256 wbnbIn = uint256(getAmountIn(amountOut, _wbnbReserve1, _usdtReserve));\r\n        \r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_wbnbReserve <= 0 || _pdcReserve <= 0) return 0;\r\n        return uint256(getAmountIn(wbnbIn, _pdcReserve, _wbnbReserve));\r\n    }\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        if (amountOut <= 0) return 0;\r\n        if (reserveIn <= 0) return 0;\r\n        if (reserveOut <= 0) return 0;\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(998);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        if (amountIn <= 0) return 0;\r\n        if (reserveIn <= 0) return 0;\r\n        if (reserveOut <= 0) return 0;\r\n        uint amountInWithFee = amountIn.mul(998);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    function _getPdcWbnbReserves() private view returns(uint256 _pdcReserve, uint256 _wbnbReserve) {\r\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pdcWbnbPair).getReserves();\r\n\r\n        address token0 = IUniswapV2Pair(pdcWbnbPair).token0();\r\n        if (token0 == address(this)) {\r\n            _pdcReserve = uint256(reserve0);\r\n            _wbnbReserve = uint256(reserve1);\r\n        } else {\r\n            _pdcReserve = uint256(reserve1);\r\n            _wbnbReserve = uint256(reserve0);\r\n        }\r\n    }\r\n    \r\n    function _getWbnbUsdtReserves() private view returns(uint256 _wbnbReserve, uint256 _usdtReserve) {\r\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(usdtWbnbPair).getReserves();\r\n\r\n        address token0 = IUniswapV2Pair(pdcWbnbPair).token0();\r\n        if (token0 == WBNB) {\r\n            _wbnbReserve = uint256(reserve0);\r\n            _usdtReserve = uint256(reserve1);\r\n        } else {\r\n            _wbnbReserve = uint256(reserve1);\r\n            _usdtReserve = uint256(reserve0);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address from, address to, uint256 amount) private {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function getAccumulatePurchaseToday(address account) public view returns (uint256[2] memory) {\r\n        return accumulatePurchaseToday[account];\r\n    }\r\n\r\n    function _updateAccumulatePurchaseToday(uint256 amount, address to) private {\r\n        uint256 usdtAmountInRaw = _getAmountInUsdt(amount);\r\n        uint256 usdtAmountIn = usdtAmountInRaw.div(10 ** 18);\r\n        if (usdtAmountInRaw.mod(10 ** 18) > 5 * 10 ** 17) {\r\n            usdtAmountIn = usdtAmountIn.add(1);\r\n        }\r\n        if (accumulatePurchaseToday[to][1] != 0) {\r\n            uint256 lastPurchaseDate = accumulatePurchaseToday[to][0];\r\n            uint256 today = block.timestamp.div(24 * 3600);\r\n            if (lastPurchaseDate == today) {\r\n                accumulatePurchaseToday[to][1] = accumulatePurchaseToday[to][1].add(usdtAmountIn);\r\n            } else {\r\n                accumulatePurchaseToday[to][0] = today;\r\n                accumulatePurchaseToday[to][1] = usdtAmountIn;\r\n            }\r\n        }\r\n        else {\r\n            uint256[2] memory r;\r\n            r[0] = uint256(block.timestamp.div(24 * 3600));\r\n            r[1] = uint256(usdtAmountIn);\r\n            accumulatePurchaseToday[to] = r;\r\n        }\r\n    }\r\n\r\n    function _updateBasePrice() private {\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_pdcReserve <= 0 || _wbnbReserve <= 0) return;\r\n        uint256 currentPrice = getLpPriceNow();\r\n        if(lastBasePriceTimestamp == 0) {\r\n            lastBasePriceTimestamp = block.timestamp;\r\n            basePrice = currentPrice;\r\n            return;\r\n        }\r\n        uint256 lastTimeMin = lastBasePriceTimestamp.div(60);\r\n        uint256 currentTimeMin = block.timestamp.div(60);\r\n        if (currentTimeMin == lastTimeMin) {\r\n            return;\r\n        }\r\n        uint256 startMin = startTimestamp.div(60);\r\n        uint256 minSinceBegin = currentTimeMin.sub(startMin).add(1);\r\n        uint256 timeInterval = basePriceTimeInterval;\r\n        if (currentTimeMin > lastTimeMin) {\r\n            uint256 minSinceLast = currentTimeMin.sub(lastTimeMin);\r\n            if (minSinceBegin > timeInterval) {\r\n                if (minSinceLast > timeInterval) {\r\n                    basePrice = currentPrice;\r\n                }  else {\r\n                    basePrice = basePrice.mul(timeInterval.sub(minSinceLast)).div(timeInterval).add(currentPrice.mul(minSinceLast).div(timeInterval));\r\n                }\r\n\r\n            } else {\r\n                if (minSinceBegin <= 60) {\r\n                    basePrice = basePrice.mul(59).div(60).add(currentPrice.div(60));\r\n                } else {\r\n                    basePrice = basePrice.mul(minSinceBegin.sub(minSinceLast)).div(minSinceBegin).add(currentPrice.mul(minSinceLast).div(minSinceBegin));\r\n                }\r\n            }\r\n        }\r\n\r\n        lastBasePriceTimestamp = block.timestamp;\r\n\r\n    }\r\n\r\n    function getBasePriceNow() public view returns(uint256) {\r\n        uint256 _currentLpPrice = getLpPriceNow();\r\n        if (basePrice == 0) return _currentLpPrice;\r\n        uint256 lastTimeMin = lastBasePriceTimestamp.div(60);\r\n        uint256 currentTimeMin = block.timestamp.div(60);\r\n        uint256 timeInterval = basePriceTimeInterval;\r\n        if (currentTimeMin == lastTimeMin) {\r\n            return basePrice;\r\n        } else {\r\n            uint256 startMin = uint256(startTimestamp).div(60);\r\n            uint256 minSinceBegin = currentTimeMin.sub(startMin).add(1);\r\n            uint256 minSinceLast = currentTimeMin.sub(lastTimeMin);\r\n            if (minSinceBegin > timeInterval) {\r\n                if(minSinceLast > timeInterval) {\r\n                    return _currentLpPrice;\r\n                } else {\r\n                    return basePrice.mul(timeInterval.sub(minSinceLast)).div(timeInterval).add(_currentLpPrice.mul(minSinceLast).div(timeInterval));\r\n                }\r\n\r\n            } else if (minSinceBegin <= 60) {\r\n                return basePrice.mul(59).div(60).add(_currentLpPrice.div(60));\r\n            } else {\r\n                return basePrice.mul(uint256(minSinceBegin).sub(minSinceLast)).div(minSinceBegin).add(_currentLpPrice.mul(minSinceLast).div(minSinceBegin));\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getLpPriceNow () public view returns(uint256) {\r\n        (uint112 pwreserve0, uint112 pwreserve1,) = IUniswapV2Pair(pdcWbnbPair).getReserves();\r\n        if (pwreserve0 == 0 || pwreserve1 == 0) {\r\n            return 0;\r\n        }\r\n\r\n        address pwtoken0 = IUniswapV2Pair(pdcWbnbPair).token0();\r\n        uint256 pdPriceInWbnb;\r\n        if (pwtoken0 == address(this)) {\r\n            pdPriceInWbnb = uint256(pwreserve1).mul(priceMagnitude).div(uint256(pwreserve0)).div(10 ** 9);\r\n        } else {\r\n            pdPriceInWbnb = uint256(pwreserve0).mul(priceMagnitude).div(uint256(pwreserve1)).div(10 ** 9);\r\n        }\r\n        \r\n        (uint112 uwreserve0, uint112 uwreserve1,) = IUniswapV2Pair(usdtWbnbPair).getReserves();\r\n        if (uwreserve0 == 0 || uwreserve1 == 0) {\r\n            return 0;\r\n        }\r\n        address uwtoken0 = IUniswapV2Pair(pdcWbnbPair).token0();\r\n        uint256 wbnbPriceInUsdt;\r\n        if (uwtoken0 == WBNB) {\r\n            wbnbPriceInUsdt = uint256(uwreserve1).mul(priceMagnitude).div(uint256(uwreserve0));\r\n        } else {\r\n            wbnbPriceInUsdt = uint256(uwreserve0).mul(priceMagnitude).div(uint256(uwreserve1));\r\n        }\r\n        return pdPriceInWbnb.mul(wbnbPriceInUsdt).div(priceMagnitude);\r\n    }\r\n\r\n    function _getBuyFees(uint256 amount, address to, uint256 amountInUsdt) private view returns (uint256 devFee, uint256 fomoFee, uint256 divFee, uint256 liqFee) {\r\n        uint256 feeRate = _getBuyTaxRate(to, amountInUsdt);\r\n        devFee = amount.mul(feeRate).mul(25).div(1000000);\r\n        fomoFee = amount.mul(feeRate).mul(25).div(1000000);\r\n        divFee = amount.mul(feeRate).mul(30).div(1000000);\r\n        liqFee = amount.mul(feeRate).mul(20).div(1000000);\r\n    }\r\n\r\n    function _getBuyTaxRate(address to, uint256 amountInUsdt) public view returns (uint256) {\r\n\r\n        uint256 amountIn = amountInUsdt.div(10 ** 18);\r\n        if (amountInUsdt.mod(10 ** 18) > 5 * 10 ** 17) {\r\n            amountIn = amountIn.add(1);\r\n        }\r\n\r\n        if (accumulatePurchaseToday[to][0] != 0) {\r\n            uint256 today = block.timestamp.div(24 * 3600);\r\n            uint256 lastBuyDate = accumulatePurchaseToday[to][0];\r\n            if (today == lastBuyDate) {\r\n                amountIn += accumulatePurchaseToday[to][1];\r\n            }\r\n        }\r\n        uint256 toReturn;\r\n        if (amountIn <= buyTaxPrice) {\r\n            toReturn = 0;\r\n        } else if (amountIn > buyTaxPrice && amountIn <= buyTaxPrice.mul(3)) {\r\n            toReturn = _convertToBuySlippage(8);\r\n        } else if (amountIn > buyTaxPrice.mul(3) && amountIn <= buyTaxPrice.mul(10)) {\r\n            toReturn = _convertToBuySlippage(20);\r\n        } else if (amountIn > buyTaxPrice.mul(10) && amountIn <= buyTaxPrice.mul(30)) {\r\n            toReturn = _convertToBuySlippage(35);\r\n        } else {\r\n            toReturn = _convertToBuySlippage(highestBuyTaxRate);\r\n        }\r\n        \r\n        return toReturn;\r\n    }\r\n    \r\n    function _convertToBuySlippage(uint256 taxRate) private pure returns(uint256) {\r\n        return uint256(10000).sub(uint256(1000000).div(uint256(100).add(taxRate)));\r\n    }\r\n\r\n    function _distributeBuyFees(uint256 amount, address sender, address to, uint256 amountInUsdt) private returns (uint256 totalFee) {\r\n        (uint256 devFee, uint256 fomoFee, uint256 divFee, uint256 liqFee) = _getBuyFees(amount, to, amountInUsdt);\r\n\r\n        if  (devFee != 0) {\r\n            _balances[_devReceiver] = _balances[_devReceiver].add(devFee);\r\n            try IDividend(_divReceiver).setBalance(payable(_devReceiver), balanceOf(_devReceiver)) {} catch {}\r\n            emit Transfer(sender, _devReceiver, devFee);\r\n        }\r\n        if (fomoFee != 0) {\r\n            _balances[_fomoReceiver] = _balances[_fomoReceiver].add(fomoFee);\r\n             emit Transfer(sender, _fomoReceiver, fomoFee);\r\n        }\r\n        if (divFee != 0) {\r\n             _balances[_divReceiver] = _balances[_divReceiver].add(divFee);\r\n            emit Transfer(sender, _divReceiver, divFee);\r\n        }\r\n        if (liqFee != 0) {\r\n            _balances[blackhole] = _balances[blackhole].add(liqFee);\r\n            emit Transfer(sender, blackhole, liqFee);\r\n        }\r\n\r\n        return devFee.add(fomoFee).add(divFee).add(liqFee);\r\n    }\r\n\r\n    function _transferWithoutFee(address sender, address recipient, uint256 amount) private {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function swapFomo() public {\r\n        IFomo(_fomoReceiver).swap();\r\n    }\r\n\r\n    function _swapFomo() private {\r\n        uint256 fomoBal = balanceOf(_fomoReceiver);\r\n        uint256 fomoBalInUsdt = _getAmountOutUsdt(fomoBal);\r\n        if (fomoBalInUsdt >= minimumAmountToSwap) {\r\n            IFomo(_fomoReceiver).swap();\r\n        }\r\n    }\r\n    \r\n    function swapDividend() public {\r\n        IDividend(_divReceiver).swapAndDistributeDividends();\r\n    }\r\n    \r\n    function _swapDividend() private {\r\n        uint256 divBal = balanceOf(_divReceiver);\r\n        uint256 divBalInUsdt = _getAmountOutUsdt(divBal);\r\n        emit Logs('divBalInUsdt amount', address(0), divBalInUsdt);\r\n        if (divBalInUsdt >= minimumAmountToSwap) {\r\n            IDividend(_divReceiver).swapAndDistributeDividends();\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devRec\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"logName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"logAddrss\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longInt\",\"type\":\"uint256\"}],\"name\":\"Logs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_divReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fomoReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_getAmountInUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_getAmountOutUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getBasePriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInUsdt\",\"type\":\"uint256\"}],\"name\":\"_getBuyTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getSellTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accumulatePurchaseToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePriceTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackhole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccumulatePurchaseToday\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasePriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basePriceRate\",\"type\":\"uint256\"}],\"name\":\"getBuyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpPriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBuyTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestSellTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoSwapDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoSwapFomo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBasePriceTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmountToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pdcWbnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basePriceTimeInterval\",\"type\":\"uint256\"}],\"name\":\"setBasePriceTimeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTaxRate\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_div\",\"type\":\"address\"}],\"name\":\"setDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableFee\",\"type\":\"bool\"}],\"name\":\"setEnableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fomo\",\"type\":\"address\"}],\"name\":\"setFomo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestBuyTaxRate\",\"type\":\"uint256\"}],\"name\":\"setHighestBuyTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestSellTaxRate\",\"type\":\"uint256\"}],\"name\":\"setHighestSellTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAutoDividend\",\"type\":\"bool\"}],\"name\":\"setIsAutoDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAutoSwapDividend\",\"type\":\"bool\"}],\"name\":\"setIsAutoSwapDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAutoSwapFomo\",\"type\":\"bool\"}],\"name\":\"setIsAutoSwapFomo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumAmountToSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmountToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbnb\",\"type\":\"address\"}],\"name\":\"setWBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFomo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"switchOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtWbnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PoordogeCoin", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006fe78cfffb12b01fbe6205efc170510d68da9b8300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f1cb00dfb82024bf1227bb7b5695215c48853ad07b8c5bdf896c1f43d3d330c"}