{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-04-15\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Marketplace is Ownable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _itemId;\r\n\r\n    address constant MUQT = 0xfBf19d00e531cE896Bd631A19BEf74F4Bfe1D340;\r\n    address constant USDT = 0x55d398326f99059fF775485246999027B3197955; \r\n    uint256 public FEE_PERCENTAGE = 5;\r\n    uint256 public BURNING_PERCENTAGE = 6;\r\n    address FEE_RECIPIENT_ADDRESS; \r\n\r\n    constructor() {\r\n        FEE_RECIPIENT_ADDRESS = owner();\r\n    }\r\n\r\n    struct Item {\r\n        uint256 id;\r\n        address seller;\r\n        address tokenAddress;\r\n        uint256 price;\r\n        uint256 remainingTokens;\r\n        string uri;\r\n        bool isSold;\r\n    }\r\n\r\n    mapping(uint256 => Item) public items;\r\n    mapping(uint256 => bool) public itemIsListed; \r\n\r\n    event ItemListed(uint256 indexed itemId, address indexed seller, address tokenAddress, uint256 price, uint256 remainingTokens, string uri);\r\n    event ItemPriceEdited(uint256 indexed itemId, address indexed seller, uint256 newPrice);\r\n    event ItemSold(uint256 indexed itemId, address indexed buyer, address indexed seller, uint256 purchasedTokens, uint256 price, uint256 feeAmount, address tokenAddress);\r\n    event ItemRemoved(uint256 indexed itemId, address indexed seller, uint256 price);\r\n    event FeePercentageChanged(uint256 newPercentage);\r\n    event BurnPercentageChanged(uint256 newPercentage);\r\n\r\n    function changeFeePercentage(uint256 newPercentage) public onlyOwner {\r\n        FEE_PERCENTAGE = newPercentage;\r\n        emit FeePercentageChanged(newPercentage);\r\n    }\r\n\r\n    function changeBurningPercentage(uint256 newPercentage) public onlyOwner {\r\n        BURNING_PERCENTAGE = newPercentage;\r\n        emit BurnPercentageChanged(newPercentage);\r\n    }\r\n\r\n    function listItem(address tokenAddress, uint256 price, uint256 tokenAmount, string memory uri) public {\r\n        require(price > 0, \"Price must be greater than zero\");\r\n        require(\r\n            tokenAddress == MUQT,\r\n            \"Only MUQT is allowed for sale\"\r\n        );\r\n        require(tokenAmount > 0, \"Token amount must be greater than zero\");\r\n\r\n        _itemId.increment();\r\n        uint256 itemId = _itemId.current();\r\n\r\n        address seller = msg.sender;\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n\r\n        require(token.transferFrom(seller, address(this), tokenAmount), \"Token transfer failed\");\r\n\r\n        uint256 burnAmount = 0;\r\n        burnAmount = (tokenAmount * BURNING_PERCENTAGE) / 100;\r\n\r\n        uint256 listAmount = tokenAmount - burnAmount;\r\n\r\n        items[itemId] = Item(itemId, msg.sender, tokenAddress, price, listAmount, uri, false);\r\n        itemIsListed[itemId] = true; \r\n\r\n        emit ItemListed(itemId, msg.sender, tokenAddress, price, listAmount, uri);\r\n    }\r\n\r\n    function buyItem(uint256 itemId, uint256 tokenAmount) public {\r\n        Item storage item = items[itemId];\r\n        FEE_RECIPIENT_ADDRESS = owner();\r\n        require(itemIsListed[itemId] == true, \"Item not listed\");\r\n\r\n        require(!item.isSold, \"Item has already been sold\");\r\n        require(item.remainingTokens >= tokenAmount, \"Not enough tokens available\");\r\n        uint256 totalPrice = item.price * tokenAmount / (10**18);        \r\n        uint256 feeAmount = 0;\r\n        feeAmount = (totalPrice * FEE_PERCENTAGE) / 100;\r\n        uint256 sellerAmount = totalPrice - feeAmount;\r\n        require(IERC20(USDT).transferFrom(msg.sender, FEE_RECIPIENT_ADDRESS, feeAmount), \"Fee transfer failed\");\r\n        require(IERC20(USDT).transferFrom(msg.sender, item.seller, sellerAmount), \"Token transfer failed\");\r\n        require(IERC20(item.tokenAddress).transfer(msg.sender, tokenAmount), \"Token transfer failed\");\r\n\r\n        item.remainingTokens -= tokenAmount;\r\n\r\n        if (item.remainingTokens == 0) {\r\n            item.isSold = true;\r\n            itemIsListed[itemId] = false; \r\n        }\r\n\r\n        emit ItemSold(itemId, msg.sender, item.seller, tokenAmount, item.price, feeAmount, item.tokenAddress);\r\n    }\r\n\r\n    function editItemPrice(uint256 itemId, uint256 newPrice) public {\r\n        require(itemIsListed[itemId] == true, \"Item not listed\");\r\n        require(items[itemId].seller == msg.sender, \"Only the seller can edit the price\");\r\n\r\n        items[itemId].price = newPrice;\r\n\r\n        emit ItemPriceEdited(itemId, msg.sender, newPrice);\r\n    }\r\n\r\n    function removeItem(uint256 listingid) public {\r\n        Item storage item = items[listingid];\r\n        \r\n        require(itemIsListed[listingid] == true, \"Item not listed\");\r\n        \r\n        require(item.seller == msg.sender, \"Only the seller can remove an item\");\r\n        \r\n        IERC20 token = IERC20(item.tokenAddress);\r\n        \r\n        require(token.transfer(item.seller, item.remainingTokens), \"Token transfer failed\");\r\n\r\n        delete items[listingid];\r\n        itemIsListed[listingid] = false; \r\n\r\n        emit ItemRemoved(listingid, item.seller, item.price);\r\n    }\r\n\r\n    function getItemsBySeller(address seller) public view returns (Item[] memory) {\r\n        uint256 itemCount = 0;\r\n        for (uint256 i = 1; i <= _itemId.current(); i++) {\r\n            if (items[i].seller == seller) {\r\n                itemCount++;\r\n            }\r\n        }\r\n\r\n        Item[] memory result = new Item[](itemCount);\r\n        itemCount = 0;\r\n\r\n        for (uint256 i = 1; i <= _itemId.current(); i++) {\r\n            if (items[i].seller == seller) {\r\n                result[itemCount] = items[i];\r\n                itemCount++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getAvailableItems() public view returns (Item[] memory) {\r\n        uint256 itemCount = 0;\r\n        for (uint256 i = 1; i <= _itemId.current(); i++) {\r\n            if (!items[i].isSold) {\r\n                itemCount++;\r\n            }\r\n        }\r\n\r\n        Item[] memory result = new Item[](itemCount);\r\n        itemCount = 0;\r\n\r\n        for (uint256 i = 1; i <= _itemId.current(); i++) {\r\n            if (!items[i].isSold) {\r\n                result[itemCount] = items[i];\r\n                itemCount++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"BurnPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"FeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ItemPriceEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNING_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"changeBurningPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"changeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"editItemPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getItemsBySeller\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIsListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingid\",\"type\":\"uint256\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a070c6d1acc9a09814393c3fee874a49a278b2734b0e8e9331f90c5d26440e3f"}