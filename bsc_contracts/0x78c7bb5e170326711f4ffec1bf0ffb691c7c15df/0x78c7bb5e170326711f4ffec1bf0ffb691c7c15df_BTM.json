{"SourceCode": "pragma solidity =0.6.6;\r\n\r\n// safe math\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"Math error\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n// owner\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'BTM: owner error');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    // renounce owner\r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// operator\r\ncontract Operator {\r\n    address public operator;\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, 'BTM: operator error');\r\n        _;\r\n    }\r\n\r\n    function transferOperator(address newOperator) public onlyOperator {\r\n        if (newOperator != address(0)) {\r\n            operator = newOperator;\r\n        }\r\n    }\r\n}\r\n\r\n// erc20\r\ninterface IERC20 {\r\n    function balanceOf(address _address) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// BTM \r\ninterface IBTM is IERC20 {\r\n    function tokenRewardsFee() external view returns (uint256);\r\n    function linkedinFee() external view returns (uint256);\r\n    function liquidityFee() external view returns (uint256);\r\n    function marketingFee() external view returns (uint256);\r\n    function totalFees() external view returns (uint256);\r\n    function getAllFees() external view returns (uint256, uint256, uint256, uint256);\r\n\r\n    function superAddress(address _address) external view returns (address);\r\n    function juniorAmount(address _address) external view returns (uint256);\r\n    function juniorAddress(address _address) external view returns (address[] memory _addrs);\r\n    function getLinkedinAddrs(address _address) external view returns (address[] memory _addrs);\r\n\r\n    event BoundLinkedin(address from, address to);\r\n}\r\n\r\n// \u63a5\u53e3\r\ninterface IDividendTracker {\r\n    function initialization() external payable;\r\n    function btmSwapBtc() external; // \u5168\u90e8BTM\u5151\u6362\u6210BTC\r\n    function dividendRewards(address _from, uint256 _dividendBtmAmount) external; // \u5206\u7ea2\r\n    function addOrRemoveKey(address _from, uint256 _fromBalances, address _to, uint256 _toBalances) external;\r\n}\r\n\r\n// \u4e3b\u5408\u7ea6\r\ncontract BTM is IBTM, Ownable, Operator {\r\n    using SafeMath for uint256;\r\n\r\n    // tracker\u5408\u7ea6\u5730\u5740, \u5206\u7ea2\u5408\u7ea6\u3002\r\n    address public dividendTracker;\r\n\r\n    uint256 private _tokenRewardsFee = 5; // \u6301\u5e01\u5206\u7ea2\r\n    uint256 private _linkedinFee = 1; // \u4e0a\u4e0b\u7ea7\u5206\u7ea2\r\n    uint256 private _liquidityFee = 4; // \u6d41\u52a8\u6027\u5206\u7ea2\r\n    uint256 private _marketingFee = 2; // 2%\u8fd0\u8425\u65b9\u5206\u7ea2\r\n    uint256 private _totalFees = _tokenRewardsFee + _linkedinFee + _liquidityFee + _marketingFee; // \u603b\u7684\r\n\r\n    // \u6bcf\u4e2a\u5730\u5740\u6301\u5e01\u6570\u91cf\u7684\u4e0a\u9650\u3002\r\n    uint256 public tokenLimit = 3 * 10**uint256(decimals);\r\n    // \u4ea4\u6613\u6700\u4f4e\u6570\u91cf\u624d\u4f1a\u8fdb\u884c\u5173\u7cfb\u7ed1\u5b9a\r\n    uint256 public boundLinkedinMinAmount = 1 * (10**15); // 0.001\r\n    // \u6301\u5e01\u6570\u91cf\u4e0d\u53d7\u9650\u5236\u7684\u5730\u5740\u3002\u7279\u6b8a\u5730\u5740\u6301\u5e01\u4e0d\u53d7\u9650\u5236, \u5982\u914d\u5bf9\u5408\u7ea6, \u8def\u7531\u5408\u7ea6, \u4ee5\u53ca\u8fd0\u8425\u65b9\u5730\u5740\r\n    mapping(address => bool) public notLimitAddress;\r\n    // \u4ea4\u6613\u4e0d\u6263\u624b\u7eed\u8d39\u7684\u5730\u5740\u3002\u4efb\u4f55\u4ea4\u6613\u90fd\u4f1a\u6263\u9664\u624b\u7eed\u8d39, \u9664\u975e\u8bbe\u7f6e\u5730\u5740\u4e3atrue\r\n    mapping(address => bool) public notFeeAddress;\r\n    mapping(address => address) private _superAddress; // \u4e0a\u7ea7\u5730\u5740\r\n    mapping(address => address[]) private _juniorAddress; // \u591a\u4e2a\u4e0b\u7ea7\u5730\u5740\r\n    address private _firstOwner; // \u7b2c\u4e00\u4e2a\u62e5\u6709\u4ee3\u5e01\u7684\u4eba\u4e0d\u80fd\u62e5\u6709\u4e0a\u7ea7\r\n\r\n    string public name;    // \u540d\u5b57BTM\r\n    string public symbol;  // \u7b80\u79f0BTM\r\n    uint8 constant public decimals = 18;    // \u5c0f\u6570\u4f4d\r\n    uint256 constant public totalSupply = 2100 * 10**uint256(decimals);  // \u603b\u91cf\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n\r\n    // \u6784\u9020\u51fd\u6570\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _owner,\r\n        address _operator,\r\n        address _dividendTracker\r\n    ) public payable {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        owner = _owner;\r\n        operator = _operator;\r\n        dividendTracker = _dividendTracker;\r\n        balances[owner] = totalSupply;\r\n        \r\n        _firstOwner = owner;\r\n        notLimitAddress[owner] = true;  // \u7ba1\u7406\u5458\u6301\u5e01\u4e0d\u53d7\u9650\u5236\r\n        notFeeAddress[owner] = true;    // \u7ba1\u7406\u5458\u4e0d\u6263\u624b\u7eed\u8d39\r\n        notFeeAddress[dividendTracker] = true;  // \u5206\u7ea2\u5408\u7ea6\u4e0d\u6263\u624b\u7eed\u8d39\r\n        emit Transfer(address(0), owner, totalSupply);\r\n        IDividendTracker(dividendTracker).initialization{value: msg.value}(); // \u521d\u59cb\u5316\u7ed1\u5b9a\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u5206\u7ea2\u7684\u767e\u5206\u6bd4\r\n    function setFee(uint256 tokenRewardsFee_, uint256 linkedinFee_, uint256 liquidityFee_, uint256 marketingFee_) public onlyOperator {\r\n        _tokenRewardsFee = tokenRewardsFee_;\r\n        _linkedinFee = linkedinFee_;\r\n        _liquidityFee = liquidityFee_;\r\n        _marketingFee = marketingFee_;\r\n        _totalFees = _tokenRewardsFee + _linkedinFee + _liquidityFee + _marketingFee;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u5206\u7ea2\u5408\u7ea6\u5730\u5740\r\n    function setDividendTracker(address _dividendTracker) public onlyOperator {\r\n        dividendTracker = _dividendTracker;\r\n    }\r\n    // \u8bbe\u7f6e\u6301\u5e01\u4e0a\u9650\u7684\u6570\u91cf\r\n    function setTokenLimit(uint256 _tokenLimit) public onlyOperator {\r\n        tokenLimit = _tokenLimit;\r\n    }\r\n    // \u8bbe\u7f6e\u7ed1\u5b9a\u5173\u7cfb\u9700\u4ea4\u6613\u7684\u6700\u5c0f\u6570\u91cf\r\n    function setBoundLinkedinMinAmount(uint256 _boundLinkedinMinAmount) public onlyOperator {\r\n        boundLinkedinMinAmount = _boundLinkedinMinAmount;\r\n    }\r\n    // \u8bbe\u7f6e\u6301\u5e01\u6570\u91cf\u4e0d\u53d7\u9650\u5236\u7684\u5730\u5740\r\n    function setNotLimitAddress(address _address) public onlyOperator {\r\n        notLimitAddress[_address] = !notLimitAddress[_address];\r\n    }\r\n    // \u8bbe\u7f6e\u4ea4\u6613\u4e0d\u6263\u624b\u7eed\u8d39\u7684\u5730\u5740\r\n    function setNotFeeAddress(address _address) public onlyOperator {\r\n        notFeeAddress[_address] = !notFeeAddress[_address];\r\n    }\r\n\r\n\r\n    function balanceOf(address _address) external view override returns (uint256) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _value) private {\r\n        allowed[_owner][_spender] = _value;\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public override returns (bool) {\r\n        _approve(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) private {\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _transferFull(address _from, address _to, uint256 _value) private {\r\n        if(notFeeAddress[_from]) {\r\n            // \u4e0d\u6263\u624b\u7eed\u8d39\r\n            _transfer(_from, _to, _value);\r\n        }else {\r\n            // \u6263\u624b\u7eed\u8d39\r\n            uint256 _fee = _value.mul(_totalFees).div(100);\r\n            uint256 _val = _value.sub(_fee);\r\n            _transfer(_from, dividendTracker, _fee);\r\n            _transfer(_from, _to, _val);\r\n            if(!isContract(_from) && !isContract(_to)) {\r\n                // \u5151\u6362\r\n                try IDividendTracker(dividendTracker).btmSwapBtc() {} catch {}\r\n            }\r\n\r\n            address _from2;\r\n            if(!isContract(_from)) {\r\n                _from2 = _from;\r\n            }else if(!isContract(_to)) {\r\n                _from2 = _to;\r\n            }else{\r\n                _from2 = tx.origin;\r\n            }\r\n                // \u5206\u7ea2\r\n            try IDividendTracker(dividendTracker).dividendRewards(_from2, _fee) {} catch {}\r\n        }\r\n        // \u589e\u52a0\u6216\u79fb\u9664\u5206\u7ea2\u5730\u5740\r\n        try IDividendTracker(dividendTracker).addOrRemoveKey(_from, balances[_from], _to, balances[_to]) {} catch {}\r\n\r\n        if(_value >= boundLinkedinMinAmount) boundLinkedin(_from, _to); // \u7ed1\u5b9a\u5173\u7cfb\r\n        verifyTokenLimit(_to); // \u4ea4\u6613\u4f59\u989d\u4e0a\u9650\u9a8c\u8bc1\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public override returns (bool) {\r\n        require(_to != address(0), 'BTM: 0address error'); // \u4e0d\u80fd\u4ea4\u66130\u5730\u5740\r\n        require(balances[msg.sender] >= _value, 'BTM: balance error'); // \u91d1\u989d\u9700\u8981\u8db3\u591f\r\n        _transferFull(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n        require(_to != address(0), 'BTM: 0address error'); // \u4e0d\u80fd\u4ea4\u66130\u5730\u5740\r\n        require(balances[_from] >= _value, 'BTM: balance error'); // \u91d1\u989d\u9700\u8981\u8db3\u591f\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n       _transferFull(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // \u5224\u65ad\u662f\u4e0d\u662f\u5408\u7ea6\u5730\u5740\r\n    // \u8fd4\u56de\u503ctrue=\u5408\u7ea6, false=\u666e\u901a\u5730\u5740\u3002\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    // \u6301\u5e01\u4e0a\u9650\u7684\u9a8c\u8bc1\r\n    // \u5982\u679c\u89e6\u53d1\u4e0a\u9650, \u5c06\u4f1a\u629b\u51fa\u9519\u8bef, \u7ec8\u7ed3\u4ea4\u6613\u3002\r\n    function verifyTokenLimit(address _toAdress) internal view {\r\n        // \u5fc5\u987b\u662f\u5408\u7ea6 || \u5fc5\u987b\u662f\u4e0d\u53d7\u4e0a\u9650\u5730\u5740 || \u5fc5\u987b\u4f59\u989d<=\u4f59\u989d\u4e0a\u9650\u9650\u5236\r\n        require(isContract(_toAdress) || notLimitAddress[_toAdress] || balances[_toAdress] <= tokenLimit, 'BTM: balance limit');\r\n    }\r\n\r\n    // \u67e5\u8be2\u6301\u5e01\u5206\u7ea2. \u4e0a\u4e0b\u7ea7\u5206\u7ea2. \u6d41\u52a8\u6027\u5206\u7ea2. \u8fd0\u8425\u65b9\u5206\u7ea2. \u603b\u7684\r\n    function tokenRewardsFee() public view override returns (uint256) {\r\n        return _tokenRewardsFee;\r\n    }\r\n    function linkedinFee() public view override returns (uint256) {\r\n        return _linkedinFee;\r\n    }\r\n    function liquidityFee() public view override returns (uint256) {\r\n        return _liquidityFee;\r\n    }\r\n    function marketingFee() public view override returns (uint256) {\r\n        return _marketingFee;\r\n    }\r\n    function totalFees() public view override returns (uint256) {\r\n        return _totalFees;\r\n    }\r\n    // \u8fd4\u56de\u5168\u90e8\u7684\r\n    function getAllFees() public view override returns (uint256, uint256, uint256, uint256) {\r\n        return (_tokenRewardsFee, _linkedinFee, _liquidityFee, _marketingFee);\r\n    }\r\n\r\n    // \u7ed1\u5b9a\u5173\u7cfb\r\n    function boundLinkedin(address _from, address _to) private {\r\n        if(_to == _firstOwner) {\r\n            return;   // \u7b2c\u4e00\u4e2a\u94f8\u9020\u4ee3\u5e01\u7684\u4eba, \u4e0d\u80fd\u62e5\u6709\u4e0a\u7ea7\u3002\r\n        }\r\n        if(isContract(_from) || isContract(_to) || _from == _to) {\r\n            return;   // \u4e0d\u80fd\u548c\u5408\u7ea6\u7ed1\u5b9a\u5173\u7cfb, \u4e0d\u80fd\u548c\u81ea\u5df1\u7ed1\u5b9a\u5173\u7cfb\u3002\r\n        }\r\n        // \u5982\u679cto\u5730\u5740\u6ca1\u6709\u4e0a\u7ea7\r\n        if(_superAddress[_to] == address(0)) {\r\n            _superAddress[_to] = _from;\r\n            _juniorAddress[_from].push(_to);\r\n            emit BoundLinkedin(_from, _to); // \u89e6\u53d1\u4e8b\u4ef6\r\n        }\r\n    }\r\n\r\n    // \u67e5\u8be2\u4e0a\u7ea7\u5730\u5740\r\n    function superAddress(address _address) public view override returns (address) {\r\n        return _superAddress[_address];\r\n    }\r\n\r\n    // \u67e5\u8be2\u4e0b\u7ea7\u6570\u91cf\r\n    function juniorAmount(address _address) public view override returns (uint256) {\r\n        return _juniorAddress[_address].length;\r\n    }\r\n\r\n    // \u67e5\u8be2\u5168\u90e8\u7684\u4e0b\u7ea7\u5730\u5740\r\n    function juniorAddress(address _address) public view override returns (address[] memory _addrs) {\r\n        uint256 _length = _juniorAddress[_address].length;\r\n        _addrs = new address[](_length);\r\n        for(uint256 i = 0; i < _length; i++) {\r\n            _addrs[i] = _juniorAddress[_address][i];\r\n        }\r\n    }\r\n\r\n    // \u67e5\u8be2\u8981\u5206\u7ea2\u76848\u4e2a\u5173\u7cfb\u5730\u5740\r\n    function getLinkedinAddrs(address _address) public view override returns (address[] memory _addrs) {\r\n        _addrs = new address[](8);\r\n        address _superNow = _address;\r\n        address _juniorNow = _address;\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n            if(i < 5) {\r\n                // \u4e0a\u4e94\u7ea7\r\n                _addrs[i] = _superAddress[_superNow];\r\n                _superNow = _addrs[i];\r\n            }else {\r\n                // \u4e0b\u4e09\u7ea7\r\n                if(_juniorAddress[_juniorNow].length > 0) {\r\n                    uint256 _index = radomNumber(_juniorAddress[_juniorNow].length);\r\n                    _addrs[i] = _juniorAddress[_juniorNow][_index];\r\n                    _juniorNow = _addrs[i];\r\n                }else {\r\n                    // \u6ca1\u6709\u4e0b\u7ea7\r\n                    _addrs[i] = address(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // \u968f\u673a\u751f\u6210\u4e00\u4e2a\u533a\u95f4\u6570, [0-max)\r\n    function radomNumber(uint256 _max) internal view returns(uint256) {\r\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % _max;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividendTracker\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BoundLinkedin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boundLinkedinMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLinkedinAddrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"juniorAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"juniorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkedinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notLimitAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boundLinkedinMinAmount\",\"type\":\"uint256\"}],\"name\":\"setBoundLinkedinMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dividendTracker\",\"type\":\"address\"}],\"name\":\"setDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenRewardsFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"linkedinFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNotFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNotLimitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenLimit\",\"type\":\"uint256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"superAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BTM", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000008e4dc6e6d990efcf2dad6737afa3877ce5aa28b7000000000000000000000000c42845c14b9acca3c3ec4d1d6de25a9a779ed1f600000000000000000000000093c7ab7e4eea3ea11069522f160f6391b56d0054000000000000000000000000000000000000000000000000000000000000000342544d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342544d0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://097b9d60b2f9ec7ea5fe6c5e414492eb1ec67a42c8ca11a5403696687b56a150"}