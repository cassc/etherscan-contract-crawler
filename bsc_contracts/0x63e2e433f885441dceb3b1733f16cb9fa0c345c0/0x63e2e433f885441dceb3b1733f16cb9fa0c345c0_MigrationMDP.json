{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MigrationMDP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPetCore {\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\n\\n    function transfer(address _to, uint256 _tokenId) external;\\n\\n    function PetIndexToApproved(\\n        uint256 _tokenId\\n    ) external view returns (address operator);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n}\\n\\ncontract MigrationMDP is Ownable {\\n    struct MigrationInfo {\\n        uint256 totalv1;\\n        uint256 totalv2;\\n    }\\n\\n    struct TokenInfo {\\n        address owner;\\n        bool exists;\\n    }\\n\\n    mapping(address => MigrationInfo) public migrationInfo;\\n    mapping(uint256 => TokenInfo) v1Token;\\n    mapping(uint256 => TokenInfo) v2Token;\\n\\n    address private contractV1;\\n    address private contractV2;\\n    IPetCore public v1;\\n    IPetCore public v2;\\n    uint8 public season;\\n    uint256 public timeStartMigration;\\n    uint256 public timeEndMigration;\\n    uint256 public totalMigration;\\n    uint256 public v1Migrated;\\n    uint256 public v2Migrated;\\n\\n    modifier onlyMigration() {\\n        require(\\n            block.timestamp >= timeStartMigration &&\\n                block.timestamp < timeEndMigration,\\n            \\\"Can not migration now\\\"\\n        );\\n        _;\\n    }\\n\\n    event Migration(\\n        address indexed addr,\\n        uint256 tokenId,\\n        address addrContract,\\n        uint256 season\\n    );\\n    event EmergencyReturn(\\n        address indexed addr,\\n        uint256 tokenId,\\n        address addrContract,\\n        uint256 season\\n    );\\n\\n    constructor(address dpetV1, address dpetV2) {\\n        v1 = IPetCore(dpetV1);\\n        v2 = IPetCore(dpetV2);\\n        contractV1 = dpetV1;\\n        contractV2 = dpetV2;\\n        timeStartMigration = 1696561200;\\n        timeEndMigration = 1697684400;\\n        season = 1;\\n    }\\n\\n    function migration(uint256 tokenId, bool isV1) external onlyMigration {\\n        totalMigration++;\\n        if (isV1) {\\n            require(!v1Token[tokenId].exists, \\\"Token has migrated\\\");\\n            require(\\n                v1.PetIndexToApproved(tokenId) == address(this),\\n                \\\"Need Approve Token for this contract\\\"\\n            );\\n            v1.transferFrom(msg.sender, address(this), tokenId);\\n            migrationInfo[msg.sender].totalv1++;\\n            v1Token[tokenId].owner = msg.sender;\\n            v1Token[tokenId].exists = true;\\n            v1Migrated++;\\n            emit Migration(msg.sender, tokenId, contractV1, season);\\n        } else {\\n            require(!v2Token[tokenId].exists, \\\"Token has migrated\\\");\\n            require(\\n                v2.getApproved(tokenId) == address(this),\\n                \\\"Need Approve Token for this contract\\\"\\n            );\\n            v2.transferFrom(msg.sender, address(this), tokenId);\\n            migrationInfo[msg.sender].totalv2++;\\n            v2Token[tokenId].owner = msg.sender;\\n            v2Token[tokenId].exists = true;\\n            v2Migrated++;\\n            emit Migration(msg.sender, tokenId, contractV2, season);\\n        }\\n    }\\n\\n    function setTimeMigration(\\n        uint256 _timeStartMigration,\\n        uint256 _timeEndMigration,\\n        uint8 _season\\n    ) external onlyOwner {\\n        timeStartMigration = _timeStartMigration;\\n        timeEndMigration = _timeEndMigration;\\n        season = _season;\\n    }\\n\\n    function isReady() public view returns (bool) {\\n        return (block.timestamp >= timeStartMigration &&\\n            block.timestamp < timeEndMigration);\\n    }\\n\\n    function checkTokenExists(\\n        uint256 tokenId,\\n        bool isV1\\n    ) public view returns (bool) {\\n        if (isV1) {\\n            return v1Token[tokenId].exists;\\n        } else {\\n            return v2Token[tokenId].exists;\\n        }\\n    }\\n\\n    function emergencyReturnV1(uint256[] memory arrTokenV1) external onlyOwner {\\n        require(\\n            arrTokenV1.length > 0 && arrTokenV1.length < 20,\\n            \\\"Invalid tokenId array\\\"\\n        );\\n        for (uint i = 0; i < arrTokenV1.length; i++) {\\n            uint256 tokenId = arrTokenV1[i];\\n            require(v1Token[tokenId].exists, \\\"Token not exists\\\");\\n            v1.transfer(v1Token[tokenId].owner, tokenId);\\n            v1Token[tokenId].exists = false;\\n            migrationInfo[v1Token[tokenId].owner].totalv1--;\\n            v1Migrated--;\\n            totalMigration--;\\n            emit EmergencyReturn(\\n                v1Token[tokenId].owner,\\n                tokenId,\\n                contractV1,\\n                season\\n            );\\n        }\\n    }\\n\\n    function emergencyReturnV2(uint256[] memory arrTokenV2) external onlyOwner {\\n        require(\\n            arrTokenV2.length > 0 && arrTokenV2.length < 20,\\n            \\\"Invalid tokenId array\\\"\\n        );\\n        for (uint i = 0; i < arrTokenV2.length; i++) {\\n            uint256 tokenId = arrTokenV2[i];\\n            require(v2Token[tokenId].exists, \\\"Token not exists\\\");\\n            v2.transferFrom(address(this), v2Token[tokenId].owner, tokenId);\\n            v2Token[tokenId].exists = false;\\n            migrationInfo[v2Token[tokenId].owner].totalv2--;\\n            v2Migrated--;\\n            totalMigration--;\\n            emit EmergencyReturn(\\n                v2Token[tokenId].owner,\\n                tokenId,\\n                contractV2,\\n                season\\n            );\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dpetV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dpetV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addrContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"EmergencyReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addrContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isV1\",\"type\":\"bool\"}],\"name\":\"checkTokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arrTokenV1\",\"type\":\"uint256[]\"}],\"name\":\"emergencyReturnV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arrTokenV2\",\"type\":\"uint256[]\"}],\"name\":\"emergencyReturnV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isV1\",\"type\":\"bool\"}],\"name\":\"migration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalv2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"season\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeStartMigration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeEndMigration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_season\",\"type\":\"uint8\"}],\"name\":\"setTimeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEndMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeStartMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1\",\"outputs\":[{\"internalType\":\"contract IPetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Migrated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2\",\"outputs\":[{\"internalType\":\"contract IPetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Migrated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MigrationMDP", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ea2e87ff1bc1e52b640452694e2f143f7f8d64be0000000000000000000000004f3110435c9626418063add7897f08088838fc8b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}