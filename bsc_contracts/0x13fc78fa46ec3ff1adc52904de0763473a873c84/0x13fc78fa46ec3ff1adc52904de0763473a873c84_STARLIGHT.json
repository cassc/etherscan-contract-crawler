{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b);\r\n        // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Recv {\r\n    IERC20 public token520 = IERC20(msg.sender);\r\n    IERC20 public usdt;\r\n\r\n    constructor ()  {\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance > 0) {\r\n            usdt.transfer(address(token520), usdtBalance);\r\n        }\r\n        uint256 token520Balance = token520.balanceOf(address(this));\r\n        if (token520Balance > 0) {\r\n            token520.transfer(address(token520), token520Balance);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function sync() external;\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _op;\r\n    address private _dever;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _op = msgSender;\r\n        _dever = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOp() {\r\n        require(_op == _msgSender(), \"Ownable: caller is not the op\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDever() {\r\n        require(_dever == _msgSender(), \"Ownable: caller is not the dever\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferOp(address newOp) public virtual onlyOwner {\r\n        require(\r\n            newOp != address(0),\r\n            \"Ownable: new op is the zero address\"\r\n        );\r\n        _op = newOp;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n  \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\n\r\ninterface StarLightHDiv {\r\n    function getBuyAmount(address sender,address recipient,uint256 amount) external returns (uint256);\r\n    function distributeReward(uint256 amount) external;\r\n    function proc(address addr)  external ;\r\n}\r\n\r\ncontract STARLIGHT is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    mapping(address => address) public inviter;\r\n    mapping(address => bool)    public inviterBlack;\r\n    mapping(address => uint256) public inviteValidNum;\r\n    mapping(address => uint256) public inviterLockTime;\r\n    \r\n    mapping(address => bool) public isNodes;\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public inviteNeedActive;\r\n    mapping(address => bool) public isInviteActive;\r\n    mapping(address => bool) public isValidAddr;\r\n    mapping(address => bool) public isVentureAddr;\r\n    mapping(address => uint256) public ventureAmount;\r\n    mapping(address => uint256) public ventureReleaseTimes;\r\n    mapping(address => bool) private isDeliver;\r\n    mapping(address => bool) private isWhiteAddr;\r\n    mapping(address => uint256) private WhiteLimit;\r\n    mapping(address => bool) public isBot;\r\n    mapping(address => uint256) public botIndex;\r\n    address[] public botAddrs;\r\n    address[] public nodes;\r\n    bool public    isLaunch = false;\r\n    uint256 public startTime;\r\n    uint256 public inviterRequireLockTime;\r\n    address public _pair;\r\n    uint256 public referThreshold = 0;\r\n\r\n    address public recvAddress;\r\n    address public techAddress;\r\n    address public daoAddress;\r\n    address public creationAddress;\r\n    address public lpDivAddress;\r\n    address public sysWAddress;\r\n    address public sysAddress; \r\n    address public sysMAddress  = address(0x0000000000000000000000000000000000000adD);\r\n    address public luck2Address = address(0x0000000000000000000000000000000000000099);\r\n    address public luck3Address = address(0x0000000000000000000000000000000000000999);\r\n    address public luck4Address = address(0x0000000000000000000000000000000000009999);\r\n    address public  deadAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    address public _router      = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public usdt         = address(0x55d398326f99059fF775485246999027B3197955);\r\n    mapping(uint256 => address[]) public rounds;\r\n    mapping(uint256 => mapping(address => uint256)) public rNodeRewards;\r\n    mapping(uint256 => address[]) public roundNodes;\r\n    mapping(uint256 => mapping(address => bool)) public roundNodePush;\r\n    mapping(uint256 => mapping(address => bool)) public isRoundValid;\r\n    mapping(uint256 => address[]) public hourAddrs;\r\n    uint256 public hourStartTime;\r\n    uint256 public roundIndex = 0;\r\n    uint256 private enterCount = 0;\r\n    uint256 public superNodeNum = 21;\r\n    StarLightHDiv slhd;\r\n    Recv   RECV;\r\n    //buy fees 10%\r\n    uint256  public referFee = 3;\r\n    uint256  public nodeFee = 2;\r\n    uint256  public superNodeFee = 1;\r\n    uint256  public holdDivFee = 3;\r\n    uint256  public techFee = 1;\r\n    uint256  public priFee = 20;\r\n    //sell fees 10%\r\n    uint256 public lucky2Fee = 1;\r\n    uint256 public lucky3Fee = 2;\r\n    uint256 public lucky4Fee = 3;\r\n    uint256 public hourFee = 1;\r\n    uint256 public daoFee = 1;\r\n    uint256 public lpDivFee = 1;\r\n    uint256 public destroyFee = 1;\r\n    address[] public buyluck2Addrs;\r\n    address[] public buyluck3Addrs;\r\n    address[] public buyluck4Addrs;\r\n    uint256[] public buyluck2FAmounts;\r\n    uint256[] public buyluck3FAmounts;\r\n    uint256[] public buyluck4FAmounts;\r\n    uint256[] public buyluck2Num;\r\n    uint256[] public buyluck3Num;\r\n    uint256[] public buyluck4Num;\r\n    uint256[] public luck2Index;\r\n    uint256[] public luck3Index;\r\n    uint256[] public luck4Index;\r\n    uint256[] public luck2RAmount;\r\n    uint256[] public luck3RAmount;\r\n    uint256[] public luck4RAmount;\r\n    \r\n    uint256 public luck2FeeTotal;\r\n    uint256 public luck3FeeTotal;\r\n    uint256 public luck4FeeTotal;\r\n\r\n    bool private swapping;\r\n\r\n    uint256 public haveRRThreshold =  100 * 10**18;\r\n\r\n    uint256 public buyBase = 10**18;\r\n\r\n    uint256 public whiteThres = 1000 * buyBase;\r\n\r\n    uint256 public inviteActiveUsdt = 100 * buyBase;\r\n\r\n    uint256 public validAddrUsdt = 100 * buyBase;\r\n\r\n    uint256 public hourAddrUsdt = 300 * buyBase;\r\n\r\n    uint256 public hourtime = 1 hours;\r\n    uint256 public superNodeTime = 14 days;\r\n    uint256 public inviteValidThres = 100;\r\n    uint256 public hourNum = 3;\r\n\r\n    uint256 public superNodeStartTime = 0;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool whiteEnable = false;\r\n    uint256 whiteEnableTime;\r\n\r\n    uint256 constant  oneDay = 1 days;\r\n    uint256 releaseEndTime = 0;\r\n    uint256 cReleaseEndTime = 0 ;\r\n    uint256 cReleaseTime = 0 ;\r\n    uint256 releaseStartTime = 0 ;\r\n\r\n    modifier transferCounter {\r\n        enterCount = enterCount.add(1);\r\n        _;\r\n        enterCount = enterCount.sub(1, \"transfer counter\");\r\n    }\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n\r\n    constructor(address _recvAddress, address _techAddress ,address _daoAddress,address _creationAddress,address _lpDivAddress,address _sysWAddress,address _sysAddress) {\r\n        _name = \"LIGHT\";\r\n        _symbol = \"LIGHT\";\r\n        recvAddress =  _recvAddress;\r\n        techAddress =  _techAddress;\r\n        daoAddress =  _daoAddress;\r\n        creationAddress = _creationAddress;\r\n        lpDivAddress = _lpDivAddress;\r\n        sysWAddress = _sysWAddress;\r\n        sysAddress = _sysAddress;\r\n        _mint(recvAddress, 75000000 * 10**18);\r\n        _mint(sysMAddress,25000000 * 10**18);\r\n        IPancakeRouter router = IPancakeRouter(_router);\r\n        _pair = IPancakeFactory(router.factory()).createPair(\r\n            address(this),\r\n            usdt\r\n        );\r\n        RECV = new Recv();\r\n        _approve(address(this), address(_router), uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        isExcludedFromFee[_router] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[recvAddress] = true;\r\n        isExcludedFromFee[techAddress] = true;\r\n        isExcludedFromFee[daoAddress] = true;\r\n        isExcludedFromFee[creationAddress] = true;\r\n        isExcludedFromFee[lpDivAddress] = true;  \r\n        isExcludedFromFee[sysWAddress] = true;\r\n        isExcludedFromFee[sysAddress] = true;  \r\n        inviterRequireLockTime = 60;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function setHaveRRThreshold(uint256 amount) public onlyOwner{\r\n        require(amount <= 100000000 * 10**18);\r\n        haveRRThreshold = amount;\r\n    }\r\n\r\n    function setPriFee(uint256 _priFee) public onlyOwner{\r\n        priFee = _priFee;\r\n    }\r\n\r\n    function setSLHD(address _slhd) public onlyOwner{\r\n        if(address(slhd) != address(0)) setDeliver(address(slhd),false);\r\n        slhd = StarLightHDiv(_slhd);\r\n        setDeliver(address(slhd),true);\r\n    }\r\n\r\n    function Launch() public onlyOwner {\r\n        require(!isLaunch);\r\n        isLaunch = true;\r\n        startTime = block.timestamp;\r\n        superNodeStartTime = block.timestamp;\r\n        hourStartTime = block.timestamp;\r\n        cReleaseTime = block.timestamp.sub(oneDay);\r\n        releaseStartTime = block.timestamp.sub(oneDay);\r\n        releaseEndTime = releaseStartTime.add(20 * oneDay);\r\n        cReleaseEndTime = cReleaseTime.add(365 * oneDay);\r\n        \r\n    }\r\n\r\n    function addBot(address account) private {\r\n        if (!isBot[account]){\r\n         isBot[account] = true;\r\n         botIndex[account] = botAddrs.length;\r\n         botAddrs.push(account);\r\n        }\r\n    }\r\n\r\n    function exBot(address account) external onlyOwner {\r\n        if(isBot[account]){\r\n         isBot[account] = false;\r\n         botAddrs[botIndex[account]] = botAddrs[botAddrs.length-1];\r\n         botAddrs.pop();\r\n        }\r\n    }\r\n\r\n    function setReferThreshold(uint256 thres) public onlyOwner{\r\n        require(thres <= 100000000 * 10**18);\r\n        referThreshold = thres;\r\n    }\r\n\r\n    function setWhiteAddress(address[] memory accounts, bool isWL) public onlyOwner {\r\n        for(uint256 i = 0 ; i <accounts.length;i++){\r\n            isWhiteAddr[accounts[i]] = isWL;\r\n        }\r\n    }\r\n\r\n    function setWhiteEnable(uint256 time) public onlyOwner {\r\n        require(!whiteEnable);\r\n        whiteEnable = true;\r\n        whiteEnableTime = time;\r\n    }\r\n\r\n    function isWhiteAddress(address account) public view returns (bool) {\r\n        return isWhiteAddr[account];\r\n    }\r\n\r\n    function setVentureAddress(address[] memory accounts,uint256[] memory amounts) public onlyOwner {\r\n        for(uint256 i = 0 ; i <accounts.length;i++){\r\n            isVentureAddr[accounts[i]] = amounts[i] > 0;\r\n            ventureAmount[accounts[i]] = amounts[i];\r\n        }\r\n    }\r\n\r\n    function isVentureAddress(address account) public view returns (bool) {\r\n        return isVentureAddr[account];\r\n    }\r\n\r\n    function setInviterBlackAddress(address[] memory accounts, bool isIB) public onlyOwner {\r\n         for(uint256 i = 0 ; i <accounts.length;i++){\r\n            inviterBlack[accounts[i]] = isIB;\r\n         }\r\n    }\r\n\r\n    function setSuperNodeNum(uint256 num) public onlyOwner {\r\n        superNodeNum = num;\r\n    }\r\n\r\n    function setHourNum(uint256 num) public onlyOwner {\r\n        hourNum = num;\r\n    }\r\n\r\n    function setDeliver(address _deliverAddr,bool _isD) public onlyOwner {\r\n        isDeliver[_deliverAddr] = _isD;\r\n    }\r\n\r\n    function resetInviter(address[] memory accounts, address _inviter) public onlyOwner {\r\n        require(!Address.isContract(_inviter));\r\n        for(uint256 i = 0 ; i <accounts.length;i++){\r\n            if(!Address.isContract(accounts[i])){\r\n                address addr = _inviter;\r\n                while(addr != accounts[i] && addr != address(0)) addr = inviter[addr];\r\n                if(addr != accounts[i]){\r\n                    inviter[accounts[i]] = _inviter;\r\n                    inviterLockTime[accounts[i]] = block.timestamp;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    function setInviteNeedActive(address[] memory accounts, bool isIT) public onlyOwner {\r\n                for(uint256 i = 0 ; i <accounts.length;i++){\r\n                    if(!Address.isContract(accounts[i]) && !isValidAddr[accounts[i]])\r\n                        inviteNeedActive[accounts[i]] = isIT;\r\n                }\r\n    }\r\n\r\n    function setInviter(address[] memory accounts, address _inviter,uint256 amount,bool isRInviter) public onlyOwner {\r\n        uint256 total = 0;\r\n        uint256 i ;\r\n        require(!Address.isContract(_inviter));\r\n        for(i = 0 ; i <accounts.length;i++){\r\n            if(inviter[accounts[i]] == address(0) && accounts[i] != _inviter && !Address.isContract(accounts[i])){\r\n                inviter[accounts[i]] = _inviter;\r\n                inviterLockTime[accounts[i]] = block.timestamp; \r\n                inviteNeedActive[accounts[i]] = true;\r\n                _basicTransfer(msg.sender,accounts[i],amount);\r\n                total++;\r\n            }\r\n        }\r\n        if(inviter[_inviter] == address(0)){\r\n            inviter[_inviter] = sysAddress;\r\n            inviterLockTime[_inviter] = block.timestamp;\r\n            inviteNeedActive[_inviter] = true;\r\n        }\r\n        if(isRInviter && total > 0)\r\n            _basicTransfer(msg.sender,_inviter,amount.mul(total).div(20));\r\n    }\r\n\r\n    function isInviterBlackAddress(address account) public view  returns (bool) {\r\n        return inviterBlack[account];\r\n    }\r\n\r\n    function RoundLen(uint256 rIndex) public view  returns (uint256) {\r\n        return rounds[rIndex].length;\r\n    }\r\n\r\n    function nodeLen() public view  returns (uint256) {\r\n        return nodes.length;\r\n    }\r\n\r\n    function RoundNodeLen(uint256 rIndex) public view  returns (uint256) {\r\n        return roundNodes[rIndex].length;\r\n    }\r\n\r\n    function RoundAddr(uint256 rIndex,uint256 index) public view  returns (address) {\r\n        return rounds[rIndex][index];\r\n    }\r\n\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n    {\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if(isVentureAddr[account] && releaseEndTime != 0 && ventureReleaseTimes[account] < releaseEndTime){\r\n            uint256 lastReleaseTime = ventureReleaseTimes[account];\r\n            if(lastReleaseTime == 0)\r\n                lastReleaseTime = releaseStartTime; \r\n            uint256 time = block.timestamp > releaseEndTime? releaseEndTime : block.timestamp;\r\n            return _balances[account].add(time.sub(lastReleaseTime).div(oneDay).mul(ventureAmount[account]).mul(5 * 10**18));\r\n        }\r\n        if(account == creationAddress && cReleaseEndTime != 0 && cReleaseTime < cReleaseEndTime){\r\n            uint256 time = block.timestamp > cReleaseEndTime ? cReleaseEndTime : block.timestamp;\r\n            uint256 addBal = time.sub(cReleaseTime).div(oneDay).mul(5000000 * 10**18).div(365);\r\n            return _balances[account].add(addBal);\r\n        }\r\n        return _balances[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual transferCounter {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBot[sender],\"the bot address\");\r\n        require(amount > 0);\r\n        if(isDeliver[sender] ||isDeliver[recipient]){\r\n             _basicTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if(isVentureAddr[sender] && ventureReleaseTimes[sender] < releaseEndTime){\r\n            uint256 lastBalance = _balances[sender];\r\n            uint256 newBalance = balanceOf(sender);\r\n            if(newBalance > lastBalance){\r\n                ventureReleaseTimes[sender] = block.timestamp > releaseEndTime? releaseEndTime : block.timestamp;\r\n               _basicTransfer(sysMAddress,sender, newBalance.sub(lastBalance));    \r\n            }\r\n        }\r\n        if(sender == creationAddress && cReleaseTime < cReleaseEndTime){\r\n            uint256 lastBalance = _balances[sender];\r\n            uint256 newBalance = balanceOf(sender);\r\n            if(newBalance > lastBalance){\r\n                cReleaseTime = block.timestamp > cReleaseEndTime? cReleaseEndTime : block.timestamp;\r\n               _basicTransfer(sysMAddress,sender, newBalance.sub(lastBalance));    \r\n            }\r\n        }\r\n        bool shouldSetInviter = !Address.isContract(recipient) && !Address.isContract(sender) && balanceOf(recipient) == 0 && inviter[recipient] == address(0) && !inviterBlack[sender];   \r\n        if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            if(sender == _pair || recipient == _pair){\r\n                if(!isLaunch)\r\n                {\r\n                    require( whiteEnable && block.timestamp >= whiteEnableTime && (isWhiteAddress(sender)||isWhiteAddress(recipient)) ,\"swap not open\");\r\n                     if(sender == _pair && block.timestamp <= whiteEnableTime.add(15)){\r\n                        addBot(recipient);\r\n                    }\r\n                }\r\n            }\r\n            if (sender == _pair) {\r\n                _buyTransfer(sender,recipient,amount);\r\n            }\r\n            else if(recipient == _pair){\r\n                _sellTransfer(sender,recipient,amount);\r\n            } \r\n            else {\r\n                require(isInviteActive[sender] || !inviteNeedActive[sender]);\r\n                _basicTransfer(sender,recipient,amount);\r\n            }\r\n        }\r\n         if (shouldSetInviter && amount >= referThreshold) {\r\n             inviter[recipient] = sender;\r\n             inviterLockTime[recipient] = block.timestamp; \r\n         }\r\n         if(enterCount == 1){\r\n               if(address(slhd)!=address(0)){\r\n                    if(!Address.isContract(sender) && !isExcludedFromFee[sender])\r\n                        slhd.proc(sender);\r\n                    if(!Address.isContract(recipient) && !isExcludedFromFee[recipient])\r\n                        slhd.proc(recipient);\r\n               }\r\n         }\r\n\r\n    }\r\n\r\n    function _sellTransfer(\r\n         address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )internal returns (bool){\r\n\r\n            require(!inviteNeedActive[sender] || isInviteActive[sender]);\r\n\r\n            uint256 share = amount.div(100);\r\n            _basicTransfer(sender,daoAddress,share.mul(daoFee));\r\n            uint256 curHour = block.timestamp.sub(hourStartTime).div(hourtime);\r\n            if(hourAddrs[curHour].length == 0)\r\n                _basicTransfer(sender,sysAddress,share.mul(hourFee));\r\n            else{\r\n                uint hourAFee = share.mul(hourFee).div(hourAddrs[curHour].length);\r\n                for(uint256 i = 0;i<hourAddrs[curHour].length;i++){\r\n                    _basicTransfer(sender,hourAddrs[curHour][i],hourAFee);\r\n                }\r\n            }\r\n            _basicTransfer(sender,luck2Address,share.mul(lucky2Fee));\r\n            luck2FeeTotal = luck2FeeTotal.add(share.mul(lucky2Fee));\r\n            _basicTransfer(sender,luck3Address,share.mul(lucky3Fee));\r\n            luck3FeeTotal = luck3FeeTotal.add(share.mul(lucky3Fee));\r\n            _basicTransfer(sender,luck4Address,share.mul(lucky4Fee));\r\n            luck4FeeTotal = luck4FeeTotal.add(share.mul(lucky4Fee));\r\n            _basicTransfer(sender,lpDivAddress,share.mul(lpDivFee));\r\n            _basicTransfer(sender,deadAddress,share.mul(destroyFee));\r\n            uint256 _sellFee = daoFee+hourFee +lpDivFee + lucky2Fee+lucky3Fee+lucky4Fee+destroyFee;\r\n            _basicTransfer(sender,recipient,share.mul(100-_sellFee));\r\n            return true;\r\n    }\r\n\r\n\r\n    function _nodeProc(address node) internal returns (bool){\r\n         if(roundNodes[roundIndex].length < superNodeNum){\r\n                uint256 i ;\r\n                for( i = 0; i< roundNodes[roundIndex].length; i++){\r\n                    if(roundNodes[roundIndex][i] == node){\r\n                        break;\r\n                    }\r\n                }\r\n                if(i == roundNodes[roundIndex].length){\r\n                    roundNodes[roundIndex].push(node);\r\n                    roundNodePush[roundIndex][node] = true;\r\n                }\r\n        }else if(roundNodes[roundIndex][0] != node){\r\n\r\n            uint256 minReward  = rNodeRewards[roundIndex][roundNodes[roundIndex][0]];\r\n            uint256 minRIndex = 0;\r\n            uint256 i;\r\n            for(i = 1; i< superNodeNum; i++){\r\n                if(roundNodes[roundIndex][i] == node){\r\n                        break;\r\n                }\r\n                if(minReward > rNodeRewards[roundIndex][roundNodes[roundIndex][i]]){\r\n                    minReward = rNodeRewards[roundIndex][roundNodes[roundIndex][i]];\r\n                    minRIndex = i;\r\n                }\r\n\r\n            }\r\n            if(i == superNodeNum && minReward < rNodeRewards[roundIndex][node]){\r\n                 roundNodePush[roundIndex][roundNodes[roundIndex][minRIndex]] = false;\r\n                 roundNodePush[roundIndex][node] = true;\r\n                 roundNodes[roundIndex][minRIndex] = node;\r\n                 \r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _buyTransfer(\r\n         address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )internal returns (bool){\r\n\r\n            uint256 buyAmount = getBuyAmount(amount);\r\n            if(address(slhd) != address(0))\r\n                buyAmount = slhd.getBuyAmount(sender,recipient,amount);\r\n            require( isLaunch || (!isLaunch && isWhiteAddress(recipient) && WhiteLimit[recipient].add(buyAmount) <= whiteThres));\r\n            if(!isLaunch){\r\n                WhiteLimit[recipient] = WhiteLimit[recipient].add(buyAmount);\r\n            }\r\n            if(!isInviteActive[recipient] && buyAmount >= inviteActiveUsdt){\r\n                inviteNeedActive[recipient] = true;\r\n                isInviteActive[recipient] = true;\r\n            }\r\n            if (inviter[recipient] == address(0)) {\r\n                    inviter[recipient] = sysAddress; \r\n                    inviterLockTime[recipient] = block.timestamp;\r\n                 } else {\r\n                        if (\r\n                            inviterLockTime[recipient] >\r\n                            block.timestamp - inviterRequireLockTime &&\r\n                            inviter[recipient] != sysAddress\r\n                        ) {\r\n                            \r\n                            inviter[recipient] = sysAddress;\r\n                            inviterLockTime[recipient] = block.timestamp;\r\n                        }\r\n            }\r\n            if(!Address.isContract(recipient)){\r\n                uint256 num = buyAmount.div(buyBase);\r\n                if(num<10){\r\n\r\n                }else if(num < 100 ){\r\n                        buyluck2Addrs.push(recipient);\r\n                        buyluck2FAmounts.push(luck2FeeTotal);\r\n                        buyluck2Num.push(num);\r\n                }else if (num <1000 ){\r\n                        buyluck3Addrs.push(recipient);\r\n                        buyluck3FAmounts.push(luck3FeeTotal);\r\n                        buyluck3Num.push(num);\r\n                }else if (num<10000){\r\n                        buyluck4Addrs.push(recipient);\r\n                        buyluck4FAmounts.push(luck4FeeTotal);\r\n                        buyluck4Num.push(num);\r\n                }\r\n            }\r\n            \r\n            if(buyAmount >= hourAddrUsdt){\r\n                uint256 curHour = block.timestamp.sub(hourStartTime).div(hourtime);\r\n                if( !Address.isContract(recipient) && hourAddrs[curHour].length < hourNum){\r\n                    hourAddrs[curHour].push(recipient);\r\n                }\r\n            }\r\n            if(buyAmount >= validAddrUsdt){\r\n               \r\n                if(!isValidAddr[recipient] && !Address.isContract(recipient)){\r\n                    isValidAddr[recipient] = true;\r\n                    address ref = inviter[recipient];\r\n                    if(ref != address(0) && !inviterBlack[ref]){\r\n                        inviteValidNum[ref]++;\r\n                        if(inviteValidNum[ref] == inviteValidThres){\r\n                            nodes.push(ref);\r\n                            isNodes[ref] = true;\r\n                        }\r\n                    }\r\n                }\r\n                if(superNodeStartTime != 0 && superNodeStartTime.add(superNodeTime) < block.timestamp){\r\n                    superNodeStartTime = block.timestamp;\r\n                    roundIndex++;\r\n                }\r\n                \r\n                rounds[roundIndex].push(recipient);\r\n                if(isNodes[recipient] && !isRoundValid[roundIndex][recipient]){\r\n                    _nodeProc(recipient);\r\n                }\r\n                if(!isRoundValid[roundIndex][recipient])\r\n                    isRoundValid[roundIndex][recipient] = true;\r\n                \r\n            }\r\n\r\n            uint256 share = amount.div(100);\r\n            address refer = inviter[recipient];\r\n            if(refer != sysAddress && !inviterBlack[refer] && balanceOf(refer) >= haveRRThreshold)\r\n             {\r\n                _basicTransfer(sender,refer,share.mul(referFee));\r\n             }else{\r\n                _basicTransfer(sender,sysAddress,share.mul(referFee));\r\n             } \r\n             while(refer != sysAddress){\r\n                if(isNodes[refer] && !inviterBlack[refer] && isValidAddr[refer] && isInviteActive[refer] && balanceOf(refer) >= haveRRThreshold){\r\n                   _basicTransfer(sender,refer,share.mul(nodeFee));\r\n                    rNodeRewards[roundIndex][refer] += share.mul(nodeFee);\r\n                    if(isRoundValid[roundIndex][refer]){\r\n                        _nodeProc(refer);\r\n                    }\r\n                    break;\r\n                }\r\n                refer = inviter[refer];\r\n             }\r\n             if(refer == sysAddress){\r\n                _basicTransfer(sender,sysAddress,share.mul(nodeFee));\r\n             }\r\n             if(roundIndex > 0){\r\n                refer = inviter[recipient];\r\n                while(refer != sysAddress){\r\n                    if(roundNodePush[roundIndex-1][refer] && isRoundValid[roundIndex][refer]){\r\n                        _basicTransfer(sender,refer,share.mul(superNodeFee));\r\n                        break;\r\n                    }\r\n                    refer = inviter[refer];\r\n                }\r\n             }\r\n             if(refer == sysAddress || roundIndex == 0){\r\n                _basicTransfer(sender,sysAddress,share.mul(superNodeFee));\r\n             }\r\n             _basicTransfer(sender,techAddress,share.mul(techFee)); \r\n             if(address(slhd) == address(0)){\r\n                _basicTransfer(sender,sysAddress,share.mul(holdDivFee));\r\n             }else{\r\n                 _basicTransfer(sender,address(slhd),share.mul(holdDivFee));\r\n                 slhd.distributeReward(share.mul(holdDivFee));\r\n             }\r\n             uint256 _buyFee = referFee + nodeFee + techFee + superNodeFee + holdDivFee;\r\n             if(!isLaunch){\r\n                 _buyFee = _buyFee+priFee;\r\n                 _basicTransfer(sender,sysWAddress,share.mul(priFee));\r\n             }\r\n             _basicTransfer(sender,recipient,amount.sub(share.mul(_buyFee)));\r\n             return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount,\"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function hasLuckNum(uint256 num,uint256 _start,uint256 _end) public  view returns(bool,uint256){\r\n        require (num >= 10 && num < 10000 && _start < _end);\r\n        bool find = false;\r\n        uint256 start = 0;\r\n        uint256 end = 0;\r\n        if(num  < 10){\r\n\r\n        }else if(num < 100){\r\n            if(luck2Index.length > 0)\r\n                start = luck2Index[luck2Index.length-1]+1;\r\n            if(start < _start)\r\n                start = _start;\r\n            end = buyluck2Num.length;\r\n            if(_end < end)\r\n                end = _end;\r\n            while(start < end){\r\n                if(num == buyluck2Num[start]){\r\n                   find = true;\r\n                   break; \r\n                }\r\n                start++;\r\n            }\r\n\r\n        }else if(num < 1000){\r\n            if(luck3Index.length > 0)\r\n                start = luck3Index[luck3Index.length-1]+1;\r\n            if(start < _start)\r\n                start = _start;\r\n            end = buyluck3Num.length;\r\n            if(_end < end)\r\n                end = _end;\r\n            while(start < end){\r\n                if(num == buyluck3Num[start]){\r\n                   find = true;\r\n                   break; \r\n                }\r\n                start++;\r\n            }\r\n\r\n        }else if (num < 10000){\r\n            if(luck4Index.length > 0)\r\n                start = luck4Index[luck4Index.length-1]+1;\r\n            if(start < _start)\r\n                start = _start;\r\n            end = buyluck4Num.length;\r\n            if(_end < end)\r\n                end = _end;\r\n            while(start < end){\r\n                if(num == buyluck4Num[start]){\r\n                   find = true;\r\n                   break; \r\n                }\r\n                start++;\r\n            }\r\n        }\r\n        return (find,start);\r\n    }\r\n\r\n    function getLuck234Length() external view returns(uint256,uint256,uint256){\r\n        return (buyluck2Addrs.length,buyluck3Addrs.length,buyluck4Addrs.length);\r\n    }\r\n\r\n    function setLuckNum(uint256 num,uint256 _start,uint256 _end) external onlyOp returns(bool,uint256){\r\n        require (num >= 10 && num < 10000 && _start < _end);\r\n        (bool find ,uint256 start) = hasLuckNum(num,_start,_end);\r\n        require(find);\r\n        if(num <10){\r\n\r\n        }else if(num < 100){\r\n            if(find){\r\n                luck2Index.push(start);\r\n                uint256 luckDAmount = 0;\r\n                if(luck2Index.length == 1){\r\n                    luckDAmount = buyluck2FAmounts[start];\r\n                    \r\n                }else{\r\n                    luckDAmount = luck2RAmount[luck2RAmount.length-1].add(buyluck2FAmounts[luck2Index[luck2Index.length-1]].sub(buyluck2FAmounts[luck2Index[luck2Index.length-2]]));    \r\n                }\r\n                if(luckDAmount > 0){\r\n                    uint256 luckReward = luckDAmount.mul(50).div(100);\r\n                    luck2RAmount.push(luckDAmount.sub(luckReward));\r\n                     _basicTransfer(luck2Address,buyluck2Addrs[start],luckReward);\r\n                }\r\n            }\r\n        }else if(num < 1000){\r\n            if(find){\r\n                luck3Index.push(start);\r\n                uint256 luckDAmount = 0;\r\n                if(luck3Index.length == 1){\r\n                    luckDAmount = buyluck3FAmounts[start];\r\n                    \r\n                }else{\r\n                    luckDAmount = luck3RAmount[luck3RAmount.length-1].add(buyluck3FAmounts[luck3Index[luck3Index.length-1]].sub(buyluck3FAmounts[luck3Index[luck3Index.length-2]]));    \r\n                }\r\n                if(luckDAmount > 0){\r\n                    uint256 luckReward = luckDAmount.mul(50).div(100);\r\n                    luck3RAmount.push(luckDAmount.sub(luckReward));\r\n                     _basicTransfer(luck3Address,buyluck3Addrs[start],luckReward);\r\n                }\r\n            }\r\n\r\n        }else if (num < 10000){\r\n            if(find){\r\n                luck4Index.push(start);\r\n                 uint256 luckDAmount = 0;\r\n                 if(luck4Index.length == 1){\r\n                    luckDAmount = buyluck4FAmounts[start];\r\n                    \r\n                }else{\r\n                    luckDAmount = luck4RAmount[luck4RAmount.length-1].add(buyluck4FAmounts[luck4Index[luck4Index.length-1]].sub(buyluck4FAmounts[luck4Index[luck4Index.length-2]]));    \r\n                }\r\n                if(luckDAmount > 0){\r\n                    uint256 luckReward = luckDAmount.mul(50).div(100);\r\n                    luck4RAmount.push(luckDAmount.sub(luckReward));\r\n                     _basicTransfer(luck4Address,buyluck4Addrs[start],luckReward);\r\n                }\r\n            }\r\n        }\r\n        return (find,start);\r\n    }\r\n\r\n    function getBuyAmount(uint256 amount) internal view returns (uint256) {\r\n            uint256 buyAmount = 0;\r\n            (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pair).getReserves();\r\n            if (reserve1 > 0 && address(this) != IPancakePair(_pair).token0()) {\r\n                buyAmount = reserve0.mul(amount).div(reserve1.add(amount));\r\n            }\r\n            if (reserve0 > 0 &&  address(this) != IPancakePair(_pair).token1()) {\r\n                buyAmount = reserve1.mul(amount).div(reserve0.add(amount));\r\n            }\r\n            buyAmount = buyAmount.mul(1000).div(996);\r\n            return buyAmount;\r\n    }\r\n\r\n\r\n    function setIsExcludedFromFee(address[] memory accounts, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for(uint256 i = 0;i<accounts.length;i++)\r\n            isExcludedFromFee[accounts[i]] = newValue;\r\n    }\r\n\r\n    function setInviteActiveUsdt(uint256 _inviteActiveUsdt) public onlyOwner{\r\n        inviteActiveUsdt = _inviteActiveUsdt;\r\n    }\r\n\r\n    function setHourAddrUsdt(uint256 _hourAddrUsdt) public onlyOwner{\r\n        hourAddrUsdt = _hourAddrUsdt;\r\n    }\r\n\r\n     function setValidAddrUsdt(uint256 _validAddrUsdt) public onlyOwner{\r\n        validAddrUsdt = _validAddrUsdt;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recvAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_techAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpDivAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sysWAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sysAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RoundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"}],\"name\":\"RoundLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"}],\"name\":\"RoundNodeLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"botAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck2Addrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck2FAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck2Num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck3Addrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck3FAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck3Num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck4Addrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck4FAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyluck4Num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuck234Length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"hasLuckNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haveRRThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdDivFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourAddrUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hourAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteActiveUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteNeedActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteValidNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteValidThres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterBlack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterRequireLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInviteActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInviterBlackAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRoundValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVentureAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVentureAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDivAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDivFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luck2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luck2FeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luck2Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luck2RAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luck3Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luck3FeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luck3Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luck3RAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luck4Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luck4FeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luck4Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luck4RAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lucky2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lucky3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lucky4Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rNodeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recvAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"resetInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundNodePush\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deliverAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isD\",\"type\":\"bool\"}],\"name\":\"setDeliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHaveRRThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hourAddrUsdt\",\"type\":\"uint256\"}],\"name\":\"setHourAddrUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setHourNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inviteActiveUsdt\",\"type\":\"uint256\"}],\"name\":\"setInviteActiveUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIT\",\"type\":\"bool\"}],\"name\":\"setInviteNeedActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRInviter\",\"type\":\"bool\"}],\"name\":\"setInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isIB\",\"type\":\"bool\"}],\"name\":\"setInviterBlackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setLuckNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priFee\",\"type\":\"uint256\"}],\"name\":\"setPriFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thres\",\"type\":\"uint256\"}],\"name\":\"setReferThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slhd\",\"type\":\"address\"}],\"name\":\"setSLHD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setSuperNodeNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validAddrUsdt\",\"type\":\"uint256\"}],\"name\":\"setValidAddrUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setVentureAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isWL\",\"type\":\"bool\"}],\"name\":\"setWhiteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setWhiteEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superNodeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superNodeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superNodeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sysAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sysMAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sysWAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOp\",\"type\":\"address\"}],\"name\":\"transferOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validAddrUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ventureAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ventureReleaseTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteThres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "STARLIGHT", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000804e157b931bd51a542ae9974ad9aeee13c759de000000000000000000000000a0b92bc0447e223aa73c73dd839dea669cf8277d000000000000000000000000067d2f608053b6c565c5d936d8c4dfb1667f4df4000000000000000000000000a722e6670bd66dcaf0b9a326fb598804e18462320000000000000000000000003b55acf34f3e62c00de0c0a3725896e4c66842550000000000000000000000007cd8657e6e14bd107ddabb8fb9ff923870726e660000000000000000000000002f316abcd0f8d430ee36b687ea7d00b179372cad", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://efc4166a21bc6aca71bf1386590ee350604aa7654dc812e8e6ec60a03510dbcc"}