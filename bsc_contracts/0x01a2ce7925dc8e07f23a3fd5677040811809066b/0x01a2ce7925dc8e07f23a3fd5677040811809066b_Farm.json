{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-04-30\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IFarmFactory.sol\r\n\r\ninterface IFarmFactory {\r\n    function userEnteredFarm(address _user) external;\r\n\r\n    function userLeftFarm(address _user) external;\r\n\r\n    function addFarm(address _farmAddress) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IFarm.sol\r\n\r\ninterface IFarm {\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/Vesting.sol\r\n\r\ncontract Vesting is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    IERC20 public token;\r\n    uint256 public vestingDuration; // 1170000 blocks ~ 180 days\r\n    address public farm;\r\n\r\n    struct VestingInfo {\r\n        uint256 amount;\r\n        uint256 startBlock;\r\n        uint256 claimedAmount;\r\n    }\r\n\r\n    // user address => vestingInfo[]\r\n    mapping(address => VestingInfo[]) private _userToVestingList;\r\n\r\n    modifier onlyFarm() {\r\n        require(msg.sender == farm, \"Vesting: FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFarmOwner() {\r\n        require(msg.sender == IFarm(farm).owner(), \"Vesting: FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, uint256 _vestingDuration) {\r\n        token = IERC20(_token);\r\n        require(_vestingDuration > 0, \"Vesting: Invalid duration\");\r\n\r\n        vestingDuration = _vestingDuration;\r\n        farm = msg.sender;\r\n    }\r\n\r\n    function addVesting(address _user, uint256 _amount) external onlyFarm {\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        VestingInfo memory info = VestingInfo(_amount, block.number, 0);\r\n        _userToVestingList[_user].push(info);\r\n    }\r\n\r\n    function claimVesting(uint256 _index) external nonReentrant {\r\n        _claimVestingInternal(_index);\r\n    }\r\n\r\n    function claimTotalVesting() external nonReentrant {\r\n        uint256 count = _userToVestingList[msg.sender].length;\r\n        for (uint256 _index = 0; _index < count; _index++) {\r\n            if (_getVestingClaimableAmount(msg.sender, _index) > 0) {\r\n                _claimVestingInternal(_index);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _claimVestingInternal(uint256 _index) internal {\r\n        require(_index < _userToVestingList[msg.sender].length, \"Vesting: Invalid index\");\r\n        uint256 claimableAmount = _getVestingClaimableAmount(msg.sender, _index);\r\n        require(claimableAmount > 0, \"Vesting: Nothing to claim\");\r\n        _userToVestingList[msg.sender][_index].claimedAmount =\r\n            _userToVestingList[msg.sender][_index].claimedAmount +\r\n            claimableAmount;\r\n        require(token.transfer(msg.sender, claimableAmount), \"Vesting: transfer failed\");\r\n    }\r\n\r\n    function _getVestingClaimableAmount(address _user, uint256 _index)\r\n        internal\r\n        view\r\n        returns (uint256 claimableAmount)\r\n    {\r\n        VestingInfo memory info = _userToVestingList[_user][_index];\r\n        if (block.number <= info.startBlock) return 0;\r\n        uint256 passedBlocks = block.number - info.startBlock;\r\n\r\n        uint256 releasedAmount;\r\n        if (passedBlocks >= vestingDuration) {\r\n            releasedAmount = info.amount;\r\n        } else {\r\n            releasedAmount = (info.amount * passedBlocks) / vestingDuration;\r\n        }\r\n\r\n        claimableAmount = 0;\r\n        if (releasedAmount > info.claimedAmount) {\r\n            claimableAmount = releasedAmount - info.claimedAmount;\r\n        }\r\n    }\r\n\r\n    function getVestingTotalClaimableAmount(address _user)\r\n        external\r\n        view\r\n        returns (uint256 totalClaimableAmount)\r\n    {\r\n        uint256 count = _userToVestingList[_user].length;\r\n        for (uint256 _index = 0; _index < count; _index++) {\r\n            totalClaimableAmount = totalClaimableAmount + _getVestingClaimableAmount(_user, _index);\r\n        }\r\n    }\r\n\r\n    function getVestingClaimableAmount(address _user, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getVestingClaimableAmount(_user, _index);\r\n    }\r\n\r\n    function getVestingsCountByUser(address _user) external view returns (uint256) {\r\n        uint256 count = _userToVestingList[_user].length;\r\n        return count;\r\n    }\r\n\r\n    function getVestingInfo(address _user, uint256 _index)\r\n        external\r\n        view\r\n        returns (VestingInfo memory)\r\n    {\r\n        require(_index < _userToVestingList[_user].length, \"Vesting: Invalid index\");\r\n        VestingInfo memory info = _userToVestingList[_user][_index];\r\n        return info;\r\n    }\r\n\r\n    function getTotalAmountLockedByUser(address _user) external view returns (uint256) {\r\n        uint256 count = _userToVestingList[_user].length;\r\n        uint256 amountLocked = 0;\r\n        for (uint256 _index = 0; _index < count; _index++) {\r\n            amountLocked =\r\n                amountLocked +\r\n                _userToVestingList[_user][_index].amount -\r\n                _userToVestingList[_user][_index].claimedAmount;\r\n        }\r\n\r\n        return amountLocked;\r\n    }\r\n\r\n    function updateVestingDuration(uint256 _vestingDuration) external onlyFarmOwner {\r\n        vestingDuration = _vestingDuration;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n// File: contracts/Farm.sol\r\n\r\ncontract Farm {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice information stuct on each user than stakes LP tokens.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt.\r\n    }\r\n\r\n    address public owner;\r\n\r\n    IERC20 public lpToken;\r\n    IERC20 public rewardToken;\r\n    uint256 public startBlock;\r\n    uint256 public rewardPerBlock;\r\n    uint256 public lastRewardBlock;\r\n    uint256 public accRewardPerShare;\r\n    uint256 public farmerCount;\r\n    bool public isActive;\r\n\r\n    uint256 public firstCycleRate;\r\n    uint256 public initRate;\r\n    uint256 public reducingRate; // 95 equivalent to 95%\r\n    uint256 public reducingCycle; // 195000 equivalent 195000 block\r\n\r\n    IFarmFactory public factory;\r\n    address public farmGenerator;\r\n\r\n    Vesting public vesting;\r\n    uint256 public percentForVesting; // 50 equivalent to 50%\r\n\r\n    /// @notice information on each user than stakes LP tokens\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Farm: FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    modifier mustActive() {\r\n        require(isActive == true, \"Farm: Not active\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _factory, address _farmGenerator) {\r\n        factory = IFarmFactory(_factory);\r\n        farmGenerator = _farmGenerator;\r\n    }\r\n\r\n    /**\r\n     * @notice initialize the farming contract. This is called only once upon farm creation and the FarmGenerator ensures the farm has the correct paramaters\r\n     */\r\n    function init(\r\n        IERC20 _rewardToken,\r\n        IERC20 _lpToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256[] memory _rateParameters, // 0: firstCycleRate , 1: initRate, 2: reducingRate, 3: reducingCycle\r\n        uint256[] memory _vestingParameters, // 0: percentForVesting, 1: vestingDuration\r\n        address _owner\r\n    ) public {\r\n        require(msg.sender == address(farmGenerator), \"Farm: FORBIDDEN\");\r\n        require(address(_rewardToken) != address(0), \"Farm: Invalid reward token\");\r\n        require(_rewardPerBlock > 1000, \"Farm: Invalid block reward\"); // minimum 1000 divisibility per block reward\r\n        require(_startBlock > block.number, \"Farm: Invalid start block\"); // ideally at least 24 hours more to give farmers time\r\n        require(_vestingParameters[0] <= 100, \"Farm: Invalid percent for vesting\");\r\n        require(_rateParameters[0] > 0, \"Farm: Invalid first cycle rate\");\r\n        require(_rateParameters[1] > 0, \"Farm: Invalid initial rate\");\r\n        require(_rateParameters[2] > 0 && _rateParameters[1] < 100, \"Farm: Invalid reducing rate\");\r\n        require(_rateParameters[3] > 0, \"Farm: Invalid reducing cycle\");\r\n\r\n        rewardToken = _rewardToken;\r\n        startBlock = _startBlock;\r\n        rewardPerBlock = _rewardPerBlock;\r\n        firstCycleRate = _rateParameters[0];\r\n        initRate = _rateParameters[1];\r\n        reducingRate = _rateParameters[2];\r\n        reducingCycle = _rateParameters[3];\r\n        isActive = true;\r\n        owner = _owner;\r\n\r\n        uint256 _lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\r\n        lpToken = _lpToken;\r\n        lastRewardBlock = _lastRewardBlock;\r\n        accRewardPerShare = 0;\r\n\r\n        if (_vestingParameters[0] > 0) {\r\n            percentForVesting = _vestingParameters[0];\r\n            vesting = new Vesting(address(_rewardToken), _vestingParameters[1]);\r\n            _rewardToken.safeApprove(address(vesting), type(uint256).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the reward multiplier over the given _fromBlock until _to block\r\n     * @param _fromBlock the start of the period to measure rewards for\r\n     * @param _toBlock the end of the period to measure rewards for\r\n     * @return The weighted multiplier for the given period\r\n     */\r\n    function getMultiplier(uint256 _fromBlock, uint256 _toBlock) public view returns (uint256) {\r\n        return _getMultiplierFromStart(_toBlock) - _getMultiplierFromStart(_fromBlock);\r\n    }\r\n\r\n    function _getMultiplierFromStart(uint256 _block) internal view returns (uint256) {\r\n        uint256 roundPassed = (_block - startBlock) / reducingCycle;\r\n\r\n        if (roundPassed == 0) {\r\n            return (_block - startBlock) * firstCycleRate * 1e12;\r\n        } else {\r\n            uint256 multiplier = reducingCycle * firstCycleRate * 1e12;\r\n            uint256 i = 0;\r\n            for (i = 0; i < roundPassed - 1; i++) {\r\n                multiplier =\r\n                    multiplier +\r\n                    ((1e12 * initRate * reducingRate**i) / 100**i) *\r\n                    reducingCycle;\r\n            }\r\n\r\n            if ((_block - startBlock) % reducingCycle > 0) {\r\n                multiplier =\r\n                    multiplier +\r\n                    ((1e12 * initRate * reducingRate**i) / 100**i) *\r\n                    ((_block - startBlock) % reducingCycle);\r\n            }\r\n\r\n            return multiplier;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice function to see accumulated balance of reward token for specified user\r\n     * @param _user the user for whom unclaimed tokens will be shown\r\n     * @return total amount of withdrawable reward tokens\r\n     */\r\n    function pendingReward(address _user) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 _accRewardPerShare = accRewardPerShare;\r\n        uint256 _lpSupply = lpToken.balanceOf(address(this));\r\n        if (block.number > lastRewardBlock && _lpSupply != 0 && isActive == true) {\r\n            uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\r\n            uint256 _tokenReward = (_multiplier * rewardPerBlock) / 1e12;\r\n            _accRewardPerShare = _accRewardPerShare + ((_tokenReward * 1e12) / _lpSupply);\r\n        }\r\n        return ((user.amount * _accRewardPerShare) / 1e12) - user.rewardDebt;\r\n    }\r\n\r\n    /**\r\n     * @notice updates pool information to be up to date to the current block\r\n     */\r\n    function updatePool() public mustActive {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 _lpSupply = lpToken.balanceOf(address(this));\r\n        if (_lpSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\r\n        uint256 _tokenReward = (_multiplier * rewardPerBlock) / 1e12;\r\n        accRewardPerShare = accRewardPerShare + ((_tokenReward * 1e12) / _lpSupply);\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /**\r\n     * @notice deposit LP token function for msg.sender\r\n     * @param _amount the total deposit amount\r\n     */\r\n    function deposit(uint256 _amount) public mustActive {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        updatePool();\r\n        if (user.amount > 0) {\r\n            uint256 _pending = ((user.amount * accRewardPerShare) / 1e12) - user.rewardDebt;\r\n\r\n            uint256 availableRewardToken = rewardToken.balanceOf(address(this));\r\n            if (_pending > availableRewardToken) {\r\n                _pending = availableRewardToken;\r\n            }\r\n\r\n            uint256 _forVesting = 0;\r\n            if (percentForVesting > 0) {\r\n                _forVesting = (_pending * percentForVesting) / 100;\r\n                vesting.addVesting(msg.sender, _forVesting);\r\n            }\r\n\r\n            rewardToken.safeTransfer(msg.sender, _pending - _forVesting);\r\n        }\r\n        if (user.amount == 0 && _amount > 0) {\r\n            factory.userEnteredFarm(msg.sender);\r\n            farmerCount++;\r\n        }\r\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        user.amount = user.amount + _amount;\r\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw LP token function for msg.sender\r\n     * @param _amount the total withdrawable amount\r\n     */\r\n    function withdraw(uint256 _amount) public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"INSUFFICIENT\");\r\n\r\n        if (isActive == true) {\r\n            updatePool();\r\n        }\r\n\r\n        if (user.amount == _amount && _amount > 0) {\r\n            factory.userLeftFarm(msg.sender);\r\n            farmerCount--;\r\n        }\r\n\r\n        uint256 _pending = ((user.amount * accRewardPerShare) / 1e12) - user.rewardDebt;\r\n\r\n        uint256 availableRewardToken = rewardToken.balanceOf(address(this));\r\n        if (_pending > availableRewardToken) {\r\n            _pending = availableRewardToken;\r\n        }\r\n\r\n        uint256 _forVesting = 0;\r\n        if (percentForVesting > 0) {\r\n            _forVesting = (_pending * percentForVesting) / 100;\r\n            vesting.addVesting(msg.sender, _forVesting);\r\n        }\r\n\r\n        rewardToken.safeTransfer(msg.sender, _pending - _forVesting);\r\n\r\n        user.amount = user.amount - _amount;\r\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\r\n        lpToken.safeTransfer(msg.sender, _amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice emergency functoin to withdraw LP tokens and forego harvest rewards. Important to protect users LP tokens\r\n     */\r\n    function emergencyWithdraw() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        lpToken.safeTransfer(msg.sender, user.amount);\r\n        emit EmergencyWithdraw(msg.sender, user.amount);\r\n        if (user.amount > 0) {\r\n            factory.userLeftFarm(msg.sender);\r\n            farmerCount--;\r\n        }\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Safe reward transfer function, just in case a rounding error causes pool to not have enough reward tokens\r\n     * @param _to the user address to transfer tokens to\r\n     * @param _amount the total amount of tokens to transfer\r\n     */\r\n    function _safeRewardTransfer(address _to, uint256 _amount) internal {\r\n        rewardToken.transfer(_to, _amount);\r\n    }\r\n\r\n    function rescueFunds(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(address(lpToken) != tokenToRescue, \"Farm: Cannot claim token held by the contract\");\r\n\r\n        IERC20(tokenToRescue).safeTransfer(to, amount);\r\n    }\r\n\r\n    function updateReducingRate(uint256 _reducingRate) external onlyOwner mustActive {\r\n        require(_reducingRate > 0 && _reducingRate <= 100, \"Farm: Invalid reducing rate\");\r\n        reducingRate = _reducingRate;\r\n    }\r\n\r\n    function updatePercentForVesting(uint256 _percentForVesting) external onlyOwner {\r\n        require(\r\n            _percentForVesting >= 0 && _percentForVesting <= 100,\r\n            \"Farm: Invalid percent for vesting\"\r\n        );\r\n        percentForVesting = _percentForVesting;\r\n    }\r\n\r\n    function forceEnd() external onlyOwner mustActive {\r\n        updatePool();\r\n        isActive = false;\r\n    }\r\n\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFarmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstCycleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBlock\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rateParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reducingCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reducingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentForVesting\",\"type\":\"uint256\"}],\"name\":\"updatePercentForVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reducingRate\",\"type\":\"uint256\"}],\"name\":\"updateReducingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"contract Vesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Farm", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000638bffdd503ec1227c4f4bd2cf259d5eb88209e10000000000000000000000004888f34c12043c4e1d86f6213dc7abb470520009", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22d8c0061da1022a91fe7ab9df24fb424c53b1cfaaf9c94b164836e6030ba7ac"}