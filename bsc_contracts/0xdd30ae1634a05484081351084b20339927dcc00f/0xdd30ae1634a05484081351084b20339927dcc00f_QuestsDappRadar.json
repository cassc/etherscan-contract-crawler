{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/QuestsDappRadar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../interfaces/IAssetsHolder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract QuestsDappRadar is Ownable2Step, ReentrancyGuard, Pausable {\\n    IAssetsHolder public assetsHolder;\\n    address public admin;\\n\\n    struct ERC20TokenInfo {\\n        address tokenAddress;\\n        uint256 amount;\\n    }\\n\\n    struct ERC721TokenInfo {\\n        address tokenAddress;\\n        uint256 tokenId;\\n    }\\n\\n    struct ERC1155TokenInfo {\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct QuestData {\\n        address[] erc20RewardAddresses;\\n        address[] erc721RewardAddresses;\\n        address[] erc1155RewardAddresses;\\n        bool isClaimable;\\n    }\\n\\n    struct ERC1155TokenReward {\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    mapping(uint256 questId => mapping(address erc20Address => uint256 amount)) private remainingERC20Rewards;\\n    mapping(uint256 questId => QuestData) private questRewards;\\n    mapping(uint256 questId => mapping(address winner => uint256[] amounts)) private erc20Winner;\\n    mapping(uint256 questId => mapping(address winner => uint256[] nftId)) private erc721Winner;\\n    mapping(uint256 questId => mapping(address winner => ERC1155TokenReward[] erc1155RewardDetail)) private erc1155Winner;\\n\\n    constructor(IAssetsHolder _assetsHolder) {\\n        assetsHolder = _assetsHolder;\\n    }\\n    \\n    /// @dev Modifier to make a function callable only by the admin.\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"This function can only be called by admin\\\");\\n        _;\\n    }\\n\\n    /// @notice Sets a new admin for the contract.\\n    /// @dev This function can only be called by the current admin.\\n    /// @param newAdmin The address of the new admin.\\n    function setNewAdmin(address newAdmin) external onlyOwner {\\n        admin = newAdmin;\\n    }\\n\\n    /// @notice Creates a new quest with the provided reward tokens.\\n    /// @dev This function can only be called by the owner of the contract.\\n    /// @param questId The unique identifier for the new quest.\\n    /// @param erc20RewardAddresses An array of addresses for the ERC20 reward tokens.\\n    /// @param erc721RewardAddresses An array of addresses for the ERC721 reward tokens.\\n    /// @param erc1155RewardAddresses An array of addresses for the ERC1155 reward tokens.\\n    function createQuest(\\n        uint256 questId,\\n        address[] memory erc20RewardAddresses,\\n        address[] memory erc721RewardAddresses,\\n        address[] memory erc1155RewardAddresses\\n    ) external onlyAdmin {\\n        require(erc20RewardAddresses.length > 0 || erc721RewardAddresses.length > 0 || erc1155RewardAddresses.length > 0, \\\"Rewards shouldn't be empty\\\");\\n        require(questRewards[questId].erc20RewardAddresses.length == 0 && questRewards[questId].erc721RewardAddresses.length == 0 && questRewards[questId].erc1155RewardAddresses.length == 0, \\\"Quest already exists\\\");\\n\\n        uint256 erc20RewardAddressesLength = erc20RewardAddresses.length;\\n        for (uint256 i = 0; i < erc20RewardAddressesLength; ++i) {\\n            require(isLikelyERC20(erc20RewardAddresses[i]), \\\"That contract does not have ERC20 standards\\\");\\n        }\\n\\n        uint256 erc721RewardAddressesLength = erc721RewardAddresses.length;\\n        for (uint256 j = 0; j < erc721RewardAddressesLength; ++j) {\\n            require(isLikelyERC721(erc721RewardAddresses[j]), \\\"That contract does not have ERC721 standards\\\");\\n        }\\n\\n        uint256 erc1155RewardAddressesLength = erc1155RewardAddresses.length;\\n        for (uint256 k = 0; k < erc1155RewardAddressesLength; ++k) {\\n            require(isLikelyERC1155(erc1155RewardAddresses[k]), \\\"That contract does not have ERC1155 standards\\\");\\n        }\\n\\n        QuestData storage reward = questRewards[questId];\\n        reward.erc20RewardAddresses = erc20RewardAddresses;\\n        reward.erc721RewardAddresses = erc721RewardAddresses;\\n        reward.erc1155RewardAddresses = erc1155RewardAddresses;\\n        emit QuestCreated(questId);\\n    }\\n\\n    /// @notice Sets the rewards for multiple winners of a quest.\\n    /// @dev This function can only be called by the owner of the contract.\\n    /// @param questId The unique identifier for the quest.\\n    /// @param winners An array of addresses of the winners.\\n    /// @param erc20Rewards An array of arrays of ERC20TokenInfo structs for the ERC20 reward tokens for each winner.\\n    /// @param erc721Rewards An array of arrays of ERC721TokenInfo structs for the ERC721 reward tokens for each winner.\\n    /// @param erc1155Rewards An array of arrays of ERC1155TokenInfo structs for the ERC1155 reward tokens for each winner.\\n    function setWinnerRewards(\\n        uint256 questId,\\n        address[] memory winners,\\n        ERC20TokenInfo[][] memory erc20Rewards,\\n        ERC721TokenInfo[][] memory erc721Rewards,\\n        ERC1155TokenInfo[][] memory erc1155Rewards\\n    ) external onlyAdmin {\\n        require(\\n            winners.length == erc20Rewards.length &&\\n            winners.length == erc721Rewards.length &&\\n            winners.length == erc1155Rewards.length,\\n            \\\"Input lengths do not match\\\"\\n        );\\n        QuestData memory reward = questRewards[questId];\\n        require(reward.erc20RewardAddresses.length > 0 || reward.erc721RewardAddresses.length > 0 || reward.erc1155RewardAddresses.length > 0, \\\"Quest does not exist\\\");\\n\\n        for (uint256 i = 0; i < winners.length; i++) {\\n            for (uint256 l = 0; l < erc20Rewards[i].length; ++l) {\\n                require(reward.erc20RewardAddresses[l] == erc20Rewards[i][l].tokenAddress, \\\"You should follow order\\\");\\n                uint256 currentReward = remainingERC20Rewards[questId][erc20Rewards[i][l].tokenAddress];\\n                require(currentReward >= erc20Rewards[i][l].amount, \\\"Insufficient reward\\\");\\n                remainingERC20Rewards[questId][erc20Rewards[i][l].tokenAddress] = currentReward - erc20Rewards[i][l].amount;\\n                erc20Winner[questId][winners[i]].push(erc20Rewards[i][l].amount);\\n            }\\n\\n            for (uint256 j = 0; j < erc721Rewards[i].length; ++j) {\\n                require(reward.erc721RewardAddresses[j] == erc721Rewards[i][j].tokenAddress, \\\"You should follow order\\\");\\n                erc721Winner[questId][winners[i]].push(erc721Rewards[i][j].tokenId);\\n            }\\n\\n            for (uint256 k = 0; k < erc1155Rewards[i].length; ++k) {\\n                require(reward.erc1155RewardAddresses[k] == erc1155Rewards[i][k].tokenAddress, \\\"You should follow order\\\");\\n                erc1155Winner[questId][winners[i]].push(ERC1155TokenReward(erc1155Rewards[i][k].tokenId, erc1155Rewards[i][k].amount));\\n            }\\n            emit WinnerSet(questId, winners[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the claim status of a quest.\\n    /// @dev This function can only be called by the owner of the contract.\\n    /// @param questId The unique identifier for the quest.\\n    /// @param availability The new claim status for the quest.\\n    function setQuestClaimStatus(uint256 questId, bool availability) external onlyAdmin {\\n        questRewards[questId].isClaimable = availability;\\n    }\\n\\n    /// @notice Sets the ERC20 amount for a specific quest without transferring any tokens.\\n    /// @dev This function can only be called by the owner of the contract.\\n    /// @param questId The unique identifier for the quest whose ERC20 amount is to be set.\\n    /// @param token The address of the ERC20 token.\\n    /// @param amount The new amount of the ERC20 token for the quest.\\n    function setRemainingERC20RewardsForQuest(uint256 questId, address token, uint256 amount) external onlyAdmin {\\n        remainingERC20Rewards[questId][token] = amount;\\n    }\\n\\n    /// @notice Transfers ERC20 tokens from the contract owner to the assetsHolder and updates the ERC20 amount for a specific quest.\\n    /// @dev This function can only be called by the owner of the contract.\\n    /// @param token The address of the ERC20 token to be transferred.\\n    /// @param amount The amount of the ERC20 token to be transferred.\\n    /// @param questId The unique identifier for the quest whose ERC20 amount is to be updated.\\n    function addERC20RewardToQuest(uint256 questId, address token, uint256 amount) external onlyAdmin {\\n        require(IERC20(token).transfer(address(assetsHolder), amount), \\\"Transfer failed\\\");\\n        remainingERC20Rewards[questId][token] += amount;\\n    }\\n\\n    /// @notice Retrieves the total ERC20 amount associated with a specific quest.\\n    /// @param questId The unique identifier for the quest.\\n    /// @return The total ERC20 amount associated with the quest.\\n    function getQuestERC20Amount(uint256 questId,address token) public view returns (uint256) {\\n        return remainingERC20Rewards[questId][token];\\n    }\\n\\n    /// @notice Allows a user to claim the reward for a quest.\\n    /// @dev This function can only be called when the contract is not paused.\\n    /// @param questId The unique identifier for the quest.\\n    function claimReward(uint256 questId) external nonReentrant whenNotPaused {\\n        require(questRewards[questId].isClaimable, \\\"Can not yet claim rewards\\\");\\n        QuestData memory reward = questRewards[questId];\\n        uint256[] memory erc20tokensAmount = erc20Winner[questId][msg.sender];\\n        uint256[] memory erc721tokensId = erc721Winner[questId][msg.sender];\\n        ERC1155TokenReward[] memory erc1155Details = erc1155Winner[questId][msg.sender];\\n\\n        require(erc20tokensAmount.length > 0 || erc721tokensId.length > 0 || erc1155Details.length > 0, \\\"Winner is not defined\\\");\\n        delete erc20Winner[questId][msg.sender];\\n        delete erc721Winner[questId][msg.sender];\\n        delete erc1155Winner[questId][msg.sender];\\n\\n        for (uint256 i = 0; i < erc20tokensAmount.length; ++i) {\\n            if(erc20tokensAmount[i] > 0){\\n                assetsHolder.transferERC20(reward.erc20RewardAddresses[i], erc20tokensAmount[i], msg.sender);\\n            }\\n        }\\n\\n        for (uint256 j = 0; j < erc721tokensId.length; ++j) {\\n            if(erc721tokensId[j] > 0){\\n                assetsHolder.transferERC721(reward.erc721RewardAddresses[j], erc721tokensId[j], msg.sender);\\n            }\\n        }\\n\\n        for (uint256 k = 0; k < erc1155Details.length; ++k) {\\n            if(erc1155Details[k].amount > 0){\\n                assetsHolder.transferERC1155(reward.erc1155RewardAddresses[k], erc1155Details[k].tokenId, erc1155Details[k].amount, msg.sender, \\\"\\\");\\n            }\\n        }\\n\\n        emit RewardClaimed(questId, msg.sender, erc20tokensAmount, erc721tokensId, erc1155Details);\\n    }\\n\\n    /// @notice Checks the rewards for a winner of a quest.\\n    /// @param questId The unique identifier for the quest.\\n    /// @param winner The address of the winner.\\n    function checkWinner(uint256 questId, address winner) external view returns (uint256[] memory, uint256[] memory,  ERC1155TokenReward[] memory) {\\n        uint256[] memory erc20Amount = erc20Winner[questId][winner];\\n        uint256[] memory erc721Id = erc721Winner[questId][winner];\\n        ERC1155TokenReward[] memory erc1155IdAmount = erc1155Winner[questId][winner];\\n        return (erc20Amount, erc721Id, erc1155IdAmount);\\n    }\\n\\n    /// @notice Gets the data for a quest.\\n    /// @param questId The unique identifier for the quest.\\n    function getQuestData(uint256 questId) external view returns (QuestData memory) {\\n        return questRewards[questId];\\n    }\\n\\n    /// @notice Removes a winner from a quest.\\n    /// @dev This function can only be called by the owner of the contract.\\n    /// @param questId The unique identifier for the quest.\\n    /// @param winner The address of the winner.\\n    function removeWinner(uint256 questId, address winner) external onlyAdmin {\\n        uint256[] memory erc20tokensAmount = erc20Winner[questId][winner];\\n        for (uint256 i = 0; i < erc20tokensAmount.length; ++i) {\\n            remainingERC20Rewards[questId][questRewards[questId].erc20RewardAddresses[i]] += erc20tokensAmount[i];\\n        }\\n        delete erc20Winner[questId][winner];\\n        delete erc721Winner[questId][winner];\\n        delete erc1155Winner[questId][winner];\\n    }\\n\\n    /// @notice Checks if a contract is likely an ERC20 contract.\\n    /// @param _token The address of the contract.\\n    function isLikelyERC20(address _token) internal view returns (bool) {\\n        try IERC20(_token).allowance(address(this), msg.sender) returns (uint256) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Checks if a contract is likely an ERC721 contract.\\n    /// @param _token The address of the contract.\\n    function isLikelyERC721(address _token) internal view returns (bool) {\\n         bytes4 erc721InterfaceID = 0x80ac58cd;\\n        try IERC165(_token).supportsInterface(erc721InterfaceID) returns (bool result) {\\n            return result;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Checks if a contract is likely an ERC1155 contract.\\n    /// @param _token The address of the contract.\\n    function isLikelyERC1155(address _token) internal view returns (bool) {\\n        bytes4 erc1155InterfaceID = 0xd9b67a26;\\n        try IERC165(_token).supportsInterface(erc1155InterfaceID) returns (bool supportsERC1155) {\\n            return supportsERC1155;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    event QuestCreated(uint256 questId);\\n    event WinnerSet(uint256 questId, address winner);\\n    event RewardClaimed(\\n        uint256 questId,\\n        address claimer,\\n        uint256[] erc20tokensAmount,\\n        uint256[] erc721tokensId,\\n        ERC1155TokenReward[] erc1155Details\\n    );\\n}\\n\"\r\n    },\r\n    \"interfaces/IAssetsHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IAssetsHolder {\\n    function transferERC721(address tokenAddress, uint256 tokenId, address recipient) external;\\n    function transferERC20(address tokenAddress, uint256 amount, address recipient) external;\\n    function transferERC1155(address tokenAddress, uint256 id, uint256 amount, address recipient, bytes calldata data) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAssetsHolder\",\"name\":\"_assetsHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"}],\"name\":\"QuestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"erc20tokensAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"erc721tokensId\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct QuestsDappRadar.ERC1155TokenReward[]\",\"name\":\"erc1155Details\",\"type\":\"tuple[]\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addERC20RewardToQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsHolder\",\"outputs\":[{\"internalType\":\"contract IAssetsHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct QuestsDappRadar.ERC1155TokenReward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20RewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721RewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc1155RewardAddresses\",\"type\":\"address[]\"}],\"name\":\"createQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"}],\"name\":\"getQuestData\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"erc20RewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721RewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc1155RewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"internalType\":\"struct QuestsDappRadar.QuestData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getQuestERC20Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"removeWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setNewAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availability\",\"type\":\"bool\"}],\"name\":\"setQuestClaimStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRemainingERC20RewardsForQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct QuestsDappRadar.ERC20TokenInfo[][]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct QuestsDappRadar.ERC721TokenInfo[][]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct QuestsDappRadar.ERC1155TokenInfo[][]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[][]\"}],\"name\":\"setWinnerRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QuestsDappRadar", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dcc0da7d6f04a95e3a4534e5e24850efcd2f9b35", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}