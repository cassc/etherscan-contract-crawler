{"SourceCode": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity 0.8.9;\r\nlibrary TransferHelper {\r\n\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\ncontract Airdrop{\r\n    address public Owner;  \r\n    constructor(){\r\n        Owner = msg.sender; \r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == Owner,\"Its restricted\");\r\n        _; \r\n    }\r\n    function airdrop(address[] calldata Addresses , address tokenaddr, uint[] calldata amounts) external {\r\n        require(Addresses.length == amounts.length,\"Addresses length mismatch\"); \r\n        uint length = Addresses.length; \r\n        for(uint i = 0; i < length; i++){\r\n            TransferHelper.safeTransferFrom(tokenaddr,msg.sender,Addresses[i],amounts[i]); \r\n        }\r\n    }\r\n    function airdropEth(address[] calldata Addresses, uint[] calldata amounts)external{\r\n        require(Addresses.length == amounts.length,\"Addresses length mismatch\"); \r\n        uint length = Addresses.length; \r\n        for(uint i = 0; i < length; i++){\r\n            TransferHelper.safeTransferETH(Addresses[i],amounts[i]); \r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenaddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Airdrop", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9a345265b488bf29f67f99ef40b6041a54de42aced39205d9232fcb8f8c3f239"}