{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IST20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Sale_Contract {\r\n    using SafeMath for uint256;\r\n    IST20 public token;\r\n    uint256 public rate;\r\n    uint256 public weiRaised;\r\n    uint256 public weiMaxPurchaseBnb;\r\n    uint256 public f1BonusRate = 10; \r\n    uint256 public f2BonusRate = 8;  \r\n    uint256 public f3BonusRate = 7;  \r\n    uint256 public f4BonusRate = 6; \r\n    uint256 public f5BonusRate = 5; \r\n    uint256 public f6BonusRate = 4; \r\n    uint256 public f7BonusRate = 3; \r\n    address payable private admin;\r\n    mapping(address => uint256) public purchasedBnb;\r\n    mapping(address => address) public referrers; \r\n    event TokenPurchase(address indexed purchaser, address indexed referrer, uint256 value, uint256 amount, uint256 referralBonus);\r\n  \r\n  \r\n    constructor(uint256 _rate, IST20 _token, uint256 _max) public {\r\n        require(_rate > 0);\r\n        require(_max > 0);\r\n        require(_token != IST20(address(0)));\r\n        rate = _rate;\r\n        token = _token;\r\n        weiMaxPurchaseBnb = _max;\r\n        admin = msg.sender;\r\n    }\r\n  \r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n  \r\n    receive() external payable {\r\n        revert();\r\n    }\r\n  \r\n    function buy(address _referrer) public payable {\r\n        require(msg.value >= 0.1 ether, \"Minimum purchase amount is 0.1 ETH\");\r\n    if (_referrer == address(0)) {\r\n        _referrer = 0x01f620ACfdd33C7063c6e109786Bc8D98f88C181; \r\n    }\r\n    \r\n    uint256 maxBnbAmount = maxBnb(msg.sender);\r\n    uint256 weiAmount = msg.value > maxBnbAmount ? maxBnbAmount : msg.value;\r\n    weiAmount = _preValidatePurchase(msg.sender, weiAmount);\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n    uint256 referralBonus = weiAmount.mul(f1BonusRate).div(100); \r\n    weiRaised = weiRaised.add(weiAmount);\r\n    _processPurchase(msg.sender, _referrer, tokens, referralBonus);\r\n    emit TokenPurchase(msg.sender, _referrer, weiAmount, tokens, referralBonus);\r\n    _updatePurchasingState(msg.sender, weiAmount);\r\n    if (msg.value > weiAmount) {\r\n        uint256 refundAmount = msg.value.sub(weiAmount);\r\n        msg.sender.transfer(refundAmount);\r\n    }\r\n\r\n    if (_referrer != address(0)) {\r\n        referrers[msg.sender] = _referrer;\r\n    }\r\n}\r\n  \r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) public view returns (uint256) {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n        uint256 tokenAmount = _getTokenAmount(_weiAmount);\r\n        uint256 curBalance = token.balanceOf(address(this));\r\n        if (tokenAmount > curBalance) {\r\n            return curBalance.mul(1e18).div(rate);\r\n        }\r\n        return _weiAmount;\r\n    }\r\n  \r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n  \r\n      function _processPurchase(address _buyer, address _referrer, uint256 _tokenAmount, uint256 _referralBonus) internal {\r\n        _deliverTokens(_buyer, _tokenAmount);\r\n\r\n        \r\n        address payable currentReferrer = payable(_referrer);\r\n        uint256 f1Bonus = _referralBonus.mul(f1BonusRate).div(10);\r\n        uint256 f2Bonus = _referralBonus.mul(f2BonusRate).div(10);\r\n        uint256 f3Bonus = _referralBonus.mul(f3BonusRate).div(10);       \r\n        uint256 f4Bonus = _referralBonus.mul(f4BonusRate).div(10);\r\n        uint256 f5Bonus = _referralBonus.mul(f5BonusRate).div(10);\r\n        uint256 f6Bonus = _referralBonus.mul(f6BonusRate).div(10);\r\n        uint256 f7Bonus = _referralBonus.mul(f7BonusRate).div(10);\r\n\r\n\r\n        if (currentReferrer != address(0)) {\r\n            currentReferrer.transfer(f1Bonus);\r\n            address f2Referrer = referrers[currentReferrer];\r\n            if (f2Referrer != address(0)) {\r\n                address payable f2ReferrerPayable = payable(f2Referrer);\r\n                f2ReferrerPayable.transfer(f2Bonus);\r\n                address f3Referrer = referrers[f2Referrer];\r\n                if (f3Referrer != address(0)) {\r\n                    address payable f3ReferrerPayable = payable(f3Referrer);\r\n                    f3ReferrerPayable.transfer(f3Bonus);\r\n                    address f4Referrer = referrers[f3Referrer];\r\n                    if (f4Referrer != address(0)) {\r\n                        address payable f4ReferrerPayable = payable(f4Referrer);\r\n                        f4ReferrerPayable.transfer(f4Bonus);\r\n                        address f5Referrer = referrers[f4Referrer];\r\n                        if (f5Referrer != address(0)) {\r\n                            address payable f5ReferrerPayable = payable(f5Referrer);\r\n                            f5ReferrerPayable.transfer(f5Bonus);\r\n                            address f6Referrer = referrers[f5Referrer];\r\n                            if (f6Referrer != address(0)) {\r\n                                address payable f6ReferrerPayable = payable(f6Referrer);\r\n                                f6ReferrerPayable.transfer(f6Bonus);\r\n                                address f7Referrer = referrers[f6Referrer];\r\n                                if (f7Referrer != address(0)) {\r\n                                    address payable f7ReferrerPayable = payable(f7Referrer);\r\n                                    f7ReferrerPayable.transfer(f7Bonus);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        purchasedBnb[_beneficiary] = _weiAmount.add(purchasedBnb[_beneficiary]);\r\n    }\r\n  \r\n    function _getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\r\n        return _weiAmount.mul(rate).div(1e18);\r\n    }\r\n  \r\n    function setPresaleRate(uint256 _rate) external {\r\n        require(admin == msg.sender, \"caller is not the owner\");\r\n        rate = _rate;\r\n    }\r\n  \r\n    function maxBnb(address _beneficiary) public view returns (uint256) {\r\n        return weiMaxPurchaseBnb.sub(purchasedBnb[_beneficiary]);\r\n    }\r\n  \r\n    function withdrawCoins() external {\r\n        require(admin == msg.sender, \"caller is not the owner\");\r\n        admin.transfer(address(this).balance);\r\n    }\r\n  \r\n    function withdrawTokens(address tokenAddress, uint256 tokens) external {\r\n        require(admin == msg.sender, \"caller is not the owner\");\r\n        IST20(tokenAddress).transfer(admin, tokens);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"contract IST20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"_getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"_preValidatePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f1BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f2BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f3BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f4BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f5BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f6BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f7BonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"maxBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setPresaleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IST20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiMaxPurchaseBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sale_Contract", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000005150ae84a8cdf000000000000000000000000000000b628800a4b3b5777cb812b9acd9cb9f478adbb72000000000000000000000000000000000000000026c62ad77dc602dae0000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10753ba1131f12145f675ddf32603a8a64756e730eff23ceb59ac2f849fb1b38"}