{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contracts/Bep20/ViewImplimentV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n\\r\\nimport \\\"../interfaces/storages/IStatusStorage.sol\\\";\\r\\nimport \\\"../interfaces/storages/IUserStorage.sol\\\";\\r\\nimport \\\"../interfaces/storages/IWalletStorage.sol\\\";\\r\\nimport \\\"../interfaces/storages/IDepositeStorage.sol\\\";\\r\\nimport \\\"../interfaces/storages/IFrozenStorage.sol\\\";\\r\\nimport \\\"../interfaces/storages/ISupplyStorage.sol\\\";\\r\\nimport \\\"../interfaces/storages/ITeam.sol\\\";\\r\\nimport \\\"../interfaces/storages/IReferalFirstLine.sol\\\";\\r\\nimport \\\"../interfaces/storages/IUnfrozen.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/OwnableV2.sol\\\";\\r\\nimport \\\"../interfaces/IViewV2.sol\\\";\\r\\n\\r\\ncontract ViewImplimentV4 is IViewV2, OwnableV2\\r\\n{\\r\\n\\r\\n    /// OLD\\r\\n    IUserStorage private userStorage = IUserStorage(0x90F784E20641A023f851C56598D28634a3d7B1Ac);\\r\\n    IWalletStorage private walletStorage = IWalletStorage(0x49B423C4dda814D12dBe56101aAE76d2F3517F1e); \\r\\n    IUnfrozen private unfrozenStorage = IUnfrozen(0xa651268e502252b7471a89F7409a5A1Fc5836c83); \\r\\n    IDepositeStorage private depositeStorage = IDepositeStorage(0x682a45E21f9F781f5090EacFE9797383E1FBDD6F); \\r\\n    IFrozenStorage private frozenStorage = IFrozenStorage(0xfCAbBE556573F1b3a36b5d3010D6B96c748Dc478);\\r\\n    ITeam private team = ITeam(0xa316b11DEf2f93aDfD3C9CB404c88794c1704430);\\r\\n    IReferalFirstLine private firstLineStorage = IReferalFirstLine(0x2aA270F1aA0D01f921858Bb5B3859D6200363FbA);\\r\\n    IStatusStorage private statusStorage = IStatusStorage(0x7e34ED56a940844907F04F3FdD342b849617214D);\\r\\n    address private controller = 0xDC90513A825E56a31DD25bF82Fbf86e53cc1E42A ;\\r\\n    uint private _day = 86400;\\r\\n    uint private _twoWeek = 1209600;\\r\\n    uint8 private _transitionWithGuild = 0;\\r\\n    uint private _stapHalfing = 25000000 ether;\\r\\n    struct StatusTerms\\r\\n    {\\r\\n        // Bonuses\\r\\n        uint8 levelsOpened;\\r\\n\\r\\n        // Terms\\r\\n        uint personalStacking;\\r\\n        uint teamStacking;\\r\\n\\r\\n        uint8 firstLineStatusLevelCount;\\r\\n    }\\r\\n    uint private fullReferalPercent = 15;\\r\\n    StatusTerms[]  private  _terms;\\r\\n    uint8[] private refPercents = [4,3,1,1,1,1,1,1,1,1];\\r\\n    mapping(uint8 => uint8[]) private _halfingsToLvlPercent;\\r\\n   \\r\\n    constructor()\\r\\n    {\\r\\n        _terms.push(StatusTerms(  1,  0,             0,             0));\\r\\n        _terms.push(StatusTerms(  2,  7000 ether,    21000 ether,    3));\\r\\n        _terms.push(StatusTerms(  4,  25000 ether,   90000 ether,    3));\\r\\n        _terms.push(StatusTerms(  6,  75000 ether,   375000 ether,   3));\\r\\n        _terms.push(StatusTerms(  7,  200000 ether,  1500000 ether,  3));\\r\\n        _terms.push(StatusTerms(  8,  500000 ether,  7500000 ether,  3));\\r\\n        _terms.push(StatusTerms(  9,  1250000 ether, 37500000 ether, 3));\\r\\n        _terms.push(StatusTerms(  10, 2500000 ether, 112500000 ether,3));\\r\\n        \\r\\n        _halfingsToLvlPercent[20] = [100,110,120,150,170,200,200,200]; //0\\r\\n        _halfingsToLvlPercent[19] = _halfingsToLvlPercent[20];         //0\\r\\n        _halfingsToLvlPercent[18] = _halfingsToLvlPercent[20];         //25\\r\\n        \\r\\n        _halfingsToLvlPercent[17] = [100,100,100,130,150,180,180,180]; //50\\r\\n        _halfingsToLvlPercent[16] = [70,80,90,100,110,120,130,140];    //75\\r\\n        \\r\\n        _halfingsToLvlPercent[15] = [60,70,75,80,90,100,110,120];      //100\\r\\n\\r\\n        _halfingsToLvlPercent[14] = [50,60,65,70,80,90,100,110];       //125\\r\\n\\r\\n        _halfingsToLvlPercent[13] = [45,50,55,60,70,80,90,100];        //150\\r\\n\\r\\n        _halfingsToLvlPercent[12] = [40,45,50,55,60,70,80,90];         //175\\r\\n\\r\\n        _halfingsToLvlPercent[11] = [35,40,45,50,55,60,70,80];         //200\\r\\n        _halfingsToLvlPercent[10] = _halfingsToLvlPercent[11];         //225\\r\\n\\r\\n        _halfingsToLvlPercent[9] = [30,35,40,45,50,55,60,70];         //250\\r\\n        _halfingsToLvlPercent[8] = _halfingsToLvlPercent[9];          //275\\r\\n        \\r\\n        _halfingsToLvlPercent[7] = [25,30,35,40,45,50,55,60];         //300\\r\\n        _halfingsToLvlPercent[6] = _halfingsToLvlPercent[7];          //325\\r\\n\\r\\n        _halfingsToLvlPercent[5] = [20,25,30,35,40,45,50,55];         //350\\r\\n        _halfingsToLvlPercent[4] = _halfingsToLvlPercent[5];          //375\\r\\n\\r\\n        _halfingsToLvlPercent[3] = [15,20,25,30,35,40,45,50];         //400\\r\\n        _halfingsToLvlPercent[2] = _halfingsToLvlPercent[3];          //425\\r\\n\\r\\n        _halfingsToLvlPercent[1] = [10,15,20,25,30,35,40,45];         //450\\r\\n        _halfingsToLvlPercent[0] = _halfingsToLvlPercent[1];          //475\\r\\n    }\\r\\n\\r\\n/// USER\\r\\n    function isUserExist(address acc) public   override view returns(bool)\\r\\n    {\\r\\n        return userStorage.getUserIdByAddress(acc) != 0;\\r\\n    } \\r\\n    function isUserExistById(uint id) public   override view returns(bool) \\r\\n    {\\r\\n        return userStorage.getUserAddressById(id) != address(0);\\r\\n    } \\r\\n    function getReferalIdById(uint id) public   override view returns(uint)\\r\\n    {\\r\\n        return userStorage.getReferalById(id);\\r\\n    }\\r\\n    function getAddressById(uint id) public   override view returns (address)\\r\\n    {\\r\\n        return userStorage.getUserAddressById(id);\\r\\n    }\\r\\n    function getIdByAddress(address acc)public   override view returns(uint)\\r\\n    {\\r\\n        return userStorage.getUserIdByAddress(acc);\\r\\n    }\\r\\n    function getUser(uint id)public   override view returns(address,uint,uint,uint8,uint)\\r\\n    {\\r\\n        ( address userAddress, \\r\\n          uint referalId,\\r\\n          uint depositeTeam, \\r\\n          uint8 currentStatusLevel,\\r\\n          uint teamCount) = userStorage.getUserById(id);\\r\\n          currentStatusLevel = statusStorage.getStatus(id);\\r\\n        return (userAddress,referalId,depositeTeam,currentStatusLevel,teamCount);\\r\\n    }\\r\\n///\\r\\n\\r\\n/// TEAM   \\r\\n    function getRefCount(uint id, uint8 lvl) public   override view returns (uint)\\r\\n    {\\r\\n        return team.getTeamCountLVL(id, lvl);\\r\\n    }\\r\\n    function getStatsCount(uint id) public   override view returns (uint)\\r\\n    {\\r\\n        uint8 statusLevel = statusStorage.getStatus(id);\\r\\n        uint count = 0;\\r\\n        uint[] memory inviters = firstLineStorage.getReferals(id);\\r\\n        for (uint u = 0; u < inviters.length;u++)\\r\\n        {  \\r\\n            address refererAddress = userStorage.getUserAddressById(inviters[u]);\\r\\n            if (statusStorage.getStatus(inviters[u]) >= statusLevel &&\\r\\n                unfrozenStorage.getUnfrozenByAddress(refererAddress))\\r\\n            {\\r\\n                count ++;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n    function checkUpdate(uint id) public override view returns(bool)\\r\\n    {\\r\\n        uint8 statusLevel = statusStorage.getStatus(id);\\r\\n        address userAddress = userStorage.getUserAddressById(id);\\r\\n        if (statusLevel >= _transitionWithGuild)\\r\\n        {\\r\\n            if (!unfrozenStorage.getUnfrozenByAddress(userAddress))\\r\\n            {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        if (statusLevel >= _terms.length-1)\\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n        \\r\\n        uint personalStacking = depositeStorage.getDeposite(userAddress);\\r\\n        uint teamStacking = userStorage.getUserDepositeTeam(id);\\r\\n        \\r\\n        uint firstLineStatusLevel = getStatsCount(id);\\r\\n        if (personalStacking >= _terms[statusLevel+1].personalStacking &&\\r\\n            teamStacking >= _terms[statusLevel+1].teamStacking &&\\r\\n            firstLineStatusLevel >= _terms[statusLevel+1].firstLineStatusLevelCount)\\r\\n        {\\r\\n            return true;\\r\\n        }\\r\\n        else \\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    function getLine (uint id) public override view returns (uint[] memory)\\r\\n    {\\r\\n        return firstLineStorage.getReferals(id);\\r\\n    }\\r\\n    function rewardPass(uint userId, uint8 lvl)public view returns(bool)\\r\\n    {\\r\\n        uint8 userStatusLvl = statusStorage.getStatus(userId);\\r\\n        uint8 linesOpened = _terms[userStatusLvl].levelsOpened;\\r\\n        if (linesOpened >= lvl+1)\\r\\n        {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n///\\r\\n\\r\\n/// WALLET\\r\\n    function balanceOf(address account) public   override view returns (uint)\\r\\n    {\\r\\n        return balanceWithFrozen(account);\\r\\n    }\\r\\n    function allowance(address owner, address spender) public   override view returns (uint)\\r\\n    {\\r\\n        return walletStorage.getAllow(owner, spender);\\r\\n    }\\r\\n///\\r\\n\\r\\n/// FROZEN\\r\\n    function getFrozenToken(address acc) public   override view returns(uint)\\r\\n    {\\r\\n        uint id = userStorage.getUserIdByAddress(acc);\\r\\n        if (frozenStorage.getFrozenDate(id)+ _twoWeek < block.timestamp )\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        return frozenStorage.getFrozenTokens(id);\\r\\n    }\\r\\n    function getFrozenDate(address acc) public   override view returns(uint)\\r\\n    {\\r\\n        uint id = userStorage.getUserIdByAddress(acc);\\r\\n        uint frozenDate = frozenStorage.getFrozenDate(id);\\r\\n        if (frozenDate + _twoWeek < block.timestamp)\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        return frozenDate;\\r\\n    }\\r\\n    function balanceWithFrozen(address acc) public   override view returns(uint)\\r\\n    {\\r\\n        uint balance = walletStorage.getBalance(acc);\\r\\n        uint userId = userStorage.getUserIdByAddress(acc);\\r\\n        if (frozenStorage.getFrozenDate(userId)+ _twoWeek > block.timestamp )\\r\\n        {\\r\\n            balance -= frozenStorage.getFrozenTokens(userId);\\r\\n        }\\r\\n        return balance; \\r\\n    }\\r\\n///\\r\\n\\r\\n/// Unfrozen\\r\\n    function getCount() public  view returns (uint) {\\r\\n        return unfrozenStorage.getCount();\\r\\n    }\\r\\n\\r\\n    function getUnfrozenById(uint userId) public  view returns (address) {\\r\\n        return unfrozenStorage.getUnfrozenById(userId);\\r\\n    }\\r\\n\\r\\n    function getUnfrozenByAddress(address acc) public  view returns (bool) {\\r\\n        if (getEmission() == 0)\\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n        return unfrozenStorage.getUnfrozenByAddress(acc);\\r\\n    }\\r\\n\\r\\n    function getExtra(uint balance) public  view returns (uint8) {\\r\\n        return unfrozenStorage.getExtra(balance);\\r\\n    }\\r\\n///\\r\\n\\r\\n/// SUPPLY\\r\\n    /// Skolko est v sisteme\\r\\n    function totalSupply() public   override view returns (uint)\\r\\n    {\\r\\n        return 500000000 ether - walletStorage.getBalance(controller);\\r\\n    }\\r\\n    /// Skolko mojet bit vipusheno v sistemy\\r\\n    function getEmission() public   override view returns(uint)\\r\\n    {\\r\\n        return walletStorage.getBalance(controller);\\r\\n    } \\r\\n///\\r\\n\\r\\n/// DEPOSITE\\r\\n    function getDeposite(address acc) public   override view returns(uint)\\r\\n    {\\r\\n        return depositeStorage.getDeposite(acc);\\r\\n    }\\r\\n    function getDepositeDate(address acc) public   override view returns(uint)\\r\\n    {\\r\\n        return depositeStorage.getDepDate(acc);\\r\\n    }\\r\\n    function getDepositeProfit(address acc) public   override view returns(uint)\\r\\n    {\\r\\n        uint sup = walletStorage.getBalance(controller);\\r\\n        uint userId = getIdByAddress(acc);\\r\\n        uint depDate = getDepositeDate(acc);\\r\\n        uint userDeposite = getDeposite(acc);\\r\\n        uint8 userPercent = getPercent(statusStorage.getStatus(userId));\\r\\n        if (unfrozenStorage.getUnfrozenByAddress(acc))\\r\\n        {\\r\\n            userPercent += (unfrozenStorage.getExtra(getDeposite(acc)))*10;\\r\\n        }\\r\\n        uint secPassed = block.timestamp - depDate;\\r\\n        uint profit = secPassed * ((userDeposite * userPercent / 1000) / 30 / _day); \\r\\n        if (profit > sup) {\\r\\n            profit = sup;\\r\\n        }\\r\\n        return profit;\\r\\n    }\\r\\n    function getClearPercent(uint amount) public view returns(uint)\\r\\n    {\\r\\n        return amount - (amount /100 * fullReferalPercent);\\r\\n    }\\r\\n    function findReferalReward(uint amount, uint8 line) public view returns (uint)\\r\\n    {\\r\\n        uint percent =  refPercents[line];\\r\\n        return ((amount * percent) / 100);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function getPercent(uint8 lvl) private view returns(uint8)\\r\\n    {\\r\\n        uint sup = walletStorage.getBalance(controller);\\r\\n        if (sup == 0 ether)\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        uint8 halfingLvl = uint8(sup/_stapHalfing);\\r\\n        return _halfingsToLvlPercent[halfingLvl][lvl];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n///\\r\\n\\r\\n/// ADMIN\\r\\n\\r\\n    function setGuildStats (uint8 _value) onlyOwner public {\\r\\n        _transitionWithGuild = _value;\\r\\n    }\\r\\n    function setUnfrozen(address newAdr) onlyOwner public {\\r\\n        unfrozenStorage = IUnfrozen(newAdr);\\r\\n    }\\r\\n    function setWallet(address newAdr) onlyOwner public \\r\\n    {\\r\\n        walletStorage = IWalletStorage(newAdr);\\r\\n    }\\r\\n    function setUser (address newAdr) onlyOwner public\\r\\n    {\\r\\n        userStorage = IUserStorage(newAdr);\\r\\n    }\\r\\n    function setDeposite(address newAdr) onlyOwner public \\r\\n    {\\r\\n        depositeStorage = IDepositeStorage(newAdr);\\r\\n    }    \\r\\n    function setFrozen(address newAdr) onlyOwner public \\r\\n    {\\r\\n        frozenStorage = IFrozenStorage(newAdr);\\r\\n    }\\r\\n    function setTeam(address newAdr) onlyOwner public \\r\\n    {\\r\\n        team = ITeam(newAdr);\\r\\n    }\\r\\n    function setFirstLine(address newAdr) onlyOwner public \\r\\n    {\\r\\n        firstLineStorage = IReferalFirstLine(newAdr);\\r\\n    }\\r\\n    function setController (address _contr) onlyOwner public \\r\\n    {\\r\\n        controller = _contr;\\r\\n    }\\r\\n    function setStatus (address newAdr) onlyOwner public \\r\\n    {\\r\\n        statusStorage = IStatusStorage(newAdr);\\r\\n    }\\r\\n///\\r\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/IViewV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n\\nimport \\\"./IView.sol\\\";\\ninterface IViewV2 is IView\\n{\\n    function rewardPass(uint userId, uint8 lvl)external view returns(bool);\\n    function findReferalReward(uint amount, uint8 line) external view returns (uint);\\n    function getClearPercent(uint amount) external view returns(uint);\\n    function getCount() external  view returns (uint);\\n    function getUnfrozenById(uint userId) external  view returns (address);\\n    function getUnfrozenByAddress(address acc) external  view returns (bool);\\n    function getExtra(uint balance) external  view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/OwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract OwnableV2 is Context\\n{\\n    address _owner;\\n    address public _newOwner;\\n    constructor()  \\n    {\\n        _owner = payable(msg.sender);\\n    }\\n\\n    modifier onlyOwner() \\n    {\\n        require(_msgSender() == _owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address newOwner) onlyOwner public\\n    {\\n        _newOwner = newOwner;\\n    }\\n    function confirm() public\\n    {\\n        require(_newOwner == msg.sender);\\n        _owner = _newOwner;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IUnfrozen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n\\ninterface IUnfrozen\\n{\\n    function getCount() external view returns (uint);\\n    function getUnfrozenById(uint userId) external view returns (address);\\n    function getUnfrozenByAddress(address acc) external view returns (bool);\\n    function getExtra(uint balance) external view returns (uint8);\\n    function setUnfrozen (address acc) external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IReferalFirstLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IReferalFirstLine\\n{\\n/// VIEW\\n    function getReferalsCount(uint id) external view returns (uint);\\n    function getReferals(uint id) external view returns(uint[] memory);\\n///\\n\\n/// FUNC    \\n    function addReferal(uint id, uint refId ) external;\\n///    \\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/ITeam.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface ITeam\\n{\\n    function getTeamCountLVL(uint id, uint8 lvl) external view returns (uint);\\n    function getTeamCountStats(uint id) external view returns (uint);\\n    function addTeamer (uint id, uint8 lvl) external;\\n    function addTeameStatus (uint id) external;\\n    function clearTeameStatus (uint id)  external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/ISupplyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface ISupplyStorage\\n{\\n    function getSupply() external view returns(uint, uint);\\n    function subTokenSupply(uint amount)  external;\\n    function addTokenSupply(uint amount)  external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IFrozenStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IFrozenStorage\\n{\\n    function getFrozenDate(uint id) external view returns(uint);\\n    function getFrozenTokens(uint id) external view returns (uint);\\n    function setFrozenDate(uint id,uint date) external;\\n    function setFrozenTokens(uint id, uint tokens) external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IDepositeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IDepositeStorage\\n{\\n    function getDeposite(address acc) external view returns (uint);\\n    function getDepDate (address acc) external view returns(uint);\\n    function addDep(address acc, uint amount) external;\\n    function subDep(address acc, uint amount) external;\\n    function setDepDate(address acc, uint date) external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IWalletStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IWalletStorage\\n{\\n    function getBalance(address acc) external view returns(uint);\\n    function getAllow(address acc, address spender) external view returns (uint);\\n    function addBalance(address acc, uint amount) external;\\n    function subBalance(address acc, uint amount) external;\\n    function allow(address acc, address rec, uint amount) external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IUserStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IUserStorage\\n{\\n    function isUserExistByAddress(address user) external view returns(bool);\\n    function isUserExistById(uint id) external view returns(bool);\\n    function getReferalByAddress(address userAddress) external view returns(uint);\\n    function getReferalById(uint id) external view returns(uint);\\n    function getUserByAddress(address userAddress) external view returns(uint,uint,uint,uint8,uint);\\n    function getUserById(uint id) external view returns(address,uint,uint,uint8,uint);\\n    function getUserIdByAddress(address acc) external view returns(uint);\\n    function getUserAddressById(uint id) external view returns(address);\\n    function getUserDepositeTeam(uint id) external view returns(uint);\\n    function getUserStatusLVL(uint id) external view returns(uint8);\\n\\n    //// UPDATE\\n    function addUser(address user, uint referalId) external;\\n    function addReferal (uint referalId) external;\\n    function updateUserDepositeTeam(uint userId,uint depositeTeam) external;\\n    function updateUserStatus(uint userId) external;\\n    function updateUserTeamCount(uint userId,uint team) external;\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/storages/IStatusStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IStatusStorage\\r\\n{\\r\\n/// VIEW\\r\\n    function getStatus(uint id) external view returns (uint8);\\r\\n///\\r\\n\\r\\n/// FUNC    \\r\\n    function upStatus(uint id) external;\\r\\n///    \\r\\n}\"\r\n    },\r\n    \"contracts/contracts/interfaces/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract Context \\n{\\n    function _msgSender() internal view virtual returns (address) \\n    {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) \\n    {\\n        this; \\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/interfaces/IView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IView \\n{\\n    function isUserExist(address acc) external view returns(bool);\\n    function isUserExistById(uint id) external view returns(bool);\\n    function getReferalIdById(uint id) external view returns(uint);\\n    function getAddressById(uint id) external view returns (address);\\n    function getIdByAddress(address acc)external view returns(uint);\\n    function getUser(uint id)external view returns(address,uint,uint,uint8,uint);\\n    function getRefCount(uint id, uint8 lvl) external view returns (uint);\\n    function getStatsCount(uint id) external view returns (uint);\\n    function checkUpdate(uint id) external view returns(bool);\\n    function getLine (uint id) external view returns (uint[] memory);\\n    function totalSupply() external view returns (uint);\\n    function getEmission() external view returns(uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function getFrozenToken(address acc) external view returns(uint);\\n    function getFrozenDate(address acc) external view returns(uint);\\n    function balanceWithFrozen(address acc) external view returns(uint);\\n    function getDeposite(address acc) external view returns(uint);\\n    function getDepositeDate(address acc) external view returns(uint);\\n    function getDepositeProfit(address acc) external view returns(uint);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"balanceWithFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"checkUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"line\",\"type\":\"uint8\"}],\"name\":\"findReferalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getClearPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getDeposite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getDepositeDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getDepositeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getExtra\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getFrozenDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getFrozenToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLine\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lvl\",\"type\":\"uint8\"}],\"name\":\"getRefCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReferalIdById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStatsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"getUnfrozenByAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getUnfrozenById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"isUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isUserExistById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lvl\",\"type\":\"uint8\"}],\"name\":\"rewardPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contr\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setDeposite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setFirstLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setGuildStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setUnfrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ViewImplimentV4", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}