{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    \r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 public _buyTax = 200;\r\n    uint256 public _sellTax = 2000;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 private startAddLPBlock;\r\n    address private immutable _mainPair;\r\n\r\n\r\n    uint256 private _startTradeTime;\r\n\r\n    constructor (\r\n        address RouterAddress, \r\n        address ReceiveAddress,\r\n        address Token0Address,\r\n        address FundAddress\r\n    ){\r\n        _name = \"BTCX\";\r\n        _symbol = \"BTCX\";\r\n        _decimals = 18;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address pair = swapFactory.createPair(address(this), Token0Address);\r\n\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** _decimals;\r\n        uint256 total = 21000000 * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        uint256 receiveTotal = total;\r\n        _balances[ReceiveAddress] = receiveTotal;\r\n        emit Transfer(address(0), ReceiveAddress, receiveTotal);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _isExcludedFromFees[ReceiveAddress] = true;\r\n        _isExcludedFromFees[fundAddress] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[msg.sender] = true;\r\n        _isExcludedFromFees[address(0)] = true;\r\n        _isExcludedFromFees[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        require(Token0Address < address(this),\"!pool\");\r\n    \r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount && amount >=300, \"BNE\");\r\n\r\n        bool takeFee;\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        \r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n\r\n        if (isAddLiquidity || isDelLiquidity){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_isExcludedFromFees[from] && to == _mainPair) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n            if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && isAddLiquidity && _isAddLper[from]);\r\n                } else if (block.number < startTradeBlock) {\r\n                    revert(\"!startTrade\");\r\n                }\r\n                takeFee = true;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if(!_isExcludedFromFees[to] && !_swapPairList[to]  && _startTradeTime + 3600 > block.timestamp){\r\n            require(balanceOf(to) <= 1000 * 10**18,\"exceed wallet limit!\");\r\n        }\r\n    }\r\n\r\n    function _isLiquidity(address from,address to)internal view returns(bool isAdd,bool isDel){\r\n        address token0 = ISwapPair(address(_mainPair)).token0();\r\n        (uint r0,,) = ISwapPair(address(_mainPair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(_mainPair));\r\n        if( _swapPairList[to] ){\r\n            if( token0 != address(this) && bal0 > r0 ){\r\n                isAdd = bal0 - r0 > 0;\r\n            }\r\n        }\r\n        if( _swapPairList[from] ){\r\n            if( token0 != address(this) && bal0 < r0 ){\r\n                isDel = r0 - bal0 > 0; \r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        senderBalance -= tAmount;\r\n        _balances[sender] = senderBalance;\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 swapFeeAmount;\r\n            if (_swapPairList[sender]) {//Buy\r\n                swapFeeAmount = tAmount * _buyTax / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                swapFeeAmount = tAmount * _sellTax / 10000;\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, fundAddress, swapFeeAmount);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n    modifier onlyFunder() {\r\n        address msgSender = msg.sender;\r\n        require(_isExcludedFromFees[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) public _isAddLper;\r\n\r\n    function setAddLp(address addr,bool state)external onlyFunder {\r\n        _isAddLper[addr] = state;\r\n    }\r\n\r\n    function setFees(uint256 fee1,uint256 fee2)external onlyFunder {\r\n        _buyTax = fee1;\r\n        _sellTax = fee2;\r\n    }\r\n\r\n\r\n\r\n    function setFundAddress(address addr) external onlyFunder {\r\n        fundAddress = addr;\r\n        _isExcludedFromFees[addr] = true;\r\n    }\r\n\r\n\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_isExcludedFromFees[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function startTrade() external onlyFunder {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n        _startTradeTime = block.timestamp;\r\n    }\r\n}\r\n\r\ncontract BTCX is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //Receive\r\n        address(0xB2Ff4ef0AB868549b22DC7787263071cbe39A0C4),\r\n    //Token0\r\n        address(0xa21693A96CF0921b399E394fe3E8d62fa787D027),\r\n    //FundAddress\r\n        address(0xdd35Ef458c4f07Ad8145Ff4f0Ca92Cdda70A9C45)\r\n    ){\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isAddLper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAddLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee2\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTCX", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb4180531a4e9aded0bece554f295e48c0b2054cfb3fe8d4f8132bc4b3828571"}