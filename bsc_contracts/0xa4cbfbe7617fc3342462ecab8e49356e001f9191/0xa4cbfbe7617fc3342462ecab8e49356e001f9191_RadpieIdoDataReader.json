{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRadpieIDODataReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { ReaderDatatype } from \\\"../ReaderDatatype.sol\\\";\\n\\ninterface IDLPRush {\\n    struct UserInfo {\\n        uint256 converted;\\n        uint256 factor;\\n    }\\n    \\n    function totalConverted() external view returns (uint256);\\n    function userInfos(address _user) external view returns(UserInfo memory); \\n}\\n\\ninterface IVlmgp\\n{\\n    function totalLocked() external view returns (uint256);\\n    function getUserTotalLocked(address _user) external view returns (uint256);\\n}\\n\\ninterface IBurnEventManager\\n{\\n    function eventInfos(uint256 _eventId) external view returns( uint256, string memory, uint256, bool); \\n    function userMgpBurnAmountForEvent(address _user, uint256 evntId) external view returns(uint256);\\n}\\n\\ninterface IRadpieReader is ReaderDatatype\\n{\\n    function getRadpieInfo(address account) external view returns (RadpieInfo memory);\\n    function getRadpiePoolInfo(\\n        uint256 poolId,\\n        address account,\\n        RadpieInfo memory systemInfo\\n    ) external view returns (RadpiePool memory);\\n    function getDlpPrice() external view returns (uint256);\\n}\\n\\ninterface IPendleRushV4\\n{\\n    function totalAccumulated() external view returns (uint256);\\n    function userInfos(address _user) external view returns(uint256, uint256); \\n\\n}\\n\\n\\ninterface IDlpHelper\\n{\\n   \\tfunction getPrice() external view returns (uint256 priceInEth);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/LockedBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\"\r\n    },\r\n    \"contracts/interfaces/radpieReader/IRDNTVestManagerReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct VestingSchedule {\\n    uint256 amount;\\n    uint256 endTime;\\n}    \\n\\ninterface IRDNTVestManagerReader {\\n\\n    function nextVestingTime() external view returns(uint256);\\n\\n    function getAllVestingInfo(\\n        address _user\\n    ) external view returns (VestingSchedule[] memory , uint256 totalRDNTRewards, uint256 totalVested, uint256 totalVesting);\\n}\"\r\n    },\r\n    \"contracts/RadpieIDODataReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport { IDLPRush } from \\\"./interfaces/IRadpieIDODataReader.sol\\\";\\nimport { IVlmgp } from \\\"./interfaces/IRadpieIDODataReader.sol\\\";\\nimport { IBurnEventManager } from \\\"./interfaces/IRadpieIDODataReader.sol\\\";\\nimport { IRadpieReader } from \\\"./interfaces/IRadpieIDODataReader.sol\\\";\\nimport { IPendleRushV4 } from \\\"./interfaces/IRadpieIDODataReader.sol\\\";\\n\\nimport { ReaderDatatype } from \\\"./ReaderDatatype.sol\\\";\\n\\n/// @title RadpieIdoDataReader\\n/// @author Magpie Team\\n\\ncontract RadpieIdoDataReader is Initializable, OwnableUpgradeable, ReaderDatatype {\\n\\n       /* ============ State Variables ============ */\\n\\n       IDLPRush public dlpRush;\\n       IVlmgp public vlmgp;\\n       IBurnEventManager public burnEventManager;\\n       IRadpieReader public radpieReader;\\n       IPendleRushV4 public pendleRushV4;\\n\\n       uint256 public totalWomConvereted;\\n       mapping(address => uint256) public userConvertedWom;\\n\\n       address public radpieAdmin = 0x0CdB34e6a4D635142BB92fe403D38F636BbB77b8;\\n\\n       /* ============ Structs ============ */\\n\\n       struct RadpieIdoData {\\n              uint256 totalMdlpConverterd;\\n              uint256 userConvertedMdlp;\\n              uint256 totalLockedMgp;\\n              uint256 userLockedMgp;\\n              uint256 totelBurnedMgpInEventByUser;\\n              uint256  totelBurnedMgpInGivenEvent;\\n              uint256 totalRadpieTvl;\\n              uint256 userTotalTvlInRadpieExcludeMDlp;\\n              userTvlInfo[] usertvlinfo; \\n              uint256 totelmPendleConverted;\\n              uint256 totelmPendleConvertedByUser;\\n              uint256 totalWomConvereted;\\n              uint256 userConvertedWom;\\n       }\\n\\n       struct userTvlInfo {\\n              address poolAddress;\\n              uint256 usersTvl;\\n       }\\n\\n       \\n       /* ===== 1st upgrade ===== */\\n       address public mDlpPoolReceiptToken;\\n\\n       uint256[49] private __gap;\\n\\n    /* ============ Errors ============ */\\n\\n       error IsZeroAddress();\\n       error IsZeroAmount();\\n\\n    /* ============ Constructor ============ */\\n\\n       function __RadpieIdoDataReader_init(\\n              address _dlpRush, \\n              address _vlMgp, \\n              address _burnEventManager, \\n              address _radpieReader,\\n              address _pendleRushV4\\n       ) \\n       public initializer \\n       {\\n              __Ownable_init();\\n              dlpRush = IDLPRush(_dlpRush);\\n              vlmgp = IVlmgp(_vlMgp);\\n              burnEventManager = IBurnEventManager(_burnEventManager);\\n              radpieReader = IRadpieReader(_radpieReader);\\n              pendleRushV4 = IPendleRushV4(_pendleRushV4);\\n       }\\n\\n    /* ============ External Getters ============ */\\n\\n       function getMDlpHoldersData( address _user ) external view returns( uint256 totalMdlpConverterd, uint256 userConvertedMdlp)\\n       {   \\n              if(address(mDlpPoolReceiptToken) != address(0)) \\n              {\\n                     totalMdlpConverterd = IERC20(mDlpPoolReceiptToken).totalSupply() * radpieReader.getDlpPrice() / 10**18;\\n                     userConvertedMdlp = IERC20(mDlpPoolReceiptToken).balanceOf(_user) * radpieReader.getDlpPrice() / 10**18; \\n              }\\n       }\\n\\n       function getvlLMgpHoldersData( address _user ) external view returns( uint256 totalLockedMgp, uint256 userLockedMgp )\\n       {   \\n              if(address(vlmgp) != address(0)) \\n              {\\n                     totalLockedMgp = vlmgp.totalLocked(); \\n                     userLockedMgp = vlmgp.getUserTotalLocked(_user);\\n              }\\n       }\\n\\n       function getMgpBurnersData( uint256 _eventId, address _user ) external view returns( uint256 totelBurnedMgpInEventByUser, uint256 totelBurnedMgpInGivenEvent)\\n       {   \\n              if(address(burnEventManager) != address(0)) \\n              {\\n                     totelBurnedMgpInEventByUser = burnEventManager.userMgpBurnAmountForEvent(_user, _eventId);\\n                     (,, totelBurnedMgpInGivenEvent, ) = burnEventManager.eventInfos(_eventId);\\n              }\\n       }\\n\\n       function getRadpieTvlProvidersData( address _user ) external view returns( uint256 totalRadpieTvl, userTvlInfo[] memory, uint256 userTotalTvlInRadpieExcludeMDLp )\\n       {\\n              uint256 _userTotalTvlInRadpieExcludeMDlp;\\n              userTvlInfo[] memory usertvlinfo;\\n\\n              if(address(radpieReader) != address(0)) \\n              {\\n                     RadpieInfo memory radpieinfo = radpieReader.getRadpieInfo(radpieAdmin);\\n\\n                     for(uint256 i = 1; i < radpieinfo.pools.length; i++) // at 0 index mPendle that excluded.\\n                     {\\n                            totalRadpieTvl += radpieinfo.pools[i].tvl;\\n                     }   \\n\\n                     RadpiePool[] memory pools = new RadpiePool[](radpieinfo.pools.length);\\n                     usertvlinfo = new userTvlInfo[](radpieinfo.pools.length - 1);   \\n\\n                     for (uint256 i = 1; i < radpieinfo.pools.length; ++i) { // at 0 index mPendle that excluded.\\n                            pools[i] =  radpieReader.getRadpiePoolInfo(i, _user, radpieinfo);\\n                            usertvlinfo[i - 1].poolAddress = pools[i].asset;\\n                            usertvlinfo[i - 1].usersTvl = pools[i].accountInfo.tvl;\\n                            _userTotalTvlInRadpieExcludeMDlp += pools[i].accountInfo.tvl;\\n                     }  \\n              }\\n\\n              return (totalRadpieTvl, usertvlinfo, _userTotalTvlInRadpieExcludeMDlp);\\n       }\\n\\n       function getmPendleConverterData( address _user ) external view returns( uint256 totelmPendleConverted, uint256 totelmPendleConvertedByUser)\\n       {   \\n              if(address(pendleRushV4) != address(0)) \\n              {\\n                     totelmPendleConverted =  pendleRushV4.totalAccumulated();     \\n                     ( totelmPendleConvertedByUser, ) = pendleRushV4.userInfos(_user); \\n              }\\n       }\\n\\n       function getWomConverterDataInWomUp(address _user) external view returns(uint256 _totalWomConvereted, uint256 _userConvertedWom)\\n       {\\n             \\n              _userConvertedWom = userConvertedWom[_user];\\n              _totalWomConvereted = totalWomConvereted;\\n       } \\n\\n       function getRadpieIdoData( uint256 _mgpBurnEventId, address _user ) external view returns ( RadpieIdoData memory )\\n       {\\n              RadpieIdoData memory radpieidodata;\\n\\n             if(address(mDlpPoolReceiptToken) != address(0)) \\n              {\\n                     radpieidodata.totalMdlpConverterd = IERC20(mDlpPoolReceiptToken).totalSupply() * radpieReader.getDlpPrice() / 10**18; \\n                     radpieidodata.userConvertedMdlp = IERC20(mDlpPoolReceiptToken).balanceOf(_user) * radpieReader.getDlpPrice() / 10**18;\\n              }\\n              if(address(vlmgp) != address(0)) \\n              {\\n                     radpieidodata.totalLockedMgp = vlmgp.totalLocked(); \\n                     radpieidodata.userLockedMgp = vlmgp.getUserTotalLocked(_user);\\n              }\\n              if(address(burnEventManager) != address(0)) \\n              {\\n                     radpieidodata.totelBurnedMgpInEventByUser = burnEventManager.userMgpBurnAmountForEvent(_user, _mgpBurnEventId);\\n                     (,, radpieidodata.totelBurnedMgpInGivenEvent, ) = burnEventManager.eventInfos(_mgpBurnEventId);\\n              }\\n              \\n              if(address(radpieReader) != address(0)) \\n              {\\n                     // uint256 totalRadpieTvl;\\n                     RadpieInfo memory radpieinfo = radpieReader.getRadpieInfo(radpieAdmin);       \\n                     for(uint256 i = 1; i < radpieinfo.pools.length; i++) // at 0 index mPendle that excluded.\\n                     {\\n                            radpieidodata.totalRadpieTvl += radpieinfo.pools[i].tvl;\\n                     }   \\n\\n                     RadpiePool[] memory pools = new RadpiePool[](radpieinfo.pools.length);\\n                     userTvlInfo[] memory _usertvlinfo = new userTvlInfo[](radpieinfo.pools.length - 1);   \\n\\n                     for (uint256 i = 1; i < radpieinfo.pools.length; ++i) { // at 0 index mPendle that excluded.\\n                            pools[i] =  radpieReader.getRadpiePoolInfo(i, _user, radpieinfo);\\n                            _usertvlinfo[i - 1].poolAddress = pools[i].asset;\\n                            _usertvlinfo[i - 1].usersTvl = pools[i].accountInfo.tvl;\\n                            radpieidodata.userTotalTvlInRadpieExcludeMDlp += pools[i].accountInfo.tvl;\\n                     }  \\n                     radpieidodata.usertvlinfo = _usertvlinfo;\\n              }\\n              if(address(pendleRushV4) != address(0)) \\n              {\\n                     radpieidodata.totelmPendleConverted =  pendleRushV4.totalAccumulated();     \\n                     (radpieidodata.totelmPendleConvertedByUser, ) = pendleRushV4.userInfos(_user); \\n              }\\n\\n              radpieidodata.totalWomConvereted = totalWomConvereted;\\n              radpieidodata.userConvertedWom = userConvertedWom[_user];\\n\\n              return radpieidodata;\\n       }\\n\\n    /* ============ Admin functions ============ */\\n\\n       function config(\\n              address _vlMgp, \\n              address _burnEventManager, \\n              address _radpieReader,\\n              address _pendleRushV4,\\n              address _radpieAdmin\\n       ) external onlyOwner {\\n              vlmgp = IVlmgp(_vlMgp);\\n              burnEventManager = IBurnEventManager(_burnEventManager);\\n              radpieReader = IRadpieReader(_radpieReader);\\n              pendleRushV4 = IPendleRushV4(_pendleRushV4);\\n              radpieAdmin = _radpieAdmin;\\n       }\\n\\n       function setMdlpPoolRecieptAddress( address _mDlpPoolReceiptToken ) external onlyOwner\\n       {\\n              mDlpPoolReceiptToken = _mDlpPoolReceiptToken;\\n       } \\n\\n       function setUsersWomConvertedDataInWomUp(address[] memory _users, uint256[] memory _amounts) external onlyOwner\\n       {\\n              for( uint256 i = 0; i < _users.length; i++)\\n              {\\n                     totalWomConvereted += _amounts[i];\\n                     userConvertedWom[_users[i]] = _amounts[i];\\n              }\\n       }\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/ReaderDatatype.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./interfaces/radiant/LockedBalance.sol\\\";\\nimport \\\"./interfaces/radpieReader/IRDNTVestManagerReader.sol\\\";\\n\\n\\ninterface ReaderDatatype {\\n\\n    struct RadpieInfo {\\n        address masterRadpie;\\n        address radpieStaking;\\n        address rdntRewardManager;\\n        address rdntVestManager;\\n        address vlRDP;\\n        address radpieOFT;\\n        address RDNT;\\n        address WETH;\\n        address RDNT_LP;  \\n        address mDLP;\\n        uint256 minHealthFactor;\\n        uint256 systemHealthFactor;\\n        RadpieRDNTInfo systemRDNTInfo;\\n        RadpieEsRDNTInfo esRDNTInfo;\\n        RadpiePool[] pools;\\n    }    \\n\\n    struct RadpieRDNTInfo {\\n        uint256 lockedDLPUSD;\\n        uint256 requiredDLPUSD;\\n        uint256 totalCollateralUSD;\\n        uint256 nextStartVestTime;\\n        uint256 lastHarvestTime;\\n        uint256 totalEarnedRDNT;\\n        uint256 systemVestable;\\n        uint256 systemVested;\\n        uint256 systemVesting;\\n        uint256 totalRDNTpersec;\\n        EarnedBalance[] vestingInfos;\\n\\n        uint256 userVestedRDNT;\\n        uint256 userVestingRDNT;\\n        VestingSchedule[] userVestingSchedules;\\n    }\\n\\n    struct RadpieEsRDNTInfo {\\n        address tokenAddress;\\n        uint256 balance;\\n        uint256 vestAllowance;\\n    }\\n    \\n    // by pools\\n    struct RadpiePool {\\n        uint256 poolId;\\n        uint256 sizeOfPool;\\n        uint256 tvl;\\n        uint256 debt;\\n        uint256 leveragedTVL;\\n        address stakingToken; // Address of staking token contract to be staked.\\n        address receiptToken; // Address of receipt token contract represent a staking position\\n        address asset;\\n        address rToken;\\n        address vdToken;\\n        address rewarder;\\n        address helper;\\n        bool    isActive;\\n        bool    isNative;\\n        string  poolType;\\n        uint256 assetPrice;\\n        uint256 maxCap;\\n        uint256 quotaLeft;\\n        RadpieLendingInfo radpieLendingInfo;\\n        ERC20TokenInfo stakedTokenInfo;\\n        RadpieAccountInfo  accountInfo;\\n        RadpieRewardInfo rewardInfo;\\n        RadpieLegacyRewardInfo legacyRewardInfo;\\n    }\\n\\n    struct RadpieAccountInfo {\\n        uint256 balance;\\n        uint256 stakedAmount;  // receipttoken\\n        uint256 stakingAllowance; // asset allowance\\n        uint256 availableAmount; // current stake amount\\n        uint256 mDLPAllowance;\\n        uint256 lockRDPAllowance;\\n        uint256 rdntBalance;\\n        uint256 rdntDlpBalance;\\n        uint256 tvl;\\n    }\\n\\n    struct RadpieRewardInfo {\\n        uint256 pendingRDP;\\n        address[]  bonusTokenAddresses;\\n        string[]  bonusTokenSymbols;\\n        uint256[]  pendingBonusRewards;\\n        uint256 entitledRDNT;\\n    }\\n\\n    struct RadpieLendingInfo {\\n        uint256 healthFactor;\\n        uint256 depositRate;\\n        uint256 borrowRate;\\n        uint256 RDNTDepositRate;\\n        uint256 RDNTDBorrowRate;\\n        uint256 depositAPR;\\n        uint256 borrowAPR;\\n        uint256 RDNTAPR;\\n        uint256 RDNTpersec;\\n    }        \\n\\n    struct RadpieLegacyRewardInfo {\\n        uint256[]  pendingBonusRewards;\\n        address[]  bonusTokenAddresses;\\n        string[] bonusTokenSymbols;\\n    }\\n\\n    struct ERC20TokenInfo {\\n        address tokenAddress;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"IsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dlpRush\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vlMgp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnEventManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_radpieReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleRushV4\",\"type\":\"address\"}],\"name\":\"__RadpieIdoDataReader_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEventManager\",\"outputs\":[{\"internalType\":\"contract IBurnEventManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vlMgp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnEventManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_radpieReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleRushV4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_radpieAdmin\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRush\",\"outputs\":[{\"internalType\":\"contract IDLPRush\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMDlpHoldersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMdlpConverterd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userConvertedMdlp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMgpBurnersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totelBurnedMgpInEventByUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totelBurnedMgpInGivenEvent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mgpBurnEventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRadpieIdoData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalMdlpConverterd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userConvertedMdlp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedMgp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLockedMgp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totelBurnedMgpInEventByUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totelBurnedMgpInGivenEvent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRadpieTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalTvlInRadpieExcludeMDlp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usersTvl\",\"type\":\"uint256\"}],\"internalType\":\"struct RadpieIdoDataReader.userTvlInfo[]\",\"name\":\"usertvlinfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totelmPendleConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totelmPendleConvertedByUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWomConvereted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userConvertedWom\",\"type\":\"uint256\"}],\"internalType\":\"struct RadpieIdoDataReader.RadpieIdoData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRadpieTvlProvidersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRadpieTvl\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usersTvl\",\"type\":\"uint256\"}],\"internalType\":\"struct RadpieIdoDataReader.userTvlInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"userTotalTvlInRadpieExcludeMDLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWomConverterDataInWomUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalWomConvereted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userConvertedWom\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getmPendleConverterData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totelmPendleConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totelmPendleConvertedByUser\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getvlLMgpHoldersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLockedMgp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLockedMgp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mDlpPoolReceiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleRushV4\",\"outputs\":[{\"internalType\":\"contract IPendleRushV4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"radpieAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"radpieReader\",\"outputs\":[{\"internalType\":\"contract IRadpieReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mDlpPoolReceiptToken\",\"type\":\"address\"}],\"name\":\"setMdlpPoolRecieptAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setUsersWomConvertedDataInWomUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWomConvereted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userConvertedWom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vlmgp\",\"outputs\":[{\"internalType\":\"contract IVlmgp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RadpieIdoDataReader", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}