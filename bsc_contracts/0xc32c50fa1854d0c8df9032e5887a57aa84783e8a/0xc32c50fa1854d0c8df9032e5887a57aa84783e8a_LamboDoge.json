{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LamboDoge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity >=0.8.7;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IBEP20 {\\r\\n\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the amount of tokens owned by `account`.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n\\t *\\r\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\r\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n\\t * zero by default.\\r\\n\\t *\\r\\n\\t * This value changes when {approve} or {transferFrom} are called.\\r\\n\\t */\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n\\t *\\r\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\r\\n\\t *\\r\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n\\t * that someone may use both the old and the new allowance by unfortunate\\r\\n\\t * transaction ordering. One possible solution to mitigate this race\\r\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\r\\n\\t * desired value afterwards:\\r\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event.\\r\\n\\t */\\r\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\r\\n\\t * allowance.\\r\\n\\t *\\r\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n\\t * another (`to`).\\r\\n\\t *\\r\\n\\t * Note that `value` may be zero.\\r\\n\\t */\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n\\t * a call to {approve}. `value` is the new allowance.\\r\\n\\t */\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `+` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Addition cannot overflow.\\r\\n\\t */\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b <= a, errorMessage);\\r\\n\\t\\tuint256 c = a - b;\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `*` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Multiplication cannot overflow.\\r\\n\\t */\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n\\t\\t// benefit is lost if 'b' is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\tif (a == 0) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b > 0, errorMessage);\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * Reverts when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * Reverts with custom message when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b != 0, errorMessage);\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\r\\n\\t\\treturn payable(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\r\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n\\t\\treturn msg.data;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n\\t/**\\r\\n\\t * @dev Returns true if `account` is a contract.\\r\\n\\t *\\r\\n\\t * [IMPORTANT]\\r\\n\\t * ====\\r\\n\\t * It is unsafe to assume that an address for which this function returns\\r\\n\\t * false is an externally-owned account (EOA) and not a contract.\\r\\n\\t *\\r\\n\\t * Among others, `isContract` will return false for the following\\r\\n\\t * types of addresses:\\r\\n\\t *\\r\\n\\t *  - an externally-owned account\\r\\n\\t *  - a contract in construction\\r\\n\\t *  - an address where a contract will be created\\r\\n\\t *  - an address where a contract lived, but was destroyed\\r\\n\\t * ====\\r\\n\\t */\\r\\n\\tfunction isContract(address account) internal view returns (bool) {\\r\\n\\t\\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n\\t\\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n\\t\\t// for accounts without code, i.e. `keccak256('')`\\r\\n\\t\\tbytes32 codehash;\\r\\n\\t\\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\tassembly { codehash := extcodehash(account) }\\r\\n\\t\\treturn (codehash != accountHash && codehash != 0x0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\r\\n\\t *\\r\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n\\t * imposed by `transfer`, making them unable to receive funds via\\r\\n\\t * `transfer`. {sendValue} removes this limitation.\\r\\n\\t *\\r\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n\\t *\\r\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\r\\n\\t * {ReentrancyGuard} or the\\r\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n\\t */\\r\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\r\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n\\t\\t(bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\r\\n\\t * plain`call` is an unsafe replacement for a function call: use this\\r\\n\\t * function instead.\\r\\n\\t *\\r\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n\\t * function (like regular Solidity function calls).\\r\\n\\t *\\r\\n\\t * Returns the raw returned data. To convert to the expected return value,\\r\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `target` must be a contract.\\r\\n\\t * - calling `target` with `data` must not revert.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\treturn _functionCallWithValue(target, data, 0, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n\\t * but also transferring `value` wei to `target`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - the calling contract must have an BNB balance of at least `value`.\\r\\n\\t * - the called Solidity function must be `payable`.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n\\t\\treturn _functionCallWithValue(target, data, value, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\r\\n\\t\\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n\\t\\tif (success) {\\r\\n\\t\\t\\treturn returndata;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\r\\n\\t\\t\\tif (returndata.length > 0) {\\r\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n\\t\\t\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\r\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\trevert(errorMessage);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `authorizedCallers`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n\\tuint256 public _timeLock = 0;\\r\\n\\tuint256 public _minimumVotes = 1;\\r\\n    address[] public _vote;\\r\\n    address[] public _authorizedCallersArray;\\r\\n\\taddress private _owner;\\r\\n\\tmapping(address => bool) private _authorizedCallers;\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\tevent AuthorizedCaller(address account,bool value);\\r\\n\\tevent TimeLockOperationRequested(address account,uint256 when,uint256 timelock);\\r\\n\\tevent TimeLockOperationAndVoteReset(address account);\\r\\n\\t/**\\r\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t */\\r\\n\\tconstructor () {\\r\\n\\t\\t_owner = _msgSender();\\r\\n\\t\\t_setAuthorizedCallers(_owner,true);\\r\\n\\t\\temit OwnershipTransferred(address(0), _owner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction owner() public view returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isAuthorizedCaller(address account) public view returns (bool) {\\r\\n\\t\\treturn _authorizedCallers[account];\\r\\n\\t}\\r\\n\\r\\n\\tmodifier needVote {\\r\\n\\t\\trequire((_vote.length >= _minimumVotes),\\\"Function does not meet quorum, initiate a vote request before and meet quorum.\\\");\\r\\n\\t\\t_timeLock = 0;\\r\\n\\t\\tif (_vote.length > 0) {\\r\\n\\t\\t\\tdelete _vote;\\r\\n\\t\\t}\\r\\n\\t\\temit TimeLockOperationAndVoteReset(_msgSender());\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier timeLockOperationAndNeedVote {\\r\\n\\t\\trequire((_vote.length >= _minimumVotes) && (_timeLock > 0 && _timeLock <= block.timestamp),\\\"Function is timelocked, initiate a timelock request before and wait for timelock to unlock\\\");\\r\\n\\t\\t_timeLock = 0;\\r\\n\\t\\tif (_vote.length > 0) {\\r\\n\\t\\t\\tdelete _vote;\\r\\n\\t\\t}\\r\\n\\t\\temit TimeLockOperationAndVoteReset(_msgSender());\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier timeLockOperationOrNeedVote {\\r\\n\\t\\trequire((_vote.length >= _minimumVotes) || (_timeLock > 0 && _timeLock <= block.timestamp),\\\"Function is timelocked, initiate a timelock request before and wait for timelock to unlock\\\");\\r\\n\\t\\t_timeLock = 0;\\r\\n\\t\\tif (_vote.length > 0) {\\r\\n\\t\\t\\tdelete _vote;\\r\\n\\t\\t}\\r\\n\\t\\temit TimeLockOperationAndVoteReset(_msgSender());\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyOwner {\\r\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller must be owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier authorizedCallers {\\r\\n\\t\\trequire(_owner == _msgSender() || _authorizedCallers[_msgSender()] == true, \\\"Ownable: caller is not authorized\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction vote() external authorizedCallers {\\r\\n\\t\\tfor (uint256 i = 0; i < _vote.length; i++) {\\r\\n\\t\\t\\tif (_vote[i] == _msgSender()) {\\r\\n\\t\\t\\t\\t// already voted\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t_vote.push(_msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMinimumVotes(uint256 nbrVotes) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\trequire(nbrVotes > 0,\\\"minimum voters needed too low\\\");\\r\\n\\t\\trequire(nbrVotes <= _authorizedCallersArray.length,\\\"maximum authorized callers length voters needed\\\");\\r\\n\\t\\t_minimumVotes = nbrVotes;\\r\\n\\t}\\r\\n\\t\\r\\n\\r\\n\\tfunction initiateTimeLock() external authorizedCallers {\\r\\n\\t\\t_timeLock = block.timestamp + 24 hours;\\r\\n\\t\\temit TimeLockOperationRequested(_msgSender(),block.timestamp,_timeLock);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction resetTimeLockAndVote() external authorizedCallers() {\\r\\n\\t\\t_timeLock = 0;\\r\\n\\t\\tif (_vote.length > 0) {\\r\\n\\t\\t\\tdelete _vote;\\r\\n\\t\\t}\\r\\n\\t\\temit TimeLockOperationAndVoteReset(_msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setAuthorizedCallers(address account,bool value) internal {\\r\\n\\t\\tif (account == address(0)) return;\\r\\n\\t\\tif (value && _authorizedCallers[account]) return;\\r\\n\\t\\tif (!value && !_authorizedCallers[account]) return;\\r\\n\\t\\tif (value) {\\r\\n\\t\\t\\t_authorizedCallersArray.push(account);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tif (_authorizedCallersArray.length == 1) {\\r\\n\\t\\t\\t\\t_authorizedCallersArray.pop();\\r\\n\\t\\t\\t} else {\\r\\n        \\t\\tfor (uint256 i = 0; i < _authorizedCallersArray.length; i++) {\\r\\n        \\t\\t    if (_authorizedCallersArray[i] == account) {\\r\\n            \\t\\t\\t_authorizedCallersArray[i] = _authorizedCallersArray[_authorizedCallersArray.length - 1];\\r\\n            \\t\\t\\t_authorizedCallersArray.pop();\\r\\n            \\t\\t\\tbreak;\\r\\n        \\t\\t    }\\r\\n        \\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// ensure voters are always <= _authorizedCallersArray.length\\r\\n\\t\\tif (_minimumVotes > _authorizedCallersArray.length) {\\r\\n\\t\\t\\t_minimumVotes = _authorizedCallersArray.length;\\r\\n\\t\\t}\\r\\n\\t\\t_authorizedCallers[account] = value;\\r\\n\\t\\temit AuthorizedCaller(account,value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAuthorizedCallers(address account,bool value) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t    _setAuthorizedCallers(account,value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction renounceOwnership() public virtual onlyOwner timeLockOperationAndNeedVote {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t    _setAuthorizedCallers(_owner,false);\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferOwnership(address newOwner) public virtual authorizedCallers timeLockOperationAndNeedVote {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t    _setAuthorizedCallers(_owner,false);\\r\\n\\t    _setAuthorizedCallers(newOwner,true);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\tfunction feeTo() external view returns (address);\\r\\n\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\tfunction setFeeTo(address) external;\\r\\n\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakePair {\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\tfunction name() external pure returns (string memory);\\r\\n\\tfunction symbol() external pure returns (string memory);\\r\\n\\tfunction decimals() external pure returns (uint8);\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\tevent Swap(\\r\\n\\t\\taddress indexed sender,\\r\\n\\t\\tuint amount0In,\\r\\n\\t\\tuint amount1In,\\r\\n\\t\\tuint amount0Out,\\r\\n\\t\\tuint amount1Out,\\r\\n\\t\\taddress indexed to\\r\\n\\t);\\r\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\tfunction token0() external view returns (address);\\r\\n\\tfunction token1() external view returns (address);\\r\\n\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\tfunction skim(address to) external;\\r\\n\\tfunction sync() external;\\r\\n\\r\\n\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\tfunction addLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint amountADesired,\\r\\n\\t\\tuint amountBDesired,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\tfunction addLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint amountTokenDesired,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\tfunction removeLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\tfunction removeLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\tfunction swapTokensForExactTokens(\\r\\n\\t\\tuint amountOut,\\r\\n\\t\\tuint amountInMax,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\tpayable\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\texternal\\r\\n\\tpayable\\r\\n\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountETH);\\r\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountETH);\\r\\n\\r\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable;\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n}\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n\\tuint256 private constant _NOT_ENTERED = 1;\\r\\n\\tuint256 private constant _ENTERED = 2;\\r\\n\\r\\n\\tuint256 private _status;\\r\\n\\r\\n\\tconstructor () {\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier nonReentrant() {\\r\\n\\t\\trequire(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\t\\t_status = _ENTERED;\\r\\n\\t\\t_;\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier isHuman() {\\r\\n\\t\\trequire(tx.origin == msg.sender, \\\"sorry humans only\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nlibrary Utils {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tfunction swapTokensForBNB(\\r\\n\\t\\taddress routerAddress,\\r\\n\\t\\tuint256 tokenAmount\\r\\n\\t) public {\\r\\n\\t\\tIPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\\r\\n\\r\\n\\t\\t// generate the pancake pair path of token -> weth\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = address(this);\\r\\n\\t\\tpath[1] = pancakeRouter.WETH();\\r\\n\\r\\n\\t\\t// make the swap\\r\\n\\t\\tpancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\ttokenAmount,\\r\\n\\t\\t\\t0, // accept any amount of BNB\\r\\n\\t\\t\\tpath,\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addLiquidity(\\r\\n\\t\\taddress routerAddress,\\r\\n\\t\\taddress owner,\\r\\n\\t\\tuint256 tokenAmount,\\r\\n\\t\\tuint256 ethAmount\\r\\n\\t) public {\\r\\n\\t\\tIPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\\r\\n\\r\\n\\t\\t// add the liquidity\\r\\n\\t\\tpancakeRouter.addLiquidityETH{value : ethAmount}(\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\ttokenAmount,\\r\\n\\t\\t\\t0, // slippage is unavoidable\\r\\n\\t\\t\\t0, // slippage is unavoidable\\r\\n\\t\\t\\towner,\\r\\n\\t\\t\\tblock.timestamp + 360\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction mulScale(uint256 x, uint256 y, uint128 scale) internal pure returns (uint256) {\\r\\n\\t\\tuint256 a = x.div(scale);\\r\\n\\t\\tuint256 b = x.mod(scale);\\r\\n\\t\\tuint256 c = y.div(scale);\\r\\n\\t\\tuint256 d = y.mod(scale);\\r\\n\\t\\treturn (a.mul(c).mul(scale)).add(a.mul(d)).add(b.mul(c)).add(b.mul(d).div(scale));\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface Vault {\\r\\n}\\r\\n\\r\\ncontract LamboDogeVault is Vault, Ownable, ReentrancyGuard {\\r\\n\\tusing Address for address;\\r\\n\\r\\n\\tstruct Operation {\\r\\n\\t\\tuint256 index;\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\taddress account;\\r\\n\\t\\taddress tokenAddress;\\r\\n\\t\\taddress [] vote;\\r\\n\\t\\tuint256 timestamp;\\r\\n\\t}\\r\\n\\r\\n\\tuint256 public index = 1;\\r\\n\\tmapping(uint256 => Operation) public operations;\\r\\n\\t\\r\\n\\tevent AskOperation(\\r\\n\\t\\tuint256 index,\\r\\n\\t\\taddress to,\\r\\n\\t\\taddress tokenAddress,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\r\\n\\tevent CancelOperation(\\r\\n\\t\\tuint256 index\\r\\n\\t);\\r\\n\\r\\n\\tevent RetrieveTokensSuccessfully(\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\t\\r\\n\\tevent RetrieveBNBSuccessfully(\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\r\\n\\tconstructor (address parentOwner) {\\r\\n\\t\\t_setAuthorizedCallers(parentOwner,true);\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction askForBNBRetrieval(address account,uint256 amount) external authorizedCallers returns (uint256) {\\r\\n\\t\\tuint256 currentIndex = index;\\r\\n\\t\\tindex++;\\r\\n\\t\\tOperation memory op;\\r\\n\\t\\top.index = currentIndex;\\r\\n\\t\\top.account = account;\\r\\n\\t\\top.amount = amount;\\r\\n\\t\\top.tokenAddress = address(0);\\r\\n\\t\\top.timestamp = block.timestamp + 24 hours;\\r\\n\\t\\toperations[currentIndex]  = op;\\r\\n\\t\\temit AskOperation(op.index,op.account,op.tokenAddress,op.amount);\\r\\n\\t\\treturn index;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction askForTokenRetrieval(address account,address tokenAddress,uint256 amount) external authorizedCallers returns (uint256) {\\r\\n\\t\\tuint256 currentIndex = index;\\r\\n\\t\\tindex++;\\r\\n\\t\\tOperation memory op;\\r\\n\\t\\top.index = currentIndex;\\r\\n\\t\\top.account = account;\\r\\n\\t\\top.amount = amount;\\r\\n\\t\\top.tokenAddress = tokenAddress;\\r\\n\\t\\top.timestamp = block.timestamp + 24 hours;\\r\\n\\t\\toperations[currentIndex]  = op;\\r\\n\\t\\temit AskOperation(op.index,op.account,op.tokenAddress,op.amount);\\r\\n\\t\\treturn index;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction cancelRetrieval(uint256 _index) external authorizedCallers {\\r\\n\\t\\tOperation storage op = operations[_index];\\r\\n\\t\\trequire(op.index > 0,\\\"Operation already done.\\\");\\r\\n\\t\\tuint256 currentIndex = _index;\\r\\n\\t\\tdelete op.vote;\\r\\n\\t\\top.index = 0;\\r\\n\\t\\top.amount = 0;\\r\\n\\t\\top.account = address(0);\\r\\n\\t\\top.timestamp = 0;\\r\\n\\t\\temit CancelOperation(currentIndex);\\r\\n\\t}\\r\\n\\r\\n\\tfunction voteForOperation(uint256 _index) external authorizedCallers {\\r\\n\\t\\tOperation storage op = operations[_index];\\r\\n\\t\\trequire(op.index > 0,\\\"Operation not defined.\\\");\\r\\n\\t\\tif (op.vote.length == 0) {\\r\\n\\t\\t\\top.vote.push(_msgSender());\\r\\n\\t\\t\\t// extend timelock\\r\\n\\t\\t\\top.timestamp = block.timestamp + 24 hours;\\r\\n\\t\\t} else {\\r\\n    \\t\\tfor (uint256 i = 0; i < op.vote.length; i++) {\\r\\n\\t\\t\\t\\t// already voted ?\\r\\n\\t\\t\\t\\tif (op.vote[i] == _msgSender()) {\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\top.vote.push(_msgSender());\\r\\n\\t\\t\\t// extend timelock\\r\\n\\t\\t\\top.timestamp = block.timestamp + 24 hours;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawBNB(uint256 _index) external authorizedCallers {\\r\\n\\t\\tOperation storage op = operations[_index];\\r\\n\\t\\trequire(op.index > 0,\\\"Operation already done.\\\");\\r\\n\\t\\trequire(op.account != address(0),\\\"Address(0), no send.\\\");\\r\\n\\t\\trequire(op.tokenAddress == address(0),\\\"Not a BNB withdrawal request.\\\");\\r\\n\\t\\trequire(op.vote.length >= _minimumVotes || op.timestamp <= block.timestamp,\\\"Not enough vote for transaction or timelock not reached.\\\");\\r\\n\\t\\tuint256 toRetrieve = op.amount;\\r\\n\\t\\tuint256 maxToRetrieve = address(this).balance;\\r\\n\\t\\trequire(toRetrieve > 0 && toRetrieve <= maxToRetrieve,\\\"Error: Cannot withdraw BNB not enough fund.\\\");\\r\\n\\t\\taddress account = op.account;\\r\\n\\t\\tdelete op.vote;\\r\\n\\t\\top.index = 0;\\r\\n\\t\\top.amount = 0;\\r\\n\\t\\top.account = address(0);\\r\\n\\t\\top.timestamp = 0;\\r\\n        (bool sent,) = address(account).call{value : toRetrieve}(\\\"\\\");\\r\\n        require(sent, \\\"Error: Cannot withdraw BNB\\\");\\r\\n\\t\\temit RetrieveBNBSuccessfully(_msgSender(),toRetrieve);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawToken(uint256 _index) external authorizedCallers {\\r\\n\\t\\tOperation storage op = operations[_index];\\r\\n\\t\\trequire(op.index > 0,\\\"Operation already done.\\\");\\r\\n\\t\\trequire(op.account != address(0),\\\"Address(0), no send.\\\");\\r\\n\\t\\trequire(op.tokenAddress != address(0),\\\"Not a token withdrawal request.\\\");\\r\\n\\t\\trequire(op.vote.length >= _minimumVotes || op.timestamp <= block.timestamp,\\\"Not enough vote for transaction or timelock not reached.\\\");\\r\\n\\t\\tuint256 toRetrieve = op.amount;\\r\\n\\t\\tuint256 maxToRetrieve = IBEP20(op.tokenAddress).balanceOf(address(this));\\r\\n\\t\\trequire(toRetrieve > 0 && toRetrieve <= maxToRetrieve,\\\"Error: Cannot withdraw TOKEN not enough fund.\\\");\\r\\n\\t\\taddress account = op.account;\\r\\n\\t\\taddress tokenAddress = op.tokenAddress;\\r\\n\\t\\tdelete op.vote;\\r\\n\\t\\top.index = 0;\\r\\n\\t\\top.amount = 0;\\r\\n\\t\\top.account = address(0);\\r\\n\\t\\top.tokenAddress = address(0);\\r\\n\\t\\top.timestamp = 0;\\r\\n\\t\\tbool sent = IBEP20(tokenAddress).transfer(account,toRetrieve);\\r\\n\\t\\trequire(sent, \\\"Error: Cannot withdraw TOKEN\\\");\\r\\n\\t\\temit RetrieveTokensSuccessfully(_msgSender(),toRetrieve);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract LamboDogeVaultCreator is Ownable, ReentrancyGuard {\\r\\n\\tusing Address for address;\\r\\n\\r\\n\\tuint256 public vaultIndex = 0;\\r\\n\\tmapping(uint256 => Vault) public vaults;\\r\\n\\r\\n\\tconstructor (address parentOwner) {\\r\\n\\t\\t_setAuthorizedCallers(parentOwner,true);\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction createNewVault() external authorizedCallers returns (address) {\\r\\n\\t\\tLamboDogeVault vault = new LamboDogeVault(_msgSender());\\r\\n\\t\\tvaults[vaultIndex] = vault;\\r\\n\\t\\tvaultIndex++;\\r\\n\\t\\treturn address(vault);\\r\\n\\t}\\r\\n\\r\\n\\tfunction createNewVault(address account) external authorizedCallers returns (address) {\\r\\n\\t\\tLamboDogeVault vault = new LamboDogeVault(account);\\r\\n\\t\\tvaults[vaultIndex] = vault;\\r\\n\\t\\tvaultIndex++;\\r\\n\\t\\treturn address(vault);\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\ncontract LamboDoge is Context, IBEP20, Ownable, ReentrancyGuard {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing Address for address;\\r\\n\\r\\n\\tstring private constant _name = \\\"Lambo Doge\\\";\\r\\n\\tstring private constant _symbol = \\\"LDOGE\\\";\\r\\n\\tuint8 private constant _decimals = 18;\\r\\n\\t\\r\\n\\tmapping(address => uint256) private _rOwned;\\r\\n\\tmapping(address => uint256) private _tOwned;\\r\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n\\tmapping(address => bool) private _isExcludedFromFee;\\r\\n\\tmapping(address => bool) private _applyFeeFor;\\r\\n\\tmapping(address => bool) private _isTradingWhiteListed;\\r\\n    mapping(address => bool) private _isExcludedFromReward;\\r\\n\\tmapping(address => uint256) private _lockAccount;\\r\\n    address[] private _excluded;\\r\\n    \\r\\n\\tbool public tradingEnabled = false;\\r\\n\\tbool public noFeeForTransfert = true;\\r\\n\\tbool public noFee = true;\\r\\n\\r\\n\\tuint256 private constant MAX = ~uint256(0);\\r\\n\\tuint256 private _tTotal = 100 * 10**9 * 10**18;\\r\\n\\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\tuint256 private _tFeeTotal;\\r\\n\\r\\n\\t// Pancakeswap pointers\\r\\n\\tIPancakeRouter02 public immutable pancakeRouter;\\r\\n\\taddress public immutable pancakePair;\\r\\n\\taddress public immutable addressWBNB;\\r\\n\\tVault public vault;\\r\\n\\tLamboDogeVaultCreator public vaultCreator;\\r\\n\\r\\n\\tbool private inSwapAndLiquify = false;\\r\\n\\r\\n\\tuint256 public _maxPriceImpactForSwapAndLiquify;\\r\\n\\tbool public swapAndLiquifyEnabled = false;\\r\\n\\t\\r\\n\\tuint256 private _taxFee = 0;\\r\\n\\tuint256 private _liquidityFee = 0;\\r\\n\\tuint256 private _marketingFee = 0;\\r\\n\\r\\n\\tuint256 public _minBNBToSendToVault = 5 * 10 ** 17;\\r\\n\\t\\r\\n\\tuint256 public _totalCountBuy = 0;\\r\\n\\tuint256 public _totalCountSell = 0;\\r\\n\\r\\n\\tuint256 public _marketingBNB = 0;\\r\\n\\r\\n\\tmodifier lockTheSwap {\\r\\n\\t\\tinSwapAndLiquify = true;\\r\\n\\t\\t_;\\r\\n\\t\\tinSwapAndLiquify = false;\\r\\n\\t}\\r\\n\\t\\r\\n\\tevent SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n\\r\\n\\tevent SwapAndLiquify(\\r\\n\\t\\tuint256 tokensSwapped,\\r\\n\\t\\tuint256 bnbReceived\\r\\n\\t);\\r\\n\\r\\n\\tevent SentBNBSuccessfully(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 bnbReceived\\r\\n\\t);\\r\\n\\r\\n\\tevent SentTokensSuccessfully(\\r\\n\\t\\taddress token,\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenReceived\\r\\n\\t);\\r\\n\\t\\r\\n\\tevent LockAccount(\\r\\n\\t\\taddress account,\\r\\n\\t\\tuint256 time\\r\\n\\t);\\r\\n\\t\\r\\n\\tevent TradingStatus(\\r\\n\\t\\tbool enabled\\r\\n\\t);\\r\\n\\r\\n\\tconstructor (\\r\\n\\t\\taddress payable routerAddress,\\r\\n\\t\\taddress _addressWBNB\\r\\n\\t) {\\r\\n\\t\\t// set WBNB contract address\\r\\n\\t\\taddressWBNB = _addressWBNB;\\r\\n\\t\\tIPancakeRouter02 _pancakeRouter = IPancakeRouter02(routerAddress);\\r\\n\\t\\t// Create a pancake pair for this new token\\r\\n\\t\\tpancakePair = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\\r\\n\\t\\t// set the pancakeswap router\\r\\n\\t\\tpancakeRouter = _pancakeRouter;\\r\\n\\t\\tvaultCreator = new LamboDogeVaultCreator(_msgSender());\\r\\n\\t\\tvault = Vault(vaultCreator.createNewVault(_msgSender()));\\r\\n\\t    // send all tokens to vault\\r\\n\\t\\t_rOwned[address(vault)] = _rTotal;\\r\\n\\t\\temit Transfer(address(0), address(vault), _tTotal);\\r\\n\\t}\\r\\n\\t\\r\\n\\t// TOKEN INFO\\r\\n\\tfunction name() external pure returns (string memory) {\\r\\n\\t\\treturn _name;\\r\\n\\t}\\r\\n\\r\\n\\tfunction symbol() external pure returns (string memory) {\\r\\n\\t\\treturn _symbol;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decimals() external pure returns (uint8) {\\r\\n\\t\\treturn _decimals;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalSupply() external view override returns (uint256) {\\r\\n\\t\\treturn _tTotal;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalFees() external view returns (uint256) {\\r\\n\\t\\treturn _tFeeTotal;\\r\\n\\t}\\r\\n\\r\\n\\t// TOKEN INTERFACE\\r\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\r\\n\\t\\tif (_isExcludedFromReward[account]) return _tOwned[account];\\r\\n\\t\\treturn tokenFromReflection(_rOwned[account]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction allowance(address owner, address spender) public view override returns (uint256) {\\r\\n\\t\\treturn _allowances[owner][spender];\\r\\n\\t}\\r\\n\\r\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n\\t\\t_transfer(sender, recipient, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\t\\r\\n\\t// INFO\\r\\n\\tfunction isTradingWhiteListed(address account) external view returns (bool) {\\r\\n\\t\\treturn _isTradingWhiteListed[account];\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction isExcludedFromFee(address account) external view returns (bool) {\\r\\n\\t\\treturn _isExcludedFromFee[account];\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction isFeeAppliedOnTransfer(address account) external view returns (bool) {\\r\\n\\t\\treturn _applyFeeFor[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLockTime(address account) external view returns (uint256) {\\r\\n\\t\\treturn _lockAccount[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction isAccountLocked(address account) external view returns (bool) {\\r\\n\\t\\treturn _lockAccount[account] > block.timestamp;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentSupply() external view returns (uint256, uint256) {\\r\\n\\t\\treturn _getCurrentSupply();\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction isExcludedFromReward(address account) external view returns (bool) {\\r\\n\\t\\treturn _isExcludedFromReward[account];\\r\\n\\t}\\r\\n\\r\\n\\t// Setter\\r\\n\\tfunction _excludeFromReward(address account) private {\\r\\n\\t\\tif (_isExcludedFromReward[account]) return;\\r\\n\\t\\trequire(_excluded.length < 20,\\\"Too big excluded list ! Remove first !\\\");\\r\\n\\t\\tif (_rOwned[account] > 0) {\\r\\n\\t\\t\\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n\\t\\t}\\r\\n\\t\\t_isExcludedFromReward[account] = true;\\r\\n\\t\\t_excluded.push(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromReward(address account) public authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\trequire(!_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\r\\n\\t\\t_excludeFromReward(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _includeInReward(address account) private {\\r\\n\\t\\tif (!_isExcludedFromReward[account]) return;\\r\\n\\t\\tfor (uint256 i = 0; i < _excluded.length; i++) {\\r\\n\\t\\t\\tif (_excluded[i] == account) {\\r\\n\\t\\t\\t\\t_excluded[i] = _excluded[_excluded.length - 1];\\r\\n\\t\\t\\t\\t_tOwned[account] = 0;\\r\\n\\t\\t\\t\\t_isExcludedFromReward[account] = false;\\r\\n\\t\\t\\t\\t_excluded.pop();\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction includeInReward(address account) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\trequire(_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\r\\n\\t\\t_includeInReward(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setTradingEnabled(bool _tradingEnabled) external onlyOwner {\\r\\n\\t    require(!tradingEnabled,\\\"Cannot stop trading !\\\");\\r\\n\\t\\ttradingEnabled = _tradingEnabled;\\r\\n\\t\\temit TradingStatus(tradingEnabled);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setNoFeeForTransfert(bool _noFeeForTransfert) external authorizedCallers {\\r\\n\\t\\tnoFeeForTransfert = _noFeeForTransfert;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setNoFee(bool _noFee) external onlyOwner {\\r\\n\\t\\tnoFee = _noFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setExcludedFromFee(address account,bool value) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\t_isExcludedFromFee[account] = value;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setApplyTransferFee(address account,bool value) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\t_applyFeeFor[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setTradingWhitelist(address account,bool value) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\t_isTradingWhiteListed[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxPriceImpactForSwapAndLiquify(uint256 maxPriceImpact) public authorizedCallers {\\r\\n\\t\\trequire(maxPriceImpact <= 40000,\\\"Max price impact for swap and liquify should be <= 4%\\\");\\r\\n\\t\\t_maxPriceImpactForSwapAndLiquify = maxPriceImpact;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMinBNBToSendToVault(uint256 value) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\trequire(value > 1 * 10 ** 16,\\\"value too small\\\");\\r\\n\\t\\t_minBNBToSendToVault = value;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSwapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) external authorizedCallers {\\r\\n\\t\\tswapAndLiquifyEnabled = _swapAndLiquifyEnabled;\\r\\n\\t\\temit SwapAndLiquifyEnabledUpdated(_swapAndLiquifyEnabled);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction lockAccountForHours(address account,uint256 _hours) external authorizedCallers needVote {\\r\\n\\t\\trequire(account != owner(),\\\"Cannot lock owner\\\");\\r\\n\\t\\trequire(isAuthorizedCaller(account) == false,\\\"cannot lock an authorized caller\\\");\\r\\n\\t\\tif (_lockAccount[account] < block.timestamp) {\\r\\n\\t\\t\\t_lockAccount[account] = block.timestamp + (_hours * 1 hours);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t_lockAccount[account] = _lockAccount[account] + (_hours * 1 hours);\\r\\n\\t\\t}\\r\\n\\t\\temit LockAccount(account,_lockAccount[account]);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction unlockAccount(address account) external authorizedCallers needVote {\\r\\n\\t\\t_lockAccount[account] = 0;\\r\\n\\t\\temit LockAccount(account,_lockAccount[account]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction whitelistAccount(address account, bool value) external authorizedCallers timeLockOperationOrNeedVote {\\r\\n\\t\\t_isTradingWhiteListed[account] = value;\\r\\n\\t\\t_isExcludedFromFee[account] = value;\\r\\n\\t}\\r\\n\\r\\n\\t// TOKEN IMPL\\r\\n\\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) private view returns (uint256) {\\r\\n\\t\\trequire(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n\\t\\tif (!deductTransferFee) {\\r\\n\\t\\t\\t(uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n\\t\\t\\treturn rAmount;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\\r\\n\\t\\t\\treturn rTransferAmount;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenFromReflection(uint256 rAmount) private view returns (uint256) {\\r\\n\\t\\trequire(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\treturn rAmount.div(currentRate);\\r\\n\\t}\\r\\n\\r\\n\\t//to receive BNB from pancakeRouter when swapping\\r\\n\\treceive() external payable {}\\r\\n\\r\\n\\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n\\t\\t_rTotal = _rTotal.sub(rFee);\\r\\n\\t\\t_tFeeTotal = _tFeeTotal.add(tFee);\\r\\n\\t}\\r\\n\\t\\r\\n\\tstruct ValueInfo {\\r\\n\\t\\tuint256 tTransferAmount;\\r\\n\\t\\tuint256 tFee;\\r\\n\\t\\tuint256 tLiquidity;\\r\\n\\t\\tuint256 tMarketing;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t\\tValueInfo memory info = _getTValues(tAmount);\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, info.tFee,info.tLiquidity, info.tMarketing, _getRate());\\r\\n\\t\\treturn (rAmount, rTransferAmount, rFee, info.tTransferAmount, info.tFee, info.tLiquidity, info.tMarketing);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getTValues(uint256 tAmount) private view returns (ValueInfo memory) {\\r\\n\\t\\tValueInfo memory info;\\r\\n\\t\\tinfo.tFee = calculateTaxFee(tAmount);\\r\\n\\t\\tinfo.tLiquidity = calculateLiquidityFee(tAmount);\\r\\n\\t\\tinfo.tMarketing = calculateMarketingFee(tAmount);\\r\\n\\t\\tinfo.tTransferAmount = tAmount.sub(info.tFee).sub(info.tLiquidity).sub(info.tMarketing);\\r\\n\\t\\treturn info;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\r\\n\\t\\tuint256 rAmount = tAmount.mul(currentRate);\\r\\n\\t\\tuint256 rFee = tFee.mul(currentRate);\\r\\n\\t\\tuint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n\\t\\tuint256 rMarketing = tMarketing.mul(currentRate);\\r\\n\\t\\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rMarketing);\\r\\n\\t\\treturn (rAmount, rTransferAmount, rFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRate() private view returns (uint256) {\\r\\n\\t\\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n\\t\\treturn rSupply.div(tSupply);\\r\\n\\t}\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n       for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n\\tfunction _takeLiquidity(uint256 tLiquidity) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n\\t\\t_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n        if (_isExcludedFromReward[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _takeMarketing(uint256 tMarketing) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rMarketing = tMarketing.mul(currentRate);\\r\\n\\t\\t_rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\\r\\n        if (_isExcludedFromReward[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tMarketing);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_taxFee).div(\\r\\n\\t\\t\\t10 ** 2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_liquidityFee).div(\\r\\n\\t\\t\\t10 ** 2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateMarketingFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_marketingFee).div(\\r\\n\\t\\t\\t10 ** 2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\r\\n\\t\\trequire(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n\\t\\trequire(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\t\\t_allowances[owner][spender] = amount;\\r\\n\\t\\temit Approval(owner, spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction computePriceImpact(uint256 amount) public view returns (uint256) {\\r\\n\\t\\tuint256 startBnbs = IBEP20(addressWBNB).balanceOf(address(pancakePair));\\r\\n\\t\\tuint256 startTokens = IBEP20(address(this)).balanceOf(address(pancakePair));\\r\\n\\t\\tuint256 startPoolValue = startBnbs.mul(startTokens);\\r\\n\\t\\tuint256 endTokens = startTokens.add(amount);\\r\\n\\t\\tif (endTokens == 0) return 1000000;\\r\\n\\t\\tuint256 endBnb = startPoolValue.div(endTokens);\\r\\n\\t\\tuint256 deltaBnbs = startBnbs.sub(endBnb);\\r\\n\\t\\tif (startBnbs == 0) return 1000000;\\r\\n\\t\\treturn Utils.mulScale(deltaBnbs,1000000,uint128(startBnbs));\\r\\n\\t}\\r\\n\\r\\n\\tfunction computeAmountFromPriceImpact(uint256 priceImpact) public view returns (uint256) {\\r\\n\\t\\tuint256 startBnbs = IBEP20(addressWBNB).balanceOf(address(pancakePair));\\r\\n\\t\\tif (startBnbs == 0) return 0;\\r\\n\\t\\tuint256 startTokens = IBEP20(address(this)).balanceOf(address(pancakePair));\\r\\n\\t\\tuint256 startPoolValue = startBnbs.mul(startTokens);\\r\\n\\t\\tuint256 deltaBnbs = priceImpact.mul(startBnbs).div(1000000);\\r\\n\\t\\tuint256 endBnb = startBnbs.sub(deltaBnbs);\\r\\n\\t\\tif (endBnb == 0) return 0;\\r\\n\\t\\tuint256 endTokens = startPoolValue.div(endBnb);\\r\\n\\t\\treturn endTokens.sub(startTokens);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t) private {\\r\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\trequire(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n\\t\\tif (!tradingEnabled && (!(_isTradingWhiteListed[from] || _isTradingWhiteListed[to]))) {\\r\\n\\t\\t\\trequire(tradingEnabled, \\\"Trading is not enabled yet\\\");\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t// cannot transfer or sell if account is locked\\r\\n\\t\\tif (_lockAccount[from] > 0) {\\r\\n\\t\\t\\trequire(_lockAccount[from] <= block.timestamp, \\\"Error: transfer from this account is locked until lock time\\\");\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (noFee || _isExcludedFromFee[from] || _isExcludedFromFee[to] || (noFeeForTransfert && !_applyFeeFor[to] && !_applyFeeFor[from])) {\\r\\n\\t\\t\\t_taxFee = 0;\\r\\n\\t\\t\\t_liquidityFee = 0;\\r\\n\\t\\t\\t_marketingFee = 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 priceImpact = computePriceImpact(amount);\\r\\n\\t\\t\\t_taxFee = 1;\\r\\n\\t\\t\\t_liquidityFee = 1;\\r\\n\\t\\t\\t_marketingFee = 2;\\r\\n\\t\\t\\t// selling\\r\\n\\t\\t\\tif (_applyFeeFor[to]) {\\r\\n\\t\\t\\t    if (priceImpact >= 20000 && priceImpact < 30000) {\\r\\n\\t\\t\\t\\t\\t_taxFee = 2;\\r\\n\\t\\t\\t\\t\\t_liquidityFee = 2;\\r\\n\\t\\t\\t\\t\\t_marketingFee = 4;\\r\\n\\t\\t\\t    } else\\r\\n\\t\\t\\t    if (priceImpact >= 30000 && priceImpact < 50000) {\\r\\n\\t\\t\\t        _taxFee = 4;\\r\\n\\t\\t\\t\\t\\t_liquidityFee = 2;\\r\\n\\t\\t\\t\\t\\t_marketingFee = 4;\\r\\n\\t\\t\\t    } else\\r\\n\\t\\t\\t    if (priceImpact >= 50000 && priceImpact < 80000) {\\r\\n\\t\\t\\t         _taxFee = 8;\\r\\n\\t\\t\\t         _liquidityFee = 4;\\r\\n\\t\\t\\t         _marketingFee = 4;\\r\\n\\t\\t\\t    } else\\r\\n\\t\\t\\t    if (priceImpact >= 80000) {\\r\\n\\t\\t\\t        _taxFee = 10;\\r\\n\\t\\t\\t        _liquidityFee = 4;\\r\\n\\t\\t\\t        _marketingFee = 6;\\r\\n\\t\\t\\t    }\\r\\n\\t\\t\\t} else\\r\\n\\t\\t\\t// buying\\r\\n\\t\\t\\tif (_applyFeeFor[from]) {\\r\\n\\t\\t\\t    if (priceImpact >= 30000 && priceImpact < 50000) {\\r\\n\\t\\t\\t\\t\\t_taxFee = 2;\\r\\n\\t\\t\\t\\t\\t_liquidityFee = 2;\\r\\n\\t\\t\\t\\t\\t_marketingFee = 4;\\r\\n\\t\\t\\t    } else\\r\\n\\t\\t\\t    if (priceImpact >= 50000 && priceImpact < 80000) {\\r\\n\\t\\t\\t       \\t_taxFee = 4;\\r\\n\\t\\t\\t\\t\\t_liquidityFee = 2;\\r\\n\\t\\t\\t\\t\\t_marketingFee = 4;\\r\\n\\t\\t\\t    } else\\r\\n\\t\\t\\t    if (priceImpact >= 80000 && priceImpact < 110000) {\\r\\n\\t\\t\\t       \\t_taxFee = 4;\\r\\n\\t\\t\\t        _liquidityFee = 4;\\r\\n\\t\\t\\t        _marketingFee = 6;\\r\\n\\t\\t\\t    } else\\r\\n\\t\\t\\t    if (priceImpact >= 110000) {\\r\\n\\t\\t\\t    \\t_taxFee = 5;\\r\\n\\t\\t\\t        _liquidityFee = 5;\\r\\n\\t\\t\\t        _marketingFee = 8;\\r\\n\\t\\t\\t    }\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// if no fee, no swap and liquify\\r\\n\\t\\tif (!noFee && swapAndLiquifyEnabled) {\\r\\n\\t\\t\\t// swap and liquify\\r\\n\\t\\t\\tswapAndLiquify(from, to);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (_applyFeeFor[from]) {\\r\\n\\t\\t\\t_totalCountBuy = _totalCountBuy.add(1);\\r\\n\\t\\t} else\\r\\n\\t\\tif (_applyFeeFor[to]) {\\r\\n\\t\\t\\t_totalCountSell = _totalCountSell.add(1);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//transfer amount, it will take tax, liquidity fee, marketing fee\\r\\n\\t\\t_tokenTransfer(from, to, amount);\\r\\n\\t}\\r\\n\\r\\n\\t//this method is responsible for taking all fee, if takeFee is true\\r\\n\\tfunction _tokenTransfer(address sender, address recipient, uint256 amount) private {\\r\\n        if (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n\\t}\\r\\n\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n\\t\\t_takeMarketing(tMarketing);\\r\\n\\t\\t_reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\t\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n\\t\\t_takeMarketing(tMarketing);\\r\\n\\t\\t_reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n\\t\\t_takeMarketing(tMarketing);\\r\\n\\t\\t_reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n\\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\t\\t_takeLiquidity(tLiquidity);\\r\\n\\t\\t_takeMarketing(tMarketing);\\r\\n\\t\\t_reflectFee(rFee, tFee);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\r\\n\\t// SWAP AND ADD TO LP\\r\\n\\tfunction swapAndLiquify(address from, address to) private {\\r\\n\\t\\t// is the token balance of this contract address over the min number of\\r\\n\\t\\t// tokens that we need to initiate a swap + liquidity lock?\\r\\n\\t\\t// also, don't get caught in a circular liquidity event.\\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\t\\tuint256 _maxToSell = computeAmountFromPriceImpact(_maxPriceImpactForSwapAndLiquify);\\r\\n\\t\\tif (_maxToSell == 0) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tbool swapPossible = !inSwapAndLiquify && (contractTokenBalance >= _maxToSell) && (!(from == address(this) && to == address(pancakePair)));\\r\\n\\t\\tbool notBuyPair = !_applyFeeFor[from];\\r\\n\\t\\tif (\\r\\n\\t\\t\\tswapPossible &&\\r\\n\\t\\t\\tnotBuyPair\\r\\n\\t\\t) {\\r\\n\\t\\t\\t// only sell for _maxToSell\\r\\n\\t\\t\\tswapAndLiquify(_maxToSell);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n\\t\\tif (_liquidityFee == 0 && _marketingFee == 0) return;\\r\\n\\t\\tuint256 _100percent = _liquidityFee.add(_marketingFee);\\r\\n\\t\\tuint256 marketingTokens = Utils.mulScale(contractTokenBalance,_marketingFee,uint128(_100percent));\\r\\n\\t\\tuint256 liquidityTokens = contractTokenBalance.sub(marketingTokens);\\r\\n\\r\\n\\t\\t// sell for liquidity and marketing\\r\\n\\t\\tuint256 halfTokensForLiquidity = liquidityTokens.div(2);\\r\\n\\t\\tuint256 tokenToSell = halfTokensForLiquidity.add(marketingTokens);\\r\\n\\r\\n\\t\\tuint256 initialBalance = address(this).balance;\\r\\n\\t\\tUtils.swapTokensForBNB(address(pancakeRouter), tokenToSell);\\r\\n\\t\\tuint256 deltaBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n\\t\\tuint256 deltaBalanceMarketing = Utils.mulScale(deltaBalance,marketingTokens,uint128(tokenToSell));\\r\\n\\t\\tuint256 deltaBalanceLiquidity = deltaBalance.sub(deltaBalanceMarketing);\\r\\n\\t\\t\\r\\n\\t\\t// Add liquidity, send LP Tokens to vault\\r\\n\\t\\tUtils.addLiquidity(address(pancakeRouter), address(vault), halfTokensForLiquidity, deltaBalanceLiquidity);\\r\\n\\t\\temit SwapAndLiquify(halfTokensForLiquidity, deltaBalanceLiquidity);\\r\\n\\r\\n\\t\\t_marketingBNB = _marketingBNB.add(deltaBalanceMarketing);\\r\\n\\t\\t// enough BNB ? send to vault.\\r\\n\\t\\tif (_marketingBNB >= _minBNBToSendToVault) {\\r\\n\\t\\t\\t_sendBNBToVault(_marketingBNB);\\r\\n\\t\\t\\t_marketingBNB = 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction activateContract() external onlyOwner {\\r\\n\\t\\t// exclude owner and this contract from fee\\r\\n\\t\\t_isExcludedFromFee[owner()] = true;\\r\\n\\t\\t_isExcludedFromFee[address(this)] = true;\\r\\n\\t\\t_isExcludedFromFee[address(0x000000000000000000000000000000000000dEaD)] = true;\\r\\n\\t\\t_isExcludedFromFee[address(0)] = true;\\r\\n\\t\\t_isExcludedFromFee[address(vault)] = true;\\r\\n\\t\\t// Trading whitelisted\\r\\n\\t\\t_isTradingWhiteListed[owner()] = true;\\r\\n\\t\\t_isTradingWhiteListed[address(this)] = true;\\r\\n\\t\\t_isTradingWhiteListed[address(vault)] = true;\\r\\n\\t\\t// include pancake pair and pancake router in transfert fee:\\r\\n\\t\\t_applyFeeFor[address(pancakeRouter)] = true;\\r\\n\\t\\t_applyFeeFor[address(pancakePair)] = true;\\r\\n\\t\\t// exclude from reward\\r\\n\\t\\t_excludeFromReward(owner());\\r\\n\\t\\t_excludeFromReward(address(this));\\r\\n\\t\\t_excludeFromReward(address(vault));\\r\\n\\t\\t// max price impact for swap and liquify 2%\\r\\n\\t\\tsetMaxPriceImpactForSwapAndLiquify(20000);\\r\\n\\t\\t// approve contract\\r\\n\\t\\t_approve(address(this), address(pancakeRouter), 2 ** 256 - 1);\\r\\n\\t}\\r\\n\\r\\n\\t// force a swap and liquify\\r\\n\\tfunction forceSwapAndLiquify() external nonReentrant authorizedCallers {\\r\\n\\t\\tswapAndLiquify(msg.sender,msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t// RETRIEVE FUND FUNCTIONS\\r\\n\\t/**\\r\\n\\t * Retrieve BNB from contract and send to vault\\r\\n\\t */\\r\\n\\tfunction _sendBNBToVault(uint256 amount) private {\\r\\n\\t\\t// do not send to oneself\\r\\n\\t\\tuint256 toRetrieve = address(this).balance;\\r\\n\\t\\trequire(toRetrieve > 0 && amount <= toRetrieve && amount > 0, \\\"Error: Cannot withdraw BNB not enough fund.\\\");\\r\\n\\t\\t(bool sent,) = address(vault).call{value : amount}(\\\"\\\");\\r\\n\\t\\trequire(sent, \\\"Error: Cannot withdraw BNB\\\");\\r\\n\\t\\temit SentBNBSuccessfully(msg.sender, address(vault), amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Send to vault\\r\\n\\tfunction sendBNBToVault(uint256 amount) external nonReentrant authorizedCallers {\\r\\n\\t\\tif (amount == 1) {\\r\\n\\t\\t\\tamount = _marketingBNB;\\r\\n\\t\\t\\t_marketingBNB = 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tif (amount == 0) {\\r\\n\\t\\t\\t\\tamount = address(this).balance;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (amount >= _marketingBNB) {\\r\\n\\t\\t\\t\\t_marketingBNB = 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tuint256 toTransfer = amount;\\r\\n\\t\\t// reset counters on withdraw\\r\\n\\t\\t_sendBNBToVault(toTransfer);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Retrieve Token located at tokenAddress from contract and send to vault\\r\\n\\t */\\r\\n\\tfunction sendTokensToVault(address tokenAddress,uint256 amount) external nonReentrant authorizedCallers {\\r\\n\\t\\t// if 0 then send everything to vault\\r\\n\\t\\tif (amount == 0) {\\r\\n\\t\\t\\tamount = IBEP20(tokenAddress).balanceOf(address(this));\\r\\n\\t\\t}\\r\\n\\t\\tuint256 toRetrieve = IBEP20(tokenAddress).balanceOf(address(this));\\r\\n\\t\\trequire(toRetrieve > 0 && amount <= toRetrieve && amount > 0, \\\"Error: Cannot withdraw TOKEN not enough fund.\\\");\\r\\n\\t\\tbool sent = IBEP20(tokenAddress).transfer(address(vault),amount);\\r\\n\\t\\trequire(sent, \\\"Error: Cannot withdraw TOKEN\\\");\\r\\n\\t\\temit SentTokensSuccessfully(tokenAddress,msg.sender, address(vault), amount);\\r\\n\\t}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/LamboDoge.sol\": {\r\n        \"Utils\": \"0x76298c4b93a0a3c6c6377a31f037d9f11a373c03\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressWBNB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"}],\"name\":\"SentBNBSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"}],\"name\":\"SentTokensSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TimeLockOperationAndVoteReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"TimeLockOperationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TradingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_authorizedCallersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxPriceImpactForSwapAndLiquify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minBNBToSendToVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_timeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalCountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalCountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_vote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressWBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"name\":\"computeAmountFromPriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"computePriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuthorizedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeAppliedOnTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTradingWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"lockAccountForHours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noFeeForTransfert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetTimeLockAndVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendBNBToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokensToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setApplyTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAuthorizedCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceImpact\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceImpactForSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinBNBToSendToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nbrVotes\",\"type\":\"uint256\"}],\"name\":\"setMinimumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_noFee\",\"type\":\"bool\"}],\"name\":\"setNoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_noFeeForTransfert\",\"type\":\"bool\"}],\"name\":\"setNoFeeForTransfert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingEnabled\",\"type\":\"bool\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTradingWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCreator\",\"outputs\":[{\"internalType\":\"contract LamboDogeVaultCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LamboDoge", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}