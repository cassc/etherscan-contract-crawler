{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dpnm_sc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\n// ********************************************************************************************************\\n//        __   _______    ____  _____   ____    ____       _________            __                        \\n//       |  ] |_   __ \\\\  |_   \\\\|_   _| |_   \\\\  /   _|     |  _   _  |          [  |  _                    \\n//   .--.| |    | |__) |   |   \\\\ | |     |   \\\\/   |       |_/ | | \\\\_|   .--.    | | / ]   .---.   _ .--.  \\n// / /'`\\\\' |    |  ___/    | |\\\\ \\\\| |     | |\\\\  /| |           | |     / .'`\\\\ \\\\  | '' <   / /__\\\\\\\\ [ `.-. | \\n// | \\\\__/  |   _| |_      _| |_\\\\   |_   _| |_\\\\/_| |_         _| |_    | \\\\__. |  | |`\\\\ \\\\  | \\\\__.,  | | | | \\n//  '.__.;__] |_____|    |_____|\\\\____| |_____||_____|       |_____|    '.__.'  [__|  \\\\_]  '.__.' [___||__]\\n//\\n//                                             www.dpnmDeFi.com                                                                 \\n// ********************************************************************************************************\\n\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n\\n\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n\\n/**\\n * @dev Interface for a phenomenal tree contract.\\n */\\ninterface phenomenalTreeInt {\\n\\n    function positionUser(address newUser, address referrerAddress, uint8 lvlsDeep) external;\\n    function getLvlsUp(address searchedAddress) external view returns(address[15] memory);\\n\\n}\\n\\n/**\\n * @dev Interface for a GWT token.\\n */\\n\\ninterface GWT {\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n    function burn(address account, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n\\n\\n}\\n\\n\\n/**\\n@dev dPNM token contract for token buy/sell. \\nAllow user activation with positioning to Tree. \\nTree payment processing.\\nAll marketing conditions and payments are provided by this contract.\\n\\n */\\ncontract dpnmMain is IERC20Metadata, Ownable {\\n    using SafeERC20 for IERC20;\\n    IERC20 public busd;\\n    phenomenalTreeInt public contractTree;\\n    GWT public gwt;\\n    address private _promoter;//address for enabling promotion conditions\\n    address immutable public firstUser;\\n\\n    address public feeCollector;//dev address for earning fees\\n\\n    uint public buyFeeToLiquidity = 10;//Percent fee from dPNM buy that stays in liquidity. Mutable in range 0-10\\n    uint public buyFeetoMarketing = 10;//Percent fee from dPNM buy that transfered to feeCollector. Immutable\\n\\n    uint public sellFeeToLiquidity = 5;//Percent fee from dPNM sell that stays in liquidity. Mutable in range 0-5\\n    uint private sellFeeToDevs = 5;//Percent fee from dPNM sell that transfered to feeCollector. Immutable\\n\\n    uint public gwtTransFeeCollector = 1e18;//BUSD fee paid to feeCollector when buying turnover/earnLimit. 1 BUSD, immutable\\n    uint public gwtTransFeeLiquidity = 1e18;//BUSD fee stays in liquidity buying turnover/earnLimit. 1 BUSD, mutable 0-2 BUSD\\n\\n    uint public turnoverForOneGWT = 200e18;//Amount of turnover purchased for 1 GWT. Default = 200 BUSD turnover. Mutable 200-250 BUSD\\n    uint public earnLimitForOneGWT = 125e16;//Amount of earnLimit purchased for 1 GWT. 1 GWT = 1.25 BUSD earnLimit. Immutable\\n\\n    uint public dPNMbuyTurnoverIncrease = 0;//Percent for which accrued turnover increases on dPNM buy. Default = 0%. Mutable 0-25%\\n    uint public dPNMsellTurnoverIncrease = 0;//Percent of dPNM sell amount that accrued as turnover on dPNM sell. Default = 0%. Mutable 0-25%\\n\\n    uint public gwtBuyIncrease = 0;//Percent of additional GWT accrued on dPNM buy. Default = 0%. Mutable 0-25%\\n    uint public gwtSellIncrease = 0;//Percent of additional GWT accrued on dPNM sell. Default = 0%. Mutable 0-25%\\n    uint public gwtForTreeActivation = 10e18;//Amount of GWT accrued for tree payment. Default = 10 GWT. Mutable 5-15 GWT\\n\\n    uint public earnLimitDepositedPerc = 200;//Amount of earn limit accrued from dPNM bought in tree 10 lvls down. Default = 200% of buy cost. Mutable 200-250%\\n    uint public maxDailyBuy = 0;//Max daily dPNM buy limit in BUSD for a user. if == 0 then 0.1% from liquidity amount. If != 0 then amount in BUSD. Mutable.\\n    uint constant public lowerBoundMaxDailyBuy = 50e18;//Min daily dPNM buy limit for user in BUSD. Immutable\\n\\n    uint public totalUsers = 0;\\n    uint public totalUsersEarnings = 0;//Total user earnings accumulated for all time.\\n    uint public treePaymentPeriod = 30 days;//Amount of days for tree due on tree payment. Default = 30 days. Mutable 30-60 days\\n    uint public treeMaxPaymentPeriod = 90 days;//Max amount of days tree can be paid upfront. Mutable 90-180 days\\n\\n    uint public totaldPNM = 0;//Total amount of dPNM tokens\\n    uint public mindPNMBuy = 20e18;//Min amount of dPNM that can be purchased at one transaction\\n    uint[] treeLvlUnlockCost;//Amount of turnover needed to unlock tree lvl.\\n\\n    bool public isLocked = false;//Global lock, locks activate/makeTreePayment/buydPNM\\n    bool public prestartMode = true;//Activated on deploy. Allow only activate. Once disabled always false\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    struct User {\\n        address referrer;//By whom user has been referred\\n        uint dpnmBalance;//User dPNM balance\\n        uint treePaidUntil;//Timestamp until which tree is paid\\n        uint earnLimitLeft;//Amount of left earn limit\\n        uint totalEarnLimit;//Amount of total earn limit received by dPNM buy and bought with GWT\\n        uint totalTurnover;//Total turnover of dPNM purchase made by users from 10 lvls down in tree, excluding personal purchases\\n        uint totalEarned;//Total bonus received from 10 lvls down from tree. For tree payments and dPNM buy.\\n        buySellData tokenData;\\n    }\\n\\n    struct buySellData {\\n        uint lastBuyTime;//Record time of last buy, overwrites if older than 24 hours\\n        uint lastBuyAmount;//Amount of total buy in 24h window from lastBuyTime\\n        uint totalBuyAmount;//BUSD amount of dPNM personal purchases for all time\\n\\n        uint lastSellTime;//Timestamp of last sell time within 48h window\\n        uint lastSellAmount;//Sell amount for 48h since lastSellTime\\n    }\\n    \\n\\n\\n    mapping(address => User) public users;\\n    mapping(address => uint[10]) public treeUserLostProfits;//Amount of lost bonus from each lvl of tree 10 lvls deep.\\n    mapping(address => uint) public firstLockedLvl;//Store first level number that is locked for user in a tree\\n\\n\\n    event Activation(address indexed user, address indexed referrer);\\n    event BuydPNM(address indexed user, uint dPNMamount, uint BUSDamount, uint dPNMprice);\\n    event SelldPNM(address indexed user, uint dPNMamount, uint BUSDamount, uint dPNMprice);\\n    event buyTurnover(address indexed user, uint turnoverAmount, uint GWTcost);\\n    event buyEarnLimit(address indexed user, uint earnLimitAmount, uint GWTcost);\\n\\n    /**\\n     * @dev On deploy we init contract\\n     */\\n    constructor(IERC20 _depositTokenAddress, phenomenalTreeInt _treeAddress, GWT _gwt, address collector) {\\n        _name = \\\"dPNM Token\\\";\\n        _symbol = \\\"dPNM\\\";\\n        _promoter = msg.sender;\\n        firstUser = msg.sender;\\n        init(_depositTokenAddress, _treeAddress, _gwt, collector);\\n    }\\n  \\n    /**\\n     * @dev One time initialization function. Create first user with deployer address.\\n     * Set unlock costs in turnover for each tree lvl 10 levels down.\\n     * @param _depositTokenAddress Address of BUSD\\n     * @param _treeAddress Address of Phenomenal Tree contract\\n     * @param _gwt Address of GWT contract\\n     * @param collector Address of feeCollector\\n     */\\n    function init(IERC20 _depositTokenAddress, phenomenalTreeInt _treeAddress, GWT _gwt, address collector) private {\\n        require(collector!=address(0),'Non zero address');\\n\\n        busd = _depositTokenAddress;\\n        contractTree = _treeAddress;\\n        gwt = _gwt;\\n        feeCollector = collector;\\n\\n        //create first user\\n        createUser(msg.sender, address(0));\\n\\n        //set cost of lvls to unlock\\n        for (uint i=0;i<3;i++) {\\n            treeLvlUnlockCost.push(0);\\n        }\\n        //lvl4\\n        treeLvlUnlockCost.push(40000e18);\\n        //lvl5\\n        treeLvlUnlockCost.push(100000e18);\\n        //lvl6\\n        treeLvlUnlockCost.push(200000e18);\\n        //lvl7\\n        treeLvlUnlockCost.push(500000e18);\\n        //lvl8\\n        treeLvlUnlockCost.push(1000000e18);\\n        //lvl9\\n        treeLvlUnlockCost.push(2000000e18);\\n        //lvl10\\n        treeLvlUnlockCost.push(5000000e18);\\n        \\n}\\n\\n    /**\\n     * @dev Activate function used by each new user to join. \\n     * New user should not exist.\\n     * Refferer should exist\\n     * New user is positioned in a tree with contractTree.\\n     * Payment for tree is processed\\n     * @param newUser Joining user address\\n     * @param referrerAddress Referrer address used for positioning new user in tree\\n     */\\n    function activate(address newUser, address referrerAddress) external onlyUnlocked{\\n        require(!isUserExists(newUser), \\\"User already exists\\\");\\n        require(isUserExists(referrerAddress), \\\"Referrer not exists\\\");\\n\\n        createUser(newUser, referrerAddress);\\n\\n        contractTree.positionUser(newUser,referrerAddress,10);\\n        \\n        _TreePayment(newUser, true);\\n    }\\n\\n    /**\\n     * @dev New user structs creation\\n     */\\n    function createUser(address _userAddress, address _referrerAddress) private {\\n        buySellData memory buyselldata = buySellData(0,0,0,0,0);\\n\\n        User memory user = User({\\n        dpnmBalance: 0,\\n        referrer: _referrerAddress,\\n        treePaidUntil: block.timestamp,\\n        earnLimitLeft: 0,\\n        totalEarnLimit: 0,\\n        totalTurnover: 0,\\n        totalEarned: 0,\\n        tokenData: buyselldata\\n        });\\n\\n        //add data to struct\\n        users[_userAddress] = user;\\n        firstLockedLvl[_userAddress] = 4;\\n\\n        //total users count\\n        totalUsers += 1;\\n    }\\n\\n    /**\\n     * @dev tree payment function triggered by user\\n     */\\n    function makeTreePayment () external onlyUnlocked{\\n        _TreePayment(msg.sender,false);\\n    }\\n    \\n    /**\\n     * @dev Tree payment function that allows existing user to increase tree due.\\n     * User should be activated.\\n     * User should have at list min purchase of dPNM\\n     * Amount of days for tree should not exceed treeMaxPaymentPeriod after tree payment\\n     * Tree payment of 10 BUSD is transferred to dPNM contract. GWT minted to buyer, except first payment. Tree active days period prolonged.\\n     * Bonus for total of 5 BUSD is transferred for 10 lvls upline addresses in a tree with BUSD. \\n     * If bonus is not accrued to upline user then lvls 1-7 stays at dPNM contract, lvl 8-10 goes to feeCollector\\n     * 4 BUSD fee transferred to feeCollector\\n     * On Prestart all BUSD are transferred from contract to feeCollector\\n     * @param newUser Address of new user\\n     * @param firstPayment If first payment then do not check min dPNM buy\\n     */\\n    function _TreePayment (address newUser, bool firstPayment) private {\\n        require(isUserExists(newUser), \\\"Activate first\\\");\\n        //if user activated but did not buy dPNM then do not allow second tree payment\\n        require(users[newUser].tokenData.totalBuyAmount != 0||firstPayment,\\\"Need first dPNM buy\\\");\\n        \\n        //check if new payment do not exceeds maxDays for tree\\n        if (users[newUser].treePaidUntil > block.timestamp) {\\n            uint treeDaysLeft = users[newUser].treePaidUntil - block.timestamp;\\n            require(treeDaysLeft + treePaymentPeriod <= treeMaxPaymentPeriod,\\\"Exceeds tree days limit\\\"); \\n        }\\n        \\n        //take payment 10 BUSD for position, paid by one who sign transaction\\n        busd.safeTransferFrom(msg.sender, address(this), 10e18);\\n\\n        //set bonus in busd for each level of tree in BUSD, total 5 BUSD\\n        uint[] memory treeRefs = new uint[](11);\\n        treeRefs[1] = 1e17;//0.10 BUSD\\n        treeRefs[2] = 1e17;\\n        treeRefs[3] = 1e17;\\n        treeRefs[4] = 5e17;//0.50 BUSD\\n        treeRefs[5] = 5e17;\\n        treeRefs[6] = 5e17;\\n        treeRefs[7] = 8e17;//0.80 BUSD\\n        treeRefs[8] = 8e17;\\n        treeRefs[9] = 8e17;\\n        treeRefs[10] = 8e17;\\n\\n        uint amountToBeTransferredToFeeCollector;\\n\\n        //loop tree for 10 lvls up depositing bonus\\n        address[15] memory uplineUsers = contractTree.getLvlsUp(newUser);\\n        //deposit bonus to 10 lvls up\\n        for(uint i=0;i<10;i++){\\n            if (uplineUsers[i] == address(0)) {\\n                //top of tree, rest fee stays at contract liquidity, lvl 8-10 goes to collector\\n                if (i<8) {\\n                    amountToBeTransferredToFeeCollector += 24e17;//transfer 2.4 BUSD\\n                } else {\\n                    amountToBeTransferredToFeeCollector += (10-i)*8e17;//transfer 0.8 BUSD for each left lvl\\n                }\\n                \\n                break;\\n            } else {\\n                amountToBeTransferredToFeeCollector += depositBonus(uplineUsers[i],treeRefs[i+1],0,true,i+1);\\n            }\\n            \\n        }\\n\\n        amountToBeTransferredToFeeCollector += 4e18;\\n\\n        //mint gwt to user balance, only if already bought dPNM (not first tree payment)\\n        if (users[newUser].tokenData.totalBuyAmount > 0 ) {\\n            require(gwt.mint(newUser,gwtForTreeActivation),'GWT mint error');\\n        }\\n        \\n        //set time until tree is active\\n        if (users[newUser].treePaidUntil == 0||block.timestamp > users[newUser].treePaidUntil) {\\n        users[newUser].treePaidUntil = block.timestamp + treePaymentPeriod;\\n        } else { \\n            users[newUser].treePaidUntil += treePaymentPeriod; \\n            }\\n\\n        if (prestartMode) {\\n            busd.safeTransfer(feeCollector, busd.balanceOf(address(this)));\\n        }\\n        else {\\n            busd.safeTransfer(feeCollector, amountToBeTransferredToFeeCollector);\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev Process BUSD bonus transfer to a user from tree payment and from dPNM buy.\\n     * Both bonus require tree not overdue.\\n     * For dPNM bonus checks if specific tree lvl is unlocked\\n     * For tree payment bonus lvl lock is ignored. \\n     * For dPNM bonus require that token value less then earn limit left\\n     * For dPNM bonus require that dPNM purchased at least once\\n     * If bonus is deposited then user totalEarned counter increased\\n     * If bonus is not deposited then increase lost profit counter\\n     * If bonus is not deposited then from 1-7 levels it stays at dPNM contract, 8-10 levels transferred to feeCollector\\n     * If user unlocked level 8 with turnover then 10% fee is taken from bonus and stays at dPNM contract.\\n     * dPNM bonus increase user turnover for dPNM purchase amount\\n     * @param userAddress Address of user who receive bonus\\n     * @param bonusAmount Bonus amount in BUSD\\n     * @param purchaseAmount Purchase amount\\n     * @param treeActivationBonus True if bonus is for tree payment, else dPNM buy\\n     * @param lvl Level number where bonus is generated from view of userAddress\\n     */\\n    function depositBonus(address userAddress, uint bonusAmount, uint purchaseAmount, bool treeActivationBonus, uint lvl) private returns(uint){\\n        uint feeCollectorBonus;\\n        if (treeActivationBonus) {\\n            //process bonus for tree payment\\n            if (users[userAddress].treePaidUntil >= block.timestamp||userAddress==firstUser) {\\n                //if lvl8+ is unlocked then 10% fee\\n                if (firstLockedLvl[userAddress]>8) { \\n                    bonusAmount = bonusAmount/100*90; \\n                    }\\n\\n                busd.safeTransfer(userAddress, bonusAmount);\\n                users[userAddress].totalEarned += bonusAmount;\\n                totalUsersEarnings += bonusAmount;\\n            }\\n            else {\\n                //no bonus, increase lost profit counter\\n                treeUserLostProfits[userAddress][lvl-1] += bonusAmount;\\n\\n                if (lvl>=8) { \\n                    feeCollectorBonus += bonusAmount;\\n                    }\\n\\n\\n            }\\n        } else {\\n            //process bonus for dPNM buy\\n            if (users[userAddress].treePaidUntil >= block.timestamp||userAddress==firstUser) {\\n                //deposit bonus or lost profit, lvls 1-7 stays in liquidity, 8-10 goes to fee collector\\n                if (firstLockedLvl[userAddress]<=lvl) {\\n                    treeUserLostProfits[userAddress][lvl-1] += bonusAmount;\\n\\n                    if (lvl>=8) { \\n                        feeCollectorBonus += bonusAmount;\\n                        }\\n                    \\n                } else {\\n                    //should buy min tokens amount and token value should be less than earn limit\\n                    if (isQualifiedForBonus(userAddress)||userAddress==firstUser) {\\n                        //if lvl 8+ is unlocked then 10% fee\\n                        if (firstLockedLvl[userAddress]>8) { bonusAmount = bonusAmount/100*90; }\\n                        busd.safeTransfer(userAddress, bonusAmount);\\n                        users[userAddress].totalEarned += bonusAmount;\\n                        totalUsersEarnings += bonusAmount;\\n\\n                    } else {\\n                        treeUserLostProfits[userAddress][lvl-1] += bonusAmount;\\n\\n                    }\\n                    \\n\\n                }\\n\\n                //increase turnover for this purchase, if tree is not overdue\\n                users[userAddress].totalTurnover += purchaseAmount + (purchaseAmount / 100 * dPNMbuyTurnoverIncrease);//to test\\n                //check if user earn limit allow to open new lvl\\n                openNewLvl(userAddress);\\n\\n            }\\n            //tree not paid\\n            else {\\n                //increase lost profit counter, tree is overdue, no turnover accrued. If lvl 8+ then goes to collector\\n                treeUserLostProfits[userAddress][lvl-1] += bonusAmount;\\n\\n                if (lvl>=8) { \\n                    feeCollectorBonus += bonusAmount;\\n                    // busd.safeTransfer(feeCollector, bonusAmount);\\n                    }\\n\\n            }\\n            \\n        }\\n        return(feeCollectorBonus);\\n    }\\n\\n    /**\\n     * @dev Check if user is qualified for dPNM bonus to receive.\\n     * Token value (amount of tokens*token price) should be less than left earn limit.\\n     * This check also ensures that user made at least one dPNM purchase (else tokenvalue == earn limit left)\\n     */\\n    function isQualifiedForBonus (address userAddress) public view returns (bool) {\\n        \\n        //user earn limit is less than dPNM value | if bought min dPNM then earnlimit > 0, else value=earnlimit=0\\n        if (getdPNMPrice() * users[userAddress].dpnmBalance / 1e18 >= users[userAddress].earnLimitLeft) {\\n            return(false);\\n        } else {\\n            return(true);\\n        }\\n\\n    }\\n    /**\\n     * @dev Browse user tree levels in depth of 10. If user turnover enough to unlock level then level is unlocked.\\n     */\\n    function openNewLvl (address userAddress) private {\\n        for (uint i=firstLockedLvl[userAddress];i<=10;i++) {\\n            if (users[userAddress].totalTurnover>=treeLvlUnlockCost[i-1]) {\\n                firstLockedLvl[userAddress] = i+1;\\n            }    \\n        }\\n    }\\n    /**\\n     * @dev Function to buy dPNM token. User should be activated. No prestart. No lock to contract applied\\n     * Buy amount should be more than mindPNMBuy\\n     * Buy amount can not exceed daily buy limit for address\\n     * Fee for purchase consist of fee that stays at dPNM contract and fee that shared as bonus for 10 lvl up at tree.\\n     * User get dPNM token for purchase BUSD amount minus fee\\n     * All fee is compensated by GWT mint. 1 BUSD = 1 GWT. Amount of GWT can be increased by gwtBuyIncrease\\n     * If first dPNM buy then 10 GWT added to compensate activation cost\\n     * User earn limit increased 200% of buy cost\\n     * Amount of bought in last 24h increased if there were purchases in last 24h, else last purchase time set to timestamp and lastBuyAmount owerwrites\\n     * @param BUSDamount Amount of BUSD user spend for this purchase\\n     */\\n    function buydPNM (uint BUSDamount) external onlyActivated notPrestart onlyUnlocked{   \\n\\n        require(BUSDamount >= mindPNMBuy,\\\"Less than min buy\\\");\\n        //check if user already bought in last 24 hours, increase counter bought, and decrease buy amount, else make record and update time\\n        User memory userData = users[msg.sender];\\n\\n        //check if this buy amount does not exceed user daily buy limit left\\n        require(getMaxDailyBuy(msg.sender)>=BUSDamount,\\\"Buy limit low\\\");\\n        \\n\\n        //deposit dpnm\\n        uint totalFee = buyFeeToLiquidity + buyFeetoMarketing;\\n        uint totalBUSDForTokenBuy = BUSDamount / 100 * (100-totalFee);\\n        uint tokenPrice = getdPNMPrice();\\n        \\n        uint userTotaldPNMdeposit = totalBUSDForTokenBuy * 1e18 / tokenPrice;\\n        totaldPNM += userTotaldPNMdeposit;\\n\\n\\n        users[msg.sender].dpnmBalance += userTotaldPNMdeposit;\\n        //deposit gwt for fee amount + additional gwt if available\\n        uint userTotalGWTdeposit = BUSDamount / 100 * totalFee;//fee increase with multiplier\\n\\n        //increase earn limit\\n        uint increasedLimit = BUSDamount / 100 * earnLimitDepositedPerc;\\n        users[msg.sender].totalEarnLimit += increasedLimit;\\n        users[msg.sender].earnLimitLeft += increasedLimit;\\n\\n        //increase amount of bought in last 24 hours, or update last buy time\\n        if (userData.tokenData.lastBuyTime + 24 hours > block.timestamp) {\\n            users[msg.sender].tokenData.lastBuyAmount += BUSDamount;\\n        } else {\\n            users[msg.sender].tokenData.lastBuyAmount = BUSDamount;\\n            users[msg.sender].tokenData.lastBuyTime = block.timestamp;\\n        }\\n\\n        //mint gwt for user, if first purchase then also add gwt for tree payment\\n        uint gwtMintAmount = userTotalGWTdeposit + (userTotalGWTdeposit / 100 * gwtBuyIncrease);\\n        if (users[msg.sender].tokenData.totalBuyAmount == 0) {\\n            require(gwt.mint(msg.sender,gwtMintAmount + gwtForTreeActivation),'GWT mint error');\\n        } else {\\n            require(gwt.mint(msg.sender,gwtMintAmount),'GWT mint error');\\n        }\\n\\n        //increase total buy\\n        users[msg.sender].tokenData.totalBuyAmount += BUSDamount;\\n\\n        //get busd payment\\n        busd.safeTransferFrom(msg.sender, address(this), BUSDamount);\\n\\n        //deposit marketing for tree upline\\n        depositBonusFordPNMbuy(msg.sender,BUSDamount);\\n        emit BuydPNM(msg.sender, userTotaldPNMdeposit,BUSDamount,tokenPrice);\\n    }\\n\\n    /**\\n     * @dev Amount for a specified user that is allowed to buy.\\n     * If maxDailyBuy = 0 then calculated as 0.1% from BUSD that dPNM contract holds.\\n     * If maxDailyBuy !=0 then equals to specific BUSD amount.\\n     * Amount that user bought dPNM in last 24h window deducted from maxDailyBuy\\n     * Amount that user sold dPNM in last 48h window added to maxDailyBuy\\n     * maxDailyBuy can not be lower than lowerBoundMaxDailyBuy\\n     */\\n    function getMaxDailyBuy (address user) public view returns (uint){\\n        //check if desired dPNM buy amount fits into user daily buy limit\\n\\n        uint poolBalance = busd.balanceOf(address(this));\\n        uint maxBuyLimit = poolBalance / 1000 * 1;//0.1% of pool size\\n        uint buyLimit = 0;//user buy limit\\n        //buy limit options 1: user did not buy in last 24 hours, then limit depends on pool\\n        //2: user bought in last 24 hours then limit decreased for bought amount\\n        //3: user sold in last 48 hours then limit is for sold amount\\n        //calc buy limit from pool size\\n        if (maxDailyBuy != 0) {\\n            buyLimit = maxDailyBuy;\\n        } else if (maxBuyLimit < lowerBoundMaxDailyBuy) {\\n            buyLimit = lowerBoundMaxDailyBuy;\\n        } else {\\n            buyLimit = maxBuyLimit;\\n        }\\n\\n        //bought in last 24 hours buy\\n        uint last24BuyAmount = 0;\\n        if (users[user].tokenData.lastBuyTime + 24 hours > block.timestamp) {\\n            last24BuyAmount = users[user].tokenData.lastBuyAmount;\\n        }\\n\\n        //sold in last 48 hours\\n        uint soldLast48Hours = 0;\\n        if (users[user].tokenData.lastSellTime + 48 hours > block.timestamp) {\\n            soldLast48Hours = users[user].tokenData.lastSellAmount;\\n        }\\n        \\n        if ((int(buyLimit) - int(last24BuyAmount) + int(soldLast48Hours)) <= 0) {\\n            buyLimit = 0;\\n        }  else {\\n            buyLimit = buyLimit + uint(soldLast48Hours) - uint(last24BuyAmount) ;\\n        }\\n\\n        return(buyLimit);\\n    }\\n\\n    /**\\n     * @dev calculates amount of bonus for each user 10 lvls up in a tree as a percent of BUSD buy amount\\n     * If upline user levels less than 10 then bonus for lvl 1-7 stays at dPNM contract, 8-10 goes to feeCollector\\n     * @param userAddress Address who buy dPNM\\n     * @param buyAmount BUSD buy amount\\n     */\\n    function depositBonusFordPNMbuy (address userAddress, uint buyAmount) private {\\n        //set fee in % for each level of tree, total 10%\\n        uint[] memory treeRefs = new uint[](11);\\n        treeRefs[1] = 2;//0.2%\\n        treeRefs[2] = 2;\\n        treeRefs[3] = 2;\\n        treeRefs[4] = 10;//1%\\n        treeRefs[5] = 10;\\n        treeRefs[6] = 10;\\n        treeRefs[7] = 16;//1.6%\\n        treeRefs[8] = 16;\\n        treeRefs[9] = 16;\\n        treeRefs[10] = 16;\\n\\n        address[15] memory uplineUsers = contractTree.getLvlsUp(userAddress);\\n        uint feeCollectorBonus;\\n        //deposit bonus to 10 lvls up\\n        for(uint i=0;i<10;i++){\\n            if (uplineUsers[i] == address(0)) {\\n                //top of tree, rest fee stays at contract liquidity, lvl 8-10 goes to collector\\n                if (i<8) {\\n                    //transfer 4.8% BUSD for 8-10 lvl\\n                    busd.safeTransfer(feeCollector, buyAmount / 1000 * 48);\\n                } else {\\n                    //transfer 1.6% for each left lvl from 8-10\\n                    busd.safeTransfer(feeCollector, buyAmount / 1000 * (10-i)*16);\\n                }\\n\\n                break;\\n            } else {\\n                uint bonus_size = buyAmount*1e18 / 1000 * treeRefs[i+1]/1e18;\\n                feeCollectorBonus += depositBonus(uplineUsers[i],bonus_size,buyAmount,false,i+1);\\n\\n            }   \\n        }\\n        if(feeCollectorBonus!=0) {\\n            busd.safeTransfer(feeCollector, feeCollectorBonus);\\n\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to sell dPNM for desired BUSD amount. Only activated user. Prestart should be disabled.\\n     * Check if desired BUSD sell amount is less than dPNM token value (amount*price)\\n     * Check if user earn limit left is more than desired BUSD sell amount\\n     * When dPNM sold tokens are burned for the sale amount (sale amount/dPNM price)\\n     * If user token value more than earn limit left than dPNM burnes proportionally, for 10% sell of earn limit left burn 10% of dPNM\\n     * Earn limit left decrease for desired BUSD sell amount \\n     * Amount of tokens sold in last 48h window increased for sell amount\\n     * dPNM supply decreased\\n     * Fee is dedcuted, consist of fee to feeCollector and part that stays at dPNM contract to increase token price\\n     * Fee for dPNM sale compensated with GWT. 1 BUSD = 1 GWT. Can be increased for percent if gwtSellIncrease more than 0\\n     * If dPNMsellTurnoverIncrease more than 0 then turnover can be applied to 10 lvls up in tree for percent of sell amount\\n     * @param BUSDamount Amount for which user want to sell tokens. Will be deposited minus fee\\n     */\\n    function selldPNM (uint BUSDamount) external onlyActivated notPrestart {\\n        //get user total token value\\n        uint dPNMprice = getdPNMPrice();\\n        require(BUSDamount > 0 && dPNMprice > 0, 'Should be more than 0');\\n        uint userTokenValue = users[msg.sender].dpnmBalance * dPNMprice / 1e18;\\n        uint leftLimit = users[msg.sender].earnLimitLeft;\\n        require(BUSDamount<=userTokenValue,'Not enough dPNM');\\n        require(BUSDamount<=leftLimit,'Not enough earn limit');\\n        //if user have tokens valued at 1000 BUSD, and earn limit valued at 200 BUSD, then if selling for 20 BUSD (10% of earn limit) it should decrease tokens for 10%\\n        //check if earn limit covers all token value, if not then decrease dPNM amount proportionally\\n        uint dPNMtoBurn = 0;\\n        if (userTokenValue <= users[msg.sender].earnLimitLeft) {\\n            //burn tokens for amount of sale\\n            dPNMtoBurn = BUSDamount * 1e18 / dPNMprice;\\n            \\n        } else {\\n            //burn dPNM amount proprtionally\\n            uint percentBurn = BUSDamount * 1e18 / leftLimit;\\n            dPNMtoBurn = users[msg.sender].dpnmBalance * percentBurn / 1e18;\\n            \\n        }\\n\\n        //decrease dpnm amount\\n        users[msg.sender].dpnmBalance -= dPNMtoBurn;\\n\\n        //decrease earn limit\\n        users[msg.sender].earnLimitLeft -= BUSDamount;\\n        //increase last48h sell amount, update date\\n        if (users[msg.sender].tokenData.lastSellTime+2 days>=block.timestamp) {\\n            //sold in last 48 hours, so increase amount of sold\\n            users[msg.sender].tokenData.lastSellAmount += BUSDamount;\\n        } else {\\n            //have not sold in last 48 hours, set sell time and amount\\n            users[msg.sender].tokenData.lastSellAmount = BUSDamount;\\n            users[msg.sender].tokenData.lastSellTime = block.timestamp;\\n        }\\n        \\n        //decrease total dpnm\\n        totaldPNM -= dPNMtoBurn;\\n        //try to increase turnover for 10 lvl up if enabled\\n        accruedPNMsellTurnover(msg.sender,BUSDamount);\\n\\n        //get fee\\n        uint totalFee = sellFeeToDevs + sellFeeToLiquidity;\\n        \\n        //mint gwt + additional gwt if available\\n        uint gwtMintAmount = (BUSDamount*1e18 / 100 * totalFee/1e18) + (BUSDamount*1e18 / 100 * totalFee / 100 * gwtSellIncrease/1e18);\\n        require(gwt.mint(msg.sender,gwtMintAmount),'GWT mint error');\\n        //send busd to user\\n        uint depositBUSD = BUSDamount *1e18 / 100 * (100-totalFee)/1e18;\\n        busd.safeTransfer(msg.sender, depositBUSD);\\n        //send busd to fee collector\\n        busd.safeTransfer(feeCollector, BUSDamount*1e18 / 100 * sellFeeToDevs/1e18);\\n        //emit event\\n        emit SelldPNM(msg.sender, dPNMtoBurn,depositBUSD,dPNMprice);\\n\\n    }\\n    /**\\n     * @dev dPNM transfer is not allowed, returns false\\n     */\\n    function transfer(address to, uint256 amount) external pure returns (bool) {\\n        return (false);\\n    }\\n\\n    /**\\n     * @dev Accrue turnover for percent of dPNM sell by address to 10 lvls up in a tree.\\n     * dPNMsellTurnoverIncrease should be more than 0 for turnover to accrue\\n     * User tree should not be overdue in order to receive turnover\\n     * @param sellingUser Address who sell dPNM\\n     * @param sellAmount BUSD sell amount\\n     */\\n    function accruedPNMsellTurnover(address sellingUser, uint sellAmount) private {\\n        //accrue turnover for 10 lvls up in case its enabled\\n        if (dPNMsellTurnoverIncrease!=0) {\\n            uint turnover = sellAmount / 100 * dPNMsellTurnoverIncrease;\\n\\n            address[15] memory uplineUsers = contractTree.getLvlsUp(sellingUser);\\n            for(uint i=0;i<10;i++){\\n                if (uplineUsers[i] == address(0)) {\\n                    break;\\n                } else {\\n                    //increase user turnover if his tree is not overdue\\n                    if (users[uplineUsers[i]].treePaidUntil >= block.timestamp) {\\n                        users[uplineUsers[i]].totalTurnover += turnover;\\n                    }\\n                }   \\n            }\\n\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows address to buy additional turnover with GWT. 1 GWT = 200 BUSD of turnover (mutable 200-250)\\n     * Need to have enough GWT on balance\\n     * Fee for transaction paid in BUSD\\n     * Checks if new tree level is qualified and unlock it after turnover is purchased\\n     */\\n    function buyTurnoverWithGWT(uint turnoverAmount) external onlyActivated notPrestart {\\n        require(turnoverAmount > 0, 'Should be more than 0');\\n\\n        //should have enough GWT for purchase, 1 GWT = 200 BUSD turnover\\n        uint gwtCost = turnoverAmount * 1e18 / turnoverForOneGWT;\\n        require(gwtCost<=gwt.balanceOf(msg.sender),'Not enough GWT');\\n        //pay fee\\n        payFeeForGWTtrans();\\n        \\n        //add turnover\\n        users[msg.sender].totalTurnover += turnoverAmount;\\n\\n        //check if new lvl opened\\n        openNewLvl(msg.sender);\\n\\n        //burn gwt\\n        require(gwt.burn(msg.sender,gwtCost),'GWT burn error');\\n\\n\\n        emit buyTurnover(msg.sender, turnoverAmount, gwtCost);\\n        \\n    }\\n\\n    /**\\n     * @dev Allows address to buy additional earn limit for GWT. 1 GWT = 1.25 BUSD of earn limit. Only activated user. Prestart should be disabled\\n     * Should have anough GWT\\n     * Need to make dPNM purchase at least once\\n     * Bought earn limit can not exceed 10% of all earn limit accrued for dPNM buy (we assume that user get 200% of earn limit for dPNM buy)\\n     * BUSD fee for this transaction is applied\\n     * @param earnlimitAmount Amount of BUSD earn limit user want to purchase\\n     */\\n    function buyEarnLimitWithGWT(uint earnlimitAmount) external onlyActivated notPrestart {\\n        require(earnlimitAmount > 0, 'Should be more than 0');\\n        //should have enough GWT for purchase, 1 GWT = 1.25 BUSD earn limit\\n        uint gwtCost = earnlimitAmount * 1e18 / earnLimitForOneGWT;\\n        require(gwtCost<=gwt.balanceOf(msg.sender),'Not enough GWT');\\n        require(users[msg.sender].tokenData.totalBuyAmount!=0,'Need min dPNM buy');\\n\\n        //increase earn if not more than 10% of total earn limit for all time\\n        uint maxearnLimitFromdPNMbuy = users[msg.sender].tokenData.totalBuyAmount / 100 * 220;//220% from purchase cost (equals 10% of total earn limit)\\n        require(maxearnLimitFromdPNMbuy>=(users[msg.sender].totalEarnLimit + earnlimitAmount),'Exceeds 10%');\\n\\n        //increase earn limit\\n        users[msg.sender].earnLimitLeft += earnlimitAmount;\\n        users[msg.sender].totalEarnLimit += earnlimitAmount;\\n\\n        //pay fee\\n        payFeeForGWTtrans();\\n\\n        //burn gwt\\n        require(gwt.burn(msg.sender,gwtCost),'GWT burn error');\\n\\n        emit buyEarnLimit(msg.sender, earnlimitAmount, gwtCost);\\n        \\n    }\\n    /**\\n     * @dev BUSD fee payment applied for buyTurnoverWithGWT and buyEarnLimitWithGWT\\n     */\\n    function payFeeForGWTtrans() private {\\n        //pay fee in BUSD\\n        busd.safeTransferFrom(msg.sender, address(this), (gwtTransFeeCollector + gwtTransFeeLiquidity));\\n        //transfer fee to collector\\n        busd.safeTransfer(feeCollector, gwtTransFeeCollector);\\n\\n    }\\n\\n    /**\\n     * @dev Change amount of daily dPNM buy limit for each address\\n     * If equals to 0 then calculated as 0.1% of contract BUSD balance. Else is BUSD fixed amount\\n     * Should be more then lowerBoundMaxDailyBuy\\n     */\\n    function setDailyBuyLimit (uint amount) external onlyPromoter {\\n        require(amount >= lowerBoundMaxDailyBuy||amount == 0, 'Too low');\\n        maxDailyBuy = amount;\\n    }\\n\\n    /**\\n     * @dev Change amount of GWT deposited for activation\\n     * Should be in range 5-15 GWT\\n     */\\n    function setGWTforActivation (uint amount) external onlyPromoter {\\n        require(5e18<=amount&&amount<=15e18, 'Out of range');\\n        gwtForTreeActivation = amount;\\n    }\\n\\n    /**\\n     * @dev Change amount of days given for tree activation\\n     * Should be in range 30-60 days\\n     */\\n    function setDaysForTree(uint amount) external onlyPromoter {\\n        require(30<=amount&&amount<=60, 'Out of range');\\n        treePaymentPeriod = amount * 1 days;\\n    }\\n\\n    /**\\n     * @dev Change maximum amount of days user can have in tree payment upfront\\n     * Should be in range 90-180 days\\n     */\\n\\n    function setMaxDaysForTree(uint amount) external onlyPromoter {\\n        require(90<=amount&&amount<=180, 'Out of range');\\n        treeMaxPaymentPeriod = amount * 1 days;\\n    }\\n\\n    /**\\n     * @dev Change fee in percent that stays at dPNM contract BUSD liquidity on dPNM buy\\n     * Should be in range 0-10 percent\\n     */\\n    function setbuyFeeToLiquidity(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=10, 'Out of range');\\n        buyFeeToLiquidity = amount;\\n    }\\n\\n    /**\\n     * @dev Change fee in percent that stays at dPNM contract BUSD liquidity on dPNM sell\\n     * Should be in range 0-5 percent\\n     */\\n    function setsellFeeToLiquidity(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=5, 'Out of range');\\n        sellFeeToLiquidity = amount;\\n    }\\n\\n    /**\\n     * @dev Change fee in BUSD that stays at dPNM contract BUSD liquidity on earn limit buy/turnover buy\\n     * Should be in range 0-2 BUSD\\n     */\\n    function setgwtTransFeeLiquidity(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=2e18, 'Out of range');\\n        gwtTransFeeLiquidity = amount;\\n    }\\n\\n    /**\\n     * @dev Change turnover user gets for 1 GWT on purchase\\n     * Should be in range 200-250 BUSD\\n     */\\n    function setturnoverForOneGWT(uint amount) external onlyPromoter {\\n        require(200e18<=amount&&amount<=250e18, 'Out of range');\\n        turnoverForOneGWT = amount;\\n    }\\n\\n    /**\\n     * @dev Change percent of additional turnover added on dPNM purchase\\n     * Should be in range 0-25 percent\\n     */\\n    function setdPNMbuyTurnoverIncrease(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=25, 'Out of range');\\n        dPNMbuyTurnoverIncrease = amount;\\n    }\\n\\n    /**\\n     * @dev Change percent of additional GWT for dPNM buy in percent \\n     * Should be in range 0-25 percent\\n     */\\n    function setgwtBuyIncrease(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=25, 'Out of range');\\n        gwtBuyIncrease = amount;\\n    }\\n\\n    /**\\n     * @dev Change percent of additional GWT for dPNM sell, from BUSD sell amount\\n     * Should be in range 0-25 percent\\n     */\\n    function setgwtSellIncrease(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=25, 'Out of range');\\n        gwtSellIncrease = amount;\\n    }\\n\\n    /**\\n     * @dev Change percent of turnover accrued for for dPNM sell from sell amount \\n     * Should be in range 0-25 percent\\n     */\\n    function setdPNMsellTurnoverIncrease(uint amount) external onlyPromoter {\\n        require(0<=amount&&amount<=25, 'Out of range');\\n        dPNMsellTurnoverIncrease = amount;\\n    }\\n\\n    /**\\n     * @dev Change percent of earn limit accrued for dPNM buy from buy amount\\n     * Should be in range 200-250 percent\\n     */\\n    function setearnLimitDepositedPerc(uint amount) external onlyPromoter {\\n        require(200<=amount&&amount<=250, 'Out of range');\\n        earnLimitDepositedPerc = amount;\\n    }\\n\\n    /**\\n     * @dev Change state of lock for activate/makeTreePayment/buydPNM\\n     */\\n    function changeLock() external onlyOwner() {\\n        isLocked = !isLocked;\\n    }\\n\\n    /**\\n     * @dev Returns address data:\\n     * dPNM balance\\n     * total turnover\\n     * earn limit left\\n     * total earned\\n     * total earn limit\\n     */\\n    function getUserData(address account) external view returns (uint, uint, uint, uint, uint) {\\n        return(\\n            users[account].dpnmBalance, \\n            users[account].totalTurnover, \\n            users[account].earnLimitLeft,\\n            users[account].totalEarned,\\n            users[account].totalEarnLimit\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns address dPNM buy/sell data:\\n     * last buy time of dPNM\\n     * amount of last buy time, accumulative for 24h window\\n     * total buy amount for all time\\n     * last sell time of dPNM\\n     * last sell amount, accumulative for 48h window\\n     */\\n\\n    function getUserBuySellData(address account) external view returns (uint, uint, uint, uint, uint) {\\n        return(\\n            users[account].tokenData.lastBuyTime, \\n            users[account].tokenData.lastBuyAmount, \\n            users[account].tokenData.totalBuyAmount, \\n            users[account].tokenData.lastSellTime, \\n            users[account].tokenData.lastSellAmount);\\n    }\\n\\n    /**\\n     * @dev Check if user exist in struct \\n     */    \\n    function isUserExists(address user) public view returns (bool) {\\n        return (users[user].referrer != address(0)||user==firstUser);\\n    }\\n\\n    /** \\n     * @dev get timestamp until address tree is active\\n    */\\n    function treeActiveUntil(address account) external view returns (uint256) {\\n    return users[account].treePaidUntil;\\n    }\\n\\n\\n    /**\\n     * @dev Get number of first locked lvl for a user in a tree\\n     */\\n    function getFirstLockedLvl(address user) external view returns(uint) {\\n        return(firstLockedLvl[user]);\\n    }\\n\\n\\n    /**\\n     * @dev Return amount of lost profit on each level of tree 10 levels deep\\n     */\\n    function getLostProfit(address account) external view returns (uint[10] memory) {\\n        return(treeUserLostProfits[account]); \\n    }\\n\\n    /**\\n     * @dev Return dPNM token price in BUSD\\n     * Total BUSD balance of contract devided by amount of token supply\\n     * Returns 0 if prestart \\n     */\\n    function getdPNMPrice() public view returns (uint) {\\n        if (prestartMode) {\\n            return(0);\\n        } else {\\n            return(busd.balanceOf(address(this)) * 1e18 / totaldPNM);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return totaldPNM;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return users[account].dpnmBalance;\\n    }\\n\\n    /**\\n     * @dev Get promoter address\\n     */\\n    function promoter() external view onlyOwner returns(address) {\\n        return _promoter;\\n    }\\n    /**\\n     * @dev Check if user is in struct so activated\\n     */\\n    modifier onlyActivated() { \\n        require(users[msg.sender].referrer != address(0)||msg.sender==firstUser, \\\"Please activate first\\\"); \\n        _; \\n    }\\n\\n    /**\\n     * @dev Check if caller is promoter or owner\\n     */\\n    modifier onlyPromoter() { \\n        require(msg.sender == _promoter||msg.sender==owner(), \\\"Need promoter or higher\\\"); \\n        _; \\n    }\\n\\n    /**\\n     * @dev Prestart check\\n     */\\n    modifier notPrestart() { \\n        require(!prestartMode, \\\"After Prestart\\\"); \\n        _; \\n    }\\n\\n    /**\\n     * @dev contract lock\\n     */\\n    modifier onlyUnlocked() { \\n        require(!isLocked || msg.sender == owner(),\\\"Locked\\\"); \\n        _; \\n    }\\n\\n    /**\\n     * @dev Prestart activated at deploy, once deactivated cannot be enabled\\n     */\\n    function disablePrestartMode() external onlyOwner {\\n        require(prestartMode,\\\"Already disabled\\\");\\n        prestartMode = false;\\n        //deposit 1 BUSD\\n        busd.safeTransferFrom(msg.sender, address(this), 1e18);\\n        //deposit first user 1 dPNM\\n        users[firstUser].dpnmBalance = 1e18;\\n        totaldPNM = 1e18;\\n    }\\n    /**\\n     * @dev Changing address of feeCollector\\n     */\\n    function changeFeeCollector(address newCollector) external onlyOwner {\\n        require(newCollector!=address(0),'Non zero address');\\n        feeCollector = newCollector;\\n    }\\n\\n    /**\\n     * @dev Changing address of _promoter\\n     */\\n    function changePromoter(address newPromoter) external onlyOwner {\\n        require(newPromoter!=address(0),'Non zero address');\\n        _promoter = newPromoter;\\n    }\\n    \\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract phenomenalTreeInt\",\"name\":\"_treeAddress\",\"type\":\"address\"},{\"internalType\":\"contract GWT\",\"name\":\"_gwt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Activation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dPNMamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BUSDamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dPNMprice\",\"type\":\"uint256\"}],\"name\":\"BuydPNM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dPNMamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BUSDamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dPNMprice\",\"type\":\"uint256\"}],\"name\":\"SelldPNM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnLimitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"GWTcost\",\"type\":\"uint256\"}],\"name\":\"buyEarnLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnoverAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"GWTcost\",\"type\":\"uint256\"}],\"name\":\"buyTurnover\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earnlimitAmount\",\"type\":\"uint256\"}],\"name\":\"buyEarnLimitWithGWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeetoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"turnoverAmount\",\"type\":\"uint256\"}],\"name\":\"buyTurnoverWithGWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BUSDamount\",\"type\":\"uint256\"}],\"name\":\"buydPNM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"changeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPromoter\",\"type\":\"address\"}],\"name\":\"changePromoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTree\",\"outputs\":[{\"internalType\":\"contract phenomenalTreeInt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dPNMbuyTurnoverIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dPNMsellTurnoverIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePrestartMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnLimitDepositedPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnLimitForOneGWT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstLockedLvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstLockedLvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLostProfit\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxDailyBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserBuySellData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getdPNMPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gwt\",\"outputs\":[{\"internalType\":\"contract GWT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gwtBuyIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gwtForTreeActivation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gwtSellIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gwtTransFeeCollector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gwtTransFeeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isQualifiedForBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundMaxDailyBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeTreePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDailyBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mindPNMBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prestartMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BUSDamount\",\"type\":\"uint256\"}],\"name\":\"selldPNM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDailyBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDaysForTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGWTforActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDaysForTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setbuyFeeToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setdPNMbuyTurnoverIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setdPNMsellTurnoverIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setearnLimitDepositedPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setgwtBuyIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setgwtSellIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setgwtTransFeeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setsellFeeToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setturnoverForOneGWT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsersEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaldPNM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"treeActiveUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeMaxPaymentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treePaymentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treeUserLostProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnoverForOneGWT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dpnmBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treePaidUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnLimitLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTurnover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSellTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSellAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct dpnmMain.buySellData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "dpnmMain", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000720bef8ec188b51ca0bc02b786e7a22fb80915db00000000000000000000000014e4f98538b93a18e39c62619901d5927c3004b8000000000000000000000000bcd058bd7cf5a4e73d1c79dabe121d6eef652832", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}