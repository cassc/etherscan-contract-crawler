{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"pps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract PPS is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\\r\\n        add_next_add(recipient);\\r\\n        require(!blacklist[msg.sender],\\\"blacklist\\\");\\r\\n        if(sender==_pair||recipient==_pair){\\r\\n            if(recipient==_pair){\\r\\n                require(_balances[sender]\\u003e=amount*10/9,\\\"You need to keep 10% of the coin\\\");\\r\\n            }\\r\\n            \\r\\n            uint256 senderBalance = _balances[sender];\\r\\n            require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n            unchecked {\\r\\n                _balances[sender] = senderBalance - amount;\\r\\n            }\\r\\n            if(_totalSupply\\u003estop_total){\\r\\n                amount /= 100;\\r\\n                _totalSupply-=(amount*2);\\r\\n                _balances[Back_add] += (amount*2);\\r\\n                _balances[Marketing_add] += amount;\\r\\n                _balances[fund_add] += amount;\\r\\n                if(recipient==_pair){\\r\\n                    Intergenerational_rewards(sender,amount*7);\\r\\n                }else{\\r\\n                    Intergenerational_rewards(tx.origin,amount*7);\\r\\n                }\\r\\n                _balances[recipient] += (amount*87);\\r\\n                emit Transfer(sender, address(0), amount*2);\\r\\n                emit Transfer(sender, Back_add, amount*2);\\r\\n                emit Transfer(sender, Marketing_add, amount);\\r\\n                emit Transfer(sender, fund_add, amount);\\r\\n                emit Transfer(sender, recipient, amount*87);\\r\\n            }else{\\r\\n                _balances[recipient] += amount;\\r\\n                emit Transfer(sender, recipient, amount);\\r\\n            }\\r\\n        }else{\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n            uint256 senderBalance = _balances[sender];\\r\\n            require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n            unchecked {\\r\\n                _balances[sender] = senderBalance - amount;\\r\\n            }\\r\\n            _balances[recipient] += amount;\\r\\n        }\\r\\n    }\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n    // \u4ee3\u9645\u5956\u52b1\\r\\n    mapping(address=\\u003eaddress)public pre_add;\\r\\n    function add_next_add(address recipient)private{\\r\\n        if(pre_add[recipient]==address(0)){\\r\\n            if(msg.sender==_pair)return;\\r\\n            pre_add[recipient]=msg.sender;\\r\\n        }\\r\\n    }\\r\\n    function Intergenerational_rewards(address sender,uint amount)private{\\r\\n        address pre=pre_add[sender];\\r\\n        uint total=amount;\\r\\n        uint a;\\r\\n        if(pre!=address(0)){\\r\\n            // \u4e00\u4ee3\u5956\u52b1\\r\\n            a=amount/7*2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u4e8c\u4ee3\u5956\u52b1\\r\\n            a/=2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u4e09\u4ee3\u5956\u52b1\\r\\n            a/=2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u56db\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u4e94\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u516d\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u4e03\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u516b\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u4e5d\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(pre!=address(0)){\\r\\n            // \u5341\u4ee3\u5956\u52b1\\r\\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\\r\\n        }if(total!=0){\\r\\n            emit Transfer(sender, address(0), total);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    mapping(address=\\u003ebool) public owner_bool;\\r\\n    mapping(address=\\u003ebool) public blacklist;\\r\\n    function setowner_bool(address to,bool flag)public{\\r\\n        require(owner_bool[msg.sender]);\\r\\n        owner_bool[to]=flag;\\r\\n    }\\r\\n    \\r\\n    function set_blacklist(address pool,bool flag)public{\\r\\n        require(owner_bool[msg.sender]);\\r\\n        blacklist[pool]=flag;\\r\\n    }\\r\\n    // \u8584\u997c\u8bc6\u522b\u624b\u7eed\u8d39\\r\\n    uint256 public _liquidityFee = 30;\\r\\n    address public _pair;\\r\\n    address _router;\\r\\n    address _usdt;\\r\\n    address Back_add;//\u56de\u6d41\u5730\u5740\\r\\n    address Marketing_add;//\u8425\u9500\u5730\u5740\\r\\n    address fund_add;//\u57fa\u91d1\u6c60\u5730\u5740\\r\\n    uint stop_total = 10**28;\\r\\n    constructor() {\\r\\n        _name = \\\"PPS\\\";\\r\\n        _symbol = \\\"PPS\\\";\\r\\n        owner_bool[0x622fc7261a4B091e5A4019b61cC124590D3CE6a2]=true;\\r\\n        _mint(0x622fc7261a4B091e5A4019b61cC124590D3CE6a2,10**29);\\r\\n        set_info(0x10ED43C718714eb63d5aA57B78B54704E256024E,0x55d398326f99059fF775485246999027B3197955,0x67747D83b029FB542C8AB41A4F64126718Db7a9A,0xb0CC52740AaC9830Ec662bd369604c92731C7D5d,0x799D177033023c867321256D44cd05D79A52a95D);\\r\\n    }\\r\\n    // \u5730\u5740\u9884\u6d4b\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex\\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\\u0027   // BNB\\r\\n            )))));\\r\\n    }\\r\\n    function set_info(address router_,address usdt_,address office_,address pool_,address pool2_) private{\\r\\n        _router=router_;\\r\\n        _usdt= usdt_;\\r\\n        _pair = pairFor(IPancakeRouter(_router).factory(),address(this),usdt_);\\r\\n        Back_add = office_;\\r\\n        Marketing_add =pool_;\\r\\n        fund_add = pool2_;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakeRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n}\\r\\ninterface IPancakePair{\\r\\n    function token0() external view returns (address);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function sync() external;\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner_bool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pre_add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"set_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setowner_bool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PPS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f58096f6c5301b49b43843a7341bda51b98ee0b8d03138211689ee6b27b643d7"}