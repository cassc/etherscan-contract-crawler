{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\r\n    function __AccessControl_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {\r\n    }\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IVTIProgram {\r\n    function addChildrenProgram (address _userAddress, string memory _name, string memory _date) external;\r\n    function addPensionProgram (address _userAddress, string memory _name, string memory _date) external;\r\n    function depositVTI (uint256 _USDTAmount, uint256 _VTIAmount, address _userAddress, uint8 _code) external;\r\n    function withdrawVTI (address _userAddress, uint8 _code) external returns (uint256, uint256, uint256);\r\n\r\n    function programExists(address _userAddress, uint8 _code) external view returns(bool);\r\n    function getProgBalance(address _userAddress, uint8 _code) external view returns (uint256);\r\n    function getProgBuyData(address _userAddress, uint8 _code) external view returns (uint256, uint256, uint256);\r\n    function getProgData(address _userAddress, uint8 _code) external view returns (string memory, string memory);\r\n    function getAllUserPrograms(address _userAddress) external view returns(uint8[] memory);\r\n}\r\n\r\n\r\n\r\ncontract INDEX_v7 is AccessControlUpgradeable, PausableUpgradeable{\r\n\r\n    uint256 private constant e18 = 10**18;\r\n\r\n    uint16 private expirationTime; // Default = 120 sec. How much time user has to sign a transaction \r\n\r\n    uint16 private mFee; // maitanance fee * 1000. 20 = 2%\r\n    uint16 private sFee; // success  fee * 1000. 200 = 20%\r\n\r\n\r\n    struct User {\r\n        uint256 totalBuyVTI;\r\n        uint256 avBuyPrice;\r\n        uint256 totalBuyUSDT;\r\n\r\n        uint256 totalSellVTI;\r\n        uint256 avSellPrice;\r\n        uint256 totalSellUSDT;\r\n        int256 realizedProfit;\r\n\r\n        uint256 mFeeTotal;\r\n        uint256 mFeePaid;\r\n        uint256 mFeeLastUpdated;\r\n    } \r\n\r\n    mapping (address => User) private users;\r\n\r\n    struct HistoryRecord {\r\n        uint8 opType; // 0- buy, 1 - sell\r\n        uint8 opCode; // 0 - usual, 10-19 - children, 20-29 - pension; \r\n        string opDate; // Date of operation\r\n        uint256 VTIAmount;// Index token buy/sell amount\r\n        uint256 VTIPrice; // Price of operation\r\n        uint256 totalUSDT; // Amount of USDT paid/received\r\n    }\r\n\r\n    mapping (address => HistoryRecord[]) userHistory; //address => history\r\n    \r\n\r\n    IERC20Metadata public VTI;\r\n    IERC20Metadata public USDT;\r\n\r\n    uint256 public VTIBalance;\r\n    uint256 public USDTBalance;\r\n\r\n    address private systemWallet;\r\n    address private backAddress;\r\n    address private programsContract;\r\n\r\n\r\n    function initialize() public initializer {\r\n        __AccessControl_init();\r\n        __Pausable_init_unchained();\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        mFee = 20;\r\n        sFee = 200;\r\n\r\n        expirationTime = 120;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the one with the Admin role granted.\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Caller is not the Admin\");\r\n        _;\r\n    }\r\n\r\n\r\n//************* ADMIN FUNCTIONS ********************************//\r\n    function pause() onlyAdmin public {\r\n        super._pause();\r\n    }\r\n   \r\n   \r\n    function unpause() onlyAdmin public {\r\n        super._unpause();\r\n    }\r\n\r\n\r\n    function setSystemWallet(address _systemWallet) onlyAdmin public {\r\n        systemWallet = _systemWallet;\r\n    }\r\n\r\n\r\n    function setBackAddress(address _backAddress) onlyAdmin public {\r\n        backAddress = _backAddress;\r\n    }\r\n\r\n\r\n    function setUSDTContractAddress(address _USDTContract) onlyAdmin public {\r\n        USDT = IERC20Metadata(_USDTContract);\r\n    }\r\n\r\n\r\n    function setVTIContractAddress(address _VTIContract) onlyAdmin public {\r\n        VTI = IERC20Metadata(_VTIContract);\r\n    }\r\n\r\n\r\n    function setProgramsContractAddress(address _programsContract) onlyAdmin public {\r\n        programsContract = _programsContract;\r\n    }\r\n\r\n\r\n\r\n    //Index settings \r\n    function setExpirationTime(uint16 _expTime) onlyAdmin public {\r\n        expirationTime = _expTime;\r\n    }\r\n\r\n\r\n    function setMFee(uint16 _newMFee) onlyAdmin public {\r\n        require((_newMFee >=0) && (_newMFee <=1000), \"wrong maitanance fee\");\r\n        mFee = _newMFee;\r\n    }\r\n\r\n\r\n    function setSFee(uint16 _newSFee) onlyAdmin public {\r\n        require((_newSFee >=0) && (_newSFee <=1000),\"wrong success fee\");\r\n        sFee = _newSFee;\r\n    }\r\n\r\n\r\n    function getUSDT(uint256 _amount) onlyAdmin public {\r\n        require(USDT.balanceOf(address(this)) >= _amount, \"Not enough USDT on contract\");\r\n        require(USDTBalance >= _amount, \"USDT amount > USDTBalance\");\r\n\r\n        USDT.transfer(msg.sender, _amount);\r\n\r\n        USDTBalance-= _amount;\r\n    }\r\n\r\n\r\n    function getVTI(uint256 _amount) onlyAdmin public {\r\n        require(VTI.balanceOf(address(this)) >= _amount, \"Not enough VTI on contract\");\r\n        require(VTIBalance >= _amount, \"VTI amount > VTIBalance\");\r\n\r\n        VTI.transfer(msg.sender, _amount);\r\n\r\n        VTIBalance-= _amount;\r\n    }\r\n\r\n\r\n\r\n//************* USER FUNCTIONS ********************************//\r\n\r\n   // _programType = 0 - children program, 1 - pension program\r\n   function addProgram(uint8 _programType, string memory _name, string memory _date) public whenNotPaused{\r\n       require(!isContract(msg.sender), \"Contract calls are not available\");\r\n       require((_programType >= 0) && (_programType <= 1), \"Wrong program type\");\r\n\r\n       if (_programType == 0) {\r\n           // add children program\r\n           IVTIProgram(programsContract).addChildrenProgram (msg.sender, _name, _date);\r\n       }else {\r\n           // add pension program\r\n           IVTIProgram(programsContract).addPensionProgram (msg.sender, _name, _date);\r\n       }\r\n   } \r\n\r\n\r\n    // _type: 0 - usual, 10-19 - children, 20-29 - pension\r\n   function buyVTI (uint256 _USDTAmount, uint256 _VTIPrice, address _userAddress, uint256 _timeStamp, uint256 _openLimit, uint8 _code) public whenNotPaused{\r\n       require(!isContract(msg.sender), \"Contract calls are not available\");\r\n       require(msg.sender == backAddress, \"Only back address can call this function\");\r\n       require(_timeStamp + expirationTime >= block.timestamp, \"Time for signing transaction has expired\");\r\n       require(_USDTAmount <= _openLimit, \"USDT amount exceeds open limit\");\r\n       require((_code == 0) || ((_code >= 10) && (_code <= 29)), \"Deposit type is out of range\");\r\n\r\n       uint256 VTIAmount = e18 * _USDTAmount/ _VTIPrice;\r\n\r\n       require(VTI.balanceOf(address(this)) >= VTIAmount, \"Not enough VTI tokens on contract\");\r\n\r\n       uint256 balanceBefore = USDT.balanceOf(address(this));\r\n       USDT.transferFrom(_userAddress, address(this), _USDTAmount);\r\n       require(USDT.balanceOf(address(this)) - balanceBefore == _USDTAmount, \"USDT Payment error\");\r\n\r\n       if (_code == 0) {\r\n           VTI.transfer(_userAddress, VTIAmount);\r\n\r\n           if (users[_userAddress].mFeeLastUpdated == 0) {\r\n               users[_userAddress].mFeeLastUpdated = block.timestamp;\r\n           } else {\r\n               users[_userAddress].mFeeTotal+= users[_userAddress].totalBuyVTI * (block.timestamp - users[_userAddress].mFeeLastUpdated)*mFee/31536000000;\r\n               users[_userAddress].mFeeLastUpdated = block.timestamp;\r\n           }\r\n        \r\n           users[_userAddress].totalBuyVTI+= VTIAmount;\r\n           users[_userAddress].totalBuyUSDT+= _USDTAmount;\r\n           users[_userAddress].avBuyPrice = e18 * users[_userAddress].totalBuyUSDT/ users[_userAddress].totalBuyVTI;\r\n       }   \r\n\r\n\r\n       if ((_code >= 10) && (_code <= 29)){\r\n           VTI.transfer(programsContract, VTIAmount);\r\n           IVTIProgram(programsContract).depositVTI(_USDTAmount, VTIAmount, _userAddress, _code);\r\n       }\r\n\r\n       USDTBalance+= _USDTAmount;\r\n       VTIBalance-= VTIAmount;\r\n\r\n\r\n       HistoryRecord memory tempRecord;\r\n\r\n       tempRecord.opType = 0;\r\n       tempRecord.opCode = _code;\r\n       tempRecord.opDate = timestampToDate(block.timestamp);\r\n       tempRecord.VTIAmount = VTIAmount;\r\n       tempRecord.VTIPrice = _VTIPrice;\r\n       tempRecord.totalUSDT = _USDTAmount;\r\n\r\n       userHistory[_userAddress].push(tempRecord);\r\n   }\r\n\r\n\r\n\r\n    // _type: 0 - usual, 10-19 - children, 20-29 - pension\r\n   function buyVTIfromBalance (uint256 _USDTAmount, uint256 _VTIPrice, address _userAddress, uint8 _code) public whenNotPaused{\r\n       require(!isContract(msg.sender), \"Contract calls are not available\");\r\n       require(msg.sender == backAddress, \"Only back address can call this function\");\r\n       require((_code == 0) || ((_code >= 10) && (_code <= 29)), \"Deposit type is out of range\");\r\n       require(_VTIPrice != 0, \"VTI price = 0\");\r\n\r\n\r\n       uint256 VTIAmount = e18 * _USDTAmount/ _VTIPrice;\r\n\r\n       require(VTI.balanceOf(address(this)) >= VTIAmount, \"Not enough VTI tokens on contract\");\r\n       require(VTIBalance >= VTIAmount, \"VTI amount > VTIBalance\");\r\n       require(USDT.balanceOf(systemWallet) >= _USDTAmount, \"Not enough USDT on system wallet\");\r\n\r\n       uint256 balanceBefore = USDT.balanceOf(address(this));\r\n       USDT.transferFrom(systemWallet, address(this), _USDTAmount);\r\n       require(USDT.balanceOf(address(this)) - balanceBefore == _USDTAmount, \"USDT Payment error\");\r\n\r\n       if (_code == 0) {\r\n           VTI.transfer(_userAddress, VTIAmount);\r\n\r\n           if (users[_userAddress].mFeeLastUpdated == 0) {\r\n               users[_userAddress].mFeeLastUpdated = block.timestamp;\r\n           } else {\r\n               users[_userAddress].mFeeTotal+= users[_userAddress].totalBuyVTI * (block.timestamp - users[_userAddress].mFeeLastUpdated)*mFee/31536000000;\r\n               users[_userAddress].mFeeLastUpdated = block.timestamp;\r\n           }\r\n          \r\n           users[_userAddress].totalBuyVTI+= VTIAmount;\r\n           users[_userAddress].totalBuyUSDT+= _USDTAmount;\r\n           users[_userAddress].avBuyPrice = e18 * users[_userAddress].totalBuyUSDT/ users[_userAddress].totalBuyVTI;\r\n       }   \r\n\r\n\r\n       if ((_code >= 10) && (_code <= 29)){\r\n           VTI.transfer(programsContract, VTIAmount);\r\n           IVTIProgram(programsContract).depositVTI(_USDTAmount, VTIAmount, _userAddress, _code);\r\n       }\r\n\r\n       USDTBalance+= _USDTAmount;\r\n       VTIBalance-= VTIAmount;\r\n\r\n\r\n       HistoryRecord memory tempRecord;\r\n\r\n       tempRecord.opType = 0;\r\n       tempRecord.opCode = _code;\r\n       tempRecord.opDate = timestampToDate(block.timestamp);\r\n       tempRecord.VTIAmount = VTIAmount;\r\n       tempRecord.VTIPrice = _VTIPrice;\r\n       tempRecord.totalUSDT = _USDTAmount;\r\n\r\n       userHistory[_userAddress].push(tempRecord);\r\n   }\r\n\r\n\r\n   function sellVTI (uint256 _VTIAmount, uint256 _VTIPrice, address _userAddress, uint256 _timeStamp) public whenNotPaused{\r\n       require(!isContract(msg.sender), \"Contract calls are not available\");\r\n       require(msg.sender == backAddress, \"Only back address can call this function\");\r\n       require(_timeStamp + expirationTime >= block.timestamp, \"Time for signing transaction has expired\");\r\n\r\n       users[_userAddress].mFeeTotal+= users[_userAddress].totalBuyVTI * (block.timestamp - users[_userAddress].mFeeLastUpdated)*mFee/31536000000;\r\n       users[_userAddress].mFeeLastUpdated = block.timestamp;\r\n\r\n       require(_VTIAmount > (users[_userAddress].mFeeTotal - users[_userAddress].mFeePaid), \"mFee > VTI amount\");\r\n\r\n\r\n       uint256 _realVTIAmount = _VTIAmount - (users[_userAddress].mFeeTotal - users[_userAddress].mFeePaid);\r\n       users[_userAddress].mFeePaid = users[_userAddress].mFeeTotal;\r\n\r\n       uint256 USDTAmount = _realVTIAmount * _VTIPrice / e18;\r\n\r\n\r\n       require(USDT.balanceOf(address(this)) >= USDTAmount, \"Not enough USDT on contract\");\r\n\r\n       uint256 balanceBefore = VTI.balanceOf(address(this));\r\n       VTI.transferFrom(_userAddress, address(this), _realVTIAmount);\r\n       require(VTI.balanceOf(address(this)) - balanceBefore == _realVTIAmount, \"USDT Payment error\");\r\n\r\n       VTI.transferFrom(_userAddress, systemWallet, _VTIAmount - _realVTIAmount);\r\n\r\n       USDT.transfer(_userAddress, USDTAmount);\r\n\r\n       USDTBalance-= USDTAmount;\r\n       VTIBalance+= _VTIAmount;\r\n\r\n       users[_userAddress].totalSellVTI+= _VTIAmount;\r\n       users[_userAddress].totalSellUSDT+= USDTAmount;\r\n       users[_userAddress].avSellPrice = e18 * users[_userAddress].totalSellUSDT/ users[_userAddress].totalSellVTI;\r\n       users[_userAddress].realizedProfit = int256(users[_userAddress].totalSellVTI) * (int256(users[_userAddress].avSellPrice) - int256(users[_userAddress].avBuyPrice)) / int256(e18);\r\n\r\n       HistoryRecord memory tempRecord;\r\n\r\n       tempRecord.opType = 1;\r\n       tempRecord.opCode = 0;\r\n       tempRecord.opDate = timestampToDate(block.timestamp);\r\n       tempRecord.VTIAmount = _VTIAmount;\r\n       tempRecord.VTIPrice = _VTIPrice;\r\n       tempRecord.totalUSDT = USDTAmount;\r\n\r\n       userHistory[_userAddress].push(tempRecord);\r\n   }\r\n\r\n\r\n\r\n    function withdrawFromProgram(uint8 _code) public whenNotPaused{\r\n       require(!isContract(msg.sender), \"Contract calls are not available\");\r\n       require((_code >= 10) && (_code <= 29), \"Deposit type is out of range\");\r\n\r\n       uint256 _VTIAmount;\r\n       uint256 _USDTAmount;\r\n       uint256 _mFeeTotal;\r\n\r\n       (_VTIAmount, _USDTAmount, _mFeeTotal) = IVTIProgram(programsContract).withdrawVTI(msg.sender, _code);\r\n\r\n       users[msg.sender].mFeeTotal+= users[msg.sender].totalBuyVTI * (block.timestamp - users[msg.sender].mFeeLastUpdated)*mFee/31536000000;\r\n       users[msg.sender].mFeeLastUpdated = block.timestamp;\r\n\r\n\r\n       users[msg.sender].totalBuyVTI+= _VTIAmount;\r\n       users[msg.sender].totalBuyUSDT+= _USDTAmount;\r\n       users[msg.sender].avBuyPrice = e18 * users[msg.sender].totalBuyUSDT/ users[msg.sender].totalBuyVTI;\r\n       users[msg.sender].mFeeTotal+= _mFeeTotal;\r\n\r\n\r\n       HistoryRecord memory tempRecord;\r\n\r\n       tempRecord.opType = 2;  // withdraw from program\r\n       tempRecord.opCode = _code;\r\n       tempRecord.opDate = timestampToDate(block.timestamp);\r\n       tempRecord.VTIAmount = _VTIAmount;\r\n       tempRecord.VTIPrice = 0;\r\n       tempRecord.totalUSDT = _USDTAmount;\r\n\r\n       userHistory[msg.sender].push(tempRecord);\r\n\r\n    }\r\n\r\n\r\n    function addVTI (uint256 _amount) public whenNotPaused {\r\n        require (_amount <= VTI.balanceOf(msg.sender),\"Not enough VTI to add\");\r\n\r\n       uint256 balanceBefore = VTI.balanceOf(address(this));\r\n       VTI.transferFrom(msg.sender, address(this), _amount);\r\n       require(VTI.balanceOf(address(this)) - balanceBefore == _amount, \"VTI Payment error\");\r\n\r\n       VTIBalance+= _amount;\r\n    }\r\n\r\n\r\n    function addUSDT (uint256 _amount) public whenNotPaused {\r\n        require (_amount <= USDT.balanceOf(msg.sender),\"Not enough USDT to add\");\r\n\r\n       uint256 balanceBefore = USDT.balanceOf(address(this));\r\n       USDT.transferFrom(msg.sender, address(this), _amount);\r\n       require(USDT.balanceOf(address(this)) - balanceBefore == _amount, \"USDT Payment error\");\r\n\r\n       USDTBalance+= _amount;\r\n    }\r\n\r\n\r\n//************* VIEW FUNCTIONS ********************************//\r\n    function getVTIBalance(address _userAddress) public view whenNotPaused returns (uint256){\r\n        return VTI.balanceOf(_userAddress);\r\n    }\r\n\r\n\r\n    function getProgramBalance(address _userAddress, uint8 _code) public view whenNotPaused returns (uint256){\r\n        require((_code >= 10) && (_code <= 29), \"Deposit type is out of range\");\r\n        require(IVTIProgram(programsContract).programExists(_userAddress, _code), \"No such a program\");\r\n\r\n        return IVTIProgram(programsContract).getProgBalance(_userAddress, _code);\r\n    }\r\n\r\n\r\n    function getBuyData(address _userAddress) public view whenNotPaused returns (uint256, uint256, uint256){\r\n        return (        \r\n          users[_userAddress].totalBuyVTI,\r\n          users[_userAddress].avBuyPrice,\r\n          users[_userAddress].totalBuyUSDT);\r\n    }\r\n\r\n\r\n    function getProgramBuyData(address _userAddress, uint8 _code) public view whenNotPaused returns (uint256, uint256, uint256){\r\n        require((_code >= 10) && (_code <= 29), \"Deposit type is out of range\");\r\n        require(IVTIProgram(programsContract).programExists(_userAddress, _code), \"No such a program\");\r\n\r\n        return IVTIProgram(programsContract).getProgBuyData(_userAddress, _code);        \r\n    }\r\n\r\n\r\n    function getProgramData(address _userAddress, uint8 _code) public view whenNotPaused returns (string memory, string memory){\r\n        require((_code >= 10) && (_code <= 29), \"Deposit type is out of range\");\r\n        require(IVTIProgram(programsContract).programExists(_userAddress, _code), \"No such a program\");\r\n\r\n        return IVTIProgram(programsContract).getProgData(_userAddress, _code);        \r\n    }\r\n\r\n\r\n    function getAllUserPrograms(address _userAddress) public view whenNotPaused returns (uint8[] memory){\r\n\r\n        return IVTIProgram(programsContract).getAllUserPrograms(_userAddress);\r\n    }\r\n\r\n\r\n    function getSellData(address _userAddress) public view whenNotPaused returns (uint256, uint256, uint256, string memory){\r\n        uint256 _utemp;\r\n        string memory _stemp;\r\n\r\n        if (users[_userAddress].realizedProfit >= 0){\r\n            _utemp = uint256(users[_userAddress].realizedProfit);\r\n            _stemp = string(abi.encodePacked(StringsUpgradeable.toString(_utemp)));\r\n        }else{\r\n            _utemp = uint256(-1 * users[_userAddress].realizedProfit);\r\n            _stemp = string(abi.encodePacked(\"-\",StringsUpgradeable.toString(_utemp)));\r\n        }\r\n\r\n        return (        \r\n          users[_userAddress].totalSellVTI,\r\n          users[_userAddress].avSellPrice,\r\n          users[_userAddress].totalSellUSDT,\r\n          _stemp);\r\n    }\r\n\r\n\r\n    function getUserHistory(address _userAddress) public view whenNotPaused returns (HistoryRecord[] memory){\r\n        return userHistory[_userAddress];\r\n    }\r\n\r\n\r\n    function getMinSellAmount(address _userAddress) public view whenNotPaused returns (uint256){\r\n        return users[_userAddress].mFeeTotal + (users[msg.sender].totalBuyVTI * (block.timestamp - users[msg.sender].mFeeLastUpdated)*mFee/31536000000) - users[_userAddress].mFeePaid;\r\n    }\r\n\r\n\r\n    function getUserFees(address _userAddress) public view whenNotPaused returns (uint256, uint256){\r\n        return ((users[_userAddress].mFeeTotal + (users[msg.sender].totalBuyVTI * (block.timestamp - users[msg.sender].mFeeLastUpdated)*mFee/31536000000)), users[_userAddress].mFeePaid);\r\n    }\r\n\r\n\r\n    function getMFee() external view whenNotPaused returns (uint16){\r\n        return mFee;\r\n    }\r\n\r\n//************* INTERNAL FUNCTIONS ********************************//\r\n\r\n     // timestampToDate\r\n    function timestampToDate(uint256 _timestamp) internal pure returns (string memory) {\r\n        int __days = int(_timestamp/86400);\r\n\r\n        int L = __days + 68569 + 2440588;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        return string(abi.encodePacked(StringsUpgradeable.toString(uint(_day)),\".\", StringsUpgradeable.toString(uint(_month)),\".\",StringsUpgradeable.toString(uint(_year))));\r\n    }   \r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VTI\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VTIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_programType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_date\",\"type\":\"string\"}],\"name\":\"addProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVTI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_VTIPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"buyVTI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_VTIPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"buyVTIfromBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getAllUserPrograms\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getBuyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getMinSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"getProgramBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"getProgramBuyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"getProgramData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getSellData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"opCode\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"opDate\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"VTIAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VTIPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDT\",\"type\":\"uint256\"}],\"internalType\":\"struct INDEX_v7.HistoryRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getVTI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getVTIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_VTIAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_VTIPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"sellVTI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backAddress\",\"type\":\"address\"}],\"name\":\"setBackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_expTime\",\"type\":\"uint16\"}],\"name\":\"setExpirationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMFee\",\"type\":\"uint16\"}],\"name\":\"setMFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_programsContract\",\"type\":\"address\"}],\"name\":\"setProgramsContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newSFee\",\"type\":\"uint16\"}],\"name\":\"setSFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_systemWallet\",\"type\":\"address\"}],\"name\":\"setSystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDTContract\",\"type\":\"address\"}],\"name\":\"setUSDTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VTIContract\",\"type\":\"address\"}],\"name\":\"setVTIContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_code\",\"type\":\"uint8\"}],\"name\":\"withdrawFromProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "INDEX_v7", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://919a9e231337eb0491d357ed65f28cc9d7680840be1eefc4d2216f137b0f9ed6"}