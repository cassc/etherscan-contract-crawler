{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DbankNode.sol\": {\r\n      \"content\": \"// contracts/DbankNode.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\nimport \\\"./Governable.sol\\\";\\r\\n\\r\\nabstract contract SmartNode {\\r\\n    function nodeRefererOf(address node) external view virtual returns(address);\\r\\n    function nodeIdOf(address node) external view virtual returns(uint256);\\r\\n}\\r\\n\\r\\ncontract DbankNode is Governable {\\r\\n    uint256 private smartNodeReferer;\\r\\n    mapping (uint256 => address) private nodeIds;\\r\\n    mapping (address => uint256) private nodeAddresses;\\r\\n    mapping (uint256 => uint256) private nodeRefererIds;\\r\\n    uint256 private currentId = 0;\\r\\n    SmartNode private smartNode;\\r\\n    bool public migrated = false;\\r\\n    enum Tree { ETHEREUM, BINANCE, TRON, ARBITRUM, AVALANCHE, POLYGON }\\r\\n\\r\\n    event DbankNodeActivated(address user, address referer, uint256 id);\\r\\n\\r\\n    constructor(SmartNode _smartNode) {\\r\\n        smartNode = _smartNode;\\r\\n    }\\r\\n\\r\\n    function join(uint256 refererId, Tree tree) public {\\r\\n        require (migrated, \\\"!Migrated\\\");\\r\\n        require (tree == Tree.BINANCE, \\\"!BinanceTree\\\");\\r\\n        require(smartNode.nodeIdOf(_msgSender()) == 0, \\\"!SmartNode\\\");\\r\\n        address referer = nodeIds[refererId];\\r\\n        require (referer != address(0), \\\"!ZeroReferer\\\");\\r\\n        _join(_msgSender(), refererId);\\r\\n        emit DbankNodeActivated(_msgSender(), referer, currentId);\\r\\n    }\\r\\n\\r\\n    function nodeRefererOf(address node) public view returns(address referer) {\\r\\n        uint256 refererId = nodeRefererIds[nodeAddresses[node]];\\r\\n        referer = nodeIds[refererId];\\r\\n        if (referer == address(0)) {\\r\\n            referer = smartNode.nodeRefererOf(node);\\r\\n            if (smartNode.nodeIdOf(referer) == 1 ) {\\r\\n                return nodeIds[smartNodeReferer];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nodeUserOf(uint256 id) public view returns(address node) {\\r\\n        return nodeIds[id];\\r\\n    }\\r\\n\\r\\n    function nodeIdOf(address node) public view returns(uint256 id) {\\r\\n        return nodeAddresses[node];\\r\\n    }\\r\\n\\r\\n    function nodeUserReferrerOf(uint256 id) public view returns(address node, address referer) {\\r\\n        uint256 refererId = nodeRefererIds[id];\\r\\n        return (nodeIds[id], nodeIds[refererId]);\\r\\n    }\\r\\n\\r\\n    function totalNodes() public view returns(uint256 nodeCount) {\\r\\n        return currentId;\\r\\n    }\\r\\n\\r\\n    function isExistingId(uint256 id) public view returns(bool status) {\\r\\n        return nodeIds[id] != address(0);\\r\\n    }\\r\\n\\r\\n    function migrateNodes(address[] calldata nodes, uint256[] calldata ids, uint256[] calldata referrers) external onlyGovernance {\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            _migrateNode(nodes[i], ids[i], referrers[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function finishMigration(address[] calldata nodes, address[] calldata referrers) external onlyGovernance {\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            currentId++;\\r\\n            nodeIds[currentId] = nodes[i];\\r\\n            nodeAddresses[nodes[i]] = currentId;\\r\\n            nodeRefererIds[currentId] = nodeAddresses[referrers[i]];\\r\\n        }\\r\\n        smartNodeReferer = currentId;\\r\\n        nodeRefererIds[1] = currentId;\\r\\n        migrated = true;\\r\\n        _transferGovernance(address(0));\\r\\n    }\\r\\n\\r\\n    function _join(address node, uint256 refererId) internal {\\r\\n        require(nodeAddresses[node] == 0, \\\"AlreadyJoined!\\\");\\r\\n        require(refererId > 0, \\\"!RefererExists\\\");\\r\\n        currentId++;\\r\\n        nodeIds[currentId] = node;\\r\\n        nodeAddresses[node] = currentId;\\r\\n        nodeRefererIds[currentId] = refererId;\\r\\n    }\\r\\n\\r\\n    function _migrateNode(address node, uint256 id, uint256 refererId) internal {\\r\\n        require(nodeAddresses[node] == 0, \\\"AlreadyJoined!\\\");\\r\\n        require(refererId > 0, \\\"!RefererExists\\\");\\r\\n        currentId = id;\\r\\n        nodeIds[id] = node;\\r\\n        nodeAddresses[node] = id;\\r\\n        nodeRefererIds[id] = refererId;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Governable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (a governance) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the governance account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferGovernance}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyGovernance`, which can be applied to your functions to restrict their use to\\r\\n * the governance.\\r\\n */\\r\\nabstract contract Governable is Context {\\r\\n    address private _governance;\\r\\n\\r\\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial governance.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferGovernance(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current governance.\\r\\n     */\\r\\n    function governance() public view virtual returns (address) {\\r\\n        return _governance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the governance.\\r\\n     */\\r\\n    modifier onlyGovernance() {\\r\\n        require(governance() == _msgSender(), \\\"Governable: caller is not the governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without governance. It will not be possible to call\\r\\n     * `onlyGovernance` functions anymore. Can only be called by the current governance.\\r\\n     *\\r\\n     * NOTE: Renouncing governanceship will leave the contract without an governance,\\r\\n     * thereby removing any functionality that is only available to the governance.\\r\\n     */\\r\\n    function renounceGovernance() public virtual onlyGovernance {\\r\\n        _transferGovernance(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers governanceship of the contract to a new account (`newGovernance`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferGovernance(address newGovernance) internal virtual {\\r\\n        address oldGovernance = _governance;\\r\\n        _governance = newGovernance;\\r\\n        emit GovernanceTransferred(oldGovernance, newGovernance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract SmartNode\",\"name\":\"_smartNode\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DbankNodeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nodes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"referrers\",\"type\":\"address[]\"}],\"name\":\"finishMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isExistingId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refererId\",\"type\":\"uint256\"},{\"internalType\":\"enum DbankNode.Tree\",\"name\":\"tree\",\"type\":\"uint8\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nodes\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referrers\",\"type\":\"uint256[]\"}],\"name\":\"migrateNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"nodeIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"nodeRefererOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nodeUserOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nodeUserReferrerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DbankNode", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000028c911c10c9e346158206991e02d09bd0a8a35b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}