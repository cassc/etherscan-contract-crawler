{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gaia.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\n\\n/* Gaia Features\\n*  - 2% Deposited to Donation Wallet\\n*  - 1% Burn on All Transactions\\n*  - 1% Added to Liquidity\\n*  - 1% Recirculation to Holders\\n*/ \\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IUniswap.sol\\\";\\n\\ncontract Gaia is Context, IBEP20, Ownable {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  string private _name = \\\"Gaia\\\";\\n  string private _symbol = \\\"GAIA\\\";\\n  uint8 private _decimals = 9;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => uint256) private _rOwned;\\n  mapping (address => uint256) private _tOwned;\\n  mapping (address => mapping (address => uint256)) private _allowances;\\n\\n  /*Exclusions for liquidity pool */\\n  mapping (address => bool) private _isExcludedFromFee;\\n  mapping (address => bool) private _isExcluded;\\n  address[] private _excluded;\\n\\n  uint256 private constant MAX = ~uint256(0);\\n  uint256 private _tTotal = 100000000 * 10**9;\\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n  uint256 private _tFeeTotal;\\n\\n  /* \\n   * @dev Set CharityAddress to a Multi-sig Wallet\\n  */\\n  address public charityAddress;\\n\\n  IUniswapV2Router02 public immutable uniswapV2Router;\\n  address public immutable uniswapV2Pair;\\n\\n  bool inSwapAndLiquify;\\n  bool public swapAndLiquifyEnabled = true;\\n\\n  uint256 public _donationFee = 2;\\n  uint256 public _burnFee = 1;\\n  uint256 public _reflectionFee = 1;\\n  uint256 public _taxFee = _reflectionFee + _donationFee + _burnFee;\\n\\n  uint256 private _previousTaxFee = _taxFee;\\n  uint256 private _previousBurnFee = _burnFee;\\n  uint256 private _previousDonationFee = _donationFee;\\n  uint256 private _previousReflectionFee = _reflectionFee;\\n\\n  uint256 public _liquidityFee = 1;\\n  uint256 private _previousLiquidityFee = _liquidityFee;\\n\\n  event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\\n  event SwapAndLiquify(\\n    uint256 tokensSwapped,\\n    uint256 ethReceived,\\n    uint256 tokensIntoLiqudity\\n  );\\n\\n  modifier lockTheSwap {\\n    inSwapAndLiquify = true;\\n    _;\\n    inSwapAndLiquify = false;\\n  }\\n\\n  uint256 public _maxTxAmount = 500000 * 10**9;\\n  uint256 private numTokensSellToAddToLiquidity = 50000 * 10**9;\\n\\n  constructor(address initialCharityAddress) public {\\n    require(initialCharityAddress != address(0), \\\"Address should not be 0x00\\\");\\n    _rOwned[_msgSender()] = _rTotal;\\n    charityAddress = initialCharityAddress;\\n\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    \\n    // Create a uniswap pair for this new token\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n      .createPair(address(this), _uniswapV2Router.WETH()\\n    );\\n    uniswapV2Router = _uniswapV2Router;\\n\\n    // Exclude owner, charityWallet and this contract from fee\\n    _isExcludedFromFee[owner()] = true;\\n    _isExcludedFromFee[address(this)] = true;\\n    _isExcludedFromFee[charityAddress] = true;\\n\\n    emit Transfer(address(0), msg.sender, _tTotal);\\n  }\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function getOwner() external view override returns (address) {\\n    return owner();\\n  }\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-totalSupply}.\\n   */\\n  function totalSupply() external view override returns (uint256) {\\n    return _tTotal;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    if (_isExcluded[account]) return _tOwned[account];\\n    return tokenFromReflection(_rOwned[account]);\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-allowance}.\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {BEP20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {BEP20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for `sender`'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n    return true;\\n  }\\n\\n  function isExcludedFromReward(address account) public view returns (bool) {\\n    return _isExcluded[account];\\n  }\\n\\n  function totalFees() public view returns (uint256) {\\n    return _tFeeTotal;\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\n    \\n    _rOwned[account] = _rOwned[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\n    _tTotal = _tTotal.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(address owner, address spender, uint256 amount) internal {\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  event UpdateCharityAddress(address indexed prevCharityAddress, address indexed newCharityAddress);\\n\\n  function updateCharityAddress(address newAddress) public onlyOwner {\\n    require(newAddress != address(0), \\\"Address should not be the zero address\\\");\\n    address prevCharityAddress = charityAddress;\\n    charityAddress = newAddress;\\n\\n    emit UpdateCharityAddress(prevCharityAddress, charityAddress);\\n  }\\n\\n  function _donate(address account, uint256 amount) internal {\\n    _rOwned[account] = _rOwned[account].sub(amount, \\\"BEP20: donation amount exceeds balance\\\");\\n    uint256 rAmount = amount.mul(_getRate());\\n    \\n    _rOwned[charityAddress] = _rOwned[charityAddress].add(rAmount);\\n    _tOwned[charityAddress] = _tOwned[charityAddress].add(amount);\\n\\n    emit Transfer(account, charityAddress, amount);\\n  }\\n  \\n  function deliver(uint256 tAmount) public {\\n    address sender = _msgSender();\\n    require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\n    (uint256 rAmount,,,,,) = _getValues(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _rTotal = _rTotal.sub(rAmount);\\n    _tFeeTotal = _tFeeTotal.add(tAmount);\\n  }\\n\\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n    require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n    if (!deductTransferFee) {\\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\\n        return rAmount;\\n    } else {\\n        (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\\n        return rTransferAmount;\\n    }\\n  }\\n\\n  function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n    require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n    uint256 currentRate =  _getRate();\\n    return rAmount.div(currentRate);\\n  }\\n\\n  function excludeFromReward(address account) public onlyOwner() {\\n    // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\n    require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n    if(_rOwned[account] > 0) {\\n        _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n    }\\n    _isExcluded[account] = true;\\n    _excluded.push(account);\\n  }\\n\\n  function includeInReward(address account) external onlyOwner() {\\n    require(_isExcluded[account], \\\"Account is already included\\\");\\n    for (uint256 i = 0; i < _excluded.length; i++) {\\n      if (_excluded[i] == account) {\\n        _excluded[i] = _excluded[_excluded.length - 1];\\n        _tOwned[account] = 0;\\n        _isExcluded[account] = false;\\n        _excluded.pop();\\n        break;\\n      }\\n    }\\n  }\\n  \\n  function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,, uint256 tLiquidity) = _getValues(tAmount);\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\n\\n    (uint256 donationFee, uint256 burnFee, uint256 reflectionFee) = _getTaxBreakdown(tAmount);\\n    _burn(sender, burnFee);\\n    _donate(sender, donationFee);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, reflectionFee);     \\n    \\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n    \\n  function excludeFromFee(address account) public onlyOwner {\\n    _isExcludedFromFee[account] = true;\\n  }\\n    \\n  function includeInFee(address account) public onlyOwner {\\n    _isExcludedFromFee[account] = false;\\n  }\\n    \\n  function setTaxFeePercent(uint256 donationFee, uint256 burnFee, uint256 reflectionFee) external onlyOwner() {\\n    _donationFee = donationFee;\\n    _burnFee = burnFee;\\n    _reflectionFee = reflectionFee;\\n\\n    _taxFee = donationFee + burnFee + reflectionFee;\\n  }\\n    \\n  function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\\n    _liquidityFee = liquidityFee;\\n  }\\n   \\n  function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\\n    _maxTxAmount = _tTotal.mul(maxTxPercent).div(\\n      10**2\\n    );\\n  }\\n\\n  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n    swapAndLiquifyEnabled = _enabled;\\n    emit SwapAndLiquifyEnabledUpdated(_enabled);\\n  }\\n  \\n  // To recieve ETH from uniswapV2Router when swaping\\n  receive() external payable {}\\n\\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\\n    _rTotal = _rTotal.sub(rFee);\\n    _tFeeTotal = _tFeeTotal.add(tFee);\\n  }\\n\\n  function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n    (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\\n  }\\n\\n  function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\\n    uint256 tFee = calculateTaxFee(tAmount);\\n    uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\n    return (tTransferAmount, tFee, tLiquidity);\\n  }\\n\\n  function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n    uint256 rAmount = tAmount.mul(currentRate);\\n    uint256 rFee = tFee.mul(currentRate);\\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\n    return (rAmount, rTransferAmount, rFee);\\n  }\\n\\n  function _getTaxBreakdown(uint tAmount) private view returns (uint256, uint256, uint256) {\\n    uint256 donationFee = tAmount.mul(_donationFee).div(10 ** 2);\\n    uint burnFee = tAmount.mul(_burnFee).div(10 ** 2);\\n    uint reflectionFee = tAmount.mul(_reflectionFee).div(10 ** 2);\\n    \\n    return (donationFee, burnFee, reflectionFee);\\n  }\\n\\n  function _getRate() private view returns(uint256) {\\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n    return rSupply.div(tSupply);\\n  }\\n\\n  function _getCurrentSupply() private view returns(uint256, uint256) {\\n    uint256 rSupply = _rTotal;\\n    uint256 tSupply = _tTotal;      \\n    for (uint256 i = 0; i < _excluded.length; i++) {\\n      if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n      rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n      tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n    }\\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n    return (rSupply, tSupply);\\n  }\\n\\n  function _takeLiquidity(uint256 tLiquidity) private {\\n    uint256 currentRate =  _getRate();\\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\\n    _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n    if(_isExcluded[address(this)])\\n      _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\n  }\\n\\n  function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n    return _amount.mul(_taxFee).div(\\n      10**2\\n    );\\n  }    \\n\\n  function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\n    return _amount.mul(_liquidityFee).div(\\n      10**2\\n    );\\n  }\\n\\n  function removeAllFee() private {\\n    if(_taxFee == 0 && _liquidityFee == 0) return;\\n    \\n    _previousTaxFee = _taxFee;\\n    _previousLiquidityFee = _liquidityFee;\\n    _previousBurnFee = _burnFee;\\n    _previousDonationFee = _donationFee;\\n    _previousReflectionFee = _reflectionFee;\\n    \\n    _taxFee = 0;\\n    _liquidityFee = 0;\\n\\n    _burnFee = 0;\\n    _donationFee = 0;\\n    _reflectionFee = 0;\\n  }\\n\\n  function restoreAllFee() private {\\n    _taxFee = _previousTaxFee;\\n    _liquidityFee = _previousLiquidityFee;\\n\\n    _burnFee = _previousBurnFee;\\n    _donationFee = _previousDonationFee;\\n    _reflectionFee = _previousReflectionFee;\\n  }\\n\\n  function isExcludedFromFee(address account) public view returns(bool) {\\n    return _isExcludedFromFee[account];\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) private {\\n    require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\n    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n    if(from != owner() && to != owner())\\n      require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n\\n    uint256 contractTokenBalance = balanceOf(address(this));\\n    \\n    if(contractTokenBalance >= _maxTxAmount)\\n    {\\n      contractTokenBalance = _maxTxAmount;\\n    }\\n    \\n    bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\\n    if (\\n      overMinTokenBalance &&\\n      !inSwapAndLiquify &&\\n      from != uniswapV2Pair &&\\n      swapAndLiquifyEnabled\\n    ) {\\n      contractTokenBalance = numTokensSellToAddToLiquidity;\\n      // Add liquidity\\n      swapAndLiquify(contractTokenBalance);\\n    }\\n    \\n    // Indicates if fee should be deducted from transfer\\n    bool takeFee = true;\\n    \\n    // If any account belongs to _isExcludedFromFee account then remove the fee\\n    if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\n      takeFee = false;\\n    }\\n    \\n    // Transfer amount, it will take tax, burn, liquidity fee\\n    _tokenTransfer(from,to,amount,takeFee);\\n  }\\n\\n  function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\n    // split the contract balance into halves\\n    uint256 half = contractTokenBalance.div(2);\\n    uint256 otherHalf = contractTokenBalance.sub(half);\\n\\n    // capture the contract's current ETH balance.\\n    // this is so that we can capture exactly the amount of ETH that the\\n    // swap creates, and not make the liquidity event include any ETH that\\n    // has been manually sent to the contract\\n    uint256 initialBalance = address(this).balance;\\n\\n    // swap tokens for ETH\\n    swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n\\n    // how much ETH did we just swap into?\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n    // add liquidity to uniswap\\n    addLiquidity(otherHalf, newBalance);\\n    \\n    emit SwapAndLiquify(half, newBalance, otherHalf);\\n  }\\n\\n  function swapTokensForEth(uint256 tokenAmount) private {\\n    // generate the uniswap pair path of token -> weth\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // make the swap\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0, // accept any amount of ETH\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n    // approve token transfer to cover all possible scenarios\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // add the liquidity\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n      address(this),\\n      tokenAmount,\\n      0, // slippage is unavoidable\\n      0, // slippage is unavoidable\\n      owner(),\\n      block.timestamp\\n    );\\n  }\\n\\n  //this method is responsible for taking all fee, if takeFee is true\\n  function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\n    if(!takeFee)\\n      removeAllFee();\\n    \\n    if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n      _transferFromExcluded(sender, recipient, amount);\\n    } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n      _transferToExcluded(sender, recipient, amount);\\n    } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n      _transferBothExcluded(sender, recipient, amount);\\n    } else {\\n      _transferStandard(sender, recipient, amount);\\n    }\\n    \\n    if(!takeFee)\\n      restoreAllFee();\\n  }\\n\\n  /**\\n   * Called when transfer is made\\n   */\\n  function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,, uint256 tLiquidity) = _getValues(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n\\n    (uint256 donationFee, uint256 burnFee, uint256 reflectionFee) = _getTaxBreakdown(tAmount);\\n\\n    _burn(sender, burnFee);\\n    _donate(sender, donationFee);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, reflectionFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n  function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,, uint256 tLiquidity) = _getValues(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \\n    \\n    (uint256 donationFee, uint256 burnFee, uint256 reflectionFee) = _getTaxBreakdown(tAmount);\\n    _burn(sender, burnFee);\\n    _donate(sender, donationFee);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, reflectionFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n  function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,, uint256 tLiquidity) = _getValues(tAmount);\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\n\\n    (uint256 donationFee, uint256 burnFee, uint256 reflectionFee) = _getTaxBreakdown(tAmount);\\n    _burn(sender, burnFee);\\n    _donate(sender, donationFee);\\n    _takeLiquidity(tLiquidity);\\n    _reflectFee(rFee, reflectionFee);\\n    emit Transfer(sender, recipient, tTransferAmount);\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/IBEP20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n*/\\n\\ncontract Context {\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\n  // an instance of this contract, which should be used via inheritance.\\n  constructor () internal { }\\n\\n  function _msgSender() internal view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n*/\\n\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n*/\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\"\r\n    },\r\n    \"contracts/Address.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n*/\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/IUniswap.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  function feeTo() external view returns (address);\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n  function allPairs(uint) external view returns (address pair);\\n  function allPairsLength() external view returns (uint);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n  function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n  function symbol() external pure returns (string memory);\\n  function decimals() external pure returns (uint8);\\n  function totalSupply() external view returns (uint);\\n  function balanceOf(address owner) external view returns (uint);\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n  function transfer(address to, uint value) external returns (bool);\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n      address indexed sender,\\n      uint amount0In,\\n      uint amount1In,\\n      uint amount0Out,\\n      uint amount1Out,\\n      address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n  function factory() external view returns (address);\\n  function token0() external view returns (address);\\n  function token1() external view returns (address);\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n  function price0CumulativeLast() external view returns (uint);\\n  function price1CumulativeLast() external view returns (uint);\\n  function kLast() external view returns (uint);\\n\\n  function mint(address to) external returns (uint liquidity);\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n  function skim(address to) external;\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialCharityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevCharityAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"UpdateCharityAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_donationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"donationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Gaia", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000066647eb7dad8f2a801a71254cadccd44874f69f9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}