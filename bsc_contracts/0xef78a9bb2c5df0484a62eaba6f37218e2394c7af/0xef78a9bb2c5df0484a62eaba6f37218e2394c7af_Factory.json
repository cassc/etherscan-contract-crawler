{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n \r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns(address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns(uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n   \r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n   \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns(bool);\r\n\r\n        \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n       \r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n   \r\n    function symbol() external view returns(string memory);\r\n\r\n    \r\n    function decimals() external view returns(uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address) {\r\n        return msg.sender;\r\n    }\r\n\r\n}\r\n\r\n \r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n        mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    string public _name;\r\n    string public _symbol;\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function name() public view virtual override returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n   \r\n    function symbol() public view virtual override returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view virtual override returns(uint8) {\r\n        return 18;\r\n    }\r\n\r\n   \r\n    function totalSupply() public view virtual override returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address account) public view virtual override returns(uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased cannot be below zero\"));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    \r\n   \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n}\r\n \r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n  \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n}\r\n \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n \r\n \r\n \r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    \r\n    function mul(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(int256 a, int256 b) internal pure returns(int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns(int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns(uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n \r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns(int256) {\r\n    int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns(address);\r\n    function WETH() external pure returns(address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns(uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns(uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns(uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns(uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns(uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns(uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns(uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns(uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns(uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns(uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns(uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns(uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns(uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\ncontract Coin is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    // telegram \r\n    string public _telegram;\r\n\r\n    // twitter\r\n    string public _twitter;\r\n\r\n    // website\r\n    string public _website;\r\n\r\n\r\n    // addresses\r\n    address public  devWallet;\r\n    address private marketingWallet;\r\n\r\n    // limits \r\n    uint256 private maxBuyAmount;\r\n    uint256 private maxSellAmount;   \r\n    uint256 private maxWalletAmount;\r\n \r\n    uint256 private thresholdSwapAmount;\r\n\r\n    // status flags\r\n    bool private isTrading = false;\r\n    bool public swapEnabled = false;\r\n    bool public isSwapping;\r\n\r\n\r\n    struct Fees {\r\n        uint8 buyTotalFees;\r\n        uint8 buyMarketingFee;\r\n        uint8 buyDevFee;\r\n        uint8 buyLiquidityFee;\r\n\r\n        uint8 sellTotalFees;\r\n        uint8 sellMarketingFee;\r\n        uint8 sellDevFee;\r\n        uint8 sellLiquidityFee;\r\n    }  \r\n\r\n    Fees public _fees = Fees({\r\n        buyTotalFees: 0,\r\n        buyMarketingFee: 0,\r\n        buyDevFee:0,\r\n        buyLiquidityFee: 0,\r\n\r\n        sellTotalFees: 0,\r\n        sellMarketingFee: 0,\r\n        sellDevFee:0,\r\n        sellLiquidityFee: 0\r\n    });\r\n    \r\n    \r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n    uint256 private taxTill;\r\n    // exclude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) public _isExcludedMaxWalletAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public marketPair;\r\n    \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n\r\n    constructor(\r\n        address []  memory wallets,\r\n        string [] memory tokenDatas,\r\n        uint256 [] memory Amounts,\r\n        address devWallet_,\r\n        uint8 [] memory FeeAmounts\r\n                ) ERC20(\"STC\", \"Coin\") {\r\n        // set owner\r\n        transferOwnership(wallets[0]);\r\n\r\n        // name\r\n        _name = tokenDatas[0];\r\n        _symbol = tokenDatas[1];\r\n        _telegram = tokenDatas[2];\r\n        _twitter = tokenDatas[3];\r\n        _website = tokenDatas[4];\r\n        router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        _isExcludedMaxTransactionAmount[address(router)] = true;\r\n        _isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;        \r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        _isExcludedMaxWalletAmount[owner()] = true;\r\n        _isExcludedMaxWalletAmount[address(this)] = true;\r\n        _isExcludedMaxWalletAmount[address(uniswapV2Pair)] = true;\r\n\r\n\r\n        marketPair[address(uniswapV2Pair)] = true;\r\n\r\n        approve(address(router), type(uint256).max);\r\n        uint256 totalSupply = Amounts[0] * 1e18;\r\n\r\n        maxBuyAmount = totalSupply * Amounts[1] / 100; // maxTransactionAmountTxn\r\n        maxSellAmount = totalSupply * Amounts[1] / 100; // maxTransactionAmountTxn\r\n        maxWalletAmount = totalSupply * Amounts[2] / 100; // maxWallet\r\n        thresholdSwapAmount = totalSupply * 1 / 10000; // 0.01% swap wallet\r\n\r\n        _fees.buyMarketingFee = FeeAmounts[0];\r\n        _fees.buyLiquidityFee = FeeAmounts[2];\r\n        if(FeeAmounts[4] != 0)\r\n        {\r\n            _fees.buyDevFee = 5;\r\n            _fees.sellDevFee = 5;\r\n        }else{\r\n            _fees.buyDevFee = 0;\r\n            _fees.sellDevFee = 0;\r\n        }\r\n        _fees.buyTotalFees = _fees.buyMarketingFee + _fees.buyLiquidityFee + _fees.buyDevFee;\r\n\r\n        _fees.sellMarketingFee = FeeAmounts[1];\r\n        _fees.sellLiquidityFee = FeeAmounts[3];\r\n        _fees.sellTotalFees = _fees.sellMarketingFee + _fees.sellLiquidityFee + _fees.sellDevFee;\r\n\r\n        marketingWallet = address(wallets[1]);\r\n        devWallet = address(devWallet_);\r\n        \r\n        // exclude from paying fees or having max transaction amount\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(wallets[0], totalSupply);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    // once enabled, can never be turned off\r\n    function swapTrading() external onlyOwner {\r\n        isTrading = true;\r\n        swapEnabled = true;\r\n        taxTill = block.number + 2;\r\n    }\r\n\r\n\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateThresholdSwapAmount(uint256 newAmount) external onlyOwner returns(bool){\r\n        thresholdSwapAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n\r\n    function updateMaxTxnAmount(uint256 newMaxBuy, uint256 newMaxSell) external onlyOwner {\r\n        require(((totalSupply() * newMaxBuy) / 1000) >= (totalSupply() / 100), \"maxBuyAmount must be higher than 1%\");\r\n        require(((totalSupply() * newMaxSell) / 1000) >= (totalSupply() / 100), \"maxSellAmount must be higher than 1%\");\r\n        maxBuyAmount = (totalSupply() * newMaxBuy) / 1000;\r\n        maxSellAmount = (totalSupply() * newMaxSell) / 1000;\r\n    }\r\n\r\n\r\n    function updateMaxWalletAmount(uint256 newPercentage) external onlyOwner {\r\n        require(((totalSupply() * newPercentage) / 1000) >= (totalSupply() / 100), \"Cannot set maxWallet lower than 1%\");\r\n        maxWalletAmount = (totalSupply() * newPercentage) / 1000;\r\n    }\r\n\r\n    function updateFees(uint8 _marketingFeeBuy, uint8 _liquidityFeeBuy, uint8 _marketingFeeSell, uint8 _liquidityFeeSell) external onlyOwner{\r\n        _fees.buyMarketingFee = _marketingFeeBuy;\r\n        _fees.buyLiquidityFee = _liquidityFeeBuy;\r\n        _fees.buyTotalFees = _fees.buyMarketingFee + _fees.buyLiquidityFee + _fees.buyDevFee;\r\n\r\n        _fees.sellMarketingFee = _marketingFeeSell;\r\n        _fees.sellLiquidityFee = _liquidityFeeSell;\r\n        _fees.sellTotalFees = _fees.sellMarketingFee + _fees.sellLiquidityFee + _fees.sellDevFee;\r\n        require(_fees.buyTotalFees <= 300, \"Must keep fees at 30% or less\");   \r\n        require(_fees.sellTotalFees <= 300, \"Must keep fees at 30% or less\");\r\n    }\r\n    \r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n    function excludeFromWalletLimit(address account, bool excluded) public onlyOwner {\r\n        _isExcludedMaxWalletAmount[account] = excluded;\r\n    }\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n\r\n    function setMarketPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"Must keep uniswapV2Pair\");\r\n        marketPair[pair] = value;\r\n    }\r\n\r\n\r\n    function setWallets(address _marketingWallet) external onlyOwner{\r\n        marketingWallet = _marketingWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n        \r\n    ) internal override {\r\n        \r\n        if (amount == 0) {\r\n            super._transfer(sender, recipient, 0);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            sender != owner() &&\r\n            recipient != owner() &&\r\n            !isSwapping\r\n        ) {\r\n\r\n            if (!isTrading) {\r\n                require(_isExcludedFromFees[sender] || _isExcludedFromFees[recipient], \"Trading is not active.\");\r\n            }\r\n            if (marketPair[sender] && !_isExcludedMaxTransactionAmount[recipient]) {\r\n                require(amount <= maxBuyAmount, \"buy transfer over max amount\");\r\n            } \r\n            else if (marketPair[recipient] && !_isExcludedMaxTransactionAmount[sender]) {\r\n                require(amount <= maxSellAmount, \"Sell transfer over max amount\");\r\n            }\r\n\r\n            if (!_isExcludedMaxWalletAmount[recipient]) {\r\n                require(amount + balanceOf(recipient) <= maxWalletAmount, \"Max wallet exceeded\");\r\n            }\r\n           \r\n        }\r\n \r\n        \r\n \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n \r\n        bool canSwap = contractTokenBalance >= thresholdSwapAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !isSwapping &&\r\n            marketPair[recipient] &&\r\n            !_isExcludedFromFees[sender] &&\r\n            !_isExcludedFromFees[recipient]\r\n        ) {\r\n            isSwapping = true;\r\n            swapBack();\r\n            isSwapping = false;\r\n        }\r\n \r\n        bool takeFee = !isSwapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n            takeFee = false;\r\n        }\r\n \r\n        \r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            uint256 fees = 0;\r\n            if(block.number < taxTill) {\r\n                fees = amount.mul(999).div(1000);\r\n                tokensForMarketing += (fees * 994) / 999;\r\n                tokensForDev += (fees * 5) / 999;\r\n            } else if (marketPair[recipient] && _fees.sellTotalFees > 0) {\r\n                fees = amount.mul(_fees.sellTotalFees).div(1000);\r\n                tokensForLiquidity += fees * _fees.sellLiquidityFee / _fees.sellTotalFees;\r\n                tokensForMarketing += fees * _fees.sellMarketingFee / _fees.sellTotalFees;\r\n                tokensForDev += fees * _fees.sellDevFee / _fees.sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (marketPair[sender] && _fees.buyTotalFees > 0) {\r\n                fees = amount.mul(_fees.buyTotalFees).div(1000);\r\n                tokensForLiquidity += fees * _fees.buyLiquidityFee / _fees.buyTotalFees;\r\n                tokensForMarketing += fees * _fees.buyMarketingFee / _fees.buyTotalFees;\r\n                tokensForDev += fees * _fees.buyDevFee / _fees.buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(sender, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n\r\n        }\r\n\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function addLiquidity(uint256 tAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{ value: ethAmount } (address(this), tAmount, 0, 0 , address(this), block.timestamp);\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 toSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\r\n        bool success;\r\n\r\n        if (contractTokenBalance == 0 || toSwap == 0) { return; }\r\n\r\n        if (contractTokenBalance > thresholdSwapAmount * 20) {\r\n            contractTokenBalance = thresholdSwapAmount * 20;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = contractTokenBalance * tokensForLiquidity / toSwap / 2;\r\n        uint256 amountToSwapForETH = contractTokenBalance.sub(liquidityTokens);\r\n \r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH); \r\n \r\n        uint256 newBalance = address(this).balance.sub(initialETHBalance);\r\n \r\n        uint256 ethForMarketing = newBalance.mul(tokensForMarketing).div(toSwap);\r\n        uint256 ethForDev = newBalance.mul(tokensForDev).div(toSwap);\r\n        uint256 ethForLiquidity = newBalance - (ethForMarketing + ethForDev);\r\n\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity);\r\n        }\r\n\r\n        (success,) = address(devWallet).call{ value: (address(this).balance - ethForMarketing) } (\"\");\r\n        (success,) = address(marketingWallet).call{ value: address(this).balance } (\"\");\r\n    }\r\n\r\n}\r\n\r\ncontract Factory{\r\n    address payable devWallet_;\r\n    address[] public allCoins;\r\n\r\n    constructor(address payable _devWallet) {\r\n        devWallet_ = payable(_devWallet);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n    \r\n    function createCoin(\r\n                address [] memory wallets, // owner, marketingWallet\r\n                string [] memory tokenDatas, //name, symbol, telegram, twitter, website\r\n                uint256 []  memory Amounts, //supply, maxTx, maxWallet\r\n                uint8 [] memory FeeAmounts\r\n                ) external payable returns (address) {\r\n\r\n        if(FeeAmounts[4] == 0)\r\n        {\r\n            require(msg.value == 0.15 ether, \"You should send 0.15 BNB for this method\");\r\n            devWallet_.transfer(msg.value);\r\n        }\r\n        Coin coin = new Coin(wallets, tokenDatas, Amounts, devWallet_, FeeAmounts); \r\n        address coinAddr = address(coin);\r\n        allCoins.push(coinAddr);\r\n        return coinAddr;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenDatas\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"FeeAmounts\",\"type\":\"uint8[]\"}],\"name\":\"createCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Factory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000083cf49913f33a976d37a1670e9b92acfd90213c1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66692f0a2f3088facc943630b12dba36413dd6fb370e10d6fb3d4f71f9b8a535"}