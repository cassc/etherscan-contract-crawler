{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface ISwapPair {\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n\tfunction totalSupply() external view returns (uint);\r\n\r\n\tfunction kLast() external view returns (uint);\r\n\r\n\tfunction sync() external;\r\n}\r\n\r\nlibrary Math {\r\n\tfunction min(uint x, uint y) internal pure returns (uint z) {\r\n\t\tz = x < y ? x : y;\r\n\t}\r\n\r\n\tfunction sqrt(uint y) internal pure returns (uint z) {\r\n\t\tif (y > 3) {\r\n\t\t\tz = y;\r\n\t\t\tuint x = y / 2 + 1;\r\n\t\t\twhile (x < z) {\r\n\t\t\t\tz = x;\r\n\t\t\t\tx = (y / x + x) / 2;\r\n\t\t\t}\r\n\t\t} else if (y != 0) {\r\n\t\t\tz = 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n\tfunction factory() external pure returns (address);\r\n    function WETH() external view returns (address);\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals; \r\n\r\n    uint256 public startTradeBlock;\r\n\tmapping(address => bool) public _feeWhiteList;\r\n\tmapping(address => bool) public _swapPairList;\r\n\tmapping(address => bool) public _swapRouters;\r\n\taddress public immutable _mainPair;\r\n\tISwapRouter public immutable _swapRouter;\r\n\r\n    uint256 public numTokensSellToFund = 10 * 10 ** 18;\r\n\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal; \r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address fundAddress;\r\n    address fund2Address;\r\n\r\n\r\n    bool private inSwap;\r\n\tmodifier lockTheSwap() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\r\n   \r\n\r\n\r\n    constructor(string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address RouterAddress,\r\n        address ReceiveAddress,\r\n        address FundAddress,\r\n        address Fund2Address\r\n        ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        _tTotal = Supply * 10 ** _decimals;\r\n        _balances[ReceiveAddress] = _tTotal;\r\n        emit Transfer(address(0), ReceiveAddress, _tTotal);\r\n\r\n        fundAddress = FundAddress;\r\n        fund2Address = Fund2Address;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\t\t_swapRouter = swapRouter;\r\n\t\t_allowances[address(this)][address(swapRouter)] = MAX;\r\n\t\t_swapRouters[address(swapRouter)] = true;\r\n\r\n        address ethPair;\r\n\t\tethPair = ISwapFactory(swapRouter.factory()).createPair(address(this), swapRouter.WETH());\r\n        _swapPairList[ethPair] = true;\r\n\t\t_mainPair = ethPair;\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n\t\t_feeWhiteList[address(this)] = true;\r\n\t\t_feeWhiteList[msg.sender] = true;\r\n\t\t_feeWhiteList[address(0)] = true;\r\n\t\t_feeWhiteList[DEAD] = true;\r\n\r\n        excludeHolder[DEAD] = true;\r\n        excludeHolder[0x720d612cEaF80f0f27F0a76b939CB7Cfc9CB2F10] = true;\r\n        excludeHolder[passLpAddress] = true;\r\n        \r\n\r\n        LPexcludeHolder[DEAD] = true;\r\n        LPexcludeHolder[0x720d612cEaF80f0f27F0a76b939CB7Cfc9CB2F10] = true;\r\n        LPexcludeHolder[passLpAddress] = true;\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire(msgSender == fundAddress || msgSender == fund2Address || msgSender == owner(), \"nw\");\r\n\t\t_;\r\n\t}\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\tuint256 public _rewardGas = 500000;\r\n\r\n     // lp\r\n    address[] public LPholders;\r\n\tmapping(address => uint256) public LPholderIndex;\r\n\tmapping(address => bool) public LPexcludeHolder;\r\n\r\n    function addLpHolder(address adr) private {\r\n\t\tif (0 == LPholderIndex[adr]) {\r\n\t\t\tif (0 == LPholders.length || LPholders[0] != adr) {\r\n\t\t\t\tuint256 size;\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tsize := extcodesize(adr)\r\n\t\t\t\t}\r\n\t\t\t\tif (size > 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tLPholderIndex[adr] = LPholders.length;\r\n\t\t\t\tLPholders.push(adr);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    // token\r\n    address[] public holders;\r\n\tmapping(address => uint256) public holderIndex;\r\n\tmapping(address => bool) public excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n\t\tif (0 == holderIndex[adr]) {\r\n\t\t\tif (0 == holders.length || holders[0] != adr) {\r\n\t\t\t\tuint256 size;\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tsize := extcodesize(adr)\r\n\t\t\t\t}\r\n\t\t\t\tif (size > 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tholderIndex[adr] = holders.length;\r\n\t\t\t\tholders.push(adr);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    // tokenRewards\r\n    uint256 public currentIndex;\r\n\tuint256 public RewardCondition = 0.1 ether;\r\n    uint256 public holderCondition = 1000 ether;\r\n\tuint256 public progressRewardBlock;\r\n\tuint256 public progressRewardBlockDebt = 1;\r\n    address public passLpAddress = 0x7921b16BE2b5ee65D6fA1313d35D3b922b822483;\r\n    bool public rewardTypeIsLp;\r\n\r\n\r\n\tfunction processReward(uint256 gas) private {\r\n\t\tuint256 blockNum = block.number;\r\n\r\n\t\tif (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (address(this).balance < RewardCondition) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 thisTokenTotal = _tTotal;\r\n        uint256 tokenBalance;\r\n\r\n\r\n\t\taddress shareHolder;\r\n\t\tuint256 amount;\r\n\r\n\t\tuint256 shareholderCount = holders.length;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\r\n\t\twhile (gasUsed < gas && iterations < shareholderCount) {\r\n\t\t\tif (currentIndex >= shareholderCount) {\r\n\t\t\t\tcurrentIndex = 0;\r\n\t\t\t}\r\n\t\t\tshareHolder = holders[currentIndex];\r\n\t\t\ttokenBalance = balanceOf(shareHolder);\r\n\t\t\tif (!excludeHolder[shareHolder] && tokenBalance > holderCondition) {\r\n\t\t\t\tamount = (RewardCondition * tokenBalance) / thisTokenTotal;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\tshareHolder.call{value : amount}(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgasUsed = gasUsed + (gasLeft - gasleft());\r\n\t\t\tgasLeft = gasleft();\r\n\t\t\tcurrentIndex++;\r\n\t\t\titerations++;\r\n\t\t}\r\n\t\tprogressRewardBlock = blockNum;\r\n        rewardTypeIsLp = true;\r\n\t}\r\n\r\n\r\n    // LPRewards\r\n    uint256 public LPcurrentIndex;\r\n\r\n\tfunction processLpReward(uint256 gas) private {\r\n\t\tuint256 blockNum = block.number;\r\n\r\n\t\tif (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (address(this).balance < RewardCondition) {\r\n\t\t\treturn;\r\n\t\t}\r\n        \r\n\t\tIERC20 lpToken = IERC20(_mainPair);\r\n\t\tuint lpTokenTotal = lpToken.totalSupply() - lpToken.balanceOf(passLpAddress) ;\r\n\r\n\t\taddress shareHolder;\r\n        uint256 lpBalance;\r\n\t\tuint256 amount;\r\n\r\n\t\tuint256 shareholderCount = holders.length;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\r\n\t\twhile (gasUsed < gas && iterations < shareholderCount) {\r\n\t\t\tif (LPcurrentIndex >= shareholderCount) {\r\n\t\t\t\tLPcurrentIndex = 0;\r\n\t\t\t}\r\n\t\t\tshareHolder = holders[LPcurrentIndex];\r\n\t\t\tlpBalance = lpToken.balanceOf(shareHolder);\r\n\t\t\tif (!LPexcludeHolder[shareHolder]) {\r\n\t\t\t\tamount = (RewardCondition * lpBalance) / lpTokenTotal;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\tshareHolder.call{value : amount}(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgasUsed = gasUsed + (gasLeft - gasleft());\r\n\t\t\tgasLeft = gasleft();\r\n\t\t\tLPcurrentIndex++;\r\n\t\t\titerations++;\r\n\t\t}\r\n\t\tprogressRewardBlock = blockNum;\r\n        rewardTypeIsLp = false;\r\n\t}\r\n\r\n    \r\n    address private _lastMaybeAddLPAddress;\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 balance = _balances[from];\r\n        require(balance>=amount,\"Insufficient balance\");\r\n\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n\t\tif (address(0) != lastMaybeAddLPAddress) {\r\n\t\t\t_lastMaybeAddLPAddress = address(0);\r\n\t\t\tif (IERC20(_mainPair).balanceOf(lastMaybeAddLPAddress) > 0) {\r\n\t\t\t\taddLpHolder(lastMaybeAddLPAddress);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        bool takeFee;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n\t\t\tif (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n\t\t\t\ttakeFee = true;\r\n\r\n\t\t\t\trequire(0 < startTradeBlock);\r\n\t\t\t\tif (block.number < startTradeBlock + 3) {\r\n\t\t\t\t\t_funTransfer(from, to, amount, 99);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tuint256 maxSellAmount = (balance * 9999) / 10000;\r\n\t\t\t\tif (amount > maxSellAmount) {\r\n\t\t\t\t\tamount = maxSellAmount;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n        _tokenTransfer(from, to, amount,takeFee);\r\n\r\n        if (_balances[to] >= holderCondition){\r\n            addHolder(to);\r\n        }\r\n\r\n        if (from != address(this)) {\r\n\t\t\tif (_mainPair == to) {\r\n\t\t\t\t_lastMaybeAddLPAddress = from;\r\n\t\t\t}\r\n\t\t\tif (takeFee) {\r\n                if (rewardTypeIsLp){\r\n                    processLpReward(_rewardGas);\r\n                }else{\r\n\t\t\t\t    processReward(_rewardGas);\r\n                }\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    function _funTransfer(address sender, address recipient, uint256 tAmount, uint256 fee) private {\r\n\t\t_balances[sender] -= tAmount;\r\n\t\tuint256 feeAmount = (tAmount / 100) * fee;\r\n\t\tif (feeAmount > 0) {\r\n\t\t\t_takeTransfer(sender, fundAddress, feeAmount);\r\n\t\t}\r\n\t\t_takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\t}\r\n\r\n     function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    uint256 buyDestroyFee = 10;\r\n\r\n    uint256 sellFundFee = 10;\r\n    uint256 sellLpRewardsFee = 10;\r\n    uint256 sellRewardsFee = 10;\r\n    uint256 sellFund2Fee = 20;\r\n    uint256 sellTotalFee = 50;\r\n\r\n\r\n    address private lastAirdropAddress;\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n\r\n        _balances[sender] -= tAmount;\r\n\r\n        uint256 feeAmount;\r\n        \r\n        if (takeFee){\r\n            uint256 feeForAirdrop;\r\n            uint256 _buyDestroyFee = (tAmount * buyDestroyFee) / 1000;\r\n            uint256 _sellFundFee = (tAmount * sellFundFee) / 1000;\r\n            uint256 _sellLpRewardsFee = (tAmount * sellLpRewardsFee) / 1000;\r\n            uint256 _sellRewardsFee = (tAmount * sellRewardsFee) / 1000;\r\n            uint256 _sellFund2Fee = (tAmount * sellFund2Fee) / 1000;\r\n\r\n            // buy\r\n            if (_swapPairList[sender]) {\r\n                _takeTransfer(sender, DEAD, _buyDestroyFee);\r\n                feeAmount += _buyDestroyFee;\r\n            }\r\n            // sell\r\n            else if (_swapPairList[recipient]) {\r\n                feeAmount += _sellFundFee + _sellLpRewardsFee + _sellRewardsFee + _sellFund2Fee;\r\n                _takeTransfer(sender, address(this), feeAmount);\r\n            }\r\n\r\n            // airdrop\r\n            feeForAirdrop = feeAmount / 100000;\r\n            if (feeForAirdrop > 0) {\r\n                uint256 seed = (uint160(lastAirdropAddress) |\r\n                    block.number) ^ uint160(recipient);\r\n                feeAmount += feeForAirdrop;\r\n                uint256 airdropAmount = feeForAirdrop / 3;\r\n                address airdropAddress;\r\n                for (uint256 i; i < 3; ) {\r\n                    airdropAddress = address(uint160(seed | tAmount));\r\n                    _takeTransfer(sender, airdropAddress, airdropAmount);\r\n                    unchecked {\r\n                        ++i;\r\n                        seed = seed >> 1;\r\n                    }\r\n                }\r\n                lastAirdropAddress = airdropAddress;\r\n            }\r\n            uint256 contract_balance = balanceOf(address(this));\r\n\t\t\tbool need_sell = contract_balance >= numTokensSellToFund;\r\n\t\t\tif (need_sell && !inSwap && _swapPairList[recipient]) {\r\n\t\t\t\tSwapTokenToFund(numTokensSellToFund);\r\n\t\t\t}\r\n        }\r\n        _takeTransfer(sender,recipient, tAmount - feeAmount);\r\n        }\r\n    \r\n\r\n    function SwapTokenToFund(uint256 amount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _swapRouter.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 swapBlance = address(this).balance - balanceBefore; \r\n\r\n        uint256 _sellFundFee = swapBlance * sellFundFee / sellTotalFee;\r\n        uint256 _sellFund2Fee = swapBlance * sellFund2Fee / sellTotalFee;\r\n        fundAddress.call{value : _sellFundFee}(\"\");\r\n        fund2Address.call{value : _sellFund2Fee}(\"\");\r\n    }\r\n\r\n\r\n    // -----------------\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setRewardPrams(\r\n        uint256 newRewardCondition,\r\n        uint256 newHolderCondition,\r\n        uint256 newProgressRewardBlockDebt,\r\n        address newPassLpAddress\r\n    ) external onlyWhiteList {\r\n        RewardCondition = newRewardCondition;\r\n        holderCondition = newHolderCondition;\r\n        progressRewardBlockDebt = newProgressRewardBlockDebt;\r\n        passLpAddress = newPassLpAddress;\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 newNum) external onlyWhiteList {\r\n        numTokensSellToFund = newNum;\r\n    }\r\n\r\n    function withDrawToken(address tokenAddr) external onlyWhiteList {\r\n        uint256 token_num = IERC20(tokenAddr).balanceOf(address(this));\r\n        IERC20(tokenAddr).transfer(msg.sender, token_num);\r\n    }\r\n\r\n    function withDrawEth() external onlyWhiteList {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setLPexcludeHolder(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyWhiteList {\r\n        LPexcludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setExcludeHolder(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setFundAddress(\r\n        address newfund,\r\n        address newfund2\r\n    ) external onlyWhiteList {\r\n        fundAddress = newfund;\r\n        fund2Address = newfund2;\r\n        _feeWhiteList[newfund] = true;\r\n        _feeWhiteList[newfund2] = true;\r\n    }\r\n\r\n    function setTax(\r\n        uint256 _buyDestroyFee,\r\n        uint256 _sellFundFee,\r\n        uint256 _sellLpRewardsFee,\r\n        uint256 _sellRewardsFee,\r\n        uint256 _sellFund2Fee\r\n    ) external onlyWhiteList {\r\n        buyDestroyFee = _buyDestroyFee;\r\n        sellFundFee = _sellFundFee;\r\n        sellLpRewardsFee = _sellLpRewardsFee;\r\n        sellRewardsFee = _sellRewardsFee;\r\n        sellFund2Fee = _sellFund2Fee;\r\n        sellTotalFee = sellFundFee + sellLpRewardsFee + sellRewardsFee + sellFund2Fee;\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n\r\ncontract BitradeX is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            \"BitradeX TOKEN\",\r\n            \"BTX\",\r\n            18,\r\n            100000000,\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n            0x720d612cEaF80f0f27F0a76b939CB7Cfc9CB2F10,\r\n            0x720d612cEaF80f0f27F0a76b939CB7Cfc9CB2F10,\r\n            0x43f7D1cF6Fee4cF83F34624A3E6099225399bD13\r\n        ){}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPcurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPexcludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPholderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LPholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTypeIsLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newfund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newfund2\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setLPexcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHolderCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProgressRewardBlockDebt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newPassLpAddress\",\"type\":\"address\"}],\"name\":\"setRewardPrams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyDestroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLpRewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellRewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFund2Fee\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BitradeX", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d33efba99f200d9663c1386ecd2615df1bf5259a93de46e62cd05ddf8f83d5c8"}