{"SourceCode": "// SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// BEP20 token standard interface\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Dex Factory contract interface\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// Dex Router02 contract interface\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Main token Contract\r\n\r\ncontract MYTONAVERSE is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // all private variables and functions are only for contract use\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 10 * 1e7 * 1e6; // 100 Million total supply\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"MYTONAVERSE\"; // token name\r\n    string private _symbol = \"TONA\"; // token ticker\r\n    uint8 private _decimals = 6; // token decimals\r\n\r\n    IDexRouter public dexRouter; // Dex router address\r\n    address public dexPair; // LP token address\r\n    \r\n    address payable public liquidityPool; // liquidity pool wallet\r\n\r\n    //distribution wallets\r\n    address payable public wallet1;\r\n    address payable public wallet2;\r\n    address payable public wallet3;\r\n    address payable public wallet4;\r\n    //initial holders wallet\r\n    address payable public wallet5;\r\n    address payable public wallet6;\r\n    address payable public wallet7;\r\n    address payable public wallet8;\r\n\r\n    bool public reflectionFees = true; // should be false to charge fee\r\n\r\n    // Normal sell tax fee\r\n    uint256 public _sellReflectionFee = 20; // 2% will be distributed among holder as token divideneds\r\n    uint256 public _sellWallet3Fee = 40; // 4% goes to the wallet 3\r\n    uint256 public _sellWallet4Fee = 20; // 2% goes to the wallet 4\r\n\r\n    //normal buy tax fee\r\n    uint256 public _buyReflectionFee = 10; // 1% will go to the reflection\r\n    uint256 public _buyWallet1Fee = 10; // 1% goes to the wallet 1 \r\n    uint256 public _buyWallet2Fee = 10; // 1% goes to the wallet 2\r\n\r\n\r\n    // for smart contract use\r\n    uint256 private _currentReflectionFee;\r\n    uint256 private _currentWallet13Fee;\r\n    uint256 private _currentWallet24Fee;\r\n    bool private _isBuy = false;\r\n\r\n    // constructor for initializing the contract\r\n    constructor( ) {\r\n        uint256 Distribution20 = _rTotal.div(5); //20%\r\n        uint256 Distribution40 = _rTotal.div(5).mul(2); //40%\r\n        \r\n        //distribution wallets\r\n        wallet1 = payable(0x4299bC9538dA3242815F993d94518Bd087DDb5D2);\r\n        wallet2 = payable(0x2546166e86E0c9A37C6C3A7643Aa669d5c48a08A);\r\n        wallet3 = payable(0x4299bC9538dA3242815F993d94518Bd087DDb5D2);\r\n        wallet4 = payable(0x95792Bc9eb5EDfa512A3AdB231F02111b6fA9876);\r\n\r\n        //initial holders wallet \r\n        wallet5 = payable(0x23B6c211f3934D645bCF13aCb9590396AfD73d5C);\r\n        wallet6 = payable(0x4299bC9538dA3242815F993d94518Bd087DDb5D2);\r\n        wallet7 = payable(0x95792Bc9eb5EDfa512A3AdB231F02111b6fA9876);\r\n        wallet8 = payable(0x2546166e86E0c9A37C6C3A7643Aa669d5c48a08A);\r\n        \r\n        _rOwned[wallet5] = Distribution40;\r\n        _rOwned[wallet6] = Distribution20;\r\n        _rOwned[wallet7] = Distribution20;\r\n        _rOwned[wallet8] = Distribution20;\r\n\r\n        liquidityPool = payable(0x57cEBBE620d575914fddc17eD1c5Ec382497CED6);\r\n\r\n        IDexRouter _dexRouter = IDexRouter(\r\n             0x10ED43C718714eb63d5aA57B78B54704E256024E //pancakeswap mainnet router\r\n        );\r\n        // Create a Dex pair for this new token\r\n        dexPair = IDexFactory(_dexRouter.factory()).createPair(\r\n            address(this),\r\n            _dexRouter.WETH()\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        dexRouter = _dexRouter;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), wallet5, tokenFromReflection(Distribution40));\r\n        emit Transfer(address(0), wallet6, tokenFromReflection(Distribution20));\r\n        emit Transfer(address(0), wallet7, tokenFromReflection(Distribution20));\r\n        emit Transfer(address(0), wallet8, tokenFromReflection(Distribution20));\r\n    }\r\n\r\n    // token standards by Blockchain\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address _account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return tokenFromReflection(_rOwned[_account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // public view able functions\r\n\r\n    // to check wether the address is excluded from fee or not\r\n    function isExcludedFromFee(address _account) public view returns (bool) {\r\n        return _isExcludedFromFee[_account];\r\n    }\r\n\r\n    // to check how much tokens get redistributed among holders till now\r\n    function totalHolderDistribution() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    // For manual distribution to the holders\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"BEP20: Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    //to receive BNB from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    // internal functions for contract use\r\n\r\n    function totalFeePerTx(uint256 tAmount) internal view returns (uint256) {\r\n        uint256 percentage = tAmount\r\n            .mul(\r\n                _currentReflectionFee\r\n                    .add(_currentWallet24Fee)\r\n                    .add(_currentWallet13Fee)\r\n            )\r\n            .div(1e3);\r\n        return percentage;\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        return _rTotal.div(_tTotal);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _currentReflectionFee = 0;\r\n        _currentWallet24Fee = 0;\r\n        _currentWallet13Fee = 0;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _currentReflectionFee = _sellReflectionFee;\r\n        _currentWallet24Fee = _sellWallet4Fee;\r\n        _currentWallet13Fee = _sellWallet3Fee;\r\n    }\r\n\r\n    function setBuyFee() private {\r\n        _currentReflectionFee = _buyReflectionFee;\r\n        _currentWallet24Fee = _buyWallet2Fee;\r\n        _currentWallet13Fee = _buyWallet1Fee;\r\n    }\r\n\r\n     // owner can change WalletAddress\r\n    function updateWalletAddresses(address payable _liquidityPool,address payable _wallet1Address,address payable _wallet2Address,address payable _wallet3Address,address payable _wallet4Address)\r\n        external\r\n        onlyOwner\r\n    {\r\n        liquidityPool = _liquidityPool;\r\n        wallet1  = _wallet1Address;\r\n        wallet2  = _wallet2Address;\r\n        wallet3  = _wallet3Address;\r\n        wallet4  = _wallet4Address;\r\n    }\r\n    \r\n     // owner can change router and pair address\r\n    function setRoute(IDexRouter _router, address _pair) external onlyOwner {\r\n        dexRouter = _router;\r\n        dexPair = _pair;\r\n    }\r\n    \r\n    //input 10 for 1 percent\r\n    function setWallet4Fee(uint256 _wallet4Fee) external onlyOwner {\r\n        _sellWallet4Fee = _wallet4Fee;\r\n    }\r\n\r\n    //input 10 for 1 percent    \r\n    function setWallet3Fee(uint256 _wallet3Fee) external onlyOwner {\r\n        _sellWallet3Fee = _wallet3Fee;\r\n    }\r\n\r\n    //input 10 for 1 percent    \r\n    function setWallet1Fee(uint256 _wallet1Fee) external onlyOwner{\r\n        _buyWallet1Fee = _wallet1Fee;\r\n    }\r\n\r\n    //input 10 for 1 percent    \r\n    function setWallet2Fee(uint256 _wallet2Fee) external onlyOwner{\r\n        _buyWallet2Fee = _wallet2Fee;\r\n    }\r\n\r\n    //input 10 for 1 percent    \r\n    function setBuyReflectionFee(uint256 _reflectionFee) external onlyOwner{\r\n        _buyReflectionFee = _reflectionFee;\r\n    }\r\n\r\n    //input 10 for 1 percent    \r\n    function setSellReflectionFee(uint256 _reflectionFee) external onlyOwner{\r\n        _sellReflectionFee = _reflectionFee;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // base function to transafer tokens\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"BEP20: transfer amount must be greater than zero\");\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any _account belongs to _isExcludedFromFee _account then remove the fee\r\n        if (\r\n            _isExcludedFromFee[from] ||\r\n            _isExcludedFromFee[to] ||\r\n            !reflectionFees\r\n        ) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n      removeAllFee();\r\n\r\n      if(recipient == dexPair && takeFee){\r\n        _isBuy = false;\r\n        setSellFee();\r\n      }\r\n      if(sender == dexPair && takeFee){\r\n        _isBuy = true;\r\n        setBuyFee();\r\n      }\r\n\r\n      _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    // if both sender and receiver are not excluded from reward\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(\r\n            totalFeePerTx(tAmount).mul(currentRate)\r\n        );\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeWallet24Fee(sender, tAmount, currentRate);\r\n        _takeWallet13Fee(sender, tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // take fees for wallet4\r\n    function _takeWallet24Fee(\r\n        address sender,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) internal {\r\n        uint256 tFee = tAmount.mul(_currentWallet24Fee).div(1e3);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        _rOwned[wallet4] = _rOwned[wallet4].add(rFee);\r\n\r\n        emit Transfer(sender, wallet4, tFee);\r\n    }\r\n\r\n    // take fees for market wallet\r\n    function _takeWallet13Fee(\r\n        address sender,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) internal {\r\n        uint256 tFee = tAmount.mul(_currentWallet13Fee).div(1e3);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        if(_isBuy){\r\n          _rOwned[wallet1] = _rOwned[wallet1].add(rFee);\r\n          emit Transfer(sender, wallet1, tFee);\r\n        }else{\r\n          _rOwned[wallet3] = _rOwned[wallet3].add(rFee);\r\n          emit Transfer(sender, wallet3, tFee);\r\n        }\r\n\r\n    }\r\n\r\n    // for automatic redistribution among all holders on each tx\r\n    function _reflectFee(uint256 tAmount) private {\r\n        uint256 tFee = tAmount.mul(_currentReflectionFee).div(1e3);\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyWallet1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyWallet2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellWallet3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellWallet4Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"}],\"name\":\"setBuyReflectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"}],\"name\":\"setSellReflectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet1Fee\",\"type\":\"uint256\"}],\"name\":\"setWallet1Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet2Fee\",\"type\":\"uint256\"}],\"name\":\"setWallet2Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet3Fee\",\"type\":\"uint256\"}],\"name\":\"setWallet3Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet4Fee\",\"type\":\"uint256\"}],\"name\":\"setWallet4Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolderDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_liquidityPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet1Address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet2Address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet3Address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet4Address\",\"type\":\"address\"}],\"name\":\"updateWalletAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet4\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet5\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet6\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet7\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet8\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MYTONAVERSE", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1508a7af9f7cc5a134e0433950e19e81bcc7816b991b34a5cb4a795d009eea19"}