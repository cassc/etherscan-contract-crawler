{"SourceCode": "pragma solidity >= 0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ncontract ACL_STAKING{\r\n  \r\n     using SafeMath for uint256;\r\n    IERC20 private ACL; \r\n    IERC20 private USDT;\r\n    address payable public owner;\r\n    uint256 public token_price = 18900000000000000;    //0.5 Paisa\r\n    uint public  MINIMUM_BUY = 10*1e18 ;\r\n    uint public  MAXIMUM_BUY = 100000*1e18 ;\r\n\tuint public  MINIMUM_SALE = 10*1e18 ;\r\n    uint public  MAXIMUM_SALE = 10000*1e18 ;\r\n\tuint public sale_status = 1;\r\n\r\n    event MemberPayment(address indexed  investor,uint netAmt,uint256 Withid);\r\n    event Payment(uint256 NetQty);\r\n    event Reinvestment(address indexed user,uint256 amountBuy);\r\n   \r\n    constructor(address payable ownerAddress,IERC20 _ACL,IERC20 _USDT) public\r\n    {\r\n        owner = ownerAddress;  \r\n        ACL = _ACL;\r\n        USDT=_USDT;\r\n    }\r\n    \r\n    function BuyToken(uint256 tokenQty) public payable\r\n\t{\r\n      require(tokenQty>=MINIMUM_BUY,\"Invalid minimum quatity\");\r\n      require(tokenQty<=MAXIMUM_BUY,\"Invalid maximum quatity\");\r\n      require(ACL.balanceOf(address(this))>=tokenQty,\"Low Token Balance In Contract\");\r\n      uint256 USDT_amt=(tokenQty*token_price)/1e18;   \r\n      require(USDT_amt>0,\"Invalid buy amount\");\r\n      require(USDT.balanceOf(msg.sender)>=USDT_amt,\"Low USDT Balance In Wallet\");\r\n      USDT.transferFrom(msg.sender,address(this), USDT_amt);\r\n      ACL.transfer(msg.sender , tokenQty);\r\n \r\n\t}\r\n    \r\n\tfunction sellToken(uint256 tokenQty) public payable \r\n\t{\r\n        require(sale_status>=1,\"Sale Not Allow\");\r\n        require(tokenQty>=MINIMUM_SALE,\"Invalid minimum quatity\");\r\n        require(tokenQty<=MAXIMUM_SALE,\"Invalid maximum quatity\");\r\n        require(ACL.balanceOf(msg.sender)>=tokenQty,\"Low Token Balance\");\r\n        uint USDT_amt=(tokenQty*token_price)/1e18;   \r\n        require(USDT.balanceOf(address(this))>=USDT_amt,\"Low USDT Balance In Contract\");\r\n        ACL.transferFrom(msg.sender ,address(this), tokenQty);\r\n        USDT.transfer(msg.sender ,USDT_amt);\r\n\t\t\t\r\n\t\t\t\r\n\t }\r\n      function Authsetting(uint min_buy, uint max_buy, uint min_sell,uint max_sell) public payable\r\n        {\r\n           require(msg.sender==owner,\"Only Owner\");\r\n              MINIMUM_BUY = min_buy ;\r\n              MAXIMUM_BUY = max_buy;\r\n\t\t\t  MINIMUM_SALE = min_sell ;\r\n              MAXIMUM_SALE = max_sell;\r\n \t\t\r\n        }\r\n\r\n        function evaluate(uint256 token_rate) public payable\r\n        {\r\n           require(msg.sender==owner,\"Only Owner\");\r\n           token_price=token_rate;\r\n        }\r\n\t function evaluateSwap(uint start_sale) public payable\r\n        {\r\n           require(msg.sender==owner,\"Only Owner\");\r\n            sale_status=start_sale;\r\n        }\r\n        \r\n         function getPrice() public view returns(uint256)\r\n        {\r\n              return uint256(token_price);\r\n\t\t\t\r\n        }\r\n\r\n    function withdrawLost(uint256 WithAmt) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        owner.transfer(WithAmt*1e18);\r\n    }\r\n    \r\n  \r\n\tfunction withdrawLostTokenFromBalance(uint QtyAmt,IERC20 _TOKEN) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _TOKEN.transfer(owner,(QtyAmt*1e18));\r\n\t}\r\n\r\n  function investment(uint256 _amount) external {\r\n        require(ACL.balanceOf(msg.sender) >= _amount,\"Low ACL Balance\");\r\n        require(ACL.allowance(msg.sender,address(this)) >= _amount,\"Invalid allowance \");\r\n        ACL.transferFrom(msg.sender, owner, _amount);\r\n        emit Reinvestment(msg.sender,_amount);\r\n    }\r\n\r\n     function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory WithId,IERC20 _TKN) public payable {\r\n    \tuint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            _TKN.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n\t\t\t      emit MemberPayment(_contributors[i],_balances[i],WithId[i]);\r\n        }\r\n\t\temit Payment(totalQty);\r\n        \r\n    }\r\n\r\n\t\r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_rate\",\"type\":\"uint256\"}],\"name\":\"evaluate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start_sale\",\"type\":\"uint256\"}],\"name\":\"evaluateSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min_buy\",\"type\":\"uint256\"},{\"name\":\"max_buy\",\"type\":\"uint256\"},{\"name\":\"min_sell\",\"type\":\"uint256\"},{\"name\":\"max_sell\",\"type\":\"uint256\"}],\"name\":\"Authsetting\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"totalQty\",\"type\":\"uint256\"},{\"name\":\"WithId\",\"type\":\"uint256[]\"},{\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"QtyAmt\",\"type\":\"uint256\"},{\"name\":\"_TOKEN\",\"type\":\"address\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawLost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"_ACL\",\"type\":\"address\"},{\"name\":\"_USDT\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"netAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Withid\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"}],\"name\":\"Reinvestment\",\"type\":\"event\"}]", "ContractName": "ACL_STAKING", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ce509b5e91f430ac4b7a5ae1b8626851a56910a1000000000000000000000000d932ab69d60133baeb2f2f336ec0322ff23ba1fc00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d398c6dd3a90499747c74554b6fa7b70512d088324e79913a45be9da0078c6d4"}