{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burnFrom(address to, uint256 amount) external;\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface panCakeSwapV2 {\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract HopeBTC is Ownable {\r\n    using SafeMath for uint256;\r\n    panCakeSwapV2 public router;\r\n    IERC20 public hopeBTC;\r\n\r\n    uint256 public walletFee = 30;\r\n    uint256 public userPercentage = 970;\r\n    uint256 public feeDenominator = 1000;\r\n    uint256 public userAmountPrecision = 1e36;\r\n    uint256 public transferAmountPrecision = 1e18;\r\n\r\n    uint256 public tradingTime;\r\n    uint256 private durationTrandingSeconds = 60 seconds;\r\n\r\n    address payable private fundingWallet;\r\n    address public wBTC;\r\n    address public panCakeSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    bool public trading;\r\n\r\n    mapping(address => bool) public isBot;\r\n\r\n    event TokensPurchased(address recipient, uint256 tokenAmount);\r\n    event TokenSold(address recipient, uint256 tokenAmount);\r\n\r\n    constructor(\r\n        address _hopeBTC,\r\n        address payable _fundingWallet,\r\n        address _wBTC\r\n    ) {\r\n        hopeBTC = IERC20(_hopeBTC);\r\n        fundingWallet = _fundingWallet;\r\n        router = panCakeSwapV2(panCakeSwap);\r\n        wBTC = _wBTC;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function buy() public payable {\r\n        require(trading, \"Trading not enabled yet\");\r\n        require(!isBot[msg.sender], \"User is Bot\");\r\n        updateSnippingBot(msg.sender);\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 fundingAmount = weiAmount.mul(walletFee).div(feeDenominator);\r\n        uint256 userAmount = weiAmount.mul(userPercentage).div(feeDenominator);\r\n        (bool success, ) = payable(fundingWallet).call{value: fundingAmount}(\r\n            \"\"\r\n        );\r\n        require(success, \"unable to process\");\r\n        uint256 tokenAmount = swapBnbtoToken(userAmount);\r\n        hopeBTC.mint(msg.sender, tokenAmount); // transferring tokens to buyer\r\n        emit TokensPurchased(msg.sender, tokenAmount);\r\n    }\r\n\r\n    // Calculate the tokens to be transferred\r\n    function getHopeBTCTokens(uint256 weiValue) public view returns (uint256) {\r\n        uint256 userAmount = weiValue.mul(userPercentage).div(feeDenominator);\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = wBTC;\r\n        uint256[] memory arr = router.getAmountsOut(userAmount, path);\r\n        uint256 transferAmount = arr[arr.length - 1];\r\n        return transferAmount;\r\n    }\r\n\r\n    function swapBnbtoToken(uint256 amount) internal returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = wBTC;\r\n        uint256[] memory amounts = router.swapExactETHForTokens{value: amount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300 seconds\r\n        );\r\n        uint256 recivedamount = amounts[amounts.length - 1];\r\n        return recivedamount;\r\n    }\r\n\r\n    function getwBTCBalance() public view returns (uint256) {\r\n        return IERC20(wBTC).balanceOf(address(this));\r\n    }\r\n\r\n    function sell(uint256 _amount) public {\r\n        require(trading, \"Trading not enabled yet\");\r\n        updateSnippingBot(msg.sender);\r\n        require(!isBot[msg.sender], \"User is Bot\");\r\n        hopeBTC.burnFrom(msg.sender, _amount);\r\n        uint256 EthBalanceBefore = address(this).balance;\r\n        swapTokenToBnb(_amount);\r\n        uint256 bnbBalanceAfter = address(this).balance - EthBalanceBefore;\r\n        uint256 fundingAmount = (bnbBalanceAfter * walletFee) / feeDenominator;\r\n        (bool success, ) = payable(fundingWallet).call{value: fundingAmount}(\r\n            \"\"\r\n        );\r\n        require(success, \"unable to process\");\r\n        uint256 BnbAmount = (userPercentage * bnbBalanceAfter) / feeDenominator;\r\n        (bool success1, ) = payable(_msgSender()).call{value: BnbAmount}(\"\");\r\n        require(success1, \"unable to process\");\r\n        emit TokenSold(address(this), _amount);\r\n    }\r\n\r\n    function swapTokenToBnb(uint256 wBTCAmount) internal returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = wBTC;\r\n        path[1] = router.WETH();\r\n        IERC20(wBTC).approve(panCakeSwap, wBTCAmount);\r\n        uint256[] memory amounts = router.swapExactTokensForETH(\r\n            wBTCAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300 seconds\r\n        );\r\n        uint256 recivedamount = amounts[amounts.length - 1];\r\n        return recivedamount;\r\n    }\r\n\r\n    //change HopeBTC address\r\n    function changeHopeBTCToken(address _hopeBTC) external onlyOwner {\r\n        hopeBTC = IERC20(_hopeBTC);\r\n    }\r\n\r\n    //change WTCB address\r\n    function changeWBTCToken(address _wBTC) external onlyOwner {\r\n        wBTC = _wBTC;\r\n    }\r\n\r\n    function changeRouter(address _router) external onlyOwner {\r\n        panCakeSwap = _router;\r\n    }\r\n\r\n    //funding Wallet\r\n    function changeFundingWallet(address payable _fundingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        fundingWallet = _fundingWallet;\r\n    }\r\n\r\n    function changeUserAmountPrecision(uint256 _precision) external onlyOwner {\r\n        userAmountPrecision = _precision;\r\n    }\r\n\r\n    function changeTransferAmountPrecision(uint256 _precision)\r\n        external\r\n        onlyOwner\r\n    {\r\n        transferAmountPrecision = _precision;\r\n    }\r\n\r\n    function updateSnippingBot(address user) internal {\r\n        if (block.timestamp - tradingTime <= durationTrandingSeconds) {\r\n            isBot[user] = true;\r\n        }\r\n    }\r\n\r\n    //Add or Remove the bot\r\n    function RemoveOrAddBot(address _user, bool _val) public onlyOwner {\r\n        isBot[_user] = _val;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!trading, \"Already enabled\");\r\n        trading = true;\r\n        tradingTime = block.timestamp;\r\n    }\r\n\r\n    //Function to withdraw Stuck BNB\r\n    function withdrawStuckBnb() external onlyOwner {\r\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n        require(success, \"error withdrawing Ether funds to contract owner\");\r\n    }\r\n\r\n    //Function to withdraw Stuck wBTC\r\n    function withdrawwBTC() external onlyOwner {\r\n        IERC20(wBTC).transfer(owner(), getwBTCBalance());\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hopeBTC\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_fundingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wBTC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"RemoveOrAddBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_fundingWallet\",\"type\":\"address\"}],\"name\":\"changeFundingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hopeBTC\",\"type\":\"address\"}],\"name\":\"changeHopeBTCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"changeTransferAmountPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"changeUserAmountPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wBTC\",\"type\":\"address\"}],\"name\":\"changeWBTCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"getHopeBTCTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getwBTCBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopeBTC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panCakeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract panCakeSwapV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAmountPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAmountPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawwBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HopeBTC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006ae91f692ce236b2d4aa793a87280142a73ed68300000000000000000000000069b4eee45da5d381ad480a122a06a4ca68998ebc0000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://edce889ced894922ee49f97f39109146419a2e73ce72032f027817aa7d2a150d"}