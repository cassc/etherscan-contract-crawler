{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: maxx.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\ncontract MAXXStaking is Ownable {\r\n\r\n    IERC20 public maxxToken;\r\n\r\n    IERC20 public PwrdToken;\r\n   \r\n    bool public PWRDstakingPaused = true;\r\n\r\n    address Dead = 0x000000000000000000000000000000000000dEaD;//DUH ADDRESS\r\n   \r\n    uint256 public PWRDPoolStaked = 1;//total staked Maxx\r\n\r\n    uint256 public PWRDPoolExp = block.timestamp;//expiry time of pool \r\n\r\n    uint256 public PWRDPoolTimeRemain = 0;//Remaining Time on pool\r\n\r\n    uint256 public PWRPool = 1;// current PWR balance allocation\r\n\r\n    uint256 public PWRDPoolStakers = 0;//total stakers\r\n\r\n    uint256 public TotalPWRDPaid = 0;//total paid out\r\n\r\n    uint256 public lastAction = 0;//last interaction with contract\r\n\r\n    uint256 public timeDif = 0;//diff between last action and current timestamp\r\n\r\n    uint256 public currentRwdsRate = 0 ;// set rate per token per second\r\n\r\n    address public maxxWallet;//fee reciever\r\n \r\n    uint256 public PWRDFee = 10; // 10% burned at claim\r\n\r\n    uint256 public unstakePenaltyPWRD = 15;// Unstake early fee\r\n\r\n    uint256 public amtSub = 0; //Amount to Sub\r\n\r\n\r\n\r\n \r\n\r\n   function calculateRwdsPerTknPerSec() internal {\r\n    require(PWRDPoolStaked > 0, \"Cannot divide by zero\");\r\n    calculateTimeRemain();\r\n\r\n\r\n    uint256 rawRwdsRate = (PWRPool * 1e18) / (PWRDPoolStaked * PWRDPoolTimeRemain);\r\n\r\n    currentRwdsRate = rawRwdsRate;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    //update time left in stake\r\n      function calculateTimeRemain() internal {\r\n    \r\n    PWRDPoolTimeRemain = PWRDPoolExp - block.timestamp;\r\n    }\r\n\r\n\r\n   function viewPotentialDayReturn(address user) public view returns(uint256) {\r\n    uint256 userBal = maxxToken.balanceOf(user);\r\n\r\n    uint256 rewardWei = ((((PWRPool * userBal) * 86400) * 30) / (PWRDPoolStaked + userBal));\r\n    return rewardWei;\r\n}\r\n\r\n\r\n    // update pwr balance\r\n  function subtractPool() internal {\r\n    uint256 currentBal = PWRPool;\r\n\r\n    uint256 amtToSubRaw = (PWRDPoolStaked * timeDif * currentRwdsRate);\r\n\r\n    uint256 amtToSubWei = amtToSubRaw / 1e18;\r\n\r\n\r\n    amtSub = amtToSubWei;\r\n\r\n    require(currentBal >= amtToSubWei, \"Insufficient balance for subtraction\");\r\n\r\n\r\n    PWRPool = currentBal - amtToSubWei;\r\n  }\r\n\r\n    struct StakerPWRD {\r\n        uint256 stakedMAXXPWRD;\r\n        uint256 stakedSince;\r\n        uint256 stakedTill;\r\n        uint256 PWRDlastClaim;\r\n        uint256 PWRDClaimed;\r\n        uint256 PWRDDays;\r\n        bool isStaked;\r\n    }\r\n\r\n    \r\n    mapping(address => StakerPWRD) public stakerVaultPWRD;\r\n  \r\n\r\n    constructor(address _maxxAddress, address _pwrdToken, address _maxxWallet) {\r\n        maxxToken = IERC20(_maxxAddress);\r\n        PwrdToken = IERC20(_pwrdToken);\r\n        maxxWallet = _maxxWallet;\r\n    }\r\n\r\n\r\n \r\n\r\n//PWRD STAKE\r\n    function stakePWRD(uint256 _amount, uint256 _days) public {\r\n        require(!PWRDstakingPaused, \"STAKING_IS_PAUSED\");\r\n        require( _days == 15 || _days == 30, \"INVALID_STAKING_DURATION\");\r\n        maxxToken.approve(address(this), _amount);\r\n        maxxToken.transferFrom(msg.sender, address(this), _amount);\r\n        \r\n        \r\n       \r\n       \r\n        if (_days == 15 && stakerVaultPWRD[msg.sender].isStaked == true) {\r\n            claimPWRDRewards();\r\n            stakerVaultPWRD[msg.sender].stakedMAXXPWRD += _amount;\r\n            stakerVaultPWRD[msg.sender].stakedTill = block.timestamp + 15 days;\r\n            stakerVaultPWRD[msg.sender].PWRDDays = 15;\r\n            stakerVaultPWRD[msg.sender].stakedSince = block.timestamp;\r\n        }\r\n\r\n        if (_days == 15 && stakerVaultPWRD[msg.sender].isStaked == false) {\r\n            stakerVaultPWRD[msg.sender].stakedMAXXPWRD += _amount;\r\n            stakerVaultPWRD[msg.sender].stakedTill = block.timestamp + 15 days;\r\n            stakerVaultPWRD[msg.sender].PWRDDays = 15;\r\n            PWRDPoolStakers += 1;\r\n            stakerVaultPWRD[msg.sender].isStaked = true;\r\n            stakerVaultPWRD[msg.sender].stakedSince = block.timestamp;\r\n        }\r\n\r\n        if (_days == 30 && stakerVaultPWRD[msg.sender].isStaked == true) {\r\n            claimPWRDRewards();\r\n            stakerVaultPWRD[msg.sender].stakedMAXXPWRD += _amount;\r\n            stakerVaultPWRD[msg.sender].stakedTill = block.timestamp + 30 days;\r\n            stakerVaultPWRD[msg.sender].PWRDDays = 30;\r\n            stakerVaultPWRD[msg.sender].stakedSince = block.timestamp;\r\n        }\r\n\r\n         if (_days == 30 && stakerVaultPWRD[msg.sender].isStaked == false) {\r\n            stakerVaultPWRD[msg.sender].stakedMAXXPWRD += _amount;\r\n            stakerVaultPWRD[msg.sender].stakedTill = block.timestamp + 30 days;\r\n            stakerVaultPWRD[msg.sender].PWRDDays = 30;\r\n            PWRDPoolStakers += 1;\r\n            stakerVaultPWRD[msg.sender].isStaked = true;\r\n            stakerVaultPWRD[msg.sender].stakedSince = block.timestamp;\r\n        }\r\n\r\n\r\n        timeDif = block.timestamp - lastAction;\r\n        stakerVaultPWRD[msg.sender].PWRDlastClaim = block.timestamp;\r\n        PWRDPoolStaked += _amount;\r\n        lastAction = block.timestamp;\r\n        calculateRwdsPerTknPerSec();\r\n        subtractPool();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //UNSTAKE PWRD\r\n    function unStakePWRD() public {\r\n\r\n        require(stakerVaultPWRD[msg.sender].isStaked == true, \"NOT_STAKED\");\r\n\r\n        if(stakerVaultPWRD[msg.sender].stakedTill >= block.timestamp) {\r\n            claimPWRDRewards();\r\n            uint256 stakedTokens = stakerVaultPWRD[msg.sender].stakedMAXXPWRD;\r\n            uint256 penaltyTokens = (stakedTokens * unstakePenaltyPWRD) / 100;\r\n            uint256 AfterTaxTotal = stakedTokens - penaltyTokens;\r\n            maxxToken.transfer(msg.sender, AfterTaxTotal);\r\n            maxxToken.transfer(maxxWallet, penaltyTokens);\r\n            PWRDPoolStakers -= 1; \r\n            PWRDPoolStaked -= stakerVaultPWRD[msg.sender].stakedMAXXPWRD;\r\n            stakerVaultPWRD[msg.sender].stakedMAXXPWRD = 0;\r\n            stakerVaultPWRD[msg.sender].PWRDlastClaim = 0;\r\n            stakerVaultPWRD[msg.sender].isStaked = false;\r\n            stakerVaultPWRD[msg.sender].PWRDDays = 0;\r\n            stakerVaultPWRD[msg.sender].stakedTill = 0;\r\n            stakerVaultPWRD[msg.sender].stakedSince = 0;\r\n            timeDif = block.timestamp - lastAction;\r\n            lastAction = block.timestamp;\r\n            calculateRwdsPerTknPerSec();\r\n            subtractPool();\r\n        }\r\n\r\n         else if(stakerVaultPWRD[msg.sender].stakedTill <= block.timestamp) {\r\n            claimPWRDRewards();\r\n            PWRDPoolStaked -= stakerVaultPWRD[msg.sender].stakedMAXXPWRD;\r\n            PWRDPoolStakers -= 1;\r\n            uint256 stakedTokens = stakerVaultPWRD[msg.sender].stakedMAXXPWRD;\r\n            maxxToken.transfer(msg.sender, stakedTokens);\r\n            stakerVaultPWRD[msg.sender].stakedMAXXPWRD = 0;\r\n            stakerVaultPWRD[msg.sender].PWRDlastClaim = 0;\r\n            stakerVaultPWRD[msg.sender].isStaked = false;\r\n            stakerVaultPWRD[msg.sender].PWRDDays = 0;\r\n            stakerVaultPWRD[msg.sender].stakedTill = 0;\r\n            stakerVaultPWRD[msg.sender].stakedSince = 0;\r\n             timeDif = block.timestamp - lastAction;\r\n            lastAction = block.timestamp;\r\n            calculateRwdsPerTknPerSec();\r\n            subtractPool();\r\n   \r\n        }\r\n        \r\n    }\r\n\r\n\r\n//claiming rwds\r\n    function claimPWRDRewards() public {\r\n\r\n    require(!PWRDstakingPaused, \"STAKING_IS_PAUSED\");\r\n    require(stakerVaultPWRD[msg.sender].isStaked == true, \"NOT_STAKED\");\r\n\r\n\r\n    if(stakerVaultPWRD[msg.sender].PWRDDays == 15){\r\n       \r\n        uint256 reward = (((block.timestamp -  stakerVaultPWRD[msg.sender].PWRDlastClaim) * currentRwdsRate * stakerVaultPWRD[msg.sender].stakedMAXXPWRD) * 80 / 100) / 1000000000000000000;\r\n        TotalPWRDPaid += reward;\r\n        uint256 burnAmount = (reward * PWRDFee) / 100;\r\n        PwrdToken.transfer(Dead,burnAmount);\r\n        reward -= burnAmount;\r\n        PwrdToken.transfer(msg.sender,reward);\r\n        stakerVaultPWRD[msg.sender].PWRDlastClaim = block.timestamp;\r\n        stakerVaultPWRD[msg.sender].PWRDClaimed += reward;\r\n         timeDif = block.timestamp - lastAction;\r\n            lastAction = block.timestamp;\r\n            calculateTimeRemain();\r\n            calculateRwdsPerTknPerSec();\r\n            subtractPool();\r\n    }\r\n\r\n    if(stakerVaultPWRD[msg.sender].PWRDDays == 30){\r\n       uint256 reward = ((((block.timestamp -  stakerVaultPWRD[msg.sender].PWRDlastClaim) * currentRwdsRate) * stakerVaultPWRD[msg.sender].stakedMAXXPWRD)) / 1000000000000000000;\r\n        TotalPWRDPaid += reward;\r\n        uint256 burnAmount = (reward * PWRDFee) / 100;\r\n        PwrdToken.transfer(Dead,burnAmount);\r\n        reward -= burnAmount;\r\n         PwrdToken.transfer(msg.sender,reward);\r\n        stakerVaultPWRD[msg.sender].PWRDlastClaim = block.timestamp;\r\n        stakerVaultPWRD[msg.sender].PWRDClaimed += reward;\r\n        timeDif = block.timestamp - lastAction;\r\n            lastAction = block.timestamp;\r\n            calculateRwdsPerTknPerSec();\r\n            subtractPool();\r\n    }\r\n       \r\n    }\r\n\r\n     function viewRewardsEst(address user) public view returns(uint256){\r\n       uint256 reward = ((((block.timestamp -  stakerVaultPWRD[user].PWRDlastClaim) * currentRwdsRate) * stakerVaultPWRD[user].stakedMAXXPWRD)) / 1000000000000000000;\r\n       return reward;\r\n    }\r\n\r\n\r\n    function disableFees() public onlyOwner {\r\n        PWRDFee = 0;\r\n        unstakePenaltyPWRD = 0;\r\n    }\r\n\r\n\r\n    function setFees(uint256 _PWRDFee, uint256 _penaltyPWRD) public onlyOwner{\r\n       \r\n        require(_PWRDFee <= 20, \"fee to high try again 20% max\");\r\n        require(_penaltyPWRD <= 20, \"fee to high try again 20% max\");      \r\n        PWRDFee = _PWRDFee;\r\n        unstakePenaltyPWRD = _penaltyPWRD;\r\n       \r\n    }\r\n\r\n    //Deposit PWR into contract\r\n    function DepositPWRDInWEI(uint256 amount) external onlyOwner {\r\n        PwrdToken.approve(address(this), amount);\r\n        PwrdToken.transferFrom(msg.sender,address(this),amount);\r\n        PWRPool += amount;\r\n        timeDif = block.timestamp - lastAction;\r\n        lastAction = block.timestamp;\r\n        calculateRwdsPerTknPerSec();\r\n     \r\n    }\r\n\r\n    //set pool expiry date in timestamp\r\n    function SetExpiryOnStake(uint256 blocktimestamp) external onlyOwner{\r\n        PWRDPoolExp = blocktimestamp;\r\n        timeDif = block.timestamp - lastAction;\r\n        lastAction = block.timestamp;\r\n        calculateRwdsPerTknPerSec();\r\n        \r\n    }\r\n\r\n\r\n    function setMAXXToken(address _newToken) public onlyOwner {\r\n        maxxToken = IERC20(_newToken);\r\n    }\r\n\r\n\r\n    function setMAXXWallet(address _newAddress) public onlyOwner {\r\n        maxxWallet = _newAddress;\r\n    }\r\n\r\n\r\n\r\n    function withdrawPWRorETH() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n        \r\n    }\r\n\r\n\r\n    function withdrawERC20(address _tokenAddress, uint256 _tokenAmount) public virtual onlyOwner {\r\n        IERC20(_tokenAddress).transfer(msg.sender, _tokenAmount);\r\n        PWRPool -= _tokenAmount;\r\n        timeDif = block.timestamp - lastAction;\r\n        lastAction = block.timestamp;\r\n        calculateRwdsPerTknPerSec();\r\n\r\n\r\n    }\r\n\r\n\r\n    function pausePWRDStaking(bool _state) public onlyOwner {\r\n        PWRDstakingPaused = _state;\r\n        \r\n    }\r\n\r\n\r\n    function PWRDPoolInfo() public view returns (uint256 Stakers, uint256 TokenAmt){\r\n\r\n         Stakers = PWRDPoolStakers;\r\n\r\n         TokenAmt = PWRDPoolStaked;\r\n   \r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maxxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pwrdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maxxWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositPWRDInWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDPoolExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Stakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDPoolStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDPoolStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDPoolTimeRemain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRDstakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PWRPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PwrdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocktimestamp\",\"type\":\"uint256\"}],\"name\":\"SetExpiryOnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalPWRDPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amtSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPWRDRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRwdsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxxToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pausePWRDStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PWRDFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyPWRD\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setMAXXToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setMAXXWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stakePWRD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerVaultPWRD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedMAXXPWRD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PWRDlastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PWRDClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PWRDDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDif\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakePWRD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakePenaltyPWRD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewPotentialDayReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewRewardsEst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPWRorETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAXXStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e61c7fb137765e7cfcc4399d2d7d5bc1838d6b1000000000000000000000000467833bad9eb455229e118af9a12f3c579c7f11c0000000000000000000000001ca6021cfcb5868b4e7aed5d0b818766ad4969c5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce900120c9c783ddad718876b601607f7d29b83b72250dc82c0ea86e012feff4"}