{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BettingGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BettingGame is Ownable {\\n    address[5] public players;\\n    uint256 public totalBet;\\n    uint256[5] public bets;\\n    uint256 public minBet = 0.01 ether;\\n    uint256 public maxBet = 2 ether;\\n    uint8 public playersCount = 0;\\n    uint256 public gameID = 0;\\n    uint256 public houseEdge = 15;  // \u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\\n\\n    // Events\\n    event PlacedBet(address indexed player, uint256 amount, address[5] currentPlayers, uint256[5] currentBets, uint256 currentGameID);\\n    event PrizeDistributed(address indexed winner, uint256 winnerIndex, uint256 amountWon, uint256 houseEarnings, address[5] playersInGame, uint256[5] betsInGame, uint256 gameID);\\n\\n    constructor() payable {}\\n\\n    function placeBet() external payable {\\n        require(playersCount < 5, \\\"Max players reached\\\");\\n        require(msg.value >= getMinBet(), \\\"Bet amount must be greater than or equal to the minimum bet amount.\\\");\\n        require(msg.value <= getMaxBet(), \\\"Bet amount exceeds the maximum bet amount.\\\");\\n\\n        players[playersCount] = msg.sender;\\n        bets[playersCount] = msg.value;\\n        totalBet += msg.value;\\n        playersCount++;\\n\\n        emit PlacedBet(msg.sender, msg.value, players, bets, gameID);\\n\\n        if(playersCount == 5) {\\n            distributePrizes();\\n        }\\n    }\\n\\n    function distributePrizes() private {\\n        uint256 randomNumber = random() % totalBet;\\n        uint256 currentSum = 0;\\n        uint8 winnerIndex = 0;\\n        address winner;\\n        uint256 losersTotalBet = 0;\\n\\n        for (uint8 i = 0; i < 5; i++) {\\n            currentSum += bets[i];\\n            if (randomNumber < currentSum) {\\n                winner = players[i];\\n                winnerIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Calculate total bet of losers\\n        for (uint8 j = 0; j < 5; j++) {\\n            if (j != winnerIndex) {\\n                losersTotalBet += bets[j];\\n            }\\n        }\\n\\n        uint256 houseEarnings = (losersTotalBet * houseEdge) / 100;\\n        uint256 prize = totalBet - houseEarnings;\\n\\n        (bool sent, ) = winner.call{value: prize}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emit PrizeDistributed(winner, winnerIndex, prize, houseEarnings, players, bets, gameID);\\n        resetGame();\\n    }\\n\\n    function random() private view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao)));\\n    }\\n\\n    function resetGame() private {\\n        for (uint8 i = 0; i < 5; i++) {\\n            players[i] = address(0);\\n            bets[i] = 0;\\n        }\\n        playersCount = 0;\\n        totalBet = 0;\\n        gameID++;\\n    }\\n\\n    function updateBetLimits(uint256 _minBet, uint256 _maxBet) external onlyOwner {\\n        require(_minBet < _maxBet, \\\"Invalid bet limits\\\");\\n        minBet = _minBet;\\n        maxBet = _maxBet;\\n    }\\n\\n    function updateHouseEdge(uint256 _houseEdge) external onlyOwner {\\n        require(_houseEdge <= 100, \\\"Invalid house edge percentage\\\");\\n        houseEdge = _houseEdge;\\n    }\\n\\n    function getPlayers() public view returns (address[5] memory) {\\n        return players;\\n    }\\n\\n    function getBets() public view returns (uint256[5] memory) {\\n        return bets;\\n    }\\n\\n\\n    function withdraw(uint256 amount) external onlyOwner {\\n        uint256 toTransfer = amount;\\n\\n        if (amount == 0) {\\n            toTransfer = address(this).balance;\\n        } else {\\n            require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        }\\n\\n        payable(msg.sender).transfer(toTransfer);\\n    }\\n\\n    function deposit() external payable onlyOwner {\\n        require(msg.value > 0, \\\"Invalid deposit amount\\\");\\n    }\\n\\n    // Function to get the minimum bet amount\\n    function getMinBet() public view returns (uint256) {\\n        return minBet;\\n    }\\n\\n    // Function to get the maximum bet amount (considering the contract balance)\\n    function getMaxBet() public view returns (uint256) {\\n        return maxBet;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[5]\",\"name\":\"currentPlayers\",\"type\":\"address[5]\"},{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"currentBets\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentGameID\",\"type\":\"uint256\"}],\"name\":\"PlacedBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"houseEarnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[5]\",\"name\":\"playersInGame\",\"type\":\"address[5]\"},{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"betsInGame\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"PrizeDistributed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBets\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseEdge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"updateBetLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_houseEdge\",\"type\":\"uint256\"}],\"name\":\"updateHouseEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BettingGame", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}