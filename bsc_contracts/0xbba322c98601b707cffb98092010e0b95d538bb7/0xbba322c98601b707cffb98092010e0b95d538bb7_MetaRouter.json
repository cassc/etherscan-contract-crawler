{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/synth-core/metarouter/MetaRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// uni -> stable -> uni scheme\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MetaRouteStructs.sol\\\";\\nimport \\\"./MetaRouterGateway.sol\\\";\\nimport \\\"../../utils/RevertMessageParser.sol\\\";\\n\\n/**\\n * @title MetaRouterV3\\n * @notice Users must give approve on their tokens to `MetaRoutetGateway` contract,\\n * not to `MetaRouter` contract.\\n */\\ncontract MetaRouter is Context {\\n    MetaRouterGateway public immutable metaRouterGateway;\\n\\n    constructor() {\\n        metaRouterGateway = new MetaRouterGateway(address(this));\\n    }\\n\\n    /**\\n     * @notice Method that starts the Meta Routing\\n     * @dev external + internal swap for burn scheme, only external for synth scheme\\n     * @dev calls the next method on the other side\\n     * @param _metarouteTransaction metaRoute offchain transaction data\\n     */\\n    function metaRoute(\\n        MetaRouteStructs.MetaRouteTransaction calldata _metarouteTransaction\\n    ) external payable {\\n        uint256 approvedTokensLength = _metarouteTransaction.approvedTokens.length;\\n\\n        if (!_metarouteTransaction.nativeIn) {\\n            metaRouterGateway.claimTokens(\\n                _metarouteTransaction.approvedTokens[0],\\n                _msgSender(),\\n                _metarouteTransaction.amount\\n            );\\n        }\\n\\n        uint256 secondSwapAmountIn = _metarouteTransaction.amount;\\n        if (_metarouteTransaction.firstSwapCalldata.length != 0) {\\n            if (!_metarouteTransaction.nativeIn) {\\n                _lazyApprove(\\n                    _metarouteTransaction.approvedTokens[0],\\n                    _metarouteTransaction.firstDexRouter,\\n                    _metarouteTransaction.amount\\n                );\\n            }\\n\\n            require(\\n                _metarouteTransaction.firstDexRouter != address(metaRouterGateway),\\n                \\\"MetaRouter: invalid first router\\\"\\n            );\\n\\n            {\\n                uint256 size;\\n                address toCheck = _metarouteTransaction.firstDexRouter;\\n\\n                assembly {\\n                    size := extcodesize(toCheck)\\n                }\\n\\n                require(size != 0, \\\"MetaRouter: call for a non-contract account\\\");\\n            }\\n\\n            (bool firstSwapSuccess, bytes memory swapData) = _metarouteTransaction.firstDexRouter.call{value: msg.value}(\\n                _metarouteTransaction.firstSwapCalldata\\n            );\\n\\n            if (!firstSwapSuccess) {\\n                revert(RevertMessageParser.getRevertMessage(swapData, \\\"MetaRouter: first swap failed\\\"));\\n            }\\n\\n            secondSwapAmountIn = IERC20(_metarouteTransaction.approvedTokens[1]).balanceOf(address(this));\\n        }\\n\\n        uint256 finalSwapAmountIn = secondSwapAmountIn;\\n        if (_metarouteTransaction.secondSwapCalldata.length != 0) {\\n            bytes memory secondSwapCalldata = _metarouteTransaction.secondSwapCalldata;\\n\\n            assembly {\\n                mstore(add(secondSwapCalldata, 36), secondSwapAmountIn)\\n            }\\n\\n            _lazyApprove(\\n                _metarouteTransaction.approvedTokens[approvedTokensLength - 2],\\n                _metarouteTransaction.secondDexRouter,\\n                secondSwapAmountIn\\n            );\\n\\n            require(\\n                _metarouteTransaction.secondDexRouter != address(metaRouterGateway),\\n                \\\"MetaRouter: invalid second router\\\"\\n            );\\n\\n            {\\n                uint256 size;\\n                address toCheck = _metarouteTransaction.secondDexRouter;\\n\\n                assembly {\\n                    size := extcodesize(toCheck)\\n                }\\n\\n                require(size != 0, \\\"MetaRouter: call for a non-contract account\\\");\\n            }\\n\\n            (bool secondSwapSuccess, bytes memory swapData) = _metarouteTransaction.secondDexRouter.call(secondSwapCalldata);\\n\\n            if (!secondSwapSuccess) {\\n                revert(RevertMessageParser.getRevertMessage(swapData, \\\"MetaRouter: second swap failed\\\"));\\n            }\\n\\n            finalSwapAmountIn = IERC20(\\n                _metarouteTransaction.approvedTokens[approvedTokensLength - 1]\\n            ).balanceOf(address(this));\\n        }\\n\\n        _lazyApprove(\\n            _metarouteTransaction.approvedTokens[approvedTokensLength - 1],\\n            _metarouteTransaction.relayRecipient,\\n            finalSwapAmountIn\\n        );\\n\\n        bytes memory otherSideCalldata = _metarouteTransaction.otherSideCalldata;\\n        assembly {\\n            mstore(add(otherSideCalldata, 100), finalSwapAmountIn)\\n        }\\n\\n        require(\\n            _metarouteTransaction.relayRecipient != address(metaRouterGateway),\\n            \\\"MetaRouter: invalid recipient\\\"\\n        );\\n\\n        {\\n            uint256 size;\\n            address toCheck = _metarouteTransaction.relayRecipient;\\n\\n            assembly {\\n                size := extcodesize(toCheck)\\n            }\\n\\n            require(size != 0, \\\"MetaRouter: call for a non-contract account\\\");\\n        }\\n\\n        (bool otherSideCallSuccess, bytes memory data) = _metarouteTransaction.relayRecipient.call(otherSideCalldata);\\n\\n        if (!otherSideCallSuccess) {\\n            revert(RevertMessageParser.getRevertMessage(data, \\\"MetaRouter: other side call failed\\\"));\\n        }\\n    }\\n\\n    /**\\n     * @notice Implements an external call on some contract\\n     * @dev called by Portal in metaUnsynthesize() method\\n     * @param _token address of token\\n     * @param _amount amount of _token\\n     * @param _receiveSide contract on which call will take place\\n     * @param _calldata encoded method to call\\n     * @param _offset shift to patch the amount to calldata\\n     */\\n    function externalCall(\\n        address _token,\\n        uint256 _amount,\\n        address _receiveSide,\\n        bytes calldata _calldata,\\n        uint256 _offset\\n    ) external {\\n        (bool success, bytes memory data) = _externalCall(_token, _amount, _receiveSide, _calldata, _offset);\\n\\n        if (!success) {\\n            revert(RevertMessageParser.getRevertMessage(data, \\\"MetaRouter: external call failed\\\"));\\n        }\\n    }\\n\\n    function returnSwap(\\n        address _token,\\n        uint256 _amount,\\n        address _router,\\n        bytes calldata _swapCalldata,\\n        address _burnToken,\\n        address _synthesis,\\n        bytes calldata _burnCalldata\\n    ) external {\\n        (bool success, bytes memory data) = _externalCall(_token, _amount, _router, _swapCalldata, 36);\\n\\n        if (!success) {\\n            revert(RevertMessageParser.getRevertMessage(data, \\\"MetaRouterV2: internal swap failed\\\"));\\n        }\\n\\n        uint256 internalSwapAmountOut = IERC20(_burnToken).balanceOf(address(this));\\n\\n        bytes memory burnCalldata = _burnCalldata;\\n        assembly {\\n            mstore(add(burnCalldata, 100), internalSwapAmountOut)\\n        }\\n\\n        require(\\n            _synthesis != address(metaRouterGateway),\\n            \\\"MetaRouterV2: invalid recipient\\\"\\n        );\\n\\n        {\\n            uint256 size;\\n            address toCheck = _synthesis;\\n\\n            assembly {\\n                size := extcodesize(toCheck)\\n            }\\n\\n            require(size != 0, \\\"MetaRouter: call for a non-contract account\\\");\\n        }\\n\\n        (bool otherSideCallSuccess, bytes memory burnData) = _synthesis.call(burnCalldata);\\n\\n        if (!otherSideCallSuccess) {\\n            revert(RevertMessageParser.getRevertMessage(burnData, \\\"MetaRouterV2: revertSynthesizeRequest call failed\\\"));\\n        }\\n    }\\n\\n    /**\\n     * @notice Implements an internal swap on stable router and final method call\\n     * @dev called by Synthesis in metaMint() method\\n     * @param _metaMintTransaction metaMint offchain transaction data\\n     */\\n    function metaMintSwap(\\n        MetaRouteStructs.MetaMintTransaction calldata _metaMintTransaction\\n    ) external {\\n        address finalCallToken = _metaMintTransaction.swapTokens[0];\\n        if (_metaMintTransaction.secondSwapCalldata.length != 0) {\\n            // internal swap\\n            (bool internalSwapSuccess, bytes memory internalSwapData) = _externalCall(\\n                _metaMintTransaction.swapTokens[0],\\n                _metaMintTransaction.amount,\\n                _metaMintTransaction.secondDexRouter,\\n                _metaMintTransaction.secondSwapCalldata,\\n                36\\n            );\\n\\n            if (!internalSwapSuccess) {\\n                revert(RevertMessageParser.getRevertMessage(internalSwapData, \\\"MetaRouter: internal swap failed\\\"));\\n            }\\n            finalCallToken = _metaMintTransaction.swapTokens[1];\\n        }\\n        if (_metaMintTransaction.finalCalldata.length != 0) {\\n            uint256 finalAmountIn = IERC20(finalCallToken).balanceOf(address(this));\\n            // external call\\n            (bool finalSuccess, bytes memory finalData) = _externalCall(\\n                finalCallToken,\\n                finalAmountIn,\\n                _metaMintTransaction.finalReceiveSide,\\n                _metaMintTransaction.finalCalldata,\\n                _metaMintTransaction.finalOffset\\n            );\\n\\n            if (!finalSuccess) {\\n                revert(RevertMessageParser.getRevertMessage(finalData, \\\"MetaRouter: final call failed\\\"));\\n            }\\n        }\\n\\n        uint256 amountOut = IERC20(_metaMintTransaction.swapTokens[_metaMintTransaction.swapTokens.length - 1]).balanceOf(address(this));\\n\\n        if (amountOut != 0) {\\n            TransferHelper.safeTransfer(\\n                _metaMintTransaction.swapTokens[_metaMintTransaction.swapTokens.length - 1],\\n                _metaMintTransaction.to,\\n                amountOut\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Implements call of some operation with token\\n     * @dev Internal function used in metaMintSwap() and externalCall()\\n     * @param _token token address\\n     * @param _amount amount of _token\\n     * @param _receiveSide address of contract on which method will be called\\n     * @param _calldata encoded method call\\n     * @param _offset shift to patch the _amount to calldata\\n     */\\n    function _externalCall(\\n        address _token,\\n        uint256 _amount,\\n        address _receiveSide,\\n        bytes memory _calldata,\\n        uint256 _offset\\n    ) internal returns (bool success, bytes memory data) {\\n        require(_receiveSide != address(metaRouterGateway), \\\"MetaRouter: invalid receiveSide\\\");\\n\\n        _lazyApprove(_token, _receiveSide, _amount);\\n\\n        assembly {\\n            mstore(add(_calldata, _offset), _amount)\\n        }\\n\\n        {\\n            uint256 size;\\n            address toCheck = _receiveSide;\\n\\n            assembly {\\n                size := extcodesize(toCheck)\\n            }\\n\\n            require(size != 0, \\\"MetaRouter: call for a non-contract account\\\");\\n        }\\n\\n        (success, data) = _receiveSide.call(_calldata);\\n    }\\n\\n    /**\\n     * @notice Implements approve\\n     * @dev Internal function used to approve the token spending\\n     * @param _token token address\\n     * @param _to address to approve\\n     * @param _amount amount for which approve will be given\\n     */\\n    function _lazyApprove(address _token, address _to, uint256 _amount) internal {\\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\\n            TransferHelper.safeApprove(_token, _to, type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/synth-core/metarouter/MetaRouteStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary MetaRouteStructs {\\n    struct MetaBurnTransaction {\\n        uint256 stableBridgingFee;\\n        uint256 amount;\\n        address syntCaller;\\n        address finalReceiveSide;\\n        address sToken;\\n        bytes finalCallData;\\n        uint256 finalOffset;\\n        address chain2address;\\n        address receiveSide;\\n        address oppositeBridge;\\n        address revertableAddress;\\n        uint256 chainID;\\n        bytes32 clientID;\\n    }\\n\\n    struct MetaMintTransaction {\\n        uint256 stableBridgingFee;\\n        uint256 amount;\\n        bytes32 externalID;\\n        address tokenReal;\\n        uint256 chainID;\\n        address to;\\n        address[] swapTokens;\\n        address secondDexRouter;\\n        bytes secondSwapCalldata;\\n        address finalReceiveSide;\\n        bytes finalCalldata;\\n        uint256 finalOffset;\\n    }\\n\\n    struct MetaRouteTransaction {\\n        bytes firstSwapCalldata;\\n        bytes secondSwapCalldata;\\n        address[] approvedTokens;\\n        address firstDexRouter;\\n        address secondDexRouter;\\n        uint256 amount;\\n        bool nativeIn;\\n        address relayRecipient;\\n        bytes otherSideCalldata;\\n    }\\n\\n    struct MetaSynthesizeTransaction {\\n        uint256 stableBridgingFee;\\n        uint256 amount;\\n        address rtoken;\\n        address chain2address;\\n        address receiveSide;\\n        address oppositeBridge;\\n        address syntCaller;\\n        uint256 chainID;\\n        address[] swapTokens;\\n        address secondDexRouter;\\n        bytes secondSwapCalldata;\\n        address finalReceiveSide;\\n        bytes finalCalldata;\\n        uint256 finalOffset;\\n        address revertableAddress;\\n        bytes32 clientID;\\n    }\\n\\n    struct MetaRevertTransaction {\\n        uint256 stableBridgingFee;\\n        bytes32 internalID;\\n        address receiveSide;\\n        address managerChainBridge;\\n        address sourceChainBridge;\\n        uint256 managerChainId;\\n        uint256 sourceChainId;\\n        address router;\\n        bytes swapCalldata;\\n        address sourceChainSynthesis;\\n        address burnToken;\\n        bytes burnCalldata;\\n        bytes32 clientID;\\n    }\\n}\"\r\n    },\r\n    \"contracts/synth-core/metarouter/MetaRouterGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\n/**\\n * @title MetaRouterGateway\\n * @notice During the `metaRoute` transaction `MetaRouter` (only) claims user's tokens\\n * from `MetaRoutetGateway` contract and then operates with them.\\n */\\ncontract MetaRouterGateway {\\n    address public immutable metaRouter;\\n\\n    modifier onlyMetarouter() {\\n        require(metaRouter == msg.sender, \\\"Symb: caller is not the metarouter\\\");\\n        _;\\n    }\\n\\n    constructor(address _metaRouter) {\\n        metaRouter = _metaRouter;\\n    }\\n\\n    function claimTokens(\\n        address _token,\\n        address _from,\\n        uint256 _amount\\n    ) external onlyMetarouter {\\n        TransferHelper.safeTransferFrom(_token, _from, metaRouter, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevertMessageParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary RevertMessageParser {\\n    function getRevertMessage(bytes memory _data, string memory _defaultMessage) internal pure returns (string memory) {\\n        // If the _data length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_data.length < 68) return _defaultMessage;\\n\\n        assembly {\\n            // Slice the sighash\\n            _data := add(_data, 0x04)\\n        }\\n        return abi.decode(_data, (string));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"externalCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"externalID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenReal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"secondDexRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"secondSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"finalReceiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"finalCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"finalOffset\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaRouteStructs.MetaMintTransaction\",\"name\":\"_metaMintTransaction\",\"type\":\"tuple\"}],\"name\":\"metaMintSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"firstSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"secondSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"approvedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"firstDexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondDexRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nativeIn\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"relayRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"otherSideCalldata\",\"type\":\"bytes\"}],\"internalType\":\"struct MetaRouteStructs.MetaRouteTransaction\",\"name\":\"_metarouteTransaction\",\"type\":\"tuple\"}],\"name\":\"metaRoute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaRouterGateway\",\"outputs\":[{\"internalType\":\"contract MetaRouterGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_burnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthesis\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_burnCalldata\",\"type\":\"bytes\"}],\"name\":\"returnSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}