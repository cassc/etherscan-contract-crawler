{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n    function mint(address recipient, uint256 amount) external;\r\n}\r\n\r\ncontract PolanixMain {\r\n    mapping (address => User) public users;\r\n    mapping (uint => address) public userIdsAddress;\r\n    mapping (uint => Pump) public pumps;\r\n    mapping (address => uint) public usersActivePumps;\r\n    mapping (uint => Exchange) public exchanges;\r\n    mapping (address => uint) public lastExchangedAt;\r\n    mapping (address => uint) public exchangesAmount;\r\n    mapping (uint8 => address) public feeAddress;\r\n    mapping (uint8 => uint) public referralsDeposit;\r\n    mapping (uint8 => uint) public referralsClaim;\r\n    mapping (uint8 => uint) public percentages;\r\n    mapping (address => Allowed) public allowedExchangers;\r\n\r\n    address public ownerAddress;\r\n    address public tokenAddress;\r\n\r\n    uint public nextUserId;\r\n    uint public nextPumpId;\r\n    uint public nextExchangeId;\r\n    uint public usersCount;\r\n    uint public tokenPrice;\r\n    uint public tokenPriceAdd;\r\n    uint public maxPumpAmount;\r\n    uint public minPumpAmount;\r\n    uint public minReinvestAmount;\r\n    uint public pumpPeriod;\r\n    uint public pumpsCount;\r\n    uint public depositsCount;\r\n    uint public minExchangePercent;\r\n    uint public maxExchangePercent;\r\n    uint8 public activeReferralLines;\r\n    uint8 public minReferralLines;\r\n    uint public feePercent1;\r\n    uint public feePercent2;\r\n    uint public feePercent3;\r\n    uint public feePercent4;\r\n    uint public feePercent5;\r\n    uint public feePercent6;\r\n\r\n    event UserAdded(address indexed user, uint indexed userId, address indexed referral, uint createdAt);\r\n    event PumpCreated(address indexed user, uint indexed pumpId, uint amount, uint dailyPercent, uint createdAt);\r\n    event ReferralRewardTransferred(address indexed user, address indexed referral, uint indexed pumpId, uint8 line, uint amount, uint amountReward, bool deposited);\r\n    event PumpRewardTransferred(address indexed user, uint indexed pumpId, uint dailyPercent, uint daysReward, uint amountReward, uint withdrawnAt);\r\n    event PumpDeposited(address indexed user, uint indexed pumpId, uint dailyPercent, uint amount, uint amountDeposited, uint reinvestCount, uint amountExchangeDeposited, uint amountExchangeLimit, uint amountReinvested, bool tokens);\r\n    event ExchangeTransferred(address indexed user, uint indexed exchangeId, uint price, uint amountReceived, uint amountSent, uint amountReturn, uint exchangeLimit, uint userExchangedAmount, uint exchangedAt, bool timer);\r\n    event ExchangeContractsTransferred(address indexed user, uint price, uint amountReceived, uint amountSent, uint exchangeLimit, uint contractExchangedAmount, uint exchangedAt);\r\n    event UserReferralEarned(address indexed user, uint amount, uint amountEarnings, uint amountEarningsTokens, uint amountExchangesTokens, bool tokens, bool fee);\r\n    event UpdatedUint(uint8 indexed id, uint value, uint updated);\r\n    event UpdatedAddress(uint8 indexed id, address value, uint updated);\r\n\r\n    struct User {\r\n        uint id;\r\n        address referral;\r\n        uint referralEarnings; //BNB\r\n        uint referralEarningsTokens; //in BNB\r\n        uint referralExchangesTokens; //in BNB\r\n        uint createdAt;\r\n    }\r\n\r\n    struct Pump {\r\n        uint id;\r\n        address user;\r\n        uint amountDeposited; //BNB\r\n        uint amountWithdrawn; //TOKEN\r\n        uint amountExchanges; //Exchanges BNB\r\n        uint reinvestCount;\r\n        uint amountExchangeDeposited;\r\n        uint amountExchangeLimit;\r\n        uint amountReinvested; //Reinvest BNB\r\n        uint dailyPercent;\r\n        uint withdrawnDaysCount;\r\n        uint createdAt;\r\n    }\r\n\r\n    struct Exchange {\r\n        uint id;\r\n        address user;\r\n        uint price;\r\n        uint amountReceived; //TOKEN\r\n        uint amountSent; //BNB\r\n        uint exchangedAt;\r\n    }\r\n\r\n    struct Allowed {\r\n        uint limit;\r\n        uint exchanged;\r\n        bool allowed;\r\n    }\r\n\r\n    constructor() {\r\n        nextUserId = 1;\r\n        nextPumpId = 1;\r\n        nextExchangeId = 1;\r\n        usersCount = 0;\r\n        tokenPrice = 1e16; // 0.01 BNB\r\n        tokenPriceAdd = 5 * 1e13; // 5 * 1e13 - 0.00005 BNB\r\n        maxPumpAmount = 15 * 1e18; // 15 BNB\r\n        minPumpAmount = 15 * 1e16; // 0.15 BNB\r\n        minReinvestAmount = 1e16; // 0.01 BNB\r\n        pumpPeriod = 1 days;\r\n        pumpsCount = 0;\r\n        depositsCount = 0;\r\n        minExchangePercent = 10; // 0% - 30%\r\n        maxExchangePercent = 30; // 30% - 100%\r\n        activeReferralLines = 10; // 10 lines\r\n        minReferralLines = 2; // 2 lines\r\n        feePercent1 = 1000; // 10%\r\n        feePercent2 = 1000; // 10%\r\n        feePercent3 = 500; // 5%\r\n        feePercent4 = 250; // 2.5%\r\n        feePercent5 = 250; // 2.5%\r\n        feePercent6 = 250; // 2.5%\r\n\r\n        referralsDeposit[1] = 1500; //15%\r\n        referralsDeposit[2] = 700; //7%\r\n        referralsDeposit[3] = 300; //3%\r\n        referralsDeposit[4] = 200; //2%\r\n        referralsDeposit[5] = 100; //1%\r\n        referralsDeposit[6] = 50; //0.5%\r\n        referralsDeposit[7] = 25; //0.25%\r\n\r\n        referralsClaim[1] = 200; //2%\r\n        referralsClaim[2] = 100; //1%\r\n        referralsClaim[3] = 50; //0.5%\r\n        referralsClaim[4] = 50; //0.5%\r\n        referralsClaim[5] = 50; //0.5%\r\n        referralsClaim[6] = 25; //0.25%\r\n        referralsClaim[7] = 25; //0.25%\r\n\r\n        percentages[1] = 50; //0.5%\r\n        percentages[2] = 75; //0.75%\r\n        percentages[3] = 100; //1%\r\n        percentages[4] = 125; //1.25%\r\n        percentages[5] = 150; //1.5%\r\n\r\n        ownerAddress = msg.sender;\r\n        tokenAddress = address(0xB435d5ED9B819d5770452876256Eb960C4d4E20b);\r\n\r\n        feeAddress[1] = address(0xf63475eE64a5A62C254D6a3E3cE58CE840837Bf5); // 10%\r\n        feeAddress[2] = address(0x91F0C67966592Ad4BD07d3a5D2872d88FD721e35); // 10%\r\n        feeAddress[3] = address(ownerAddress); //exchange fee\r\n        feeAddress[4] = address(0x192653fB7bDDe176716f89B833099024Ed8276f4); //claim fee\r\n        feeAddress[5] = address(0x3395D5A58F5527E4b0fb0002B30b7d3bd2454EF4); //claim fee\r\n        feeAddress[6] = address(0); //leaders\r\n\r\n        User memory user1 = User(nextUserId, address(0), 0, 0, 0, block.timestamp);\r\n        users[ownerAddress] = user1;\r\n        userIdsAddress[nextUserId] = ownerAddress;\r\n        emit UserAdded(ownerAddress, user1.id, user1.referral, user1.createdAt);\r\n\r\n        usersCount++;\r\n        nextUserId++;\r\n    }\r\n\r\n     modifier onlyOwner() { \r\n        require(msg.sender == ownerAddress, \"only owner\"); \r\n        _; \r\n    }\r\n\r\n    //check on smart contract\r\n    function isContract(address minter) internal view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(minter)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    //check transfer on smart contract\r\n    function _transferBnb(address wallet, uint amount) internal returns(bool) {\r\n        if (wallet == address(0) || amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (isContract(wallet)) {\r\n            (bool sent, ) = address(wallet).call{value:amount}(\"\");\r\n            return sent;\r\n        } else {\r\n            payable(wallet).transfer(amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function balanceTokens(address token) public view returns (uint balance){\r\n        if (token == address(0)) {\r\n            return address(this).balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawTokens(address token, uint value) public {\r\n        _withdrawTokens(token, value);\r\n    }\r\n\r\n    function _withdrawTokens(address token, uint value) private onlyOwner() {\r\n        if (token != address(0)) {\r\n            if (value > 0) {\r\n                IERC20(token).transfer(ownerAddress, value);\r\n            } else {\r\n                IERC20(token).transfer(ownerAddress, IERC20(token).balanceOf(address(this)));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateExchanger(address exchanger, uint limit, bool allowed) private onlyOwner() {\r\n        if (exchanger != address(0)) {\r\n            Allowed memory allowedExchanger = Allowed(limit, 0, allowed);\r\n            allowedExchangers[exchanger] = allowedExchanger;\r\n        }\r\n    }\r\n\r\n    function updateAddress(uint8 id, address wallet) public {\r\n       _updateAddress(id, wallet);\r\n    }\r\n\r\n    function _updateAddress(uint8 id, address wallet) private onlyOwner() {\r\n        if (id > 0) {\r\n            feeAddress[id] = wallet;\r\n        }\r\n    }\r\n\r\n    function updateSettings(uint8 id, uint value) public {\r\n         _updateSettings(id, value);\r\n    }\r\n\r\n    function _updateSettings(uint8 id, uint value) private onlyOwner() {\r\n        if (id == 0 && value <= 1e16) {\r\n            tokenPriceAdd = value;\r\n        } else if (id == 1 && value <= 50 && value <= maxExchangePercent) { //0%-50%\r\n            minExchangePercent = value;\r\n        } else if (id == 2 && value >= 25 && value <= 100 && value >= minExchangePercent) { //25%-100%\r\n            maxExchangePercent = value;\r\n        } else if (id == 3 && value >= 1e16 && value <= maxPumpAmount) {\r\n            minReinvestAmount = value;\r\n        } else if (id == 4 && value >= 1e16 && value <= maxPumpAmount) {\r\n            minPumpAmount = value;\r\n        } else if (id == 5 && value >= minPumpAmount) {\r\n            maxPumpAmount = value;\r\n        } else if (id == 6 && value >= 2 && value <= 20) {\r\n            minReferralLines = uint8(value);\r\n        } else if (id == 7 && value >= 2 && value <= 20) {\r\n            activeReferralLines = uint8(value);\r\n        } else if (id == 8 && value >= 100 && value <= 2000) {\r\n            feePercent1 = value;\r\n        } else if (id == 9 && value >= 100 && value <= 2000) {\r\n            feePercent2 = value;\r\n        } else if (id == 10 && value >= 100 && value <= 2000) {\r\n            feePercent3 = value;\r\n        } else if (id == 11 && value >= 100 && value <= 2000) {\r\n            feePercent4 = value;\r\n        } else if (id == 12 && value >= 100 && value <= 2000) {\r\n            feePercent5 = value;\r\n        } else if (id == 13 && value >= 100 && value <= 2000) {\r\n            feePercent6 = value;\r\n        } else if (id >= 14 && id <= 20 && value <= 2000) {\r\n            referralsDeposit[id - 13] = value;\r\n        } else if (id >= 21 && id <= 27 && value <= 2000) {\r\n            referralsClaim[id - 20] = value;\r\n        } else if (id >= 28 && id <= 32 && value >= 10 && value <= 500) {\r\n            percentages[id - 27] = value;\r\n        } else {\r\n            revert(\"invalid update setting\");\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        deposit();\r\n    }\r\n\r\n    receive() external payable {\r\n       deposit();\r\n    }\r\n\r\n    function registration() public {\r\n        _registration(msg.sender, address(0));\r\n    }\r\n\r\n    function registration(address referral) public {\r\n        _registration(msg.sender, referral);\r\n    }\r\n\r\n    function _registration(address userAddress, address referralAddress) private {\r\n        require(!isContract(msg.sender), \"only user wallet\");\r\n        require(userAddress != address(0), \"user address require\");\r\n        require(users[userAddress].id == 0, \"user exists\");\r\n\r\n        if (referralAddress == address(0) || users[referralAddress].id == 0) {\r\n            referralAddress = userIdsAddress[1]; //admin user\r\n        }\r\n\r\n        User memory user = User(nextUserId, referralAddress, 0, 0, 0, block.timestamp);\r\n        users[userAddress] = user;\r\n        userIdsAddress[nextUserId] = userAddress;\r\n        emit UserAdded(userAddress, user.id, user.referral, user.createdAt);\r\n\r\n        usersCount++;\r\n        nextUserId++;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool exists) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function getUser(address user) public view returns (uint id, address referral, uint referralEarnings, uint referralEarningsTokens, uint referralExchangesTokens, uint createdAt) {\r\n        return (users[user].id, users[user].referral, users[user].referralEarnings, users[user].referralEarningsTokens, users[user].referralExchangesTokens, users[user].createdAt);\r\n    }\r\n\r\n    function getPump(uint pumpId) public view returns(address user, uint dailyPercent, uint amountDeposited, uint amountWithdrawn, uint withdrawnDaysCount, uint createdAt) {\r\n        require(pumps[pumpId].id != 0, \"pump not found\");\r\n\r\n        return (pumps[pumpId].user, pumps[pumpId].dailyPercent, pumps[pumpId].amountDeposited, pumps[pumpId].amountWithdrawn, pumps[pumpId].withdrawnDaysCount, pumps[pumpId].createdAt);\r\n    }\r\n\r\n    function getPumpLimits(uint pumpId) public view returns(uint amountExchanges, uint reinvesstCount, uint amountExchangeDeposited, uint amountExchangeLimit, uint amountReinvested) {\r\n        require(pumps[pumpId].id != 0, \"pump not found\");\r\n\r\n        return (pumps[pumpId].amountExchanges, pumps[pumpId].reinvestCount, pumps[pumpId].amountExchangeDeposited, pumps[pumpId].amountExchangeLimit, pumps[pumpId].amountReinvested);\r\n    }\r\n\r\n    function deposit() public payable {\r\n        if (users[msg.sender].id == 0) {\r\n            _registration(msg.sender, address(0));\r\n        }\r\n\r\n        if (usersActivePumps[msg.sender] == 0) {\r\n            require(msg.value >= minPumpAmount, \"invalid value\");\r\n            _createPump(msg.sender, msg.value);\r\n        } else {\r\n            require(msg.value >= minReinvestAmount, \"invalid value\");\r\n            require(pumps[usersActivePumps[msg.sender]].user == msg.sender, \"pump user different\");\r\n\r\n            _withdrawRewardsPump(usersActivePumps[msg.sender], false);\r\n\r\n            _depositPump(usersActivePumps[msg.sender], msg.value);\r\n        }\r\n    }\r\n\r\n    function deposit(address referral) public payable {\r\n        require(msg.value >= minPumpAmount, \"invalid value\");\r\n        require(usersActivePumps[msg.sender] == 0, \"pump already exists\");\r\n        if (users[msg.sender].id == 0) {\r\n            _registration(msg.sender, referral);\r\n        }\r\n\r\n        _createPump(msg.sender, msg.value);\r\n    }\r\n\r\n    function deposit(uint pumpId) public payable {\r\n        require(msg.value >= minReinvestAmount, \"invalid value\");\r\n        require(pumps[pumpId].user == msg.sender, \"pump invalid\");\r\n        require(usersActivePumps[msg.sender] == pumpId, \"active pump invalid\");\r\n\r\n        _withdrawRewardsPump(pumpId, false);\r\n\r\n        _depositPump(pumpId, msg.value);\r\n    }\r\n\r\n    function claim() public {\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(usersActivePumps[msg.sender] > 0, \"active pump invalid\");\r\n        require(pumps[usersActivePumps[msg.sender]].user == msg.sender, \"pump user different\");\r\n        require(pumps[usersActivePumps[msg.sender]].id != 0, \"pump not found\");\r\n        require(users[pumps[usersActivePumps[msg.sender]].user].id != 0, \"user not found\");\r\n\r\n        _withdrawRewardsPump(usersActivePumps[msg.sender], true);\r\n    }\r\n\r\n    function withdraw(uint pumpId) public {\r\n        require(pumps[pumpId].id != 0, \"pump not found\");\r\n        if (msg.sender != ownerAddress) {\r\n            require(pumps[pumpId].user == msg.sender, \"pump user different\");\r\n            require(usersActivePumps[msg.sender] == pumpId, \"active pump invalid\");\r\n        }\r\n        require(users[pumps[pumpId].user].id != 0, \"user not found\");\r\n\r\n        _withdrawRewardsPump(pumpId, true);\r\n    }\r\n\r\n    function exchangeContractsTokens(address exchanger, uint amount, address token)\r\n    public \r\n    {\r\n        require(msg.sender == tokenAddress, \"sender invalid\");\r\n        require(amount > 0, \"amount invalid\");\r\n        require(exchanger != address(0), \"exchanger invalid\");\r\n        require(allowedExchangers[exchanger].allowed, \"exchanger address no allowed\");\r\n\r\n        if (token == tokenAddress) {\r\n            require(IERC20(tokenAddress).balanceOf(exchanger) >= amount, \"tokens not enough\");\r\n            require(IERC20(tokenAddress).transferFrom(exchanger, address(this), amount), \"transfer error\");\r\n            IERC20(tokenAddress).burn(amount);\r\n\r\n            _exchangeContracts(exchanger, amount);\r\n        } else {\r\n            require(IERC20(tokenAddress).transferFrom(exchanger, address(this), amount));\r\n        }\r\n    }\r\n\r\n    function _exchangeContracts(address exchanger, uint amount) private {\r\n        require(tokenPrice > 0, \"token price invalid\");\r\n        require(allowedExchangers[exchanger].allowed, \"exchanger address no allowed\");\r\n\r\n        uint amountBnb = ((tokenPrice * amount) / 1e18);\r\n        require(amountBnb <= address(this).balance, \"exchange balance not enough\");\r\n\r\n        Allowed storage allowed = allowedExchangers[exchanger];\r\n\r\n        if (allowed.limit > 0) {\r\n            require(allowed.exchanged < allowed.limit, \"exchange limit is over\");\r\n            uint amountExchangeLeft = allowed.limit - allowed.exchanged;\r\n            require(amountExchangeLeft >= amountBnb, \"exchanged amount invalid\");\r\n        }\r\n\r\n        allowed.exchanged += amountBnb;\r\n        payable(exchanger).transfer(amountBnb);\r\n        \r\n        emit ExchangeContractsTransferred(exchanger, tokenPrice, amount, amountBnb, allowed.limit, allowed.exchanged, block.timestamp);\r\n    }\r\n\r\n    function exchangeTokens(address user, uint amount, address token)\r\n    public \r\n    {\r\n        require(msg.sender == tokenAddress, \"sender invalid\");\r\n        require(amount > 0, \"amount invalid\");\r\n        require(user != address(0), \"user invalid\");\r\n\r\n        if (token == tokenAddress) {\r\n            require(IERC20(tokenAddress).balanceOf(user) >= amount, \"tokens not enough\");\r\n            require(IERC20(tokenAddress).transferFrom(user, address(this), amount), \"transfer error\");\r\n            \r\n            uint burnsTokens = _exchange(user, amount);\r\n            if (amount <= burnsTokens) {\r\n                IERC20(tokenAddress).burn(amount);\r\n            } else {\r\n                uint amountLeft = amount - burnsTokens;\r\n                require(IERC20(tokenAddress).transfer(user, amountLeft), \"transfer left error\");\r\n                IERC20(tokenAddress).burn(burnsTokens);\r\n            }\r\n        } else {\r\n            require(IERC20(tokenAddress).transferFrom(user, address(this), amount));\r\n        }\r\n    }\r\n\r\n    function _exchange(address user, uint amount) private returns(uint burnsTokens) {\r\n        require(tokenPrice > 0, \"token price invalid\");\r\n        require(users[user].id > 0, \"user not found\");\r\n        require(usersActivePumps[user] > 0, \"active pump invalid\");\r\n        require(pumps[usersActivePumps[user]].user == user, \"pump user different\");\r\n\r\n        uint amountBnb = ((tokenPrice * amount) / 1e18);\r\n        burnsTokens = amount;\r\n\r\n        uint amountExchangeLeft = amountBnb;\r\n        if (users[user].referralEarningsTokens > 0 && users[user].referralEarningsTokens > users[user].referralExchangesTokens && \r\n            users[user].referralEarningsTokens - users[user].referralExchangesTokens > 0) {\r\n            if (amountExchangeLeft <= users[user].referralEarningsTokens - users[user].referralExchangesTokens) {\r\n                users[user].referralExchangesTokens += amountExchangeLeft;\r\n                amountExchangeLeft = 0;\r\n            } else {\r\n                amountExchangeLeft -= users[user].referralEarningsTokens - users[user].referralExchangesTokens;\r\n                users[user].referralExchangesTokens += users[user].referralEarningsTokens - users[user].referralExchangesTokens;\r\n            }\r\n        } \r\n\r\n        bool timer = false;\r\n        uint amountExchange = 0;\r\n        if (amountExchangeLeft > 0) {\r\n            require((lastExchangedAt[user] + 1 days) < block.timestamp, \"exchange period invalid\");\r\n\r\n            uint minExchangeAmount = (minExchangePercent > 0) ? (pumps[usersActivePumps[user]].amountExchangeDeposited / 100) * minExchangePercent : 0; //0%\r\n            uint availableExchangeAmount = (pumps[usersActivePumps[user]].amountExchangeDeposited / 100) * maxExchangePercent; //30%\r\n            if (minExchangeAmount <= amountExchangeLeft) {\r\n                amountExchange = (availableExchangeAmount < amountExchangeLeft) ? amountExchangeLeft - availableExchangeAmount : amountExchangeLeft;\r\n                if (exchangesAmount[user] + amountExchange > pumps[usersActivePumps[user]].amountExchangeLimit) {\r\n                    amountExchange = pumps[usersActivePumps[user]].amountExchangeLimit - exchangesAmount[user];\r\n                }\r\n                lastExchangedAt[user] = block.timestamp;\r\n                exchangesAmount[user] += amountExchange;\r\n                amountExchangeLeft -= amountExchange;\r\n                timer = true;\r\n            }\r\n        }\r\n\r\n        if (amountExchangeLeft > 0) {\r\n            amountBnb -= amountExchangeLeft;\r\n            uint tokensReturn = (amountExchangeLeft * 1e18) / tokenPrice;\r\n            if (tokensReturn > 0 && tokensReturn < burnsTokens) {\r\n                burnsTokens -= tokensReturn;\r\n            }\r\n        }\r\n\r\n        Exchange memory exchange = Exchange(nextExchangeId, user, tokenPrice, burnsTokens, amountBnb, block.timestamp);\r\n        exchanges[nextExchangeId] = exchange;\r\n        pumps[usersActivePumps[user]].amountExchanges += amountExchange;\r\n\r\n        if (feeAddress[3] != address(0)) {\r\n            require((exchange.amountSent / 1000) * feePercent3 <= address(this).balance, \"fee exchange balance not enough\");\r\n            _transferBnb(feeAddress[3], (exchange.amountSent / 1000) * feePercent3);\r\n        }\r\n        require(exchange.amountSent <= address(this).balance, \"exchange balance not enough\");\r\n        payable(exchange.user).transfer(exchange.amountSent);\r\n\r\n        uint tempAmountExchangeLimit = (pumps[usersActivePumps[user]].amountExchangeLimit > 1e15) ? pumps[usersActivePumps[user]].amountExchangeLimit - 1e15 : pumps[usersActivePumps[user]].amountExchangeLimit; //permissible value error 0.001 BNB\r\n        if (exchangesAmount[user] >= tempAmountExchangeLimit) {\r\n            _withdrawRewardsPump(usersActivePumps[user], false);\r\n\r\n            Pump storage pump = pumps[usersActivePumps[user]];\r\n            pump.amountDeposited = pump.amountReinvested;\r\n            pump.amountExchangeDeposited = pump.amountDeposited;\r\n            pump.amountReinvested = 0;\r\n            pump.amountExchangeLimit = pump.amountDeposited * 3;\r\n            pump.reinvestCount++;\r\n            pump.dailyPercent = getPumpPercentage(pump.amountDeposited);\r\n\r\n            exchangesAmount[user] = 0;\r\n\r\n            emit PumpDeposited(pump.user, pump.id, pump.dailyPercent, 0, pump.amountDeposited, pump.reinvestCount, pump.amountExchangeDeposited, pump.amountExchangeLimit, pump.amountReinvested, false);\r\n            tokenPrice += tokenPriceAdd;\r\n        }\r\n\r\n        emit ExchangeTransferred(exchange.user, exchange.id, exchange.price, exchange.amountReceived, exchange.amountSent, (burnsTokens < amount) ? amount - burnsTokens : 0, pumps[usersActivePumps[exchange.user]].amountExchangeLimit, exchangesAmount[exchange.user], exchange.exchangedAt, timer);\r\n\r\n        nextExchangeId++;\r\n        return burnsTokens;\r\n    }\r\n\r\n    function reinvestTokens(address user, uint amount, address token)\r\n    public \r\n    {\r\n        require(msg.sender == tokenAddress, \"sender invalid\");\r\n        require(amount > 0, \"amount invalid\");\r\n        require(user != address(0), \"user invalid\");\r\n\r\n        if (token == tokenAddress) {\r\n            require(IERC20(tokenAddress).balanceOf(user) >= amount, \"tokens not enough\");\r\n            require(IERC20(tokenAddress).transferFrom(user, address(this), amount), \"transfer error\");\r\n            IERC20(tokenAddress).burn(amount);\r\n\r\n            _reinvest(user, amount);\r\n        } else {\r\n            require(IERC20(tokenAddress).transferFrom(user, address(this), amount));\r\n        }\r\n    }\r\n\r\n    function _reinvest(address user, uint amount) private {\r\n        require(tokenPrice > 0, \"token price invalid\");\r\n        require(users[user].id > 0, \"user not found\");\r\n        require(usersActivePumps[user] > 0, \"active pump invalid\");\r\n        require(pumps[usersActivePumps[user]].user == user, \"pump user different\");\r\n\r\n        uint amountBnb = ((tokenPrice * amount) / 1e18);\r\n        require(amountBnb >= minReinvestAmount, \"min reinvest amount invalid\");\r\n\r\n        Pump storage pump = pumps[usersActivePumps[user]];\r\n        pump.amountDeposited += amountBnb;\r\n        pump.amountReinvested += amountBnb;\r\n        pump.dailyPercent = getPumpPercentage(pump.amountDeposited);\r\n\r\n        emit PumpDeposited(pump.user, pump.id, pump.dailyPercent, amountBnb, pump.amountDeposited, pump.reinvestCount, pump.amountExchangeDeposited, pump.amountExchangeLimit, pump.amountReinvested, true);\r\n\r\n        depositsCount++;\r\n    }\r\n\r\n    function _withdrawRewardsPump(uint pumpId, bool reverted) private {\r\n        (uint rewardDays, uint rewardAmount) = getRewardsAmount(pumpId);\r\n        if (reverted) {\r\n            require(rewardAmount > 0, \"reward amount invalid\");\r\n            require(rewardDays > 0, \"reward days invalid\");\r\n            require(exchangesAmount[pumps[pumpId].user] < pumps[pumpId].amountExchangeLimit, \"limitation claim amount has ended, needs reinvestment\");\r\n        }\r\n        \r\n        if (rewardAmount > 0 && rewardDays > 0) {\r\n            pumps[pumpId].amountWithdrawn += rewardAmount;\r\n            pumps[pumpId].withdrawnDaysCount += rewardDays;\r\n\r\n            IERC20(tokenAddress).mint(pumps[pumpId].user, rewardAmount);\r\n\r\n            emit PumpRewardTransferred(pumps[pumpId].user, pumps[pumpId].id, pumps[pumpId].dailyPercent, rewardDays, rewardAmount, block.timestamp);\r\n\r\n            _transferReferralRewards(pumps[pumpId].user, pumpId, rewardAmount, false);\r\n\r\n            if (feeAddress[4] != address(0)) {\r\n                IERC20(tokenAddress).mint(feeAddress[4], (rewardAmount / 10000) * feePercent4);\r\n                if (users[feeAddress[4]].id > 0) {\r\n                    users[feeAddress[4]].referralEarningsTokens += (((tokenPrice * rewardAmount) / 10000) * feePercent4) / 1e18;\r\n\r\n                    emit UserReferralEarned(feeAddress[4], rewardAmount, users[feeAddress[4]].referralEarnings, users[feeAddress[4]].referralEarningsTokens, users[feeAddress[4]].referralExchangesTokens, true, true);\r\n                }\r\n            }\r\n            if (feeAddress[5] != address(0)) {\r\n                IERC20(tokenAddress).mint(feeAddress[5], (rewardAmount / 10000) * feePercent5);\r\n                if (users[feeAddress[5]].id > 0) {\r\n                    users[feeAddress[5]].referralEarningsTokens += (((tokenPrice * rewardAmount) / 10000) * feePercent5) / 1e18;\r\n\r\n                    emit UserReferralEarned(feeAddress[5], rewardAmount, users[feeAddress[5]].referralEarnings, users[feeAddress[5]].referralEarningsTokens, users[feeAddress[5]].referralExchangesTokens, true, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _depositPump(uint pumpId, uint amount) private {\r\n        Pump storage pump = pumps[pumpId];\r\n        pump.amountDeposited += amount;\r\n        pump.amountReinvested += amount;\r\n        pump.dailyPercent = getPumpPercentage(pump.amountDeposited);\r\n\r\n        emit PumpDeposited(pump.user, pump.id, pump.dailyPercent, amount, pump.amountDeposited, pump.reinvestCount, pump.amountExchangeDeposited, pump.amountExchangeLimit, pump.amountReinvested, false);\r\n\r\n        _transferReferralRewards(pumps[pumpId].user, pumps[pumpId].id, amount, true);\r\n\r\n        _transferBnb(feeAddress[1], (amount / 10000) * feePercent1);\r\n        _transferBnb(feeAddress[2], (amount / 10000) * feePercent2);\r\n        if (feeAddress[6] != address(0) && feePercent6 > 0) {\r\n            _transferBnb(feeAddress[6], (amount / 10000) * feePercent6);\r\n        }\r\n        \r\n        depositsCount++;\r\n    }\r\n\r\n    function _createPump(address user, uint amount) private {\r\n        uint percentage = getPumpPercentage(amount);\r\n\r\n        Pump memory pump = Pump(nextPumpId, user, amount, 0, 0, 0, amount, (amount * 2), 0, percentage, 0, block.timestamp);\r\n        pumps[nextPumpId] = pump;\r\n        usersActivePumps[user] = nextPumpId;\r\n\r\n        emit PumpCreated(pump.user, pump.id, pump.amountDeposited, pump.dailyPercent, pump.createdAt);\r\n\r\n        _transferReferralRewards(pump.user, nextPumpId, pump.amountDeposited, true);\r\n\r\n        _transferBnb(feeAddress[1], (amount / 10000) * feePercent1);\r\n        _transferBnb(feeAddress[2], (amount / 10000) * feePercent2);\r\n        if (feeAddress[6] != address(0) && feePercent6 > 0) {\r\n            _transferBnb(feeAddress[6], (amount / 10000) * feePercent6);\r\n        }\r\n\r\n        nextPumpId++;\r\n        pumpsCount++;\r\n        depositsCount++;\r\n        tokenPrice += tokenPriceAdd;\r\n    }\r\n\r\n    function _transferReferralRewards(address user, uint pumpId, uint amount, bool deposited) private {\r\n        address referral = users[user].referral;\r\n\r\n        for (uint8 line = 1; line <= activeReferralLines; line++) {\r\n            if (referral == address(0)) {\r\n                break;\r\n            }\r\n\r\n            uint8 allowedLines = getReferralLines(pumps[usersActivePumps[referral]].amountDeposited);\r\n            if (line > allowedLines) {\r\n                referral = users[referral].referral;\r\n                continue;\r\n            }\r\n\r\n            if (usersActivePumps[referral] == 0 || exchangesAmount[referral] >= pumps[usersActivePumps[referral]].amountExchangeLimit) {\r\n                referral = users[referral].referral;\r\n                continue;\r\n            }\r\n\r\n            uint rewardAmount = 0;\r\n            if (line == 1) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[1];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[2];\r\n                }\r\n            } else if (line == 2) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[2];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[2];\r\n                }\r\n            } else if (line == 3) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[3];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[3];\r\n                }\r\n            } else if (line == 4) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[4];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[4];\r\n                }\r\n            } else if (line >= 5 && line <= 6) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[5];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[5];\r\n                }\r\n            } else if (line >= 7 && line <= 10) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[6];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[6];\r\n                }\r\n            } else if (line >= 11 && line <= 15) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[7];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[7];\r\n                }\r\n            } else if (line >= 16) {\r\n                if (deposited) {\r\n                    rewardAmount = (amount / 10000) * referralsDeposit[8];\r\n                } else {\r\n                    rewardAmount = (amount / 10000) * referralsClaim[8];\r\n                }\r\n            }\r\n            \r\n            if (rewardAmount > 0) {\r\n                if (deposited) {\r\n                    _transferBnb(referral, rewardAmount);\r\n                    users[referral].referralEarnings += rewardAmount;\r\n\r\n                    emit UserReferralEarned(referral, rewardAmount, users[referral].referralEarnings, users[referral].referralEarningsTokens, users[referral].referralExchangesTokens, false, false);\r\n                } \r\n                else\r\n                {\r\n                    IERC20(tokenAddress).mint(referral, rewardAmount);\r\n                    users[referral].referralEarningsTokens += ((tokenPrice * rewardAmount) / 1e18);\r\n\r\n                    emit UserReferralEarned(referral, ((tokenPrice * rewardAmount) / 1e18), users[referral].referralEarnings, users[referral].referralEarningsTokens, users[referral].referralExchangesTokens, true, false);\r\n                }\r\n                \r\n                emit ReferralRewardTransferred(user, referral, pumpId, line, amount, rewardAmount, deposited);\r\n            }\r\n\r\n            referral = users[referral].referral;\r\n        }\r\n    }\r\n\r\n    function getRewardsAmount(uint pumpId) public view returns(uint rewardDays, uint rewardAmount) {\r\n        require(pumps[pumpId].id != 0, \"pump not found\");\r\n\r\n        if (tokenPrice == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint pumpDays = 0;\r\n        if (pumps[pumpId].createdAt > 0) {\r\n            pumpDays = (block.timestamp - pumps[pumpId].createdAt) / pumpPeriod;\r\n        }\r\n\r\n        if (pumpDays == 0) {\r\n            return (0, 0);\r\n        } else {\r\n            pumpDays = pumpDays - pumps[pumpId].withdrawnDaysCount;\r\n            if (pumpDays == 0) {\r\n                return (0, 0);\r\n            }\r\n\r\n            uint amountBnb = ((pumps[pumpId].amountDeposited / 10000) * pumps[pumpId].dailyPercent) * pumpDays;\r\n            if (amountBnb == 0) {\r\n                return (0, 0);\r\n            }\r\n\r\n            rewardDays = pumpDays;\r\n            rewardAmount = (amountBnb * 1e18) / tokenPrice;\r\n        } \r\n    }\r\n\r\n    function getReferralLines(uint amount) public view returns (uint8 lines) {\r\n        if (amount >= 0 && amount < 15 * 1e17) {\r\n            lines = 2;\r\n        } else if (amount < 3 * 1e18) {\r\n            lines = 4;\r\n        } else if (amount < 10 * 1e18) {\r\n            lines = 6;\r\n        } else if (amount < maxPumpAmount) {\r\n            lines = 8;\r\n        } else if (amount >= maxPumpAmount) {\r\n            lines = activeReferralLines;\r\n        } else {\r\n            lines = 2;\r\n        }\r\n\r\n        if (minReferralLines > 0 && minReferralLines > lines) {\r\n            lines = minReferralLines;\r\n        }\r\n    }\r\n\r\n    function getPumpPercentage(uint amount) public view returns(uint percentage) {\r\n        if (amount >= 0 && amount < 15 * 1e17) {    \r\n            percentage = percentages[1]; //0.5%\r\n        } else if (amount < 3 * 1e18) {\r\n            percentage = percentages[2]; //0.75%\r\n        } else if (amount < 10 * 1e18) {\r\n            percentage = percentages[3]; //1%\r\n        } else if (amount < maxPumpAmount) {\r\n            percentage = percentages[4]; //1.25%\r\n        } else if (amount >= maxPumpAmount) {\r\n            percentage = percentages[5]; //1.5%\r\n        } else {\r\n            percentage = percentages[1]; //0.5%\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractExchangedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangedAt\",\"type\":\"uint256\"}],\"name\":\"ExchangeContractsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userExchangedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"timer\",\"type\":\"bool\"}],\"name\":\"ExchangeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"PumpCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountExchangeDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountExchangeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokens\",\"type\":\"bool\"}],\"name\":\"PumpDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daysReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAt\",\"type\":\"uint256\"}],\"name\":\"PumpRewardTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"line\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deposited\",\"type\":\"bool\"}],\"name\":\"ReferralRewardTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"UpdatedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"UpdatedUint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEarnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEarningsTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountExchangesTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"name\":\"UserReferralEarned\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"activeReferralLines\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExchangers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchanged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeContractsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"}],\"name\":\"getPump\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDaysCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"}],\"name\":\"getPumpLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountExchanges\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvesstCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExchangeDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExchangeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReinvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPumpPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getReferralLines\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"lines\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"}],\"name\":\"getRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEarningsTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralExchangesTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastExchangedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExchangePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPumpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExchangePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPumpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReferralLines\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReinvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextExchangeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPumpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"percentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pumpPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pumps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExchanges\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExchangeDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExchangeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDaysCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pumpsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"referralsClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"referralsDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reinvestTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEarningsTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralExchangesTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersActivePumps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pumpId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PolanixMain", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://51702e14329040e3e051ff91f37c83b9e0944a4936eb0b0fd67777845ba889e2"}