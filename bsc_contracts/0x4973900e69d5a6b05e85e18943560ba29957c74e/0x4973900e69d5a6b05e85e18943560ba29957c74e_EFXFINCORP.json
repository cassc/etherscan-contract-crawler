{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >= 0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\ncontract EFXFINCORP{\r\n  \r\n    event Multisended(uint256 value , address indexed sender);\r\n    event Registration(address indexed  investor, string  referralId,string referral,uint investment);\r\n    event PackageUpgrade(string  investorId,uint256 investment,address indexed investor,string packageName);\r\n    event StakeToken(string  investorId,uint256 investment,address indexed investor,string userId);\r\n    event BuyFund(string  investorId,uint256 investment,address indexed investor,string userId);\r\n    event WithDraw(string  investorId,address indexed  investor,uint256 WithAmt);\r\n    event MemberPayment(uint256  investorId,address indexed  investor,uint256 WithAmt,uint netAmt);\r\n    event Payment(uint256 NetQty);\r\n    \r\n    using SafeMath for uint256;\r\n    IERC20 private USDT; \r\n    address public owner;   \r\n   \r\n    constructor(address ownerAddress,IERC20 _USDT)\r\n    {\r\n        owner = ownerAddress;  \r\n        USDT = _USDT;\r\n    }    \r\n    function NewRegistration(string memory referralId,string memory referral,uint256 investment) public payable\r\n    {\r\n        require(USDT.balanceOf(msg.sender)>=investment);\r\n        require(USDT.allowance(msg.sender,address(this))>=investment,\"Approve Your Token First\");\r\n        USDT.transferFrom(msg.sender ,owner, investment);\r\n        emit Registration(msg.sender, referralId,referral,investment);\r\n    }\r\n\r\n    function UpgradePackage(string memory investorId,uint256 investment,string memory packageName) public payable\r\n    {\r\n        require(USDT.balanceOf(msg.sender)>=investment);\r\n        require(USDT.allowance(msg.sender,address(this))>=investment,\"Approve Your Token First\");\r\n        USDT.transferFrom(msg.sender ,owner,investment);\r\n        emit PackageUpgrade( investorId,investment,msg.sender,packageName);\r\n    }\r\n    function FarmToken(string memory investorId,uint256 investment,string memory userId) public payable\r\n    {\r\n        require(USDT.balanceOf(msg.sender)>=investment);\r\n        require(USDT.allowance(msg.sender,address(this))>=investment,\"Approve Your Token First\");\r\n        USDT.transferFrom(msg.sender ,owner,investment);\r\n        emit StakeToken( investorId,investment,msg.sender,userId);\r\n    }\r\n    function FundBuy(string memory investorId,uint256 investment,string memory userId) public payable\r\n    {\r\n        require(USDT.balanceOf(msg.sender)>=investment);\r\n        require(USDT.allowance(msg.sender,address(this))>=investment,\"Approve Your Token First\");\r\n        USDT.transferFrom(msg.sender ,owner,investment);\r\n        emit BuyFund( investorId,investment,msg.sender,userId);\r\n    }\r\n    function multisendBNB(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n    }    \r\n    function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory NetAmt,uint256[]  memory  _investorId) public payable {\r\n        uint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            USDT.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n            emit MemberPayment( _investorId[i], _contributors[i],_balances[i],NetAmt[i]);\r\n      }\r\n        emit Payment(totalQty);  \r\n    }    \r\n    function multisendWithdraw(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n              USDT.transfer(_contributors[i], _balances[i]);\r\n        }   \r\n    }    \r\n    function withdrawLostBNBFromBalance(address payable _sender) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _sender.transfer(address(this).balance);\r\n    }    \r\n    function withdrawincome(string memory investorId,address payable _userAddress,uint256 WithAmt) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        USDT.transferFrom(msg.sender,_userAddress, WithAmt);\r\n        emit WithDraw(investorId,_userAddress,WithAmt);\r\n    }     \r\n    function withdrawLostTokenFromBalance(uint QtyAmt) public \r\n    {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        USDT.transfer(owner,QtyAmt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"BuyFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netAmt\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"}],\"name\":\"PackageUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"StakeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"FarmToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"FundBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"NewRegistration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"}],\"name\":\"UpgradePackage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"NetAmt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investorId\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"QtyAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawincome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EFXFINCORP", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d93d95665c3fc14eb6134d66f99f8a86326da6e400000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4039f1bdb3d31d8a53d342f3c960ba6d9197378d7572c010859d9e29adef366f"}