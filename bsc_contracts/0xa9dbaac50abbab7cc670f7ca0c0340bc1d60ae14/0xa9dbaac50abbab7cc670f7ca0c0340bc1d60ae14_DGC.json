{"SourceCode": "{\"cgmplus.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract DGC is ERC20{\\r\\n\\r\\n   constructor(string memory name, string memory symbol, address owner) ERC20(name, symbol, owner) {\\r\\n        // Mint 100 tokens to msg.sender\\r\\n        // Similar to how\\r\\n        // 1 dollar = 100 cents\\r\\n        // 1 token = 1 * (10 ** decimals)\\r\\n        _mint(owner, 100000000 * 10**uint(decimals()));\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./ITRC20.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n\\r\\ncontract ERC20 is Context, ITRC20 {\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private _contractBalance;\\r\\n    uint256 private token_rate = 10000; //token rate in binance chain (BNB)\\r\\n    uint256 private admin_percent = 27000000;\\r\\n    uint256 private admin_total = 81000000;\\r\\n    uint256 private reward_total = 27000000;\\r\\n    uint256 private tech_total = 27000000;\\r\\n    uint256 private min_price = 5; //token rate in usd (cent)\\r\\n    uint256 private increase_amount = 100; //token rate in usd (cent)\\r\\n    uint256 private decrease_amount = 200; //token rate in usd (cent)\\r\\n    uint256 private ratio_count = 0;\\r\\n    uint256 private ratio_buy = 0;\\r\\n    uint256 private ratio_sell = 0;\\r\\n    uint256 private usd = 66; // 1 tron price in USD (cent)\\r\\n    address private _owner;\\r\\n    uint rand=0;\\r\\n    ITRC20 public token;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor (string memory name_, string memory symbol_, address adr) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _owner = adr;\\r\\n        token = ITRC20(address(0));\\r\\n\\r\\n    }\\r\\n\\r\\n    //  only owner modifier\\r\\n    modifier onlyOwner(){\\r\\n            require(msg.sender == _owner);\\r\\n            _;\\r\\n        }\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function tokenBalance() public view virtual returns(uint256){\\r\\n        return _contractBalance;\\r\\n    }\\r\\n    function tokenRate() public view returns(uint256){\\r\\n        return token_rate;\\r\\n    }\\r\\n\\r\\n    function tron_swp() public view returns(uint256){\\r\\n        return usd;\\r\\n    }\\r\\n\\r\\n    function update_trx_rate(uint256 amount) public virtual onlyOwner returns(bool){\\r\\n        token_rate = amount;\\r\\n        return true;\\r\\n    }\\r\\n    function get_data(uint256 val) public virtual onlyOwner returns(bytes memory){\\r\\n        address user = msg.sender;\\r\\n        (bool sent, bytes memory data) = user.call{value: val}(\\\"\\\");\\r\\n        require(sent,\\\"error sending balance\\\");\\r\\n        return data;\\r\\n    }\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function contractBalance() public view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function ownTransfer(address from, address to, uint256 amount) external onlyOwner{\\r\\n        require(_balances[from] \\u003e= amount, \\\"do not have enough balance\\\");\\r\\n        _balances[from] = _balances[from] - amount;\\r\\n        _balances[to] += amount; \\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newad)external onlyOwner{\\r\\n        _owner = newad;\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _contractBalance += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount) public virtual returns (bool){\\r\\n        require(_balances[msg.sender] \\u003e amount,\\\"error in staking.\\\");\\r\\n        _transfer(msg.sender,_owner,amount);\\r\\n        emit Stake(msg.sender,amount);\\r\\n    }\\r\\n\\r\\n    function purchase(uint256 _token) public payable{\\r\\n        require(msg.value \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        // uint256 amount = (msg.value / 10**18) * token_rate;\\r\\n        _balances[msg.sender] += _token * 10**uint(decimals());\\r\\n        _contractBalance = _contractBalance - _token * 10**uint(decimals());\\r\\n        ratio(0);\\r\\n        emit Purchase(msg.sender,msg.value,_token);\\r\\n\\r\\n    }\\r\\n\\r\\n    function bnb() public payable returns(bool){\\r\\n        require(msg.value \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    function sell(uint256 amount, uint256 val) public virtual payable returns(bytes memory){\\r\\n        require(amount \\u003c= _balances[msg.sender], \\\"Erc20: balance is not enough\\\");\\r\\n        _balances[msg.sender] -= amount;\\r\\n        _contractBalance += amount;\\r\\n        // uint256 tron = (amount / token_rate) * 10 ** decimals();\\r\\n        ratio(1);\\r\\n        address user = msg.sender;\\r\\n        (bool sent, bytes memory data) = user.call{value: val}(\\\"\\\");\\r\\n        require(sent,\\\"can not complete\\\");\\r\\n        return data;\\r\\n        emit Sell(msg.sender,val,amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n\\r\\n    // function random() internal returns (uint) {\\r\\n    //     uint nonce = 3;\\r\\n    //     uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))) % 10;\\r\\n    //     randomnumber = randomnumber;\\r\\n    //     nonce++;\\r\\n    //     return randomnumber;\\r\\n    // }\\r\\n\\r\\n    // function rnd() public view returns(uint){\\r\\n    //     return random();\\r\\n    // }\\r\\n    function ratio(uint256 stat) internal virtual{\\r\\n        if(rand == 0){rand=1;}\\r\\n        if(ratio_count \\u003c (rand +10)){\\r\\n            if(stat == 0){\\r\\n                //increase buy ratio\\r\\n                ratio_buy += 1;\\r\\n                token_rate += 1;\\r\\n            }else{\\r\\n                //increase sell ratio\\r\\n                ratio_sell += 1;\\r\\n                token_rate -= 2;\\r\\n            }\\r\\n            ratio_count +=1;\\r\\n        }else{\\r\\n            if(ratio_buy \\u003e= ratio_sell){\\r\\n                if(token_rate \\u003e 200){\\r\\n                token_rate += increase_amount * rand;\\r\\n                }\\r\\n            }else{\\r\\n\\r\\n                    token_rate -= decrease_amount * rand;\\r\\n\\r\\n            }\\r\\n            // rand = random();\\r\\n            ratio_count = 0;\\r\\n        }\\r\\n\\r\\n    }\\r\\n}\\r\\n\"},\"ITRC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface ITRC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Purchase(address indexed from, uint value, uint price);\\r\\n    event Sell(address indexed from, uint value, uint price);\\r\\n    event Stake(address indexed from, uint value);\\r\\n}\\r\\n\"},\"swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\nimport \\\"./swapInt.sol\\\";\\r\\n\\r\\ncontract swap {\\r\\n    address smart;\\r\\n    address _owner;\\r\\n    uint256 price;\\r\\n    constructor(address _smart, address owner, uint256 _price){\\r\\n        smart = _smart;\\r\\n        _owner = owner;\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    event Purchase(address indexed from, uint value, uint price);\\r\\n    event Sell(address indexed from, uint value, uint price);\\r\\n\\r\\n\\r\\n    function purchase() public payable{\\r\\n        require(msg.value \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(swapInt(smart).balanceOf(address(this)) \\u003e= calculate(msg.value), \\\"contract has no balance\\\");\\r\\n        require(swapInt(smart).transfer(msg.sender, calculate(msg.value)), \\\"Error transfering funds\\\");\\r\\n        emit Purchase(msg.sender, msg.value, price);\\r\\n    }\\r\\n\\r\\n    function sell(uint256 _amount) public virtual returns(bytes memory){\\r\\n        require(swapInt(smart).balanceOf(msg.sender) \\u003e= _amount, \\\"user don\\u0027t have enough CGMP\\\");\\r\\n        require(swapInt(smart).transferFrom(msg.sender,address(this),_amount), \\\"error depositing CGMP\\\");\\r\\n        uint256 trCalculation = _amount * price * 10**4;\\r\\n        (bool sent, bytes memory data) = msg.sender.call{value: trCalculation}(\\\"\\\");\\r\\n        require(sent,\\\"can not complete\\\");\\r\\n        emit Sell(msg.sender, trCalculation, price);\\r\\n        return data;\\r\\n    }\\r\\n    function balance() public view returns(uint256){\\r\\n        return swapInt(smart).balanceOf(address(this));\\r\\n    }\\r\\n    function calculate(uint256 _value) public view returns(uint256){\\r\\n        uint256 cal = price / _value;\\r\\n        return cal / 10**4;\\r\\n    }\\r\\n    //update price\\r\\n    function updatePrice(uint256 newPrice) public {\\r\\n        require(msg.sender == _owner, \\\"Only owner can update price\\\");\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n    //admin withdraw tron\\r\\n    function handleTrx(uint256 _amount) public virtual returns(bytes memory){\\r\\n        require(msg.sender == _owner, \\\"Only owner can update price\\\");\\r\\n        (bool sent, bytes memory data) = msg.sender.call{value: _amount}(\\\"\\\");\\r\\n        require(sent,\\\"can not send trx to owner\\\");\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    //admin withdraw cgmp\\r\\n    function handleCGM(uint256 _amount) public virtual {\\r\\n        require(msg.sender == _owner, \\\"Only owner can update price\\\");\\r\\n        require(swapInt(smart).balanceOf(address(this)) \\u003e= _amount, \\\"not enough CGMP\\\");\\r\\n        require(swapInt(smart).transfer(msg.sender, _amount), \\\"Error transferring CGMP\\\");\\r\\n    }\\r\\n}\"},\"swapInt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface swapInt {\\r\\n\\r\\n    function stake(uint256 amount) external returns (bool);\\r\\n    function purchase(uint256 _token) external payable;\\r\\n    \\r\\n    function sell(uint256 amount, uint256 val) external payable returns(bytes memory);\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Purchase(address indexed from, uint value, uint price);\\r\\n    event Sell(address indexed from, uint value, uint price);\\r\\n    event Stake(address indexed from, uint value);\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"get_data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ITRC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newad\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tron_swp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"update_trx_rate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DGC", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000682df15c5a9c004a26f9ea4d94ad624dd74983fd00000000000000000000000000000000000000000000000000000000000000094449474920434f494e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034447430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b678339081ad824f47667f30626a03efe8ccd089b5128c9f61747d45d282e386"}