{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-12-10\r\n*/\r\n\r\n/*\r\n__________             _____            _____     _____________           _____        \r\n___  ____/_____ _________  /______________  /_    ___    |__  /_____________  /________\r\n__  /_   _  __ `/_  ___/  __/  _ \\_  ___/  __/    __  /| |_  /_  _ \\_  ___/  __/_  ___/\r\n_  __/   / /_/ /_(__  )/ /_ /  __/(__  )/ /_      _  ___ |  / /  __/  /   / /_ _(__  ) \r\n/_/      \\__,_/ /____/ \\__/ \\___//____/ \\__/      /_/  |_/_/  \\___//_/    \\__/ /____/\r\n\r\nFastest alerts is a utility token with a mission to provide powerful tools to stay ahead of the competition.\r\n\r\nWebsite: https://fastestalerts.com/\r\nTwitter: https://twitter.com/fastest_alerts\r\nTelegram: https://t.me/CMC_fastest_alerts\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^ 0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns(bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns(bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash:= extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount } (\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns(bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns(bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns(bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns(bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue } (data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size:= mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns(uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\nfunction feeTo() external view returns(address);\r\nfunction feeToSetter() external view returns(address);\r\n\r\nfunction getPair(address tokenA, address tokenB) external view returns(address pair);\r\nfunction allPairs(uint) external view returns(address pair);\r\nfunction allPairsLength() external view returns(uint);\r\n\r\nfunction createPair(address tokenA, address tokenB) external returns(address pair);\r\n\r\nfunction setFeeTo(address) external;\r\nfunction setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\nfunction name() external pure returns(string memory);\r\nfunction symbol() external pure returns(string memory);\r\nfunction decimals() external pure returns(uint8);\r\nfunction totalSupply() external view returns(uint);\r\nfunction balanceOf(address owner) external view returns(uint);\r\nfunction allowance(address owner, address spender) external view returns(uint);\r\n\r\nfunction approve(address spender, uint value) external returns(bool);\r\nfunction transfer(address to, uint value) external returns(bool);\r\nfunction transferFrom(address from, address to, uint value) external returns(bool);\r\n\r\nfunction DOMAIN_SEPARATOR() external view returns(bytes32);\r\nfunction PERMIT_TYPEHASH() external pure returns(bytes32);\r\nfunction nonces(address owner) external view returns(uint);\r\n\r\nfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n    address indexed sender,\r\n    uint amount0In,\r\n    uint amount1In,\r\n    uint amount0Out,\r\n    uint amount1Out,\r\n    address indexed to\r\n);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\nfunction MINIMUM_LIQUIDITY() external pure returns(uint);\r\nfunction factory() external view returns(address);\r\nfunction token0() external view returns(address);\r\nfunction token1() external view returns(address);\r\nfunction getReserves() external view returns(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\nfunction price0CumulativeLast() external view returns(uint);\r\nfunction price1CumulativeLast() external view returns(uint);\r\nfunction kLast() external view returns(uint);\r\n\r\nfunction burn(address to) external returns(uint amount0, uint amount1);\r\nfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\nfunction skim(address to) external;\r\nfunction sync() external;\r\n\r\nfunction initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns(address);\r\nfunction WETH() external pure returns(address);\r\n\r\nfunction addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint amountA, uint amountB, uint liquidity);\r\nfunction addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external payable returns(uint amountToken, uint amountETH, uint liquidity);\r\n\r\nfunction removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint amountA, uint amountB);\r\nfunction removeLiquidityETH(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint amountToken, uint amountETH);\r\nfunction removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns(uint amountA, uint amountB);\r\nfunction removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns(uint amountToken, uint amountETH);\r\nfunction swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint[] memory amounts);\r\nfunction swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n) external returns(uint[] memory amounts);\r\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\nexternal\r\npayable\r\nreturns(uint[] memory amounts);\r\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\nexternal\r\nreturns(uint[] memory amounts);\r\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\nexternal\r\nreturns(uint[] memory amounts);\r\nfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\nexternal\r\npayable\r\nreturns(uint[] memory amounts);\r\n\r\nfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns(uint amountB);\r\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns(uint amountOut);\r\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns(uint amountIn);\r\nfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns(uint[] memory amounts);\r\nfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns(uint[] memory amounts);\r\n}\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns(uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns(uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract FastestAlerts is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketingAddress = 0xeBDFE75966740F392C24eb16798e4b0e9287592e;\r\n    address public projectAddress = 0x6f594341073C9c4BB717e85771Aa028D41c2bDC0;\r\n    address public protectionAddress = 0xdc720f96Be46305e1dfC8AA76E7e86f6302664C5;\r\n    address public airdropAddressPublic = 0x0E7fA6592921980F08F9d97dbDF04ddf6997bc90;\r\n    address public airdropAddressPrivate = 0x35DA2c1A64D74D90Ee52d22e96d5bc4e9205eebF;\r\n\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    struct BuyHistories {\r\n        bool exist;\r\n        uint256 time;\r\n        uint256 tokenAmount;\r\n    }\r\n    // LookBack into historical buy data\r\n    mapping (address => BuyHistories) public _buyHistories;\r\n    address public _lastWalletInteraction;\r\n\r\n    uint256 private _tTotal = 100000000 * 10**18;\r\n\r\n    string private _name = \"Fastest Alerts\";\r\n    string private _symbol = \"FA\";\r\n    uint8 private _decimals = 18;\r\n\r\n    struct SellHistories {\r\n        uint256 time;\r\n        uint256 bnbAmount;\r\n    }\r\n\r\n\r\n    uint256 public _taxFee = 2;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    uint256 public _buyTaxFee = 2;\r\n    uint256 public _sellTaxFee = 8;\r\n\r\n    bool private _presaleEnded = false;\r\n    // LookBack into historical sale data\r\n    SellHistories[] public _sellHistories;\r\n    // Presale will end when liquidity is added from PinkSale\r\n    uint256 private _liqAddTimestamp;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    constructor() {\r\n\r\n        _rOwned[_msgSender()] = _tTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[marketingAddress] = true;\r\n        _isExcludedFromFee[projectAddress] = true;\r\n        _isExcludedFromFee[protectionAddress] = true;\r\n        _isExcludedFromFee[airdropAddressPrivate] = true;\r\n        _isExcludedFromFee[airdropAddressPublic] = true;\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns(uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns(uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // Before the presale the trading is halted. After presale it can't be halted anymore.\r\n\r\n        if (from == owner() || from == airdropAddressPublic || from == airdropAddressPrivate ) {}\r\n        else {\r\n\r\n            require(_presaleEnded, \"Presale is not ended, wait for launch\");\r\n\r\n        }\r\n\r\n        if (to == uniswapV2Pair && balanceOf(uniswapV2Pair) > 0) {\r\n            SellHistories memory sellHistory;\r\n            sellHistory.time = block.timestamp;\r\n            sellHistory.bnbAmount = _getSellBnBAmount(amount);\r\n\r\n            _sellHistories.push(sellHistory);\r\n        }\r\n        else if(from == uniswapV2Pair){\r\n             if (!_buyHistories[to].exist) {\r\n                _buyHistories[to].exist = true;\r\n                _buyHistories[to].time = block.timestamp;\r\n                _buyHistories[to].tokenAmount = amount;\r\n             }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n            if(_isExcludedFromFee[from]) {\r\n                _lastWalletInteraction = from;\r\n            }\r\n            if(_isExcludedFromFee[to]) {\r\n                _lastWalletInteraction = to;\r\n            }\r\n        }\r\n        else {\r\n            // Buy\r\n            if (from == uniswapV2Pair) {\r\n                removeAllFee();\r\n                _taxFee = _buyTaxFee;\r\n                _lastWalletInteraction = to;\r\n\r\n            }\r\n            // Sell\r\n            else if (to == uniswapV2Pair) {\r\n                removeAllFee();\r\n                _taxFee = _sellTaxFee;\r\n                if(_buyHistories[from].exist) {\r\n                    if ( block.timestamp == _buyHistories[from].time ) {\r\n                        if ( _lastWalletInteraction != from ){\r\n                            //anti bot tech\r\n                            _taxFee = 100;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                _lastWalletInteraction = from;\r\n\r\n            }\r\n            else if (from != uniswapV2Pair && to != uniswapV2Pair) {\r\n                takeFee = false;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        // Approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Add the liquidity\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount } (\r\n            address(this),\r\n            tokenAmount,\r\n            0, // Slippage is unavoidable\r\n            0, // Slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee)\r\n            removeAllFee();\r\n\r\n        _transferLogic(sender, recipient, amount);\r\n\r\n        if (!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferLogic(address sender, address recipient, uint256 amount) private {\r\n\r\n        uint256 tMarketing; uint256 tProject; uint256 tProtect; uint256 tBurn;\r\n\r\n        if (_taxFee > 0) {\r\n            uint256 takeFeeAmount = amount.mul(_taxFee * getGradientFees()).div(4).div(10 ** 2);\r\n            tMarketing = takeFeeAmount;\r\n            tProject = takeFeeAmount;\r\n            tProtect = takeFeeAmount;\r\n            tBurn = takeFeeAmount;\r\n            _rOwned[marketingAddress] = _rOwned[marketingAddress].add(tMarketing);\r\n            emit Transfer(sender, marketingAddress, tMarketing);\r\n\r\n            _rOwned[projectAddress] = _rOwned[projectAddress].add(tProject);\r\n            emit Transfer(sender, projectAddress, tProject);\r\n\r\n            _rOwned[protectionAddress] = _rOwned[protectionAddress].add(tProtect);\r\n            emit Transfer(sender, protectionAddress, tProtect);\r\n\r\n            _rOwned[deadAddress] = _rOwned[deadAddress].add(tBurn);\r\n            emit Transfer(sender, deadAddress, tBurn);\r\n\r\n        }\r\n\r\n        uint256 tTransferAmount = amount.sub(tMarketing).sub(tProject).sub(tProtect).sub(tBurn);\r\n        _rOwned[sender] = _rOwned[sender].sub(amount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0) return;\r\n\r\n        _previousTaxFee = _taxFee;\r\n\r\n        _taxFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n    function _getSellBnBAmount(uint256 tokenAmount) private view returns(uint256) {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, path);\r\n\r\n        return amounts[1];\r\n    }\r\n\r\n    //Protection against high fee, max fee is 4%.\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        require(taxFee <= 4, \"Can't set buy fee higher than 4%\");\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    //Protection against high buy fee, max sell fee is 4%.\r\n    function setBuyFee(uint256 buyTaxFee) external onlyOwner {\r\n        require(buyTaxFee <= 4, \"Can't set buy fee higher than 4%\");\r\n        _buyTaxFee = buyTaxFee;\r\n    }\r\n\r\n    //Protection against high sell fee, max sell fee is 16%.\r\n    function setSellFee(uint256 sellTaxFee) external onlyOwner {\r\n        require(sellTaxFee <= 16, \"Can't set sell fee higher than 16%\");\r\n        _sellTaxFee = sellTaxFee;\r\n    }\r\n\r\n    //This only enables to set the airdrop to true. Cannot be set back to false again.\r\n    function presaleEnded() external onlyOwner {\r\n        _presaleEnded = true;\r\n        _liqAddTimestamp = block.timestamp;\r\n\r\n    }\r\n\r\n    function setMarketingWallet(address payable newWallet) external onlyOwner {\r\n        require(marketingAddress != newWallet, \"Wallet already set!\");\r\n        marketingAddress = newWallet;\r\n    }\r\n    \r\n    function setProjectWallet(address payable newWallet) external onlyOwner {\r\n        require(projectAddress != newWallet, \"Wallet already set!\");\r\n        projectAddress = newWallet;\r\n    }\r\n\r\n    function setProtectionWallet(address payable newWallet) external onlyOwner {\r\n        require(protectionAddress != newWallet, \"Wallet already set!\");\r\n        protectionAddress = newWallet;\r\n    }\r\n\r\n    function changeRouterVersion(address _router) public onlyOwner returns(address _pair) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\r\n\r\n        _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n        if (_pair == address(0)) {\r\n            // Pair doesn't exist\r\n            _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n        }\r\n        uniswapV2Pair = _pair;\r\n\r\n        // Set the router of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    // To recieve ETH from uniswapV2Router when swapping\r\n    receive() external payable { }\r\n\r\n\r\n    function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){\r\n        require(_token != address(this), \"Can't let you take all native token\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function Sweep() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    /**\r\n     * Returns a fee multiplier. During the first 4 hours sell fees will be multiplied and buy fees will remain the same.\r\n     * After 4 hours, normal sell fees will apply.\r\n     */\r\n    function getGradientFees() internal view returns (uint256) {\r\n        uint256 time_since_start = block.timestamp - _liqAddTimestamp;\r\n        uint256 hour = 60 * 60;\r\n        if (_taxFee == _sellTaxFee) {\r\n            if (time_since_start < 1 * hour) {\r\n                return (4);\r\n            } else if (time_since_start < 2 * hour) {\r\n                return (3);\r\n            } else if (time_since_start < 3 * hour) {\r\n                return (2);\r\n            } else {\r\n                return (1);\r\n            }\r\n        } else {\r\n            return (1);\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyHistories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastWalletInteraction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sellHistories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddressPrivate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddressPublic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setProjectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setProtectionWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FastestAlerts", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83f81bb16a62eaefcc9d57c7878c508996f8620fe75ddb9f1b13c687feda6e8a"}