{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\r\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\r\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\r\n *\r\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\r\n * alternative consider {ERC20Votes}.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\n\r\nabstract contract ERC20Snapshot is ERC20 {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current snapshotId\r\n     */\r\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\r\n        return _currentSnapshotId.current();\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        (bool snapshotted, uint256 value) = _valueAt(\r\n            snapshotId,\r\n            _accountBalanceSnapshots[account]\r\n        );\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        (bool snapshotted, uint256 value) = _valueAt(\r\n            snapshotId,\r\n            _totalSupplySnapshots\r\n        );\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) {\r\n            // mint\r\n            _updateAccountSnapshot(to);\r\n            _updateTotalSupplySnapshot();\r\n        } else if (to == address(0)) {\r\n            // burn\r\n            _updateAccountSnapshot(from);\r\n            _updateTotalSupplySnapshot();\r\n        } else {\r\n            // transfer\r\n            _updateAccountSnapshot(from);\r\n            _updateAccountSnapshot(to);\r\n        }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        require(\r\n            snapshotId <= _getCurrentSnapshotId(),\r\n            \"ERC20Snapshot: nonexistent id\"\r\n        );\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue)\r\n        private\r\n    {\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: burn amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(account, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\ncontract TokenTimelock {\r\n    IERC20 private _token;\r\n    address private _beneficiary;\r\n    uint256 private _nextReleaseTime;\r\n    uint256 private _releaseAmount;\r\n    uint256 private _releasePeriod;\r\n    uint256 private _periodAccelerate;\r\n    uint256 private _payedPeriod = 0;\r\n\r\n    TimelockFactory private _factory;\r\n\r\n    event Released(address indexed beneficiary, uint256 amount);\r\n    event BeneficiaryTransferred(\r\n        address indexed previousBeneficiary,\r\n        address indexed newBeneficiary\r\n    );\r\n\r\n    constructor() {\r\n        _token = IERC20(address(1));\r\n    }\r\n\r\n    function init(\r\n        IERC20 token_,\r\n        address beneficiary_,\r\n        uint256 releaseStart_,\r\n        uint256 releaseAmount_,\r\n        uint256 releasePeriod_,\r\n        uint256 periodAccelerate_\r\n    ) external {\r\n        require(\r\n            _token == IERC20(address(0)),\r\n            \"TokenTimelock: already initialized\"\r\n        );\r\n        require(\r\n            token_ != IERC20(address(0)),\r\n            \"TokenTimelock: erc20 token address is zero\"\r\n        );\r\n        require(\r\n            beneficiary_ != address(0),\r\n            \"TokenTimelock: beneficiary address is zero\"\r\n        );\r\n        require(\r\n            releasePeriod_ == 0 || releaseAmount_ != 0,\r\n            \"TokenTimelock: release amount is zero\"\r\n        );\r\n\r\n        emit BeneficiaryTransferred(address(0), beneficiary_);\r\n\r\n        _token = token_;\r\n        _beneficiary = beneficiary_;\r\n        _nextReleaseTime = releaseStart_;\r\n        _releaseAmount = releaseAmount_;\r\n        _releasePeriod = releasePeriod_;\r\n        _periodAccelerate = periodAccelerate_;\r\n\r\n        _factory = TimelockFactory(msg.sender);\r\n    }\r\n\r\n    function token() public view virtual returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    function nextReleaseTime() public view virtual returns (uint256) {\r\n        return _nextReleaseTime;\r\n    }\r\n\r\n    function periodAccelerate() public view virtual returns (uint256) {\r\n        return _periodAccelerate;\r\n    }\r\n\r\n    function releaseAmount() public view virtual returns (uint256) {\r\n        return _releaseAmount;\r\n    }\r\n\r\n    function balance() public view virtual returns (uint256) {\r\n        return token().balanceOf(address(this));\r\n    }\r\n\r\n    function releasableAmount() public view virtual returns (uint256) {\r\n        if (block.timestamp < _nextReleaseTime) return 0;\r\n\r\n        uint256 amount = balance();\r\n        if (amount == 0) return 0;\r\n        if (_releasePeriod == 0) return amount;\r\n\r\n        uint256 passedPeriods = calcPassedPeriods();\r\n        // Total accelerate from [prediod n] to [prediod m] = _periodAccelerate * (n + m)/2 * n\r\n        uint256 accelerateAmount = 0;\r\n        if (passedPeriods > 0)\r\n            accelerateAmount =\r\n                _periodAccelerate *\r\n                (\r\n                    (((_payedPeriod + (_payedPeriod + passedPeriods - 1)) *\r\n                        passedPeriods) / 2)\r\n                );\r\n\r\n        uint256 maxReleasableAmount = passedPeriods *\r\n            _releaseAmount +\r\n            accelerateAmount;\r\n\r\n        if (amount <= maxReleasableAmount) return amount;\r\n        return maxReleasableAmount;\r\n    }\r\n\r\n    function calcPassedPeriods() public view virtual returns (uint256) {\r\n        uint256 passedPeriods = (block.timestamp - _nextReleaseTime) /\r\n            _releasePeriod +\r\n            1;\r\n        return passedPeriods;\r\n    }\r\n\r\n    function releasePeriod() public view virtual returns (uint256) {\r\n        return _releasePeriod;\r\n    }\r\n\r\n    function release() public virtual returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(\r\n            block.timestamp >= nextReleaseTime(),\r\n            \"TokenTimelock: current time is before release time\"\r\n        );\r\n\r\n        uint256 _releasableAmount = releasableAmount();\r\n        require(_releasableAmount > 0, \"TokenTimelock: no releasable tokens\");\r\n\r\n        emit Released(beneficiary(), _releasableAmount);\r\n        require(token().transfer(beneficiary(), _releasableAmount));\r\n\r\n        if (_releasePeriod != 0) {\r\n            uint256 passedPeriods = calcPassedPeriods();\r\n\r\n            _payedPeriod = _payedPeriod + passedPeriods;\r\n            _nextReleaseTime += passedPeriods * _releasePeriod;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function payedPeriod() public view virtual returns (uint256) {\r\n        return _payedPeriod;\r\n    }\r\n\r\n    function transferBeneficiary(address newBeneficiary)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender == beneficiary(),\r\n            \"TokenTimelock: caller is not the beneficiary\"\r\n        );\r\n        require(\r\n            newBeneficiary != address(0),\r\n            \"TokenTimelock: the new beneficiary is zero address\"\r\n        );\r\n\r\n        emit BeneficiaryTransferred(beneficiary(), newBeneficiary);\r\n        _beneficiary = newBeneficiary;\r\n        return true;\r\n    }\r\n\r\n    function split(address splitBeneficiary, uint256 splitAmount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 _amount = balance();\r\n        require(\r\n            msg.sender == beneficiary(),\r\n            \"TokenTimelock: caller is not the beneficiary\"\r\n        );\r\n        require(\r\n            splitBeneficiary != address(0),\r\n            \"TokenTimelock: beneficiary address is zero\"\r\n        );\r\n        require(splitAmount > 0, \"TokenTimelock: amount is zero\");\r\n        require(\r\n            splitAmount <= _amount,\r\n            \"TokenTimelock: amount exceeds balance\"\r\n        );\r\n\r\n        uint256 splitReleaseAmount;\r\n        if (_releasePeriod > 0) {\r\n            splitReleaseAmount = (_releaseAmount * splitAmount) / _amount;\r\n        }\r\n\r\n        address newTimelock = _factory.createTimelock(\r\n            token(),\r\n            splitBeneficiary,\r\n            _nextReleaseTime,\r\n            splitReleaseAmount,\r\n            _releasePeriod,\r\n            _periodAccelerate\r\n        );\r\n\r\n        require(token().transfer(newTimelock, splitAmount));\r\n        _releaseAmount -= splitReleaseAmount;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CloneFactory {\r\n    function createClone(address target) internal returns (address result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(\r\n                clone,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n}\r\n\r\ncontract TimelockFactory is CloneFactory {\r\n    address private _tokenTimelockImpl;\r\n    event Timelock(address timelockContract);\r\n\r\n    constructor() {\r\n        _tokenTimelockImpl = address(new TokenTimelock());\r\n    }\r\n\r\n    function createTimelock(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 releaseTime,\r\n        uint256 releaseAmount,\r\n        uint256 period,\r\n        uint256 periodAccelerate\r\n    ) public returns (address) {\r\n        address clone = createClone(_tokenTimelockImpl);\r\n        TokenTimelock(clone).init(\r\n            token,\r\n            to,\r\n            releaseTime,\r\n            releaseAmount,\r\n            period,\r\n            periodAccelerate\r\n        );\r\n\r\n        emit Timelock(clone);\r\n        return clone;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * For security issues: contact@openstream.world\r\n */\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nstruct Holder {\r\n    string name;\r\n    address holderAddress;\r\n    uint256 pool;\r\n    uint256 vestingStartAfter;\r\n    uint256 vestingInitPercent;\r\n    uint256 vestingLookTime;\r\n    uint256 vestingPeriod;\r\n    uint256 vestingTime;\r\n}\r\n\r\nstruct TimeLockedContractAddress {\r\n    string holderName;\r\n    string desc;\r\n    uint256 amount;\r\n    address contractAddress;\r\n}\r\n\r\ncontract Bee is ERC20, ERC20Burnable, ERC20Snapshot, Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private totalTokens = 1000000000000000000000000000; // 1.000.000.000 token;\r\n    uint256 startTime = 1643587200; // // Bee Token released at 31/01/2022\r\n    TimeLockedContractAddress[] public timeLockedContractAddress;\r\n    Holder[] public holders;\r\n\r\n    constructor() ERC20(\"BeeToken\", \"BGC\") {\r\n\r\n        TimelockFactory timelockFactory = new TimelockFactory();\r\n\r\n        holders.push(\r\n            Holder({\r\n                name: \"Private sale\",\r\n                pool: (totalTokens * 5) / 100,\r\n                holderAddress: 0xAb6aea85d93F546Cf1808780e9c6FAC97fbAc407,\r\n                vestingStartAfter: 0,\r\n                vestingInitPercent: 15,\r\n                vestingLookTime: 180 * 1 days,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 24\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Strategic partners\",\r\n                pool: (totalTokens * 10) / 100,\r\n                holderAddress: 0x42713B588834c028Dfbc681104d40502845Dff8C,\r\n                vestingStartAfter: 0 * 1 days,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 365 * 1 days,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 36\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Pre sale\",\r\n                pool: (totalTokens * 2) / 100,\r\n                holderAddress: 0xc99b22a9bE20318f1D0834B5d1539bc42511Fffc,\r\n                vestingStartAfter: 90 * 1 days,\r\n                vestingInitPercent: 30,\r\n                vestingLookTime: 90 * 1 days,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 12\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"IDO\",\r\n                pool: (totalTokens * 1) / 100,\r\n                holderAddress: 0x9D8a13E81EB9e882b68C72281034216A3d113120,\r\n                vestingStartAfter: 120 * 1 days,\r\n                vestingInitPercent: 100,\r\n                vestingLookTime: 0,\r\n                vestingPeriod: 0,\r\n                vestingTime: 0\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Marketing\",\r\n                pool: (totalTokens * 20) / 100,\r\n                holderAddress: 0xd3f46d648B3763d480d2674Bd6944Fc9FBaA22A7,\r\n                vestingStartAfter: 0,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 0,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 48\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Reward & Stacking\",\r\n                pool: (totalTokens * 20) / 100,\r\n                holderAddress: 0x807C66c778eC6A47d5F2Dc6aDd9FF2A038B5f860,\r\n                vestingStartAfter: 0,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 0,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 48\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Team\",\r\n                pool: (totalTokens * 15) / 100,\r\n                holderAddress: 0xcA0b7B9e6Bc0AEAcAB9a9425c645e789Db0D4ba8,\r\n                vestingStartAfter: 0,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 365 * 1 days,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 36\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Advisor\",\r\n                pool: (totalTokens * 5) / 100,\r\n                holderAddress: 0xB13e0D5613Bb024a3F517c9787E609C74A436eb3,\r\n                vestingStartAfter: 0,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 365 * 1 days,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 36\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Reserve fund\",\r\n                pool: (totalTokens * 15) / 100,\r\n                holderAddress: 0xEb164a509C3c5f195cED75c4195afd9e24837deB,\r\n                vestingStartAfter: 0,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 0,\r\n                vestingPeriod: 30 * 1 days,\r\n                vestingTime: 48\r\n            })\r\n        );\r\n        holders.push(\r\n            Holder({\r\n                name: \"Liquidity\",\r\n                pool: (totalTokens * 7) / 100,\r\n                holderAddress: 0x11a3e5eF12599F002f44888aC4D4a5e32B3FEec4,\r\n                vestingStartAfter: 120 days,\r\n                vestingInitPercent: 0,\r\n                vestingLookTime: 0,\r\n                vestingPeriod: 60 days,\r\n                vestingTime: 10\r\n            })\r\n        );\r\n\r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            Holder memory holder = holders[i];\r\n            uint256 vestingInitAmount = (holder.pool *\r\n                holder.vestingInitPercent) / 100;\r\n            uint256 vestingLookedAmount = holder.pool - vestingInitAmount;\r\n\r\n            // Reward & stacking: Release monthly with in 48 months.\r\n            // Will start from 1.010.000 tokens and each month will increase 90.000 token\r\n            if (compareStrings(holder.name, \"Reward & Stacking\") == true) {\r\n                address vestingLookedContractAddress = timelockFactory\r\n                    .createTimelock(\r\n                        this,\r\n                        holder.holderAddress,\r\n                        startTime +\r\n                            holder.vestingStartAfter +\r\n                            holder.vestingLookTime,\r\n                        1010000000000000000000000,\r\n                        holder.vestingPeriod,\r\n                        90000000000000000000000\r\n                    );\r\n                _mint(vestingLookedContractAddress, vestingLookedAmount);\r\n                timeLockedContractAddress.push(\r\n                    TimeLockedContractAddress({\r\n                        desc: append(holder.name, \"(Locked)\"),\r\n                        holderName: holder.name,\r\n                        amount: vestingLookedAmount,\r\n                        contractAddress: vestingLookedContractAddress\r\n                    })\r\n                );\r\n            }\r\n            // For the other holders\r\n            else {\r\n                // Pay initial vesting amount for each release plan\r\n                if (vestingInitAmount > 0) {\r\n                    if (holder.vestingStartAfter == 0) {\r\n                        _mint(holder.holderAddress, vestingInitAmount);\r\n                    } else {\r\n                        address vestingInitContractAddress = timelockFactory\r\n                            .createTimelock(\r\n                                this,\r\n                                holder.holderAddress,\r\n                                startTime + holder.vestingStartAfter,\r\n                                vestingInitAmount,\r\n                                0,\r\n                                0\r\n                            );\r\n                        _mint(vestingInitContractAddress, vestingInitAmount);\r\n                        timeLockedContractAddress.push(\r\n                            TimeLockedContractAddress({\r\n                                desc: append(holder.name, \"(Initial)\"),\r\n                                holderName: holder.name,\r\n                                amount: vestingInitAmount,\r\n                                contractAddress: vestingInitContractAddress\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n\r\n                // Look token following vesting plan\r\n                if (holder.vestingTime > 0) {\r\n                    address vestingLookedContractAddress = timelockFactory\r\n                        .createTimelock(\r\n                            this,\r\n                            holder.holderAddress,\r\n                            startTime +\r\n                                holder.vestingStartAfter +\r\n                                holder.vestingLookTime,\r\n                            vestingLookedAmount / holder.vestingTime,\r\n                            holder.vestingPeriod,\r\n                            0\r\n                        );\r\n                    _mint(vestingLookedContractAddress, vestingLookedAmount);\r\n                    timeLockedContractAddress.push(\r\n                        TimeLockedContractAddress({\r\n                            desc: append(holder.name, \"(Locked)\"),\r\n                            holderName: holder.name,\r\n                            amount: vestingLookedAmount,\r\n                            contractAddress: vestingLookedContractAddress\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (keccak256(abi.encodePacked((a))) ==\r\n            keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function append(string memory s1, string memory s2)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(s1, s2));\r\n    }\r\n\r\n    function getHolders() public view returns (Holder[] memory) {\r\n        return holders;\r\n    }\r\n\r\n    function getTimeLockedContractAddresses()\r\n        public\r\n        view\r\n        returns (TimeLockedContractAddress[] memory)\r\n    {\r\n        return timeLockedContractAddress;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        require(\r\n            totalSupply() + amount <= totalTokens,\r\n            \"Exceed Max total supply\"\r\n        );\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function snapshot() external onlyOwner {\r\n        _snapshot();\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override(ERC20, ERC20Snapshot) whenNotPaused {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function getBurnedAmountTotal() external view returns (uint256 _amount) {\r\n        return totalTokens.sub(totalSupply());\r\n    }\r\n}\r\n\r\ncontract TestTokenTimeLock is\r\n    ERC20,\r\n    ERC20Burnable,\r\n    ERC20Snapshot,\r\n    Ownable,\r\n    Pausable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private totalTokens = 1000000000000000000000000000; // 1.000.000.000 token;\r\n    address public timeLockedContractAddress;\r\n\r\n    constructor() ERC20(\"TestTokenTimeLock\", \"TTL\") {\r\n        TimelockFactory timelockFactory = new TimelockFactory();\r\n        timeLockedContractAddress = timelockFactory.createTimelock(\r\n            this,\r\n            0xA97D6E1B038e3eDC8953CaC5cB4E6277F33E05E9,\r\n            block.timestamp,\r\n            2000,\r\n            15 seconds,\r\n            100\r\n        );\r\n        _mint(timeLockedContractAddress, totalTokens);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        require(\r\n            totalSupply() + amount <= totalTokens,\r\n            \"Exceed Max total supply\"\r\n        );\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function snapshot() external onlyOwner {\r\n        _snapshot();\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override(ERC20, ERC20Snapshot) whenNotPaused {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function getBurnedAmountTotal() external view returns (uint256 _amount) {\r\n        return totalTokens.sub(totalSupply());\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingInitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingLookTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Holder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeLockedContractAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"holderName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct TimeLockedContractAddress[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingInitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingLookTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeLockedContractAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"holderName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bee", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd3ad65f857116c0377597e127a6c434efa50365588538282f4f2bdf9bbe6e4c"}